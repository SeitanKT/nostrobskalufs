//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Kobold Tribes New
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_BankPreload;

//--------------------------------------------------------------------------------------------------
// Custom Script: Natives
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"

//--------------------------------------------------------------------------------------------------
// Custom Script: Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_interactRadius = 6.0;
const fixed gv_interactRadiusBonus = 1.0;
const int gv_startingGold = 25;
const int gv_players = 15;
const int gv_maxTeams = 14;
const fixed gv_gameVersion = 1.34;
const fixed gv_periodInterval = 0.5;
const fixed gv_musicVolume = 100.0;
const int gv_autobalanceTeams = 2;
const int gv_tribeNamesCount = 86;
const int gv_teamColorCount = 15;
const int gv_pGFAmount = 19;
const int gv_maxWeapLevel = 100;
const int gv_rewardLevelRequirement = 5;
const int gv_rewardTypes = 3;
const int gv_rewardCategories = 3;
const int gv_rewardItems = 28;
const int gv_trolzl12 = 12;
const int gv_reprimandedMax = 100;
const bool gv_winterHolidays = false;
const int gv_questAmount = 16;
const fixed gv_questTimerUpdateDelay = 2.25;
const int gv_challengers = 2;
const int gv_arenaSpectators = 9;
const fixed gv_monstrosityLeashRadius = 32.0;
const int gv_winterDriftCap = 500;
const int gv_veilShrineMax = 3;
const int gv_expeditionAreas = 5;
const fixed gv_expeditionRadius = 14.0;
const fixed gv_uAMeleeHeight = 2.75;
const int gv_fMCap = 3;
const fixed gv_transitionTime = 20.0;
const fixed gv_dayFogDensity = 0.03;
const fixed gv_nightFogDensity = 0.15;
const fixed gv_fogDensityTransitionTime = 20.0;
const int gv_weatherSize = 13;
const fixed gv_stagAlarmRadius = 9.0;
const int gv_trollz = 8;
const int gv_aDTMax = 100;
const int gv_armorPrecision = 1;
const fixed gv_meleeRange = 2.0;
const int gv_mainHandSlot = 1;
const int gv_offhandSlot = 2;
const int gv_armorSlot = 3;
const int gv_backpackSlot = 4;
const fixed gv_positiveArmorFactor = 0.03;
const fixed gv_gravesingerHealFactor = 0.3;
const int gv_fishRegions = 6;
const int gv_fishRewards = 13;
const fixed gv_fishTime = 30.0;
const fixed gv_birdScoutXOffset = -0.05;
const fixed gv_birdScoutYOffset = 0.0;
const fixed gv_birdScoutZOffset = 3.2;
const int gv_gossipAmount = 10;
const int gv_tTQueueSize = 20;
const int gv_aIRetreatStringAmount = 8;
const int gv_aIReviveStringAmount = 3;
const int gv_aIQuestKillStringAmount = 7;
const int gv_aIQuestLootStringAmount = 6;
const int gv_aIQuestStringAmount = 7;
const int gv_aIQuestGladiatorStringAmount = 3;
const int gv_aIQuestDeadnightStringAmount = 4;
const int gv_aISpellStringAmount = 5;
const int gv_aITrapsStringAmount = 3;
const int gv_aITauntStringAmount = 8;
const int gv_aIMonumentStringAmount = 4;
const int gv_aIMonumentBuildStringAmount = 2;
const int gv_aIExileStringAmount = 4;
const int gv_aIPirateStringAmount = 5;
const int gv_aIPetStringAmount = 3;
const int gv_aIChefQuestStringAmount = 2;
const int gv_aIEnemySightedAmount = 10;
const int gv_aIWatchTowerBuilderAmount = 3;
const int gv_aIFishingStringAmount = 5;
const bool gv_aIFFATestingOverride = false;
const fixed gv_errorEstimationFactor = 0.65;
const int gv_numberofnames = 80;
const int gv_aIStatusIndex = 4;
const int gv_tutorialTexts = 41;
const int gv_inGameHintsAmount = 40;
const int gv_maxEquipmentCount = 56;

//--------------------------------------------------------------------------------------------------
// Custom Script: Structs
//--------------------------------------------------------------------------------------------------
struct gs_Resources {
    unitgroup lv_lumber;
    unitgroup lv_lumberParts;
    unitgroup lv_stone;
    unitgroup lv_wool;
    unitgroup lv_leather;
    unitgroup lv_ironOre;
    unitgroup lv_shadowstone;
    unitgroup lv_infusedLumber;
    unitgroup lv_radiantGem;
    unitgroup lv_spicyHerbs;
    unitgroup lv_sunflowers;
    unitgroup lv_sageberries;
    unitgroup lv_handfulofBerries;
    unitgroup lv_beer;
    unitgroup lv_bearPelts;
    unitgroup lv_rawLamb;
    unitgroup lv_rawWolf;
    unitgroup lv_rawPheasant;
    unitgroup lv_murlocSkulls;
    unitgroup lv_murlocSkullFragments;
    unitgroup lv_whiteBearFangs;
    unitgroup lv_boneTalismans;
    unitgroup lv_sturdyWoodenSticks;
    unitgroup lv_trollNoseBones;
    unitgroup lv_food;
    unitgroup lv_foodRaw;
    unitgroup lv_foodCooked;
    unitgroup lv_consumables;
    unitgroup lv_obedRods;
    unitgroup lv_fishingRods;
    unitgroup lv_beerPhez;
    unitgroup lv_wolfEntrecote;
    unitgroup lv_lambFeast;
    unitgroup lv_huntsmansJackets;
    unitgroup lv_warmWoolTunics;
    unitgroup lv_antlers;
    unitgroup lv_rawStag;
    unitgroup lv_candles;
    unitgroup lv_lanterns;
    unitgroup lv_skeletalFingers;
    unitgroup lv_reapersHands;
    unitgroup lv_berserkersBattleAxes;
    unitgroup lv_roastedLamb;
    unitgroup lv_wolfSteak;
    unitgroup lv_sharpIronPickaxe;
};
struct gs_Stats {
    fixed lv_sightRadius;
    fixed lv_baseDamage;
    fixed lv_baseArmor;
    fixed lv_maximumLife;
    fixed lv_maximumEnergy;
};
struct gs_GameStats {
    int lv_wolvesKilled;
    int lv_drunkardsBribed;
    int lv_mealsCooked;
    int lv_itemsCrafted;
    int lv_playerKills;
    int lv_spellsCast;
    int lv_goldEarned;
    int lv_treesPlanted;
    int lv_treesFelled;
    int lv_storedItems;
    int lv_trapsTriggered;
    int lv_boomstickTime;
    int lv_timesResurrected;
    int lv_murlocsHired;
    int lv_rainAvoided;
    int lv_buildingsCreated;
    int lv_nodesDiscovered;
    int lv_birdsScouts;
    int lv_petsTamed;
    int lv_sheepBred;
    int lv_berriesPicked;
};
struct gs_PlayerData {
    int lv_team;
    gs_Resources lv_resources;
    unitgroup lv_equippedMainHandG;
    unitgroup lv_equippedOffhandG;
    unitgroup lv_equippedArmorG;
    int lv_backpackSize;
    unit lv_kobold;
    gs_Stats lv_stats;
    gs_GameStats lv_gameStats;
    fixed lv_warmth;
    fixed lv_hunger;
    fixed lv_stamina;
    timer lv_runSpeedPerkCooldown;
    bool lv_gathering;
    bool lv_hasMainSpell;
    bool lv_hasAllSpells;
    unitgroup lv_murlocSlaves;
    bool lv_alive;
    bool lv_isAI;
    bool lv_reincarnation;
    unit lv_reincarnationBuilding;
    fixed lv_warmthStaminaPenaltyFactor;
    fixed lv_hungerRegenPenaltyFactor;
    int lv_fishCaught;
    bool lv_showDeathMessage;
    unit lv_monsterStalker;
    unit lv_twinThrowingAxesFocus;
};
struct gs_TeamData {
    text lv_name;
    color lv_color;
    int lv_rating;
    playergroup lv_members;
    point lv_startingLocation;
    bool lv_allDead;
    unit lv_watchTower;
    bool lv_watchTowerStructuralReinforcement;
    bool lv_watchTowerInfirmary;
    bool lv_watchTowerBarracks;
    bool lv_watchTowerStorage;
    bool lv_watchTowerCanteen;
    bool lv_watchTowerArmory;
    bool lv_watchTowerArcaneSanctum;
    bool lv_watchTowerBeaverPen;
    int lv_aIWatchTowerBuilder;
    bool lv_watchTowerDefeat;
    int lv_koboldsAlive;
    int lv_koboldsTotal;
    string lv_aICustomization;
};
struct gs_ErrorMessage {
    text lv_outOfRange;
    text lv_notEnoughGold;
    text lv_notEnoughResources;
    text lv_itemEquipReq;
    text lv_trophiesError;
    text lv_notEnoughIngredients;
    text lv_busyError;
    text lv_tameError;
    text lv_skillReq;
    text lv_alreadyHaveUpgrade;
    text lv_alreadyHaveSchematic;
    text lv_spellAlreadyLearned;
    text lv_dead;
    text lv_rainOrWinter;
};
struct gs_reward {
    int lv_type;
    text lv_title;
    int lv_titleStyle;
    text lv_tooltip;
    int lv_cost;
    int lv_requirementIndex;
    text lv_requirementText;
};
struct gs_AISupply {
    int lv_leather;
    int lv_leatherBonus;
    int lv_wool;
    int lv_shadowstone;
    int lv_lumber;
    int lv_stone;
    int lv_spicyHerbs;
    int lv_radiantGems;
    int lv_ironOre;
    int lv_sunflowers;
    int lv_food;
    int lv_infusedLumber;
    int lv_bearPelt;
    int lv_candles;
    int lv_antlers;
    int lv_sturdyWoodenSticks;
    int lv_warmWoolTunics;
    int lv_murlocSlaves;
    int lv_murlocSkulls;
    int lv_sageberry;
    int lv_lanterns;
};
struct gs_AIData {
    bool lv_logicInProgress;
    text lv_name;
    point lv_weightedPOI;
    string lv_customization;
    gs_AISupply lv_supply;
    unitgroup lv_tradeItems;
    unit lv_focalNode;
    timer lv_tamingTime;
    timer lv_fishingTime;
    timer lv_focusedRetreatTimer;
    timer lv_buildPlacement;
    fixed lv_tradeRoamRadius;
    fixed lv_sightRange;
    timer lv_shadowCloakMinimum;
    int lv_richLimit;
    timer lv_supplyUpdateFrequency;
    int lv_cycle;
    string lv_smithyDesire;
    string lv_benchDesire;
    timer lv_lumberjackTimer;
    timer lv_explorerTimer;
    fixed lv_explorerAngle;
    int lv_aIBuildIndex;
    int lv_cycleSlaveJob;
    int lv_lastCombatState;
    fixed lv_difficultyRating;
    unitgroup lv_enemies;
};
struct gs_ItemTypeData {
    string lv_name;
    int lv_level;
    string lv_class;
};

//--------------------------------------------------------------------------------------------------
// Custom Script: Variables
//--------------------------------------------------------------------------------------------------
point gv_center;
gs_Resources gv_resources;
gs_Stats gv_stats;
gs_GameStats gv_gameStats;
gs_PlayerData[gv_players + 1] gv_playerData;
gs_TeamData[gv_maxTeams + 1] gv_teamData;
gs_ErrorMessage gv_errorMessage;
bool gv_singlePlayer;
bool gv_cheated;
bool gv_tutorial;
bool gv_rated;
bool gv_validRatedGame;
fixed[gv_players + 1] gv_lastGameVersion;
int gv_gameMode;
fixed gv_dayNightCycle;
int gv_periodCycle;
int gv_averagePlayerLevel;
int gv_activeTeams;
playergroup[gv_maxTeams + 1] gv_team;
point[gv_maxTeams + 1] gv_teamStartLocation;
int gv_teamName;
int gv_tribeNamesTaken;
string[gv_tribeNamesCount + 1] gv_tribeNamePool;
int gv_teamColorTaken;
color[gv_teamColorCount + 1] gv_teamColorPool;
point[gv_maxTeams + 1] gv_multiTeamStart;
int gv_statusDialog;
int gv_warmthItem;
int gv_hungerItem;
int gv_fatigueItem;
bool[gv_players + 1] gv_woundedFlashActive;
int gv_woundedFlash;
int gv_woundedFlashImage;
fixed gv_gameDuration;
int[gv_players + 1] gv_accxp;
int[gv_players + 1] gv_acclvl;
int[gv_players + 1] gv_accwins;
int[gv_players + 1] gv_acclosses;
int[gv_players + 1] gv_accpp;
int[gv_players + 1] gv_kobkills;
int[gv_players + 1] gv_kobdeaths;
int[gv_players + 1] gv_ratingvalue;
int[gv_players + 1] gv_ratinggames;
string[gv_players + 1] gv_perks;
string[gv_players + 1] gv_hints;
string[gv_players + 1] gv_matchhistory;
bool[gv_players + 1] gv_rezhintshown;
int[gv_players + 1] gv_conqpoints;
int[gv_players + 1] gv_gladSpree;
int[gv_players + 1] gv_rewReq;
bool[gv_players + 1] gv_bankSynced;
int gv_perkDialogSmall;
int gv_perkDialogSmallBTN;
int gv_perkWindow;
int[5][11] gv_perkButton;
int[5][11] gv_perkImage;
int[5][11] gv_perkMarker;
int[5] gv_perkTierLabel;
int gv_perkTitle;
int gv_perkReset;
int[gv_players + 1] gv_perkPointsSpent;
string[5][11] gv_perkImageFile;
text[5][11] gv_perkTooltip;
text[gv_pGFAmount + 1] gv_postgameFeatText;
text[gv_pGFAmount + 1] gv_postgameFeatTooltip;
bool[gv_pGFAmount + 1] gv_postgameFeatValid;
bool[gv_pGFAmount + 1][gv_players + 1] gv_postgameFeatShown;
int gv_pGSMultiMainWindow;
int[gv_maxTeams + 1] gv_pGSMultiTeamLabel;
int[gv_maxTeams + 1] gv_pGSMultiPlayerLabel;
int gv_pGSWindowSmall;
int gv_pGSWindowSmallBTN;
int gv_pGSWindowLarge;
int[3] gv_pGSWinLossLabel;
int[11] gv_pGSPlayerLabelT1;
int[11] gv_pGSWinLabelT1;
int[11] gv_pGSLossLabelT1;
int[11] gv_pGSPlayerLabelT2;
int[11] gv_pGSWinLabelT2;
int[11] gv_pGSLossLabelT2;
int[gv_maxWeapLevel + 1][gv_players + 1] gv_favouriteWeaponRating;
gs_reward[101] gv_reward;
int gv_rewardindex;
int[gv_players + 1][gv_rewardCategories + 1][gv_rewardItems + 1] gv_rewardState;
text[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardTitle;
int[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardCost;
text[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardTooltip;
text[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardReq;
bool[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardReqExists;
bool[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardHideIfReqIncomplete;
int gv_rewardsOpenerDialog;
int gv_rewardsOpenerItem;
int gv_rewardsMainWindow;
int[gv_rewardItems + 1] gv_rewardButton;
int gv_conqpointsLabel;
int[gv_rewardCategories + 1] gv_rewardsCatBTN;
int[gv_players + 1] gv_rewardsCatSelect;
int[gv_rewardItems + 1] gv_rewardsTitleStyle;
bool[gv_players + 1] gv_wizardVisitEveryNight;
string[gv_players + 1] gv_slayer;
timer[gv_players + 1] gv_destroyerTimer;
bool[gv_players + 1] gv_destroyerStarted;
int[gv_players + 1] gv_destroyerProgress;
int[gv_players + 1] gv_alliesResurrected;
bool[gv_players + 1] gv_vanquisherEnabled;
bool[gv_players + 1] gv_aristocrat;
string[gv_players + 1] gv_gossipTypeListened;
bool gv_championGame;
timer gv_kingslayerTimer;
string[gv_players + 1] gv_handle;
bool[gv_players + 1] gv_reprimanded;
string[gv_reprimandedMax + 1] gv_reprimandedList;
int gv_reprimandIndex;
int[gv_questAmount + 1] gv_questPool;
int gv_questsCycled;
timer gv_questDelayTimer;
timer gv_questTimer;
bool gv_questActive;
int gv_questIndexActive;
bool[gv_questAmount + 1] gv_questCompleted;
text gv_questText;
fixed gv_questInitialDelay;
int gv_questObjective;
timer gv_questTimerUpdate;
timer gv_questTextDelay;
unit gv_murlocChief;
int gv_chiefPing;
unitgroup gv_treasureChests;
unit[21] gv_treasureChest;
int[21] gv_treasurePing;
unit gv_shipment;
int gv_shipmentPing;
unit gv_merchant;
int gv_merchantPing;
int[gv_maxTeams + 1] gv_grownTreesTeam;
int gv_grownTreesLeadingTeam;
unit gv_feastChef;
int gv_feastChefPing;
bool[gv_maxTeams + 1] gv_lambSirloinEnabled;
bool[gv_maxTeams + 1][4] gv_feastCooked;
unit[gv_challengers + 1] gv_zoneChecker;
int[gv_challengers + 1] gv_zonePing;
unit[gv_challengers + 1] gv_challenger;
int gv_gladiatorPhase;
point[gv_challengers + 1] gv_gladiatorStart;
point[gv_challengers + 1] gv_returnPoint;
revealer[gv_players + 1] gv_arenaRevealer;
point[gv_arenaSpectators + 1] gv_arenaSpectator;
string gv_previousSpectators;
int gv_deadnightPhase;
int gv_ghoulExtra;
unit gv_warlord;
int gv_warlordPing;
int[gv_maxTeams + 1] gv_trufflesFound;
region gv_noTrufflesEre;
int[gv_players + 1] gv_truffleSkillBonus;
int gv_truffleLeadingTeam;
bool[gv_players + 1] gv_winterFrozen;
fixed[gv_players + 1] gv_coldResistance;
int gv_bearsKilled;
int gv_witchSpawnReq;
bool gv_witchSummoned;
unit gv_frostWitch;
int gv_frostWitchPing;
bool gv_winterProlongable;
bool gv_winter;
bool gv_winterSoon;
fixed gv_winterCounter;
fixed gv_winterDelayCounter;
bool gv_winterJustStarted;
actor[gv_weatherSize + 1][gv_weatherSize + 1] gv_winterEmitter;
int gv_winterDriftCounter;
actor[gv_winterDriftCap + 1] gv_winterDrift;
int gv_winterDriftCleanup;
point gv_piratesTreasureLocation;
bool[gv_players + 1] gv_piratesBeerHint;
unit gv_wizard;
int gv_wizardPing;
bool gv_extensionAllowed;
unit gv_exile;
int gv_attackers;
int gv_defenders;
int gv_exilePing;
int gv_exileRewardPing;
unit[gv_veilShrineMax + 1] gv_veilShrine;
unit[gv_veilShrineMax + 1][7] gv_veilShrinePad;
int gv_veilShrineCount;
int[gv_veilShrineMax + 1] gv_veilShrinePing;
string[gv_veilShrineMax + 1] gv_veilShrineSequence;
timer gv_veilGuardianTimer;
revealer gv_darkness;
bool[gv_maxTeams + 1] gv_veilofDarknessActive;
timer gv_veilofDarknessTimer;
point[gv_expeditionAreas + 1][4] gv_expeditionPoint;
bool[gv_maxTeams + 1][gv_expeditionAreas + 1] gv_expeditionProgress;
int[gv_maxTeams + 1] gv_expeditionProgressCount;
point[gv_expeditionAreas + 1] gv_expeditionActivePoint;
revealer[gv_players + 1][gv_expeditionAreas + 1] gv_expeditionRevealer;
int[gv_maxTeams + 1][gv_expeditionAreas + 1] gv_expeditionPing;
unit[gv_expeditionAreas + 1] gv_expeditionRing;
int gv_expeditionLeadingTeam;
bool[gv_players + 1] gv_dLJRHintShown;
timer gv_rABKillTimer;
int gv_minimalistSkillDialog;
int[6] gv_minimalistSkillDialogItem;
int gv_skillButton;
int gv_skillWindowBig;
int gv_skillWindowSmall;
int[6] gv_bTNSkillIncrease;
int[7] gv_skillLabel;
int[gv_players + 1] gv_skillForestry;
int[gv_players + 1] gv_skillMining;
int[gv_players + 1] gv_skillCooking;
int[gv_players + 1] gv_skillForaging;
int[gv_players + 1] gv_skillArtisanship;
int[gv_players + 1] gv_skillPointsPlayer;
unitgroup[gv_players + 1] gv_animalVisionGroup;
string[gv_players + 1] gv_learnedSpellsString;
fixed[gv_players + 1] gv_frostArmorDrainBuffer;
bool[gv_players + 1] gv_frostArmorDrainCycle;
fixed[gv_players + 1] gv_frostArmorBonus;
fixed gv_dayDuration;
fixed gv_nightDuration;
int gv_dayNight;
bool gv_b_Day;
int gv_day;
int gv_wolfsbanePlayer;
int gv_dayTimerDialog;
int gv_dayTimerProgress;
actor[gv_weatherSize + 1][gv_weatherSize + 1] gv_rainEmitter;
bool gv_rainJustStarted;
fixed gv_rainDelayCounter;
fixed gv_rainCounter;
int[gv_players + 1] gv_rainAmbience;
bool gv_rainingSoon;
bool gv_raining;
bool gv_lightsetTransition;
string[gv_rewardTypes + 1][gv_players + 1] gv_requirementString;
int gv_goldQuota;
int gv_birdQuota;
unitgroup[gv_maxTeams + 1] gv_discoveredBushesTeam;
unitgroup[gv_maxTeams + 1] gv_discoveredDepositsTeam;
int gv_stoneQuota;
int gv_elderTreeQuota;
int gv_direWolfQuota;
int gv_undeadQuota;
int gv_wolfQuota;
int gv_blueJunglefowlQuota;
int gv_sheepQuota;
int gv_bearQuota;
int gv_frostBearQuota;
int gv_stagQuota;
int gv_nightcrawlerQuota;
int gv_treeQuota;
unitgroup gv_wildSheep;
int[gv_players + 1] gv_aDTIndex;
int[gv_players + 1] gv_aDTCapPlayer;
fixed gv_damageTaken;
fixed gv_damageRaw;
bool gv_noDamage;
unit gv_lastCreatedItem;
bool[gv_players + 1] gv_scutumExclaimed;
int[gv_players + 1] gv_bearWilllpowerBonus;
region[gv_fishRegions + 1] gv_fishRegion;
fixed[gv_fishRegions + 1] gv_fishRegionEleveation;
string[gv_fishRewards + 1] gv_fishReward;
int[gv_gossipAmount + 1][gv_players + 1] gv_gossipPool;
int[gv_players + 1] gv_gossipListened;
timer gv_watchTowerTimer;
timer gv_watchTowerTimerUpdate;
bool gv_watchTowerTimerExtendable;
int gv_watchTowerObjective;
text gv_watchTowerObjectiveText;
unitgroup[gv_players + 1] gv_pets;
string[gv_players + 1] gv_taughtPetsString;
int[4][gv_players + 1] gv_predatoryKnowledgeStacks;
int[gv_players + 1] gv_antlerStacks;
int gv_observeRequest;
int gv_observeRequestBtn;
int[gv_players + 1] gv_observeAnswer;
int[gv_players + 1] gv_observeAnswerBtnYes;
int[gv_players + 1] gv_observeAnswerBtnNo;
int gv_rezzDialog;
int gv_rezzDialogTitle;
int[5] gv_rezzDialogBTN;
int[5][gv_players + 1] gv_rezzBTNTargetPlayer;
unit[gv_players + 1] gv_selectedShrine;
bool[gv_players + 1] gv_beingResurrected;
fixed[gv_players + 1] gv_savedXP;
int[gv_players + 1] gv_reincarnatePing;
timer[gv_players + 1] gv_reincarnationTimer;
int[gv_players + 1] gv_reincarnationTimerWindow;
int gv_winningTeam;
int gv_losingTeam;
playergroup gv_winningPlayers;
playergroup gv_losingPlayers;
bool[gv_players + 1] gv_dead;
bool gv_gameOver;
bool gv_gameStarted;
bool gv_banksInitialized;
unitgroup[gv_players + 1] gv_recentlyDamaged;
string[gv_players + 1] gv_dTAngles;
string[gv_players + 1] gv_dTAngles2;
int gv_dTConfigWindow;
int gv_dTScaleSlider;
int gv_dTScaleText;
fixed[gv_players + 1] gv_dTScaleValue;
int gv_dTDurationSlider;
int gv_dTDurationText;
fixed[gv_players + 1] gv_dTDurationValue;
int[3] gv_dTCheckbox;
int gv_dTClose;
bool[gv_players + 1] gv_dTDamageDoneOn;
bool[gv_players + 1] gv_dTDamageTakenOn;
int[gv_players + 1] gv_tTCycle;
int[gv_players + 1] gv_tTCurrentIndex;
int[gv_tTQueueSize + 1][gv_players + 1] gv_tTSize;
fixed[gv_tTQueueSize + 1][gv_players + 1] gv_tTDuration;
unit[gv_tTQueueSize + 1][gv_players + 1] gv_tTUnit;
int[gv_tTQueueSize + 1][gv_players + 1] gv_tTPlayer;
text[gv_tTQueueSize + 1][gv_players + 1] gv_tTText;
bool[gv_tTQueueSize + 1][gv_players + 1] gv_tTExists;
timer[gv_players + 1] gv_textTagTimer;
bool[gv_players + 1] gv_memory;
actor gv_memoryQancakesActor;
point gv_memoryQancakesPoint;
int[gv_players + 1] gv_backpackSize;
string[gv_aIRetreatStringAmount + 1] gv_aIRetreatString;
string[gv_aIReviveStringAmount + 1] gv_aIReviveString;
string[gv_aIQuestKillStringAmount + 1] gv_aIQuestKillString;
string[gv_aIQuestLootStringAmount + 1] gv_aIQuestLootString;
string[gv_aIQuestStringAmount + 1] gv_aIQuestString;
string[gv_aIQuestGladiatorStringAmount + 1] gv_aIQuestGladiatorString;
string[gv_aIQuestDeadnightStringAmount + 1] gv_aIQuestDeadnightString;
string[gv_aISpellStringAmount + 1] gv_aISpellString;
string[gv_aITrapsStringAmount + 1] gv_aITrapsString;
string[gv_aITauntStringAmount + 1] gv_aITauntString;
string[gv_aIMonumentStringAmount + 1] gv_aIMonumentString;
string[gv_aIMonumentBuildStringAmount + 1] gv_aIMonumentBuildString;
string[gv_aIExileStringAmount + 1] gv_aIExileString;
string[gv_aIPirateStringAmount + 1] gv_aIPirateString;
string[gv_aIPetStringAmount + 1] gv_aIPetString;
string[gv_aIChefQuestStringAmount + 1] gv_aIChefQuestString;
string[gv_aIEnemySightedAmount + 1] gv_aIEnemySighted;
string[gv_aIWatchTowerBuilderAmount + 1] gv_aIWatchTowerBuilder;
string[gv_aIFishingStringAmount + 1] gv_aIFishingString;
unit[gv_players + 1] gv_aISelected;
unitgroup[gv_players + 1] gv_aISelected2;
int gv_namestaken;
string[gv_numberofnames + 1] gv_aINamePool;
point[gv_maxTeams + 1] gv_aIPirateSearchT;
point[gv_players + 1] gv_aIPirateSearchP;
gs_AISupply gv_aISupply;
gs_AIData[gv_players + 1] gv_aIData;
int[gv_maxTeams + 1] gv_aIMonumentBuilder;
text[gv_tutorialTexts + 1] gv_tutorialText;
bool gv_pauseNextDusk;
bool gv_pauseNextDawn;
text gv_transcript;
point[gv_players + 1] gv_unstuckPoint;
int[gv_players + 1] gv_unstuckRating;
bool[gv_players + 1] gv_aFKUsed;
bool[gv_players + 1] gv_admin;
region gv_region001;
region gv_regionArena;
region gv_region002;
region gv_regionMemory;
region gv_regionFishMarSara001;
region gv_regionFishMarSara002;
region gv_regionFishBelShir001;
region gv_regionFishBelShir002;
region gv_regionFishShakuras001;
region gv_regionFishSouthlands3001;
region gv_regionFishSouthlands3002;
region gv_regionFishSouthlands2001;
region gv_regionFishSouthlands2002;
region gv_regionFishBelShir003;
region gv_regionFishShakuras002;
region gv_regionFishBelShir004;
region gv_regionFishBelShir005;
region gv_regionFishBelShir006;
region gv_regionFishBelShir007;
region gv_regionFishBelShir008;
region gv_regionFishShakuras003;
region gv_regionFishZhakulDas001;
region gv_regionFishZhakulDas002;
region gv_regionArenaThrowArea;
region gv_regionFishChar001;
region gv_regionFishChar002;
region gv_regionFishChar003;
gs_ItemTypeData[gv_maxEquipmentCount] gv_equipmentData;

//--------------------------------------------------------------------------------------------------
// Custom Script: InitGlobals
//--------------------------------------------------------------------------------------------------
void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;
    int i;
    int tc = 0;
    gv_center = PointFromId(2850);
    for(i=0;i<15; i+=1){
        if(PlayerStatus(i) == c_playerStatusActive && PlayerType(i) == c_playerTypeUser){
            tc +=1;
        }
    }
    gv_singlePlayer = tc == 1;
    gv_cheated = false;
    gv_resources.lv_lumber = UnitGroupEmpty();
    gv_resources.lv_lumberParts = UnitGroupEmpty();
    gv_resources.lv_stone = UnitGroupEmpty();
    gv_resources.lv_wool = UnitGroupEmpty();
    gv_resources.lv_leather = UnitGroupEmpty();
    gv_resources.lv_ironOre = UnitGroupEmpty();
    gv_resources.lv_shadowstone = UnitGroupEmpty();
    gv_resources.lv_infusedLumber = UnitGroupEmpty();
    gv_resources.lv_radiantGem = UnitGroupEmpty();
    gv_resources.lv_spicyHerbs = UnitGroupEmpty();
    gv_resources.lv_sunflowers = UnitGroupEmpty();
    gv_resources.lv_sageberries = UnitGroupEmpty();
    gv_resources.lv_handfulofBerries = UnitGroupEmpty();
    gv_resources.lv_beer = UnitGroupEmpty();
    gv_resources.lv_bearPelts = UnitGroupEmpty();
    gv_resources.lv_rawLamb = UnitGroupEmpty();
    gv_resources.lv_rawWolf = UnitGroupEmpty();
    gv_resources.lv_rawPheasant = UnitGroupEmpty();
    gv_resources.lv_murlocSkulls = UnitGroupEmpty();
    gv_resources.lv_murlocSkullFragments = UnitGroupEmpty();
    gv_resources.lv_whiteBearFangs = UnitGroupEmpty();
    gv_resources.lv_boneTalismans = UnitGroupEmpty();
    gv_resources.lv_sturdyWoodenSticks = UnitGroupEmpty();
    gv_resources.lv_trollNoseBones = UnitGroupEmpty();
    gv_resources.lv_food = UnitGroupEmpty();
    gv_resources.lv_foodRaw = UnitGroupEmpty();
    gv_resources.lv_foodCooked = UnitGroupEmpty();
    gv_resources.lv_consumables = UnitGroupEmpty();
    gv_resources.lv_obedRods = UnitGroupEmpty();
    gv_resources.lv_fishingRods = UnitGroupEmpty();
    gv_resources.lv_beerPhez = UnitGroupEmpty();
    gv_resources.lv_wolfEntrecote = UnitGroupEmpty();
    gv_resources.lv_lambFeast = UnitGroupEmpty();
    gv_resources.lv_huntsmansJackets = UnitGroupEmpty();
    gv_resources.lv_warmWoolTunics = UnitGroupEmpty();
    gv_resources.lv_antlers = UnitGroupEmpty();
    gv_resources.lv_rawStag = UnitGroupEmpty();
    gv_resources.lv_candles = UnitGroupEmpty();
    gv_resources.lv_lanterns = UnitGroupEmpty();
    gv_resources.lv_skeletalFingers = UnitGroupEmpty();
    gv_resources.lv_reapersHands = UnitGroupEmpty();
    gv_resources.lv_berserkersBattleAxes = UnitGroupEmpty();
    gv_resources.lv_roastedLamb = UnitGroupEmpty();
    gv_resources.lv_wolfSteak = UnitGroupEmpty();
    gv_resources.lv_sharpIronPickaxe = UnitGroupEmpty();
    gv_stats.lv_sightRadius = 12.0;
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_playerData[init_i].lv_resources.lv_lumber = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_lumberParts = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_stone = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_wool = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_leather = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_ironOre = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_shadowstone = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_infusedLumber = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_radiantGem = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_spicyHerbs = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_sunflowers = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_sageberries = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_handfulofBerries = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_beer = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_bearPelts = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_rawLamb = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_rawWolf = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_rawPheasant = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_murlocSkulls = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_murlocSkullFragments = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_whiteBearFangs = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_boneTalismans = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_sturdyWoodenSticks = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_trollNoseBones = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_food = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_foodRaw = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_foodCooked = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_consumables = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_obedRods = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_fishingRods = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_beerPhez = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_wolfEntrecote = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_lambFeast = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_huntsmansJackets = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_warmWoolTunics = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_antlers = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_rawStag = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_candles = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_lanterns = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_skeletalFingers = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_reapersHands = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_berserkersBattleAxes = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_roastedLamb = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_wolfSteak = UnitGroupEmpty();
        gv_playerData[init_i].lv_resources.lv_sharpIronPickaxe = UnitGroupEmpty();
        gv_playerData[init_i].lv_equippedMainHandG = UnitGroupEmpty();
        gv_playerData[init_i].lv_equippedOffhandG = UnitGroupEmpty();
        gv_playerData[init_i].lv_equippedArmorG = UnitGroupEmpty();
        gv_playerData[init_i].lv_backpackSize = 20;
        gv_playerData[init_i].lv_stats.lv_sightRadius = 12.0;
        gv_playerData[init_i].lv_warmth = 100.0;
        gv_playerData[init_i].lv_hunger = 100.0;
        gv_playerData[init_i].lv_stamina = 100.0;
        gv_playerData[init_i].lv_runSpeedPerkCooldown = TimerCreate();
        gv_playerData[init_i].lv_murlocSlaves = UnitGroupEmpty();
        gv_playerData[init_i].lv_warmthStaminaPenaltyFactor = 1.0;
        gv_playerData[init_i].lv_hungerRegenPenaltyFactor = 1.0;
        gv_playerData[init_i].lv_showDeathMessage = true;
    }
    for (init_i = 0; init_i <= gv_maxTeams; init_i += 1) {
        gv_teamData[init_i].lv_color = Color(0,0,0);
        gv_teamData[init_i].lv_members = PlayerGroupEmpty();
        gv_teamData[init_i].lv_aICustomization = "000000000000";
    }
    gv_errorMessage.lv_outOfRange = StringExternal("Param/Value/CAA4C983");
    gv_errorMessage.lv_notEnoughGold = StringExternal("Param/Value/2FA628B6");
    gv_errorMessage.lv_notEnoughResources = StringExternal("Param/Value/DC626005");
    gv_errorMessage.lv_itemEquipReq = StringExternal("Param/Value/F55CC1C8");
    gv_errorMessage.lv_trophiesError = StringExternal("Param/Value/7C192360");
    gv_errorMessage.lv_notEnoughIngredients = StringExternal("Param/Value/E0C47581");
    gv_errorMessage.lv_busyError = StringExternal("Param/Value/2B2595A9");
    gv_errorMessage.lv_tameError = StringExternal("Param/Value/FA59CA97");
    gv_errorMessage.lv_skillReq = StringExternal("Param/Value/C4C92798");
    gv_errorMessage.lv_alreadyHaveUpgrade = StringExternal("Param/Value/E68D6629");
    gv_errorMessage.lv_alreadyHaveSchematic = StringExternal("Param/Value/D4CE7498");
    gv_errorMessage.lv_spellAlreadyLearned = StringExternal("Param/Value/402B2D6F");
    gv_errorMessage.lv_dead = StringExternal("Param/Value/86870EF1");
    gv_errorMessage.lv_rainOrWinter = StringExternal("Param/Value/FCBBE202");
    for (init_i = 0; init_i <= gv_maxTeams; init_i += 1) {
        gv_team[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_tribeNamesCount; init_i += 1) {
        gv_tribeNamePool[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_teamColorCount; init_i += 1) {
        gv_teamColorPool[init_i] = Color(0,0,0);
    }
    gv_statusDialog = c_invalidDialogId;
    gv_warmthItem = c_invalidDialogControlId;
    gv_hungerItem = c_invalidDialogControlId;
    gv_fatigueItem = c_invalidDialogControlId;
    gv_woundedFlash = c_invalidDialogId;
    gv_woundedFlashImage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_perks[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_hints[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_matchhistory[init_i] = "";
    }
    gv_perkDialogSmall = c_invalidDialogId;
    gv_perkDialogSmallBTN = c_invalidDialogControlId;
    gv_perkWindow = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_perkButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_perkImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_perkMarker[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_perkTierLabel[init_i] = c_invalidDialogControlId;
    }
    gv_perkTitle = c_invalidDialogControlId;
    gv_perkReset = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_pGFAmount; init_i += 1) {
        gv_postgameFeatValid[init_i] = true;
    }
    gv_pGSMultiMainWindow = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_maxTeams; init_i += 1) {
        gv_pGSMultiTeamLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_maxTeams; init_i += 1) {
        gv_pGSMultiPlayerLabel[init_i] = c_invalidDialogControlId;
    }
    gv_pGSWindowSmall = c_invalidDialogId;
    gv_pGSWindowSmallBTN = c_invalidDialogControlId;
    gv_pGSWindowLarge = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_pGSWinLossLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_pGSPlayerLabelT1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_pGSWinLabelT1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_pGSLossLabelT1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_pGSPlayerLabelT2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_pGSWinLabelT2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_pGSLossLabelT2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        for (init_j = 0; init_j <= gv_rewardCategories; init_j += 1) {
            for (init_k = 0; init_k <= gv_rewardItems; init_k += 1) {
                gv_rewardState[init_i][init_j][init_k] = 1;
            }
        }
    }
    for (init_i = 0; init_i <= gv_rewardTypes; init_i += 1) {
        for (init_j = 0; init_j <= gv_rewardItems; init_j += 1) {
            gv_rewardCost[init_i][init_j] = -1;
        }
    }
    gv_rewardsOpenerDialog = c_invalidDialogId;
    gv_rewardsOpenerItem = c_invalidDialogControlId;
    gv_rewardsMainWindow = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_rewardItems; init_i += 1) {
        gv_rewardButton[init_i] = c_invalidDialogControlId;
    }
    gv_conqpointsLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_rewardCategories; init_i += 1) {
        gv_rewardsCatBTN[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_rewardsCatSelect[init_i] = 1;
    }
    for (init_i = 0; init_i <= gv_rewardItems; init_i += 1) {
        gv_rewardsTitleStyle[init_i] = 1;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_wizardVisitEveryNight[init_i] = true;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_slayer[init_i] = "0000";
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_destroyerTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_aristocrat[init_i] = true;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_gossipTypeListened[init_i] = "0000000000";
    }
    gv_kingslayerTimer = TimerCreate();
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_handle[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_reprimandedMax; init_i += 1) {
        gv_reprimandedList[init_i] = "";
    }
    gv_reprimandIndex = 1;
    gv_questDelayTimer = TimerCreate();
    gv_questTimer = TimerCreate();
    gv_questInitialDelay = RandomFixed(360.0, 480.0);
    gv_questObjective = c_invalidObjectiveId;
    gv_questTimerUpdate = TimerCreate();
    gv_questTextDelay = TimerCreate();
    gv_chiefPing = c_invalidPingId;
    gv_treasureChests = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_treasurePing[init_i] = c_invalidPingId;
    }
    gv_shipmentPing = c_invalidPingId;
    gv_merchantPing = c_invalidPingId;
    gv_feastChefPing = c_invalidPingId;
    for (init_i = 0; init_i <= gv_challengers; init_i += 1) {
        gv_zonePing[init_i] = c_invalidPingId;
    }
    gv_previousSpectators = "";
    gv_warlordPing = c_invalidPingId;
    gv_frostWitchPing = c_invalidPingId;
    gv_wizardPing = c_invalidPingId;
    gv_exilePing = c_invalidPingId;
    gv_exileRewardPing = c_invalidPingId;
    for (init_i = 0; init_i <= gv_veilShrineMax; init_i += 1) {
        gv_veilShrinePing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= gv_veilShrineMax; init_i += 1) {
        gv_veilShrineSequence[init_i] = "";
    }
    gv_veilGuardianTimer = TimerCreate();
    gv_veilofDarknessTimer = TimerCreate();
    for (init_i = 0; init_i <= gv_maxTeams; init_i += 1) {
        for (init_j = 0; init_j <= gv_expeditionAreas; init_j += 1) {
            gv_expeditionPing[init_i][init_j] = c_invalidPingId;
        }
    }
    gv_rABKillTimer = TimerCreate();
    gv_minimalistSkillDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_minimalistSkillDialogItem[init_i] = c_invalidDialogControlId;
    }
    gv_skillButton = c_invalidDialogControlId;
    gv_skillWindowBig = c_invalidDialogId;
    gv_skillWindowSmall = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_bTNSkillIncrease[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_skillLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_skillPointsPlayer[init_i] = 5;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_animalVisionGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_learnedSpellsString[init_i] = "00000000";
    }
    gv_dayDuration = 140.0;
    gv_nightDuration = 80.0;
    gv_dayNight = 1;
    gv_b_Day = true;
    gv_day = 1;
    gv_dayTimerDialog = c_invalidDialogId;
    gv_dayTimerProgress = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_rewardTypes; init_i += 1) {
        for (init_j = 0; init_j <= gv_players; init_j += 1) {
            gv_requirementString[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= gv_maxTeams; init_i += 1) {
        gv_discoveredBushesTeam[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_maxTeams; init_i += 1) {
        gv_discoveredDepositsTeam[init_i] = UnitGroupEmpty();
    }
    gv_treeQuota = 300;
    gv_wildSheep = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_aDTCapPlayer[init_i] = 1;
    }
    gv_watchTowerTimer = TimerCreate();
    gv_watchTowerTimerUpdate = TimerCreate();
    gv_watchTowerTimerExtendable = true;
    gv_watchTowerObjective = c_invalidObjectiveId;
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_pets[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_taughtPetsString[init_i] = "000000";
    }
    gv_observeRequest = c_invalidDialogId;
    gv_observeRequestBtn = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_observeAnswer[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_observeAnswerBtnYes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_observeAnswerBtnNo[init_i] = c_invalidDialogControlId;
    }
    gv_rezzDialog = c_invalidDialogId;
    gv_rezzDialogTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_rezzDialogBTN[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_reincarnatePing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_reincarnationTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_reincarnationTimerWindow[init_i] = c_timerWindowNone;
    }
    gv_winningPlayers = PlayerGroupEmpty();
    gv_losingPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_recentlyDamaged[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_dTAngles[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_dTAngles2[init_i] = "";
    }
    gv_dTConfigWindow = c_invalidDialogId;
    gv_dTScaleSlider = c_invalidDialogControlId;
    gv_dTScaleText = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_dTScaleValue[init_i] = 1.0;
    }
    gv_dTDurationSlider = c_invalidDialogControlId;
    gv_dTDurationText = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_dTDurationValue[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_dTCheckbox[init_i] = c_invalidDialogControlId;
    }
    gv_dTClose = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_textTagTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_backpackSize[init_i] = 20;
    }
    for (init_i = 0; init_i <= gv_aIRetreatStringAmount; init_i += 1) {
        gv_aIRetreatString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIReviveStringAmount; init_i += 1) {
        gv_aIReviveString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIQuestKillStringAmount; init_i += 1) {
        gv_aIQuestKillString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIQuestLootStringAmount; init_i += 1) {
        gv_aIQuestLootString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIQuestStringAmount; init_i += 1) {
        gv_aIQuestString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIQuestGladiatorStringAmount; init_i += 1) {
        gv_aIQuestGladiatorString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIQuestDeadnightStringAmount; init_i += 1) {
        gv_aIQuestDeadnightString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aISpellStringAmount; init_i += 1) {
        gv_aISpellString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aITrapsStringAmount; init_i += 1) {
        gv_aITrapsString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aITauntStringAmount; init_i += 1) {
        gv_aITauntString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIMonumentStringAmount; init_i += 1) {
        gv_aIMonumentString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIMonumentBuildStringAmount; init_i += 1) {
        gv_aIMonumentBuildString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIExileStringAmount; init_i += 1) {
        gv_aIExileString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIPirateStringAmount; init_i += 1) {
        gv_aIPirateString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIPetStringAmount; init_i += 1) {
        gv_aIPetString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIChefQuestStringAmount; init_i += 1) {
        gv_aIChefQuestString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIEnemySightedAmount; init_i += 1) {
        gv_aIEnemySighted[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIWatchTowerBuilderAmount; init_i += 1) {
        gv_aIWatchTowerBuilder[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_aIFishingStringAmount; init_i += 1) {
        gv_aIFishingString[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_aISelected2[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_numberofnames; init_i += 1) {
        gv_aINamePool[init_i] = "";
    }
    gv_aISupply.lv_leather = 2;
    gv_aISupply.lv_wool = 2;
    gv_aISupply.lv_shadowstone = 2;
    gv_aISupply.lv_lumber = 2;
    gv_aISupply.lv_stone = 2;
    gv_aISupply.lv_spicyHerbs = 2;
    gv_aISupply.lv_radiantGems = 2;
    gv_aISupply.lv_ironOre = 2;
    gv_aISupply.lv_sunflowers = 2;
    gv_aISupply.lv_food = 3;
    gv_aISupply.lv_bearPelt = 1;
    gv_aISupply.lv_candles = 2;
    gv_aISupply.lv_lanterns = 1;
    for (init_i = 0; init_i <= gv_players; init_i += 1) {
        gv_aIData[init_i].lv_customization = "0000000000";
        gv_aIData[init_i].lv_supply.lv_leather = 2;
        gv_aIData[init_i].lv_supply.lv_wool = 2;
        gv_aIData[init_i].lv_supply.lv_shadowstone = 2;
        gv_aIData[init_i].lv_supply.lv_lumber = 2;
        gv_aIData[init_i].lv_supply.lv_stone = 2;
        gv_aIData[init_i].lv_supply.lv_spicyHerbs = 2;
        gv_aIData[init_i].lv_supply.lv_radiantGems = 2;
        gv_aIData[init_i].lv_supply.lv_ironOre = 2;
        gv_aIData[init_i].lv_supply.lv_sunflowers = 2;
        gv_aIData[init_i].lv_supply.lv_food = 3;
        gv_aIData[init_i].lv_supply.lv_bearPelt = 1;
        gv_aIData[init_i].lv_supply.lv_candles = 2;
        gv_aIData[init_i].lv_supply.lv_lanterns = 1;
        gv_aIData[init_i].lv_tradeItems = UnitGroupEmpty();
        gv_aIData[init_i].lv_tamingTime = TimerCreate();
        gv_aIData[init_i].lv_fishingTime = TimerCreate();
        gv_aIData[init_i].lv_focusedRetreatTimer = TimerCreate();
        gv_aIData[init_i].lv_buildPlacement = TimerCreate();
        gv_aIData[init_i].lv_tradeRoamRadius = 48.0;
        gv_aIData[init_i].lv_shadowCloakMinimum = TimerCreate();
        gv_aIData[init_i].lv_richLimit = 300;
        gv_aIData[init_i].lv_supplyUpdateFrequency = TimerCreate();
        gv_aIData[init_i].lv_lumberjackTimer = TimerCreate();
        gv_aIData[init_i].lv_explorerTimer = TimerCreate();
        gv_aIData[init_i].lv_difficultyRating = 100.0;
        gv_aIData[init_i].lv_enemies = UnitGroupEmpty();
    }
    gv_transcript = StringExternal("Param/Value/22E3C5D0");
    gv_equipmentData[0].lv_name = "BearShamansShroud";
    gv_equipmentData[1].lv_name = "BerserkersBattleAxe";
    gv_equipmentData[2].lv_name = "Bloodcleaver";
    gv_equipmentData[3].lv_name = "BloodthirstyPirateHat";
    gv_equipmentData[4].lv_name = "CelestialOrb";
    gv_equipmentData[5].lv_name = "CommonArmor";
    gv_equipmentData[6].lv_name = "CommonBuckler";
    gv_equipmentData[7].lv_name = "CommonSword";
    gv_equipmentData[8].lv_name = "ConjurersCharm";
    gv_equipmentData[9].lv_name = "CrabShipment";
    gv_equipmentData[10].lv_name = "CravensFishSticker";
    gv_equipmentData[11].lv_name = "Demonward";
    gv_equipmentData[12].lv_name = "DreadplateArmor";
    gv_equipmentData[13].lv_name = "DullPickaxe";
    gv_equipmentData[14].lv_name = "ElderWand";
    gv_equipmentData[15].lv_name = "EnigmaticStaff";
    gv_equipmentData[16].lv_name = "EpicFishingRod";
    gv_equipmentData[17].lv_name = "FelFireTorch";
    gv_equipmentData[18].lv_name = "FishingRod";
    gv_equipmentData[19].lv_name = "FrostBarrier";
    gv_equipmentData[20].lv_name = "FrostNeedle";
    gv_equipmentData[21].lv_name = "GarishGladiatorsGarb";
    gv_equipmentData[22].lv_name = "GoldenHauberk";
    gv_equipmentData[23].lv_name = "GoldenPolearm";
    gv_equipmentData[24].lv_name = "GravesingersClaw";
    gv_equipmentData[25].lv_name = "HeavyIronBreastplate";
    gv_equipmentData[26].lv_name = "HeavyTowerShield";
    gv_equipmentData[27].lv_name = "HuntsmansJacket";
    gv_equipmentData[28].lv_name = "IronBandedBuckler";
    gv_equipmentData[29].lv_name = "IronStuddedVest";
    gv_equipmentData[30].lv_name = "IronbarkArmor";
    gv_equipmentData[31].lv_name = "JudgmentGavel";
    gv_equipmentData[32].lv_name = "Lantern";
    gv_equipmentData[33].lv_name = "LeatherCoat";
    gv_equipmentData[34].lv_name = "LightLeatherShield";
    gv_equipmentData[35].lv_name = "LiquidatorSpellblade";
    gv_equipmentData[36].lv_name = "MagnificentChefsHat";
    gv_equipmentData[37].lv_name = "MasterRangersMaille";
    gv_equipmentData[38].lv_name = "MurlocDoomhammer";
    gv_equipmentData[39].lv_name = "MysticsTribalShield";
    gv_equipmentData[40].lv_name = "NecromancersNecklace";
    gv_equipmentData[41].lv_name = "ObedienceRod";
    gv_equipmentData[42].lv_name = "OutlandishHeartpiercer";
    gv_equipmentData[43].lv_name = "RepeatingCrossbow";
    gv_equipmentData[44].lv_name = "RoughBlunderbuss";
    gv_equipmentData[45].lv_name = "SharpIronPickaxe";
    gv_equipmentData[46].lv_name = "SpellbreakerArmor";
    gv_equipmentData[47].lv_name = "SpikedShadowstoneScutum";
    gv_equipmentData[48].lv_name = "StormwizardsRobes";
    gv_equipmentData[49].lv_name = "SturdyWoodenStick";
    gv_equipmentData[40].lv_name = "TheMurlocket";
    gv_equipmentData[41].lv_name = "Torch";
    gv_equipmentData[42].lv_name = "TrebuchetPacked";
    gv_equipmentData[43].lv_name = "TwinThrowingAxes";
    gv_equipmentData[44].lv_name = "VengefulMurlocSkull";
    gv_equipmentData[45].lv_name = "VenomousArbalest";
    gv_equipmentData[46].lv_name = "ViciousJavelin";
    gv_equipmentData[47].lv_name = "ViciouslySharpArmblade";
    gv_equipmentData[48].lv_name = "WarmWoolTunic";
    gv_equipmentData[49].lv_name = "Wolfsbane";
    gv_memoryQancakesPoint = PointFromId(4242);
    gv_region001 = RegionFromId(1);  //2
    gv_regionArena = RegionFromId(2); //3
    gv_region002 = RegionFromId(3); //4
    gv_regionMemory = RegionFromId(4); //5
    gv_regionFishMarSara001 = RegionFromId(5); //
    gv_regionFishMarSara002 = RegionFromId(6); //
    gv_regionFishBelShir001 = RegionFromId(7); //
    gv_regionFishBelShir002 = RegionFromId(8); //
    gv_regionFishShakuras001 = RegionFromId(9); //
    gv_regionFishSouthlands3001 = RegionFromId(10); //
    gv_regionFishSouthlands3002 = RegionFromId(11); //
    gv_regionFishSouthlands2001 = RegionFromId(12); //
    gv_regionFishSouthlands2002 = RegionFromId(13); //
    gv_regionFishBelShir003 = RegionFromId(14); //
    gv_regionFishShakuras002 = RegionFromId(15); //
    gv_regionFishBelShir004 = RegionFromId(16); //
    gv_regionFishBelShir005 = RegionFromId(17); //
    gv_regionFishBelShir006 = RegionFromId(18); //
    gv_regionFishBelShir007 = RegionFromId(19); //
    gv_regionFishBelShir008 = RegionFromId(20); //
    gv_regionFishShakuras003 = RegionFromId(21); //
    gv_regionFishZhakulDas001 = RegionFromId(22); //
    gv_regionFishZhakulDas002 = RegionFromId(23); //
    gv_regionArenaThrowArea = RegionFromId(24); //
    gv_regionFishChar001 = RegionFromId(25); //
    gv_regionFishChar002 = RegionFromId(26); //
    gv_regionFishChar003 = RegionFromId(27); //
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Prototypes
//--------------------------------------------------------------------------------------------------
void gf_SwapResourceNodes ();
bool gf_DayNightCyclePaused ();
void gf_SetKoboldDefault (int lp_player);
void gf_SetupStartingItems (unit lp_unit, bool lp_resurrected);
void gf_SetupStartingSpells (unit lp_unit);
void gf_SetupPerkBonusi (unit lp_unit, bool lp_resurrected);
void gf_ApplyKoboldBehaviors (unit lp_unit);
point gf_GetTeamStart (int lp_player);
text gf_GetPlayerName (int lp_player, int lp_includeTitle);
int gf_AveragePlayerLevel (playergroup lp_group);
string gf_ScrambleString (string lp_string);
int gf_GetTeamOfPlayer (int lp_player);
text gf_GetTribeTextOfPlayer (int lp_player);
text gf_GetTribeTextOfTeam (int lp_team);
void gf_KoboldHealthStatus (unit lp_kobold);
void gf_ModifyKoboldHealthStatus (fixed lp_deltaWarmth, fixed lp_deltaHunger, fixed lp_deltaStamina, int lp_player);
void gf_UpdateHealthStatDialog (int lp_player);
void gf_UpdateHighlightTooltip (int lp_player);
fixed gf_WarmthDrainFactorGeneric (unit lp_unit);
fixed gf_HungerDrainFactorGeneric (unit lp_unit);
fixed gf_StaminaDrainFactorGeneric (unit lp_unit);
fixed gf_StaminaDrainFactorMining (unit lp_unit);
fixed gf_StaminaRegenFactorGeneric (unit lp_unit);
void gf_StaminaFaint (unit lp_unit);
void gf_WoundedFlash (unit lp_unit, fixed lp_damageTaken);
bool gf_BankChecksOut (string lp_entry, string lp_section, int lp_index);
int gf_DecryptInt (string lp_string, int lp_key, int lp_flood);
string gf_EncryptInt (int lp_integer, int lp_key, int lp_flood);
int gf_LoadAccountLevel (int lp_player, bank lp_bank);
int gf_LoadAccountXP (int lp_player, bank lp_bank);
int gf_LoadAccountWins (int lp_player, bank lp_bank);
int gf_LoadAccountLosses (int lp_player, bank lp_bank);
int gf_LoadKoboldKills (int lp_player, bank lp_bank);
int gf_LoadKoboldDeaths (int lp_player, bank lp_bank);
void gf_LoadRewards (int lp_player, bank lp_bank);
void gf_LoadDamageText (int lp_player, bank lp_bank);
void gf_UpdatePerkWindow (int lp_player);
int gf_GetPointsSpentInTiersBelow (int lp_player, int lp_tier);
int gf_GetPointsSpentInTier (int lp_player, int lp_tier);
void gf_Banker (int lp_player);
void gf_SetupPostgameFeats ();
void gf_RunPostgameFeats (int lp_plater);
int gf_GetFeatTextIndex (int lp_player);
void gf_InvalidationCheck (int lp_player, int lp_integer);
int gf_FeatPlayerKills (playergroup lp_playerGroup);
int gf_FeatSpellsCast (playergroup lp_playerGroup);
int gf_FeatGoldEarned (playergroup lp_playerGroup);
int gf_FeatTreesPlanted ();
int gf_FeatMostStored (playergroup lp_playerGroup);
int gf_FeatTrappedEnemies (playergroup lp_playerGroup);
int gf_FeatBoomstickTime (playergroup lp_playerGroup);
int gf_FeatHelpfulTribe (playergroup lp_playerGroup);
int gf_FeatFriendsLikeThese (playergroup lp_playerGroup);
int gf_FeatCoiffureCare (playergroup lp_playerGroup);
int gf_FeatArchitect (playergroup lp_playerGroup);
int gf_FeatSensible (playergroup lp_playerGroup);
int gf_FeatUnbirdened (playergroup lp_playerGroup);
int gf_FeatBeastmaster (playergroup lp_playerGroup);
void gf_UpdatePGSWindow (int lp_player);
text gf_RatingAffix (int lp_player, int lp_b);
color gf_GetPGSLabelColor (int lp_index, int lp_player);
int gf_GetFavWeapIndex (int lp_player);
text gf_GetItemNameFromLevel (int lp_level);
text gf_GetWLText (int lp_player);
text gf_GetKDText (int lp_player);
text gf_GetMatchHistoryText (int lp_player);
void gf_createreward (int lp_type, text lp_title, int lp_titleStyle, text lp_tooltip, int lp_cost, int lp_requirementIndex, text lp_requirementText);
bool gf_RewardCatIndexActive (int lp_player, int lp_category, int lp_index);
int gf_GetUnlockedVariable (int lp_integer);
int gf_GetUnlockedStatus (int lp_integer);
bool gf_RewardButtonClicked (int lp_button);
int gf_GetRewardButtonIndex (int lp_button);
void gf_ShowRewardsDialog (int lp_player);
void gf_UpdateRewardsDialog (int lp_player);
void gf_CategoryText (int lp_player);
void gf_HideAllRewButtons (int lp_player);
text gf_RewardsOpenerText (int lp_player);
text gf_RewardCostText (int lp_player, int lp_a);
text gf_RewardTooltipText (int lp_player, int lp_a);
text gf_RewardReqText (int lp_player, int lp_a);
text gf_TitleFormat (int lp_player, int lp_a);
void gf_SaveRewards (int lp_i);
void gf_SetRewardState (int lp_player, int lp_integerString, int lp_category, int lp_index);
string gf_GetRewardState (int lp_player, int lp_category, int lp_index);
void gf_DeactivateConflictingRewards (int lp_player, int lp_category, int lp_index);
bool gf_ValidReward (string lp_entry, string lp_section, int lp_index);
string gf_GetRandom12String ();
int gf_GetActiveTitleIndex (int lp_player);
bool gf_RequirementCompleted (int lp_player, int lp_category, int lp_index);
void gf_BankSaveEncryptedString (string lp_key, string lp_section, string lp_value, int lp_player);
string gf_BankLoadEncryptedString (string lp_key, string lp_section, int lp_player);
bool gf_StringEncryptionCheck (string lp_string);
int gf_CalculateEncryptMod (string lp_string, int lp_modulo);
void gf_UnlockRequirement (int lp_player, int lp_category, int lp_index);
void gf_RequirementAchieved (text lp_text, soundlink lp_sound, int lp_category, int lp_index, int lp_player);
void gf_EndgameRequirementsCheck (int lp_player);
void gf_CheckSeasonalRequirements (int lp_player);
void gf_SlayerProgress (int lp_player, unit lp_boss);
void gf_VanquisherStart (int lp_player);
void gf_AllSpellsLearnedCheck (int lp_player);
bool gf_ChampionGame ();
void gf_AddSpecialReward (string lp_handle, string lp_reward, text lp_comment);
int gf_PlayerWithHandle (string lp_handle);
void gf_ReprimandPlayer (string lp_handle, text lp_info);
bool gf_ReprimandedPlayer (int lp_player);
bool gf_RatingKeyValid (string lp_entry, string lp_section, int lp_index);
int gf_LoadRatingValue (int lp_player, bank lp_bank);
int gf_LoadRatingGames (int lp_player, bank lp_bank);
void gf_UpdatePlayerRating (int lp_player, int lp_winLoss);
int gf_GetKValue (int lp_player);
bool gf_ValidRatedGame ();
void gf_SaveSB3 (int lp_i);
void gf_InitializeQuest (int lp_questIndex);
fixed gf_GetNextQuestDelay ();
void gf_QuestFinishEvents (playergroup lp_questWinners, playergroup lp_questLosers);
point gf_GetBossSpawnLocation ();
void gf_ChiefInit ();
void gf_ChiefDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_TreasureInit ();
void gf_TreasureSpawnLoot (point lp_p);
void gf_TreasureEndPrem ();
void gf_RetrievalInit ();
void gf_RetrieveRewards (point lp_location);
void gf_PlantInit ();
void gf_FeastInit ();
void gf_FeastCriteria (unit lp_cooker, string lp_foodType);
text gf_FeastProgressText ();
void gf_GladiatorInit ();
void gf_GladiatorEndPhase2 (unit lp_dyingUnit, unit lp_killingUnit);
text gf_GetTeamChallengerName (int lp_teamIndex);
unit gf_RemainingDuelist ();
bool gf_IsGladiator (unit lp_unit);
text gf_ArenaCheer ();
void gf_DeadnightinitPhase1 ();
void gf_DeadnightinitPhase2 (fixed lp_transitionTime);
void gf_DeadnightinitPhase3 ();
void gf_SpawnMonstrosity ();
point gf_BlinkLocation (unit lp_unit);
point gf_StealthPointInRegion (region lp_region, int lp_player);
void gf_MonstrosityAcquireTarget (unit lp_unit);
void gf_WarlordInit ();
void gf_WarlordDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_TruffleInit ();
void gf_WinterInitialize ();
void gf_WinterLoop ();
void gf_FrostWitchSpawn (unit lp_spawner, point lp_location);
void gf_FrostWitchDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_LightsOutImpact (point lp_point);
void gf_PiratesInit ();
void gf_PiratesFound (unit lp_digger);
void gf_PiratesDirection (unit lp_unit);
void gf_WizardInit ();
void gf_WizardHealed (unit lp_healedUnit, unit lp_healingUnit);
void gf_BuilderInit ();
void gf_ExileInit ();
unit gf_GetStrongestOnTeam (int lp_team);
void gf_ExileLoot (point lp_location);
void gf_VeilInit ();
void gf_VeilShrineSetup (point lp_point);
string gf_VeilShrineSequence ();
point gf_RandomOpenArea (int lp_size, region lp_region);
void gf_VeilShrineFail (unit lp_shrine);
void gf_VeilLoot (point lp_point);
void gf_VeilofDarkness (fixed lp_duration, int lp_castingTeam);
void gf_ExpeditionInit ();
void gf_ExpeditionProgress (int lp_team);
text gf_ExpeditionProgressText ();
void gf_DLJRSpawn (point lp_point);
void gf_DLJRDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_RABSpawn (point lp_point, int lp_summoningPlayer);
void gf_UnstableAnomalyAscent (unit lp_unit, fixed lp_damage);
void gf_RABDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_UpdateSkillButton (int lp_player);
void gf_UpdateSkillWindow (int lp_player);
void gf_AddExperience (unit lp_unit, fixed lp_amount);
void gf_IncreaseSkillType (int lp_player, int lp_type, int lp_amount);
text gf_GetExpertiseText (int lp_skill, int lp_player);
void gf_UpdateForestry (int lp_player);
void gf_UpdateMining (int lp_player);
void gf_UpdateCooking (int lp_player);
void gf_UpdateForaging (int lp_player);
void gf_UpdateArtisanship (int lp_player);
void gf_CreateSalvageResources (string lp_type, point lp_point);
void gf_StaminaOnCraft (unit lp_unit);
void gf_Forestry20Heal (unit lp_source, unit lp_target, fixed lp_damageAmount, string lp_dmgEffect);
void gf_BoostAdrenalineRush (int lp_player, string lp_minerType, int lp_amount);
void gf_LearnSpell (int lp_spellIndex, int lp_player);
void gf_UpdateSpellValues (fixed lp_spellPower, fixed lp_dmg, int lp_player);
void gf_UpdateSpellCosts (int lp_player);
void gf_SpellCast (unit lp_caster, fixed lp_cost);
void gf_LeatherCoatHeal (unit lp_caster, fixed lp_cost);
void gf_SpellbreakerHaste (unit lp_caster);
void gf_NightwispSynergy (unit lp_caster);
void gf_SpellbreakerTrigger (unit lp_unit);
void gf_HealUnit (unit lp_target, unit lp_source, fixed lp_amount, bool lp_showText);
void gf_GuardianSpiritLoop (unit lp_unit);
unit gf_NearbySacrificeTarget (unit lp_unit);
void gf_DayNightCycle ();
void gf_UpdateDayTimer (fixed lp_cycle);
void gf_TravelingWizards (int lp_player, bool lp_guaranteed);
void gf_MorningHappened ();
void gf_NightHappened ();
void gf_UpdateWolfsbanePlayer (int lp_player);
void gf_SetFogOpacity (fixed lp_opacityOriginal, fixed lp_opacityTarget, fixed lp_fadeDuration);
void gf_RainInitialize (fixed lp_wait, fixed lp_duration, fixed lp_chance);
void gf_RainLoop ();
void gf_NewLightset (string lp_lightset, fixed lp_duration, bool lp_waitforit, int lp_timeofday);
point gf_RandomPathablePoint (region lp_region);
point gf_RandomPathablePointSansVision (region lp_region);
bool gf_PointVisibleToAnyone (point lp_point);
string gf_GetRandom8String ();
void gf_UpdateResourceReservesSingle (unit lp_unit, unit lp_item, bool lp_negative);
void gf_UpdateResourceReserversCond (int lp_player, unit lp_item, bool lp_negative);
void gf_AddRemoveUnitFromUnitGroup (unit lp_unit, unitgroup lp_unitGroup, bool lp_negative);
void gf_MiningExpertiseIII (unit lp_unit);
void gf_ClearResourceReserves (int lp_player);
void gf_UpdateResourceTooltip (unit lp_unit);
void gf_SaveResources (int lp_i);
void gf_UpdateGold (int lp_player);
void gf_DiscoverDeposits ();
void gf_DiscoverBushes ();
void gf_SpawnBerries (unit lp_bush);
void gf_SpawnHerbs (unit lp_bush);
void gf_SpawnResources ();
void gf_GatherStop (unit lp_unit);
int gf_GatherType (unit lp_unit);
int gf_GatherCap (unit lp_unit, unit lp_node, int lp_type);
void gf_GatherResult (unit lp_unit, unit lp_node, int lp_type);
void gf_GatherAnimation (unit lp_unit, int lp_cV, int lp_type, int lp_cap);
fixed gf_Nonkoboldgatherrate (unit lp_unit);
string gf_ProduceStone (unit lp_unit);
string gf_ProduceGold (unit lp_unit, bool lp_depleted);
string gf_ProduceBerries (unit lp_unit);
string gf_ProduceHerb (unit lp_unit);
void gf_UpdateBuildingStats (int lp_player);
void gf_BuildTent (unit lp_building);
void gf_BuildCampfire (unit lp_building);
void gf_BuildFarm (unit lp_building);
void gf_BuildWorkbench (unit lp_building);
void gf_BuildSmithy (unit lp_building);
void gf_BuildTavern (unit lp_building);
void gf_BuildOutpost (unit lp_building);
void gf_BuildSpikeTrap (unit lp_building);
void gf_BuildLodge (unit lp_building);
void gf_BuildMonument (unit lp_building);
void gf_BuildPalisade (unit lp_building);
void gf_BuildADT (unit lp_building);
void gf_BuildWatchTower (unit lp_building);
fixed gf_LeastConstructionProgress (unitgroup lp_buildings, fixed lp_buildTime);
text gf_SpikeTrapSuffix (int lp_charges);
void gf_RefreshCampfire (unit lp_unit, int lp_player, bool lp_expert);
void gf_ADTUpdateAmmo (unit lp_unit);
void gf_PalisadeMutability (unit lp_unit, unitgroup lp_exclude, int lp_layer);
void gf_Cooking (unit lp_unit, string lp_mealType, fixed lp_preparationTime);
unit gf_GetCookingNode (unit lp_kobold);
text gf_GetCookingTypeText (string lp_unitType);
void gf_EatFood (unit lp_unit, unit lp_item, bool lp_consume);
void gf_ActivateFoodCooldown (unit lp_unit, fixed lp_duration);
void gf_RemoveAilments (unit lp_unit);
void gf_Crafting (unit lp_craftsman, unit lp_station, string lp_itemType, fixed lp_craftingTime);
void gf_UpdateStatsAll (int lp_player);
fixed gf_CalcAttackspeed (int lp_player);
fixed gf_CalcAttackRange (int lp_player);
fixed gf_CalcMovespeed (int lp_player);
fixed gf_BaseWeaponSpeed (int lp_player);
bool gf_RangedWeapon (unit lp_unit);
void gf_BlunderbussShotgun (unit lp_attacker, unit lp_target, string lp_effect);
void gf_PailsadeRangedProtection (unit lp_attacker, unit lp_target, string lp_effect);
bool gf_RangedAttack (string lp_effect);
bool gf_NormalAttack (string lp_effect);
fixed gf_AttackCooldown (unit lp_unit);
void gf_ModifyUnitSight (string lp_unit, int lp_player, fixed lp_real);
int gf_GetItemLevel (string lp_type, int lp_player);
bool gf_UnitCanGetItem (unit lp_unit, string lp_type);
void gf_CreateItemForUnit (unit lp_unit, string lp_itemType, int lp_amount);
void gf_CreateLoot (string lp_itemType, point lp_origin, fixed lp_randomOffset, bool lp_fountainEffect, int lp_dropChance, int lp_goldAmountoptional);
void gf_CreateCoinPurse (int lp_value, point lp_point);
void gf_EquipmentChange (int lp_player, unit lp_item, bool lp_negative, int lp_actionIndex);
void gf_EquipMainHands (int lp_player, string lp_itemType, bool lp_negative);
void gf_EquipOffhands (int lp_player, string lp_itemType, bool lp_negative);
void gf_EquipArmors (int lp_player, string lp_itemType, bool lp_negative);
unit gf_KoboldMainHand (unit lp_kobold);
unit gf_KoboldOffhand (unit lp_kobold);
unit gf_KoboldArmor (unit lp_kobold);
fixed gf_ReversalFactor (bool lp_booly);
void gf_MetalArmor (unit lp_unit, fixed lp_r);
void gf_GladiatorsStrength (int lp_player);
void gf_NightlyBeerCasks ();
void gf_SpawnScrollofTransmutation (point lp_a, fixed lp_b);
void gf_ModifyTorchIntensity (int lp_player, fixed lp_amount);
void gf_ItemCleansingPotion (unit lp_unit, unit lp_item, bool lp_itemUsed);
void gf_ItemMurlocDoomhammer (unit lp_unit, unit lp_item);
void gf_ItemGoldenHauberk (unit lp_unit, unit lp_item);
void gf_ItemShovelDig (unit lp_unit, unit lp_item, bool lp_itemUsed);
void gf_ItemBearPeltSplit (unit lp_unit, unit lp_item, bool lp_consume);
void gf_ItemRaiseDead (unit lp_unit, unit lp_item, bool lp_consume);
void gf_ItemDraughtofDecay (unit lp_unit, unit lp_item, bool lp_consume);
void gf_ItemDemonward (unit lp_unit, unit lp_item);
void gf_ItemOrbofDarkness (unit lp_unit, unit lp_item, bool lp_consume);
void gf_ItemJavelin (unit lp_unit);
void gf_ItemLiquidatorSpellblade (unit lp_unit);
void gf_ItemNightcrawler (unit lp_unit, unit lp_item, bool lp_consume);
void gf_ItemLumberParts (unit lp_unit, unit lp_item);
void gf_ItemFireworks (unit lp_unit, unit lp_item);
bool gf_FishingStart (unit lp_unit, point lp_target);
int gf_FishRegionAtPoint (point lp_point);
string gf_GetFishReward (unit lp_bobber);
fixed gf_FishingSpeedModifier (unit lp_unit);
void gf_BirdScoutLand (unit lp_bird, unit lp_outpost);
void gf_BirdScoutTakeOff (unit lp_bird, unit lp_outpost);
void gf_UpdateOutpostVisual (unit lp_hut);
void gf_UpdateShipmentAvailability (unit lp_unit);
int gf_GetNumberOfItemsInOutpost (unit lp_outpost);
void gf_SellResource (unit lp_item, int lp_seller, unit lp_outpost);
bool gf_BuyResource (unit lp_buyer, string lp_type);
int gf_GetTradeIncrement (string lp_type);
int gf_GetSellPrice (string lp_type, int lp_player);
int gf_GetBuyPrice (string lp_type, int lp_player);
bool gf_TypeIsTradeGood (string lp_type);
void gf_UpdateSellPrice (string lp_unitType, fixed lp_amount, int lp_tier);
void gf_UpdateBuyPrice (string lp_unitType, fixed lp_amount, int lp_tier);
void gf_NormalizePrices (int lp_player);
void gf_SendBeaver (unit lp_sourceUnit, point lp_targetPoint, unit lp_targetUnit, string lp_shipmentType, int lp_sendingPlayer);
void gf_AutofillShipmentSlot (unit lp_outpost, int lp_sendingPlayer, string lp_sendItemType);
void gf_DropandRemove (unit lp_unit);
void gf_DropandPickup (unit lp_carrier, unit lp_item);
void gf_TavernSpawn (unit lp_unit);
void gf_Gossip (int lp_player, bool lp_bribed);
bool gf_OutOfGossip (int lp_player);
int gf_GossipMostGold (playergroup lp_playerGroup);
int gf_GossipMostWolfKills ();
int gf_GossipMostBribes (playergroup lp_playerGroup);
int gf_GossipMostBerries (playergroup lp_playerGroup);
int gf_GossipMostTreesFelled (playergroup lp_playerGroup);
int gf_GossipMostSheepsBred (playergroup lp_playerGroup);
int gf_GossipMostMealsCooked (playergroup lp_playerGroup);
int gf_GossipMostExp (playergroup lp_playerGroup);
int gf_GossipMostCrafts (playergroup lp_playerGroup);
int gf_GossipMostPetTLI (playergroup lp_playerGroup);
fixed gf_GetPetTLI (int lp_player);
void gf_UpdateWatchTowerGoldCost (int lp_player);
void gf_CanteenFood (unit lp_watchTower, unit lp_kobold);
void gf_WTUpdateTooltip (unit lp_unit);
void gf_SendBeaverScavenger (int lp_player, point lp_point);
bool gf_AllLivingTeamsHaveWT ();
void gf_WatchTowerDefeatTeam (int lp_team);
void gf_HuntersLodgeSpawn (unit lp_unit);
int gf_NumberofTrophies (unit lp_unit);
bool gf_UnitFacingGeneralDirection (unit lp_source, unit lp_target);
void gf_UpdatePetStats (int lp_player);
void gf_TameAnimal (unit lp_master, unit lp_animal);
void gf_ApplyPetBehaviors (unit lp_animal, unit lp_master);
void gf_AcquirePet (int lp_player, string lp_type);
void gf_LosePet (unit lp_pet);
void gf_KoboldDeath (point lp_location, unit lp_dyingUnit, unit lp_killingUnit);
void gf_SheepDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_WolfDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_DirewolfDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_BearDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_PheasantDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_MurlocDeath (unit lp_dyingUnit);
void gf_GhoulDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_VeilGuardianDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_UndeadSavageDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_DeathTombGuardian (unit lp_dyingUnit, unit lp_killingUnit);
void gf_DeathMonstrosity (unit lp_dyingUnit, unit lp_killingUnit);
void gf_CampfireDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_NightwispDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_StagDeath (unit lp_dyingUnit, unit lp_killingUnit);
void gf_PostDeathHint (int lp_player, fixed lp_delay);
void gf_UpdateRezShrine (int lp_player);
void gf_Resurrecting (unit lp_rezzer, unit lp_shrine, int lp_player, fixed lp_rezzTimes);
void gf_ResurrectPlayer (int lp_player, unit lp_shrine);
void gf_SkillBonusesPostMortem (int lp_player);
void gf_ReincarnatePlayerStart (int lp_player, fixed lp_time);
void gf_ReincarnatePlayerFinish (int lp_player);
point gf_DynamicResLocation (int lp_player);
void gf_Endgame (bool lp_ignoreConditions, bool lp_soloTeamGame);
bool gf_AllDeadOnTeam (int lp_team, bool lp_messages);
unitgroup gf_LivingKoboldsOnTeam (int lp_team);
void gf_EndgameStats (playergroup lp_winningPlayers, playergroup lp_losingPlayers);
void gf_Turnoffstuff ();
void gf_ModifyMatchHistory (int lp_player, string lp_char);
int gf_LastTeamStanding ();
void gf_DamageText (unit lp_source, unit lp_target, fixed lp_damageAmount, fixed lp_absorbed, string lp_effect);
int gf_RoundIntegertoEven (int lp_int);
text gf_DTSuffix (fixed lp_absorbed, text lp_text, bool lp_fatal);
color gf_GetDamageColor (string lp_effect);
fixed gf_GetDTDamageDoneAngle (int lp_player);
fixed gf_GetDTDamageTakenAngle (int lp_player);
void gf_Quicktag (unit lp_unit, text lp_text, fixed lp_totalDuration, int lp_fontSize);
void gf_Advancedtag (unit lp_unit, int lp_player, text lp_text, fixed lp_totalDuration, int lp_fontSize);
void gf_Alltag (unit lp_unit, text lp_text, fixed lp_totalDuration, int lp_fontSize);
void gf_TextTag (int lp_player, bool lp_queued);
int gf_TextTagNextIndex (int lp_player, int lp_currentIndex);
void gf_TextTagIndexWipe (int lp_player, int lp_index);
void gf_Upyougo (unit lp_unit, fixed lp_force);
void gf_Charge (unit lp_unit, point lp_target, fixed lp_force);
void gf_SetScaledStats (string lp_unitType, int lp_player);
fixed gf_AverageRemainingTeamSize ();
point gf_WeightedCenterofKobolds ();
bool gf_UnitIsBusy (unit lp_unit);
bool gf_UnitExists (unit lp_unit);
void gf_ResumeSituationalMusic (int lp_player);
void gf_AITaunt (unit lp_unit);
void gf_AIDeadnightChat (unit lp_unit);
void gf_SetupAI (unit lp_unit);
bool gf_AIEquipment (unit lp_kobold);
void gf_AIRunWalk (unit lp_kobold);
bool gf_AIRetreat (unit lp_kobold);
bool gf_AICombat (unit lp_kobold);
bool gf_AIQuickwarmth (unit lp_kobold);
bool gf_AIQuicktree (unit lp_kobold);
bool gf_AIQuickstone (unit lp_kobold);
bool gf_AIQuickammo (unit lp_kobold, bool lp_proximityCheck);
point gf_SmartRetreatPoint (unit lp_kobold, fixed lp_angle);
unit gf_GetEnemyTarget (unit lp_attacker, unitgroup lp_group);
fixed gf_MinimumRetreatLife (unit lp_unit);
bool gf_AIDodgeBossAbilities (unit lp_unit);
point gf_PointWithoutUnitType (unit lp_origin, fixed lp_radius, string lp_type, fixed lp_typeRadius);
void gf_DodgeMurlocCharge (unit lp_dodger);
fixed gf_GroupStamina (unitgroup lp_group);
bool gf_AIHelpAlly (unit lp_kobold);
bool gf_AIRepairFortress (unit lp_kobold);
bool gf_AITakeABreath (unit lp_kobold);
bool gf_AIEarlyExploring (unit lp_kobold);
bool gf_AILootFish (unit lp_kobold);
bool gf_AILootFood (unit lp_kobold);
bool gf_AILootQuestGear (unit lp_kobold);
bool gf_AITreasureChests (unit lp_kobold);
bool gf_AIQuestingImperative (unit lp_kobold);
bool gf_AIQuestingHighPriority (unit lp_kobold);
bool gf_AIQuestingNormal (unit lp_kobold);
bool gf_AIQuestGastronomist (unit lp_kobold);
bool gf_AIQuestFishing (unit lp_kobold);
int gf_ClosestFishableExpeditionPoint (unit lp_kobold);
point gf_FishablePointInRegion (unit lp_unit, region lp_reg);
bool gf_AICampfire (unit lp_kobold, fixed lp_warmth, unit lp_shrine, bool lp_toCook);
bool gf_AIFood (unit lp_kobold, bool lp_stock, fixed lp_hunger, bool lp_whileWarming);
bool gf_AIFoodSnack (unit lp_kobold);
bool gf_AIStamina (unit lp_kobold);
bool gf_AITradeSellStore (unit lp_kobold);
bool gf_AITradeBuyWithdraw (unit lp_kobold, string lp_type, int lp_limit, bool lp_ignoreRichRequirement, bool lp_withdrawToSell, fixed lp_radius);
void gf_AIBirdScout (int lp_player, unit lp_outpost);
bool gf_AIBuildStructure (unit lp_kobold, abilcmd lp_order, string lp_nearStructureType);
point gf_GetBuildLocation2x2 (region lp_region);
point gf_GetBuildLocation3x3 (region lp_region);
point gf_GetBuildLocation4x4 (region lp_region);
bool gf_StructurePathable2x2 (point lp_point);
bool gf_StructurePathable3x3 (point lp_point);
bool gf_StructurePathable4x4 (point lp_point);
string gf_WantedItemType (unit lp_kobold, string lp_craftingStation);
bool gf_HasMaterialsFor (unit lp_builder, string lp_unitType);
bool gf_AIWatchTower (unit lp_kobold);
bool gf_AISmithy (unit lp_kobold, string lp_wantedItem);
bool gf_AIWorkbench (unit lp_kobold, string lp_wantedItem);
bool gf_AISheep (unit lp_kobold);
bool gf_AIPhez (unit lp_kobold);
bool gf_AITrees (unit lp_kobold, int lp_priority);
bool gf_AIStone (unit lp_kobold, int lp_priority);
bool gf_AIGold (unit lp_kobold);
bool gf_AIWolves (unit lp_kobold);
bool gf_AIResurrect (unit lp_kobold);
bool gf_AIBerries (unit lp_kobold);
bool gf_AIHerbs (unit lp_kobold, int lp_priority);
bool gf_AIStags (unit lp_kobold);
bool gf_AINightwisp (unit lp_kobold);
bool gf_AIMurlocs (unit lp_kobold);
bool gf_AITraps (unit lp_kobold);
bool gf_AIADT (unit lp_kobold);
bool gf_FindPickupItem (unit lp_unit, string lp_type);
void gf_UpdateSupplies (int lp_player);
bool gf_WantRawLamb (unit lp_unit);
bool gf_WantRawWolf (unit lp_unit);
bool gf_WantRawBird (unit lp_unit);
bool gf_WantRawStag (unit lp_unit);
bool gf_AIGatherCandles (unit lp_kobold);
bool gf_PathableMaximum (unit lp_unit, point lp_point, int lp_maximum);
bool gf_AIStorageCleaning (unit lp_kobold);
region gf_WeightedInterestRegion (unit lp_kobold, fixed lp_radius);
bool gf_AITavern (unit lp_kobold);
void gf_AITavernInteract (unit lp_kobold, unit lp_tavern, int lp_desiredService);
int gf_AITavernWishlist (int lp_player);
bool gf_AIHuntersLodge (unit lp_kobold);
void gf_AIHuntardLodgeInteract (unit lp_kobold, unit lp_huntersLodge, int lp_desiredService);
int gf_AIHuntersLodgeWishlist (int lp_player);
unitgroup gf_UnitsInUnitGroupWithoutBuff (unitgroup lp_group, string lp_buff);
unitgroup gf_UnitsInUnitGroupWithBuff (unitgroup lp_group, string lp_buff);
unitgroup gf_UnitsInUnitGroupWithLife (unitgroup lp_group, fixed lp_life);
unitgroup gf_GetEnemiesNearPoint (point lp_point, int lp_player, fixed lp_radius, bool lp_visible);
unitgroup gf_GetAlliesNearPoint (point lp_point, int lp_player, fixed lp_radius);
unitgroup gf_GetNearbyEnemiesNoStructures (unit lp_unit);
unitgroup gf_GetNearbyDirewolves (unit lp_unit);
unit gf_GetClosestResurrectionShrine (unit lp_unit, bool lp_allowNearbyEnemies);
int gf_GetRandomDeadPlayerOnTeam (int lp_team);
fixed gf_EvaluateThreat (unit lp_unit);
bool gf_AIBringItemToUnit (unit lp_kobold, unit lp_item, unit lp_target);
bool gf_AICanCastSpell (unit lp_kobold, abilcmd lp_ability);
bool gf_Allowedtopickup (unit lp_kobold, unit lp_item);
bool gf_StrongerThanDirewolves (unit lp_unit);
bool gf_StrongestOnTeam (unit lp_unit);
void gf_PlayerUseUnitAbility (int lp_player, unit lp_unit, abilcmd lp_ability);
bool gf_OthersSelectingUnit (unit lp_unit, int lp_player);
void gf_AIExcessItems (unit lp_kobold);
int gf_GetExcessLimit (unit lp_unit);
void gf_AISpendSkillPoints (int lp_player);
int gf_GetInteger15 (int lp_exception1, int lp_exception2, int lp_exception3, int lp_exception4);
void gf_AICustomization (int lp_player);
void gf_SetAIName (int lp_player);
bool gf_AIDiggyHole (unit lp_kobold);
string gf_AIPerks (int lp_player, int lp_points);
void gf_AllAIsShareControlwithAllies ();
point gf_GetDropoffLocation (unit lp_murloc);
unit gf_GetMurlocFocalNode (unit lp_murloc);
void gf_SetMurlocFocalNode (unit lp_murloc, unit lp_node);
void gf_MurlocResetOrders (unit lp_unit);
void gf_DropAllItems (unit lp_unit);
void gf_DropItems (unit lp_unit, unitgroup lp_items);
void gf_ShowTutorialText (int lp_index);
void gf_InGameHint (string lp_hint, int lp_player);
void gf_UnstuckNudge (unit lp_kobold);
void gf_AdminSetup (int lp_player);
void gf_ModifyKoboldStats(unit kobold, int statType, fixed amt, int operType);
void gf_ModifyKoboldSkills(unit kobold, int skillType, int amt, int operType); 
void gf_MurlocSkin(unit murloc, int skinType);
void gf_KoboldSkin(unit kobold, int skinType);

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
trigger gt_PreInitialization;
trigger gt_Initialization;
trigger gt_FadeIn;
trigger gt_InitializeText;
trigger gt_InitializeDialogs;
trigger gt_InitializeEnvironment;
trigger gt_InitializeAddon;
trigger gt_StartHint;
trigger gt_StartPatch;
trigger gt_TheBigPeriod;
trigger gt_InitializeTeams;
trigger gt_StaminaWake;
trigger gt_SyncBanks;
trigger gt_LoadBank;
trigger gt_InitializePerks;
trigger gt_InitializePerkImages;
trigger gt_InitializePerkTooltips;
trigger gt_ShowPerkWindow;
trigger gt_SelectPerk;
trigger gt_GoodHostSpawn;
trigger gt_SetupPGSWindow;
trigger gt_ShowPGSWindow;
trigger gt_SetupRewardData;
trigger gt_SetupRewardsDialog;
trigger gt_RewardsDialogInteract;
trigger gt_AfflictionTrigger;
trigger gt_AristocratFail;
trigger gt_HunterRequirement;
trigger gt_CollectorRequirement;
trigger gt_SlavemasterRequirement;
trigger gt_SpecialRewardsList;
trigger gt_ReprimandedListInfo;
trigger gt_QuestTimer;
trigger gt_QuestTimerUpdate;
trigger gt_ChiefExpire;
trigger gt_ChiefCharge;
trigger gt_ChiefEnrage;
trigger gt_ChiefDerage;
trigger gt_TreasureExpire;
trigger gt_Retrieved;
trigger gt_RetrieveExpire;
trigger gt_PlantEnd;
trigger gt_PlantUpdateBuff;
trigger gt_FeastExpire;
trigger gt_FeastTutelageOn;
trigger gt_FeastTutelageOff;
trigger gt_GladiatorEndPhase1;
trigger gt_GladiatorCrowd;
trigger gt_GladiatorFind;
trigger gt_EnterArena;
trigger gt_LeaveArena;
trigger gt_BlinkStalker;
trigger gt_WarlordExpire;
trigger gt_WarlordBlades;
trigger gt_TrollGroundSpikesStart;
trigger gt_TrollGroundSpikesSeek;
trigger gt_TrollGroundSpikesSpring;
trigger gt_TrollGroundSpikesSink;
trigger gt_TrollGroundSpikesKnock;
trigger gt_TruffleFind;
trigger gt_TruffleEnd;
trigger gt_LightsOut;
trigger gt_PermafrostStart;
trigger gt_PermafrostDrain;
trigger gt_PiratesExpire;
trigger gt_WizardExpire;
trigger gt_BuilderExpire;
trigger gt_BuilderFinish;
trigger gt_ExileDefendVictory;
trigger gt_ExileAttackVictory;
trigger gt_ExileTransfer;
trigger gt_VeilExpire;
trigger gt_VeilSpawnGuardian;
trigger gt_VeilShrineInvestigate;
trigger gt_VeilShrinePreview;
trigger gt_VeilEnergizedStart;
trigger gt_VeilEnergizedEnd;
trigger gt_VeilShrineExpire;
trigger gt_VeilEndPrematurely;
trigger gt_VeilofDarknessCont;
trigger gt_VeilofDarknessEnd;
trigger gt_ExpeditionData;
trigger gt_ExpeditionExpire;
trigger gt_DLJRHint1;
trigger gt_DLJRHint2;
trigger gt_DLJRSummon;
trigger gt_DLJRFirestorm;
trigger gt_DLJRRocks;
trigger gt_DLJRMinions;
trigger gt_DLJRTether;
trigger gt_DLJRDemonicGrowth;
trigger gt_RABHint;
trigger gt_RABSummoningStart;
trigger gt_RABSummoningCancel;
trigger gt_RABSummoningFinish;
trigger gt_ArcaneEruptionStart;
trigger gt_ArcaneEruptionTrigger;
trigger gt_AnnihilateTrigger;
trigger gt_LightningCloudWander;
trigger gt_UnstableAnomalySpawner;
trigger gt_UnstableAnomalyDescent;
trigger gt_RABKill;
trigger gt_ShowSkillWindow;
trigger gt_LevelUp;
trigger gt_SpendSkillPoint;
trigger gt_ArtisanRepair;
trigger gt_DetectSmoke;
trigger gt_DetectGold;
trigger gt_DetectWolvesBears;
trigger gt_Salvage;
trigger gt_AdrenalineRushTimer;
trigger gt_AdrenalineRushOn;
trigger gt_LearnNaturesGrace;
trigger gt_LearnMineralTap;
trigger gt_LearnClairvoyance;
trigger gt_LearnFrostArmor;
trigger gt_LearnSiphonLife;
trigger gt_LearnAffliction;
trigger gt_LearnShadowCloak;
trigger gt_LearnGuardianSpirit;
trigger gt_NaturesGrace;
trigger gt_MineralTap;
trigger gt_Clairvoyance;
trigger gt_FrostArmorCast;
trigger gt_FrostArmorExtend;
trigger gt_SiphonLifeInitial;
trigger gt_SiphonLifeTrigger;
trigger gt_AfflictionInitial;
trigger gt_AfflictionDrain;
trigger gt_ShadowCloakInitial;
trigger gt_ShadowCloakEnd;
trigger gt_GuardianSpiritInitial;
trigger gt_GuardianSpiritTrigger;
trigger gt_GuardianSpiritLingeringTrigger;
trigger gt_WhirlwindRotate;
trigger gt_SpellAbsorb;
trigger gt_InitializeDayTimerDialog;
trigger gt_LanternTrigger;
trigger gt_WolfsbanePassive;
trigger gt_CoiffureCareCounter;
trigger gt_StagEvasion;
trigger gt_GainResource;
trigger gt_LoseResource;
trigger gt_TreeLoot;
trigger gt_UpdateGold;
trigger gt_BushGrowTrigger;
trigger gt_StopGatheringImmediately;
trigger gt_GatherStart;
trigger gt_GatherProgress;
trigger gt_BuildingSpawned;
trigger gt_ConstructionStart;
trigger gt_ConstructionStop;
trigger gt_BuildingFinish;
trigger gt_StructureDeath;
trigger gt_KoboldBuildFacing;
trigger gt_SpringSpikeTrap;
trigger gt_SpikeTrapDepleted;
trigger gt_SharpenSpike;
trigger gt_SpikeTrapPadding;
trigger gt_PlantTree;
trigger gt_GrowTree;
trigger gt_FinishTree;
trigger gt_LightCampfire;
trigger gt_LightCampfireSelect;
trigger gt_UnitSelected;
trigger gt_RefreshCampfire;
trigger gt_RefreshCampfireExpert;
trigger gt_ADTLaunch;
trigger gt_ADTRefil;
trigger gt_PalisadeGateCreate;
trigger gt_FastFood;
trigger gt_RoastedLamb;
trigger gt_SpicedLambFeast;
trigger gt_SmokedLambSirloin;
trigger gt_RoastedPheasant;
trigger gt_BeerBraisedPheasant;
trigger gt_WolfSteak;
trigger gt_GrilledWolfEntrecote;
trigger gt_StagStew;
trigger gt_CleansingDraught;
trigger gt_WellFedEnduranceInit;
trigger gt_WellFedEnduranceExp;
trigger gt_WellFedStrengthInit;
trigger gt_WellFedStrengthExp;
trigger gt_WellFedDexInit;
trigger gt_WellFedDexExp;
trigger gt_WellFedBeerInit;
trigger gt_WellFedBeerExp;
trigger gt_UnlivingStrengthInit;
trigger gt_UnlivingStrengthExp;
trigger gt_HappyChefInit;
trigger gt_HappyChefExp;
trigger gt_WorkbenchWarmWoolTunic;
trigger gt_WorkbenchLeatherCoat;
trigger gt_WorkbenchSturdyWoodenStick;
trigger gt_WorkbenchMysticsTribalShield;
trigger gt_WorkbenchLantern;
trigger gt_WorkbenchBlunderbuss;
trigger gt_WorkbenchVengefulMurlocSkull;
trigger gt_WorkbenchElderWand;
trigger gt_WorkbenchEnigmaticStaff;
trigger gt_WorkbenchHuntsmansJacket;
trigger gt_WorkbenchVenomousArbalest;
trigger gt_WorkbenchBearShamansShroud;
trigger gt_WorkbenchLightLeatherShield;
trigger gt_WorkbenchCelestialOrb;
trigger gt_WorkbenchWarlocksVestments;
trigger gt_WorkbenchHighRangersChainmail;
trigger gt_WorkbenchGravesingersClaw;
trigger gt_WorkbenchRepeatingCrossbow;
trigger gt_WorkbenchStormwizardsRobes;
trigger gt_WorkbenchTrebuchet;
trigger gt_WorkbenchIronbarkArmor;
trigger gt_SmithyHeavyIronBreastplate;
trigger gt_SmithySharpIronPickaxe;
trigger gt_SmithyGleamingSpear;
trigger gt_SmithyBattleAxe;
trigger gt_SmithyIronBandedBuckler;
trigger gt_SmithyHeavyTowerShield;
trigger gt_SmithyWolfsbane;
trigger gt_SmithyDreadplateArmor;
trigger gt_SmithyIronStuddedVest;
trigger gt_SmithyIronShovel;
trigger gt_SmithyOutlandishHeartpiercer;
trigger gt_SmithyGoldenHauberk;
trigger gt_SmithyJudgmentGavel;
trigger gt_SmithyViciousJavelin;
trigger gt_SmithyDemonward;
trigger gt_SmithyLiquidatorSpellblade;
trigger gt_SmithyTwinThrowingAxes;
trigger gt_HuntersLodgeObedienceRod;
trigger gt_HuntersLodgeSleepingBag;
trigger gt_HuntersLodgeFishingRod;
trigger gt_UpdateStatsTrigger;
trigger gt_BuffMainStat;
trigger gt_TemporaryBuffs;
trigger gt_ItemSets;
trigger gt_TriggeredAttackEffects;
trigger gt_DamageTrigger;
trigger gt_GenericUseItem;
trigger gt_EquipmentGain;
trigger gt_EquipmentMoveIn;
trigger gt_EquipmentMoveOut;
trigger gt_EquipmentLose;
trigger gt_ScutumJoy;
trigger gt_SleepingBag;
trigger gt_BlunderbussCounter;
trigger gt_WandProcDmg;
trigger gt_ReapersHandCombine;
trigger gt_HeavyTowerShieldTrg;
trigger gt_FearTrigger;
trigger gt_BloodthirstyGreed;
trigger gt_ScrollofTransmutation;
trigger gt_MurlocSkullFragments;
trigger gt_FelFlamesTrigger;
trigger gt_BloodcleaverDamage;
trigger gt_BloodcleaverDrain;
trigger gt_FrostNeedleTransform;
trigger gt_FrostBarrierTransform;
trigger gt_ScutumBlock;
trigger gt_BucklerBlock;
trigger gt_GoldenHauberkHeal;
trigger gt_LightLeatherShieldTrigger;
trigger gt_CelestialOrbHeal;
trigger gt_JavelinDummyCooldown;
trigger gt_LiquidatorSpellblade;
trigger gt_GravesingerGhoulSpawn;
trigger gt_MurlocketOn;
trigger gt_MurlocketOff;
trigger gt_TwinThrowingAxesFrenzy;
trigger gt_SetupFishData;
trigger gt_FishingRodUse;
trigger gt_FishingTargetBob;
trigger gt_FishingSuccess;
trigger gt_BirdScoutFindOutpost;
trigger gt_BirdScoutTameBird;
trigger gt_BirdScoutLockOn;
trigger gt_BirdScoutStalk;
trigger gt_BirdScoutExpire;
trigger gt_BirdScoutShooBirds;
trigger gt_StorageMove;
trigger gt_SellLumber;
trigger gt_SellStone;
trigger gt_SellWool;
trigger gt_SellLeather;
trigger gt_SellIronOre;
trigger gt_SellShadowstone;
trigger gt_SellInfusedLumber;
trigger gt_SellRadiantGem;
trigger gt_BuyLumber;
trigger gt_BuyStone;
trigger gt_BuyWool;
trigger gt_BuyLeather;
trigger gt_BuyIronOre;
trigger gt_BuyShadowstone;
trigger gt_BuyInfusedLumber;
trigger gt_BuyRadiantGem;
trigger gt_LockOutpost;
trigger gt_UnlockOutpost;
trigger gt_StorageHutCaravanStart;
trigger gt_ShipmentArrived;
trigger gt_DomesticatedSheep;
trigger gt_SheepLeash;
trigger gt_FarmSpawn;
trigger gt_FowlBait;
trigger gt_FowlMove;
trigger gt_BuySpellBook;
trigger gt_BuyScrollofTransmutation;
trigger gt_BuyBeer;
trigger gt_BuyRoastedLamb;
trigger gt_BuyGossip;
trigger gt_HireMurlocSlave;
trigger gt_EquipMurloc;
trigger gt_BuyNightwisp;
trigger gt_Synergy;
trigger gt_TrebuchetLoadStone;
trigger gt_PackTrebuchet;
trigger gt_WTStructuralReinforcement;
trigger gt_WTInfirmary;
trigger gt_WTBarracks;
trigger gt_WTStorage;
trigger gt_WTCanteen;
trigger gt_WTLookout;
trigger gt_WTBallista;
trigger gt_WTGroundskeeper;
trigger gt_WTGroundskeeperTrap;
trigger gt_WTRefillAmmo;
trigger gt_WTUseAmmo;
trigger gt_WTMurlocMilitia;
trigger gt_WTMurlocMilitiaIntel;
trigger gt_WTCalltoArms;
trigger gt_WTWarHorn;
trigger gt_WTTunnelerCrew;
trigger gt_WTTunnelerCrewProduce;
trigger gt_WTArmory;
trigger gt_WTArcaneSanctum;
trigger gt_WTBeaverPen;
trigger gt_WTMunitionsSquad;
trigger gt_WTMunitionsSquadADTs;
trigger gt_WTAttackedAlert;
trigger gt_WTDamagedAlert;
trigger gt_WTUnloadAutoSelect;
trigger gt_WatchTowerTimerStart;
trigger gt_WatchTowerTimerLoop;
trigger gt_WatchTowerTimerExpire;
trigger gt_FortressShareVision;
trigger gt_FortressUnshareVision;
trigger gt_FortressBeaverScavengerTrigger;
trigger gt_GiveAllItemsToTarget;
trigger gt_TamedAITrigger;
trigger gt_TamedApply;
trigger gt_LearnThickHide;
trigger gt_LearnNaturalTenacity;
trigger gt_LearnViciousness;
trigger gt_LearnInspirationalMaster;
trigger gt_LearnPredatoryKnowledge;
trigger gt_LearnCompanionship;
trigger gt_PredatoryKnowledge;
trigger gt_WhiteBearFangCollect;
trigger gt_WhiteBearFangExpire;
trigger gt_BoneTalismanCollect;
trigger gt_BoneTalismanExpire;
trigger gt_TrollNoseBoneCollect;
trigger gt_TrollNoseBoneExpire;
trigger gt_AntlersCollect;
trigger gt_AntlersExpire;
trigger gt_AnyUnitDies;
trigger gt_ObservationRequest;
trigger gt_ObservationAnswer;
trigger gt_InteractRezShrine;
trigger gt_DeselectRezShrine;
trigger gt_ClickRezzBTN;
trigger gt_ReincarnatePlayerFinish001;
trigger gt_ReincarnatePlayerFinish002;
trigger gt_ReincarnatePlayerFinish003;
trigger gt_ReincarnatePlayerFinish004;
trigger gt_ReincarnatePlayerFinish005;
trigger gt_ReincarnatePlayerFinish006;
trigger gt_ReincarnatePlayerFinish007;
trigger gt_ReincarnatePlayerFinish008;
trigger gt_ReincarnatePlayerFinish009;
trigger gt_ReincarnatePlayerFinish010;
trigger gt_ReincarnatePlayerFinish011;
trigger gt_ReincarnatePlayerFinish012;
trigger gt_ReincarnatePlayerFinish013;
trigger gt_ReincarnatePlayerFinish014;
trigger gt_ReincarnatePlayerFinish015;
trigger gt_PlayerLeaves;
trigger gt_RemoveRecentlyDamaged;
trigger gt_DTConfigShow;
trigger gt_DTConfigSetup;
trigger gt_DTSliderChange;
trigger gt_DTSaveClose;
trigger gt_TextTagQueueTrigger;
trigger gt_Memory;
trigger gt_FireWardTrigger;
trigger gt_HuntKobolds;
trigger gt_LightTorch;
trigger gt_TorchFade;
trigger gt_CowardlyArcher;
trigger gt_AnyUnitSelected;
trigger gt_SetupAIChatStrings;
trigger gt_AIMainThread;
trigger gt_AIHelperEnemyStart;
trigger gt_AIHelperEnemyEnd;
trigger gt_AIRecentCombatExpire;
trigger gt_AIBuildPlacement;
trigger gt_AISelectionDisable;
trigger gt_AISelectionEnable;
trigger gt_NonAIinCombatStart;
trigger gt_NonAIinCombatEnd;
trigger gt_MurlocSlaveEnd;
trigger gt_MurlocAction;
trigger gt_MurlocOrderStop;
trigger gt_MurlocOrderDrop;
trigger gt_MurlocOrderReturn;
trigger gt_MurlocOrderMineStone;
trigger gt_MurlocOrderMineGold;
trigger gt_MurlocOrderGatherLumber;
trigger gt_MurlocOrderPickBerries;
trigger gt_MurlocOrderPickHerbs;
trigger gt_MurlocOrderChef;
trigger gt_MurlocDropoffPoint;
trigger gt_SetupTutorial1;
trigger gt_SetupTutorial2;
trigger gt_TutorialPart1;
trigger gt_TutorialPart2;
trigger gt_TutorialPart3;
trigger gt_TutorialPart4;
trigger gt_TutorialPart5;
trigger gt_TutorialPart55;
trigger gt_TutorialPart6;
trigger gt_TutorialPart7;
trigger gt_TutorialPart8;
trigger gt_TutorialPart9;
trigger gt_TutorialPart10;
trigger gt_TutorialPart11;
trigger gt_TutorialPart12;
trigger gt_TutorialPart13;
trigger gt_InGameHintsOff;
trigger gt_InGameHintsSelection;
trigger gt_Nudge;
trigger gt_AFKafk;
trigger gt_ah_PlayerList;
trigger gt_ah_LevelBoost;
trigger gt_ah_ConquestPoints;

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupPerkBonusi
//--------------------------------------------------------------------------------------------------
void gf_SetupPerkBonusi (unit lp_unit, bool lp_resurrected) {
    // Variable Declarations
    int lv_i;
    fixed lv_temp;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((lp_resurrected == false) && (StringSub(gv_perks[lv_i], 1, 1) == "1")) {
        gv_skillPointsPlayer[lv_i] += 2;
    }
    else {
    }
    if ((lp_resurrected == false) && (StringSub(gv_perks[lv_i], 5, 5) == "1")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "BeerCost", "Amount", lv_i, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "BeerCost", "Amount", lv_i)) - 1.0), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "RoastedLambCost", "Amount", lv_i, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "RoastedLambCost", "Amount", lv_i)) - 1.0), 0));
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 8, 8) == "1")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lv_i, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lv_i)) + 1.0), 0));
    }
    else {
    }
    if ((lp_resurrected == false) && (StringSub(gv_perks[lv_i], 12, 12) == "1")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MurlocSlaveCost", "Amount", lv_i));
        CatalogFieldValueSet(c_gameCatalogEffect, "MurlocSlaveCost", "Amount", lv_i, FixedToString((lv_temp - 5.0), 0));
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 16, 16) == "1")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i, FixedToString((lv_temp + 1.0), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lv_i));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lv_i, FixedToString((lv_temp + 1.0), 0));
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 17, 17) == "1")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lv_i));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lv_i, FixedToString((lv_temp + 2.0), 0));
    }
    else {
    }
    if ((lp_resurrected == false) && (StringSub(gv_perks[lv_i], 18, 18) == "1")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "TorchStats", "Amount", lv_i, FixedToString(150.0, 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "TorchStats", "AttributeBonus[Armored]", lv_i, FixedToString(3.0, 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "TorchStats", "AttributeBonus[Biological]", lv_i, FixedToString(3.0, 0));
    }
    else {
    }
    if ((lp_resurrected == false) && (StringSub(gv_perks[lv_i], 29, 29) == "1")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lv_i));
        CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lv_i, FixedToString((lv_temp + 0.04), 2));
    }
    else {
    }
    gf_ApplyKoboldBehaviors(lp_unit);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupStartingSpells
//--------------------------------------------------------------------------------------------------
void gf_SetupStartingSpells (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((StringSub(gv_perks[lv_i], 32, 32) == "0") && (StringSub(gv_learnedSpellsString[lv_i], 1, 1) == "0")) {
        UnitAbilityEnable(lp_unit, "NaturesGrace", false);
    }
    else {
        gf_LearnSpell(1, lv_i);
    }
    if ((StringSub(gv_perks[lv_i], 33, 33) == "0") && (StringSub(gv_learnedSpellsString[lv_i], 2, 2) == "0")) {
        UnitAbilityEnable(lp_unit, "MineralTap", false);
    }
    else {
        gf_LearnSpell(2, lv_i);
    }
    if ((StringSub(gv_learnedSpellsString[lv_i], 3, 3) == "0")) {
        UnitAbilityEnable(lp_unit, "Clairvoyance", false);
    }
    else {
        gf_LearnSpell(3, lv_i);
    }
    if ((StringSub(gv_learnedSpellsString[lv_i], 4, 4) == "0")) {
        UnitAbilityEnable(lp_unit, "FrostArmor", false);
    }
    else {
        gf_LearnSpell(4, lv_i);
    }
    if ((StringSub(gv_learnedSpellsString[lv_i], 5, 5) == "0")) {
        UnitAbilityEnable(lp_unit, "SiphonLife", false);
    }
    else {
        gf_LearnSpell(5, lv_i);
    }
    if ((StringSub(gv_learnedSpellsString[lv_i], 6, 6) == "0")) {
        UnitAbilityEnable(lp_unit, "Affliction", false);
    }
    else {
        gf_LearnSpell(6, lv_i);
    }
    if ((StringSub(gv_learnedSpellsString[lv_i], 7, 7) == "0")) {
        UnitAbilityEnable(lp_unit, "ShadowCloak", false);
    }
    else {
        gf_LearnSpell(7, lv_i);
    }
    if ((StringSub(gv_learnedSpellsString[lv_i], 8, 8) == "0")) {
        UnitAbilityEnable(lp_unit, "GuardianSpirit", false);
    }
    else {
        gf_LearnSpell(8, lv_i);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupStartingItems
//--------------------------------------------------------------------------------------------------
void gf_SetupStartingItems (unit lp_unit, bool lp_resurrected) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((gv_tutorial == false)) {
        if ((StringSub(gv_perks[lv_i], 13, 13) == "1")) {
            gf_CreateItemForUnit(lp_unit, "SpellBook", 1);
        }
        else {
        }
        gf_CreateItemForUnit(lp_unit, "Lumber", (1 + BoolToInt((StringSub(gv_perks[lv_i], 11, 11) == "1"))));
        gf_CreateItemForUnit(lp_unit, "Stone", 1);
        if ((StringSub(gv_perks[lv_i], 22, 22) == "1")) {
            gf_CreateItemForUnit(lp_unit, "IronOre", 1);
        }
        else {
        }
        if ((StringSub(gv_perks[lv_i], 23, 23) == "1")) {
            gf_CreateItemForUnit(lp_unit, "Leather", 1);
        }
        else {
        }
        if ((StringSub(gv_perks[lv_i], 15, 15) == "1")) {
            gf_CreateItemForUnit(lp_unit, "Wool", 1);
        }
        else {
        }
        gf_CreateItemForUnit(lp_unit, "RawLamb", 1);
        if ((StringSub(gv_perks[lv_i], 31, 31) == "1")) {
            gf_CreateItemForUnit(lp_unit, "HandfulofBerries", 2);
            gf_CreateItemForUnit(lp_unit, "SpicyHerbs", 1);
        }
        else {
        }
        if ((StringSub(gv_perks[lv_i], 21, 21) == "1") && (gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArmory == false)) {
            gf_CreateItemForUnit(lp_unit, "DullPickaxe", 1);
        }
        else {
        }
        if ((lp_resurrected == false) && (gv_activeTeams > 2) && (gv_gameMode == 1)) {
            gf_CreateItemForUnit(lp_unit, "Candle", 1);
        }
        else {
        }
        if ((gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArmory == true)) {
            gf_CreateItemForUnit(lp_unit, "CommonSword", 1);
            gf_CreateItemForUnit(lp_unit, "CommonBuckler", 1);
            gf_CreateItemForUnit(lp_unit, "CommonArmor", 1);
        }
        else {
        }
        UnitInventoryContainerOpen(PlayerGroupSingle(lv_i), lp_unit, gv_backpackSlot, true);
        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) < gv_startingGold)) {
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSetTo, gv_startingGold);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetKoboldDefault
//--------------------------------------------------------------------------------------------------
void gf_SetKoboldDefault (int lp_player) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString(20.0, 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString(18.0, 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString(25.0, 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString(20.0, 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString(18.0, 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString(0.0, 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "Sight", lp_player, FixedToString(12.0, 0));
    gv_playerData[lp_player].lv_stats.lv_sightRadius = 12.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "GladiatorsStrength", "Amount", lp_player, FixedToString(0.0, 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Psionic]", lp_player, FixedToString(0.0, 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "MeleeDamage", "LeechFraction[Energy]", lp_player, FixedToString(0.0, 2));
    gv_playerData[lp_player].lv_equippedMainHandG = UnitGroupEmpty();
    gv_playerData[lp_player].lv_equippedOffhandG = UnitGroupEmpty();
    gv_playerData[lp_player].lv_equippedArmorG = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: KoboldHealthStatus
//--------------------------------------------------------------------------------------------------
void gf_KoboldHealthStatus (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    fixed lv_warmthDrainFactorGeneric;
    fixed lv_hungerDrainFactorGeneric;
    fixed lv_staminaDrainFactorGeneric;
    fixed lv_staminaDrainFactorMining;
    fixed lv_staminaRegenFactorGeneric;
    fixed lv_deltaWarmth;
    fixed lv_deltaHunger;
    fixed lv_staminaPLUS;
    fixed lv_staminaMINUS;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_warmthDrainFactorGeneric = gf_WarmthDrainFactorGeneric(lp_kobold);
    lv_hungerDrainFactorGeneric = gf_HungerDrainFactorGeneric(lp_kobold);
    lv_staminaDrainFactorGeneric = gf_StaminaDrainFactorGeneric(lp_kobold);
    lv_staminaDrainFactorMining = gf_StaminaDrainFactorMining(lp_kobold);
    lv_staminaRegenFactorGeneric = gf_StaminaRegenFactorGeneric(lp_kobold);
    // Implementation
    if ((UnitHasBehavior(lp_kobold, "FrostArmor") == true)) {
        lv_deltaWarmth -= (1.0 * gv_periodInterval);
    }
    else {
        if ((UnitHasBehavior(lp_kobold, "FrostBeamSilence") == true)) {
            lv_deltaWarmth -= ((5.0 * lv_warmthDrainFactorGeneric) * gv_periodInterval);
        }
        else {
        }
        if ((UnitHasBehavior(lp_kobold, "Snow") == true)) {
            lv_deltaWarmth -= ((1.5 * lv_warmthDrainFactorGeneric) * gv_periodInterval);
        }
        else {
        }
        if ((UnitHasBehavior(lp_kobold, "Rain") == true)) {
            lv_deltaWarmth -= ((1.0 * lv_warmthDrainFactorGeneric) * gv_periodInterval);
        }
        else {
        }
        if (((UnitHasBehavior(lp_kobold, "MiningStoneSmart") == true) || (UnitHasBehavior(lp_kobold, "MiningGoldSmart") == true)) && (UnitHasBehavior(lp_kobold, "FrostBarrier") == false)) {
            lv_deltaWarmth += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Hover]", lv_i)) * gv_periodInterval);
        }
        else {
        }
        if ((gv_dayNight == 1) && (UnitHasBehavior(lp_kobold, "FrostBarrier") == false)) {
            lv_deltaWarmth += (0.4 * gv_periodInterval);
        }
        else {
        }
        if (((UnitHasBehavior(lp_kobold, "Heat") == true) || ((UnitHasBehavior(lp_kobold, "WatchTowerGarrisonCargoBuff") == true) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerCanteen == true))) && (UnitHasBehavior(lp_kobold, "FrostBarrier") == false)) {
            lv_deltaWarmth += (2.0 * gv_periodInterval);
        }
        else {
            if ((gv_dayNight == 2)) {
                lv_deltaWarmth -= ((3.0 * lv_warmthDrainFactorGeneric) * gv_periodInterval);
            }
            else {
            }
        }
    }
    lv_deltaHunger -= ((0.45 * lv_hungerDrainFactorGeneric) * gv_periodInterval);
    if ((UnitHasBehavior(lp_kobold, "UnlivingStrength") == true)) {
        lv_deltaHunger -= (1.0 * gv_periodInterval);
    }
    else {
    }
    if ((UnitHasBehavior(lp_kobold, "WatchTowerGarrisonCargoBuff") == true) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerBarracks == true)) {
        lv_staminaPLUS += (1.0 * gv_periodInterval);
    }
    else {
    }
    if ((UnitHasBehavior(lp_kobold, "Resting") == true)) {
        lv_staminaPLUS += (1.0 * gv_periodInterval);
    }
    else {
    }
    if ((UnitHasBehavior(lp_kobold, "Stationary") == true)) {
        lv_staminaPLUS += (1.0 * gv_periodInterval);
    }
    else {
    }
    if (((UnitHasBehavior(lp_kobold, "Running") == false) || (UnitHasBehavior(lp_kobold, "Stationary") == true))) {
        lv_staminaPLUS += (0.5 * gv_periodInterval);
    }
    else {
    }
    if ((UnitHasBehavior(lp_kobold, "Unconscious") == true)) {
        lv_staminaPLUS += (0.75 * gv_periodInterval);
    }
    if ((UnitHasBehavior(lp_kobold, "SleepingBag") == true)) {
        lv_staminaPLUS += (1.5 * gv_periodInterval);
    }
    if ((StringSub(gv_perks[lv_i], 34, 34) == "1") && ((UnitHasBehavior(lp_kobold, "PickingBerriesSmart") == true) || (UnitHasBehavior(lp_kobold, "PickingHerbsSmart") == true))) {
        lv_staminaPLUS += (1.0 * gv_periodInterval);
    }
    else {
    }
    lv_staminaPLUS *= lv_staminaRegenFactorGeneric;
    if ((UnitHasBehavior(lp_kobold, "MiningStoneSmart") == true)) {
        lv_staminaMINUS -= ((5.0 * lv_staminaDrainFactorMining) * gv_periodInterval);
    }
    else {
    }
    if ((UnitHasBehavior(lp_kobold, "MiningGoldSmart") == true)) {
        lv_staminaMINUS -= ((5.0 * lv_staminaDrainFactorMining) * gv_periodInterval);
    }
    else {
    }
    if ((UnitHasBehavior(lp_kobold, "AdrenalineRush") == false) && (UnitHasBehavior(lp_kobold, "Running") == true) && (UnitHasBehavior(lp_kobold, "Stationary") == false)) {
        if ((StringSub(gv_perks[lv_i], 30, 30) == "1")) {
            lv_staminaMINUS -= ((2.75 * 0.95) * gv_periodInterval);
        }
        else {
            lv_staminaMINUS -= (2.75 * gv_periodInterval);
        }
    }
    else {
    }
    lv_staminaMINUS *= lv_staminaDrainFactorGeneric;
    gf_ModifyKoboldHealthStatus(lv_deltaWarmth, lv_deltaHunger, (lv_staminaPLUS + lv_staminaMINUS), lv_i);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ModifyKoboldHealthStatus
//--------------------------------------------------------------------------------------------------
void gf_ModifyKoboldHealthStatus (fixed lp_deltaWarmth, fixed lp_deltaHunger, fixed lp_deltaStamina, int lp_player) {
    // Variable Declarations
    fixed lv_previousHungerLifeRegenFactor;
    int lv_a;
    // Variable Initialization
    lv_previousHungerLifeRegenFactor = gv_playerData[lp_player].lv_hungerRegenPenaltyFactor;
    // Implementation
    gv_playerData[lp_player].lv_warmth += lp_deltaWarmth;
    gv_playerData[lp_player].lv_hunger += lp_deltaHunger;
    gv_playerData[lp_player].lv_stamina += lp_deltaStamina;
    if ((gv_playerData[lp_player].lv_warmth > 100.0)) {
        gv_playerData[lp_player].lv_warmth = 100.0;
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_warmth <= 0.0)) {
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Frostbite") == false) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "FrostbitePositive") == false) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "AdrenalineRush") == false)) {
            UIAlertUnit("Freezing", lp_player, StringExternal("Param/Value/B072225E"), null, gv_playerData[lp_player].lv_kobold);
        }
        else {
        }
        if ((gv_questIndexActive == 10) && (gv_winterFrozen[lp_player] == false)) {
            gv_winterFrozen[lp_player] = true;
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/4BDCA5CD"));
            SoundPlay(SoundLink("Alert_UniObjectiveFailed", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
        }
        else {
        }
        gv_playerData[lp_player].lv_warmth = 0.0;
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "AdrenalineRush") == false)) {
            if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "FrostBarrier") == true)) {
                UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "FrostbitePositive", gv_playerData[lp_player].lv_kobold, 1);
                UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "Frostbite", 1);
            }
            else {
                UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Frostbite", gv_playerData[lp_player].lv_kobold, 1);
                UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "FrostbitePositive", 1);
            }
        }
        else {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "Frostbite", 1);
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "FrostbitePositive", 1);
        }
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_warmth == 0)) {
        gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.0;
    }
    else if (((gv_playerData[lp_player].lv_warmth >= 0.0) && (gv_playerData[lp_player].lv_warmth <= 25.0))) {
        gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.12;
    }
    else if (((gv_playerData[lp_player].lv_warmth >= 25.0) && (gv_playerData[lp_player].lv_warmth <= 50.0))) {
        gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.08;
    }
    else if (((gv_playerData[lp_player].lv_warmth >= 50.0) && (gv_playerData[lp_player].lv_warmth <= 75.0))) {
        gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.04;
    }
    else if (((gv_playerData[lp_player].lv_warmth >= 75.0) && (gv_playerData[lp_player].lv_warmth <= 100.0))) {
        gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.0;
    }
    if ((gv_playerData[lp_player].lv_warmth > 0.0)) {
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Frostbite") == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "Frostbite", 1);
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "FrostbitePositive") == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "FrostbitePositive", 1);
        }
        else {
        }
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_hunger > 100.0)) {
        gv_playerData[lp_player].lv_hunger = 100.0;
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_hunger <= 0.0)) {
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Starving") == false)) {
            UIAlertUnit("Starving", lp_player, StringExternal("Param/Value/77744856"), null, gv_playerData[lp_player].lv_kobold);
        }
        else {
        }
        gv_playerData[lp_player].lv_hunger = 0.0;
        UnitCreateEffectUnit(gv_playerData[lp_player].lv_kobold, "StarvingApply", gv_playerData[lp_player].lv_kobold);
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_hunger == 0)) {
        gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 0.0;
    }
    else if (((gv_playerData[lp_player].lv_hunger >= 0.0) && (gv_playerData[lp_player].lv_hunger <= 25.0))) {
        gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 0.25;
    }
    else if (((gv_playerData[lp_player].lv_hunger >= 25.0) && (gv_playerData[lp_player].lv_hunger <= 50.0))) {
        gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 0.5;
    }
    else if (((gv_playerData[lp_player].lv_hunger >= 50.0) && (gv_playerData[lp_player].lv_hunger <= 75.0))) {
        gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 0.75;
    }
    else if (((gv_playerData[lp_player].lv_hunger >= 75.0) && (gv_playerData[lp_player].lv_hunger <= 100.0))) {
        gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 1.0;
    }
    if ((lv_previousHungerLifeRegenFactor != gv_playerData[lp_player].lv_hungerRegenPenaltyFactor)) {
        gf_UpdateStatsAll(lp_player);
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_hunger > 0.0) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Starving") == true)) {
        UnitCreateEffectUnit(gv_playerData[lp_player].lv_kobold, "StarvingRemove", gv_playerData[lp_player].lv_kobold);
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_stamina > 100.0)) {
        gv_playerData[lp_player].lv_stamina = 100.0;
    }
    else {
    }
    if ((StringSub(gv_perks[lp_player], 36, 36) == "1") && (TimerGetRemaining(gv_playerData[lp_player].lv_runSpeedPerkCooldown) == 0.0)) {
        if ((gv_playerData[lp_player].lv_stamina >= 50.0) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "EnergyReserves") == false)) {
            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "EnergyReserves", gv_playerData[lp_player].lv_kobold, 1);
            TimerStart(gv_playerData[lp_player].lv_runSpeedPerkCooldown, 3.0, false, c_timeGame);
        }
        else {
        }
        if ((gv_playerData[lp_player].lv_stamina < 50.0) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "EnergyReserves") == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "EnergyReserves", 1);
            TimerStart(gv_playerData[lp_player].lv_runSpeedPerkCooldown, 3.0, false, c_timeGame);
        }
        else {
        }
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_stamina < 0.0)) {
        gv_playerData[lp_player].lv_stamina = 0.0;
        gf_StaminaFaint(gv_playerData[lp_player].lv_kobold);
    }
    else {
    }
    gf_UpdateHealthStatDialog(lp_player);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateHealthStatDialog
//--------------------------------------------------------------------------------------------------
void gf_UpdateHealthStatDialog (int lp_player) {
    // Variable Declarations
    int lv_max;
    int lv_medium;
    int lv_low;
    int lv_min;
    text lv_warmthText;
    text lv_hungerText;
    text lv_fatigueText;
    // Variable Initialization
    lv_max = 100;
    lv_medium = 50;
    lv_low = 20;
    lv_warmthText = StringExternal("Param/Value/32155A4F");
    lv_hungerText = StringExternal("Param/Value/B61EF5F3");
    lv_fatigueText = StringExternal("Param/Value/E2B4E0C1");
    // Implementation
    if (((gv_playerData[lp_player].lv_warmth >= lv_medium) && (gv_playerData[lp_player].lv_warmth <= lv_max))) {
        lv_warmthText = (StringExternal("Param/Value/8517C6FE") + (FixedToText(gv_playerData[lp_player].lv_warmth, 0) + (StringExternal("Param/Value/CE312DF4") + StringExternal("Param/Value/539EE947"))));
    }
    else if (((gv_playerData[lp_player].lv_warmth >= lv_low) && (gv_playerData[lp_player].lv_warmth <= lv_medium))) {
        lv_warmthText = (StringExternal("Param/Value/A78B4CB6") + (FixedToText(gv_playerData[lp_player].lv_warmth, 0) + (StringExternal("Param/Value/A5C46DDE") + StringExternal("Param/Value/304A1287"))));
    }
    else if (((gv_playerData[lp_player].lv_warmth >= lv_min) && (gv_playerData[lp_player].lv_warmth <= lv_low))) {
        lv_warmthText = (StringExternal("Param/Value/94D74A80") + (FixedToText(gv_playerData[lp_player].lv_warmth, 0) + (StringExternal("Param/Value/A80337E9") + StringExternal("Param/Value/2A48BDC6"))));
        gf_InGameHint("warmth", lp_player);
    }
    if (((gv_playerData[lp_player].lv_hunger >= lv_medium) && (gv_playerData[lp_player].lv_hunger <= lv_max))) {
        lv_hungerText = (StringExternal("Param/Value/0FCF918B") + (FixedToText(gv_playerData[lp_player].lv_hunger, 0) + (StringExternal("Param/Value/2C12FE75") + StringExternal("Param/Value/8A44AFE4"))));
    }
    else if (((gv_playerData[lp_player].lv_hunger >= lv_low) && (gv_playerData[lp_player].lv_hunger <= lv_medium))) {
        lv_hungerText = (StringExternal("Param/Value/2157F7C0") + (FixedToText(gv_playerData[lp_player].lv_hunger, 0) + (StringExternal("Param/Value/0AC4663D") + StringExternal("Param/Value/3448D7AC"))));
    }
    else if (((gv_playerData[lp_player].lv_hunger >= lv_min) && (gv_playerData[lp_player].lv_hunger <= lv_low))) {
        lv_hungerText = (StringExternal("Param/Value/146C074E") + (FixedToText(gv_playerData[lp_player].lv_hunger, 0) + (StringExternal("Param/Value/712DEF82") + StringExternal("Param/Value/E945F03F"))));
        gf_InGameHint("hunger", lp_player);
    }
    if (((gv_playerData[lp_player].lv_stamina >= lv_medium) && (gv_playerData[lp_player].lv_stamina <= lv_max))) {
        TextExpressionSetToken("Param/Expression/410F8232", "A", StringExternal("Param/Value/7DB620A4"));
        TextExpressionSetToken("Param/Expression/410F8232", "B", FixedToText(gv_playerData[lp_player].lv_stamina, 0));
        TextExpressionSetToken("Param/Expression/410F8232", "C", StringExternal("Param/Value/A9E2DA8D"));
        lv_fatigueText = TextExpressionAssemble("Param/Expression/410F8232");
    }
    else if (((gv_playerData[lp_player].lv_stamina >= lv_low) && (gv_playerData[lp_player].lv_stamina <= lv_medium))) {
        TextExpressionSetToken("Param/Expression/627A4F90", "A", StringExternal("Param/Value/84540269"));
        TextExpressionSetToken("Param/Expression/627A4F90", "B", FixedToText(gv_playerData[lp_player].lv_stamina, 0));
        TextExpressionSetToken("Param/Expression/627A4F90", "C", StringExternal("Param/Value/F0415A66"));
        lv_fatigueText = TextExpressionAssemble("Param/Expression/627A4F90");
    }
    else if (((gv_playerData[lp_player].lv_stamina >= lv_min) && (gv_playerData[lp_player].lv_stamina <= lv_low))) {
        TextExpressionSetToken("Param/Expression/5B5BDBF4", "A", StringExternal("Param/Value/B95EE08D"));
        TextExpressionSetToken("Param/Expression/5B5BDBF4", "B", FixedToText(gv_playerData[lp_player].lv_stamina, 0));
        TextExpressionSetToken("Param/Expression/5B5BDBF4", "C", StringExternal("Param/Value/F36883AA"));
        lv_fatigueText = TextExpressionAssemble("Param/Expression/5B5BDBF4");
        gf_InGameHint("stamina", lp_player);
    }
    libNtve_gf_SetDialogItemText(gv_warmthItem, lv_warmthText, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_hungerItem, lv_hungerText, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_fatigueItem, lv_fatigueText, PlayerGroupSingle(lp_player));
    gf_UpdateHighlightTooltip(lp_player);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateHighlightTooltip
//--------------------------------------------------------------------------------------------------
void gf_UpdateHighlightTooltip (int lp_player) {
    // Implementation
    TextExpressionSetToken("Param/Expression/A745288B", "A", StringExternal("Param/Value/0A2DAFA6"));
    TextExpressionSetToken("Param/Expression/A745288B", "B", FixedToText(gv_playerData[lp_player].lv_warmth, 0));
    TextExpressionSetToken("Param/Expression/A745288B", "C", StringExternal("Param/Value/010D8153"));
    TextExpressionSetToken("Param/Expression/A745288B", "D", FixedToText(gv_playerData[lp_player].lv_hunger, 0));
    TextExpressionSetToken("Param/Expression/A745288B", "E", StringExternal("Param/Value/2C691C2B"));
    TextExpressionSetToken("Param/Expression/A745288B", "F", FixedToText(gv_playerData[lp_player].lv_stamina, 0));
    TextExpressionSetToken("Param/Expression/A745288B", "G", StringExternal("Param/Value/F1A422F6"));
    UnitSetInfoText(gv_playerData[lp_player].lv_kobold, StringExternal("Param/Value/D89EB65A"), (((gf_GetTribeTextOfTeam(gv_playerData[lp_player].lv_team) + StringExternal("Param/Value/1DC9F70C")) + TextWithColor(gf_GetPlayerName(lp_player, 1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)))) + TextExpressionAssemble("Param/Expression/A745288B")), StringExternal("Param/Value/50CEC91C"));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WarmthDrainFactorGeneric
//--------------------------------------------------------------------------------------------------
fixed gf_WarmthDrainFactorGeneric (unit lp_unit) {
    // Variable Declarations
    fixed lv_warmthMod;
    // Variable Initialization
    lv_warmthMod = 1.0;
    // Implementation
    lv_warmthMod *= (1.0 - gv_coldResistance[UnitGetOwner(lp_unit)]);
    if ((UnitHasBehavior(lp_unit, "WarmWoolTunic") == true)) {
        lv_warmthMod = (lv_warmthMod * 0.8);
    }
    else {
    }
    if ((UnitHasBehavior(lp_unit, "IronStuddedVest") == true)) {
        lv_warmthMod = (lv_warmthMod * 0.65);
    }
    else {
    }
    if ((UnitHasBehavior(lp_unit, "Torch") == true)) {
        lv_warmthMod = (lv_warmthMod * 0.5);
    }
    else {
    }
    if ((UnitHasBehavior(lp_unit, "LanternLight") == true)) {
        lv_warmthMod = (lv_warmthMod * 0.5);
    }
    else {
    }
    if ((UnitHasBehavior(lp_unit, "FelFireTorch") == true)) {
        lv_warmthMod = (lv_warmthMod * (1.0 - ((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FelFireTorchIntensity", "Amount", UnitGetOwner(lp_unit))) * 0.8) * 0.01)));
    }
    else {
    }
    if ((UnitHasBehavior(lp_unit, "GiantSunfish") == true)) {
        lv_warmthMod = (lv_warmthMod * 0.5);
    }
    else {
    }
    if ((UnitHasBehavior(lp_unit, "KoboldBotNormal") == true) && (gv_questIndexActive == 7) && (gv_deadnightPhase == 3)) {
        lv_warmthMod *= 0.5;
    }
    else {
    }
    return lv_warmthMod;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HungerDrainFactorGeneric
//--------------------------------------------------------------------------------------------------
fixed gf_HungerDrainFactorGeneric (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    fixed lv_hungerMod;
    fixed lv_hungerLossReduction;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_hungerMod = 1.0;
    lv_hungerLossReduction = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", UnitGetOwner(lp_unit)));
    // Implementation
    lv_hungerLossReduction /= 3.0;
    lv_hungerLossReduction *= 2.0;
    lv_hungerMod = (lv_hungerMod * (1.0 - (lv_hungerLossReduction / 100.0)));
    if ((UnitHasBehavior(lp_unit, "KoboldBotNormal") == true)) {
        lv_hungerMod *= 0.8;
    }
    else {
    }
    lv_hungerMod *= (1.0 - (libNtve_gf_ArithmeticRealClamp((40.0 - (gv_acclvl[lv_i] * 2)), 0.0, 40.0) / 100.0));
    if ((UnitHasBehavior(lp_unit, "FishingRod") == true)) {
        lv_hungerMod *= 0.5;
    }
    else {
    }
    if ((((UnitHasBehavior(lp_unit, "Cooking") == true) && (gv_skillCooking[UnitGetOwner(lp_unit)] >= 15)) || (UnitHasBehavior(lp_unit, "CookingExpertiseI") == true))) {
        lv_hungerMod = 0.0;
    }
    else {
    }
    return lv_hungerMod;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StaminaDrainFactorGeneric
//--------------------------------------------------------------------------------------------------
fixed gf_StaminaDrainFactorGeneric (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    fixed lv_enduranceBonus;
    fixed lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_enduranceBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", UnitGetOwner(lp_unit)));
    lv_value = 1.0;
    // Implementation
    lv_enduranceBonus = ((lv_enduranceBonus * 0.0125) / (1.0 + (lv_enduranceBonus * 0.0125)));
    lv_value *= (1.0 - lv_enduranceBonus);
    if ((UnitHasBehavior(lp_unit, "MurlocInvigoration") == true)) {
        lv_value *= 0.9;
    }
    else {
    }
    if ((gv_skillMining[lv_i] >= 25) && (UnitHasBehavior(lp_unit, "MiningExpertise") == true)) {
        lv_value *= 0.9;
    }
    else {
    }
    if ((gv_playerData[lv_i].lv_isAI == true)) {
        lv_value *= (1.0 - (gv_aIData[lv_i].lv_difficultyRating * 0.0015));
    }
    else {
    }
    lv_value *= gv_playerData[lv_i].lv_warmthStaminaPenaltyFactor;
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StaminaDrainFactorMining
//--------------------------------------------------------------------------------------------------
fixed gf_StaminaDrainFactorMining (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    fixed lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_value = 1.0;
    // Implementation
    if ((gv_skillMining[lv_i] >= 15)) {
        lv_value *= 0.8;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StaminaRegenFactorGeneric
//--------------------------------------------------------------------------------------------------
fixed gf_StaminaRegenFactorGeneric (unit lp_unit) {
    // Variable Declarations
    fixed lv_fatigueMod;
    fixed lv_enduranceRegenBonus;
    // Variable Initialization
    lv_fatigueMod = 1.0;
    lv_enduranceRegenBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", UnitGetOwner(lp_unit)));
    // Implementation
    lv_fatigueMod += (lv_enduranceRegenBonus * 0.01);
    return lv_fatigueMod;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StaminaFaint
//--------------------------------------------------------------------------------------------------
trigger auto_gf_StaminaFaint_Trigger = null;
unit auto_gf_StaminaFaint_lp_unit;
void gf_StaminaFaint (unit lp_unit) {
    auto_gf_StaminaFaint_lp_unit = lp_unit;
    if (auto_gf_StaminaFaint_Trigger == null) {
        auto_gf_StaminaFaint_Trigger = TriggerCreate("auto_gf_StaminaFaint_TriggerFunc");
    }
    TriggerExecute(auto_gf_StaminaFaint_Trigger, false, false);
}
bool auto_gf_StaminaFaint_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_StaminaFaint_lp_unit;
    int autoA108C845_val;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    autoA108C845_val = RandomInt(1, 3);
    if (autoA108C845_val == 1) {
        TextExpressionSetToken("Param/Expression/B412BD1A", "A", gf_GetPlayerName(lv_i, 0));
        TextExpressionSetToken("Param/Expression/B412BD1A", "B", StringExternal("Param/Value/865A4020"));
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble("Param/Expression/B412BD1A"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/066764CD")));
    }
    else if (autoA108C845_val == 2) {
        TextExpressionSetToken("Param/Expression/24398594", "A", gf_GetPlayerName(lv_i, 0));
        TextExpressionSetToken("Param/Expression/24398594", "B", StringExternal("Param/Value/3D865365"));
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble("Param/Expression/24398594"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/17B677ED")));
    }
    else if (autoA108C845_val == 3) {
        TextExpressionSetToken("Param/Expression/E21BBC4B", "A", gf_GetPlayerName(lv_i, 0));
        TextExpressionSetToken("Param/Expression/E21BBC4B", "B", StringExternal("Param/Value/211241E1"));
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble("Param/Expression/E21BBC4B"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/4A04AD75")));
    }
    else {
    }
    UnitIssueOrder(lp_unit, Order(AbilityCommand("KoboldTestBuild", 30)), c_orderQueueReplace);
    gf_Quicktag(lp_unit, StringExternal("Param/Value/3B2C9FA3"), 2.0, 24);
    UnitSetFacing(lp_unit, (UnitGetFacing(lp_unit) + 1.0), 0.0);
    if ((StringSub(gv_perks[UnitGetOwner(lp_unit)], 6, 6) == "1")) {
        UnitCreateEffectUnit(lp_unit, "UnconsciousApply2", lp_unit);
    }
    else {
        UnitCreateEffectUnit(lp_unit, "UnconsciousApply", lp_unit);
    }
    libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimPlay {derp death} Death");
    CameraPan(UnitGetOwner(lp_unit), UnitGetPosition(lp_unit), 0.5, -1, 10, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimSetPaused {derp death}");
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WoundedFlash
//--------------------------------------------------------------------------------------------------
trigger auto_gf_WoundedFlash_Trigger = null;
unit auto_gf_WoundedFlash_lp_unit;
fixed auto_gf_WoundedFlash_lp_damageTaken;
void gf_WoundedFlash (unit lp_unit, fixed lp_damageTaken) {
    auto_gf_WoundedFlash_lp_unit = lp_unit;
    auto_gf_WoundedFlash_lp_damageTaken = lp_damageTaken;
    if (auto_gf_WoundedFlash_Trigger == null) {
        auto_gf_WoundedFlash_Trigger = TriggerCreate("auto_gf_WoundedFlash_TriggerFunc");
    }
    TriggerExecute(auto_gf_WoundedFlash_Trigger, false, false);
}
bool auto_gf_WoundedFlash_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_WoundedFlash_lp_unit;
    fixed lp_damageTaken = auto_gf_WoundedFlash_lp_damageTaken;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold") && (UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0) && (gv_woundedFlashActive[lv_i] == false)) {
        gv_woundedFlashActive[lv_i] = true;
        DialogControlFadeTransparency(gv_woundedFlashImage, PlayerGroupSingle(lv_i), 0.25, (100.0 - lp_damageTaken));
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_woundedFlashImage, PlayerGroupSingle(lv_i), 0.625, 100.0);
        gv_woundedFlashActive[lv_i] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ApplyKoboldBehaviors
//--------------------------------------------------------------------------------------------------
void gf_ApplyKoboldBehaviors (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    fixed lv_temp;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    UnitBehaviorAdd(lp_unit, "ADTAllowedStacks", lp_unit, 1);
    UnitBehaviorAdd(lp_unit, "UnlimitedPower", lp_unit, 1);
    UnitBehaviorAdd(lp_unit, "SetHeavyIron", lp_unit, 1);
    if (gf_RewardCatIndexActive(lv_i, 2, 1)) {
        UnitBehaviorAdd(lp_unit, "SunHat", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 2)) {
        UnitBehaviorAdd(lp_unit, "DevoutCap", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 3)) {
        UnitBehaviorAdd(lp_unit, "Fez", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 4)) {
        UnitBehaviorAdd(lp_unit, "MonkHeadwear", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 5)) {
        UnitBehaviorAdd(lp_unit, "TopHat", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 6)) {
        UnitBehaviorAdd(lp_unit, "AdmiralHat", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 7)) {
        UnitBehaviorAdd(lp_unit, "Sombrero", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 8)) {
        UnitBehaviorAdd(lp_unit, "WizardsHat", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 9)) {
        UnitBehaviorAdd(lp_unit, "FlowerBoquet", lp_unit, 1);
    }
    else {
    }
    if ((gf_RewardCatIndexActive(lv_i, 2, 27) || ((gv_playerData[UnitGetOwner(lp_unit)].lv_isAI == true) && (gv_winterHolidays == true)))) {
        UnitBehaviorAdd(lp_unit, "WinterHat", lp_unit, 1);
    }
    else {
    }
    if (gf_RewardCatIndexActive(lv_i, 2, 28)) {
        UnitBehaviorAdd(lp_unit, "FieryCrown", lp_unit, 1);
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 2, 2) == "1")) {
        UnitBehaviorAdd(lp_unit, "AnimalHandler", lp_unit, 1);
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 10, 10) == "1")) {
        UnitBehaviorAdd(lp_unit, "Survivalist", lp_unit, 1);
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 16, 16) == "1")) {
        UnitBehaviorAdd(lp_unit, "CombatTraining", lp_unit, 1);
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 17, 17) == "1")) {
        UnitBehaviorAdd(lp_unit, "Mysticism", lp_unit, 1);
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 18, 18) == "1")) {
        UnitBehaviorAdd(lp_unit, "Lightbringer", lp_unit, 1);
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 28, 28) == "1")) {
        UnitBehaviorAdd(lp_unit, "Superstition", lp_unit, 1);
    }
    else {
    }
    if ((StringSub(gv_perks[lv_i], 40, 40) == "1")) {
        UnitBehaviorAdd(lp_unit, "CampfireExpert", lp_unit, 1);
    }
    else {
    }
    UnitBehaviorAdd(lp_unit, "KoboldCanEat", lp_unit, 1);
    if ((ModI(gv_playerData[lv_i].lv_team, 2) == 0)) {
        UnitBehaviorAdd(lp_unit, "SouthernTribeUniform", lp_unit, 1);
    }
    else {
    }
    if ((gv_lambSirloinEnabled[gv_playerData[lv_i].lv_team] == true)) {
        UnitBehaviorAdd(lp_unit, "SmokedLambSirloinReq", lp_unit, 1);
    }
    else {
    }
    if ((gv_raining == true)) {
        UnitBehaviorAdd(lp_unit, "Raining", lp_unit, 1);
    }
    else {
    }
    if ((gv_winter == true)) {
        UnitBehaviorAdd(lp_unit, "Snowing", lp_unit, 1);
    }
    else {
    }
    if ((gv_questIndexActive == 7) && (gv_deadnightPhase == 3)) {
        UnitBehaviorAdd(lp_unit, "DeadnightActive", lp_unit, 1);
    }
    else {
    }
    if ((gv_questIndexActive == 11)) {
        UnitBehaviorAdd(lp_unit, "ShovelKnowledge", lp_unit, 1);
    }
    else {
    }
    if ((gv_questIndexActive == 13)) {
        UnitBehaviorAdd(lp_unit, "BarnetsMonument", lp_unit, 1);
    }
    else {
    }
    if ((gv_gameMode == 2) && (gf_UnitExists(gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTower) == false)) {
        UnitBehaviorAdd(lp_unit, "CanBuildWatchTower", lp_unit, 1);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SwapResourceNodes
//--------------------------------------------------------------------------------------------------
void gf_SwapResourceNodes () {
    int autoE9A14EF4_ae;
    int autoE9A14EF4_ai;
    int autoAA046177_ae;
    int autoAA046177_ai;
    int auto38AA923D_ae;
    int auto38AA923D_ai;
    // Variable Declarations
    int lv_a;
    unitgroup lv_allKobolds;
    unitgroup lv_allNodes;
    unitgroup lv_northRessNodes;
    unitgroup lv_southRessNodes;
    unit lv_pick;
    point lv_p;
    // Variable Initialization
    lv_allKobolds = UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_allNodes = UnitGroupEmpty();
    lv_northRessNodes = UnitGroupEmpty();
    lv_southRessNodes = UnitGroupEmpty();
    // Implementation
    lv_allNodes = UnitGroup("BerryBush", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_northRessNodes = UnitGroup("BerryBush", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(2745)), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_southRessNodes = UnitGroup("BerryBush", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(2316)), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_allNodes, c_unitCountAlive) > 20)) {
        autoE9A14EF4_ae = 20;
        autoE9A14EF4_ai = 1;
        lv_a = 1;
        for ( ; ( (autoE9A14EF4_ai >= 0 && lv_a <= autoE9A14EF4_ae) || (autoE9A14EF4_ai <= 0 && lv_a >= autoE9A14EF4_ae) ) ; lv_a += autoE9A14EF4_ai ) {
            lv_pick = null;
            while ((lv_pick == null)) {
                if ((UnitGroupCount(lv_northRessNodes, c_unitCountAlive) > 0)) {
                    lv_pick = UnitGroupRandomUnit(lv_northRessNodes, c_unitCountAlive);
                    UnitGroupClear(lv_northRessNodes);
                }
                else if ((UnitGroupCount(lv_southRessNodes, c_unitCountAlive) > 0)) {
                    lv_pick = UnitGroupRandomUnit(lv_southRessNodes, c_unitCountAlive);
                    UnitGroupClear(lv_southRessNodes);
                }
                else if (true) {
                    lv_pick = UnitGroupRandomUnit(lv_allNodes, c_unitCountAlive);
                }
                if ((UnitGroupCount(UnitGroupFilterRegion(lv_allKobolds, RegionCircle(UnitGetPosition(lv_pick), 24.0), 0), c_unitCountAlive) == 0)) {
                }
                else {
                    lv_pick = null;
                }
            }
            lv_p = UnitGetPosition(lv_pick);
            UnitRemove(lv_pick);
            UnitCreate(1, "CulinaryHerbBush", c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
        }
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("BerryBush", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_SpawnBerries(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CulinaryHerbBush", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_SpawnHerbs(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    lv_allNodes = UnitGroup("StoneDeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_northRessNodes = UnitGroup("StoneDeposit", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(2745)), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_southRessNodes = UnitGroup("StoneDeposit", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(2316)), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_allNodes, c_unitCountAlive) > 20)) {
        autoAA046177_ae = 20;
        autoAA046177_ai = 1;
        lv_a = 1;
        for ( ; ( (autoAA046177_ai >= 0 && lv_a <= autoAA046177_ae) || (autoAA046177_ai <= 0 && lv_a >= autoAA046177_ae) ) ; lv_a += autoAA046177_ai ) {
            lv_pick = null;
            while ((lv_pick == null)) {
                if ((UnitGroupCount(lv_northRessNodes, c_unitCountAlive) > 0)) {
                    lv_pick = UnitGroupRandomUnit(lv_northRessNodes, c_unitCountAlive);
                    UnitGroupClear(lv_northRessNodes);
                }
                else if ((UnitGroupCount(lv_southRessNodes, c_unitCountAlive) > 0)) {
                    lv_pick = UnitGroupRandomUnit(lv_southRessNodes, c_unitCountAlive);
                    UnitGroupClear(lv_southRessNodes);
                }
                else if (true) {
                    lv_pick = UnitGroupRandomUnit(lv_allNodes, c_unitCountAlive);
                }
                if ((UnitGroupCount(UnitGroupFilterRegion(lv_allKobolds, RegionCircle(UnitGetPosition(lv_pick), 24.0), 0), c_unitCountAlive) == 0)) {
                }
                else {
                    lv_pick = null;
                }
            }
            lv_p = UnitGetPosition(lv_pick);
            UnitRemove(lv_pick);
            UnitCreate(1, "GoldDeposit", c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
        }
    }
    else {
    }
    lv_allNodes = UnitGroup("MapleTree", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_allNodes);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 1.0);
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_allNodes, c_unitCountAlive) > gv_elderTreeQuota)) {
        auto38AA923D_ae = gv_elderTreeQuota;
        auto38AA923D_ai = 1;
        lv_a = 1;
        for ( ; ( (auto38AA923D_ai >= 0 && lv_a <= auto38AA923D_ae) || (auto38AA923D_ai <= 0 && lv_a >= auto38AA923D_ae) ) ; lv_a += auto38AA923D_ai ) {
            lv_pick = null;
            while ((lv_pick == null)) {
                lv_pick = UnitGroupRandomUnit(lv_allNodes, c_unitCountAlive);
                if ((UnitGroupCount(UnitGroupFilterRegion(lv_allKobolds, RegionCircle(UnitGetPosition(lv_pick), 24.0), 0), c_unitCountAlive) == 0)) {
                }
                else {
                    lv_pick = null;
                }
            }
            lv_p = UnitGetPosition(lv_pick);
            UnitRemove(lv_pick);
            UnitCreate(1, "ElderTree", c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
            UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
        }
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("StoneDeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, RandomInt(5, 10));
        gf_UpdateResourceTooltip(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("GoldDeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, RandomInt(80, 120));
        gf_UpdateResourceTooltip(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ModifyUnitSight
//--------------------------------------------------------------------------------------------------
void gf_ModifyUnitSight (string lp_unit, int lp_player, fixed lp_real) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unit, "Sight", lp_player, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "Sight", lp_player)) + lp_real), 0));
    if ((lp_unit == "Kobold")) {
        gv_playerData[lp_player].lv_stats.lv_sightRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "Sight", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "IronbarkArmorSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_player, FixedToString(gv_playerData[lp_player].lv_stats.lv_sightRadius, 0));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DropAllItems
//--------------------------------------------------------------------------------------------------
void gf_DropAllItems (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if (gf_UnitExists(lp_unit)) {
        UnitGroupLoopBegin(UnitInventoryGroup(lp_unit));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(lp_unit) != "Kobold") || ((UnitGetType(lp_unit) == "Kobold") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == gv_backpackSlot)))) {
                UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lp_unit), false);
                UnitCreateEffectPoint(UnitGroupLoopCurrent(), "LootFountainEffect", PointWithOffsetPolar(UnitGetPosition(lp_unit), RandomFixed(0.5, 1.0), libNtve_gf_RandomAngle()));
                UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if ((gv_playerData[lv_i].lv_isAI == true) && (UnitGetType(lp_unit) == "Kobold")) {
            gv_aIData[lv_i].lv_weightedPOI = UnitGetPosition(lp_unit);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DropItems
//--------------------------------------------------------------------------------------------------
void gf_DropItems (unit lp_unit, unitgroup lp_items) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if (gf_UnitExists(lp_unit)) {
        UnitGroupLoopBegin(lp_items);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(lp_unit) != "Kobold") || ((UnitGetType(lp_unit) == "Kobold") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == gv_backpackSlot)))) {
                UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffset(UnitGetPosition(lp_unit), RandomFixed(-0.5, 0.5), RandomFixed(-0.5, 0.5)), false);
                UnitCreateEffectPoint(UnitGroupLoopCurrent(), "LootFountainEffect", PointWithOffsetPolar(UnitGetPosition(lp_unit), RandomFixed(0.5, 1.0), libNtve_gf_RandomAngle()));
                UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if ((gv_playerData[lv_i].lv_isAI == true) && (UnitGetType(lp_unit) == "Kobold")) {
            gv_aIData[lv_i].lv_weightedPOI = UnitGetPosition(lp_unit);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: KoboldTexture
//--------------------------------------------------------------------------------------------------
void gf_KoboldSkin(unit kobold, int skinType){
    actor act = libNtve_gf_MainActorofUnit(kobold);
    string skin = "KoboldNormal";
    if (skinType == 2){
        skin = "KoboldSnow";
    }
    ActorSend(act, "TextureSelectById " + skin);
}
bool KoboldSkin_Cheat(bool cond, bool actions){
    int p = EventPlayer();
    if (gv_admin[p]){
        gf_KoboldSkin(gv_playerData[p].lv_kobold, StringToInt(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}
void KoboldSkin_Init(){
    TriggerAddEventChatMessage(TriggerCreate("KoboldSkin_Cheat"), c_playerAny, "-KoboldSkin ", false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateSkillButton
//--------------------------------------------------------------------------------------------------
void gf_UpdateSkillButton (int lp_player) {
    // Implementation
    if ((gv_gameOver == false)) {
        if ((gv_skillPointsPlayer[lp_player] > 0)) {
            TextExpressionSetToken("Param/Expression/0FACC3FA", "A", StringExternal("Param/Value/3A59197E"));
            TextExpressionSetToken("Param/Expression/0FACC3FA", "B", IntToText(gv_skillPointsPlayer[lp_player]));
            TextExpressionSetToken("Param/Expression/0FACC3FA", "C", StringExternal("Param/Value/B1B848B9"));
            libNtve_gf_SetDialogItemText(gv_skillButton, TextExpressionAssemble("Param/Expression/0FACC3FA"), PlayerGroupSingle(lp_player));
            if ((DialogIsVisible(gv_skillWindowBig, lp_player) == false)) {
                DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(lp_player), true);
            }
            else {
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_skillButton, StringExternal("Param/Value/0D13E96C"), PlayerGroupSingle(lp_player));
            DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(lp_player), false);
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateSkillWindow
//--------------------------------------------------------------------------------------------------
void gf_UpdateSkillWindow (int lp_player) {
    int autoF8EE57C5_ae;
    int autoF8EE57C5_ai;
    int auto1AD108EF_ae;
    int auto1AD108EF_ai;
    // Variable Declarations
    int lv_b;
    // Variable Initialization
    // Implementation
    libNtve_gf_SetDialogItemText(gv_skillLabel[1], (StringExternal("Param/Value/375F7FAA") + IntToText(gv_skillForestry[lp_player])), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_skillLabel[2], (StringExternal("Param/Value/4300D996") + IntToText(gv_skillMining[lp_player])), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_skillLabel[3], (StringExternal("Param/Value/8F1CF3AF") + IntToText(gv_skillCooking[lp_player])), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_skillLabel[4], (StringExternal("Param/Value/634C65D2") + IntToText(gv_skillForaging[lp_player])), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_skillLabel[5], (StringExternal("Param/Value/A17189F4") + IntToText(gv_skillArtisanship[lp_player])), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_skillLabel[6], (StringExternal("Param/Value/010E75A8") + (IntToText(gv_skillPointsPlayer[lp_player]) + StringExternal("Param/Value/06AF4156"))), PlayerGroupSingle(lp_player));
    TextExpressionSetToken("Param/Expression/94C28898", "A", StringExternal("Param/Value/37BBFC9F"));
    TextExpressionSetToken("Param/Expression/94C28898", "B", IntToText(gv_skillForestry[lp_player]));
    libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[1], TextExpressionAssemble("Param/Expression/94C28898"), PlayerGroupSingle(lp_player));
    TextExpressionSetToken("Param/Expression/EEC254F8", "A", StringExternal("Param/Value/52E8316C"));
    TextExpressionSetToken("Param/Expression/EEC254F8", "B", IntToText(gv_skillMining[lp_player]));
    libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[2], TextExpressionAssemble("Param/Expression/EEC254F8"), PlayerGroupSingle(lp_player));
    TextExpressionSetToken("Param/Expression/D446B686", "A", StringExternal("Param/Value/1739D5B0"));
    TextExpressionSetToken("Param/Expression/D446B686", "B", IntToText(gv_skillCooking[lp_player]));
    libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[3], TextExpressionAssemble("Param/Expression/D446B686"), PlayerGroupSingle(lp_player));
    TextExpressionSetToken("Param/Expression/D4E80416", "A", StringExternal("Param/Value/C3F0247B"));
    TextExpressionSetToken("Param/Expression/D4E80416", "B", IntToText(gv_skillForaging[lp_player]));
    libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[4], TextExpressionAssemble("Param/Expression/D4E80416"), PlayerGroupSingle(lp_player));
    TextExpressionSetToken("Param/Expression/AD0A18D2", "A", StringExternal("Param/Value/1E44D025"));
    TextExpressionSetToken("Param/Expression/AD0A18D2", "B", IntToText(gv_skillArtisanship[lp_player]));
    libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[5], TextExpressionAssemble("Param/Expression/AD0A18D2"), PlayerGroupSingle(lp_player));
    if ((gv_skillPointsPlayer[lp_player] > 0)) {
        auto1AD108EF_ae = 5;
        auto1AD108EF_ai = 1;
        lv_b = 1;
        for ( ; ( (auto1AD108EF_ai >= 0 && lv_b <= auto1AD108EF_ae) || (auto1AD108EF_ai <= 0 && lv_b >= auto1AD108EF_ae) ) ; lv_b += auto1AD108EF_ai ) {
            DialogControlSetVisible(gv_bTNSkillIncrease[lv_b], PlayerGroupSingle(lp_player), true);
        }
    }
    else {
        autoF8EE57C5_ae = 5;
        autoF8EE57C5_ai = 1;
        lv_b = 1;
        for ( ; ( (autoF8EE57C5_ai >= 0 && lv_b <= autoF8EE57C5_ae) || (autoF8EE57C5_ai <= 0 && lv_b >= autoF8EE57C5_ae) ) ; lv_b += autoF8EE57C5_ai ) {
            DialogControlSetVisible(gv_bTNSkillIncrease[lv_b], PlayerGroupSingle(lp_player), false);
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AddExperience
//--------------------------------------------------------------------------------------------------
void gf_AddExperience (unit lp_unit, fixed lp_amount) {
    // Variable Declarations
    int lv_i;
    fixed lv_globalModifier;
    fixed lv_intelligenceModifier;
    fixed lv_amount;
    unit lv_learner;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_globalModifier = 1.0;
    lv_intelligenceModifier = 1.0;
    lv_amount = lp_amount;
    lv_learner = lp_unit;
    // Implementation
    if ((gv_tutorial == false) && ((lv_i >= 0) && (lv_i <= gv_players))) {
        lv_intelligenceModifier = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lv_i));
        if ((gv_playerData[lv_i].lv_alive == true) && (UnitLevel(gv_playerData[lv_i].lv_kobold) < 10) && (UnitGetType(lp_unit) != "MurlocSlave")) {
            lv_learner = gv_playerData[lv_i].lv_kobold;
            lv_intelligenceModifier /= 100.0;
            lv_intelligenceModifier += 1.0;
            if ((StringSub(gv_perks[UnitGetOwner(lv_learner)], 19, 19) == "1")) {
                lv_intelligenceModifier *= 1.05;
            }
            else {
            }
            lv_amount *= lv_globalModifier;
            lv_amount *= lv_intelligenceModifier;
            lv_amount = Round(lv_amount);
            UnitSetPropertyFixed(lv_learner, c_unitPropXP, (UnitGetPropertyFixed(lv_learner, c_unitPropXP, c_unitPropCurrent) + lv_amount));
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: IncreaseSkillType
//--------------------------------------------------------------------------------------------------
void gf_IncreaseSkillType (int lp_player, int lp_type, int lp_amount) {
    int auto724D1CF8_ae;
    int auto724D1CF8_ai;
    int autoED42FBC1_val;
    // Variable Declarations
    const fixed lv_f1 = 0.01;
    const fixed lv_a1 = 0.01;
    int lv_a;
    fixed lv_x;
    int lv_y;
    // Variable Initialization
    lv_y = gv_skillForestry[lp_player];
    // Implementation
    auto724D1CF8_ae = lp_amount;
    auto724D1CF8_ai = 1;
    lv_a = 1;
    for ( ; ( (auto724D1CF8_ai >= 0 && lv_a <= auto724D1CF8_ae) || (auto724D1CF8_ai <= 0 && lv_a >= auto724D1CF8_ae) ) ; lv_a += auto724D1CF8_ai ) {
        autoED42FBC1_val = lp_type;
        if (autoED42FBC1_val == 1) {
            gv_skillForestry[lp_player] += 1;
            CatalogFieldValueSet(c_gameCatalogEffect, "ForestingStats", "Amount", lp_player, FixedToString(gv_skillForestry[lp_player], 0));
            gv_skillPointsPlayer[lp_player] -= 1;
            gf_UpdateSkillWindow(lp_player);
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Armored]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + 1.5), 1));
            CatalogFieldValueSet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Biological]", lp_player, FixedToString((((gv_skillForestry[lp_player] * lv_f1) / (1.0 + (gv_skillForestry[lp_player] * lv_f1))) * 100.0), 2));
            if ((ModI(gv_skillForestry[lp_player], 5) == 0)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player)) + 1.0), 0));
            }
            else {
            }
            CatalogFieldValueSet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Hover]", lp_player, FixedToString(((gv_skillForestry[lp_player] / (gv_skillForestry[lp_player] + 20.0)) * 150.0), 1));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Hover]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Light]", lp_player, FixedToString((180.0 - lv_x), 1));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Light]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Heroic]", lp_player, FixedToString((90.0 - (lv_x / 2.0)), 1));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Massive]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Massive]", lp_player, FixedToString((lv_x + 1.0), 0));
            gf_UpdateForestry(lp_player);
            gf_UpdateStatsAll(lp_player);
        }
        else if (autoED42FBC1_val == 2) {
            gv_skillMining[lp_player] += 1;
            CatalogFieldValueSet(c_gameCatalogEffect, "ExcavatingStats", "Amount", lp_player, FixedToString(gv_skillMining[lp_player], 0));
            gv_skillPointsPlayer[lp_player] -= 1;
            gf_UpdateSkillWindow(lp_player);
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Armored]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + 1.5), 1));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Heroic]", lp_player));
            if ((ModI(gv_skillMining[lp_player], 4) == 0)) {
                CatalogFieldValueSet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + 1.0), 0));
            }
            else {
            }
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Hover]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Hover]", lp_player, FixedToString((lv_x + 0.1), 1));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Light]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Light]", lp_player, FixedToString((lv_x + 1.0), 0));
            gf_UpdateMining(lp_player);
            gf_UpdateStatsAll(lp_player);
        }
        else if (autoED42FBC1_val == 3) {
            gv_skillCooking[lp_player] += 1;
            CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "Amount", lp_player, FixedToString(gv_skillCooking[lp_player], 0));
            gv_skillPointsPlayer[lp_player] -= 1;
            gf_UpdateSkillWindow(lp_player);
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Armored]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + 2.0), 0));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Biological]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + 1.5), 1));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Mechanical]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Mechanical]", lp_player, FixedToString((lv_x + 2.0), 0));
            gf_UpdateCooking(lp_player);
        }
        else if (autoED42FBC1_val == 4) {
            gv_skillForaging[lp_player] += 1;
            CatalogFieldValueSet(c_gameCatalogEffect, "ForagingStats", "Amount", lp_player, FixedToString(gv_skillForaging[lp_player], 0));
            gv_skillPointsPlayer[lp_player] -= 1;
            gf_UpdateSkillWindow(lp_player);
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Armored]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + 1.0), 0));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Biological]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + 4.0), 0));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Heroic]", lp_player));
            if ((ModI(gv_skillForaging[lp_player], 3) == 0)) {
                CatalogFieldValueSet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + 1.0), 0));
            }
            else {
            }
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Hover]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Hover]", lp_player, FixedToString((lv_x + 4.0), 0));
            gf_UpdateForaging(lp_player);
            gf_UpdateStatsAll(lp_player);
        }
        else if (autoED42FBC1_val == 5) {
            gv_skillArtisanship[lp_player] += 1;
            CatalogFieldValueSet(c_gameCatalogEffect, "ArtisanshipStats", "Amount", lp_player, FixedToString(gv_skillArtisanship[lp_player], 0));
            gv_skillPointsPlayer[lp_player] -= 1;
            gf_UpdateSkillWindow(lp_player);
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Armored]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + 0.3), 1));
            CatalogFieldValueSet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Biological]", lp_player, FixedToString((((gv_skillArtisanship[lp_player] * lv_a1) / (1.0 + (gv_skillArtisanship[lp_player] * lv_a1))) * 100.0), 2));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Heroic]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + 1.5), 1));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Hover]", lp_player));
            CatalogFieldValueSet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Hover]", lp_player, FixedToString((lv_x + 1.0), 0));
            lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Light]", lp_player));
            if ((ModI(gv_skillArtisanship[lp_player], 5) == 0)) {
                CatalogFieldValueSet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Light]", lp_player, FixedToString((lv_x + 1.0), 0));
            }
            else {
            }
            gf_UpdateArtisanship(lp_player);
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetExpertiseText
//--------------------------------------------------------------------------------------------------
text gf_GetExpertiseText (int lp_skill, int lp_player) {
    int auto5A8004D9_val;
    // Variable Declarations
    text lv_value;
    text lv_expertiseRank1;
    text lv_expertiseRank2;
    text lv_expertiseRank3;
    // Variable Initialization
    // Implementation
    auto5A8004D9_val = lp_skill;
    if (auto5A8004D9_val == 1) {
        if (((gv_skillForestry[lp_player] >= 5) && (gv_skillForestry[lp_player] <= 14))) {
            lv_value = StringExternal("Param/Value/66A53CD1");
        }
        else if (((gv_skillForestry[lp_player] >= 15) && (gv_skillForestry[lp_player] <= 19))) {
            lv_value = StringExternal("Param/Value/4851C723");
        }
        else if (((gv_skillForestry[lp_player] >= 20) && (gv_skillForestry[lp_player] <= 24))) {
            lv_value = StringExternal("Param/Value/077CAAD1");
        }
        else if ((gv_skillForestry[lp_player] >= 25)) {
            lv_value = StringExternal("Param/Value/78CB5079");
        }
    }
    else if (auto5A8004D9_val == 2) {
        if (((gv_skillMining[lp_player] >= 5) && (gv_skillMining[lp_player] <= 14))) {
            lv_value = StringExternal("Param/Value/C6ED2140");
        }
        else if (((gv_skillMining[lp_player] >= 15) && (gv_skillMining[lp_player] <= 19))) {
            lv_value = StringExternal("Param/Value/60751BCD");
        }
        else if (((gv_skillMining[lp_player] >= 20) && (gv_skillMining[lp_player] <= 24))) {
            lv_value = StringExternal("Param/Value/946167D7");
        }
        else if ((gv_skillMining[lp_player] >= 25)) {
            lv_value = StringExternal("Param/Value/A6357DF0");
        }
    }
    else if (auto5A8004D9_val == 3) {
        if (((gv_skillCooking[lp_player] >= 5) && (gv_skillCooking[lp_player] <= 14))) {
            lv_value = StringExternal("Param/Value/DFC3A243");
        }
        else if (((gv_skillCooking[lp_player] >= 15) && (gv_skillCooking[lp_player] <= 19))) {
            lv_value = StringExternal("Param/Value/B4188995");
        }
        else if (((gv_skillCooking[lp_player] >= 20) && (gv_skillCooking[lp_player] <= 24))) {
            lv_value = StringExternal("Param/Value/6A8403A1");
        }
        else if ((gv_skillCooking[lp_player] >= 25)) {
            lv_value = StringExternal("Param/Value/959DEDB4");
        }
    }
    else if (auto5A8004D9_val == 4) {
        if (((gv_skillForaging[lp_player] >= 5) && (gv_skillForaging[lp_player] <= 14))) {
            lv_value = StringExternal("Param/Value/A253C2C4");
        }
        else if (((gv_skillForaging[lp_player] >= 15) && (gv_skillForaging[lp_player] <= 19))) {
            lv_value = StringExternal("Param/Value/25C090F1");
        }
        else if (((gv_skillForaging[lp_player] >= 20) && (gv_skillForaging[lp_player] <= 24))) {
            lv_value = StringExternal("Param/Value/4E6B963F");
        }
        else if ((gv_skillForaging[lp_player] >= 25)) {
            lv_value = StringExternal("Param/Value/9AD30E0A");
        }
    }
    else if (auto5A8004D9_val == 5) {
        if (((gv_skillArtisanship[lp_player] >= 5) && (gv_skillArtisanship[lp_player] <= 14))) {
            lv_value = StringExternal("Param/Value/58BD4F65");
        }
        else if (((gv_skillArtisanship[lp_player] >= 15) && (gv_skillArtisanship[lp_player] <= 19))) {
            lv_value = StringExternal("Param/Value/79D52420");
        }
        else if (((gv_skillArtisanship[lp_player] >= 20) && (gv_skillArtisanship[lp_player] <= 24))) {
            lv_value = StringExternal("Param/Value/1C4C952A");
        }
        else if ((gv_skillArtisanship[lp_player] >= 25)) {
            lv_value = StringExternal("Param/Value/40E95854");
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateForestry
//--------------------------------------------------------------------------------------------------
void gf_UpdateForestry (int lp_player) {
    // Variable Declarations
    fixed lv_x;
    text lv_skillText;
    fixed lv_a1;
    fixed lv_a2;
    fixed lv_a3;
    fixed lv_a4;
    fixed lv_a5;
    int lv_a6;
    fixed lv_treeLife;
    fixed lv_treeGrowthDurationTotal;
    fixed lv_plantTreeCDR;
    // Variable Initialization
    lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Armored]", lp_player));
    lv_a2 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Biological]", lp_player));
    lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Heroic]", lp_player));
    lv_a4 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Hover]", lp_player));
    lv_a5 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Massive]", lp_player));
    lv_a6 = (gv_skillForestry[lp_player] / 5);
    lv_treeLife = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "MapleTree", "LifeMax", 0));
    lv_treeGrowthDurationTotal = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Light]", lp_player));
    lv_plantTreeCDR = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Heroic]", lp_player));
    // Implementation
    lv_x = ((lv_treeLife - 15.0) / lv_treeGrowthDurationTotal);
    CatalogFieldValueSet(c_gameCatalogEffect, "GrowingTreeModify", "VitalArray[" + IntToString(0) + "].Change", lp_player, FixedToString(lv_x, 2));
    CatalogFieldValueSet(c_gameCatalogAbil, "PlantTree", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, FixedToString((90.0 - lv_plantTreeCDR), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "AutogrowStat", "Amount", lp_player, FixedToString((50.0 + (lv_a1 * 1.25)), 0));
    TextExpressionSetToken("Param/Expression/E0379E2F", "A", StringExternal("Param/Value/D97174DE"));
    TextExpressionSetToken("Param/Expression/E0379E2F", "B", FixedToText(lv_a1, 1));
    TextExpressionSetToken("Param/Expression/E0379E2F", "C", StringExternal("Param/Value/CAC7E9FF"));
    TextExpressionSetToken("Param/Expression/E0379E2F", "E", FixedToText(lv_a5, 0));
    TextExpressionSetToken("Param/Expression/E0379E2F", "L", StringExternal("Param/Value/B3E46B78"));
    TextExpressionSetToken("Param/Expression/E0379E2F", "F", FixedToText(lv_a2, 1));
    TextExpressionSetToken("Param/Expression/E0379E2F", "G", StringExternal("Param/Value/8BE9FC05"));
    TextExpressionSetToken("Param/Expression/E0379E2F", "H", FixedToText(lv_a3, 0));
    TextExpressionSetToken("Param/Expression/E0379E2F", "I", StringExternal("Param/Value/EF308AE1"));
    TextExpressionSetToken("Param/Expression/E0379E2F", "J", FixedToText(lv_a4, 0));
    TextExpressionSetToken("Param/Expression/E0379E2F", "K", StringExternal("Param/Value/08191322"));
    TextExpressionSetToken("Param/Expression/E0379E2F", "M", FixedToText(lv_a6, 0));
    TextExpressionSetToken("Param/Expression/E0379E2F", "N", StringExternal("Param/Value/0941102C"));
    TextExpressionSetToken("Param/Expression/E0379E2F", "D", gf_GetExpertiseText(1, lp_player));
    lv_skillText = TextExpressionAssemble("Param/Expression/E0379E2F");
    libNtve_gf_SetDialogItemTooltip(gv_skillLabel[1], lv_skillText, PlayerGroupSingle(lp_player));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateMining
//--------------------------------------------------------------------------------------------------
void gf_UpdateMining (int lp_player) {
    // Variable Declarations
    text lv_skillText;
    fixed lv_a1;
    fixed lv_a3;
    fixed lv_a4;
    fixed lv_a5;
    // Variable Initialization
    lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Armored]", lp_player));
    lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Heroic]", lp_player));
    lv_a4 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Hover]", lp_player));
    lv_a5 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Light]", lp_player));
    // Implementation
    if ((gv_skillMining[lp_player] >= 15) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Mining15") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Mining15", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillMining[lp_player] >= 20) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Mining20") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Mining20", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillMining[lp_player] >= 25) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "GoldScout") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "GoldScout", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillMining[lp_player] >= 25) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "MiningExpertise") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "MiningExpertise", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/401E679A", "A", StringExternal("Param/Value/B7DD37C9"));
    TextExpressionSetToken("Param/Expression/401E679A", "B", FixedToText(lv_a1, 1));
    TextExpressionSetToken("Param/Expression/401E679A", "C", StringExternal("Param/Value/E81AE2A1"));
    TextExpressionSetToken("Param/Expression/401E679A", "F", FixedToText(lv_a3, 0));
    TextExpressionSetToken("Param/Expression/401E679A", "G", StringExternal("Param/Value/CCFC9744"));
    TextExpressionSetToken("Param/Expression/401E679A", "H", FixedToText(lv_a4, 1));
    TextExpressionSetToken("Param/Expression/401E679A", "I", StringExternal("Param/Value/4C30E8CA"));
    TextExpressionSetToken("Param/Expression/401E679A", "J", FixedToText(lv_a5, 0));
    TextExpressionSetToken("Param/Expression/401E679A", "K", StringExternal("Param/Value/F7356612"));
    TextExpressionSetToken("Param/Expression/401E679A", "D", gf_GetExpertiseText(2, lp_player));
    lv_skillText = TextExpressionAssemble("Param/Expression/401E679A");
    libNtve_gf_SetDialogItemTooltip(gv_skillLabel[2], lv_skillText, PlayerGroupSingle(lp_player));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateCooking
//--------------------------------------------------------------------------------------------------
void gf_UpdateCooking (int lp_player) {
    // Variable Declarations
    text lv_skillText;
    fixed lv_a1;
    fixed lv_a2;
    fixed lv_a3;
    fixed lv_bonusCoefficient;
    // Variable Initialization
    lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Armored]", lp_player));
    lv_a2 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Biological]", lp_player));
    lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Mechanical]", lp_player));
    lv_bonusCoefficient = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Armored]", lp_player));
    // Implementation
    lv_bonusCoefficient /= 100.0;
    lv_bonusCoefficient += 1.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Heroic]", lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Hover]", lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Light]", lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Massive]", lp_player, FixedToString((80.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Mechanical]", lp_player, FixedToString((28.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Psionic]", lp_player, FixedToString((130.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Robotic]", lp_player, FixedToString((120.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Structure]", lp_player, FixedToString((34.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Armored]", lp_player, FixedToString((24.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Biological]", lp_player, FixedToString((48.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Heroic]", lp_player, FixedToString((66.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Hover]", lp_player, FixedToString((25.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Light]", lp_player, FixedToString((70.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Massive]", lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Armored]", lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Biological]", lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Heroic]", lp_player, FixedToString((15.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Hover]", lp_player, FixedToString((100.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Massive]", lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Mechanical]", lp_player, FixedToString((40.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsGiantSunfish", "AttributeBonus[Armored]", lp_player, FixedToString((60.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsGiantSunfish", "AttributeBonus[Biological]", lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsSlipperyEel", "AttributeBonus[Armored]", lp_player, FixedToString((75.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsSlipperyEel", "AttributeBonus[Biological]", lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsForestTrout", "AttributeBonus[Armored]", lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsForestTrout", "AttributeBonus[Biological]", lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsForestTrout", "AttributeBonus[Heroic]", lp_player, FixedToString((35.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsHighlandGuppy", "AttributeBonus[Armored]", lp_player, FixedToString((60.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsHighlandGuppy", "AttributeBonus[Biological]", lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsAlbinoCavefish", "AttributeBonus[Armored]", lp_player, FixedToString((100.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsAlbinoCavefish", "AttributeBonus[Biological]", lp_player, FixedToString((80.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsStripedLurker", "AttributeBonus[Armored]", lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsStripedLurker", "AttributeBonus[Biological]", lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsJewelDanio", "AttributeBonus[Armored]", lp_player, FixedToString((40.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsJewelDanio", "AttributeBonus[Biological]", lp_player, FixedToString((60.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsWaterScorpion", "AttributeBonus[Armored]", lp_player, FixedToString((450.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsWaterScorpion", "AttributeBonus[Biological]", lp_player, FixedToString((100.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFireAmmonite", "AttributeBonus[Armored]", lp_player, FixedToString((45.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFireAmmonite", "AttributeBonus[Biological]", lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFireAmmonite", "AttributeBonus[Heroic]", lp_player, FixedToString((60.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsBlindRainfish", "AttributeBonus[Armored]", lp_player, FixedToString((35.0 * lv_bonusCoefficient), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsBlindRainfish", "AttributeBonus[Biological]", lp_player, FixedToString((10.0 * lv_bonusCoefficient), 1));
    if ((gv_skillCooking[lp_player] >= 5) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Cooking5") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Cooking5", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillCooking[lp_player] >= 10) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Cooking10") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Cooking10", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillCooking[lp_player] >= 15) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Cooking15") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Cooking15", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillCooking[lp_player] >= 20) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Cooking20") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Cooking20", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/1C69C74D", "A", StringExternal("Param/Value/8DF06B3F"));
    TextExpressionSetToken("Param/Expression/1C69C74D", "B", FixedToText(lv_a1, 0));
    TextExpressionSetToken("Param/Expression/1C69C74D", "C", StringExternal("Param/Value/95BE6973"));
    TextExpressionSetToken("Param/Expression/1C69C74D", "F", FixedToText(lv_a2, 1));
    TextExpressionSetToken("Param/Expression/1C69C74D", "G", StringExternal("Param/Value/6E4F2BB6"));
    TextExpressionSetToken("Param/Expression/1C69C74D", "H", FixedToText(lv_a3, 0));
    TextExpressionSetToken("Param/Expression/1C69C74D", "I", StringExternal("Param/Value/154BC074"));
    TextExpressionSetToken("Param/Expression/1C69C74D", "J", gf_GetExpertiseText(3, lp_player));
    lv_skillText = TextExpressionAssemble("Param/Expression/1C69C74D");
    libNtve_gf_SetDialogItemTooltip(gv_skillLabel[3], lv_skillText, PlayerGroupSingle(lp_player));
    gf_UpdateBuildingStats(lp_player);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateForaging
//--------------------------------------------------------------------------------------------------
void gf_UpdateForaging (int lp_player) {
    // Variable Declarations
    text lv_skillText;
    fixed lv_a1;
    fixed lv_a2;
    fixed lv_a3;
    fixed lv_a4;
    fixed lv_a5;
    // Variable Initialization
    lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Armored]", lp_player));
    lv_a2 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Biological]", lp_player));
    lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Heroic]", lp_player));
    lv_a4 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Hover]", lp_player));
    lv_a5 = gv_skillForaging[lp_player];
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "TamedSet", "Chance", lp_player, FixedToString((libNtve_gf_ArithmeticIntClamp((15 + (gv_skillForaging[lp_player] * 2)), 15, 100) / 100.0), 2));
    if ((gv_skillForaging[lp_player] > 0) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "SmokeDetection") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "SmokeDetection", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillForaging[lp_player] >= 15)) {
        CatalogFieldValueSet(c_gameCatalogUnit, "Bird", "Sight", lp_player, FixedToString(15.0, 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "BirdScoutSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_player, FixedToString(15.0, 0));
    }
    else {
    }
    if ((gv_skillForaging[lp_player] >= 20) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "AnimalScout") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "AnimalScout", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillForaging[lp_player] >= 5) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Foraging5") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Foraging5", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillForaging[lp_player] == 25) && (gv_b_Day == false)) {
        gf_ModifyUnitSight("Kobold", lp_player, 2.0);
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/72CD572C", "A", StringExternal("Param/Value/FF949783"));
    TextExpressionSetToken("Param/Expression/72CD572C", "B", FixedToText(lv_a1, 0));
    TextExpressionSetToken("Param/Expression/72CD572C", "C", StringExternal("Param/Value/415FC300"));
    TextExpressionSetToken("Param/Expression/72CD572C", "F", FixedToText(lv_a2, 0));
    TextExpressionSetToken("Param/Expression/72CD572C", "G", StringExternal("Param/Value/E411AF1F"));
    TextExpressionSetToken("Param/Expression/72CD572C", "M", FixedToText(lv_a5, 0));
    TextExpressionSetToken("Param/Expression/72CD572C", "N", StringExternal("Param/Value/540FAB23"));
    TextExpressionSetToken("Param/Expression/72CD572C", "H", FixedToText(lv_a3, 0));
    TextExpressionSetToken("Param/Expression/72CD572C", "I", StringExternal("Param/Value/92AEE458"));
    TextExpressionSetToken("Param/Expression/72CD572C", "J", FixedToText(lv_a4, 0));
    TextExpressionSetToken("Param/Expression/72CD572C", "K", StringExternal("Param/Value/C376F48F"));
    TextExpressionSetToken("Param/Expression/72CD572C", "D", FixedToText(lv_a5, 0));
    TextExpressionSetToken("Param/Expression/72CD572C", "E", StringExternal("Param/Value/EAD61C5F"));
    TextExpressionSetToken("Param/Expression/72CD572C", "L", gf_GetExpertiseText(4, lp_player));
    lv_skillText = TextExpressionAssemble("Param/Expression/72CD572C");
    libNtve_gf_SetDialogItemTooltip(gv_skillLabel[4], lv_skillText, PlayerGroupSingle(lp_player));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateArtisanship
//--------------------------------------------------------------------------------------------------
void gf_UpdateArtisanship (int lp_player) {
    // Variable Declarations
    int lv_a;
    text lv_skillText;
    fixed lv_a1;
    fixed lv_a2;
    fixed lv_a3;
    fixed lv_a4;
    fixed lv_a5;
    fixed lv_repairPerSec;
    bool lv_updtBtns;
    // Variable Initialization
    lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Armored]", lp_player));
    lv_a2 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Biological]", lp_player));
    lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Heroic]", lp_player));
    lv_a4 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Hover]", lp_player));
    lv_a5 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Light]", lp_player));
    lv_repairPerSec = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Armored]", lp_player));
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "ShelterSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_player, FixedToString((5.0 + (gv_skillArtisanship[lp_player] * 0.1)), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "GoodHostSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_player, FixedToString((5.0 + (gv_skillArtisanship[lp_player] * 0.1)), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArtisanshipRepairTrigger", "VitalArray[Life].Change[0]", lp_player, FixedToString((2.0 * lv_repairPerSec), 1));
    gv_aDTCapPlayer[lp_player] = (1 + FixedToInt((gv_skillArtisanship[lp_player] * 0.1)));
    CatalogFieldValueSet(c_gameCatalogEffect, "AutomatedDefenseTurretCap", "Amount", lp_player, IntToString(gv_aDTCapPlayer[lp_player]));
    if ((gv_aDTCapPlayer[lp_player] > UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "ADTAllowedStacks"))) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "ADTAllowedStacks", gv_playerData[lp_player].lv_kobold, (gv_aDTCapPlayer[lp_player] - UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "ADTAllowedStacks")));
    }
    else {
    }
    if ((lv_repairPerSec > 0.0) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ArtisanshipRepairAura") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "ArtisanshipRepairAura", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillArtisanship[lp_player] >= 5) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Artisanship5") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Artisanship5", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillArtisanship[lp_player] >= 10) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Artisanship10") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Artisanship10", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillArtisanship[lp_player] >= 15) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Artisanship15") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Artisanship15", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillArtisanship[lp_player] >= 15) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "SalvageAllowed") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "SalvageAllowed", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillArtisanship[lp_player] >= 20) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Artisanship20") == false)) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Artisanship20", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if ((gv_skillArtisanship[lp_player] >= 25) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Artisanship25") == false)) {
        CatalogFieldValueSet(c_gameCatalogAbil, "KoboldTestBuild", "InfoArray[" + IntToString(14) + "].Time", lp_player, IntToString(5));
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "Artisanship25", gv_playerData[lp_player].lv_kobold, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "Artisan25LumberCost", "AttributeBonus[Armored]", lp_player, IntToString(1));
        CatalogFieldValueSet(c_gameCatalogEffect, "Artisan25LumberCost", "AttributeBonus[Biological]", lp_player, IntToString(2));
        CatalogFieldValueSet(c_gameCatalogEffect, "Artisan25LumberCost", "AttributeBonus[Heroic]", lp_player, IntToString(1));
        gf_UpdateStatsAll(lp_player);
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/A7F5CD52", "A", StringExternal("Param/Value/D0CCE7A4"));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "B", FixedToText(lv_a3, 1));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "C", StringExternal("Param/Value/264DFA0E"));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "F", FixedToText(lv_a2, 1));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "G", StringExternal("Param/Value/4E74DE61"));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "H", FixedToText(lv_a1, 1));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "I", StringExternal("Param/Value/AD6BFC02"));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "J", FixedToText(lv_a4, 0));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "K", StringExternal("Param/Value/650AF4A0"));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "E", FixedToText(lv_a5, 0));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "L", StringExternal("Param/Value/7C978806"));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "M", FixedToText((gv_skillArtisanship[lp_player] * 0.1), 1));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "N", StringExternal("Param/Value/AB174EA1"));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "O", IntToText((gv_aDTCapPlayer[lp_player] - 1)));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "P", StringExternal("Param/Value/ED8261DC"));
    TextExpressionSetToken("Param/Expression/A7F5CD52", "D", gf_GetExpertiseText(5, lp_player));
    lv_skillText = TextExpressionAssemble("Param/Expression/A7F5CD52");
    libNtve_gf_SetDialogItemTooltip(gv_skillLabel[5], lv_skillText, PlayerGroupSingle(lp_player));
    gf_UpdateBuildingStats(lp_player);
    if ((gv_playerData[lp_player].lv_isAI == true)) {
        gf_UpdateSupplies(lp_player);
        gv_aIData[lp_player].lv_smithyDesire = gf_WantedItemType(gv_playerData[lp_player].lv_kobold, "Smithy");
        gv_aIData[lp_player].lv_benchDesire = gf_WantedItemType(gv_playerData[lp_player].lv_kobold, "Workbench");
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CreateSalvageResources
//--------------------------------------------------------------------------------------------------
void gf_CreateSalvageResources (string lp_type, point lp_point) {
    // Implementation
    if (((lp_type == "Tent") || (lp_type == "Workbench") || (lp_type == "Farm") || (lp_type == "AutomatedDefenseTurret"))) {
        UnitCreate(1, "Lumber", 0, 0, lp_point, libNtve_gf_RandomAngle());
    }
    else if (((lp_type == "Smithy") || (lp_type == "Campfire"))) {
        UnitCreate(1, "Stone", 0, 0, lp_point, libNtve_gf_RandomAngle());
    }
    else if ((lp_type == "HuntersLodge")) {
        UnitCreate(1, "Lumber", 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
        UnitCreate(1, "Leather", 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
    }
    else if ((lp_type == "StorageOutpost")) {
        UnitCreate(1, "Lumber", 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
        UnitCreate(1, "Lumber", 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
    }
    else if ((lp_type == "Tavern")) {
        UnitCreate(1, "Lumber", 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
        UnitCreate(1, "Stone", 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StaminaOnCraft
//--------------------------------------------------------------------------------------------------
void gf_StaminaOnCraft (unit lp_unit) {
    // Variable Declarations
    fixed lv_staminaRestored;
    // Variable Initialization
    // Implementation
    if (gf_UnitExists(lp_unit)) {
        lv_staminaRestored = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Biological]", UnitGetOwner(lp_unit)));
        if ((lv_staminaRestored > 0.0)) {
            gv_playerData[UnitGetOwner(lp_unit)].lv_stamina += lv_staminaRestored;
            TextExpressionSetToken("Param/Expression/9433D5DE", "A", StringExternal("Param/Value/1D6CFCB3"));
            TextExpressionSetToken("Param/Expression/9433D5DE", "B", FixedToText(lv_staminaRestored, 0));
            TextExpressionSetToken("Param/Expression/9433D5DE", "C", StringExternal("Param/Value/BC67CC12"));
            gf_Quicktag(lp_unit, TextExpressionAssemble("Param/Expression/9433D5DE"), 2.0, 24);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Forestry20Heal
//--------------------------------------------------------------------------------------------------
void gf_Forestry20Heal (unit lp_source, unit lp_target, fixed lp_damageAmount, string lp_dmgEffect) {
    // Variable Declarations
    int lv_i;
    fixed lv_healAmount;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_source);
    // Implementation
    if ((UnitGetType(lp_source) == "Kobold") && gf_NormalAttack(lp_dmgEffect)) {
        if ((gv_skillForestry[lv_i] >= 20) && (UnitGetPropertyFixed(lp_source, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) && (UnitGetType(lp_source) == "Kobold") && ((UnitTypeTestAttribute(UnitGetType(lp_target), c_unitAttributeArmored) == true) || (UnitTypeTestAttribute(UnitGetType(lp_target), c_unitAttributeStructure) == true))) {
            lv_healAmount = (lp_damageAmount * 0.2);
            gf_HealUnit(lp_source, lp_source, lv_healAmount, true);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BoostAdrenalineRush
//--------------------------------------------------------------------------------------------------
void gf_BoostAdrenalineRush (int lp_player, string lp_minerType, int lp_amount) {
    // Variable Declarations
    int lv_g;
    // Variable Initialization
    lv_g = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "AdrenalineRushCounter", "Amount", lp_player));
    // Implementation
    if ((gv_playerData[lp_player].lv_alive == true) && (gv_skillMining[lp_player] >= 20) && (lp_minerType == "Kobold")) {
        lv_g = libNtve_gf_ArithmeticIntClamp((lv_g + lp_amount), 0, gv_skillMining[lp_player]);
        CatalogFieldValueSet(c_gameCatalogEffect, "AdrenalineRushCounter", "Amount", lp_player, IntToString(lv_g));
        if ((lv_g > 0)) {
            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "AdrenalineRushReady", gv_playerData[lp_player].lv_kobold, 1);
        }
        else {
            UnitIssueOrder(gv_playerData[lp_player].lv_kobold, Order(AbilityCommand("AdrenalineRush", 1)), c_orderQueueReplace);
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "AdrenalineRushReady", 1);
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnSpell
//--------------------------------------------------------------------------------------------------
void gf_LearnSpell (int lp_spellIndex, int lp_player) {
    int autoA55668AA_val;
    // Implementation
    autoA55668AA_val = lp_spellIndex;
    if (autoA55668AA_val == 1) {
        UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, "NaturesGrace", true);
        TechTreeUpgradeAddLevel(lp_player, "SpellNaturesGrace", 1);
    }
    else if (autoA55668AA_val == 2) {
        UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, "MineralTap", true);
        TechTreeUpgradeAddLevel(lp_player, "SpellMineralTap", 1);
    }
    else if (autoA55668AA_val == 3) {
        UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, "Clairvoyance", true);
        TechTreeUpgradeAddLevel(lp_player, "SpellClairvoyance", 1);
    }
    else if (autoA55668AA_val == 4) {
        UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, "FrostArmor", true);
        gv_playerData[lp_player].lv_hasMainSpell = true;
        TechTreeUpgradeAddLevel(lp_player, "SpellFrostArmor", 1);
    }
    else if (autoA55668AA_val == 5) {
        UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, "SiphonLife", true);
        gv_playerData[lp_player].lv_hasMainSpell = true;
        TechTreeUpgradeAddLevel(lp_player, "SpellSiphonLife", 1);
    }
    else if (autoA55668AA_val == 6) {
        UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, "Affliction", true);
        gv_playerData[lp_player].lv_hasMainSpell = true;
        TechTreeUpgradeAddLevel(lp_player, "SpellAffliction", 1);
    }
    else if (autoA55668AA_val == 7) {
        UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, "ShadowCloak", true);
        gv_playerData[lp_player].lv_hasMainSpell = true;
        TechTreeUpgradeAddLevel(lp_player, "SpellShadowCloak", 1);
    }
    else if (autoA55668AA_val == 8) {
        UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, "GuardianSpirit", true);
        gv_playerData[lp_player].lv_hasMainSpell = true;
        TechTreeUpgradeAddLevel(lp_player, "SpellGuardianSpirit", 1);
    }
    else {
    }
    gv_learnedSpellsString[lp_player] = StringReplace(gv_learnedSpellsString[lp_player], "1", lp_spellIndex, lp_spellIndex);
    gf_AllSpellsLearnedCheck(lp_player);
    UnitGroupLoopBegin(UnitGroup("Tavern", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_TavernSpawn(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateSpellValues
//--------------------------------------------------------------------------------------------------
void gf_UpdateSpellValues (fixed lp_spellPower, fixed lp_dmg, int lp_player) {
    // Variable Declarations
    fixed lv_a;
    fixed lv_baseSP;
    fixed lv_spellDamageModifier;
    fixed lv_shadowCloakModifier;
    fixed lv_spellDurationModifier;
    fixed lv_healingFactor;
    // Variable Initialization
    lv_a = lp_spellPower;
    lv_baseSP = 18.0;
    lv_spellDamageModifier = lp_dmg;
    lv_shadowCloakModifier = 1.0;
    lv_spellDurationModifier = 1.0;
    lv_healingFactor = 1.0;
    // Implementation
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ConjurersCharm") == true)) {
        lv_shadowCloakModifier = 0.5;
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "NaturesGraceStats", "AttributeBonus[Armored]", lp_player, FixedToString((lv_a * 2.0), 2));
    CatalogFieldValueSet(c_gameCatalogEffect, "NaturesGraceStats", "AttributeBonus[Biological]", lp_player, FixedToString((lv_a / 10.0), 2));
    CatalogFieldValueSet(c_gameCatalogEffect, "MineralTapStats", "Amount", lp_player, FixedToString((5.0 + ((lv_a - lv_baseSP) * 2.0)), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "ClairvoyancePersistent", "RevealRadius", lp_player, FixedToString((12.0 + ((lv_a - lv_baseSP) * 0.4)), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "FrostArmorDamage", "Amount", lp_player, FixedToString(((3.0 + ((lv_a - lv_baseSP) * 0.67)) * lv_spellDamageModifier), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "FrostArmorDamage", "AttributeBonus[Robotic]", lp_player, FixedToString((1.0 + ((lv_a - lv_baseSP) * 0.4)), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "SiphonLifeStats", "Amount", lp_player, FixedToString(((14.0 + ((lv_a - lv_baseSP) * 0.8)) * lv_spellDamageModifier), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "AfflictionDamage", "Amount", lp_player, FixedToString(((5.0 + ((lv_a - lv_baseSP) * 0.4)) * lv_spellDamageModifier), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowCloakDamage", "Amount", lp_player, FixedToString(((30.0 + ((lv_a - lv_baseSP) * 3.0))*lv_spellDamageModifier*lv_shadowCloakModifier), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "GuardianSpiritStats", "AttributeBonus[Biological]", lp_player, FixedToString(((100.0 + ((lv_a - lv_baseSP) * 6.0)) * lv_healingFactor), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "GuardianSpiritStats", "Amount", lp_player, FixedToString(((1.0 + ((lv_a - lv_baseSP) * 0.125)) * lv_healingFactor), 3));
    CatalogFieldValueSet(c_gameCatalogEffect, "VengefulMurlocSkullDamage", "Amount", lp_player, FixedToString((2.0 + ((lv_a - lv_baseSP) * 0.8)), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "CelestialOrbHealAmount", "Amount", lp_player, FixedToString(((5.0 + ((lv_a - lv_baseSP) * 1.0)) * lv_healingFactor), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsGoldenHauberkHeal", "Amount", lp_player, FixedToString((20.0 * lv_healingFactor), 1));
    if (((gv_raining || gv_winter) == true)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "StormwizardsRobesDamage", "Amount", lp_player, FixedToString(((lv_a * 0.75) * 1.5), 1));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogEffect, "StormwizardsRobesDamage", "Amount", lp_player, FixedToString(((lv_a * 0.75) * 1.0), 1));
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "LeatherCoat") == true)) {
        lv_spellDurationModifier += 0.2;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "HighlandGuppy") == true)) {
        lv_spellDurationModifier += 0.2;
    }
    else {
    }
    lv_spellDurationModifier = libNtve_gf_ArithmeticRealClamp(lv_spellDurationModifier, 0.1, 2.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "MineralTap", "Duration", lp_player, FixedToString((30.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "ClairvoyancePersistent", "ExpireDelay", lp_player, FixedToString((5.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "Clairvoyance", "Duration", lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "ClairvoyanceNecromancerBonus", "Duration", lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "FrostArmor", "Duration", lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "FrostArmorDrain", "Duration", lp_player, FixedToString((5.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "SiphonLife", "Duration", lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "Affliction", "Duration", lp_player, FixedToString((12.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "AfflictionArmorShred", "Duration", lp_player, FixedToString((12.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "GuardianSpirit", "Duration", lp_player, FixedToString((20.0 * lv_spellDurationModifier), 1));
    CatalogFieldValueSet(c_gameCatalogBehavior, "GuardianSpiritLingering", "Duration", lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "NecromancersNecklace") == true)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "AfflictionSearch", "MaxCount", lp_player, FixedToString(2.0, 0));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogEffect, "AfflictionSearch", "MaxCount", lp_player, FixedToString(1.0, 0));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateSpellCosts
//--------------------------------------------------------------------------------------------------
void gf_UpdateSpellCosts (int lp_player) {
    // Variable Declarations
    fixed lv_energyFlatModifier;
    fixed lv_energyPercentageModifier;
    fixed lv_lifeFlatModifier;
    fixed lv_lifePercentageModifier;
    fixed lv_warlockSpecialMod;
    fixed lv_x;
    // Variable Initialization
    lv_energyPercentageModifier = 1.0;
    lv_warlockSpecialMod = 1.0;
    // Implementation
    if ((StringSub(gv_perks[lp_player], 20, 20) == "1")) {
        lv_energyPercentageModifier -= 0.05;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "MysticsTribalShield") == true)) {
        lv_energyPercentageModifier -= 0.1;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WarlocksVestments") == true)) {
        lv_warlockSpecialMod -= 0.25;
        lv_lifePercentageModifier += 0.25;
    }
    else {
    }
    lv_x = ((50.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "NaturesGrace", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "NaturesGrace", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
    lv_x = ((50.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "MineralTap", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "MineralTap", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
    lv_x = ((60.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "Clairvoyance", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "Clairvoyance", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
    lv_x = ((60.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "FrostArmor", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "FrostArmor", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
    lv_x = ((70.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "SiphonLife", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "SiphonLife", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
    lv_x = ((80.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "Affliction", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "Affliction", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
    lv_x = ((60.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "ShadowCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "ShadowCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
    lv_x = ((90.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "GuardianSpirit", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "GuardianSpirit", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
    lv_x = ((200.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
    CatalogFieldValueSet(c_gameCatalogAbil, "MysteriousArcaneRitual", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "MysteriousArcaneRitual", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateStatsAll
//--------------------------------------------------------------------------------------------------
void gf_UpdateStatsAll (int lp_player) {
    // Variable Declarations
    fixed lv_attackDamage;
    fixed lv_attackSpeed;
    fixed lv_armorPenetration;
    fixed lv_attackRange;
    fixed lv_spellDamageModifier;
    fixed lv_damageAnimals;
    fixed lv_damageTrees;
    fixed lv_damageStructures;
    fixed lv_spikeTrapBonusDamage;
    fixed lv_bearWit;
    fixed lv_life;
    fixed lv_lifeFactor;
    fixed lv_lifeRegen;
    fixed lv_energyRegen;
    fixed lv_intelligence;
    fixed lv_willpower;
    fixed lv_storedValue;
    const int lv_damagePrecision = 1;
    // Variable Initialization
    lv_spellDamageModifier = 1.0;
    lv_lifeFactor = 1.0;
    lv_lifeRegen = 1.0;
    // Implementation
    if ((gv_playerData[lp_player].lv_alive == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/654EB078"), false);
        lv_attackDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        lv_damageAnimals = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Armored]", lp_player));
        lv_damageTrees = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Armored]", lp_player));
        lv_damageStructures = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Massive]", lp_player));
        if ((StringSub(gv_perks[lp_player], 7, 7) == "1")) {
            lv_attackDamage += 1.0;
        }
        else {
        }
        if ((StringSub(gv_perks[lp_player], 26, 26) == "1")) {
            lv_attackDamage += (IntToFixed(UnitLevel(gv_playerData[lp_player].lv_kobold)) * 0.2);
        }
        else {
        }
        lv_attackDamage *= (1.0 + (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Light]", lp_player)) * 0.01));
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "EmpoweredLightning") == true)) {
            lv_attackDamage *= 1.5;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ObedienceRod") == true)) {
            lv_attackDamage *= 0.5;
            lv_damageAnimals = 0.0;
            lv_damageStructures *= 0.5;
            lv_damageTrees *= 0.5;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "RepeatingCrossbow") == true)) {
            lv_attackDamage *= 0.5;
            lv_damageAnimals *= 0.5;
            lv_damageStructures *= 0.5;
            lv_damageTrees *= 0.5;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "BerserkersBattleAxe") == true)) {
            lv_damageStructures += 8.0;
            lv_damageTrees += 8.0;
        }
        else {
        }
        lv_attackDamage = Round(lv_attackDamage);
        lv_damageAnimals = Round(lv_damageAnimals);
        lv_damageStructures = Round(lv_damageStructures);
        lv_damageTrees = Round(lv_damageTrees);
        CatalogFieldValueSet(c_gameCatalogEffect, "MeleeDamage", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "MeleeDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "MeleeDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "MeleeDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "BlunderbussDamage", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "BlunderbussDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "BlunderbussDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "BlunderbussDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamage", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamageExplosive", "Amount", lp_player, FixedToString((lv_attackDamage * 1.3), lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamageExplosive", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamageExplosive", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamageExplosive", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "ElderWandDamage", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "ElderWandDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "ElderWandDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "ElderWandDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "VenomousArbalestDamage", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "VenomousArbalestDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "VenomousArbalestDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "VenomousArbalestDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "ViciousJavelinDamage", "Amount", lp_player, FixedToString((lv_attackDamage * 1.25), lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "ViciousJavelinDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "ViciousJavelinDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "ViciousJavelinDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CelestialOrbDamage", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CelestialOrbDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CelestialOrbDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "CelestialOrbDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamage", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamageNoProc", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamageNoProc", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamageNoProc", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamageNoProc", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageRight", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageRight", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageRight", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageRight", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageLeft", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageLeft", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageLeft", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageLeft", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBeamDamage", "Amount", lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBeamDamage", "AttributeBonus[Light]", lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBeamDamage", "AttributeBonus[Armored]", lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBeamDamage", "AttributeBonus[Structure]", lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
        if ((StringSub(gv_perks[lp_player], 39, 39) == "1")) {
            lv_spikeTrapBonusDamage = 1.1;
        }
        else {
            lv_spikeTrapBonusDamage = 1.0;
        }
        CatalogFieldValueSet(c_gameCatalogEffect, "SpikeTrapDamage", "Amount", lp_player, FixedToString(((lv_attackDamage * 1.5) * lv_spikeTrapBonusDamage), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "SpikeTrapDamage", "AttributeBonus[Light]", lp_player, FixedToString(((lv_attackDamage * 1.5) * lv_spikeTrapBonusDamage), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "VenomousArbalestPoisonDamage", "Amount", lp_player, FixedToString(((lv_attackDamage * 0.5) / 10.0), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "SharpIronPickaxeBleed", "Amount", lp_player, FixedToString(((lv_attackDamage * 0.5) / 6.0), 1));
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Artisanship25") == true)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "AutomatedDefenseTurretDamage", "Amount", lp_player, FixedToString(Round((35.0 + ((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player)) + StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player))) * 0.2))), lv_damagePrecision));
            CatalogFieldValueSet(c_gameCatalogEffect, "WatchTowerDamage", "Amount", lp_player, FixedToString(Round((35.0 + ((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player)) + StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player))) * 0.2))), lv_damagePrecision));
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ViciouslySharpArmblade") == true)) {
            lv_armorPenetration += 50.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "LiquidatorSpellblade") == true)) {
            lv_armorPenetration += 100.0;
        }
        else {
        }
        lv_armorPenetration = libNtve_gf_ArithmeticRealClamp(lv_armorPenetration, 0.0, 100.0);
        lv_armorPenetration *= 0.01;
        lv_armorPenetration = (1.0 - lv_armorPenetration);
        CatalogFieldValueSet(c_gameCatalogEffect, "MeleeDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "BlunderbussDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "CravensFishStickerDamageExplosive", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "ElderWandDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "VenomousArbalestDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "ViciousJavelinDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "CelestialOrbDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowDamageNoProc", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageRight", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "TwinThrowingAxesDamageLeft", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBeamDamage", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "MeleeDamageDummy", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "RangedDamageDummy", "ArmorReduction", lp_player, FixedToString(lv_armorPenetration, 2));
        lv_attackRange = gf_CalcAttackRange(lp_player);
        CatalogFieldValueSet(c_gameCatalogWeapon, "KoboldAttackMeleeBash", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "KoboldAttackMeleeSlash", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "Blunderbuss", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "Wand", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "CravensFishSticker", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "VenomousArbalest", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "CelestialOrb", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "RepeatingCrossbow", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "RepeatingCrossbowSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_player, FixedToString((lv_attackRange * 1.2), 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "TwinThrowingAxesRanged", "Range", lp_player, FixedToString(lv_attackRange, 1));
        CatalogFieldValueSet(c_gameCatalogWeapon, "FrostNeedle", "Range", lp_player, FixedToString(lv_attackRange, 1));
        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "BearShamanWillpowerStack", 40);
        lv_bearWit = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_bearWit - IntToFixed(gv_bearWilllpowerBonus[lp_player])), 0));
        gv_bearWilllpowerBonus[lp_player] = 0;
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "BearShamansShroud") == true)) {
            lv_bearWit = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
            gv_bearWilllpowerBonus[lp_player] = FixedToInt(libNtve_gf_ArithmeticRealClamp((lv_attackDamage * 0.1), 0.0, 40.0));
            CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_bearWit + IntToFixed(gv_bearWilllpowerBonus[lp_player])), 0));
            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "BearShamanWillpowerStack", gv_playerData[lp_player].lv_kobold, gv_bearWilllpowerBonus[lp_player]);
            CatalogFieldValueSet(c_gameCatalogEffect, "BearShamanWillpower", "Amount", lp_player, FixedToString(gv_bearWilllpowerBonus[lp_player], 0));
        }
        else {
        }
        lv_attackSpeed = gf_CalcAttackspeed(lp_player);
        CatalogFieldValueSet(c_gameCatalogWeapon, "KoboldAttackMeleeBash", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "KoboldAttackMeleeSlash", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "Blunderbuss", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "CravensFishSticker", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "Wand", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "VenomousArbalest", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "CelestialOrb", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "RepeatingCrossbow", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "TwinThrowingAxesRanged", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "FrostNeedle", "Period", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBeamCreatePersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", lp_player, FixedToString(lv_attackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBeamSilence", "Duration", lp_player, FixedToString((lv_attackSpeed + 0.0625), 4));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "Speed", lp_player, FixedToString(gf_CalcMovespeed(lp_player), 2));
        lv_storedValue = UnitGetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropLife, c_unitPropCurrent);
        lv_life = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        lv_life *= 10.0;
        lv_lifeFactor += (gv_skillForaging[lp_player] * 0.01);
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "GarishGladiatorsGarb") == true)) {
            lv_lifeFactor += 0.1;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WarlocksVestments") == true)) {
            lv_lifeFactor += 0.4;
        }
        else {
        }
        lv_life *= lv_lifeFactor;
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeMax", lp_player, FixedToString(lv_life, 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeStart", lp_player, FixedToString(lv_life, 2));
        UnitSetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropLife, lv_storedValue);
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ForestConnection") == true)) {
            lv_lifeRegen += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GrowingTreeModify", "VitalArray[" + IntToString(0) + "].Change", lp_player)) * IntToFixed(UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "ForestConnection")));
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "TrollFrenzy") == true)) {
            lv_lifeRegen += 1.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "CookingExpertiseII") == true)) {
            lv_lifeRegen += 1.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "GoodHost") == true)) {
            lv_lifeRegen += 1.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "InfirmaryRegen") == true)) {
            lv_lifeRegen += 2.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ChefsInspiration") == true)) {
            lv_lifeRegen += 3.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WatchTowerGarrisonCargoBuff") == true) && (gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerInfirmary == true)) {
            lv_lifeRegen += 10.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "GravesingersClawDebuff") == true)) {
            lv_lifeRegen *= gv_gravesingerHealFactor;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WarlocksVestments") == true)) {
            lv_lifeRegen *= 0.0;
        }
        else {
        }
        lv_lifeRegen *= gv_playerData[lp_player].lv_hungerRegenPenaltyFactor;
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeRegenRate", lp_player, FixedToString(lv_lifeRegen, 2));
        lv_storedValue = UnitGetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropEnergy, c_unitPropCurrent);
        lv_intelligence = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "EnergyMax", lp_player, FixedToString((lv_intelligence * 4.0), 2));
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ForestConnectionEnergy") == true)) {
            lv_energyRegen += (2.0 * IntToFixed(UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "ForestConnectionEnergy")));
        }
        else {
        }
        lv_energyRegen += (lv_intelligence / 20.0);
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ToxicFrog") == true)) {
            lv_energyRegen += 10.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "StormwizardsRobes") == true) && ((gv_raining == true) || (gv_winter == true))) {
            lv_energyRegen += 1.0;
        }
        else {
        }
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "EnergyDrain") == true)) {
            lv_energyRegen -= 1.0;
        }
        else {
        }
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "EnergyRegenRate", lp_player, FixedToString(lv_energyRegen, 2));
        UnitSetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropEnergy, lv_storedValue);
        lv_willpower = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "EmpoweredLightning") == true)) {
            lv_spellDamageModifier += 1.0;
        }
        else {
        }
        gf_UpdateSpellValues(lv_willpower, lv_spellDamageModifier, lp_player);
        gf_UpdatePetStats(lp_player);
        TriggerDebugOutput(1, StringExternal("Param/Value/EAB88F24"), false);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CalcAttackspeed
//--------------------------------------------------------------------------------------------------
fixed gf_CalcAttackspeed (int lp_player) {
    // Variable Declarations
    fixed lv_a;
    fixed lv_baseAttackSpeed;
    fixed lv_attacksPerSecond;
    fixed lv_percentBonus;
    fixed lv_value;
    // Variable Initialization
    lv_baseAttackSpeed = gf_BaseWeaponSpeed(lp_player);
    lv_attacksPerSecond = (1.0 / lv_baseAttackSpeed);
    lv_percentBonus = 1.0;
    // Implementation
    lv_percentBonus += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player)) * 0.02);
    if ((StringSub(gv_perks[lp_player], 9, 9) == "1")) {
        lv_percentBonus += 0.04;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "SetHeavyIron") == true)) {
        lv_percentBonus += 0.08;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "SlipperyEel") == true)) {
        lv_percentBonus += 0.08;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "HuntsmansJacket") == true) && (gf_RangedWeapon(gv_playerData[lp_player].lv_kobold) == false)) {
        lv_percentBonus += 0.1;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "TrollFrenzy") == true)) {
        lv_percentBonus += 0.15;
    }
    else {
    }
    if ((gv_skillForaging[lp_player] >= 20)) {
        lv_percentBonus += 0.15;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "BloodcleaverHaste") == true)) {
        lv_percentBonus += 0.15;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "GarishGladiatorsGarb") == true)) {
        lv_percentBonus += 0.1;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "BerserkersBattleAxe") == true)) {
        lv_percentBonus += 0.25;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WolfsbanePassive") == true)) {
        lv_percentBonus += 0.3;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "FrostbitePositive") == true)) {
        lv_percentBonus += 0.25;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "OutlandishHeartpiercer") == true)) {
        lv_percentBonus += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "OutlandishHeartpiercerBonus", "Amount", lp_player)) * 0.01);
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "MurlocRage") == true)) {
        lv_percentBonus += 0.4;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "EmpoweredLightning") == true)) {
        lv_percentBonus += 0.5;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WolfsbanePassiveStronger") == true)) {
        lv_percentBonus += 0.6;
        CatalogFieldValueSet(c_gameCatalogEffect, "WolfsbaneSpeed", "Amount", lp_player, IntToString(60));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogEffect, "WolfsbaneSpeed", "Amount", lp_player, IntToString(30));
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ThrowingFrenzy") == true)) {
        lv_percentBonus += (0.25 * UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "ThrowingFrenzy"));
    }
    else {
    }
    lv_attacksPerSecond *= lv_percentBonus;
    lv_value = (1.0 / lv_attacksPerSecond);
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CalcAttackRange
//--------------------------------------------------------------------------------------------------
fixed gf_CalcAttackRange (int lp_player) {
    // Variable Declarations
    fixed lv_baseAttackRange;
    fixed lv_flatBonus;
    fixed lv_percentBonus;
    bool lv_rangedWeapon;
    fixed lv_value;
    // Variable Initialization
    lv_percentBonus = 1.0;
    lv_rangedWeapon = gf_RangedWeapon(gv_playerData[lp_player].lv_kobold);
    // Implementation
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "FrostNeedle") == true)) {
        lv_baseAttackRange = 6.0;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "RoughBlunderbuss") == true)) {
        lv_baseAttackRange = 4.0;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ElderWand") == true)) {
        lv_baseAttackRange = 4.0;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "CravensFishSticker") == true)) {
        lv_baseAttackRange = 5.5;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "VenomousArbalest") == true)) {
        lv_baseAttackRange = 5.0;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "CelestialOrb") == true)) {
        lv_baseAttackRange = 3.5;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "RepeatingCrossbow") == true)) {
        lv_baseAttackRange = 4.5;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "TwinThrowingAxes") == true)) {
        lv_baseAttackRange = 4.0;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "GoldenPolearm") == true)) {
        lv_baseAttackRange = 1.25;
    }
    else if (true) {
        lv_baseAttackRange = 0.5;
    }
    if ((lv_rangedWeapon == true)) {
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "HuntsmansJacket") == true)) {
            lv_flatBonus += 1.0;
        }
        else {
        }
        if ((StringSub(gv_perks[lp_player], 38, 38) == "1")) {
            lv_flatBonus += 0.5;
        }
        else {
        }
    }
    else {
    }
    lv_value = ((lv_baseAttackRange + lv_flatBonus) * lv_percentBonus);
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CalcMovespeed
//--------------------------------------------------------------------------------------------------
fixed gf_CalcMovespeed (int lp_player) {
    // Variable Declarations
    fixed lv_baseMoveSpeed;
    fixed lv_flatBonus;
    fixed lv_percentBonus;
    fixed lv_value;
    // Variable Initialization
    lv_percentBonus = 1.0;
    // Implementation
    if ((UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "Running") == 1) && 
            UnitBehaviorEnabled(gv_playerData[lp_player].lv_kobold, "Running")) {
        lv_baseMoveSpeed = 2.5;
    }
    else {
        lv_baseMoveSpeed = 1.5;
    }
    lv_flatBonus += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player)) * 0.01);
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "EnergyReserves") == true)) {
        lv_percentBonus += 0.03;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "BerserkersBattleAxe") == true)) {
        lv_percentBonus += 0.05;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WellFedStag") == true)) {
        lv_percentBonus += 0.05;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "TrollFrenzy") == true)) {
        lv_percentBonus += 0.05;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "BloodcleaverHaste") == true)) {
        lv_percentBonus += 0.05;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Inspired") == true)) {
        lv_percentBonus += 0.05;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "MurlocRage") == true)) {
        lv_percentBonus += 0.1;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "FrostbitePositive") == true)) {
        lv_percentBonus += 0.1;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "AdrenalineRush") == true)) {
        lv_percentBonus += 0.1;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WolfsbanePassive") == true)) {
        lv_percentBonus += 0.2;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ShadowCloak") == true)) {
        lv_percentBonus += 0.2;
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ThrowingFrenzy") == true)) {
        lv_percentBonus += (0.04 * UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "ThrowingFrenzy"));
    }
    else {
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "WolfsbanePassiveStronger") == true)) {
        lv_percentBonus += 0.4;
        CatalogFieldValueSet(c_gameCatalogEffect, "WolfsbaneSpeed", "ArmorReduction", lp_player, IntToString(40));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogEffect, "WolfsbaneSpeed", "ArmorReduction", lp_player, IntToString(20));
    }
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "SpellbreakerHaste") == true)) {
        lv_percentBonus += 0.5;
    }
    else {
    }
    lv_value = ((lv_baseMoveSpeed + lv_flatBonus) * lv_percentBonus);
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BaseWeaponSpeed
//--------------------------------------------------------------------------------------------------
fixed gf_BaseWeaponSpeed (int lp_player) {
    // Variable Declarations
    const fixed lv_baseRanged = 1.85;
    const fixed lv_baseMelee = 1.5;
    fixed lv_value;
    // Variable Initialization
    lv_value = 5.0;
    // Implementation
    if ((gf_RangedWeapon(gv_playerData[lp_player].lv_kobold) == true)) {
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "RepeatingCrossbow") == true)) {
            lv_value = 2.6;
        }
        else {
            lv_value = lv_baseRanged;
        }
    }
    else if (true) {
        lv_value = lv_baseMelee;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RangedWeapon
//--------------------------------------------------------------------------------------------------
bool gf_RangedWeapon (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    bool lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if (((UnitHasBehavior(lp_unit, "RoughBlunderbuss") == true) || (UnitHasBehavior(lp_unit, "CravensFishSticker") == true) || (UnitHasBehavior(lp_unit, "VenomousArbalest") == true) || (UnitHasBehavior(lp_unit, "ElderWand") == true) || (UnitHasBehavior(lp_unit, "CelestialOrb") == true) || (UnitHasBehavior(lp_unit, "RepeatingCrossbow") == true) || (UnitHasBehavior(lp_unit, "TwinThrowingAxes") == true) || (UnitHasBehavior(lp_unit, "FrostNeedle") == true))) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RangedAttack
//--------------------------------------------------------------------------------------------------
bool gf_RangedAttack (string lp_effect) {
    // Variable Declarations
    bool lv_vale;
    // Variable Initialization
    // Implementation
    if (((lp_effect == "BlunderbussDamage") || (lp_effect == "ElderWandDamage") || (lp_effect == "VenomousArbalestDamage") || (lp_effect == "CravensFishStickerDamage") || (lp_effect == "CravensFishStickerDamageExplosive") || (lp_effect == "ViciousJavelinDamage") || (lp_effect == "CelestialOrbDamage") || (lp_effect == "RepeatingCrossbowDamage") || (lp_effect == "RepeatingCrossbowDamageNoProc") || (lp_effect == "TwinThrowingAxesDamageLeft") || (lp_effect == "TwinThrowingAxesDamageRight") || (lp_effect == "FrostBeamDamage"))) {
        lv_vale = true;
    }
    else {
    }
    return lv_vale;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NormalAttack
//--------------------------------------------------------------------------------------------------
bool gf_NormalAttack (string lp_effect) {
    // Variable Declarations
    bool lv_vale;
    // Variable Initialization
    // Implementation
    if (((lp_effect == "MeleeDamage") || (lp_effect == "BlunderbussDamage") || (lp_effect == "ElderWandDamage") || (lp_effect == "VenomousArbalestDamage") || (lp_effect == "CravensFishStickerDamage") || (lp_effect == "CravensFishStickerDamageExplosive") || (lp_effect == "ViciousJavelinDamage") || (lp_effect == "CelestialOrbDamage") || (lp_effect == "RepeatingCrossbowDamage") || (lp_effect == "RepeatingCrossbowDamageNoProc") || (lp_effect == "TwinThrowingAxesDamageLeft") || (lp_effect == "TwinThrowingAxesDamageRight") || (lp_effect == "FrostBeamDamage"))) {
        lv_vale = true;
    }
    else {
    }
    return lv_vale;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AttackCooldown
//--------------------------------------------------------------------------------------------------
fixed gf_AttackCooldown (unit lp_unit) {
    // Implementation
    return (UnitWeaponPeriodRemaining(lp_unit, 1) * 0.0625);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetTeamStart
//--------------------------------------------------------------------------------------------------
point gf_GetTeamStart (int lp_player) {
    // Variable Declarations
    point lv_point;
    // Variable Initialization
    lv_point = gv_center;
    // Implementation
    if ((gv_tutorial == true)) {
        lv_point = PointFromId(1);
    }
    else {
        lv_point = gv_teamStartLocation[gv_playerData[lp_player].lv_team];
    }
    return lv_point;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetPlayerName
//--------------------------------------------------------------------------------------------------
text gf_GetPlayerName (int lp_player, int lp_includeTitle) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    lv_value = StringExternal("Param/Value/9403C227");
    // Implementation
    if (((lp_player >= 0) && (lp_player <= 15))) {
        if ((PlayerType(lp_player) != c_playerTypeUser)) {
            if ((gv_playerData[lp_player].lv_isAI == true)) {
                lv_value = gv_aIData[lp_player].lv_name;
            }
            else {
                lv_value = StringExternal("Param/Value/C0CE5055");
            }
        }
        else {
            lv_value = PlayerName(lp_player);
            if ((lp_includeTitle == 0) && (gf_GetActiveTitleIndex(lp_player) != -1)) {
                lv_value = gf_TitleFormat(lp_player, gf_GetActiveTitleIndex(lp_player));
            }
            else {
            }
        }
    }
    else {
        lv_value = StringExternal("Param/Value/1AF732C5");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetTeamOfPlayer
//--------------------------------------------------------------------------------------------------
int gf_GetTeamOfPlayer (int lp_player) {
    int auto1E1F9EA1_ae;
    int auto1E1F9EA1_ai;
    // Variable Declarations
    int lv_a;
    int lv_value;
    // Variable Initialization
    // Implementation
    if (((lp_player >= 0) && (lp_player <= gv_players))) {
        if ((gv_aIFFATestingOverride == false)) {
            auto1E1F9EA1_ae = gv_activeTeams;
            auto1E1F9EA1_ai = 1;
            lv_a = 1;
            for ( ; ( (auto1E1F9EA1_ai >= 0 && lv_a <= auto1E1F9EA1_ae) || (auto1E1F9EA1_ai <= 0 && lv_a >= auto1E1F9EA1_ae) ) ; lv_a += auto1E1F9EA1_ai ) {
                if ((PlayerGroupHasPlayer(gv_teamData[lv_a].lv_members, lp_player) == true)) {
                    lv_value = lv_a;
                    lv_a = 100;
                }
                else {
                }
            }
        }
        else {
            lv_value = lp_player;
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetTribeTextOfPlayer
//--------------------------------------------------------------------------------------------------
text gf_GetTribeTextOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;
    text lv_value;
    // Variable Initialization
    lv_team = gv_playerData[lp_player].lv_team;
    // Implementation
    if (((lv_team >= 1) && (lv_team <= gv_activeTeams))) {
        lv_value = TextWithColor(gv_teamData[lv_team].lv_name, gv_teamData[lv_team].lv_color);
    }
    else {
        lv_value = StringExternal("Param/Value/372F2B83");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetTribeTextOfTeam
//--------------------------------------------------------------------------------------------------
text gf_GetTribeTextOfTeam (int lp_team) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    // Implementation
    if (((lp_team >= 1) && (lp_team <= gv_activeTeams))) {
        lv_value = TextWithColor(gv_teamData[lp_team].lv_name, gv_teamData[lp_team].lv_color);
    }
    else {
        lv_value = StringExternal("Param/Value/48E8C17F");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AveragePlayerLevel
//--------------------------------------------------------------------------------------------------
int gf_AveragePlayerLevel (playergroup lp_group) {
    // Variable Declarations
    int lv_a;
    int lv_value;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(lp_group);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            lv_value += gv_acclvl[PlayerGroupLoopCurrent()];
            lv_a += 1;
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    if ((lv_a != 0)) {
        lv_value /= lv_a;
    }
    else {
        lv_value = 20;
    }
    lv_value = libNtve_gf_ArithmeticIntClamp(lv_value, 1, 20);
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TemporaryBank
//--------------------------------------------------------------------------------------------------
void TemporaryBank_Init(){
    int i = 0;
    bank b;
    for(;i<15;i+=1){
        b = BankLoad("KoboldBroot", i);
        BankSave(b);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetRandom8String
//--------------------------------------------------------------------------------------------------
string gf_GetRandom8String () {
    int auto0D7BAD48_ae;
    int auto0D7BAD48_ai;
    // Variable Declarations
    int lv_a;
    string lv_value;
    // Variable Initialization
    lv_value = "00000000";
    // Implementation
    auto0D7BAD48_ae = 8;
    auto0D7BAD48_ai = 1;
    lv_a = 1;
    for ( ; ( (auto0D7BAD48_ai >= 0 && lv_a <= auto0D7BAD48_ae) || (auto0D7BAD48_ai <= 0 && lv_a >= auto0D7BAD48_ae) ) ; lv_a += auto0D7BAD48_ai ) {
        lv_value = StringReplace(lv_value, IntToString(RandomInt(1, 9)), lv_a, lv_a);
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Random12String
//--------------------------------------------------------------------------------------------------
string gf_GetRandom12String () {
    int auto9343602C_ae;
    int auto9343602C_ai;
    // Variable Declarations
    int lv_a;
    string lv_value;
    // Variable Initialization
    lv_value = "000000000000";
    // Implementation
    auto9343602C_ae = 12;
    auto9343602C_ai = 1;
    lv_a = 1;
    for ( ; ( (auto9343602C_ai >= 0 && lv_a <= auto9343602C_ae) || (auto9343602C_ai <= 0 && lv_a >= auto9343602C_ae) ) ; lv_a += auto9343602C_ai ) {
        lv_value = StringReplace(lv_value, IntToString(RandomInt(1, 9)), lv_a, lv_a);
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BankSaveEncryptedString
//--------------------------------------------------------------------------------------------------
void gf_BankSaveEncryptedString (string lp_key, string lp_section, string lp_value, int lp_player) {
    // Variable Declarations
    int lv_mod;
    string lv_value;
    // Variable Initialization
    lv_mod = RandomInt(2, 9);
    lv_value = "";
    // Implementation
    lv_value = (StringSub(lp_value, 1, 28) + IntToString(lv_mod) + IntToString(gf_CalculateEncryptMod(lp_value, lv_mod)) + gf_GetRandom12String());
    BankValueSetFromString(BankLastCreated(), lp_section, lp_key, lv_value);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BankLoadEncryptedString
//--------------------------------------------------------------------------------------------------
string gf_BankLoadEncryptedString (string lp_key, string lp_section, int lp_player) {
    // Variable Declarations
    string lv_value;
    bool lv_fail;
    // Variable Initialization
    lv_value = "";
    lv_fail = true;
    // Implementation
    if ((BankKeyExists(BankLastCreated(), lp_section, lp_key) == true)) {
        lv_value = BankValueGetAsString(BankLastCreated(), lp_section, lp_key);
        if (gf_StringEncryptionCheck(lv_value) && (gv_reprimanded[lp_player] == false)) {
            lv_fail = false;
        }
        else {
        }
    }
    else {
    }
    if ((lv_fail == true)) {
        lv_value = ("1471471471471471471471471471" + "5" + "4" + gf_GetRandom12String());
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StringEncryptionCheck
//--------------------------------------------------------------------------------------------------
bool gf_StringEncryptionCheck (string lp_string) {
    int autoDEF967ED_ae;
    int autoDEF967ED_ai;
    // Variable Declarations
    int lv_a;
    int lv_sum;
    const int lv_modIndex = 29;
    const int lv_restIndex = 30;
    int lv_mod;
    int lv_rest;
    bool lv_value;
    // Variable Initialization
    lv_mod = StringToInt(StringSub(lp_string, lv_modIndex, lv_modIndex));
    // Implementation
    autoDEF967ED_ae = 28;
    autoDEF967ED_ai = 1;
    lv_a = 1;
    for ( ; ( (autoDEF967ED_ai >= 0 && lv_a <= autoDEF967ED_ae) || (autoDEF967ED_ai <= 0 && lv_a >= autoDEF967ED_ae) ) ; lv_a += autoDEF967ED_ai ) {
        lv_sum += StringToInt(StringSub(lp_string, lv_a, lv_a));
    }
    lv_rest = ModI(lv_sum, lv_mod);
    if ((lv_rest == StringToInt(StringSub(lp_string, lv_restIndex, lv_restIndex)))) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CalculateEncryptMod
//--------------------------------------------------------------------------------------------------
int gf_CalculateEncryptMod (string lp_string, int lp_modulo) {
    int autoB780BD16_ae;
    int autoB780BD16_ai;
    // Variable Declarations
    int lv_a;
    int lv_sum;
    int lv_value;
    // Variable Initialization
    // Implementation
    autoB780BD16_ae = 28;
    autoB780BD16_ai = 1;
    lv_a = 1;
    for ( ; ( (autoB780BD16_ai >= 0 && lv_a <= autoB780BD16_ae) || (autoB780BD16_ai <= 0 && lv_a >= autoB780BD16_ae) ) ; lv_a += autoB780BD16_ai ) {
        lv_sum += StringToInt(StringSub(lp_string, lv_a, lv_a));
    }
    lv_value = ModI(lv_sum, lp_modulo);
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ScrambleString
//--------------------------------------------------------------------------------------------------
string gf_ScrambleString (string lp_string) {
    int auto18FA361A_ae;
    int auto18FA361A_ai;
    // Variable Declarations
    int lv_a;
    int lv_r;
    string lv_original;
    string lv_value;
    string lv_store;
    // Variable Initialization
    lv_original = lp_string;
    lv_value = "";
    lv_store = "";
    // Implementation
    auto18FA361A_ae = StringLength(lp_string);
    auto18FA361A_ai = 1;
    lv_a = 1;
    for ( ; ( (auto18FA361A_ai >= 0 && lv_a <= auto18FA361A_ae) || (auto18FA361A_ai <= 0 && lv_a >= auto18FA361A_ae) ) ; lv_a += auto18FA361A_ai ) {
        lv_r = RandomInt(1, StringLength(lv_original));
        lv_value = (lv_value + StringSub(lv_original, lv_r, lv_r));
        lv_original = StringReplace(lv_original, "", lv_r, lv_r);
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BankChecksOut
//--------------------------------------------------------------------------------------------------
bool gf_BankChecksOut (string lp_entry, string lp_section, int lp_index) {
    // Variable Declarations
    string lv_daString;
    int lv_key;
    int lv_keyValue;
    int lv_flood;
    int lv_pL;
    int lv_supposedLength;
    bool lv_value;
    // Variable Initialization
    lv_daString = "";
    // Implementation
    if ((BankKeyExists(BankLastCreated(), lp_section, lp_entry) == true) && (BankKeyExists(BankLastCreated(), "stats", "7HuRb8gn") == true) && (BankKeyExists(BankLastCreated(), "stats", "Jyr8GxL") == true)) {
        lv_daString = BankValueGetAsString(BankLastCreated(), lp_section, lp_entry);
        lv_key = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), "stats", "7HuRb8gn"), ((gv_trollz + 1) - lp_index), ((gv_trollz + 1) - lp_index)));
        lv_keyValue = StringToInt(StringSub(lv_daString, lv_key, lv_key));
        lv_flood = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), "stats", "Jyr8GxL"), lp_index, lp_index));
        lv_pL = StringLength(IntToString(gf_DecryptInt(lv_daString, lv_key, lv_flood)));
        lv_supposedLength = (lv_key + ((lv_flood * 3) + (lv_pL * lv_keyValue)));
        if ((StringLength(lv_daString) == lv_supposedLength)) {
            lv_value = true;
        }
        else {
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DecryptInt
//--------------------------------------------------------------------------------------------------
int gf_DecryptInt (string lp_string, int lp_key, int lp_flood) {
    int autoA70D1B0F_ae;
    int autoA70D1B0F_ai;
    int auto0957306E_val;
    // Variable Declarations
    int lv_a;
    string lv_value;
    int lv_keyvalue;
    int lv_floodz;
    int lv_b;
    int lv_floodlength;
    int lv_valuespace;
    // Variable Initialization
    lv_value = "";
    lv_floodlength = (3 * lp_flood);
    lv_valuespace = (StringLength(lp_string) - lv_floodlength);
    // Implementation
    lv_valuespace -= (lp_key + 1);
    autoA70D1B0F_ae = StringLength(lp_string);
    autoA70D1B0F_ai = 1;
    lv_a = 1;
    for ( ; ( (autoA70D1B0F_ai >= 0 && lv_a <= autoA70D1B0F_ae) || (autoA70D1B0F_ai <= 0 && lv_a >= autoA70D1B0F_ae) ) ; lv_a += autoA70D1B0F_ai ) {
        auto0957306E_val = lv_a;
        if (auto0957306E_val == lp_key) {
            lv_keyvalue = StringToInt(StringSub(lp_string, lv_a, lv_a));
            lv_valuespace /= lv_keyvalue;
        }
        else if (auto0957306E_val == (lp_key + 1)) {
            lv_floodz = StringToInt(StringSub(lp_string, lv_a, lv_a));
        }
        else if (auto0957306E_val == ((lp_key + 2) + (lv_b * lv_keyvalue))) {
            lv_b = libNtve_gf_ArithmeticIntClamp((lv_b + 1), 1, lv_valuespace);
            lv_value = (lv_value + StringSub(lp_string, lv_a, lv_a));
        }
        else {
        }
    }
    return StringToInt(lv_value);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EncryptInt
//--------------------------------------------------------------------------------------------------
string gf_EncryptInt (int lp_integer, int lp_key, int lp_flood) {
    int autoB882E13B_val;
    // Variable Declarations
    string lv_integerString;
    int lv_a;
    string lv_value;
    int lv_keyvalue;
    int lv_b;
    // Variable Initialization
    lv_integerString = IntToString(lp_integer);
    lv_value = "";
    lv_keyvalue = RandomInt(2, 7);
    // Implementation
    while ((StringLength(lv_value) < ((lp_flood * 3) + (lp_key + (StringLength(lv_integerString) * lv_keyvalue))))) {
        lv_a += 1;
        autoB882E13B_val = lv_a;
        if (autoB882E13B_val == lp_key) {
            lv_value = (lv_value + IntToString(lv_keyvalue));
        }
        else if (autoB882E13B_val == (lp_key + 1)) {
            lv_value = (lv_value + IntToString(lp_flood));
        }
        else if (autoB882E13B_val == ((lp_key + 2) + (lv_b * lv_keyvalue))) {
            lv_b = libNtve_gf_ArithmeticIntClamp((lv_b + 1), 1, StringLength(lv_integerString));
            lv_value = (lv_value + StringSub(lv_integerString, lv_b, lv_b));
        }
        else {
            lv_value = (lv_value + IntToString(RandomInt(0, 9)));
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadAccountLevelUnverified
//--------------------------------------------------------------------------------------------------
int gf_LoadAccountLevel (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_reprimanded[lp_player] == false) && gf_BankChecksOut("ni6u1rK", "stats", 3)) {
        lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "ni6u1rK"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "7HuRb8gn"), (gv_trollz - 2), (gv_trollz - 2))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "Jyr8GxL"), 3, 3)));
    }
    else {
        lv_value = 1;
    }
    if ((lv_value > 20)) {
        lv_value = 20;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadAccountXPUnverified
//--------------------------------------------------------------------------------------------------
int gf_LoadAccountXP (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_reprimanded[lp_player] == false) && gf_BankChecksOut("xpJar65", "stats", 6)) {
        lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "xpJar65"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "7HuRb8gn"), (gv_trollz - 5), (gv_trollz - 5))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "Jyr8GxL"), 6, 6)));
    }
    else {
        lv_value = 0;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadAccountWinsUnverified
//--------------------------------------------------------------------------------------------------
int gf_LoadAccountWins (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_reprimanded[lp_player] == false) && gf_BankChecksOut("Y7rGzk0", "stats", 1)) {
        lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "Y7rGzk0"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "7HuRb8gn"), (gv_trollz - 0), (gv_trollz - 0))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "Jyr8GxL"), 1, 1)));
    }
    else {
        lv_value = 0;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadAccountLossesUnverified
//--------------------------------------------------------------------------------------------------
int gf_LoadAccountLosses (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_reprimanded[lp_player] == false) && gf_BankChecksOut("hhgh3hha", "stats", 2)) {
        lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "hhgh3hha"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "7HuRb8gn"), (gv_trollz - 1), (gv_trollz - 1))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "Jyr8GxL"), 2, 2)));
    }
    else {
        lv_value = 0;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadKoboldKillsUnverified
//--------------------------------------------------------------------------------------------------
int gf_LoadKoboldKills (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_reprimanded[lp_player] == false) && gf_BankChecksOut("bJr0nQ2", "stats", 4)) {
        lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "bJr0nQ2"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "7HuRb8gn"), (gv_trollz - 3), (gv_trollz - 3))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "Jyr8GxL"), 4, 4)));
    }
    else {
        lv_value = 0;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadKoboldDeathsUnverified
//--------------------------------------------------------------------------------------------------
int gf_LoadKoboldDeaths (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_reprimanded[lp_player] == false) && gf_BankChecksOut("norl0sP", "stats", 5)) {
        lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "norl0sP"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "7HuRb8gn"), (gv_trollz - 4), (gv_trollz - 4))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "Jyr8GxL"), 5, 5)));
    }
    else {
        lv_value = 0;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadRewardsUnverified
//--------------------------------------------------------------------------------------------------
void gf_LoadRewards (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_temp;
    // Variable Initialization
    // Implementation
    if (true) {
        if ((gf_ValidReward("Yb4aLtz", "stats", 1) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "Yb4aLtz"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 0), (gv_trolzl12 - 0))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 1, 1)));
        }
        else {
            lv_temp = 4714477;
        }
        gf_SetRewardState(lp_player, lv_temp, 1, 1);
        if ((gf_ValidReward("J1klbk", "stats", 2) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "J1klbk"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 1), (gv_trolzl12 - 1))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 2, 2)));
        }
        else {
            lv_temp = 4714477;
        }
        gf_SetRewardState(lp_player, lv_temp, 1, 8);
        if ((gf_ValidReward("grtzk61", "stats", 3) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "grtzk61"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 2), (gv_trolzl12 - 2))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 3, 3)));
        }
        else {
            lv_temp = 4714477;
        }
        gf_SetRewardState(lp_player, lv_temp, 1, 15);
        if ((gf_ValidReward("HaL14rk", "stats", 4) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "HaL14rk"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 3), (gv_trolzl12 - 3))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 4, 4)));
        }
        else {
            lv_temp = 4714477;
        }
        gf_SetRewardState(lp_player, lv_temp, 1, 22);
        if ((gf_ValidReward("NepRk9a", "stats", 5) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "NepRk9a"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 4), (gv_trolzl12 - 4))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 5, 5)));
        }
        else {
            lv_temp = 1174417;
        }
        gf_SetRewardState(lp_player, lv_temp, 2, 1);
        if ((gf_ValidReward("Frvz7vl", "stats", 6) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "Frvz7vl"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 5), (gv_trolzl12 - 5))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 6, 6)));
        }
        else {
            lv_temp = 1174417;
        }
        gf_SetRewardState(lp_player, lv_temp, 2, 8);
        if ((gf_ValidReward("oO0brtg", "stats", 7) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "oO0brtg"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 6), (gv_trolzl12 - 6))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 7, 7)));
        }
        else {
            lv_temp = 1174417;
        }
        gf_SetRewardState(lp_player, lv_temp, 2, 15);
        if ((gf_ValidReward("yrNyz31", "stats", 8) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "yrNyz31"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 7), (gv_trolzl12 - 7))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 8, 8)));
        }
        else {
            lv_temp = 1174417;
        }
        gf_SetRewardState(lp_player, lv_temp, 2, 22);
        if ((gf_ValidReward("zT5S5mn", "stats", 9) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "zT5S5mn"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 8), (gv_trolzl12 - 8))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 9, 9)));
        }
        else {
            lv_temp = 1471471;
        }
        gf_SetRewardState(lp_player, lv_temp, 3, 1);
        if ((gf_ValidReward("kTrK7xb", "stats", 10) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "kTrK7xb"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 9), (gv_trolzl12 - 9))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 10, 10)));
        }
        else {
            lv_temp = 1471471;
        }
        gf_SetRewardState(lp_player, lv_temp, 3, 8);
        if ((gf_ValidReward("nypR6ex", "stats", 11) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "nypR6ex"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 10), (gv_trolzl12 - 10))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 11, 11)));
        }
        else {
            lv_temp = 1471471;
        }
        gf_SetRewardState(lp_player, lv_temp, 3, 15);
        if ((gf_ValidReward("kxNn88a", "stats", 12) == true) && (gv_reprimanded[lp_player] == false)) {
            lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "kxNn88a"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "IbRt8q8"), (gv_trolzl12 - 11), (gv_trolzl12 - 11))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "LoBfl21"), 12, 12)));
        }
        else {
            lv_temp = 1471471;
        }
        gf_SetRewardState(lp_player, lv_temp, 3, 22);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadDamageTextUnverified
//--------------------------------------------------------------------------------------------------
void gf_LoadDamageText (int lp_player, bank lp_bank) {
    // Implementation
    if ((BankKeyExists(lp_bank, "Settings", "DamageTextEnabled") == true)) {
        gv_dTDamageDoneOn[lp_player] = BankValueGetAsFlag(lp_bank, "Settings", "DamageTextEnabled");
    }
    else {
        gv_dTDamageDoneOn[lp_player] = true;
    }
    if ((BankKeyExists(lp_bank, "Settings", "DamageText2Enabled") == true)) {
        gv_dTDamageTakenOn[lp_player] = BankValueGetAsFlag(lp_bank, "Settings", "DamageText2Enabled");
    }
    else {
        gv_dTDamageTakenOn[lp_player] = true;
    }
    if ((BankKeyExists(lp_bank, "Settings", "DamageTextScale") == true)) {
        gv_dTScaleValue[lp_player] = BankValueGetAsFixed(lp_bank, "Settings", "DamageTextScale");
    }
    else {
        gv_dTScaleValue[lp_player] = 1.0;
    }
    if ((BankKeyExists(lp_bank, "Settings", "DamageTextDuration") == true)) {
        gv_dTDurationValue[lp_player] = BankValueGetAsFixed(lp_bank, "Settings", "DamageTextDuration");
    }
    else {
        gv_dTDurationValue[lp_player] = 1.0;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadRatingValueUnverified
//--------------------------------------------------------------------------------------------------
int gf_LoadRatingValue (int lp_player, bank lp_bank) {
    // Variable Declarations
    const int lv_o = 1;
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_reprimanded[lp_player] == false) && gf_RatingKeyValid("hJu5gRo", "stats", lv_o)) {
        lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "hJu5gRo"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "kjU9zLa"), (gv_trolzl12 - (lv_o - 1)), (gv_trolzl12 - (lv_o - 1)))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "Makkara"), lv_o, lv_o)));
    }
    else {
        lv_value = 1200;
        if ((gv_accwins[lp_player] > 25) && (gv_accwins[lp_player] > gv_acclosses[lp_player])) {
            lv_value += libNtve_gf_ArithmeticIntClamp((gv_accwins[lp_player] - gv_acclosses[lp_player]), 0, 300);
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadRatingGamesUnverified
//--------------------------------------------------------------------------------------------------
int gf_LoadRatingGames (int lp_player, bank lp_bank) {
    // Variable Declarations
    const int lv_o = 2;
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_reprimanded[lp_player] == false) && gf_RatingKeyValid("Ka0fazH", "stats", lv_o)) {
        lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, "stats", "Ka0fazH"), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "kjU9zLa"), (gv_trolzl12 - (lv_o - 1)), (gv_trolzl12 - (lv_o - 1)))), StringToInt(StringSub(BankValueGetAsString(lp_bank, "stats", "Makkara"), lv_o, lv_o)));
    }
    else {
        lv_value = 0;
    }
    if ((GameAttributeGameValue("[bnet:local/0.0/222562]2") == "0001")) {
        lv_value += 1;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdatePerkWindow
//--------------------------------------------------------------------------------------------------
void gf_UpdatePerkWindow (int lp_player) {
    int autoC2CC8983_ae;
    int autoC2CC8983_ai;
    int auto38A0DA97_ae;
    int auto38A0DA97_ai;
    int auto4BE60796_ae;
    int auto4BE60796_ai;
    int auto270AD014_ae;
    int auto270AD014_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_tounlock;
    text lv_pointplural;
    text lv_point;
    text lv_points;
    int lv_strIndex;
    // Variable Initialization
    lv_point = StringExternal("Param/Value/F15D2DC4");
    lv_points = StringExternal("Param/Value/2D7AAA47");
    // Implementation
    autoC2CC8983_ae = 4;
    autoC2CC8983_ai = 1;
    lv_a = 1;
    for ( ; ( (autoC2CC8983_ai >= 0 && lv_a <= autoC2CC8983_ae) || (autoC2CC8983_ai <= 0 && lv_a >= autoC2CC8983_ae) ) ; lv_a += autoC2CC8983_ai ) {
        if (((gv_perkPointsSpent[lp_player] < ((lv_a - 1) * 5)) || ((lv_a > 1) && (gf_GetPointsSpentInTier(EventPlayer(), lv_a) > 0) && (gf_GetPointsSpentInTiersBelow(EventPlayer(), lv_a) < ((lv_a - 1) * 5))))) {
            auto38A0DA97_ae = 10;
            auto38A0DA97_ai = 1;
            lv_b = 1;
            for ( ; ( (auto38A0DA97_ai >= 0 && lv_b <= auto38A0DA97_ae) || (auto38A0DA97_ai <= 0 && lv_b >= auto38A0DA97_ae) ) ; lv_b += auto38A0DA97_ai ) {
                lv_strIndex = (lv_b + ((lv_a - 1) * 10));
                if ((StringSub(gv_perks[lp_player], lv_strIndex, lv_strIndex) == "1")) {
                    gv_perkPointsSpent[lp_player] -= 1;
                    gv_accpp[lp_player] += 1;
                    gv_perks[lp_player] = StringReplace(gv_perks[lp_player], "0", lv_strIndex, lv_strIndex);
                }
                else {
                }
            }
            lv_tounlock = (((lv_a - 1) * 5) - gf_GetPointsSpentInTiersBelow(lp_player, lv_a));
            if ((lv_tounlock != 1)) {
                lv_pointplural = lv_points;
            }
            else {
                lv_pointplural = lv_point;
            }
            libNtve_gf_SetDialogItemText(gv_perkTierLabel[lv_a], (StringExternal("Param/Value/7AB49BD0") + (IntToText(lv_a) + StringExternal("Param/Value/C564962A"))), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_perkTierLabel[lv_a], (StringExternal("Param/Value/52D5D4C0") + (IntToText(lv_tounlock) + (StringExternal("Param/Value/E8716B26") + (lv_pointplural + StringExternal("Param/Value/5E15A75D"))))), PlayerGroupSingle(lp_player));
            auto270AD014_ae = 10;
            auto270AD014_ai = 1;
            lv_b = 1;
            for ( ; ( (auto270AD014_ai >= 0 && lv_b <= auto270AD014_ae) || (auto270AD014_ai <= 0 && lv_b >= auto270AD014_ae) ) ; lv_b += auto270AD014_ai ) {
                libNtve_gf_SetDialogItemImage(gv_perkImage[lv_a][lv_b], "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemTooltip(gv_perkImage[lv_a][lv_b], (StringExternal("Param/Value/4FA82B16") + (IntToText(lv_tounlock) + (StringExternal("Param/Value/D7DFDB40") + (lv_pointplural + StringExternal("Param/Value/78FCB22E"))))), PlayerGroupSingle(lp_player));
                DialogControlSetVisible(gv_perkMarker[lv_a][lv_b], PlayerGroupSingle(lp_player), false);
                BankLoad("nostrobskalufs", lp_player);
                BankValueSetFromString(BankLastCreated(), "stats", "perks", gv_perks[lp_player]);
                BankSave(BankLastCreated());
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_perkTierLabel[lv_a], (StringExternal("Param/Value/CAF13BB8") + (IntToText(lv_a) + StringExternal("Param/Value/EF0683F1"))), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_perkTierLabel[lv_a], StringExternal("Param/Value/C3098B25"), PlayerGroupSingle(lp_player));
            auto4BE60796_ae = 10;
            auto4BE60796_ai = 1;
            lv_b = 1;
            for ( ; ( (auto4BE60796_ai >= 0 && lv_b <= auto4BE60796_ae) || (auto4BE60796_ai <= 0 && lv_b >= auto4BE60796_ae) ) ; lv_b += auto4BE60796_ai ) {
                libNtve_gf_SetDialogItemImage(gv_perkImage[lv_a][lv_b], gv_perkImageFile[lv_a][lv_b], PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemTooltip(gv_perkImage[lv_a][lv_b], StringExternal("Param/Value/2805A7B5"), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemTooltip(gv_perkButton[lv_a][lv_b], gv_perkTooltip[lv_a][lv_b], PlayerGroupSingle(lp_player));
                lv_strIndex = (lv_b + ((lv_a - 1) * 10));
                if ((StringSub(gv_perks[lp_player], lv_strIndex, lv_strIndex) == "1")) {
                    DialogControlSetVisible(gv_perkMarker[lv_a][lv_b], PlayerGroupSingle(lp_player), true);
                }
                else {
                    DialogControlSetVisible(gv_perkMarker[lv_a][lv_b], PlayerGroupSingle(lp_player), false);
                }
            }
        }
    }
    gv_accpp[lp_player] = (gv_acclvl[lp_player] - gv_perkPointsSpent[lp_player]);
    libNtve_gf_SetDialogItemText(gv_perkTitle, (StringExternal("Param/Value/3052C849") + (IntToText(gv_accpp[lp_player]) + StringExternal("Param/Value/2B6572C2"))), PlayerGroupSingle(lp_player));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetPointsSpentInTiersBelow
//--------------------------------------------------------------------------------------------------
int gf_GetPointsSpentInTiersBelow (int lp_player, int lp_tier) {
    int autoB1A7BBC8_ae;
    int autoB1A7BBC8_ai;
    int auto5821D6F3_ae;
    int auto5821D6F3_ai;
    // Variable Declarations
    int lv_f;
    int lv_a;
    int lv_base;
    int lv_b;
    int lv_value;
    // Variable Initialization
    // Implementation
    autoB1A7BBC8_ae = (lp_tier - 1);
    autoB1A7BBC8_ai = 1;
    lv_f = 1;
    for ( ; ( (autoB1A7BBC8_ai >= 0 && lv_f <= autoB1A7BBC8_ae) || (autoB1A7BBC8_ai <= 0 && lv_f >= autoB1A7BBC8_ae) ) ; lv_f += autoB1A7BBC8_ai ) {
        lv_base = ((lv_f - 1) * 10);
        auto5821D6F3_ae = 10;
        auto5821D6F3_ai = 1;
        lv_a = 1;
        for ( ; ( (auto5821D6F3_ai >= 0 && lv_a <= auto5821D6F3_ae) || (auto5821D6F3_ai <= 0 && lv_a >= auto5821D6F3_ae) ) ; lv_a += auto5821D6F3_ai ) {
            lv_b = (lv_base + lv_a);
            if ((StringSub(gv_perks[lp_player], lv_b, lv_b) == "1")) {
                lv_value += 1;
            }
            else {
            }
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetPointsSpentInTier
//--------------------------------------------------------------------------------------------------
int gf_GetPointsSpentInTier (int lp_player, int lp_tier) {
    int autoA6C7F1FA_ae;
    int autoA6C7F1FA_ai;
    // Variable Declarations
    int lv_a;
    int lv_base;
    int lv_b;
    int lv_value;
    // Variable Initialization
    lv_base = ((lp_tier - 1) * 10);
    // Implementation
    autoA6C7F1FA_ae = 10;
    autoA6C7F1FA_ai = 1;
    lv_a = 1;
    for ( ; ( (autoA6C7F1FA_ai >= 0 && lv_a <= autoA6C7F1FA_ae) || (autoA6C7F1FA_ai <= 0 && lv_a >= autoA6C7F1FA_ae) ) ; lv_a += autoA6C7F1FA_ai ) {
        lv_b = (lv_base + lv_a);
        if ((StringSub(gv_perks[lp_player], lv_b, lv_b) == "1")) {
            lv_value += 1;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Banker
//--------------------------------------------------------------------------------------------------
void gf_Banker (int lp_player) {
    // Variable Declarations
    int lv_amount;
    // Variable Initialization
    lv_amount = FixedToInt(Round((IntToFixed(PlayerGetPropertyInt(lp_player, c_playerPropMinerals)) * 0.05)));
    // Implementation
    lv_amount += 5;
    if ((StringSub(gv_perks[lp_player], 25, 25) == "1") && (lv_amount > 0) && (gv_playerData[lp_player].lv_alive == true)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lv_amount);
        TextExpressionSetToken("Param/Expression/2C10AE7C", "A", StringExternal("Param/Value/2DAFDF79"));
        TextExpressionSetToken("Param/Expression/2C10AE7C", "B", IntToText(lv_amount));
        TextExpressionSetToken("Param/Expression/2C10AE7C", "C", StringExternal("Param/Value/BDADF1C5"));
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2C10AE7C"));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EndgameRequirementsCheck
//--------------------------------------------------------------------------------------------------
void gf_EndgameRequirementsCheck (int lp_player) {
    // Implementation
    if ((gv_wizardVisitEveryNight[lp_player] == true) && ((gv_dayNight == 2) || (gv_day >= 2))) {
        gf_UnlockRequirement(lp_player, 1, 10);
    }
    else {
    }
    if ((gv_accwins[lp_player] >= 50)) {
        gf_UnlockRequirement(lp_player, 1, 12);
    }
    else {
    }
    if ((gv_accwins[lp_player] >= 100)) {
        gf_UnlockRequirement(lp_player, 1, 13);
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_team == gv_winningTeam) && (gv_vanquisherEnabled[lp_player] == true) && (GameGetMissionTime() >= 60.0)) {
        gf_UnlockRequirement(lp_player, 1, 16);
    }
    else {
    }
    if ((gv_accwins[lp_player] >= 250)) {
        gf_UnlockRequirement(lp_player, 1, 18);
    }
    else {
    }
    if ((gv_playerData[lp_player].lv_team == gv_winningTeam) && (gv_aristocrat[lp_player] == true) && (GameGetMissionTime() >= 60.0)) {
        gf_UnlockRequirement(lp_player, 2, 5);
    }
    else {
    }
    if ((gv_championGame == true) && (gv_playerData[lp_player].lv_team == gv_winningTeam)) {
        gf_UnlockRequirement(lp_player, 1, 19);
    }
    else {
    }
    if ((gv_accwins[lp_player] >= 1000)) {
        gf_UnlockRequirement(lp_player, 1, 26);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupPostgameFeats
//--------------------------------------------------------------------------------------------------
void gf_SetupPostgameFeats () {
    // Variable Declarations
    int lv_player;
    // Variable Initialization
    // Implementation
    lv_player = gf_GossipMostWolfKills();
    TextExpressionSetToken("Param/Expression/4F004F1D", "A", StringExternal("Param/Value/D28B6B83"));
    TextExpressionSetToken("Param/Expression/4F004F1D", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[1] = TextExpressionAssemble("Param/Expression/4F004F1D");
    gv_postgameFeatTooltip[1] = StringExternal("Param/Value/F4B4D49D");
    lv_player = gf_FeatTreesPlanted();
    TextExpressionSetToken("Param/Expression/2948CBED", "A", StringExternal("Param/Value/5E32FA9D"));
    TextExpressionSetToken("Param/Expression/2948CBED", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[2] = TextExpressionAssemble("Param/Expression/2948CBED");
    gv_postgameFeatTooltip[2] = StringExternal("Param/Value/219EFE7B");
    lv_player = gf_GossipMostSheepsBred(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/FB3842DA", "A", StringExternal("Param/Value/ED22B3FC"));
    TextExpressionSetToken("Param/Expression/FB3842DA", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[3] = TextExpressionAssemble("Param/Expression/FB3842DA");
    gv_postgameFeatTooltip[3] = StringExternal("Param/Value/C47D94F1");
    gf_InvalidationCheck(lv_player, 3);
    lv_player = gf_GossipMostMealsCooked(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/CB6804D9", "A", StringExternal("Param/Value/81E12879"));
    TextExpressionSetToken("Param/Expression/CB6804D9", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[4] = TextExpressionAssemble("Param/Expression/CB6804D9");
    gv_postgameFeatTooltip[4] = StringExternal("Param/Value/FC5FF3AF");
    lv_player = gf_GossipMostExp(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/1C05B458", "A", StringExternal("Param/Value/BFB5BEA4"));
    TextExpressionSetToken("Param/Expression/1C05B458", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[5] = TextExpressionAssemble("Param/Expression/1C05B458");
    gv_postgameFeatTooltip[5] = StringExternal("Param/Value/CF25FDC6");
    lv_player = gf_GossipMostBerries(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/C117281D", "A", StringExternal("Param/Value/FF5ADD1B"));
    TextExpressionSetToken("Param/Expression/C117281D", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[6] = TextExpressionAssemble("Param/Expression/C117281D");
    gv_postgameFeatTooltip[6] = StringExternal("Param/Value/E9189848");
    gf_InvalidationCheck(lv_player, 6);
    lv_player = gf_FeatPlayerKills(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/EE888DC4", "A", StringExternal("Param/Value/A564003E"));
    TextExpressionSetToken("Param/Expression/EE888DC4", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[7] = TextExpressionAssemble("Param/Expression/EE888DC4");
    gv_postgameFeatTooltip[7] = StringExternal("Param/Value/4692FA54");
    gf_InvalidationCheck(lv_player, 7);
    lv_player = gf_FeatSpellsCast(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/35482FA4", "A", StringExternal("Param/Value/0999DE51"));
    TextExpressionSetToken("Param/Expression/35482FA4", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[8] = TextExpressionAssemble("Param/Expression/35482FA4");
    gv_postgameFeatTooltip[8] = StringExternal("Param/Value/F712D46A");
    gf_InvalidationCheck(lv_player, 8);
    lv_player = gf_FeatGoldEarned(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/4246043E", "A", StringExternal("Param/Value/3A766707"));
    TextExpressionSetToken("Param/Expression/4246043E", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[9] = TextExpressionAssemble("Param/Expression/4246043E");
    gv_postgameFeatTooltip[9] = StringExternal("Param/Value/C6769214");
    lv_player = gf_FeatMostStored(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/B1A68D44", "A", StringExternal("Param/Value/F4C92DDB"));
    TextExpressionSetToken("Param/Expression/B1A68D44", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[10] = TextExpressionAssemble("Param/Expression/B1A68D44");
    gv_postgameFeatTooltip[10] = StringExternal("Param/Value/F4E3351D");
    gf_InvalidationCheck(lv_player, 10);
    lv_player = gf_FeatTrappedEnemies(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/FD64276B", "A", StringExternal("Param/Value/EBAC4521"));
    TextExpressionSetToken("Param/Expression/FD64276B", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[11] = TextExpressionAssemble("Param/Expression/FD64276B");
    gv_postgameFeatTooltip[11] = StringExternal("Param/Value/C52D5BEA");
    gf_InvalidationCheck(lv_player, 11);
    lv_player = gf_FeatBoomstickTime(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/9FB65657", "A", StringExternal("Param/Value/9DCCE1A3"));
    TextExpressionSetToken("Param/Expression/9FB65657", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[12] = TextExpressionAssemble("Param/Expression/9FB65657");
    gv_postgameFeatTooltip[12] = StringExternal("Param/Value/AE9A6F1E");
    gf_InvalidationCheck(lv_player, 12);
    lv_player = gf_FeatHelpfulTribe(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/64AF68EF", "A", StringExternal("Param/Value/C20C4EC8"));
    TextExpressionSetToken("Param/Expression/64AF68EF", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[13] = TextExpressionAssemble("Param/Expression/64AF68EF");
    gv_postgameFeatTooltip[13] = StringExternal("Param/Value/83B95EDE");
    gf_InvalidationCheck(lv_player, 13);
    lv_player = gf_FeatFriendsLikeThese(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/A878404A", "A", StringExternal("Param/Value/FE5A954A"));
    TextExpressionSetToken("Param/Expression/A878404A", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[14] = TextExpressionAssemble("Param/Expression/A878404A");
    gv_postgameFeatTooltip[14] = StringExternal("Param/Value/062E3DC4");
    gf_InvalidationCheck(lv_player, 14);
    lv_player = gf_FeatCoiffureCare(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/5475BD80", "A", StringExternal("Param/Value/201E8368"));
    TextExpressionSetToken("Param/Expression/5475BD80", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[15] = TextExpressionAssemble("Param/Expression/5475BD80");
    gv_postgameFeatTooltip[15] = StringExternal("Param/Value/44F41FE6");
    gf_InvalidationCheck(lv_player, 15);
    lv_player = gf_FeatArchitect(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/36A63DD3", "A", StringExternal("Param/Value/14B7A08F"));
    TextExpressionSetToken("Param/Expression/36A63DD3", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[16] = TextExpressionAssemble("Param/Expression/36A63DD3");
    gv_postgameFeatTooltip[16] = StringExternal("Param/Value/AAE941B0");
    lv_player = gf_FeatSensible(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/45575710", "A", StringExternal("Param/Value/083517C3"));
    TextExpressionSetToken("Param/Expression/45575710", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[17] = TextExpressionAssemble("Param/Expression/45575710");
    gv_postgameFeatTooltip[17] = StringExternal("Param/Value/27E8B114");
    gf_InvalidationCheck(lv_player, 17);
    lv_player = gf_FeatUnbirdened(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/7A1CF91F", "A", StringExternal("Param/Value/47C13FC8"));
    TextExpressionSetToken("Param/Expression/7A1CF91F", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[18] = TextExpressionAssemble("Param/Expression/7A1CF91F");
    gv_postgameFeatTooltip[18] = StringExternal("Param/Value/6A6FC983");
    gf_InvalidationCheck(lv_player, 18);
    lv_player = gf_FeatBeastmaster(PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/FCFDA4A6", "A", StringExternal("Param/Value/F014E972"));
    TextExpressionSetToken("Param/Expression/FCFDA4A6", "B", TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
    gv_postgameFeatText[19] = TextExpressionAssemble("Param/Expression/FCFDA4A6");
    gv_postgameFeatTooltip[19] = StringExternal("Param/Value/215624DB");
    gf_InvalidationCheck(lv_player, 19);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RunPostgameFeats
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunPostgameFeats_Trigger = null;
int auto_gf_RunPostgameFeats_lp_plater;
void gf_RunPostgameFeats (int lp_plater) {
    auto_gf_RunPostgameFeats_lp_plater = lp_plater;
    if (auto_gf_RunPostgameFeats_Trigger == null) {
        auto_gf_RunPostgameFeats_Trigger = TriggerCreate("auto_gf_RunPostgameFeats_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunPostgameFeats_Trigger, false, false);
}
bool auto_gf_RunPostgameFeats_TriggerFunc (bool testConds, bool runActions) {
    int lp_plater = auto_gf_RunPostgameFeats_lp_plater;
    int init_i;
    int auto1C83CBA3_val;
    // Variable Declarations
    int lv_a;
    fixed lv_writeoutduration;
    int[4] lv_showcase;
    int lv_cycle;
    int lv_textoIndex;
    // Variable Initialization
    lv_writeoutduration = 2.0;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_showcase[init_i] = c_invalidDialogControlId;
    }
    // Implementation
    while (true) {
        lv_textoIndex = gf_GetFeatTextIndex(lp_plater);
        if (lv_cycle >= 3) {
            lv_cycle = 1;
        }
        else {
            lv_cycle = lv_cycle + 1;
        }
        auto1C83CBA3_val = lv_cycle;
        if (auto1C83CBA3_val == 1) {
            DialogControlDestroy(lv_showcase[lv_cycle]);
            libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorBottomLeft, 50, 35, gv_postgameFeatText[lv_textoIndex], ColorWithAlpha(0,0,0,0), true, lv_writeoutduration);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16", PlayerGroupSingle(lp_plater));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_postgameFeatTooltip[lv_textoIndex], PlayerGroupSingle(lp_plater));
            lv_showcase[lv_cycle] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_plater), true);
        }
        else if (auto1C83CBA3_val == 2) {
            DialogControlDestroy(lv_showcase[lv_cycle]);
            libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorBottom, 0, 35, gv_postgameFeatText[lv_textoIndex], ColorWithAlpha(0,0,0,0), true, lv_writeoutduration);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupSingle(lp_plater));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_postgameFeatTooltip[lv_textoIndex], PlayerGroupSingle(lp_plater));
            lv_showcase[lv_cycle] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_plater), true);
        }
        else if (auto1C83CBA3_val == 3) {
            DialogControlDestroy(lv_showcase[lv_cycle]);
            libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorBottomRight, 50, 35, gv_postgameFeatText[lv_textoIndex], ColorWithAlpha(0,0,0,0), true, lv_writeoutduration);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupSingle(lp_plater));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_postgameFeatTooltip[lv_textoIndex], PlayerGroupSingle(lp_plater));
            lv_showcase[lv_cycle] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_plater), true);
        }
        else {
        }
        if ((lv_cycle == 3)) {
            Wait(6.0, c_timeGame);
        }
        else {
            Wait(2.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetFeatTextIndex
//--------------------------------------------------------------------------------------------------
int gf_GetFeatTextIndex (int lp_player) {
    int autoEE912F0B_ae;
    int autoEE912F0B_ai;
    int autoC99B69BF_ae;
    int autoC99B69BF_ai;
    // Variable Declarations
    int lv_a;
    int lv_pick;
    bool lv_arewethereyeti;
    int lv_vlur;
    int lv_failsafe;
    bool lv_allshown;
    // Variable Initialization
    lv_allshown = true;
    // Implementation
    while ((lv_arewethereyeti == false)) {
        autoEE912F0B_ae = gv_pGFAmount;
        autoEE912F0B_ai = 1;
        lv_a = 1;
        for ( ; ( (autoEE912F0B_ai >= 0 && lv_a <= autoEE912F0B_ae) || (autoEE912F0B_ai <= 0 && lv_a >= autoEE912F0B_ae) ) ; lv_a += autoEE912F0B_ai ) {
            if ((gv_postgameFeatShown[lv_a][lp_player] == false) && (gv_postgameFeatValid[lv_a] == true)) {
                lv_allshown = false;
            }
            else {
            }
        }
        if ((lv_allshown == true)) {
            autoC99B69BF_ae = gv_pGFAmount;
            autoC99B69BF_ai = 1;
            lv_a = 1;
            for ( ; ( (autoC99B69BF_ai >= 0 && lv_a <= autoC99B69BF_ae) || (autoC99B69BF_ai <= 0 && lv_a >= autoC99B69BF_ae) ) ; lv_a += autoC99B69BF_ai ) {
                gv_postgameFeatShown[lv_a][lp_player] = false;
            }
        }
        else {
        }
        lv_failsafe += 1;
        if ((lv_failsafe < 100)) {
            lv_pick = RandomInt(1, gv_pGFAmount);
        }
        else {
            if (lv_pick >= gv_pGFAmount) {
                lv_pick = 1;
            }
            else {
                lv_pick = lv_pick + 1;
            }
        }
        if ((gv_postgameFeatValid[lv_pick] == true) && (gv_postgameFeatShown[lv_pick][lp_player] == false)) {
            lv_vlur = lv_pick;
            lv_arewethereyeti = true;
            gv_postgameFeatShown[lv_pick][lp_player] = true;
        }
        else {
        }
    }
    return lv_vlur;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InvalidationCheck
//--------------------------------------------------------------------------------------------------
void gf_InvalidationCheck (int lp_player, int lp_integer) {
    int autoF71CD504_val;
    // Implementation
    autoF71CD504_val = lp_integer;
    if (autoF71CD504_val == 3) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_sheepBred == 0)) {
            gv_postgameFeatValid[3] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 6) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_berriesPicked == 0)) {
            gv_postgameFeatValid[6] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 7) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_playerKills == 0)) {
            gv_postgameFeatValid[7] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 8) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_spellsCast == 0)) {
            gv_postgameFeatValid[8] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 10) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_storedItems == 0)) {
            gv_postgameFeatValid[10] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 11) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_trapsTriggered == 0)) {
            gv_postgameFeatValid[11] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 12) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_boomstickTime == 0)) {
            gv_postgameFeatValid[12] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 13) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_timesResurrected == 0)) {
            gv_postgameFeatValid[13] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 14) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_murlocsHired == 0)) {
            gv_postgameFeatValid[14] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 15) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_rainAvoided == 0)) {
            gv_postgameFeatValid[15] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 17) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_nodesDiscovered == 0)) {
            gv_postgameFeatValid[17] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 18) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_birdsScouts == 0)) {
            gv_postgameFeatValid[18] = false;
        }
        else {
        }
    }
    else if (autoF71CD504_val == 19) {
        if ((gv_playerData[lp_player].lv_gameStats.lv_petsTamed == 0)) {
            gv_postgameFeatValid[19] = false;
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatPlayerKills
//--------------------------------------------------------------------------------------------------
int gf_FeatPlayerKills (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_playerKills < gv_playerData[lv_troll].lv_gameStats.lv_playerKills)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatSpellsCast
//--------------------------------------------------------------------------------------------------
int gf_FeatSpellsCast (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_spellsCast < gv_playerData[lv_troll].lv_gameStats.lv_spellsCast)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatGoldEarned
//--------------------------------------------------------------------------------------------------
int gf_FeatGoldEarned (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_goldEarned < gv_playerData[lv_troll].lv_gameStats.lv_goldEarned)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatTreesPlanted
//--------------------------------------------------------------------------------------------------
int gf_FeatTreesPlanted () {
    int auto508B1DB8_ae;
    int auto508B1DB8_ai;
    // Variable Declarations
    int lv_a;
    int lv_value;
    // Variable Initialization
    // Implementation
    auto508B1DB8_ae = gv_players;
    auto508B1DB8_ai = 1;
    lv_a = 1;
    for ( ; ( (auto508B1DB8_ai >= 0 && lv_a <= auto508B1DB8_ae) || (auto508B1DB8_ai <= 0 && lv_a >= auto508B1DB8_ae) ) ; lv_a += auto508B1DB8_ai ) {
        if (((gv_playerData[lv_a].lv_gameStats.lv_treesFelled + gv_playerData[lv_a].lv_gameStats.lv_treesPlanted) > (gv_playerData[lv_value].lv_gameStats.lv_treesFelled + gv_playerData[lv_value].lv_gameStats.lv_treesPlanted))) {
            lv_value = lv_a;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatMostStored
//--------------------------------------------------------------------------------------------------
int gf_FeatMostStored (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_storedItems < gv_playerData[lv_troll].lv_gameStats.lv_storedItems)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatTrappedEnemies
//--------------------------------------------------------------------------------------------------
int gf_FeatTrappedEnemies (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_trapsTriggered < gv_playerData[lv_troll].lv_gameStats.lv_trapsTriggered)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatBoomstickTime
//--------------------------------------------------------------------------------------------------
int gf_FeatBoomstickTime (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_boomstickTime < gv_playerData[lv_troll].lv_gameStats.lv_boomstickTime)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatHelpfulTribe
//--------------------------------------------------------------------------------------------------
int gf_FeatHelpfulTribe (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_timesResurrected < gv_playerData[lv_troll].lv_gameStats.lv_timesResurrected)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatFriendsLikeThese
//--------------------------------------------------------------------------------------------------
int gf_FeatFriendsLikeThese (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_murlocsHired < gv_playerData[lv_troll].lv_gameStats.lv_murlocsHired)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatCoiffureCare
//--------------------------------------------------------------------------------------------------
int gf_FeatCoiffureCare (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_rainAvoided < gv_playerData[lv_troll].lv_gameStats.lv_rainAvoided)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatArchitect
//--------------------------------------------------------------------------------------------------
int gf_FeatArchitect (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_buildingsCreated < gv_playerData[lv_troll].lv_gameStats.lv_buildingsCreated)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatSensible
//--------------------------------------------------------------------------------------------------
int gf_FeatSensible (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_nodesDiscovered < gv_playerData[lv_troll].lv_gameStats.lv_nodesDiscovered)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatUnbirdened
//--------------------------------------------------------------------------------------------------
int gf_FeatUnbirdened (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_birdsScouts < gv_playerData[lv_troll].lv_gameStats.lv_birdsScouts)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeatBeastmaster
//--------------------------------------------------------------------------------------------------
int gf_FeatBeastmaster (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_petsTamed < gv_playerData[lv_troll].lv_gameStats.lv_petsTamed)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdatePGSWindow
//--------------------------------------------------------------------------------------------------
void gf_UpdatePGSWindow (int lp_player) {
    int autoF5A8569B_ae;
    int autoF5A8569B_ai;
    int auto4D098F31_ae;
    int auto4D098F31_ai;
    int auto979F1040_ae;
    int auto979F1040_ai;
    int auto98AC4536_ae;
    int auto98AC4536_ai;
    int auto7088CC47_ae;
    int auto7088CC47_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;
    int lv_i;
    text lv_vIIntegerLabel;
    color lv_labelColor;
    int lv_columnIndex;
    int lv_rowIndex;
    const int lv_rowMaximum = 8;
    int lv_teamSize;
    // Variable Initialization
    lv_vIIntegerLabel = StringExternal("Param/Value/FAA99A10");
    lv_labelColor = Color(100.00, 100.00, 100.00);
    // Implementation
    if ((gv_activeTeams == 2)) {
        if ((gv_winningTeam == 1)) {
            libNtve_gf_SetDialogItemText(gv_pGSWinLossLabel[1], StringExternal("Param/Value/31164A14"), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(gv_pGSWinLossLabel[2], StringExternal("Param/Value/09A797BD"), PlayerGroupSingle(lp_player));
        }
        else {
        }
        if ((gv_winningTeam == 2)) {
            libNtve_gf_SetDialogItemText(gv_pGSWinLossLabel[2], StringExternal("Param/Value/ED683443"), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(gv_pGSWinLossLabel[1], StringExternal("Param/Value/0F4BD489"), PlayerGroupSingle(lp_player));
        }
        else {
        }
        autoF5A8569B_ae = 10;
        autoF5A8569B_ai = 1;
        lv_a = 1;
        for ( ; ( (autoF5A8569B_ai >= 0 && lv_a <= autoF5A8569B_ae) || (autoF5A8569B_ai <= 0 && lv_a >= autoF5A8569B_ae) ) ; lv_a += autoF5A8569B_ai ) {
            DialogControlSetVisible(gv_pGSPlayerLabelT1[lv_a], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_pGSPlayerLabelT2[lv_a], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_pGSWinLabelT1[lv_a], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_pGSWinLabelT2[lv_a], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_pGSLossLabelT1[lv_a], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_pGSLossLabelT2[lv_a], PlayerGroupSingle(lp_player), false);
        }
        lv_b = 0;
        auto4D098F31_ae = gv_players;
        auto4D098F31_ai = 1;
        lv_a = 1;
        for ( ; ( (auto4D098F31_ai >= 0 && lv_a <= auto4D098F31_ae) || (auto4D098F31_ai <= 0 && lv_a >= auto4D098F31_ae) ) ; lv_a += auto4D098F31_ai ) {
            if ((gv_playerData[lv_a].lv_team == 1)) {
                if ((PlayerType(lv_a) == c_playerTypeUser)) {
                    lv_b += 1;
                    lv_labelColor = gf_GetPGSLabelColor(lv_a, lp_player);
                    TextExpressionSetToken("Param/Expression/1F31245C", "A", gf_GetPlayerName(lv_a, 0));
                    TextExpressionSetToken("Param/Expression/1F31245C", "B", StringExternal("Param/Value/3F834FA5"));
                    TextExpressionSetToken("Param/Expression/1F31245C", "C", IntToText(gv_acclvl[lv_a]));
                    TextExpressionSetToken("Param/Expression/1F31245C", "D", StringExternal("Param/Value/2B2EB0D6"));
                    libNtve_gf_SetDialogItemText(gv_pGSPlayerLabelT1[lv_b], TextWithColor(TextExpressionAssemble("Param/Expression/1F31245C"), lv_labelColor), PlayerGroupSingle(lp_player));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "E", TextWithColor(gf_GetPlayerName(lv_a, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_a, false))));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "O", StringExternal("Param/Value/3F9DB6BF"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "P", TextWithColor(IntToText(gv_accwins[lv_a]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "Q", StringExternal("Param/Value/A8708B5E"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "R", TextWithColor(IntToText(gv_acclosses[lv_a]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "S", StringExternal("Param/Value/3A3BBA3C"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "T", TextWithColor(gf_GetWLText(lv_a), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "A", StringExternal("Param/Value/D908903B"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "B", TextWithColor(IntToText(gv_kobkills[lv_a]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "C", StringExternal("Param/Value/CC88D758"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "D", TextWithColor(IntToText(gv_kobdeaths[lv_a]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "H", StringExternal("Param/Value/F596F80B"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "I", TextWithColor(gf_GetKDText(lv_a), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "J", StringExternal("Param/Value/FAC2031C"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "K", gf_GetMatchHistoryText(lv_a));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "F", StringExternal("Param/Value/27BFCEE7"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "G", TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_a)), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "L", StringExternal("Param/Value/C05768F4"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "M", StringToText(gv_handle[lv_a]));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "N", StringExternal("Param/Value/7D9E3F89"));
                    TextExpressionSetToken("Param/Expression/4EA072BC", "U", gf_RatingAffix(lv_a, lv_b));
                    libNtve_gf_SetDialogItemTooltip(gv_pGSPlayerLabelT1[lv_b], TextExpressionAssemble("Param/Expression/4EA072BC"), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemText(gv_pGSWinLabelT1[lv_b], TextWithColor(IntToText(gv_accwins[lv_a]), lv_labelColor), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemText(gv_pGSLossLabelT1[lv_b], TextWithColor(IntToText(gv_acclosses[lv_a]), lv_labelColor), PlayerGroupSingle(lp_player));
                }
                else {
                    if ((PlayerType(lv_a) != c_playerTypeNone)) {
                        lv_b += 1;
                        libNtve_gf_SetDialogItemText(gv_pGSPlayerLabelT1[lv_b], gf_GetPlayerName(lv_a, 0), PlayerGroupSingle(lp_player));
                        TextExpressionSetToken("Param/Expression/F7C12A3F", "E", TextWithColor(gf_GetPlayerName(lv_a, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_a, false))));
                        TextExpressionSetToken("Param/Expression/F7C12A3F", "F", StringExternal("Param/Value/A4978789"));
                        TextExpressionSetToken("Param/Expression/F7C12A3F", "G", TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_a)), Color(100.00, 100.00, 100.00)));
                        libNtve_gf_SetDialogItemTooltip(gv_pGSPlayerLabelT1[lv_b], TextExpressionAssemble("Param/Expression/F7C12A3F"), PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemText(gv_pGSWinLabelT1[lv_b], lv_vIIntegerLabel, PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemText(gv_pGSLossLabelT1[lv_b], lv_vIIntegerLabel, PlayerGroupSingle(lp_player));
                    }
                    else {
                    }
                }
                DialogControlSetVisible(gv_pGSPlayerLabelT1[lv_b], PlayerGroupSingle(lp_player), true);
                DialogControlSetVisible(gv_pGSWinLabelT1[lv_b], PlayerGroupSingle(lp_player), true);
            }
            else {
            }
        }
        lv_b = 0;
        auto979F1040_ae = gv_players;
        auto979F1040_ai = 1;
        lv_a = 1;
        for ( ; ( (auto979F1040_ai >= 0 && lv_a <= auto979F1040_ae) || (auto979F1040_ai <= 0 && lv_a >= auto979F1040_ae) ) ; lv_a += auto979F1040_ai ) {
            if ((gv_playerData[lv_a].lv_team == 2)) {
                if ((PlayerType(lv_a) == c_playerTypeUser)) {
                    lv_b += 1;
                    lv_labelColor = gf_GetPGSLabelColor(lv_a, lp_player);
                    TextExpressionSetToken("Param/Expression/CE2FCD7C", "A", gf_GetPlayerName(lv_a, 0));
                    TextExpressionSetToken("Param/Expression/CE2FCD7C", "B", StringExternal("Param/Value/48EFC89A"));
                    TextExpressionSetToken("Param/Expression/CE2FCD7C", "C", IntToText(gv_acclvl[lv_a]));
                    TextExpressionSetToken("Param/Expression/CE2FCD7C", "D", StringExternal("Param/Value/D508C692"));
                    libNtve_gf_SetDialogItemText(gv_pGSPlayerLabelT2[lv_b], TextWithColor(TextExpressionAssemble("Param/Expression/CE2FCD7C"), lv_labelColor), PlayerGroupSingle(lp_player));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "E", TextWithColor(gf_GetPlayerName(lv_a, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_a, false))));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "O", StringExternal("Param/Value/7264C8C3"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "P", TextWithColor(IntToText(gv_accwins[lv_a]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "Q", StringExternal("Param/Value/7C4EC6BC"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "R", TextWithColor(IntToText(gv_acclosses[lv_a]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "S", StringExternal("Param/Value/94E9FA4D"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "T", TextWithColor(gf_GetWLText(lv_a), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "A", StringExternal("Param/Value/062FC37D"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "B", TextWithColor(IntToText(gv_kobkills[lv_a]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "C", StringExternal("Param/Value/423206CD"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "D", TextWithColor(IntToText(gv_kobdeaths[lv_a]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "H", StringExternal("Param/Value/5FBF8D3E"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "I", TextWithColor(gf_GetKDText(lv_a), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "J", StringExternal("Param/Value/B4D0D96F"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "K", gf_GetMatchHistoryText(lv_a));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "F", StringExternal("Param/Value/9018EC2D"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "G", TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_a)), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "L", StringExternal("Param/Value/5693DD2F"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "M", StringToText(gv_handle[lv_a]));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "N", StringExternal("Param/Value/7B874DC8"));
                    TextExpressionSetToken("Param/Expression/CDDB619B", "U", gf_RatingAffix(lv_a, lv_b));
                    libNtve_gf_SetDialogItemTooltip(gv_pGSPlayerLabelT2[lv_b], TextExpressionAssemble("Param/Expression/CDDB619B"), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemText(gv_pGSWinLabelT2[lv_b], TextWithColor(IntToText(gv_accwins[lv_a]), lv_labelColor), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemText(gv_pGSLossLabelT2[lv_b], TextWithColor(IntToText(gv_acclosses[lv_a]), lv_labelColor), PlayerGroupSingle(lp_player));
                }
                else {
                    if ((PlayerType(lv_a) != c_playerTypeNone)) {
                        lv_b += 1;
                        libNtve_gf_SetDialogItemText(gv_pGSPlayerLabelT2[lv_b], gf_GetPlayerName(lv_a, 0), PlayerGroupSingle(lp_player));
                        TextExpressionSetToken("Param/Expression/CBD34081", "E", TextWithColor(gf_GetPlayerName(lv_a, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_a, false))));
                        TextExpressionSetToken("Param/Expression/CBD34081", "F", StringExternal("Param/Value/00E41E65"));
                        TextExpressionSetToken("Param/Expression/CBD34081", "G", TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_a)), Color(100.00, 100.00, 100.00)));
                        libNtve_gf_SetDialogItemTooltip(gv_pGSPlayerLabelT2[lv_b], TextExpressionAssemble("Param/Expression/CBD34081"), PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemText(gv_pGSWinLabelT2[lv_b], lv_vIIntegerLabel, PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemText(gv_pGSLossLabelT2[lv_b], lv_vIIntegerLabel, PlayerGroupSingle(lp_player));
                    }
                    else {
                    }
                }
                DialogControlSetVisible(gv_pGSPlayerLabelT2[lv_b], PlayerGroupSingle(lp_player), true);
                DialogControlSetVisible(gv_pGSWinLabelT2[lv_b], PlayerGroupSingle(lp_player), true);
            }
            else {
            }
        }
    }
    else {
        auto98AC4536_ae = gv_activeTeams;
        auto98AC4536_ai = 1;
        lv_a = 1;
        for ( ; ( (auto98AC4536_ai >= 0 && lv_a <= auto98AC4536_ae) || (auto98AC4536_ai <= 0 && lv_a >= auto98AC4536_ae) ) ; lv_a += auto98AC4536_ai ) {
            lv_teamSize = PlayerGroupCount(gv_teamData[lv_a].lv_members);
            if (((lv_rowIndex + (lv_teamSize + 1)) > lv_rowMaximum) && ((lv_teamSize + 1) < lv_rowMaximum)) {
                lv_columnIndex += 1;
                lv_rowIndex = 0;
            }
            else {
            }
            DialogControlSetVisible(gv_pGSMultiTeamLabel[lv_a], PlayerGroupSingle(lp_player), true);
            DialogControlSetPosition(gv_pGSMultiTeamLabel[lv_a], PlayerGroupSingle(lp_player), c_anchorTopLeft, (100 + (lv_columnIndex * 350)), (100 + (lv_rowIndex * 45)));
            lv_rowIndex += 1;
            if ((gv_winningPlayers == gv_teamData[lv_a].lv_members)) {
                TextExpressionSetToken("Param/Expression/77948A7A", "A", StringExternal("Param/Value/C610C3FA"));
                TextExpressionSetToken("Param/Expression/77948A7A", "B", gf_GetTribeTextOfTeam(lv_a));
                TextExpressionSetToken("Param/Expression/77948A7A", "C", StringExternal("Param/Value/07E736B0"));
                libNtve_gf_SetDialogItemText(gv_pGSMultiTeamLabel[lv_a], TextExpressionAssemble("Param/Expression/77948A7A"), PlayerGroupSingle(lp_player));
            }
            else {
                TextExpressionSetToken("Param/Expression/A0A664B4", "A", StringExternal("Param/Value/3ED9812F"));
                TextExpressionSetToken("Param/Expression/A0A664B4", "B", gf_GetTribeTextOfTeam(lv_a));
                TextExpressionSetToken("Param/Expression/A0A664B4", "C", StringExternal("Param/Value/6C62E9CB"));
                libNtve_gf_SetDialogItemText(gv_pGSMultiTeamLabel[lv_a], TextExpressionAssemble("Param/Expression/A0A664B4"), PlayerGroupSingle(lp_player));
            }
            auto7088CC47_ae = lv_teamSize;
            auto7088CC47_ai = 1;
            lv_b = 1;
            for ( ; ( (auto7088CC47_ai >= 0 && lv_b <= auto7088CC47_ae) || (auto7088CC47_ai <= 0 && lv_b >= auto7088CC47_ae) ) ; lv_b += auto7088CC47_ai ) {
                lv_i = PlayerGroupPlayer(gv_teamData[lv_a].lv_members, lv_b);
                DialogControlSetVisible(gv_pGSMultiPlayerLabel[lv_i], PlayerGroupSingle(lp_player), true);
                DialogControlSetPosition(gv_pGSMultiPlayerLabel[lv_i], PlayerGroupSingle(lp_player), c_anchorTopLeft, (100 + (lv_columnIndex * 350)), (100 + (lv_rowIndex * 45)));
                TextExpressionSetToken("Param/Expression/5B27EC7D", "A", StringExternal("Param/Value/347CF6E5"));
                TextExpressionSetToken("Param/Expression/5B27EC7D", "B", StringExternal("Param/Value/67161835"));
                TextExpressionSetToken("Param/Expression/5B27EC7D", "C", StringExternal("Param/Value/559C45F2"));
                libNtve_gf_SetDialogItemText(gv_pGSMultiPlayerLabel[lv_i], (TextExpressionAssemble("Param/Expression/5B27EC7D")), PlayerGroupSingle(lp_player));
                if ((PlayerType(lv_i) == c_playerTypeUser)) {
                    lv_labelColor = gf_GetPGSLabelColor(lv_i, lp_player);
                    TextExpressionSetToken("Param/Expression/9AB7CFF0", "A", gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken("Param/Expression/9AB7CFF0", "B", StringExternal("Param/Value/33C0C9B9"));
                    TextExpressionSetToken("Param/Expression/9AB7CFF0", "C", IntToText(gv_acclvl[lv_i]));
                    TextExpressionSetToken("Param/Expression/9AB7CFF0", "D", StringExternal("Param/Value/21900CF1"));
                    libNtve_gf_SetDialogItemText(gv_pGSMultiPlayerLabel[lv_i], TextWithColor(TextExpressionAssemble("Param/Expression/9AB7CFF0"), lv_labelColor), PlayerGroupSingle(lp_player));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "E", TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "O", StringExternal("Param/Value/0A0E01D8"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "P", TextWithColor(IntToText(gv_accwins[lv_i]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "Q", StringExternal("Param/Value/4894964A"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "R", TextWithColor(IntToText(gv_acclosses[lv_i]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "S", StringExternal("Param/Value/1EA787D6"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "T", TextWithColor(gf_GetWLText(lv_i), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "A", StringExternal("Param/Value/3D43397A"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "B", TextWithColor(IntToText(gv_kobkills[lv_i]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "C", StringExternal("Param/Value/BBD25194"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "D", TextWithColor(IntToText(gv_kobdeaths[lv_i]), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "H", StringExternal("Param/Value/299AAF27"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "I", TextWithColor(gf_GetKDText(lv_i), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "J", StringExternal("Param/Value/E3298523"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "K", gf_GetMatchHistoryText(lv_i));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "F", StringExternal("Param/Value/BA355A76"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "G", TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_i)), Color(100.00, 100.00, 100.00)));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "L", StringExternal("Param/Value/1EF3E86F"));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "M", StringToText(gv_handle[lv_i]));
                    TextExpressionSetToken("Param/Expression/6B7677F5", "N", StringExternal("Param/Value/76B9127B"));
                    libNtve_gf_SetDialogItemTooltip(gv_pGSMultiPlayerLabel[lv_i], TextExpressionAssemble("Param/Expression/6B7677F5"), PlayerGroupSingle(lp_player));
                }
                else {
                    if ((PlayerType(lv_i) != c_playerTypeNone)) {
                        libNtve_gf_SetDialogItemText(gv_pGSMultiPlayerLabel[lv_i], gf_GetPlayerName(lv_i, 0), PlayerGroupSingle(lp_player));
                        TextExpressionSetToken("Param/Expression/BB71A733", "E", TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken("Param/Expression/BB71A733", "F", StringExternal("Param/Value/9480F6F5"));
                        TextExpressionSetToken("Param/Expression/BB71A733", "G", TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_i)), Color(100.00, 100.00, 100.00)));
                        libNtve_gf_SetDialogItemTooltip(gv_pGSMultiPlayerLabel[lv_i], TextExpressionAssemble("Param/Expression/BB71A733"), PlayerGroupSingle(lp_player));
                    }
                    else {
                    }
                }
                lv_rowIndex += 1;
                if ((lv_rowIndex >= lv_rowMaximum)) {
                    lv_columnIndex += 1;
                    lv_rowIndex = 0;
                }
                else {
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RatingAffix
//--------------------------------------------------------------------------------------------------
text gf_RatingAffix (int lp_player, int lp_b) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_rated == true) && (gv_validRatedGame == true) && (lp_player == lp_b)) {
        TextExpressionSetToken("Param/Expression/4FA77522", "A", StringExternal("Param/Value/6CA4D7A9"));
        TextExpressionSetToken("Param/Expression/4FA77522", "B", IntToText(gv_ratingvalue[lp_player]));
        TextExpressionSetToken("Param/Expression/4FA77522", "C", StringExternal("Param/Value/1ECB0D5D"));
        lv_value = TextExpressionAssemble("Param/Expression/4FA77522");
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetPGSLabelColor
//--------------------------------------------------------------------------------------------------
color gf_GetPGSLabelColor (int lp_index, int lp_player) {
    // Variable Declarations
    color lv_value;
    // Variable Initialization
    lv_value = Color(0,0,0);
    // Implementation
    if ((PlayerStatus(lp_index) == c_playerStatusActive)) {
        if ((lp_index == lp_player)) {
            lv_value = Color(254*100/255,138*100/255,14*100/255);
        }
        else {
            lv_value = Color(100.00, 100.00, 100.00);
        }
    }
    else {
        lv_value = Color(50.20, 50.20, 50.20);
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetFavWeapIndex
//--------------------------------------------------------------------------------------------------
int gf_GetFavWeapIndex (int lp_player) {
    // Variable Declarations
    int lv_max;
    int lv_maxindex;
    int lv_i;
    // Variable Initialization
    // Implementation
    while ((lv_i <= gv_maxWeapLevel)) {
        if ((gv_favouriteWeaponRating[lv_i][lp_player] > lv_max)) {
            lv_max = gv_favouriteWeaponRating[lv_i][lp_player];
            lv_maxindex = lv_i;
        }
        else {
        }
        lv_i += 1;
    }
    return lv_maxindex;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetItemNameFromLevel
//--------------------------------------------------------------------------------------------------
text gf_GetItemNameFromLevel (int lp_level) {
    // Variable Declarations
    int lv_a;
    string lv_itemTypeID;
    text lv_value;
    // Variable Initialization
    lv_itemTypeID = "";
    // Implementation
    if (((lp_level >= 0) && (lp_level <= gv_maxWeapLevel))) {
        if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "BerserkersBattleAxe", "Level", 0)))) {
            lv_value = UnitTypeGetName("BerserkersBattleAxe");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "DullPickaxe", "Level", 0)))) {
            lv_value = UnitTypeGetName("DullPickaxe");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "JudgmentGavel", "Level", 0)))) {
            lv_value = UnitTypeGetName("JudgmentGavel");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "SturdyWoodenStick", "Level", 0)))) {
            lv_value = UnitTypeGetName("SturdyWoodenStick");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "SharpIronPickaxe", "Level", 0)))) {
            lv_value = UnitTypeGetName("SharpIronPickaxe");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "GoldenPolearm", "Level", 0)))) {
            lv_value = UnitTypeGetName("GoldenPolearm");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "RoughBlunderbuss", "Level", 0)))) {
            lv_value = UnitTypeGetName("RoughBlunderbuss");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "CelestialOrb", "Level", 0)))) {
            lv_value = UnitTypeGetName("CelestialOrb");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "EnigmaticStaff", "Level", 0)))) {
            lv_value = UnitTypeGetName("EnigmaticStaff");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "ElderWand", "Level", 0)))) {
            lv_value = UnitTypeGetName("ElderWand");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "RepeatingCrossbow", "Level", 0)))) {
            lv_value = UnitTypeGetName("RepeatingCrossbow");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "Wolfsbane", "Level", 0)))) {
            lv_value = UnitTypeGetName("Wolfsbane");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "LiquidatorSpellblade", "Level", 0)))) {
            lv_value = UnitTypeGetName("LiquidatorSpellblade");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "VenomousArbalest", "Level", 0)))) {
            lv_value = UnitTypeGetName("VenomousArbalest");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "MurlocDoomhammer", "Level", 0)))) {
            lv_value = UnitTypeGetName("MurlocDoomhammer");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "ViciouslySharpArmblade", "Level", 0)))) {
            lv_value = UnitTypeGetName("ViciouslySharpArmblade");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "FrostNeedle", "Level", 0)))) {
            lv_value = UnitTypeGetName("FrostNeedle");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "Bloodcleaver", "Level", 0)))) {
            lv_value = UnitTypeGetName("Bloodcleaver");
        }
        else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, "CravensFishSticker", "Level", 0)))) {
            lv_value = UnitTypeGetName("CravensFishSticker");
        }
        else if (true) {
            lv_value = StringExternal("Param/Value/EB53ADD6");
        }
    }
    else {
        lv_value = StringExternal("Param/Value/CC56CDDA");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetWLText
//--------------------------------------------------------------------------------------------------
text gf_GetWLText (int lp_player) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_acclosses[lp_player] > 0)) {
        lv_value = FixedToText((IntToFixed(gv_accwins[lp_player]) / IntToFixed(gv_acclosses[lp_player])), 2);
    }
    else {
        lv_value = StringExternal("Param/Value/4EFC1750");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetKDText
//--------------------------------------------------------------------------------------------------
text gf_GetKDText (int lp_player) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_kobdeaths[lp_player] > 0)) {
        lv_value = FixedToText((IntToFixed(gv_kobkills[lp_player]) / IntToFixed(gv_kobdeaths[lp_player])), 2);
    }
    else {
        lv_value = StringExternal("Param/Value/8E7837B0");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetMatchHistoryText
//--------------------------------------------------------------------------------------------------
text gf_GetMatchHistoryText (int lp_player) {
    int auto51D1CAE4_ae;
    int auto51D1CAE4_ai;
    // Variable Declarations
    int lv_maximumLength;
    int lv_a;
    text lv_value;
    // Variable Initialization
    lv_maximumLength = 8;
    lv_value = StringExternal("Param/Value/1AD6966E");
    // Implementation
    if ((StringLength(gv_matchhistory[lp_player]) > lv_maximumLength)) {
        gv_matchhistory[lp_player] = StringReplace(gv_matchhistory[lp_player], "", 1, (StringLength(gv_matchhistory[0]) - lv_maximumLength));
    }
    else {
    }
    auto51D1CAE4_ae = StringLength(gv_matchhistory[lp_player]);
    auto51D1CAE4_ai = 1;
    lv_a = 1;
    for ( ; ( (auto51D1CAE4_ai >= 0 && lv_a <= auto51D1CAE4_ae) || (auto51D1CAE4_ai <= 0 && lv_a >= auto51D1CAE4_ae) ) ; lv_a += auto51D1CAE4_ai ) {
        if ((StringSub(gv_matchhistory[lp_player], lv_a, lv_a) == "W")) {
            lv_value = (lv_value + TextWithColor(StringExternal("Param/Value/9B278DBD"), Color(0.00, 100.00, 0.00)));
        }
        else if ((StringSub(gv_matchhistory[lp_player], lv_a, lv_a) == "L")) {
            lv_value = (lv_value + TextWithColor(StringExternal("Param/Value/B8A59028"), Color(100.00, 0.00, 0.00)));
        }
        else if ((StringSub(gv_matchhistory[lp_player], lv_a, lv_a) == "D")) {
            lv_value = (lv_value + TextWithColor(StringExternal("Param/Value/3CE58B77"), Color(50.20, 50.20, 50.20)));
        }
    }
    lv_value = (lv_value + StringExternal("Param/Value/556C5C30"));
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CheckSeasonalRequirements
//--------------------------------------------------------------------------------------------------
void gf_CheckSeasonalRequirements (int lp_player) {
    // Implementation
    if ((gv_winterHolidays == true)) {
        gf_UnlockRequirement(lp_player, 2, 27);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PlayerWithHandle
//--------------------------------------------------------------------------------------------------
int gf_PlayerWithHandle (string lp_handle) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lp_handle == gv_handle[PlayerGroupLoopCurrent()])) {
            lv_value = PlayerGroupLoopCurrent();
            break;
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReprimandPlayer
//--------------------------------------------------------------------------------------------------
void gf_ReprimandPlayer (string lp_handle, text lp_info) {
    // Implementation
    gv_reprimandedList[gv_reprimandIndex] = lp_handle;
    gv_reprimandIndex += 1;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReprimandedPlayer
//--------------------------------------------------------------------------------------------------
bool gf_ReprimandedPlayer (int lp_player) {
    int autoBE19F746_ae;
    int autoBE19F746_ai;
    // Variable Declarations
    int lv_a;
    bool lv_value;
    // Variable Initialization
    // Implementation
    autoBE19F746_ae = gv_reprimandedMax;
    autoBE19F746_ai = 1;
    lv_a = 1;
    for ( ; ( (autoBE19F746_ai >= 0 && lv_a <= autoBE19F746_ae) || (autoBE19F746_ai <= 0 && lv_a >= autoBE19F746_ae) ) ; lv_a += autoBE19F746_ai ) {
        if ((gv_handle[lp_player] == gv_reprimandedList[lv_a])) {
            lv_value = true;
            break;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RatingKeyValid
//--------------------------------------------------------------------------------------------------
bool gf_RatingKeyValid (string lp_entry, string lp_section, int lp_index) {
    // Variable Declarations
    string lv_daString;
    int lv_key;
    int lv_keyValue;
    int lv_flood;
    int lv_pL;
    int lv_supposedLength;
    bool lv_value;
    // Variable Initialization
    lv_daString = "";
    // Implementation
    if ((BankKeyExists(BankLastCreated(), lp_section, lp_entry) == true) && (BankKeyExists(BankLastCreated(), "stats", "kjU9zLa") == true) && (BankKeyExists(BankLastCreated(), "stats", "Makkara") == true)) {
        lv_daString = BankValueGetAsString(BankLastCreated(), lp_section, lp_entry);
        lv_key = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), "stats", "kjU9zLa"), ((gv_trolzl12 + 1) - lp_index), ((gv_trolzl12 + 1) - lp_index)));
        lv_keyValue = StringToInt(StringSub(lv_daString, lv_key, lv_key));
        lv_flood = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), "stats", "Makkara"), lp_index, lp_index));
        lv_pL = StringLength(IntToString(gf_DecryptInt(lv_daString, lv_key, lv_flood)));
        lv_supposedLength = (lv_key + ((lv_flood * 3) + (lv_pL * lv_keyValue)));
        if ((StringLength(lv_daString) == lv_supposedLength)) {
            lv_value = true;
        }
        else {
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdatePlayerRating
//--------------------------------------------------------------------------------------------------
void gf_UpdatePlayerRating (int lp_player, int lp_winLoss) {
    // Variable Declarations
    int lv_t;
    int lv_ot;
    fixed lv_expectedoutcome;
    int lv_k;
    // Variable Initialization
    lv_t = gv_playerData[lp_player].lv_team;
    lv_ot = lv_t;
    lv_k = gf_GetKValue(lp_player);
    // Implementation
    if (lv_ot >= 2) {
        lv_ot = 1;
    }
    else {
        lv_ot = lv_ot + 1;
    }
    lv_expectedoutcome = (1.0 / (1.0 + Pow(10.0, ((gv_teamData[lv_ot].lv_rating - gv_ratingvalue[lp_player]) / 400.0))));
    gv_ratingvalue[lp_player] += FixedToInt(Round((IntToFixed(lv_k) * (IntToFixed(lp_winLoss) - lv_expectedoutcome))));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetKValue
//--------------------------------------------------------------------------------------------------
int gf_GetKValue (int lp_player) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_ratinggames[lp_player] <= 10)) {
        lv_value = 60;
    }
    else if (true) {
        lv_value = 30;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ValidRatedGame
//--------------------------------------------------------------------------------------------------
bool gf_ValidRatedGame () {
    // Variable Declarations
    int lv_count;
    bool lv_value;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            lv_count += 1;
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    if ((lv_count > 1)) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SaveSB3
//--------------------------------------------------------------------------------------------------
void gf_SaveSB3 (int lp_i) {
    // Variable Declarations
    string lv_keystring;
    string lv_floodstring;
    // Variable Initialization
    lv_keystring = gf_GetRandom12String();
    lv_floodstring = gf_GetRandom12String();
    // Implementation
    BankLoad("nostrobskalufs", lp_i);
    BankValueSetFromString(BankLastCreated(), "stats", "hJu5gRo", gf_EncryptInt(gv_ratingvalue[lp_i], StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 0), (gv_trolzl12 - 0))), StringToInt(StringSub(lv_floodstring, 1, 1))));
    BankValueSetFromString(BankLastCreated(), "stats", "Ka0fazH", gf_EncryptInt(gv_ratinggames[lp_i], StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 1), (gv_trolzl12 - 1))), StringToInt(StringSub(lv_floodstring, 2, 2))));
    BankValueSetFromString(BankLastCreated(), "stats", "kjU9zLa", lv_keystring);
    BankValueSetFromString(BankLastCreated(), "stats", "Makkara", lv_floodstring);
    BankSave(BankLastCreated());
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SlayerProgress
//--------------------------------------------------------------------------------------------------
void gf_SlayerProgress (int lp_player, unit lp_boss) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    // Implementation
    if ((UnitGetType(lp_boss) == "MurlocChieftain")) {
        lv_index = 1;
    }
    else if ((UnitGetType(lp_boss) == "Zulrogg")) {
        lv_index = 2;
    }
    else if ((UnitGetType(lp_boss) == "DemonLordJaryx")) {
        lv_index = 3;
    }
    else if ((UnitGetType(lp_boss) == "FrostWitch")) {
        lv_index = 4;
    }
    gv_slayer[lp_player] = StringReplace(gv_slayer[lp_player], "1", lv_index, lv_index);
    if ((gv_slayer[lp_player] == "1111")) {
        gf_UnlockRequirement(lp_player, 1, 14);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VanquisherStart
//--------------------------------------------------------------------------------------------------
void gf_VanquisherStart (int lp_player) {
    // Implementation
    if ((gv_dead[lp_player] == false) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lp_player, c_unitAllianceAllyExcludeSelf, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5)) {
        gv_vanquisherEnabled[lp_player] = true;
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AllSpellsLearnedCheck
//--------------------------------------------------------------------------------------------------
void gf_AllSpellsLearnedCheck (int lp_player) {
    // Variable Declarations
    unit lv_unit;
    // Variable Initialization
    lv_unit = gv_playerData[lp_player].lv_kobold;
    // Implementation
    if ((gv_learnedSpellsString[lp_player] == "11111111")) {
        gv_playerData[lp_player].lv_hasAllSpells = true;
        if ((GameGetMissionTime() <= 600.0)) {
            gf_UnlockRequirement(lp_player, 2, 8);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ChampionGame
//--------------------------------------------------------------------------------------------------
bool gf_ChampionGame () {
    int auto6A6BCB71_ae;
    int auto6A6BCB71_ai;
    // Variable Declarations
    int lv_a;
    bool lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_activeTeams >= 10)) {
        lv_value = true;
        auto6A6BCB71_ae = gv_players;
        auto6A6BCB71_ai = 1;
        lv_a = 1;
        for ( ; ( (auto6A6BCB71_ai >= 0 && lv_a <= auto6A6BCB71_ae) || (auto6A6BCB71_ai <= 0 && lv_a >= auto6A6BCB71_ae) ) ; lv_a += auto6A6BCB71_ai ) {
            if ((PlayerType(lv_a) == c_playerTypeComputer)) {
                lv_value = false;
            }
            else {
            }
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AddSpecialReward
//--------------------------------------------------------------------------------------------------
void gf_AddSpecialReward (string lp_handle, string lp_reward, text lp_comment) {
    string autoD291169C_val;
    // Variable Declarations
    int lv_player;
    // Variable Initialization
    lv_player = gf_PlayerWithHandle(lp_handle);
    // Implementation
    if ((lv_player != 0)) {
        autoD291169C_val = lp_reward;
        if (autoD291169C_val == "tournamentWin0002a") {
            gf_UnlockRequirement(lv_player, 1, 27);
            gf_UnlockRequirement(lv_player, 1, 28);
            gf_UnlockRequirement(lv_player, 2, 28);
        }
        else if (autoD291169C_val == "tournamentWin0002b") {
            gf_UnlockRequirement(lv_player, 2, 28);
        }
        else if (autoD291169C_val == "tournamentWin0002c") {
            gf_UnlockRequirement(lv_player, 1, 27);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: createreward
//--------------------------------------------------------------------------------------------------
void gf_createreward (int lp_type, text lp_title, int lp_titleStyle, text lp_tooltip, int lp_cost, int lp_requirementIndex, text lp_requirementText) {
    // Implementation
    gv_rewardindex += 1;
    gv_reward[gv_rewardindex].lv_cost = lp_cost;
    gv_reward[gv_rewardindex].lv_titleStyle = lp_titleStyle;
    gv_reward[gv_rewardindex].lv_type = lp_type;
    gv_reward[gv_rewardindex].lv_requirementIndex = lp_requirementIndex;
    gv_reward[gv_rewardindex].lv_requirementText = lp_requirementText;
    gv_reward[gv_rewardindex].lv_title = lp_title;
    gv_reward[gv_rewardindex].lv_tooltip = lp_tooltip;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RewardCatIndexActive
//--------------------------------------------------------------------------------------------------
bool gf_RewardCatIndexActive (int lp_player, int lp_category, int lp_index) {
    // Variable Declarations
    bool lv_value;
    // Variable Initialization
    // Implementation
    if (((gv_rewardState[lp_player][lp_category][lp_index] == 3) || (gv_rewardState[lp_player][lp_category][lp_index] == 6) || (gv_rewardState[lp_player][lp_category][lp_index] == 9))) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetUnlockedVariable
//--------------------------------------------------------------------------------------------------
int gf_GetUnlockedVariable (int lp_integer) {
    int autoB1DB700C_val;
    int autoC58D99E8_val;
    int auto1E7C0D1F_val;
    // Variable Declarations
    int lv_random;
    int lv_value;
    // Variable Initialization
    lv_random = RandomInt(1, 3);
    // Implementation
    if ((lp_integer == 1)) {
        autoB1DB700C_val = lv_random;
        if (autoB1DB700C_val == 1) {
            lv_value = 1;
        }
        else if (autoB1DB700C_val == 2) {
            lv_value = 4;
        }
        else if (autoB1DB700C_val == 3) {
            lv_value = 7;
        }
        else {
        }
    }
    else if ((lp_integer == 2)) {
        autoC58D99E8_val = lv_random;
        if (autoC58D99E8_val == 1) {
            lv_value = 2;
        }
        else if (autoC58D99E8_val == 2) {
            lv_value = 5;
        }
        else if (autoC58D99E8_val == 3) {
            lv_value = 8;
        }
        else {
        }
    }
    else if ((lp_integer == 3)) {
        auto1E7C0D1F_val = lv_random;
        if (auto1E7C0D1F_val == 1) {
            lv_value = 3;
        }
        else if (auto1E7C0D1F_val == 2) {
            lv_value = 6;
        }
        else if (auto1E7C0D1F_val == 3) {
            lv_value = 9;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetUnlockedStatus
//--------------------------------------------------------------------------------------------------
int gf_GetUnlockedStatus (int lp_integer) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if (((lp_integer == 1) || (lp_integer == 4) || (lp_integer == 7))) {
        lv_value = 1;
    }
    else if (((lp_integer == 2) || (lp_integer == 5) || (lp_integer == 8))) {
        lv_value = 2;
    }
    else if (((lp_integer == 3) || (lp_integer == 6) || (lp_integer == 9))) {
        lv_value = 3;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RewardButtonClicked
//--------------------------------------------------------------------------------------------------
bool gf_RewardButtonClicked (int lp_button) {
    int auto061951E3_ae;
    int auto061951E3_ai;
    // Variable Declarations
    int lv_a;
    bool lv_value;
    // Variable Initialization
    // Implementation
    auto061951E3_ae = gv_rewardItems;
    auto061951E3_ai = 1;
    lv_a = 1;
    for ( ; ( (auto061951E3_ai >= 0 && lv_a <= auto061951E3_ae) || (auto061951E3_ai <= 0 && lv_a >= auto061951E3_ae) ) ; lv_a += auto061951E3_ai ) {
        if ((gv_rewardButton[lv_a] == lp_button)) {
            lv_value = true;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetRewardButtonIndex
//--------------------------------------------------------------------------------------------------
int gf_GetRewardButtonIndex (int lp_button) {
    int autoBEB270A2_ae;
    int autoBEB270A2_ai;
    // Variable Declarations
    int lv_a;
    int lv_value;
    // Variable Initialization
    // Implementation
    autoBEB270A2_ae = gv_rewardItems;
    autoBEB270A2_ai = 1;
    lv_a = 1;
    for ( ; ( (autoBEB270A2_ai >= 0 && lv_a <= autoBEB270A2_ae) || (autoBEB270A2_ai <= 0 && lv_a >= autoBEB270A2_ae) ) ; lv_a += autoBEB270A2_ai ) {
        if ((gv_rewardButton[lv_a] == lp_button)) {
            lv_value = lv_a;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShowRewardsDialog
//--------------------------------------------------------------------------------------------------
void gf_ShowRewardsDialog (int lp_player) {
    // Implementation
    if ((gv_acclvl[lp_player] >= gv_rewardLevelRequirement) && (DialogIsVisible(gv_rewardsMainWindow, lp_player) == false)) {
        DialogSetVisible(gv_pGSWindowLarge, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_perkWindow, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_rewardsMainWindow, PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemText(gv_perkDialogSmallBTN, StringExternal("Param/Value/86F9746F"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_pGSWindowSmallBTN, StringExternal("Param/Value/799732D6"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_rewardsOpenerItem, gf_RewardsOpenerText(lp_player), PlayerGroupSingle(EventPlayer()));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateRewardsDialog
//--------------------------------------------------------------------------------------------------
void gf_UpdateRewardsDialog (int lp_player) {
    int auto60F9EEFF_ae;
    int auto60F9EEFF_ai;
    // Variable Declarations
    text lv_title;
    text lv_tooltip;
    int lv_a;
    // Variable Initialization
    lv_title = StringExternal("Param/Value/3C3A62CC");
    lv_tooltip = StringExternal("Param/Value/15B192F3");
    // Implementation
    gf_HideAllRewButtons(lp_player);
    gf_CategoryText(lp_player);
    TextExpressionSetToken("Param/Expression/C57265DD", "A", StringExternal("Param/Value/512867AB"));
    TextExpressionSetToken("Param/Expression/C57265DD", "B", IntToText(gv_conqpoints[lp_player]));
    libNtve_gf_SetDialogItemText(gv_conqpointsLabel, TextExpressionAssemble("Param/Expression/C57265DD"), PlayerGroupSingle(lp_player));
    auto60F9EEFF_ae = 28;
    auto60F9EEFF_ai = 1;
    lv_a = 1;
    for ( ; ( (auto60F9EEFF_ai >= 0 && lv_a <= auto60F9EEFF_ae) || (auto60F9EEFF_ai <= 0 && lv_a >= auto60F9EEFF_ae) ) ; lv_a += auto60F9EEFF_ai ) {
        if ((gv_rewardCost[gv_rewardsCatSelect[lp_player]][lv_a] != -1) && ((gv_rewardHideIfReqIncomplete[gv_rewardsCatSelect[lp_player]][lv_a] == false) || (gf_RequirementCompleted(lp_player, gv_rewardsCatSelect[lp_player], lv_a) == true))) {
            DialogControlSetVisible(gv_rewardButton[lv_a], PlayerGroupSingle(lp_player), true);
            lv_title = gv_rewardTitle[gv_rewardsCatSelect[lp_player]][lv_a];
            TextExpressionSetToken("Param/Expression/61426F5E", "A", StringExternal("Param/Value/2FC09342"));
            TextExpressionSetToken("Param/Expression/61426F5E", "B", lv_title);
            TextExpressionSetToken("Param/Expression/61426F5E", "C", StringExternal("Param/Value/D5E90946"));
            lv_title = TextExpressionAssemble("Param/Expression/61426F5E");
            lv_tooltip = lv_title;
            lv_tooltip = (lv_tooltip + StringExternal("Param/Value/1F5630BB"));
            lv_tooltip = (lv_tooltip + gf_RewardCostText(lp_player, lv_a));
            lv_tooltip = (lv_tooltip + gf_RewardTooltipText(lp_player, lv_a));
            lv_tooltip = (lv_tooltip + gf_RewardReqText(lp_player, lv_a));
            libNtve_gf_SetDialogItemText(gv_rewardButton[lv_a], lv_title, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_rewardButton[lv_a], lv_tooltip, PlayerGroupSingle(lp_player));
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CategoryText
//--------------------------------------------------------------------------------------------------
void gf_CategoryText (int lp_player) {
    int autoC7A8F8B8_ae;
    int autoC7A8F8B8_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    autoC7A8F8B8_ae = gv_rewardCategories;
    autoC7A8F8B8_ai = 1;
    lv_a = 1;
    for ( ; ( (autoC7A8F8B8_ai >= 0 && lv_a <= autoC7A8F8B8_ae) || (autoC7A8F8B8_ai <= 0 && lv_a >= autoC7A8F8B8_ae) ) ; lv_a += autoC7A8F8B8_ai ) {
        if ((gv_rewardsCatSelect[lp_player] == lv_a)) {
            libNtve_gf_SetDialogItemColor(gv_rewardsCatBTN[lv_a], Color(22*100/255,128*100/255,0), PlayerGroupSingle(lp_player));
        }
        else {
            libNtve_gf_SetDialogItemColor(gv_rewardsCatBTN[lv_a], Color(100,100,100), PlayerGroupSingle(lp_player));
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HideAllRewButtons
//--------------------------------------------------------------------------------------------------
void gf_HideAllRewButtons (int lp_player) {
    int auto6885CDFC_ae;
    int auto6885CDFC_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    auto6885CDFC_ae = 28;
    auto6885CDFC_ai = 1;
    lv_a = 1;
    for ( ; ( (auto6885CDFC_ai >= 0 && lv_a <= auto6885CDFC_ae) || (auto6885CDFC_ai <= 0 && lv_a >= auto6885CDFC_ae) ) ; lv_a += auto6885CDFC_ai ) {
        DialogControlSetVisible(gv_rewardButton[lv_a], PlayerGroupSingle(lp_player), false);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RewardsOpenerText
//--------------------------------------------------------------------------------------------------
text gf_RewardsOpenerText (int lp_player) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    // Implementation
    if ((DialogIsVisible(gv_rewardsMainWindow, lp_player) == true)) {
        lv_value = StringExternal("Param/Value/6C0698B1");
    }
    else if ((gv_acclvl[lp_player] < gv_rewardLevelRequirement)) {
        lv_value = StringExternal("Param/Value/4187AB45");
    }
    else if (true) {
        lv_value = StringExternal("Param/Value/65E8CB6C");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RewardCostText
//--------------------------------------------------------------------------------------------------
text gf_RewardCostText (int lp_player, int lp_a) {
    // Variable Declarations
    int lv_cost;
    text lv_value;
    // Variable Initialization
    lv_cost = gv_rewardCost[gv_rewardsCatSelect[lp_player]][lp_a];
    lv_value = StringExternal("Param/Value/FD921713");
    // Implementation
    if (((gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 1) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 4) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 7))) {
        lv_value = (lv_value + IntToText(gv_conqpoints[lp_player]));
        lv_value = (lv_value + StringExternal("Param/Value/0DA4C3ED"));
        lv_value = (lv_value + IntToText(lv_cost));
        lv_value = (lv_value + StringExternal("Param/Value/7D0A8145"));
        if ((gv_conqpoints[lp_player] >= lv_cost)) {
            TextExpressionSetToken("Param/Expression/022E8641", "A", StringExternal("Param/Value/3B7E031F"));
            TextExpressionSetToken("Param/Expression/022E8641", "B", lv_value);
            TextExpressionSetToken("Param/Expression/022E8641", "C", StringExternal("Param/Value/0B982F90"));
            lv_value = TextExpressionAssemble("Param/Expression/022E8641");
        }
        else {
            TextExpressionSetToken("Param/Expression/929D2084", "A", StringExternal("Param/Value/C65F9C8A"));
            TextExpressionSetToken("Param/Expression/929D2084", "B", lv_value);
            TextExpressionSetToken("Param/Expression/929D2084", "C", StringExternal("Param/Value/4EDFE6CF"));
            lv_value = TextExpressionAssemble("Param/Expression/929D2084");
        }
    }
    else if (((gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 2) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 5) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 8))) {
        lv_value = StringExternal("Param/Value/46E91F58");
    }
    else if (((gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 3) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 6) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 9))) {
        lv_value = StringExternal("Param/Value/29B670BB");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RewardTooltipText
//--------------------------------------------------------------------------------------------------
text gf_RewardTooltipText (int lp_player, int lp_a) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    lv_value = StringExternal("Param/Value/D88618FE");
    // Implementation
    if ((gv_rewardsCatSelect[lp_player] == 1)) {
        TextExpressionSetToken("Param/Expression/B45955D5", "A", StringExternal("Param/Value/A0B3F3C3"));
        TextExpressionSetToken("Param/Expression/B45955D5", "B", gf_TitleFormat(lp_player, lp_a));
        TextExpressionSetToken("Param/Expression/B45955D5", "D", StringExternal("Param/Value/A9705725"));
        lv_value = TextExpressionAssemble("Param/Expression/B45955D5");
    }
    else {
        TextExpressionSetToken("Param/Expression/F33B63EE", "A", StringExternal("Param/Value/65D313AE"));
        TextExpressionSetToken("Param/Expression/F33B63EE", "B", gv_rewardTooltip[gv_rewardsCatSelect[lp_player]][lp_a]);
        lv_value = TextExpressionAssemble("Param/Expression/F33B63EE");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RewardReqText
//--------------------------------------------------------------------------------------------------
text gf_RewardReqText (int lp_player, int lp_a) {
    // Variable Declarations
    text lv_value;
    text lv_requirement;
    bool lv_completed;
    int lv_gladiatorSpree;
    // Variable Initialization
    lv_value = StringExternal("Param/Value/52AB17B4");
    lv_requirement = StringExternal("Param/Value/EF5A3D0A");
    lv_gladiatorSpree = gv_gladSpree[lp_player];
    // Implementation
    if ((gv_rewardReqExists[gv_rewardsCatSelect[lp_player]][lp_a] == true)) {
        if ((gf_RequirementCompleted(lp_player, gv_rewardsCatSelect[lp_player], lp_a) == false)) {
            lv_requirement = StringExternal("Param/Value/4D578BB6");
        }
        else {
            lv_completed = true;
            lv_requirement = StringExternal("Param/Value/99EB4B20");
        }
        if ((gv_rewardsCatSelect[lp_player] == 1) && (lp_a == 17)) {
            if ((gf_RequirementCompleted(lp_player, 1, 4) == true)) {
                lv_gladiatorSpree = 5;
            }
            else {
            }
            TextExpressionSetToken("Param/Expression/848BE313", "A", lv_requirement);
            TextExpressionSetToken("Param/Expression/848BE313", "B", StringExternal("Param/Value/4C150FFE"));
            TextExpressionSetToken("Param/Expression/848BE313", "C", StringExternal("Param/Value/AFF231BD"));
            TextExpressionSetToken("Param/Expression/848BE313", "D", IntToText(lv_gladiatorSpree));
            TextExpressionSetToken("Param/Expression/848BE313", "E", StringExternal("Param/Value/9FA9E9DC"));
            TextExpressionSetToken("Param/Expression/848BE313", "F", IntToText(5));
            TextExpressionSetToken("Param/Expression/848BE313", "G", StringExternal("Param/Value/7C384FBD"));
            lv_value = TextExpressionAssemble("Param/Expression/848BE313");
        }
        else if (true) {
            TextExpressionSetToken("Param/Expression/B3C3EE87", "A", lv_requirement);
            TextExpressionSetToken("Param/Expression/B3C3EE87", "B", gv_rewardReq[gv_rewardsCatSelect[lp_player]][lp_a]);
            TextExpressionSetToken("Param/Expression/B3C3EE87", "C", StringExternal("Param/Value/1A5E4B0E"));
            lv_value = TextExpressionAssemble("Param/Expression/B3C3EE87");
        }
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/52EBA528", "A", StringExternal("Param/Value/235773C8"));
    TextExpressionSetToken("Param/Expression/52EBA528", "B", lv_value);
    TextExpressionSetToken("Param/Expression/52EBA528", "C", StringExternal("Param/Value/FCBBB0D8"));
    lv_value = TextExpressionAssemble("Param/Expression/52EBA528");
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TitleFormat
//--------------------------------------------------------------------------------------------------
text gf_TitleFormat (int lp_player, int lp_a) {
    int autoE7E51B13_val;
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    lv_value = StringExternal("Param/Value/F265AA6D");
    // Implementation
    autoE7E51B13_val = gv_rewardsTitleStyle[lp_a];
    if (autoE7E51B13_val == 1) {
        TextExpressionSetToken("Param/Expression/16C46D13", "B", gv_rewardTitle[1][lp_a]);
        TextExpressionSetToken("Param/Expression/16C46D13", "E", StringExternal("Param/Value/6F97B39B"));
        TextExpressionSetToken("Param/Expression/16C46D13", "C", PlayerName(lp_player));
        lv_value = TextExpressionAssemble("Param/Expression/16C46D13");
    }
    else if (autoE7E51B13_val == 2) {
        TextExpressionSetToken("Param/Expression/3D98F292", "C", PlayerName(lp_player));
        TextExpressionSetToken("Param/Expression/3D98F292", "E", StringExternal("Param/Value/D6508F61"));
        TextExpressionSetToken("Param/Expression/3D98F292", "B", gv_rewardTitle[1][lp_a]);
        lv_value = TextExpressionAssemble("Param/Expression/3D98F292");
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SaveRewards
//--------------------------------------------------------------------------------------------------
void gf_SaveRewards (int lp_i) {
    // Variable Declarations
    string lv_keystring;
    string lv_floodstring;
    // Variable Initialization
    lv_keystring = gf_GetRandom12String();
    lv_floodstring = gf_GetRandom12String();
    // Implementation
    BankLoad("nostrobskalufs", lp_i);
    BankValueSetFromString(BankLastCreated(), "stats", "Yb4aLtz", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 1, 1)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 0), (gv_trolzl12 - 0))), StringToInt(StringSub(lv_floodstring, 1, 1))));
    BankValueSetFromString(BankLastCreated(), "stats", "J1klbk", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 1, 8)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 1), (gv_trolzl12 - 1))), StringToInt(StringSub(lv_floodstring, 2, 2))));
    BankValueSetFromString(BankLastCreated(), "stats", "grtzk61", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 1, 15)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 2), (gv_trolzl12 - 2))), StringToInt(StringSub(lv_floodstring, 3, 3))));
    BankValueSetFromString(BankLastCreated(), "stats", "HaL14rk", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 1, 22)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 3), (gv_trolzl12 - 3))), StringToInt(StringSub(lv_floodstring, 4, 4))));
    BankValueSetFromString(BankLastCreated(), "stats", "NepRk9a", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 2, 1)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 4), (gv_trolzl12 - 4))), StringToInt(StringSub(lv_floodstring, 5, 5))));
    BankValueSetFromString(BankLastCreated(), "stats", "Frvz7vl", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 2, 8)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 5), (gv_trolzl12 - 5))), StringToInt(StringSub(lv_floodstring, 6, 6))));
    BankValueSetFromString(BankLastCreated(), "stats", "oO0brtg", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 2, 15)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 6), (gv_trolzl12 - 6))), StringToInt(StringSub(lv_floodstring, 7, 7))));
    BankValueSetFromString(BankLastCreated(), "stats", "yrNyz31", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 2, 22)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 7), (gv_trolzl12 - 7))), StringToInt(StringSub(lv_floodstring, 8, 8))));
    BankValueSetFromString(BankLastCreated(), "stats", "zT5S5mn", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 3, 1)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 8), (gv_trolzl12 - 8))), StringToInt(StringSub(lv_floodstring, 9, 9))));
    BankValueSetFromString(BankLastCreated(), "stats", "kTrK7xb", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 3, 8)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 9), (gv_trolzl12 - 9))), StringToInt(StringSub(lv_floodstring, 10, 10))));
    BankValueSetFromString(BankLastCreated(), "stats", "nypR6ex", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 3, 15)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 10), (gv_trolzl12 - 10))), StringToInt(StringSub(lv_floodstring, 11, 11))));
    BankValueSetFromString(BankLastCreated(), "stats", "kxNn88a", gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 3, 22)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 11), (gv_trolzl12 - 11))), StringToInt(StringSub(lv_floodstring, 12, 12))));
    BankValueSetFromString(BankLastCreated(), "stats", "IbRt8q8", lv_keystring);
    BankValueSetFromString(BankLastCreated(), "stats", "LoBfl21", lv_floodstring);
    BankSave(BankLastCreated());
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetRewardState
//--------------------------------------------------------------------------------------------------
void gf_SetRewardState (int lp_player, int lp_integerString, int lp_category, int lp_index) {
    int auto551DE330_ae;
    int auto551DE330_ai;
    // Variable Declarations
    string lv_string;
    int lv_a;
    int lv_b;
    // Variable Initialization
    lv_string = IntToString(lp_integerString);
    // Implementation
    auto551DE330_ae = (lp_index + 6);
    auto551DE330_ai = 1;
    lv_a = lp_index;
    for ( ; ( (auto551DE330_ai >= 0 && lv_a <= auto551DE330_ae) || (auto551DE330_ai <= 0 && lv_a >= auto551DE330_ae) ) ; lv_a += auto551DE330_ai ) {
        lv_b += 1;
        gv_rewardState[lp_player][lp_category][lv_a] = StringToInt(StringSub(lv_string, lv_b, lv_b));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetRewardState
//--------------------------------------------------------------------------------------------------
string gf_GetRewardState (int lp_player, int lp_category, int lp_index) {
    int autoE29A0069_ae;
    int autoE29A0069_ai;
    // Variable Declarations
    int lv_a;
    string lv_value;
    // Variable Initialization
    lv_value = "";
    // Implementation
    autoE29A0069_ae = (lp_index + 6);
    autoE29A0069_ai = 1;
    lv_a = lp_index;
    for ( ; ( (autoE29A0069_ai >= 0 && lv_a <= autoE29A0069_ae) || (autoE29A0069_ai <= 0 && lv_a >= autoE29A0069_ae) ) ; lv_a += autoE29A0069_ai ) {
        lv_value = (lv_value + IntToString(gv_rewardState[lp_player][lp_category][lv_a]));
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DeactivateConflictingRewards
//--------------------------------------------------------------------------------------------------
void gf_DeactivateConflictingRewards (int lp_player, int lp_category, int lp_index) {
    int auto86543E63_ae;
    int auto86543E63_ai;
    int autoF1A7A559_ae;
    int autoF1A7A559_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    if ((lp_category == 1)) {
        auto86543E63_ae = gv_rewardItems;
        auto86543E63_ai = 1;
        lv_a = 1;
        for ( ; ( (auto86543E63_ai >= 0 && lv_a <= auto86543E63_ae) || (auto86543E63_ai <= 0 && lv_a >= auto86543E63_ae) ) ; lv_a += auto86543E63_ai ) {
            if ((lv_a != lp_index) && (gf_GetUnlockedStatus(gv_rewardState[lp_player][lp_category][lv_a]) == 3)) {
                gv_rewardState[lp_player][lp_category][lv_a] = gf_GetUnlockedVariable(2);
            }
            else {
            }
        }
    }
    else if ((lp_category == 2) && (lp_index != 9)) {
        autoF1A7A559_ae = gv_rewardItems;
        autoF1A7A559_ai = 1;
        lv_a = 1;
        for ( ; ( (autoF1A7A559_ai >= 0 && lv_a <= autoF1A7A559_ae) || (autoF1A7A559_ai <= 0 && lv_a >= autoF1A7A559_ae) ) ; lv_a += autoF1A7A559_ai ) {
            if ((lv_a != lp_index) && (lv_a != 9) && (gf_GetUnlockedStatus(gv_rewardState[lp_player][lp_category][lv_a]) == 3)) {
                gv_rewardState[lp_player][lp_category][lv_a] = gf_GetUnlockedVariable(2);
            }
            else {
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ValidReward
//--------------------------------------------------------------------------------------------------
bool gf_ValidReward (string lp_entry, string lp_section, int lp_index) {
    // Variable Declarations
    string lv_daString;
    int lv_key;
    int lv_keyValue;
    int lv_flood;
    int lv_pL;
    int lv_supposedLength;
    bool lv_value;
    // Variable Initialization
    lv_daString = "";
    // Implementation
    if ((BankKeyExists(BankLastCreated(), lp_section, lp_entry) == true) && (BankKeyExists(BankLastCreated(), "stats", "IbRt8q8") == true) && (BankKeyExists(BankLastCreated(), "stats", "LoBfl21") == true)) {
        lv_daString = BankValueGetAsString(BankLastCreated(), lp_section, lp_entry);
        lv_key = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), "stats", "IbRt8q8"), ((gv_trolzl12 + 1) - lp_index), ((gv_trolzl12 + 1) - lp_index)));
        lv_keyValue = StringToInt(StringSub(lv_daString, lv_key, lv_key));
        lv_flood = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), "stats", "LoBfl21"), lp_index, lp_index));
        lv_pL = StringLength(IntToString(gf_DecryptInt(lv_daString, lv_key, lv_flood)));
        lv_supposedLength = (lv_key + ((lv_flood * 3) + (lv_pL * lv_keyValue)));
        if ((StringLength(lv_daString) == lv_supposedLength)) {
            lv_value = true;
        }
        else {
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetActiveTitleIndex
//--------------------------------------------------------------------------------------------------
int gf_GetActiveTitleIndex (int lp_player) {
    int auto9B3EFAFB_ae;
    int auto9B3EFAFB_ai;
    // Variable Declarations
    int lv_a;
    int lv_value;
    // Variable Initialization
    lv_value = -1;
    // Implementation
    auto9B3EFAFB_ae = gv_rewardItems;
    auto9B3EFAFB_ai = 1;
    lv_a = 1;
    for ( ; ( (auto9B3EFAFB_ai >= 0 && lv_a <= auto9B3EFAFB_ae) || (auto9B3EFAFB_ai <= 0 && lv_a >= auto9B3EFAFB_ae) ) ; lv_a += auto9B3EFAFB_ai ) {
        if (((gv_rewardState[lp_player][1][lv_a] == 3) || (gv_rewardState[lp_player][1][lv_a] == 6) || (gv_rewardState[lp_player][1][lv_a] == 9))) {
            lv_value = lv_a;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RequirementCompleted
//--------------------------------------------------------------------------------------------------
bool gf_RequirementCompleted (int lp_player, int lp_category, int lp_index) {
    // Variable Declarations
    bool lv_value;
    // Variable Initialization
    // Implementation
    if (((StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == "2") || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == "5") || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == "8") || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == "3") || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == "6") || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == "9"))) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnlockRequirement
//--------------------------------------------------------------------------------------------------
void gf_UnlockRequirement (int lp_player, int lp_category, int lp_index) {
    int autoA9306325_val;
    // Variable Declarations
    int lv_a;
    int lv_b;
    // Variable Initialization
    // Implementation
    if (gv_cheated){
        return;
    }
    if ((gv_acclvl[lp_player] >= gv_rewardLevelRequirement)) {
        autoA9306325_val = lp_category;
        if (autoA9306325_val == 1) {
            if ((lp_index == 9) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/D1B4F09A"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 10) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/0BD31747"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 11) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/F780EFA3"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 12) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/3FAD147D"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 13) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/1A5931EF"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 14) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/C0A25FA8"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 15) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/DC58A046"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 16) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/35AC1F16"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 17) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/92AF42D0"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 18) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/6BD1C0F8"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 19) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/DB876DE8"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 20) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/E14CC6DE"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 21) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/6CA08BF6"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 22) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/CFF94D14"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 23) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/FE276EB4"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 24) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/5950B340"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 25) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/FE40E8A7"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 26) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/5E176C58"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 27) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/47FF1549"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 28) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/52B8C808"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
        }
        else if (autoA9306325_val == 2) {
            if ((lp_index == 2) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/4B15329E"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 5) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/564012C7"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 6) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/C610F64B"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 8) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/F986AF0A"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 9) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/657C0561"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 27) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/E0438E7C"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 28) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/4DB22FFA"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
        }
        else if (autoA9306325_val == 3) {
            if ((lp_index == 2) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/8C47F615"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 3) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/1D771890"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 4) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/4A9E74DC"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
            else if ((lp_index == 5) && (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                gf_RequirementAchieved(StringExternal("Param/Value/12B1BA62"), SoundLink("UI_Achievement", -1), lp_category, lp_index, lp_player);
            }
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RequirementAchieved
//--------------------------------------------------------------------------------------------------
void gf_RequirementAchieved (text lp_text, soundlink lp_sound, int lp_category, int lp_index, int lp_player) {
    int autoEC338A63_val;
    // Implementation
    gv_requirementString[lp_category][lp_player] = StringReplace(gv_requirementString[lp_category][lp_player], IntToString(gf_GetUnlockedVariable(RandomInt(2, 3))), lp_index, lp_index);
    TextExpressionSetToken("Param/Expression/733827AC", "A", StringExternal("Param/Value/565BA192"));
    TextExpressionSetToken("Param/Expression/733827AC", "B", lp_text);
    TextExpressionSetToken("Param/Expression/733827AC", "C", StringExternal("Param/Value/B1C6F5CB"));
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/733827AC"));
    SoundPlay(lp_sound, PlayerGroupSingle(lp_player), 100.0, 0.0);
    BankLoad("nostrobskalufs", lp_player);
    autoEC338A63_val = lp_category;
    if (autoEC338A63_val == 1) {
        gf_BankSaveEncryptedString("tKlz8mi", "stats", gv_requirementString[lp_category][lp_player], lp_player);
    }
    else if (autoEC338A63_val == 2) {
        gf_BankSaveEncryptedString("BuGr21z", "stats", gv_requirementString[lp_category][lp_player], lp_player);
    }
    else if (autoEC338A63_val == 3) {
        gf_BankSaveEncryptedString("K128saz", "stats", gv_requirementString[lp_category][lp_player], lp_player);
    }
    else {
    }
    BankSave(BankLastCreated());
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializeQuest
//--------------------------------------------------------------------------------------------------
void gf_InitializeQuest (int lp_questIndex) {
    int autoEFF31F67_val;
    int auto546F4555_ae;
    int auto546F4555_ai;
    // Variable Declarations
    int lv_a;
    int lv_r;
    int lv_b;
    int lv_failsafe;
    int lv_end;
    // Variable Initialization
    lv_b = lp_questIndex;
    // Implementation
    if ((gv_questActive == false)) {
        while ((lv_b == 0)) {
            if ((lv_failsafe < (gv_questAmount * 10))) {
                lv_b = RandomInt(1, gv_questAmount);
            }
            else {
                if (lv_b >= gv_questAmount) {
                    lv_b = 1;
                }
                else {
                    lv_b = lv_b + 1;
                }
                lv_end += 1;
            }
            lv_failsafe += 1;
            if ((((lv_b == 14) && (gv_activeTeams > 2)) || ((lv_b == 15) && (gv_activeTeams >= PlayerGroupCount(PlayerGroupActive()))))) {
                gv_questCompleted[lv_b] = true;
                lv_b = 0;
            }
            else {
            }
            if (((lv_b == 14)) && (GameGetMissionTime() < 600.0)) {
                lv_b = 0;
            }
            else {
            }
            if ((gv_questCompleted[lv_b] == true)) {
                lv_b = 0;
            }
            else {
            }
            if ((lv_end > gv_questAmount)) {
                break;
            }
            else {
            }
        }
        autoEFF31F67_val = lv_b;
        if (autoEFF31F67_val == 0) {
            auto546F4555_ae = gv_questAmount;
            auto546F4555_ai = 1;
            lv_a = 1;
            for ( ; ( (auto546F4555_ai >= 0 && lv_a <= auto546F4555_ae) || (auto546F4555_ai <= 0 && lv_a >= auto546F4555_ae) ) ; lv_a += auto546F4555_ai ) {
                gv_questCompleted[lv_a] = false;
            }
            TimerStart(gv_questDelayTimer, 5.0, false, c_timeGame);
        }
        else if (autoEFF31F67_val == 1) {
            gf_ChiefInit();
        }
        else if (autoEFF31F67_val == 2) {
            gf_TreasureInit();
        }
        else if (autoEFF31F67_val == 3) {
            gf_RetrievalInit();
        }
        else if (autoEFF31F67_val == 4) {
            gf_PlantInit();
        }
        else if (autoEFF31F67_val == 5) {
            gf_FeastInit();
        }
        else if (autoEFF31F67_val == 6) {
            gf_GladiatorInit();
        }
        else if (autoEFF31F67_val == 7) {
            gf_DeadnightinitPhase1();
        }
        else if (autoEFF31F67_val == 8) {
            gf_WarlordInit();
        }
        else if (autoEFF31F67_val == 9) {
            gf_TruffleInit();
        }
        else if (autoEFF31F67_val == 10) {
            gf_WinterInitialize();
        }
        else if (autoEFF31F67_val == 11) {
            gf_PiratesInit();
        }
        else if (autoEFF31F67_val == 12) {
            gf_WizardInit();
        }
        else if (autoEFF31F67_val == 13) {
            gf_BuilderInit();
        }
        else if (autoEFF31F67_val == 14) {
            gf_ExileInit();
        }
        else if (autoEFF31F67_val == 15) {
            gf_VeilInit();
        }
        else if (autoEFF31F67_val == 16) {
            gf_ExpeditionInit();
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetNextQuestDelay
//--------------------------------------------------------------------------------------------------
fixed gf_GetNextQuestDelay () {
    // Variable Declarations
    fixed lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_activeTeams > 2)) {
        lv_value = (RandomFixed(120.0, 180.0) - libNtve_gf_ArithmeticRealClamp((gv_gameDuration / 45.0), 0.0, 60.0));
    }
    else if (true) {
        lv_value = (RandomFixed(180.0, 240.0) - libNtve_gf_ArithmeticRealClamp((gv_gameDuration / 45.0), 0.0, 60.0));
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: QuestFinishEvents
//--------------------------------------------------------------------------------------------------
void gf_QuestFinishEvents (playergroup lp_questWinners, playergroup lp_questLosers) {
    // Implementation
    if ((PlayerGroupCount(lp_questWinners) > 0)) {
        SoundPlay(SoundLink("UI_ObjectiveComplete", -1), lp_questWinners, 100.0, 0.0);
        PlayerGroupLoopBegin(lp_questWinners);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                gf_AddExperience(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, 200.0);
                gf_GladiatorsStrength(PlayerGroupLoopCurrent());
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    if ((PlayerGroupCount(lp_questLosers) > 0)) {
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), lp_questLosers, 100.0, 0.0);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetBossSpawnLocation
//--------------------------------------------------------------------------------------------------
point gf_GetBossSpawnLocation () {
    // Variable Declarations
    point lv_centerofKobolds;
    point lv_spawnLocation;
    int lv_failsafe;
    // Variable Initialization
    // Implementation
    lv_centerofKobolds = gf_WeightedCenterofKobolds();
    while ((lv_spawnLocation == null)) {
        lv_spawnLocation = RegionRandomPoint(RegionCircle(lv_centerofKobolds, 32.0));
        lv_failsafe += 1;
        if (((PointPathingPassable(lv_spawnLocation) == false) || (gf_PathableMaximum(UnitGroupClosestToPoint(UnitGroup("Kobold", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_spawnLocation), lv_spawnLocation, 200) == false) || (UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionCircle(lv_spawnLocation, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0))) {
            if ((lv_failsafe < 500)) {
                lv_spawnLocation = null;
            }
            else {
                lv_spawnLocation = PointFromId(2850);
            }
        }
        else {
        }
    }
    return lv_spawnLocation;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ChiefInit
//--------------------------------------------------------------------------------------------------
void gf_ChiefInit () {
    // Variable Declarations
    int lv_chieftainPlayer;
    unitgroup lv_team1Kobolds;
    unitgroup lv_team2Kobolds;
    point lv_team1Point;
    point lv_team2Point;
    point lv_spawnLocation;
    int lv_failsafe;
    fixed lv_a;
    // Variable Initialization
    lv_chieftainPlayer = 15;
    lv_team1Kobolds = UnitGroupEmpty();
    lv_team2Kobolds = UnitGroupEmpty();
    lv_spawnLocation = gf_GetBossSpawnLocation();
    // Implementation
    gv_questText = StringExternal("Param/Value/E3601739");
    TimerStart(gv_questTimer, 210.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/2772D309"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 1;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    gf_SetScaledStats("MurlocChieftain", lv_chieftainPlayer);
    UnitCreate(1, "MurlocChieftain", 0, lv_chieftainPlayer, lv_spawnLocation, 270.0);
    gv_murlocChief = UnitLastCreated();
    if ((RandomInt(0, 1) == 1)) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_TextureSelectByID("MurlocOrange"));
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", lv_spawnLocation, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
    gv_chiefPing = PingLastCreated();
    PingSetUnit(gv_chiefPing, gv_murlocChief);
    PingSetScale(gv_chiefPing, 0.5);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_murlocChief, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ChiefDeath
//--------------------------------------------------------------------------------------------------
void gf_ChiefDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    int autoBE8DA324_ae;
    int autoBE8DA324_ai;
    // Variable Declarations
    int lv_i;
    int lv_a;
    int lv_b;
    point lv_p;
    int lv_winningTeam;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_killingUnit);
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Implementation
    gf_SlayerProgress(UnitGetOwner(lp_killingUnit), lp_dyingUnit);
    lv_winningTeam = gv_playerData[lv_i].lv_team;
    lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
    lv_p = UnitGetPosition(lp_dyingUnit);
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[1] = true;
    gv_murlocChief = null;
    TimerPause(gv_questTimer, true);
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_chiefPing);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_killingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_killingUnit), false))) + (StringExternal("Param/Value/D9E8C204") + (gf_GetTribeTextOfTeam(gv_playerData[lv_i].lv_team) + StringExternal("Param/Value/99D259FF")))));
    gf_CreateLoot("MurlocDoomhammer", lv_p, 0.0, false, 100, 0);
    gf_CreateLoot("MurlocSkull", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("AncientArtifactFragment", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("IronOre", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("RadiantGem", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("Shadowstone", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("Beer", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("LambentSunflower", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("SpicyHerbs", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("RoastedPheasantWithBerrySauce", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("BeerBraisedPheasant", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("ScrollofTransmutation", lv_p, 2.0, true, 100, 0);
    autoBE8DA324_ae = RandomInt(2, 3);
    autoBE8DA324_ai = 1;
    lv_a = 1;
    for ( ; ( (autoBE8DA324_ai >= 0 && lv_a <= autoBE8DA324_ae) || (autoBE8DA324_ai <= 0 && lv_a >= autoBE8DA324_ae) ) ; lv_a += autoBE8DA324_ai ) {
        gf_CreateLoot("GoldPurse", lv_p, 2.0, true, 100, RandomInt(20, 30));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TreasureInit
//--------------------------------------------------------------------------------------------------
void gf_TreasureInit () {
    int auto22E3A2D9_ae;
    int auto22E3A2D9_ai;
    // Variable Declarations
    int lv_a;
    unitgroup lv_kobolds;
    int lv_b;
    region lv_region;
    point lv_temp;
    // Variable Initialization
    lv_kobolds = UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_b = UnitGroupCount(lv_kobolds, c_unitCountAlive);
    lv_region = RegionCircle(gf_WeightedCenterofKobolds(), 40.0);
    // Implementation
    gv_questText = StringExternal("Param/Value/7033EBB2");
    TimerStart(gv_questTimer, 240.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/D2EA8FD7"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 2;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
    auto22E3A2D9_ae = (2 + (lv_b / 3));
    auto22E3A2D9_ai = 1;
    lv_a = 1;
    for ( ; ( (auto22E3A2D9_ai >= 0 && lv_a <= auto22E3A2D9_ae) || (auto22E3A2D9_ai <= 0 && lv_a >= auto22E3A2D9_ae) ) ; lv_a += auto22E3A2D9_ai ) {
        lv_temp = gf_RandomPathablePoint(lv_region);
        UnitCreate(1, "TreasureChest", 0, 0, lv_temp, RandomFixed(230.0, 310.0));
        UnitGroupAdd(gv_treasureChests, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "GoblinLoot", UnitLastCreated(), 1);
        UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
        UnitSetCustomValue(UnitLastCreated(), 1, IntToFixed(lv_a));
        gv_treasureChest[lv_a] = UnitLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", lv_temp, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_treasurePing[lv_a] = PingLastCreated();
        PingSetUnit(gv_treasurePing[lv_a], UnitLastCreated());
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TreasureSpawnLoot
//--------------------------------------------------------------------------------------------------
void gf_TreasureSpawnLoot (point lp_p) {
    int auto3615413E_val;
    int auto8E4C6E33_val;
    int auto814C0F43_val;
    // Variable Declarations
    int lv_random;
    string lv_type;
    // Variable Initialization
    // Implementation
    if ((UnitGroupCount(gv_treasureChests, c_unitCountAlive) == 0)) {
        lv_random = 1;
    }
    else {
        lv_random = RandomInt(2, 7);
    }
    auto3615413E_val = lv_random;
    if (auto3615413E_val == 1) {
        lv_type = "SpikedShadowstoneScutum";
    }
    else if (auto3615413E_val == 2) {
        lv_type = "EnigmaticStaff";
    }
    else if (auto3615413E_val == 3) {
        lv_type = "MysticsTribalShield";
    }
    else if (auto3615413E_val == 4) {
        lv_type = "GoldenPolearm";
    }
    else if (auto3615413E_val == 5) {
        lv_type = "HeavyIronBreastplate";
    }
    else if (auto3615413E_val == 6) {
        lv_type = "HeavyTowerShield";
    }
    else if (auto3615413E_val == 7) {
        lv_type = "CelestialOrb";
    }
    else {
    }
    gf_CreateLoot(lv_type, lp_p, 1.0, true, 100, 0);
    lv_random = RandomInt(1, 3);
    auto8E4C6E33_val = lv_random;
    if (auto8E4C6E33_val == 1) {
        lv_type = "RadiantGem";
    }
    else if (auto8E4C6E33_val == 2) {
        lv_type = "Shadowstone";
    }
    else if (auto8E4C6E33_val == 3) {
        lv_type = "IronOre";
    }
    else {
    }
    gf_CreateLoot(lv_type, lp_p, 1.0, true, 100, 0);
    lv_random = RandomInt(1, 5);
    auto814C0F43_val = lv_random;
    if (auto814C0F43_val == 1) {
        lv_type = "LambentSunflower";
    }
    else if (auto814C0F43_val == 2) {
        lv_type = "HandfulofBerries";
    }
    else if (auto814C0F43_val == 3) {
        lv_type = "Sageberry";
    }
    else if (auto814C0F43_val == 4) {
        lv_type = "SpicyHerbs";
    }
    else if (auto814C0F43_val == 5) {
        lv_type = "Beer";
    }
    else {
    }
    gf_CreateLoot(lv_type, lp_p, 1.0, true, 100, 0);
    gf_CreateLoot("ScrollofTransmutation", lp_p, 1.0, true, 50, 0);
    gf_CreateLoot("GoldPurse", lp_p, 1.0, true, 100, RandomInt(20, 30));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TreasureEndPrem
//--------------------------------------------------------------------------------------------------
void gf_TreasureEndPrem () {
    // Implementation
    if ((UnitGroupCount(gv_treasureChests, c_unitCountAlive) == 0)) {
        gv_questIndexActive = 0;
        gv_questActive = false;
        gv_questCompleted[2] = true;
        TimerPause(gv_questTimer, true);
        ObjectiveDestroy(gv_questObjective);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8AB6FBF0"));
        SoundPlay(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupActive(), 100.0, 0.0);
        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RetrievalInit
//--------------------------------------------------------------------------------------------------
void gf_RetrievalInit () {
    // Variable Declarations
    point lv_centerofKobolds;
    point lv_spawnLocation;
    point lv_spawnLocation2;
    int lv_failsafe;
    fixed lv_angle;
    // Variable Initialization
    lv_angle = libNtve_gf_RandomAngle();
    // Implementation
    gv_questText = StringExternal("Param/Value/8DE9FB6E");
    TimerStart(gv_questTimer, 240.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/9B5F893B"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 3;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    lv_centerofKobolds = gf_WeightedCenterofKobolds();
    while ((lv_spawnLocation == null)) {
        lv_spawnLocation = PointWithOffsetPolar(lv_centerofKobolds, RandomFixed(0.0, 88.0), (lv_angle + 0.0));
        lv_failsafe += 1;
        if (((PointPathingPassable(lv_spawnLocation) == false) || (PointPathingIsConnected(lv_spawnLocation, gv_center) == false))) {
            if ((lv_failsafe < 200)) {
                lv_spawnLocation = null;
            }
            else {
                lv_spawnLocation = PointFromId(709);
            }
        }
        else {
        }
    }
    UnitCreate(1, "CrabShipment", 0, 0, lv_spawnLocation, libNtve_gf_RandomAngle());
    gv_shipment = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", lv_spawnLocation, ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 0.0, 270.0);
    gv_shipmentPing = PingLastCreated();
    PingSetUnit(gv_shipmentPing, gv_shipment);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_shipment, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    while ((lv_spawnLocation2 == null)) {
        lv_spawnLocation2 = PointWithOffsetPolar(lv_centerofKobolds, RandomFixed(0.0, 88.0), (lv_angle + 180.0));
        lv_failsafe += 1;
        if (((PointPathingPassable(lv_spawnLocation2) == false) || (PointPathingIsConnected(lv_spawnLocation, lv_spawnLocation2) == false) || (DistanceBetweenPoints(lv_spawnLocation, lv_spawnLocation2) < 56.0))) {
            if ((lv_failsafe < 200)) {
                lv_spawnLocation2 = null;
            }
            else {
                lv_spawnLocation2 = PointFromId(613);
            }
        }
        else {
        }
    }
    UnitCreate(1, "CravenTheFisherman", 0, 0, lv_spawnLocation2, RandomFixed(240.0, 300.0));
    gv_merchant = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", lv_spawnLocation2, ColorWithAlpha(1.57, 67.84, 100.00, 0.00), 0.0, 270.0);
    gv_merchantPing = PingLastCreated();
    PingSetUnit(gv_merchantPing, gv_merchant);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_merchant, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RetrieveRewards
//--------------------------------------------------------------------------------------------------
void gf_RetrieveRewards (point lp_location) {
    int auto859AC0D1_val;
    int auto8A5F0917_val;
    int auto2E6CDBDA_ae;
    int auto2E6CDBDA_ai;
    // Variable Declarations
    int lv_a;
    int lv_random;
    string lv_type;
    // Variable Initialization
    // Implementation
    gf_CreateLoot("CravensFishSticker", lp_location, 0.0, false, 100, 0);
    lv_random = RandomInt(1, 3);
    auto859AC0D1_val = lv_random;
    if (auto859AC0D1_val == 1) {
        lv_type = "RadiantGem";
    }
    else if (auto859AC0D1_val == 2) {
        lv_type = "Shadowstone";
    }
    else if (auto859AC0D1_val == 3) {
        lv_type = "IronOre";
    }
    else {
    }
    gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
    lv_random = RandomInt(1, 3);
    auto8A5F0917_val = lv_random;
    if (auto8A5F0917_val == 1) {
        lv_type = "LambentSunflower";
    }
    else if (auto8A5F0917_val == 2) {
        lv_type = "HandfulofBerries";
    }
    else if (auto8A5F0917_val == 3) {
        lv_type = "Beer";
    }
    else {
    }
    gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
    lv_type = "SpicedLambFeast";
    gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
    auto2E6CDBDA_ae = RandomInt(2, 3);
    auto2E6CDBDA_ai = 1;
    lv_a = 1;
    for ( ; ( (auto2E6CDBDA_ai >= 0 && lv_a <= auto2E6CDBDA_ae) || (auto2E6CDBDA_ai <= 0 && lv_a >= auto2E6CDBDA_ae) ) ; lv_a += auto2E6CDBDA_ai ) {
        gf_CreateLoot("GoldPurse", lp_location, 1.5, true, 100, RandomInt(20, 30));
    }
    gf_CreateLoot("ScrollofTransmutation", lp_location, 1.5, true, 100, 0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PlantInit
//--------------------------------------------------------------------------------------------------
void gf_PlantInit () {
    int autoE06421EB_ae;
    int autoE06421EB_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    gv_questText = StringExternal("Param/Value/F6F0B129");
    TimerStart(gv_questTimer, 240.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/40A8E481"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 4;
    gv_grownTreesLeadingTeam = 0;
    autoE06421EB_ae = gv_activeTeams;
    autoE06421EB_ai = 1;
    lv_a = 1;
    for ( ; ( (autoE06421EB_ai >= 0 && lv_a <= autoE06421EB_ae) || (autoE06421EB_ai <= 0 && lv_a >= autoE06421EB_ae) ) ; lv_a += autoE06421EB_ai ) {
        gv_grownTreesTeam[lv_a] = 0;
    }
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeastInit
//--------------------------------------------------------------------------------------------------
void gf_FeastInit () {
    int autoD04A797A_ae;
    int autoD04A797A_ai;
    // Variable Declarations
    int lv_b;
    int lv_chieftainPlayer;
    point lv_spawnLocation;
    int lv_failsafe;
    fixed lv_a;
    // Variable Initialization
    lv_chieftainPlayer = 11;
    lv_spawnLocation = gf_GetBossSpawnLocation();
    // Implementation
    autoD04A797A_ae = gv_activeTeams;
    autoD04A797A_ai = 1;
    lv_b = 1;
    for ( ; ( (autoD04A797A_ai >= 0 && lv_b <= autoD04A797A_ae) || (autoD04A797A_ai <= 0 && lv_b >= autoD04A797A_ae) ) ; lv_b += autoD04A797A_ai ) {
        gv_feastCooked[lv_b][1] = false;
        gv_feastCooked[lv_b][2] = false;
        gv_feastCooked[lv_b][3] = false;
    }
    gv_questText = StringExternal("Param/Value/7D36A95A");
    TimerStart(gv_questTimer, 240.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/838E1F33"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 5;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    UnitCreate(1, "NiziliaTheGastronomist", 0, 0, lv_spawnLocation, 270.0);
    gv_feastChef = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", lv_spawnLocation, ColorWithAlpha(50.20, 100.00, 50.20, 0.00), 0.0, 270.0);
    gv_feastChefPing = PingLastCreated();
    PingSetUnit(gv_feastChefPing, gv_feastChef);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_feastChef, true, PlayerGroupLoopCurrent());
        gv_aIData[PlayerGroupLoopCurrent()].lv_weightedPOI = UnitGetPosition(gv_feastChef);
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeastCriteria
//--------------------------------------------------------------------------------------------------
void gf_FeastCriteria (unit lp_cooker, string lp_foodType) {
    string autoF65F148F_val;
    // Variable Declarations
    int lv_i;
    int lv_t;
    point lv_p;
    int lv_winningTeam;
    int lv_losingTeam;
    int lv_a;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_cooker);
    lv_t = gv_playerData[lv_i].lv_team;
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Implementation
    if ((gv_questIndexActive == 5) && (UnitHasBehavior(lp_cooker, "TheGastronomistsTutelage") == true)) {
        lv_p = UnitGetPosition(gv_feastChef);
        autoF65F148F_val = lp_foodType;
        if (autoF65F148F_val == "SpicedLambFeast") {
            if ((gv_feastCooked[lv_t][1] == false)) {
                gv_feastCooked[lv_t][1] = true;
                SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
        }
        else if (autoF65F148F_val == "GrilledWolfEntrecote") {
            if ((gv_feastCooked[lv_t][2] == false)) {
                gv_feastCooked[lv_t][2] = true;
                SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
        }
        else if (autoF65F148F_val == "BeerBraisedPheasant") {
            if ((gv_feastCooked[lv_t][3] == false)) {
                gv_feastCooked[lv_t][3] = true;
                SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
        }
        else {
        }
        if ((gv_feastCooked[lv_t][1] == true) && (gv_feastCooked[lv_t][2] == true) && (gv_feastCooked[lv_t][3] == true)) {
            lv_questWinners = gv_teamData[lv_t].lv_members;
            libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
            lv_winningTeam = lv_t;
            gv_lambSirloinEnabled[lv_winningTeam] = true;
            if ((lv_winningTeam == 1)) {
                lv_losingTeam = 2;
            }
            else {
                lv_losingTeam = 1;
            }
            TextExpressionSetToken("Param/Expression/E2947E79", "B", StringExternal("Param/Value/CA72D19B"));
            TextExpressionSetToken("Param/Expression/E2947E79", "C", gf_GetTribeTextOfTeam(lv_winningTeam));
            TextExpressionSetToken("Param/Expression/E2947E79", "D", StringExternal("Param/Value/736AA932"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/E2947E79"));
            gv_questIndexActive = 0;
            gv_questActive = false;
            gv_questCompleted[5] = true;
            TimerPause(gv_questTimer, true);
            ObjectiveDestroy(gv_questObjective);
            PingDestroy(gv_feastChefPing);
            UnitRemove(gv_feastChef);
            gf_CreateLoot("MagnificentChefsHat", lv_p, 0.0, false, 100, 0);
            gf_CreateLoot("ScrollofTransmutation", lv_p, 1.5, true, 100, 0);
            gf_CreateLoot("GoldPurse", lv_p, 1.5, true, 100, RandomInt(20, 30));
            gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
            PlayerGroupLoopBegin(lv_questWinners);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gv_skillPointsPlayer[PlayerGroupLoopCurrent()] += 5;
                gf_IncreaseSkillType(PlayerGroupLoopCurrent(), 3, 5);
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/E2B40797"));
                if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                    UnitBehaviorAdd(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "SmokedLambSirloinReq", gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, 1);
                }
                else {
                }
            }
            PlayerGroupLoopEnd();
            TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeastProgressText
//--------------------------------------------------------------------------------------------------
text gf_FeastProgressText () {
    int auto1622C7A5_ae;
    int auto1622C7A5_ai;
    // Variable Declarations
    int lv_a;
    text lv_value;
    // Variable Initialization
    // Implementation
    lv_value = (lv_value + StringExternal("Param/Value/66808C78"));
    lv_value = (lv_value + StringExternal("Param/Value/2D180BCC"));
    lv_value = (lv_value + StringExternal("Param/Value/BF6EDD86"));
    auto1622C7A5_ae = gv_activeTeams;
    auto1622C7A5_ai = 1;
    lv_a = 1;
    for ( ; ( (auto1622C7A5_ai >= 0 && lv_a <= auto1622C7A5_ae) || (auto1622C7A5_ai <= 0 && lv_a >= auto1622C7A5_ae) ) ; lv_a += auto1622C7A5_ai ) {
        if ((gv_teamData[lv_a].lv_allDead == false)) {
            TextExpressionSetToken("Param/Expression/EB3A9038", "A", lv_value);
            TextExpressionSetToken("Param/Expression/EB3A9038", "B", gf_GetTribeTextOfTeam(lv_a));
            TextExpressionSetToken("Param/Expression/EB3A9038", "C", StringExternal("Param/Value/0CDBA55A"));
            lv_value = TextExpressionAssemble("Param/Expression/EB3A9038");
            if ((gv_feastCooked[lv_a][1] == true)) {
                lv_value = (lv_value + StringExternal("Param/Value/ABCB1A5F"));
            }
            else {
                lv_value = (lv_value + StringExternal("Param/Value/8AA212CF"));
            }
            if ((gv_feastCooked[lv_a][2] == true)) {
                lv_value = (lv_value + StringExternal("Param/Value/6B1578E3"));
            }
            else {
                lv_value = (lv_value + StringExternal("Param/Value/EA324975"));
            }
            if ((gv_feastCooked[lv_a][3] == true)) {
                lv_value = (lv_value + StringExternal("Param/Value/7A9AE1F1"));
            }
            else {
                lv_value = (lv_value + StringExternal("Param/Value/09ADC42E"));
            }
            lv_value = (lv_value + StringExternal("Param/Value/147CB172"));
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GladiatorInit
//--------------------------------------------------------------------------------------------------
void gf_GladiatorInit () {
    // Variable Declarations
    point lv_centerofKobolds;
    unitgroup lv_tribeGroup;
    int lv_a;
    point lv_challengeZone;
    int lv_failsafe;
    fixed lv_duration;
    point lv_spawnLocation;
    point lv_spawnLocation2;
    fixed lv_angle;
    // Variable Initialization
    lv_tribeGroup = UnitGroupEmpty();
    lv_duration = 150.0;
    lv_angle = libNtve_gf_RandomAngle();
    // Implementation
    gv_questText = StringExternal("Param/Value/5739FEEC");
    TimerStart(gv_questTimer, lv_duration, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/4FF82D64"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 6;
    gv_gladiatorPhase = 1;
    gv_challenger[1] = null;
    gv_challenger[2] = null;
    gv_gladiatorStart[1] = PointFromId(1794);
    gv_gladiatorStart[2] = PointFromId(2434);
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    lv_centerofKobolds = gf_WeightedCenterofKobolds();
    while ((lv_spawnLocation == null)) {
        lv_spawnLocation = PointWithOffsetPolar(lv_centerofKobolds, RandomFixed(0.0, 88.0), (lv_angle + 0.0));
        lv_failsafe += 1;
        if (((PointPathingPassable(lv_spawnLocation) == false) || (PointPathingIsConnected(lv_spawnLocation, gv_center) == false) || (UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionCircle(lv_spawnLocation, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0))) {
            if ((lv_failsafe < 200)) {
                lv_spawnLocation = null;
            }
            else {
                lv_spawnLocation = PointFromId(709);
            }
        }
        else {
        }
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", lv_spawnLocation, ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_zonePing[1] = PingLastCreated();
    UnitCreate(1, "ChallengeBanner", 0, 0, lv_spawnLocation, 270.0);
    UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
    gv_zoneChecker[1] = UnitLastCreated();
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_zoneChecker[1], true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    while ((lv_spawnLocation2 == null)) {
        lv_spawnLocation2 = PointWithOffsetPolar(lv_centerofKobolds, RandomFixed(0.0, 88.0), (lv_angle + 180.0));
        lv_failsafe += 1;
        if (((PointPathingPassable(lv_spawnLocation2) == false) || (PointPathingIsConnected(lv_spawnLocation2, gv_center) == false) || (UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionCircle(lv_spawnLocation2, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0) || (DistanceBetweenPoints(lv_spawnLocation, lv_spawnLocation2) < 32.0))) {
            if ((lv_failsafe < 200)) {
                lv_spawnLocation2 = null;
            }
            else {
                lv_spawnLocation2 = PointFromId(709);
            }
        }
        else {
        }
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", lv_spawnLocation2, ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_zonePing[2] = PingLastCreated();
    UnitCreate(1, "ChallengeBanner", 0, 0, lv_spawnLocation2, 270.0);
    UnitSetCustomValue(UnitLastCreated(), 0, 2.0);
    gv_zoneChecker[2] = UnitLastCreated();
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_zoneChecker[2], true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GladiatorEndPhase2
//--------------------------------------------------------------------------------------------------
trigger auto_gf_GladiatorEndPhase2_Trigger = null;
unit auto_gf_GladiatorEndPhase2_lp_dyingUnit;
unit auto_gf_GladiatorEndPhase2_lp_killingUnit;
void gf_GladiatorEndPhase2 (unit lp_dyingUnit, unit lp_killingUnit) {
    auto_gf_GladiatorEndPhase2_lp_dyingUnit = lp_dyingUnit;
    auto_gf_GladiatorEndPhase2_lp_killingUnit = lp_killingUnit;
    if (auto_gf_GladiatorEndPhase2_Trigger == null) {
        auto_gf_GladiatorEndPhase2_Trigger = TriggerCreate("auto_gf_GladiatorEndPhase2_TriggerFunc");
    }
    TriggerExecute(auto_gf_GladiatorEndPhase2_Trigger, false, false);
}
bool auto_gf_GladiatorEndPhase2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dyingUnit = auto_gf_GladiatorEndPhase2_lp_dyingUnit;
    unit lp_killingUnit = auto_gf_GladiatorEndPhase2_lp_killingUnit;
    int auto8846F2A9_ae;
    int auto8846F2A9_ai;
    int auto91EA56C2_ae;
    int auto91EA56C2_ai;
    // Variable Declarations
    int lv_a;
    int lv_winner;
    int lv_loser;
    text lv_defeatVariation;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    int lv_survivingChallenger;
    int lv_r;
    // Variable Initialization
    lv_winner = gf_GetTeamOfPlayer(UnitGetOwner(lp_killingUnit));
    lv_loser = gf_GetTeamOfPlayer(UnitGetOwner(lp_dyingUnit));
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    lv_r = RandomInt(1, gv_arenaSpectators);
    // Implementation
    lv_questWinners = gv_teamData[lv_winner].lv_members;
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
    if ((gv_acclvl[UnitGetOwner(lp_killingUnit)] >= gv_rewardLevelRequirement)) {
        gv_gladSpree[UnitGetOwner(lp_killingUnit)] += 1;
        if ((gv_gladSpree[UnitGetOwner(lp_killingUnit)] >= 5)) {
            gf_UnlockRequirement(UnitGetOwner(lp_killingUnit), 1, 17);
        }
        else {
        }
    }
    else {
    }
    gv_gladSpree[UnitGetOwner(lp_dyingUnit)] = 0;
    UnitCreate(1, "GarishGladiatorsGarb", c_unitCreateIgnorePlacement, 0, gv_arenaSpectator[lv_r], libNtve_gf_RandomAngle());
    UnitSetHeight(UnitLastCreated(), PointGetHeight(gv_arenaSpectator[lv_r]), 0.0);
    UnitCreateEffectPoint(UnitLastCreated(), "LootFountainEffect", UnitGetPosition(lp_killingUnit));
    TriggerEnable(gt_GladiatorCrowd, false);
    if ((UnitGetPropertyFixed(lp_killingUnit, c_unitPropLifePercent, c_unitPropCurrent) >= 50.0)) {
        lv_defeatVariation = StringExternal("Param/Value/61BD18C8");
        gf_UnlockRequirement(UnitGetOwner(lp_killingUnit), 3, 3);
    }
    else {
        lv_defeatVariation = StringExternal("Param/Value/8F3CA49C");
    }
    TextExpressionSetToken("Param/Expression/0192E7C1", "F", gf_GetTribeTextOfTeam(gf_GetTeamOfPlayer(UnitGetOwner(lp_killingUnit))));
    TextExpressionSetToken("Param/Expression/0192E7C1", "G", StringExternal("Param/Value/AF4EB378"));
    TextExpressionSetToken("Param/Expression/0192E7C1", "A", TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_killingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_killingUnit), false))));
    TextExpressionSetToken("Param/Expression/0192E7C1", "D", StringExternal("Param/Value/07BF6002"));
    TextExpressionSetToken("Param/Expression/0192E7C1", "B", lv_defeatVariation);
    TextExpressionSetToken("Param/Expression/0192E7C1", "C", StringExternal("Param/Value/ECE880E8"));
    TextExpressionSetToken("Param/Expression/0192E7C1", "E", TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_dyingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_dyingUnit), false))));
    TextExpressionSetToken("Param/Expression/0192E7C1", "H", StringExternal("Param/Value/A8E0A9E4"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/0192E7C1"));
    gv_questIndexActive = 0;
    gv_gladiatorPhase = 0;
    gv_questActive = false;
    gv_questCompleted[6] = true;
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    Wait(1.0, c_timeGame);
    if ((gv_gameOver == false)) {
        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
        Wait(3.0, c_timeGame);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), c_messageAreaSubtitle, StringExternal("Param/Value/29C3B119"));
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
        Wait(5.0, c_timeGame);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), c_messageAreaSubtitle, StringExternal("Param/Value/8C859E71"));
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
        Wait(2.0, c_timeGame);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), c_messageAreaSubtitle, StringExternal("Param/Value/09DBDF1E"));
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        auto8846F2A9_ae = gv_challengers;
        auto8846F2A9_ai = 1;
        lv_a = 1;
        for ( ; ( (auto8846F2A9_ai >= 0 && lv_a <= auto8846F2A9_ae) || (auto8846F2A9_ai <= 0 && lv_a >= auto8846F2A9_ae) ) ; lv_a += auto8846F2A9_ai ) {
            if ((lp_killingUnit == gv_challenger[lv_a])) {
                lv_survivingChallenger = lv_a;
            }
            else {
            }
        }
        if ((UnitIsAlive(gv_challenger[lv_survivingChallenger]) == true)) {
            UnitSetPosition(gv_challenger[lv_survivingChallenger], gv_returnPoint[lv_survivingChallenger], false);
            UnitIssueOrder(gv_challenger[lv_survivingChallenger], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitGroupLoopBegin(gv_pets[UnitGetOwner(gv_challenger[lv_survivingChallenger])]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPosition(UnitGroupLoopCurrent(), gv_returnPoint[lv_survivingChallenger], false);
            }
            UnitGroupLoopEnd();
            CameraPan(UnitGetOwner(gv_challenger[lv_survivingChallenger]), gv_returnPoint[lv_survivingChallenger], 0.0, -1, 10.0, false);
        }
        else {
        }
        UnitGroupLoopBegin(UnitGroup("DemonLordJaryx", c_playerAny, gv_regionArena, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), gf_RandomPathablePoint(RegionPlayableMap()), false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F9A3DC7A"));
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("RagingArcaneBeast", c_playerAny, gv_regionArena, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), gf_RandomPathablePoint(RegionPlayableMap()), false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_regionArena, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            VisRevealerDestroy(gv_arenaRevealer[PlayerGroupLoopCurrent()]);
        }
        PlayerGroupLoopEnd();
        auto91EA56C2_ae = gv_challengers;
        auto91EA56C2_ai = 1;
        lv_a = 1;
        for ( ; ( (auto91EA56C2_ai >= 0 && lv_a <= auto91EA56C2_ae) || (auto91EA56C2_ai <= 0 && lv_a >= auto91EA56C2_ae) ) ; lv_a += auto91EA56C2_ai ) {
            gv_challenger[lv_a] = null;
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetTeamChallengerName
//--------------------------------------------------------------------------------------------------
text gf_GetTeamChallengerName (int lp_teamIndex) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_challenger[lp_teamIndex] == null)) {
        lv_value = StringExternal("Param/Value/D68549DD");
    }
    else {
        lv_value = TextWithColor(gf_GetPlayerName(UnitGetOwner(gv_challenger[lp_teamIndex]), 1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_challenger[lp_teamIndex]), false)));
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RemainingDuelist
//--------------------------------------------------------------------------------------------------
unit gf_RemainingDuelist () {
    // Variable Declarations
    unit lv_value;
    // Variable Initialization
    // Implementation
    if ((UnitIsAlive(gv_challenger[1]) == true) && ((UnitIsAlive(gv_challenger[2]) == false) || (gv_challenger[2] == null))) {
        lv_value = gv_challenger[1];
    }
    else if ((UnitIsAlive(gv_challenger[2]) == true) && ((UnitIsAlive(gv_challenger[1]) == false) || (gv_challenger[1] == null))) {
        lv_value = gv_challenger[2];
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: IsGladiator
//--------------------------------------------------------------------------------------------------
bool gf_IsGladiator (unit lp_unit) {
    int auto76D75FD5_ae;
    int auto76D75FD5_ai;
    // Variable Declarations
    int lv_a;
    bool lv_value;
    // Variable Initialization
    // Implementation
    auto76D75FD5_ae = gv_challengers;
    auto76D75FD5_ai = 1;
    lv_a = 1;
    for ( ; ( (auto76D75FD5_ai >= 0 && lv_a <= auto76D75FD5_ae) || (auto76D75FD5_ai <= 0 && lv_a >= auto76D75FD5_ae) ) ; lv_a += auto76D75FD5_ai ) {
        if ((lp_unit == gv_challenger[lv_a])) {
            lv_value = true;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ArenaCheer
//--------------------------------------------------------------------------------------------------
text gf_ArenaCheer () {
    int autoE8794ADC_ae;
    int autoE8794ADC_ai;
    int auto549B2B8F_val;
    // Variable Declarations
    int lv_a;
    int lv_r;
    text lv_value;
    unitgroup lv_crowdFavourites;
    text lv_name;
    // Variable Initialization
    lv_r = RandomInt(1, 30);
    lv_crowdFavourites = UnitGroupEmpty();
    // Implementation
    autoE8794ADC_ae = gv_challengers;
    autoE8794ADC_ai = 1;
    lv_a = 1;
    for ( ; ( (autoE8794ADC_ai >= 0 && lv_a <= autoE8794ADC_ae) || (autoE8794ADC_ai <= 0 && lv_a >= autoE8794ADC_ae) ) ; lv_a += autoE8794ADC_ai ) {
        if ((gv_challenger[lv_a] != null) && gf_RewardCatIndexActive(UnitGetOwner(gv_challenger[lv_a]), 3, 3)) {
            UnitGroupAdd(lv_crowdFavourites, gv_challenger[lv_a]);
        }
        else {
        }
    }
    if ((UnitGroupCount(lv_crowdFavourites, c_unitCountAlive) > 0)) {
        lv_name = gf_GetPlayerName(UnitGetOwner(UnitGroupRandomUnit(lv_crowdFavourites, c_unitCountAlive)), 0);
        lv_r = RandomInt(1, 40);
    }
    else {
    }
    auto549B2B8F_val = lv_r;
    if (auto549B2B8F_val == 1) {
        lv_value = StringExternal("Param/Value/893D4D45");
    }
    else if (auto549B2B8F_val == 2) {
        lv_value = StringExternal("Param/Value/98D1AAFD");
    }
    else if (auto549B2B8F_val == 3) {
        lv_value = StringExternal("Param/Value/F0EFFA0F");
    }
    else if (auto549B2B8F_val == 4) {
        lv_value = StringExternal("Param/Value/E63F7544");
    }
    else if (auto549B2B8F_val == 5) {
        lv_value = StringExternal("Param/Value/F65F77DD");
    }
    else if (auto549B2B8F_val == 6) {
        lv_value = StringExternal("Param/Value/C273F465");
    }
    else if (auto549B2B8F_val == 7) {
        lv_value = StringExternal("Param/Value/2AE36FED");
    }
    else if (auto549B2B8F_val == 8) {
        lv_value = StringExternal("Param/Value/EE415597");
    }
    else if (auto549B2B8F_val == 9) {
        lv_value = StringExternal("Param/Value/1DC5490D");
    }
    else if (auto549B2B8F_val == 10) {
        lv_value = StringExternal("Param/Value/D1F0420F");
    }
    else if (auto549B2B8F_val == 11) {
        lv_value = StringExternal("Param/Value/394E9F38");
    }
    else if (auto549B2B8F_val == 12) {
        lv_value = StringExternal("Param/Value/E0E11CB3");
    }
    else if (auto549B2B8F_val == 13) {
        lv_value = StringExternal("Param/Value/A9EB77D6");
    }
    else if (auto549B2B8F_val == 14) {
        lv_value = StringExternal("Param/Value/544B78C2");
    }
    else if (auto549B2B8F_val == 15) {
        lv_value = StringExternal("Param/Value/87C92897");
    }
    else if (auto549B2B8F_val == 16) {
        lv_value = StringExternal("Param/Value/BB80FF6F");
    }
    else if (auto549B2B8F_val == 17) {
        lv_value = StringExternal("Param/Value/64B25FB6");
    }
    else if (auto549B2B8F_val == 18) {
        lv_value = StringExternal("Param/Value/D4F564C6");
    }
    else if (auto549B2B8F_val == 19) {
        lv_value = StringExternal("Param/Value/A80A76A9");
    }
    else if (auto549B2B8F_val == 20) {
        lv_value = StringExternal("Param/Value/48A3B983");
    }
    else if (auto549B2B8F_val == 21) {
        lv_value = StringExternal("Param/Value/5DF6B1B5");
    }
    else if (auto549B2B8F_val == 22) {
        lv_value = StringExternal("Param/Value/CF18363A");
    }
    else if (auto549B2B8F_val == 23) {
        lv_value = StringExternal("Param/Value/B6B9ED9D");
    }
    else if (auto549B2B8F_val == 24) {
        lv_value = StringExternal("Param/Value/8936A259");
    }
    else if (auto549B2B8F_val == 25) {
        lv_value = StringExternal("Param/Value/F418FDB3");
    }
    else if (auto549B2B8F_val == 26) {
        lv_value = StringExternal("Param/Value/D1D498B7");
    }
    else if (auto549B2B8F_val == 27) {
        lv_value = StringExternal("Param/Value/EF848B37");
    }
    else if (auto549B2B8F_val == 28) {
        lv_value = StringExternal("Param/Value/7C58133D");
    }
    else if (auto549B2B8F_val == 29) {
        lv_value = StringExternal("Param/Value/088B58BC");
    }
    else if (auto549B2B8F_val == 30) {
        lv_value = StringExternal("Param/Value/A8B98DFC");
    }
    else if (auto549B2B8F_val == 31) {
        TextExpressionSetToken("Param/Expression/8443DF94", "A", StringExternal("Param/Value/4F8ED6AB"));
        TextExpressionSetToken("Param/Expression/8443DF94", "B", lv_name);
        TextExpressionSetToken("Param/Expression/8443DF94", "C", StringExternal("Param/Value/E9B0CF4D"));
        lv_value = TextExpressionAssemble("Param/Expression/8443DF94");
    }
    else if (auto549B2B8F_val == 32) {
        TextExpressionSetToken("Param/Expression/5B81F425", "A", StringExternal("Param/Value/5C10F3AD"));
        TextExpressionSetToken("Param/Expression/5B81F425", "B", lv_name);
        TextExpressionSetToken("Param/Expression/5B81F425", "C", StringExternal("Param/Value/73AE6027"));
        lv_value = TextExpressionAssemble("Param/Expression/5B81F425");
    }
    else if (auto549B2B8F_val == 33) {
        TextExpressionSetToken("Param/Expression/24DD1CC8", "A", StringExternal("Param/Value/FA0052A9"));
        TextExpressionSetToken("Param/Expression/24DD1CC8", "B", lv_name);
        TextExpressionSetToken("Param/Expression/24DD1CC8", "C", StringExternal("Param/Value/4C6CF17D"));
        lv_value = TextExpressionAssemble("Param/Expression/24DD1CC8");
    }
    else if (auto549B2B8F_val == 34) {
        TextExpressionSetToken("Param/Expression/16B91108", "A", StringExternal("Param/Value/48311216"));
        TextExpressionSetToken("Param/Expression/16B91108", "B", lv_name);
        TextExpressionSetToken("Param/Expression/16B91108", "C", StringExternal("Param/Value/13B810E8"));
        lv_value = TextExpressionAssemble("Param/Expression/16B91108");
    }
    else if (auto549B2B8F_val == 35) {
        TextExpressionSetToken("Param/Expression/5BE3D340", "A", StringExternal("Param/Value/56B56A46"));
        TextExpressionSetToken("Param/Expression/5BE3D340", "B", lv_name);
        TextExpressionSetToken("Param/Expression/5BE3D340", "C", StringExternal("Param/Value/BCBF4338"));
        lv_value = TextExpressionAssemble("Param/Expression/5BE3D340");
    }
    else if (auto549B2B8F_val == 36) {
        TextExpressionSetToken("Param/Expression/326AF8F3", "A", StringExternal("Param/Value/B4AAED71"));
        TextExpressionSetToken("Param/Expression/326AF8F3", "B", lv_name);
        TextExpressionSetToken("Param/Expression/326AF8F3", "C", StringExternal("Param/Value/E31F45B2"));
        lv_value = TextExpressionAssemble("Param/Expression/326AF8F3");
    }
    else if (auto549B2B8F_val == 37) {
        TextExpressionSetToken("Param/Expression/43C2AC85", "A", StringExternal("Param/Value/41042741"));
        TextExpressionSetToken("Param/Expression/43C2AC85", "B", lv_name);
        TextExpressionSetToken("Param/Expression/43C2AC85", "C", StringExternal("Param/Value/4AECE189"));
        lv_value = TextExpressionAssemble("Param/Expression/43C2AC85");
    }
    else if (auto549B2B8F_val == 38) {
        TextExpressionSetToken("Param/Expression/465A1673", "A", StringExternal("Param/Value/3626A353"));
        TextExpressionSetToken("Param/Expression/465A1673", "B", lv_name);
        TextExpressionSetToken("Param/Expression/465A1673", "C", StringExternal("Param/Value/909E5B4E"));
        lv_value = TextExpressionAssemble("Param/Expression/465A1673");
    }
    else if (auto549B2B8F_val == 39) {
        TextExpressionSetToken("Param/Expression/3A86D0A6", "A", StringExternal("Param/Value/C009A75B"));
        TextExpressionSetToken("Param/Expression/3A86D0A6", "B", lv_name);
        TextExpressionSetToken("Param/Expression/3A86D0A6", "C", StringExternal("Param/Value/B64D6E5C"));
        lv_value = TextExpressionAssemble("Param/Expression/3A86D0A6");
    }
    else if (auto549B2B8F_val == 40) {
        TextExpressionSetToken("Param/Expression/B5D919C6", "A", StringExternal("Param/Value/44084FF6"));
        TextExpressionSetToken("Param/Expression/B5D919C6", "B", lv_name);
        TextExpressionSetToken("Param/Expression/B5D919C6", "C", StringExternal("Param/Value/110BAF48"));
        lv_value = TextExpressionAssemble("Param/Expression/B5D919C6");
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DeadnightInitPhase1
//--------------------------------------------------------------------------------------------------
void gf_DeadnightinitPhase1 () {
    // Implementation
    gv_questActive = true;
    gv_questIndexActive = 7;
    gv_deadnightPhase = 1;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DeadnightInitPhase2
//--------------------------------------------------------------------------------------------------
trigger auto_gf_DeadnightinitPhase2_Trigger = null;
fixed auto_gf_DeadnightinitPhase2_lp_transitionTime;
void gf_DeadnightinitPhase2 (fixed lp_transitionTime) {
    auto_gf_DeadnightinitPhase2_lp_transitionTime = lp_transitionTime;
    if (auto_gf_DeadnightinitPhase2_Trigger == null) {
        auto_gf_DeadnightinitPhase2_Trigger = TriggerCreate("auto_gf_DeadnightinitPhase2_TriggerFunc");
    }
    TriggerExecute(auto_gf_DeadnightinitPhase2_Trigger, false, false);
}
bool auto_gf_DeadnightinitPhase2_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_transitionTime = auto_gf_DeadnightinitPhase2_lp_transitionTime;
    // Variable Declarations
    int lv_undeadPlayer;
    // Variable Initialization
    lv_undeadPlayer = 15;
    // Implementation
    gf_NewLightset("MarSaraNightTest", lp_transitionTime, true, -1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, (gv_transitionTime * 0.5));
    gv_deadnightPhase = 2;
    gf_AIDeadnightChat(UnitGroupRandomUnit(gf_UnitsInUnitGroupWithBuff(UnitGroup("Kobold", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), "KoboldBotNormal"), c_unitCountAlive));
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DeadnightInitPhase3
//--------------------------------------------------------------------------------------------------
void gf_DeadnightinitPhase3 () {
    // Variable Declarations
    int lv_undeadPlayer;
    // Variable Initialization
    lv_undeadPlayer = 15;
    // Implementation
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicGloom", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, gv_musicVolume, 2.0);
    gv_questText = StringExternal("Param/Value/9D5B98A5");
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/7EB6CBFD"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_nightDuration = 240.0;
    gv_deadnightPhase = 3;
    gv_ghoulExtra = 0;
    gf_SetScaledStats("Ghoul", lv_undeadPlayer);
    gf_SetScaledStats("UndeadSavage", lv_undeadPlayer);
    gf_SetScaledStats("Monstrosity", lv_undeadPlayer);
    gf_SetScaledStats("TombGuardian", lv_undeadPlayer);
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "DeadnightActive", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpawnMonstrosity
//--------------------------------------------------------------------------------------------------
void gf_SpawnMonstrosity () {
    // Variable Declarations
    point lv_p;
    // Variable Initialization
    // Implementation
    lv_p = gf_BlinkLocation(null);
    if ((lv_p == null)) {
        lv_p = gf_RandomPathablePoint(RegionPlayableMap());
    }
    else {
    }
    UnitCreate(1, "Monstrosity", 0, 15, lv_p, libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "BlinkStalker", UnitLastCreated(), 1);
    gf_MonstrosityAcquireTarget(UnitLastCreated());
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BlinkLocation
//--------------------------------------------------------------------------------------------------
point gf_BlinkLocation (unit lp_unit) {
    // Variable Declarations
    region lv_region;
    point lv_p;
    // Variable Initialization
    // Implementation
    if (gf_UnitExists(lp_unit)) {
        lv_region = RegionCircle(UnitGetPosition(lp_unit), 24.0);
        lv_p = gf_StealthPointInRegion(lv_region, UnitGetOwner(lp_unit));
    }
    else {
        lv_region = RegionPlayableMap();
        lv_p = gf_StealthPointInRegion(lv_region, 0);
    }
    return lv_p;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StealthPointInRegion
//--------------------------------------------------------------------------------------------------
point gf_StealthPointInRegion (region lp_region, int lp_player) {
    // Variable Declarations
    point lv_p;
    int lv_failsafe;
    // Variable Initialization
    // Implementation
    while ((lv_p == null)) {
        lv_p = RegionRandomPoint(lp_region);
        lv_failsafe += 1;
        if ((PathingType(lv_p) == c_pathingGround) && (RegionContainsPoint(gv_regionArena, lv_p) == false) && (VisIsVisibleForPlayer(lp_player, lv_p) == false)) {
        }
        else {
            if ((lv_failsafe < 30)) {
                lv_p = null;
            }
            else {
                return null;
            }
        }
    }
    return lv_p;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MonstrosityAcquireTarget
//--------------------------------------------------------------------------------------------------
void gf_MonstrosityAcquireTarget (unit lp_unit) {
    // Implementation
    UnitSetCustomValue(lp_unit, 0, 0.0);
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (gf_UnitExists(gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_monsterStalker)) {
        }
        else {
            gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_monsterStalker = lp_unit;
            UnitSetCustomValue(lp_unit, 0, UnitGetOwner(UnitGroupLoopCurrent()));
        }
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WarlordInit
//--------------------------------------------------------------------------------------------------
void gf_WarlordInit () {
    // Variable Declarations
    int lv_warlordPlayer;
    unitgroup lv_team1Kobolds;
    unitgroup lv_team2Kobolds;
    point lv_team1Point;
    point lv_team2Point;
    point lv_spawnLocation;
    int lv_failsafe;
    fixed lv_a;
    // Variable Initialization
    lv_warlordPlayer = 15;
    lv_team1Kobolds = UnitGroupEmpty();
    lv_team2Kobolds = UnitGroupEmpty();
    lv_spawnLocation = gf_GetBossSpawnLocation();
    // Implementation
    gv_questText = StringExternal("Param/Value/85CCF727");
    TimerStart(gv_questTimer, 210.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/FD4D25BB"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 8;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    gf_SetScaledStats("Zulrogg", lv_warlordPlayer);
    UnitCreate(1, "Zulrogg", 0, lv_warlordPlayer, lv_spawnLocation, 270.0);
    gv_warlord = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", lv_spawnLocation, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
    gv_warlordPing = PingLastCreated();
    PingSetUnit(gv_warlordPing, gv_warlord);
    PingSetScale(gv_warlordPing, 0.5);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_warlord, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WarlordDeath
//--------------------------------------------------------------------------------------------------
void gf_WarlordDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    int auto9E0672F1_ae;
    int auto9E0672F1_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    int lv_winningTeam;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Implementation
    gf_SlayerProgress(UnitGetOwner(lp_killingUnit), lp_dyingUnit);
    lv_winningTeam = gf_GetTeamOfPlayer(UnitGetOwner(lp_killingUnit));
    lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
    lv_p = UnitGetPosition(lp_dyingUnit);
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[8] = true;
    gv_warlord = null;
    TimerPause(gv_questTimer, true);
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_warlordPing);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_killingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_killingUnit), false))) + (StringExternal("Param/Value/4A3E424E") + (gf_GetTribeTextOfPlayer(UnitGetOwner(lp_killingUnit)) + StringExternal("Param/Value/753D6093")))));
    gf_CreateLoot("ViciouslySharpArmblade", lv_p, 0.0, false, 100, 0);
    gf_CreateLoot("TrollNoseBone", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("AncientArtifactFragment", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("IronOre", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("RadiantGem", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("Shadowstone", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("Beer", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("LambentSunflower", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("SpicyHerbs", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("RoastedPheasantWithBerrySauce", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("GrilledWolfEntrecote", lv_p, 2.0, true, 100, 0);
    auto9E0672F1_ae = RandomInt(2, 3);
    auto9E0672F1_ai = 1;
    lv_a = 1;
    for ( ; ( (auto9E0672F1_ai >= 0 && lv_a <= auto9E0672F1_ae) || (auto9E0672F1_ai <= 0 && lv_a >= auto9E0672F1_ae) ) ; lv_a += auto9E0672F1_ai ) {
        gf_CreateLoot("GoldPurse", lv_p, 2.0, true, 100, RandomInt(20, 30));
    }
    gf_CreateLoot("ScrollofTransmutation", lv_p, 2.0, true, 100, 0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TruffleInit
//--------------------------------------------------------------------------------------------------
void gf_TruffleInit () {
    int autoBF988E26_ae;
    int autoBF988E26_ai;
    int autoB2F72328_ae;
    int autoB2F72328_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    gv_questText = StringExternal("Param/Value/93B8986F");
    TimerStart(gv_questTimer, 270.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/73B56AE3"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 9;
    gv_truffleLeadingTeam = 0;
    autoBF988E26_ae = gv_activeTeams;
    autoBF988E26_ai = 1;
    lv_a = 1;
    for ( ; ( (autoBF988E26_ai >= 0 && lv_a <= autoBF988E26_ae) || (autoBF988E26_ai <= 0 && lv_a >= autoBF988E26_ae) ) ; lv_a += autoBF988E26_ai ) {
        gv_trufflesFound[lv_a] = 0;
    }
    autoB2F72328_ae = gv_players;
    autoB2F72328_ai = 1;
    lv_a = 1;
    for ( ; ( (autoB2F72328_ai >= 0 && lv_a <= autoB2F72328_ae) || (autoB2F72328_ai <= 0 && lv_a >= autoB2F72328_ae) ) ; lv_a += autoB2F72328_ai ) {
        gv_truffleSkillBonus[lv_a] = 0;
    }
    gv_noTrufflesEre = gv_region002;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WinterInitialize
//--------------------------------------------------------------------------------------------------
void gf_WinterInitialize () {
    // Implementation
    gv_witchSummoned = false;
    gv_bearsKilled = 0;
    gv_winterProlongable = false;
    gv_questActive = true;
    if ((gv_rainDelayCounter > 0.0)) {
        gv_rainingSoon = false;
        gv_rainDelayCounter = 0.0;
        gv_rainCounter = 0.0;
    }
    else {
    }
    gv_winterSoon = true;
    gv_winterDelayCounter = (gv_rainCounter + 1.0);
    gv_winterCounter = 270.0;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WinterLoop
//--------------------------------------------------------------------------------------------------
void gf_WinterLoop () {
    int autoFBE87850_ae;
    int autoFBE87850_ai;
    int autoB84B7DA1_ae;
    int autoB84B7DA1_ai;
    int autoA4548DAC_ae;
    int autoA4548DAC_ai;
    int auto3D30DAA8_ae;
    int auto3D30DAA8_ai;
    int auto9917C446_ae;
    int auto9917C446_ai;
    int autoF4ACA878_n;
    int autoF4ACA878_i;
    int auto01A87A25_ae;
    int auto01A87A25_ai;
    int auto35DCCF91_ae;
    int auto35DCCF91_ai;
    int auto10A959E7_ae;
    int auto10A959E7_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    fixed lv_f;
    unitgroup g;
    unit lu;
    fixed luFac;
    point luPoint;
    fixed luLife;
    fixed luEnergy;
    // Variable Initialization
    lv_f = libNtve_gf_RandomAngle();
    // Implementation
    if ((gv_winterDriftCleanup == 0)) {
        if ((gv_winter == false)) {
            if ((gv_winterSoon == true)) {
                if ((gv_winterDelayCounter <= 0.0)) {
                    gv_winterSoon = false;
                    gv_winter = true;
                    gv_winterJustStarted = true;
                    g = UnitGroup("Bear", 15, RegionEntireMap(), null, c_noMaxCount); 
                    for(UnitGroupLoopBegin(g);!UnitGroupLoopDone(); UnitGroupLoopStep()){
                        lu = UnitGroupLoopCurrent();
                        luPoint = UnitGetPosition(lu);
                        luFac = UnitGetFacing(lu);
                        luLife = UnitGetPropertyFixed(lu, c_unitPropLifePercent, true);
                        luEnergy = UnitGetPropertyFixed(lu, c_unitPropEnergyPercent, true);
                        UnitRemove(lu);
                        UnitCreate(1, "FrostBear", c_unitCreateIgnorePlacement, 15, luPoint, luFac);
                        lu = UnitLastCreated();
                        UnitSetPropertyFixed(lu, c_unitPropLifePercent, luLife);
                        UnitSetPropertyFixed(lu, c_unitPropEnergyPercent, luEnergy);
                    }
                }
                else {
                    gv_winterDelayCounter -= gv_periodInterval;
                }
            }
            else {
            }
        }
        else {
            if ((gv_winterJustStarted == true)) {
                gv_winterJustStarted = false;
                gv_questIndexActive = 10;
                gv_witchSpawnReq = FixedToInt(Round(libNtve_gf_ArithmeticRealClamp(((IntToFixed(UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) * 1.5) + RandomInt(-1, 1)), 4.0, 20.0)));
                gf_NewLightset("Snow", 10.0, true, 1);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicWinter", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                gv_questText = StringExternal("Param/Value/672313B4");
                TimerStart(gv_questTimer, gv_winterCounter, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal("Param/Value/1EE26BC6"), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                gf_SetScaledStats("FrostBear", 15);
                auto01A87A25_ae = gv_players;
                auto01A87A25_ai = 1;
                lv_a = 1;
                for ( ; ( (auto01A87A25_ai >= 0 && lv_a <= auto01A87A25_ae) || (auto01A87A25_ai <= 0 && lv_a >= auto01A87A25_ae) ) ; lv_a += auto01A87A25_ai ) {
                    gv_winterFrozen[lv_a] = false;
                }
                UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "Snowing", UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
                auto35DCCF91_ae = gv_weatherSize;
                auto35DCCF91_ai = 1;
                lv_a = 0;
                for ( ; ( (auto35DCCF91_ai >= 0 && lv_a <= auto35DCCF91_ae) || (auto35DCCF91_ai <= 0 && lv_a >= auto35DCCF91_ae) ) ; lv_a += auto35DCCF91_ai ) {
                    auto10A959E7_ae = gv_weatherSize;
                    auto10A959E7_ai = 1;
                    lv_b = 0;
                    for ( ; ( (auto10A959E7_ai >= 0 && lv_b <= auto10A959E7_ae) || (auto10A959E7_ai <= 0 && lv_b >= auto10A959E7_ae) ) ; lv_b += auto10A959E7_ai ) {
                        lv_p = Point((10 + (19 * lv_a)), (10 + (19 * lv_b)));
                        libNtve_gf_CreateActorAtPoint("Snow", lv_p);
                        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((lv_f + RandomFixed(-30.0, 30.0))));
                        gv_winterEmitter[lv_a][lv_b] = libNtve_gf_ActorLastCreated();
                    }
                }
            }
            else {
                if ((gv_winterCounter > 1.0)) {
                    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Sheltered") == false)) {
                            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "SnowApply", UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    UnitGroupLoopEnd();
                    autoF4ACA878_n = 2;
                    for (autoF4ACA878_i = 1; autoF4ACA878_i <= autoF4ACA878_n; autoF4ACA878_i += 1) {
                        if ((gv_winterDriftCounter < gv_winterDriftCap)) {
                            gv_winterDriftCounter += 1;
                            libNtve_gf_CreateActorAtPoint("SnowDrift", RegionRandomPoint(RegionPlayableMap()));
                            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
                            gv_winterDrift[gv_winterDriftCounter] = libNtve_gf_ActorLastCreated();
                        }
                        else {
                        }
                    }
                    gv_winterCounter -= gv_periodInterval;
                }
                else {
                    if ((gv_winterProlongable == true)) {
                        gv_winterCounter = 60.0;
                        TimerStart(gv_questTimer, gv_winterCounter, false, c_timeGame);
                        gv_winterProlongable = false;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/949AF922"));
                        SoundPlay(SoundLink("Music_Stinger_Complete07", -1), PlayerGroupAll(), 100.0, 0.0);
                    }
                    else {
                        autoB84B7DA1_ae = gv_weatherSize;
                        autoB84B7DA1_ai = 1;
                        lv_a = 0;
                        for ( ; ( (autoB84B7DA1_ai >= 0 && lv_a <= autoB84B7DA1_ae) || (autoB84B7DA1_ai <= 0 && lv_a >= autoB84B7DA1_ae) ) ; lv_a += autoB84B7DA1_ai ) {
                            autoA4548DAC_ae = gv_weatherSize;
                            autoA4548DAC_ai = 1;
                            lv_b = 0;
                            for ( ; ( (autoA4548DAC_ai >= 0 && lv_b <= autoA4548DAC_ae) || (autoA4548DAC_ai <= 0 && lv_b >= autoA4548DAC_ae) ) ; lv_b += autoA4548DAC_ai ) {
                                ActorSend(gv_winterEmitter[lv_a][lv_b], "Destroy");
                            }
                        }
                        auto3D30DAA8_ae = gv_winterDriftCap;
                        auto3D30DAA8_ai = 1;
                        lv_a = 1;
                        for ( ; ( (auto3D30DAA8_ai >= 0 && lv_a <= auto3D30DAA8_ae) || (auto3D30DAA8_ai <= 0 && lv_a >= auto3D30DAA8_ae) ) ; lv_a += auto3D30DAA8_ai ) {
                            ActorSend(gv_winterDrift[lv_a], "SetTintColor 45,60,48 2.000000");
                        }
                        gv_winterDriftCleanup = 4;
                        if (gf_UnitExists(gv_frostWitch)) {
                            PingDestroy(gv_frostWitchPing);
                            UnitRemove(gv_frostWitch);
                            gv_frostWitch = null;
                        }
                        else {
                        }
                        gf_NewLightset("Haven", 10.0, true, 1);
                        gv_questIndexActive = 0;
                        gv_questActive = false;
                        gv_questCompleted[10] = true;
                        UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitBehaviorRemove(UnitGroupLoopCurrent(), "Snowing", 1);
                        }
                        UnitGroupLoopEnd();
                        UnitGroupLoopBegin(UnitGroup("FrostBear", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gv_winter = false;
                        ObjectiveDestroy(gv_questObjective);
                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                        auto9917C446_ae = gv_players;
                        auto9917C446_ai = 1;
                        lv_a = 1;
                        for ( ; ( (auto9917C446_ai >= 0 && lv_a <= auto9917C446_ae) || (auto9917C446_ai <= 0 && lv_a >= auto9917C446_ae) ) ; lv_a += auto9917C446_ai ) {
                            if ((gv_playerData[lv_a].lv_alive == true) && (gv_winterFrozen[lv_a] == false)) {
                                if ((gv_coldResistance[lv_a] < 0.2)) {
                                    UIDisplayMessage(PlayerGroupSingle(lv_a), c_messageAreaSubtitle, StringExternal("Param/Value/1C72885D"));
                                    gv_coldResistance[lv_a] += 0.1;
                                }
                                else {
                                    UIDisplayMessage(PlayerGroupSingle(lv_a), c_messageAreaSubtitle, StringExternal("Param/Value/E151C8D3"));
                                }
                            }
                            else {
                            }
                        }
                        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                    }
                }
            }
        }
    }
    else {
        gv_winterDriftCleanup -= 1;
        if ((gv_winterDriftCleanup == 0)) {
            autoFBE87850_ae = gv_winterDriftCap;
            autoFBE87850_ai = 1;
            lv_a = 1;
            for ( ; ( (autoFBE87850_ai >= 0 && lv_a <= autoFBE87850_ae) || (autoFBE87850_ai <= 0 && lv_a >= autoFBE87850_ae) ) ; lv_a += autoFBE87850_ai ) {
                ActorSend(gv_winterDrift[lv_a], "Destroy Immediate");
            }
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FrostWitchSpawn
//--------------------------------------------------------------------------------------------------
void gf_FrostWitchSpawn (unit lp_spawner, point lp_location) {
    // Variable Declarations
    int lv_hostile;
    point lv_spawnLocation;
    // Variable Initialization
    lv_hostile = 15;
    lv_spawnLocation = gf_GetBossSpawnLocation();
    // Implementation
    if ((gv_bearsKilled == gv_witchSpawnReq)) {
        gf_SetScaledStats("FrostWitch", lv_hostile);
        UnitCreate(1, "FrostWitch", 0, lv_hostile, lv_spawnLocation, libNtve_gf_RandomAngle());
        gv_frostWitch = UnitLastCreated();
        gv_witchSummoned = true;
        gv_winterProlongable = true;
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", lv_spawnLocation, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
        gv_frostWitchPing = PingLastCreated();
        PingSetUnit(gv_frostWitchPing, gv_frostWitch);
        PingSetScale(gv_frostWitchPing, 0.5);
        SoundPlay(SoundLink("Music_Stinger_Descending", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundPlay(SoundLink("FrostWitchSpawn", -1), PlayerGroupAll(), 100.0, 0.0);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(gv_frostWitch, true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FrostWitchDeath
//--------------------------------------------------------------------------------------------------
void gf_FrostWitchDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    int autoD962713A_ae;
    int autoD962713A_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    int lv_winningTeam;
    int lv_losingTeam;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_p = UnitGetPosition(lp_dyingUnit);
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Implementation
    PingDestroy(gv_frostWitchPing);
    gv_winterProlongable = false;
    gf_SlayerProgress(UnitGetOwner(lp_killingUnit), lp_dyingUnit);
    lv_winningTeam = gf_GetTeamOfPlayer(UnitGetOwner(lp_killingUnit));
    lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
    gv_frostWitch = null;
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    gf_CreateLoot("FrostNeedle", lv_p, 0.0, false, 100, 0);
    gf_CreateLoot("AncientArtifactFragment", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("CleansingDraught", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("Stone", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("Wool", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("SpicyHerbs", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("GrilledWolfEntrecote", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("SpicedLambFeast", lv_p, 2.0, true, 100, 0);
    autoD962713A_ae = RandomInt(2, 3);
    autoD962713A_ai = 1;
    lv_a = 1;
    for ( ; ( (autoD962713A_ai >= 0 && lv_a <= autoD962713A_ae) || (autoD962713A_ai <= 0 && lv_a >= autoD962713A_ae) ) ; lv_a += autoD962713A_ai ) {
        gf_CreateLoot("GoldPurse", lv_p, 2.0, true, 100, RandomInt(20, 30));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LightsOutImpact
//--------------------------------------------------------------------------------------------------
void gf_LightsOutImpact (point lp_point) {
    // Implementation
    if ((lp_point != null)) {
        libNtve_gf_CreateActorAtPoint("LightsOutImpact", lp_point);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
        SoundPlayAtPoint(SoundLink("Zeratul_Blink", -1), PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PiratesInit
//--------------------------------------------------------------------------------------------------
void gf_PiratesInit () {
    int auto955CCAB7_ae;
    int auto955CCAB7_ai;
    int auto2A86B289_ae;
    int auto2A86B289_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    gv_questText = StringExternal("Param/Value/1AB30D58");
    TimerStart(gv_questTimer, 270.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/08FE3736"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 11;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicPirate", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    auto955CCAB7_ae = gv_players;
    auto955CCAB7_ai = 1;
    lv_a = 1;
    for ( ; ( (auto955CCAB7_ai >= 0 && lv_a <= auto955CCAB7_ae) || (auto955CCAB7_ai <= 0 && lv_a >= auto955CCAB7_ae) ) ; lv_a += auto955CCAB7_ai ) {
        gv_aIPirateSearchP[lv_a] = null;
        gv_piratesBeerHint[lv_a] = false;
        CatalogFieldValueSet(c_gameCatalogEffect, "BeerCost", "Amount", lv_a, FixedToString(1.0, 0));
    }
    auto2A86B289_ae = gv_activeTeams;
    auto2A86B289_ai = 1;
    lv_a = 1;
    for ( ; ( (auto2A86B289_ai >= 0 && lv_a <= auto2A86B289_ae) || (auto2A86B289_ai <= 0 && lv_a >= auto2A86B289_ae) ) ; lv_a += auto2A86B289_ai ) {
        gv_aIPirateSearchT[lv_a] = null;
    }
    gv_piratesTreasureLocation = gf_GetBossSpawnLocation();
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ShovelKnowledge", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PiratesFound
//--------------------------------------------------------------------------------------------------
void gf_PiratesFound (unit lp_digger) {
    int autoC372C00B_ae;
    int autoC372C00B_ai;
    int auto1346A753_ae;
    int auto1346A753_ai;
    // Variable Declarations
    int lv_i;
    point lv_p;
    int lv_a;
    int lv_goldValue;
    int lv_winningTeam;
    int lv_losingTeam;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_digger);
    lv_p = UnitGetPosition(lp_digger);
    lv_winningTeam = gv_playerData[lv_i].lv_team;
    lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
    lv_questLosers = PlayerGroupActive();
    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
    if ((TimerGetElapsed(gv_questTimer) <= 45.0)) {
        gf_UnlockRequirement(UnitGetOwner(lp_digger), 2, 6);
    }
    else {
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[11] = true;
    TimerPause(gv_questTimer, true);
    ObjectiveDestroy(gv_questObjective);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_digger), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_digger), false))) + (StringExternal("Param/Value/0FAA0453") + (gf_GetTribeTextOfPlayer(UnitGetOwner(lp_digger)) + StringExternal("Param/Value/BB98DA5B")))));
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ShovelKnowledge", 1);
    }
    UnitGroupLoopEnd();
    autoC372C00B_ae = gv_players;
    autoC372C00B_ai = 1;
    lv_a = 1;
    for ( ; ( (autoC372C00B_ai >= 0 && lv_a <= autoC372C00B_ae) || (autoC372C00B_ai <= 0 && lv_a >= autoC372C00B_ae) ) ; lv_a += autoC372C00B_ai ) {
        if ((StringSub(gv_perks[lv_a], 5, 5) == "1")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "BeerCost", "Amount", lv_a, FixedToString(5.0, 0));
        }
        else {
            CatalogFieldValueSet(c_gameCatalogEffect, "BeerCost", "Amount", lv_a, FixedToString(6.0, 0));
        }
    }
    gf_CreateLoot("BloodthirstyPirateHat", lv_p, 0.0, false, 100, 0);
    gf_CreateLoot("ScrollofTransmutation", lv_p, 2.0, true, 100, 0);
    auto1346A753_ae = RandomInt(7, 9);
    auto1346A753_ai = 1;
    lv_a = 1;
    for ( ; ( (auto1346A753_ai >= 0 && lv_a <= auto1346A753_ae) || (auto1346A753_ai <= 0 && lv_a >= auto1346A753_ae) ) ; lv_a += auto1346A753_ai ) {
        gf_CreateLoot("GoldPurse", lv_p, 2.0, true, 100, RandomInt(30, 40));
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PiratesDirection
//--------------------------------------------------------------------------------------------------
void gf_PiratesDirection (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    point lv_arrowPoint;
    actor lv_arrowActor;
    fixed lv_angleOffset;
    fixed lv_distanceAccuracy;
    fixed lv_red;
    fixed lv_green;
    fixed lv_blue;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_angleOffset = libNtve_gf_ArithmeticRealClamp((35.0 - (FixedToInt(gv_skillMining[UnitGetOwner(lp_unit)]) + (5.0 * BoolToInt(UnitHasBehavior(lp_unit, "WellFedBeer"))))), 0.0, 35.0);
    lv_distanceAccuracy = libNtve_gf_ArithmeticRealClamp((DistanceBetweenPoints(UnitGetPosition(lp_unit), gv_piratesTreasureLocation) * (1.0 + RandomFixed((0.0 - (lv_angleOffset * 0.005)), (lv_angleOffset * 0.005)))), 0.0, 100.0);
    lv_red = lv_distanceAccuracy;
    lv_green = (100.0 - lv_distanceAccuracy);
    // Implementation
    gv_aIPirateSearchT[gf_GetTeamOfPlayer(lv_i)] = PointWithOffsetPolar(UnitGetPosition(lp_unit), (DistanceBetweenPoints(UnitGetPosition(lp_unit), gv_piratesTreasureLocation) * RandomFixed(0.25, 0.5)), (AngleBetweenPoints(UnitGetPosition(lp_unit), gv_piratesTreasureLocation) + RandomFixed((0.0 - lv_angleOffset), lv_angleOffset)));
    PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_aIPirateSearchP[PlayerGroupLoopCurrent()] = null;
    }
    PlayerGroupLoopEnd();
    if ((gv_playerData[lv_i].lv_isAI == true) && (UnitHasBehavior(lp_unit, "SkipChatQuest120") == false)) {
        TextExpressionSetToken("Param/Expression/2879E53B", "A", gf_GetPlayerName(lv_i, 0));
        TextExpressionSetToken("Param/Expression/2879E53B", "B", StringExternal("Param/Value/6215AD83"));
        TextExpressionSetToken("Param/Expression/E3EB32BF", "A", StringExternal("Param/Value/6656D675"));
        TextExpressionSetToken("Param/Expression/E3EB32BF", "B", TextWithColor(TextExpressionAssemble("Param/Expression/2879E53B"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
        TextExpressionSetToken("Param/Expression/E3EB32BF", "C", StringToText(gv_aIPirateString[RandomInt(1, gv_aIPirateStringAmount)]));
        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/E3EB32BF"));
        UnitBehaviorAdd(lp_unit, "SkipChatQuest120", lp_unit, 1);
    }
    else {
    }
    lv_arrowPoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), 1.25, (AngleBetweenPoints(UnitGetPosition(lp_unit), gv_piratesTreasureLocation) + RandomFixed((0.0 - lv_angleOffset), lv_angleOffset)));
    libNtve_gf_CreateModelAtPoint("PingArrow", lv_arrowPoint);
    lv_arrowActor = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeModelFaceAngle(lv_arrowActor, AngleBetweenPoints(UnitGetPosition(lp_unit), lv_arrowPoint));
    ActorSend(lv_arrowActor, libNtve_gf_SetHeight(0.5));
    ActorSend(lv_arrowActor, libNtve_gf_SetScale(4.0, 4.0, 4.0, 0.25));
    ActorSend(lv_arrowActor, libNtve_gf_SetTintColor(Color(lv_red, lv_green, lv_blue), 1.5, 0.0));
    libNtve_gf_CreatePingFacingAngle(gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_members, "PingArrow", UnitGetPosition(lp_unit), Color(lv_red, lv_green, lv_blue), 5.0, AngleBetweenPoints(UnitGetPosition(lp_unit), lv_arrowPoint));
    Wait(5.0, c_timeGame);
    libNtve_gf_KillModel(lv_arrowActor);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WizardInit
//--------------------------------------------------------------------------------------------------
void gf_WizardInit () {
    // Variable Declarations
    int lv_wizardPlayer;
    point lv_spawnLocation;
    int lv_failsafe;
    fixed lv_a;
    // Variable Initialization
    // Implementation
    gv_questText = StringExternal("Param/Value/7478C03D");
    TimerStart(gv_questTimer, 240.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/2E5E1E13"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 12;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    lv_spawnLocation = gf_GetBossSpawnLocation();
    gf_SetScaledStats("TheWoundedWizard", lv_wizardPlayer);
    UnitCreate(1, "TheWoundedWizard", 0, lv_wizardPlayer, lv_spawnLocation, 270.0);
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/DE26E345"), StringExternal("Param/Value/74E408D8"), StringExternal("Param/Value/017FF592"));
    gv_wizard = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", lv_spawnLocation, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
    gv_wizardPing = PingLastCreated();
    PingSetUnit(gv_wizardPing, gv_wizard);
    PingSetScale(gv_wizardPing, 0.5);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_wizard, true, PlayerGroupLoopCurrent());
        gv_aIData[PlayerGroupLoopCurrent()].lv_weightedPOI = UnitGetPosition(gv_wizard);
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WizardHealed
//--------------------------------------------------------------------------------------------------
void gf_WizardHealed (unit lp_healedUnit, unit lp_healingUnit) {
    int autoA6085A65_ae;
    int autoA6085A65_ai;
    int auto57F93257_ae;
    int auto57F93257_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    int lv_winningTeam;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Implementation
    lv_winningTeam = gf_GetTeamOfPlayer(UnitGetOwner(lp_healingUnit));
    lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
    lv_p = UnitGetPosition(lp_healedUnit);
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[12] = true;
    TimerPause(gv_questTimer, true);
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_wizardPing);
    UnitRemove(gv_wizard);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_healingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_healingUnit), false))) + (StringExternal("Param/Value/D25C67B8") + (gf_GetTribeTextOfPlayer(UnitGetOwner(lp_healingUnit)) + StringExternal("Param/Value/AECD9594")))));
    gf_CreateLoot("ConjurersCharm", lv_p, 0.0, false, 100, 0);
    autoA6085A65_ae = 3;
    autoA6085A65_ai = 1;
    lv_a = 1;
    for ( ; ( (autoA6085A65_ai >= 0 && lv_a <= autoA6085A65_ae) || (autoA6085A65_ai <= 0 && lv_a >= autoA6085A65_ae) ) ; lv_a += autoA6085A65_ai ) {
        gf_CreateLoot("ScrollofTransmutation", lv_p, 2.0, true, 100, 0);
    }
    auto57F93257_ae = RandomInt(2, 3);
    auto57F93257_ai = 1;
    lv_a = 1;
    for ( ; ( (auto57F93257_ai >= 0 && lv_a <= auto57F93257_ae) || (auto57F93257_ai <= 0 && lv_a >= auto57F93257_ae) ) ; lv_a += auto57F93257_ai ) {
        gf_CreateLoot("GoldPurse", lv_p, 2.0, true, 100, RandomInt(20, 30));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuilderInit
//--------------------------------------------------------------------------------------------------
void gf_BuilderInit () {
    int auto2D3EA0F5_ae;
    int auto2D3EA0F5_ai;
    // Variable Declarations
    int lv_b;
    int lv_wizardPlayer;
    unitgroup lv_team1Kobolds;
    unitgroup lv_team2Kobolds;
    point lv_team1Point;
    point lv_team2Point;
    point lv_spawnLocation;
    int lv_failsafe;
    fixed lv_a;
    // Variable Initialization
    lv_team1Kobolds = UnitGroupEmpty();
    lv_team2Kobolds = UnitGroupEmpty();
    // Implementation
    gv_questText = StringExternal("Param/Value/514BA7D4");
    TimerStart(gv_questTimer, 240.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/0DBF58FD"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 13;
    gv_extensionAllowed = true;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "BarnetsMonument", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
    auto2D3EA0F5_ae = gv_activeTeams;
    auto2D3EA0F5_ai = 1;
    lv_b = 1;
    for ( ; ( (auto2D3EA0F5_ai >= 0 && lv_b <= auto2D3EA0F5_ae) || (auto2D3EA0F5_ai <= 0 && lv_b >= auto2D3EA0F5_ae) ) ; lv_b += auto2D3EA0F5_ai ) {
        PlayerGroupLoopBegin(gv_teamData[lv_b].lv_members);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) && (gv_playerData[PlayerGroupLoopCurrent()].lv_isAI == true)) {
                gv_aIMonumentBuilder[lv_b] = PlayerGroupLoopCurrent();
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if (gf_UnitExists(gv_playerData[gv_aIMonumentBuilder[lv_b]].lv_kobold) && (UnitHasBehavior(gv_playerData[gv_aIMonumentBuilder[lv_b]].lv_kobold, "SkipChatQuest120") == false)) {
            TextExpressionSetToken("Param/Expression/E1BD9E40", "A", gf_GetPlayerName(gv_aIMonumentBuilder[lv_b], 0));
            TextExpressionSetToken("Param/Expression/E1BD9E40", "B", StringExternal("Param/Value/C3B2B9AF"));
            TextExpressionSetToken("Param/Expression/641C28D5", "A", StringExternal("Param/Value/0E27F1F4"));
            TextExpressionSetToken("Param/Expression/641C28D5", "B", TextWithColor(TextExpressionAssemble("Param/Expression/E1BD9E40"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_aIMonumentBuilder[lv_b], false))));
            TextExpressionSetToken("Param/Expression/641C28D5", "C", StringToText(gv_aIMonumentBuildString[RandomInt(1, gv_aIMonumentBuildStringAmount)]));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, gv_aIMonumentBuilder[lv_b]), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/641C28D5"));
            UnitBehaviorAdd(gv_playerData[gv_aIMonumentBuilder[lv_b]].lv_kobold, "SkipChatQuest120", gv_playerData[gv_aIMonumentBuilder[lv_b]].lv_kobold, 1);
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExileInit
//--------------------------------------------------------------------------------------------------
void gf_ExileInit () {
    // Variable Declarations
    unit lv_strongest;
    const bool lv_weakerTeamAlwaysAttack = false;
    // Variable Initialization
    // Implementation
    if ((lv_weakerTeamAlwaysAttack == true) && (UnitGroupCount(gf_LivingKoboldsOnTeam(1), c_unitCountAlive) > UnitGroupCount(gf_LivingKoboldsOnTeam(2), c_unitCountAlive))) {
        gv_defenders = 1;
        gv_attackers = 2;
    }
    else if ((lv_weakerTeamAlwaysAttack == true) && (UnitGroupCount(gf_LivingKoboldsOnTeam(2), c_unitCountAlive) > UnitGroupCount(gf_LivingKoboldsOnTeam(1), c_unitCountAlive))) {
        gv_defenders = 2;
        gv_attackers = 1;
    }
    else if (true) {
        gv_attackers = RandomInt(1, 2);
        if ((gv_attackers == 2)) {
            gv_defenders = 1;
        }
        else {
            gv_defenders = 2;
        }
    }
    lv_strongest = gf_GetStrongestOnTeam(gv_defenders);
    TextExpressionSetToken("Param/Expression/4D929C97", "A", StringExternal("Param/Value/B20CEE86"));
    TextExpressionSetToken("Param/Expression/4D929C97", "B", gf_GetTribeTextOfTeam(gv_defenders));
    TextExpressionSetToken("Param/Expression/4D929C97", "C", StringExternal("Param/Value/D0A47E1B"));
    TextExpressionSetToken("Param/Expression/4D929C97", "D", gf_GetTribeTextOfTeam(gv_attackers));
    TextExpressionSetToken("Param/Expression/4D929C97", "E", StringExternal("Param/Value/A5895EBC"));
    gv_questText = TextExpressionAssemble("Param/Expression/4D929C97");
    TimerStart(gv_questTimer, 240.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/F81F66F5"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 14;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    PlayerGroupLoopBegin(gv_teamData[gv_defenders].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_SetScaledStats("KingFurbeastIV", PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    if (gf_UnitExists(lv_strongest)) {
        UnitCreate(1, "KingFurbeastIV", 0, UnitGetOwner(lv_strongest), gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lv_strongest), 6.0)), libNtve_gf_RandomAngle());
        gv_exile = UnitLastCreated();
        UnitIssueOrder(gv_exile, OrderTargetingUnit(AbilityCommand("move", 0), lv_strongest), c_orderQueueReplace);
    }
    else {
        gf_SetScaledStats("KingFurbeastIV", 15);
        UnitCreate(1, "KingFurbeastIV", 0, 15, PointFromId(2850), libNtve_gf_RandomAngle());
        gv_exile = UnitLastCreated();
    }
    UnitSetInfoText(gv_exile, StringExternal("Param/Value/325337F6"), StringExternal("Param/Value/14808A3A"), StringExternal("Param/Value/B39C4AEA"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_exile), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
    gv_exilePing = PingLastCreated();
    PingSetUnit(gv_exilePing, gv_exile);
    PingSetScale(gv_exilePing, 0.5);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_exile, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    TimerStart(gv_kingslayerTimer, 30.0, false, c_timeGame);
    UIDisplayMessage(gv_teamData[gv_attackers].lv_members, c_messageAreaSubtitle, StringExternal("Param/Value/936C6D12"));
    UIDisplayMessage(gv_teamData[gv_defenders].lv_members, c_messageAreaSubtitle, StringExternal("Param/Value/CD13E8F9"));
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupAll(), 100.0, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetStrongestOnTeam
//--------------------------------------------------------------------------------------------------
unit gf_GetStrongestOnTeam (int lp_team) {
    // Variable Declarations
    unit lv_value;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true) && (gf_EvaluateThreat(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) > gf_EvaluateThreat(lv_value))) {
            lv_value = gv_playerData[PlayerGroupLoopCurrent()].lv_kobold;
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExileLoot
//--------------------------------------------------------------------------------------------------
void gf_ExileLoot (point lp_location) {
    int autoFD77D75E_val;
    int auto5F9860C7_val;
    // Variable Declarations
    int lv_random;
    string lv_type;
    // Variable Initialization
    // Implementation
    PingDestroy(gv_exileRewardPing);
    gf_CreateLoot("Bloodcleaver", lp_location, 0.0, false, 100, 0);
    lv_random = RandomInt(1, 3);
    autoFD77D75E_val = lv_random;
    if (autoFD77D75E_val == 1) {
        lv_type = "RadiantGem";
    }
    else if (autoFD77D75E_val == 2) {
        lv_type = "Shadowstone";
    }
    else if (autoFD77D75E_val == 3) {
        lv_type = "IronOre";
    }
    else {
    }
    gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
    lv_random = RandomInt(1, 5);
    auto5F9860C7_val = lv_random;
    if (auto5F9860C7_val == 1) {
        lv_type = "LambentSunflower";
    }
    else if (auto5F9860C7_val == 2) {
        lv_type = "HandfulofBerries";
    }
    else if (auto5F9860C7_val == 3) {
        lv_type = "Sageberry";
    }
    else if (auto5F9860C7_val == 4) {
        lv_type = "SpicyHerbs";
    }
    else if (auto5F9860C7_val == 5) {
        lv_type = "Beer";
    }
    else {
    }
    gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
    gf_CreateLoot("GoldPurse", lp_location, 1.5, true, 100, RandomInt(20, 30));
    gf_CreateLoot("ScrollofTransmutation", lp_location, 1.5, true, 100, 0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilInit
//--------------------------------------------------------------------------------------------------
void gf_VeilInit () {
    int auto9DF15A47_ae;
    int auto9DF15A47_ai;
    // Variable Declarations
    const fixed lv_duration = 270.0;
    int lv_a;
    int lv_shrines;
    point lv_p;
    const int lv_areaSize = 9;
    region lv_questRegion;
    // Variable Initialization
    lv_shrines = libNtve_gf_ArithmeticIntClamp((UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) / 3), 1, 3);
    lv_questRegion = RegionCircle(gf_WeightedCenterofKobolds(), 64.0);
    // Implementation
    gv_veilShrineCount = 1;
    gv_questText = StringExternal("Param/Value/510014C8");
    TimerStart(gv_questTimer, lv_duration, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/DA88EBAD"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 15;
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    auto9DF15A47_ae = lv_shrines;
    auto9DF15A47_ai = 1;
    lv_a = 1;
    for ( ; ( (auto9DF15A47_ai >= 0 && lv_a <= auto9DF15A47_ae) || (auto9DF15A47_ai <= 0 && lv_a >= auto9DF15A47_ae) ) ; lv_a += auto9DF15A47_ai ) {
        lv_p = gf_RandomOpenArea(lv_areaSize, lv_questRegion);
        gf_VeilShrineSetup(lv_p);
        if ((lv_p == PointFromId(2850))) {
            break;
        }
        else {
        }
    }
    gf_VeilofDarkness(lv_duration, 0);
    gf_SetScaledStats("VeilGuardian", 15);
    gf_SetScaledStats("TombGuardian", 15);
    CatalogFieldValueSet(c_gameCatalogEffect, "MysteriousShrineZap", "Amount", 0, FixedToString((20.0 + (gv_gameDuration / 20.0)), 0));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicCrypt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TimerStart(gv_veilGuardianTimer, RandomFixed(10.0, 20.0), false, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilShrineSetup
//--------------------------------------------------------------------------------------------------
void gf_VeilShrineSetup (point lp_point) {
    int auto32072250_ae;
    int auto32072250_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    gv_veilShrineSequence[gv_veilShrineCount] = gf_VeilShrineSequence();
    UnitCreate(1, "MysteriousShrine", c_unitCreateIgnorePlacement, 0, lp_point, 270.0);
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/76543469"), StringExternal("Param/Value/0F98D835"), StringExternal("Param/Value/0C4C4021"));
    gv_veilShrine[gv_veilShrineCount] = UnitLastCreated();
    UnitSetCustomValue(UnitLastCreated(), 0, gv_veilShrineCount);
    UnitSetCustomValue(UnitLastCreated(), 2, 1.0);
    UnitSetCustomValue(UnitLastCreated(), 3, 1.0);
    UnitSetCustomValue(UnitLastCreated(), 4, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", lp_point, ColorWithAlpha(100.00, 50.20, 75.29, 0.00), 0.0, 270.0);
    gv_veilShrinePing[gv_veilShrineCount] = PingLastCreated();
    UnitCreate(1, "VeilShrinePad", c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, -1.0, -3.0), 270.0);
    gv_veilShrinePad[gv_veilShrineCount][1] = UnitLastCreated();
    UnitCreate(1, "VeilShrinePad", c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, 2.0, -2.0), 270.0);
    gv_veilShrinePad[gv_veilShrineCount][2] = UnitLastCreated();
    UnitCreate(1, "VeilShrinePad", c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, 3.0, 1.0), 270.0);
    gv_veilShrinePad[gv_veilShrineCount][3] = UnitLastCreated();
    UnitCreate(1, "VeilShrinePad", c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, 1.0, 3.0), 270.0);
    gv_veilShrinePad[gv_veilShrineCount][4] = UnitLastCreated();
    UnitCreate(1, "VeilShrinePad", c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, -2.0, 2.0), 270.0);
    gv_veilShrinePad[gv_veilShrineCount][5] = UnitLastCreated();
    UnitCreate(1, "VeilShrinePad", c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, -3.0, -1.0), 270.0);
    gv_veilShrinePad[gv_veilShrineCount][6] = UnitLastCreated();
    auto32072250_ae = 6;
    auto32072250_ai = 1;
    lv_a = 1;
    for ( ; ( (auto32072250_ai >= 0 && lv_a <= auto32072250_ae) || (auto32072250_ai <= 0 && lv_a >= auto32072250_ae) ) ; lv_a += auto32072250_ai ) {
        UnitSetCustomValue(gv_veilShrinePad[gv_veilShrineCount][lv_a], 0, gv_veilShrineCount);
        UnitSetCustomValue(gv_veilShrinePad[gv_veilShrineCount][lv_a], 1, lv_a);
    }
    gv_veilShrineCount += 1;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilShrineSequence
//--------------------------------------------------------------------------------------------------
string gf_VeilShrineSequence () {
    int auto301EA747_ae;
    int auto301EA747_ai;
    // Variable Declarations
    const int lv_length = 6;
    int lv_a;
    string lv_pool;
    string lv_value;
    int lv_r;
    // Variable Initialization
    lv_pool = "123456";
    lv_value = "";
    // Implementation
    auto301EA747_ae = lv_length;
    auto301EA747_ai = 1;
    lv_a = 1;
    for ( ; ( (auto301EA747_ai >= 0 && lv_a <= auto301EA747_ae) || (auto301EA747_ai <= 0 && lv_a >= auto301EA747_ae) ) ; lv_a += auto301EA747_ai ) {
        lv_r = RandomInt(1, StringLength(lv_pool));
        lv_value = (lv_value + StringSub(lv_pool, lv_r, lv_r));
        lv_pool = StringReplace(lv_pool, "", lv_r, lv_r);
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RandomOpenArea
//--------------------------------------------------------------------------------------------------
point gf_RandomOpenArea (int lp_size, region lp_region) {
    int auto374F3166_ae;
    int auto374F3166_ai;
    int auto79F33061_ae;
    int auto79F33061_ai;
    // Variable Declarations
    point lv_probe;
    point lv_p;
    bool lv_success;
    int lv_failsafe;
    int lv_a;
    int lv_b;
    // Variable Initialization
    lv_failsafe = 250;
    // Implementation
    while ((lv_success == false)) {
        if ((lv_failsafe == 0)) {
            lv_probe = PointFromId(2850);
            lv_success = true;
        }
        else {
            lv_failsafe -= 1;
            lv_probe = RegionRandomPoint(lp_region);
            lv_probe = Point((Round(PointGetX(lv_probe)) + 0.5), (Round(PointGetY(lv_probe)) + 0.5));
            if ((RegionContainsPoint(gv_regionArena, lv_probe) == false) && (UnitGroupCount(UnitGroup("Fortress", c_playerAny, RegionCircle(lv_probe, 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                lv_success = true;
                auto374F3166_ae = (lp_size / 2);
                auto374F3166_ai = 1;
                lv_a = (0 - (lp_size / 2));
                for ( ; ( (auto374F3166_ai >= 0 && lv_a <= auto374F3166_ae) || (auto374F3166_ai <= 0 && lv_a >= auto374F3166_ae) ) ; lv_a += auto374F3166_ai ) {
                    auto79F33061_ae = (lp_size / 2);
                    auto79F33061_ai = 1;
                    lv_b = (0 - (lp_size / 2));
                    for ( ; ( (auto79F33061_ai >= 0 && lv_b <= auto79F33061_ae) || (auto79F33061_ai <= 0 && lv_b >= auto79F33061_ae) ) ; lv_b += auto79F33061_ai ) {
                        lv_p = PointWithOffset(lv_probe, IntToFixed(lv_a), IntToFixed(lv_b));
                        if ((PathingType(lv_p) == c_pathingGround)) {
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
            }
            else {
            }
        }
    }
    return lv_probe;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilShrineFail
//--------------------------------------------------------------------------------------------------
void gf_VeilShrineFail (unit lp_shrine) {
    int auto9DBD4CCE_ae;
    int auto9DBD4CCE_ai;
    // Variable Declarations
    int lv_shrineIndex;
    int lv_a;
    // Variable Initialization
    lv_shrineIndex = FixedToInt(UnitGetCustomValue(lp_shrine, 0));
    // Implementation
    SoundPlayOnUnit(SoundLink("VeilShrineFailSound", -1), PlayerGroupAll(), lp_shrine, 0.0, 100.0, 0.0);
    gf_Alltag(lp_shrine, StringExternal("Param/Value/776C122A"), 2.0, 26);
    UnitBehaviorRemove(lp_shrine, "VeilShrineActive", 1);
    auto9DBD4CCE_ae = 6;
    auto9DBD4CCE_ai = 1;
    lv_a = 1;
    for ( ; ( (auto9DBD4CCE_ai >= 0 && lv_a <= auto9DBD4CCE_ae) || (auto9DBD4CCE_ai <= 0 && lv_a >= auto9DBD4CCE_ae) ) ; lv_a += auto9DBD4CCE_ai ) {
        UnitBehaviorRemove(gv_veilShrinePad[lv_shrineIndex][lv_a], "VeilShrinePadActive", 1);
        UnitBehaviorAdd(gv_veilShrinePad[lv_shrineIndex][lv_a], "VeilShrineFailFlashLead", lp_shrine, 1);
    }
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionCircle(UnitGetPosition(lp_shrine), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectUnit(lp_shrine, "MysteriousShrineZapSet", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitSetInfoText(lp_shrine, StringExternal("Param/Value/D0F9938B"), StringExternal("Param/Value/63AEAB97"), StringExternal("Param/Value/E3791AC0"));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilLoot
//--------------------------------------------------------------------------------------------------
void gf_VeilLoot (point lp_point) {
    int auto464729F0_ae;
    int auto464729F0_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    gf_CreateLoot("NecromancersNecklace", lp_point, 0.0, false, 100, 0);
    gf_CreateLoot("OrbofDarkness", lp_point, 1.5, true, 100, 0);
    gf_CreateLoot("OrbofDarkness", lp_point, 1.5, true, 100, 0);
    auto464729F0_ae = 3;
    auto464729F0_ai = 1;
    lv_a = 1;
    for ( ; ( (auto464729F0_ai >= 0 && lv_a <= auto464729F0_ae) || (auto464729F0_ai <= 0 && lv_a >= auto464729F0_ae) ) ; lv_a += auto464729F0_ai ) {
        gf_CreateLoot("GoldPurse", lp_point, 1.5, true, 100, RandomInt(20, 30));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilofDarkness
//--------------------------------------------------------------------------------------------------
void gf_VeilofDarkness (fixed lp_duration, int lp_castingTeam) {
    int auto7F33A7F8_ae;
    int auto7F33A7F8_ai;
    // Variable Declarations
    int lv_a;
    int lv_x;
    int lv_y;
    // Variable Initialization
    // Implementation
    TimerStart(gv_veilofDarknessTimer, lp_duration, false, c_timeGame);
    auto7F33A7F8_ae = gv_activeTeams;
    auto7F33A7F8_ai = 1;
    lv_a = 1;
    for ( ; ( (auto7F33A7F8_ai >= 0 && lv_a <= auto7F33A7F8_ae) || (auto7F33A7F8_ai <= 0 && lv_a >= auto7F33A7F8_ae) ) ; lv_a += auto7F33A7F8_ai ) {
        if ((lv_a != lp_castingTeam)) {
            gv_veilofDarknessActive[lv_a] = true;
            libNtve_gf_SetPlayerGroupAlliance(gv_teamData[lv_a].lv_members, 0);
            PlayerGroupLoopBegin(gv_teamData[lv_a].lv_members);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == "Kobold")) {
                        UnitBehaviorAdd(UnitGroupLoopCurrent(), "VeilofDarkness", UnitGroupLoopCurrent(), 1);
                    }
                    else {
                        if ((UnitGetType(UnitGroupLoopCurrent()) != "MurlocSlave")) {
                            UnitBehaviorAdd(UnitGroupLoopCurrent(), "VeilofDarknessGeneral", UnitGroupLoopCurrent(), 1);
                        }
                        else {
                        }
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup("Bird", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), "BirdScouting", 1);
                }
                UnitGroupLoopEnd();
            }
            PlayerGroupLoopEnd();
        }
        else {
        }
    }
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "OrbofDarknessDenied", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_VeilofDarknessCont, true);
    gf_AllAIsShareControlwithAllies();
    SoundPlay(SoundLink("Music_Stinger_Descending", -1), PlayerGroupAll(), 100.0, 0.0);
    CutsceneFade(false, 1.0, Color(0,0,0), 25.0, PlayerGroupAll(), true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExpeditionInit
//--------------------------------------------------------------------------------------------------
void gf_ExpeditionInit () {
    int autoDA88EADA_ae;
    int autoDA88EADA_ai;
    int autoCA10028D_ae;
    int autoCA10028D_ai;
    int auto5AEA148A_ae;
    int auto5AEA148A_ai;
    int auto5C3F08F5_ae;
    int auto5C3F08F5_ai;
    int autoC116729A_ae;
    int autoC116729A_ai;
    int autoC7818B0E_ae;
    int autoC7818B0E_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    // Variable Initialization
    // Implementation
    gv_questText = StringExternal("Param/Value/B33C0A74");
    TimerStart(gv_questTimer, 300.0, false, c_timeGame);
    ObjectiveCreate(gv_questText, StringExternal("Param/Value/639E6432"), c_objectiveStateActive, true);
    gv_questObjective = ObjectiveLastCreated();
    gv_questActive = true;
    gv_questIndexActive = 16;
    gv_expeditionLeadingTeam = 0;
    autoDA88EADA_ae = gv_activeTeams;
    autoDA88EADA_ai = 1;
    lv_a = 1;
    for ( ; ( (autoDA88EADA_ai >= 0 && lv_a <= autoDA88EADA_ae) || (autoDA88EADA_ai <= 0 && lv_a >= autoDA88EADA_ae) ) ; lv_a += autoDA88EADA_ai ) {
        gv_expeditionProgressCount[lv_a] = 0;
        autoCA10028D_ae = gv_expeditionAreas;
        autoCA10028D_ai = 1;
        lv_b = 1;
        for ( ; ( (autoCA10028D_ai >= 0 && lv_b <= autoCA10028D_ae) || (autoCA10028D_ai <= 0 && lv_b >= autoCA10028D_ae) ) ; lv_b += autoCA10028D_ai ) {
            gv_expeditionProgress[lv_a][lv_b] = false;
        }
    }
    TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
    SoundPlay(SoundLink("UI_ObjectiveDiscoveredStinger", -1), PlayerGroupActive(), 100.0, 0.0);
    auto5AEA148A_ae = gv_expeditionAreas;
    auto5AEA148A_ai = 1;
    lv_a = 1;
    for ( ; ( (auto5AEA148A_ai >= 0 && lv_a <= auto5AEA148A_ae) || (auto5AEA148A_ai <= 0 && lv_a >= auto5AEA148A_ae) ) ; lv_a += auto5AEA148A_ai ) {
        gv_expeditionActivePoint[lv_a] = gv_expeditionPoint[lv_a][RandomInt(1, 3)];
        UnitCreate(1, "ExpeditionArea", c_unitCreateIgnorePlacement, 0, gv_expeditionActivePoint[lv_a], 270.0);
        gv_expeditionRing[lv_a] = UnitLastCreated();
        auto5C3F08F5_ae = gv_players;
        auto5C3F08F5_ai = 1;
        lv_b = 1;
        for ( ; ( (auto5C3F08F5_ai >= 0 && lv_b <= auto5C3F08F5_ae) || (auto5C3F08F5_ai <= 0 && lv_b >= auto5C3F08F5_ae) ) ; lv_b += auto5C3F08F5_ai ) {
            VisExploreArea(lv_b, RegionCircle(gv_expeditionActivePoint[lv_a], gv_expeditionRadius), true, false);
        }
    }
    autoC116729A_ae = gv_activeTeams;
    autoC116729A_ai = 1;
    lv_a = 1;
    for ( ; ( (autoC116729A_ai >= 0 && lv_a <= autoC116729A_ae) || (autoC116729A_ai <= 0 && lv_a >= autoC116729A_ae) ) ; lv_a += autoC116729A_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingNumeric1", gv_expeditionActivePoint[1], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        gv_expeditionPing[lv_a][1] = PingLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingNumeric2", gv_expeditionActivePoint[2], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        gv_expeditionPing[lv_a][2] = PingLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingNumeric3", gv_expeditionActivePoint[3], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        gv_expeditionPing[lv_a][3] = PingLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingNumeric4", gv_expeditionActivePoint[4], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        gv_expeditionPing[lv_a][4] = PingLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingNumeric5", gv_expeditionActivePoint[5], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        gv_expeditionPing[lv_a][5] = PingLastCreated();
        autoC7818B0E_ae = gv_expeditionAreas;
        autoC7818B0E_ai = 1;
        lv_b = 1;
        for ( ; ( (autoC7818B0E_ai >= 0 && lv_b <= autoC7818B0E_ae) || (autoC7818B0E_ai <= 0 && lv_b >= autoC7818B0E_ae) ) ; lv_b += autoC7818B0E_ai ) {
            PingSetScale(gv_expeditionPing[lv_a][lv_b], 0.75);
            PingSetPlayerGroup(gv_expeditionPing[lv_a][lv_b], gv_teamData[lv_a].lv_members);
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExpeditionProgress
//--------------------------------------------------------------------------------------------------
void gf_ExpeditionProgress (int lp_team) {
    int auto4D135EAF_ae;
    int auto4D135EAF_ai;
    int autoE5BC8179_ae;
    int autoE5BC8179_ai;
    int auto4906B9F0_ae;
    int auto4906B9F0_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Implementation
    if ((gv_expeditionProgressCount[lp_team] == gv_expeditionAreas)) {
        gv_questIndexActive = 0;
        gv_questActive = false;
        gv_questCompleted[16] = true;
        ObjectiveDestroy(gv_questObjective);
        auto4D135EAF_ae = gv_expeditionAreas;
        auto4D135EAF_ai = 1;
        lv_a = 1;
        for ( ; ( (auto4D135EAF_ai >= 0 && lv_a <= auto4D135EAF_ae) || (auto4D135EAF_ai <= 0 && lv_a >= auto4D135EAF_ae) ) ; lv_a += auto4D135EAF_ai ) {
            UnitRemove(gv_expeditionRing[lv_a]);
        }
        autoE5BC8179_ae = gv_maxTeams;
        autoE5BC8179_ai = 1;
        lv_a = 1;
        for ( ; ( (autoE5BC8179_ai >= 0 && lv_a <= autoE5BC8179_ae) || (autoE5BC8179_ai <= 0 && lv_a >= autoE5BC8179_ae) ) ; lv_a += autoE5BC8179_ai ) {
            auto4906B9F0_ae = gv_expeditionAreas;
            auto4906B9F0_ai = 1;
            lv_b = 1;
            for ( ; ( (auto4906B9F0_ai >= 0 && lv_b <= auto4906B9F0_ae) || (auto4906B9F0_ai <= 0 && lv_b >= auto4906B9F0_ae) ) ; lv_b += auto4906B9F0_ai ) {
                PingDestroy(gv_expeditionPing[lv_a][lv_b]);
            }
        }
        lv_questWinners = gv_teamData[lp_team].lv_members;
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
        TextExpressionSetToken("Param/Expression/4D0B0776", "A", StringExternal("Param/Value/90BC92C2"));
        TextExpressionSetToken("Param/Expression/4D0B0776", "B", gf_GetTribeTextOfTeam(lp_team));
        TextExpressionSetToken("Param/Expression/4D0B0776", "C", StringExternal("Param/Value/0D2E8E77"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/4D0B0776"));
        PlayerGroupLoopBegin(lv_questWinners);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                gf_Quicktag(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, StringExternal("Param/Value/DC559551"), 3.0, 24);
                gf_CreateItemForUnit(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "EpicFishingRod", 1);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExpeditionProgressText
//--------------------------------------------------------------------------------------------------
text gf_ExpeditionProgressText () {
    int auto53D8CAC0_ae;
    int auto53D8CAC0_ai;
    int autoB9555964_ae;
    int autoB9555964_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    text lv_value;
    // Variable Initialization
    // Implementation
    lv_value = (lv_value + StringExternal("Param/Value/CC98442D"));
    auto53D8CAC0_ae = gv_activeTeams;
    auto53D8CAC0_ai = 1;
    lv_a = 1;
    for ( ; ( (auto53D8CAC0_ai >= 0 && lv_a <= auto53D8CAC0_ae) || (auto53D8CAC0_ai <= 0 && lv_a >= auto53D8CAC0_ae) ) ; lv_a += auto53D8CAC0_ai ) {
        if ((gv_teamData[lv_a].lv_allDead == false)) {
            TextExpressionSetToken("Param/Expression/4A69D351", "A", lv_value);
            TextExpressionSetToken("Param/Expression/4A69D351", "B", gf_GetTribeTextOfTeam(lv_a));
            TextExpressionSetToken("Param/Expression/4A69D351", "C", StringExternal("Param/Value/F5C0D0AB"));
            lv_value = TextExpressionAssemble("Param/Expression/4A69D351");
            autoB9555964_ae = gv_expeditionAreas;
            autoB9555964_ai = 1;
            lv_b = 1;
            for ( ; ( (autoB9555964_ai >= 0 && lv_b <= autoB9555964_ae) || (autoB9555964_ai <= 0 && lv_b >= autoB9555964_ae) ) ; lv_b += autoB9555964_ai ) {
                if ((lv_b == gv_expeditionAreas)) {
                    if ((gv_expeditionProgress[lv_a][lv_b] == true)) {
                        TextExpressionSetToken("Param/Expression/0787F14C", "A", StringExternal("Param/Value/9DABAFBB"));
                        TextExpressionSetToken("Param/Expression/0787F14C", "B", IntToText(lv_b));
                        TextExpressionSetToken("Param/Expression/0787F14C", "C", StringExternal("Param/Value/9A159FAE"));
                        lv_value = (lv_value + TextExpressionAssemble("Param/Expression/0787F14C"));
                    }
                    else {
                        TextExpressionSetToken("Param/Expression/4AE5062A", "A", StringExternal("Param/Value/A607D780"));
                        TextExpressionSetToken("Param/Expression/4AE5062A", "B", IntToText(lv_b));
                        TextExpressionSetToken("Param/Expression/4AE5062A", "C", StringExternal("Param/Value/DF7E6D4F"));
                        lv_value = (lv_value + TextExpressionAssemble("Param/Expression/4AE5062A"));
                    }
                }
                else {
                    if ((gv_expeditionProgress[lv_a][lv_b] == true)) {
                        TextExpressionSetToken("Param/Expression/1EB85EB2", "A", StringExternal("Param/Value/66F5223F"));
                        TextExpressionSetToken("Param/Expression/1EB85EB2", "B", IntToText(lv_b));
                        TextExpressionSetToken("Param/Expression/1EB85EB2", "C", StringExternal("Param/Value/9E07519F"));
                        lv_value = (lv_value + TextExpressionAssemble("Param/Expression/1EB85EB2"));
                    }
                    else {
                        TextExpressionSetToken("Param/Expression/1CAA5977", "A", StringExternal("Param/Value/34C2B46F"));
                        TextExpressionSetToken("Param/Expression/1CAA5977", "B", IntToText(lv_b));
                        TextExpressionSetToken("Param/Expression/1CAA5977", "C", StringExternal("Param/Value/60F65ADA"));
                        lv_value = (lv_value + TextExpressionAssemble("Param/Expression/1CAA5977"));
                    }
                }
            }
            lv_value = (lv_value + StringExternal("Param/Value/4AE90520"));
        }
        else {
        }
    }
    if ((gv_expeditionLeadingTeam != 0)) {
        TextExpressionSetToken("Param/Expression/A55814F5", "A", lv_value);
        TextExpressionSetToken("Param/Expression/A55814F5", "B", StringExternal("Param/Value/CD1BD59E"));
        TextExpressionSetToken("Param/Expression/A55814F5", "C", gf_GetTribeTextOfTeam(gv_expeditionLeadingTeam));
        lv_value = TextExpressionAssemble("Param/Expression/A55814F5");
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRSpawn
//--------------------------------------------------------------------------------------------------
void gf_DLJRSpawn (point lp_point) {
    // Implementation
    gf_SetScaledStats("DemonLordJaryx", 15);
    UnitCreate(1, "DemonLordJaryx", 0, 15, lp_point, libNtve_gf_RandomAngle());
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BE424AF9"));
    SoundPlay(SoundLink("DemonLordSummon", -1), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), lp_point, 5.0, Color(100.00, 0.00, 0.00));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicBossHeroic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShake(PlayerGroupLoopCurrent(), "Massive", "Shake", 0.0, 1.0, 2.0);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lp_point, 16.0), 15.0, false);
    }
    PlayerGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRDeath
//--------------------------------------------------------------------------------------------------
void gf_DLJRDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    int autoFBBC495F_ae;
    int autoFBBC495F_ai;
    int autoFBD06F2B_ae;
    int autoFBD06F2B_ai;
    // Variable Declarations
    int lv_a;
    point lv_p;
    // Variable Initialization
    lv_p = UnitGetPosition(lp_dyingUnit);
    // Implementation
    gf_SlayerProgress(UnitGetOwner(lp_killingUnit), lp_dyingUnit);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5C08DBAF"));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicBossHeroicVictory", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_CreateLoot("FelFireTorch", lv_p, 0.0, false, 100, 0);
    gf_CreateLoot("RadiantGem", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("LambentSunflower", lv_p, 2.0, true, 100, 0);
    gf_CreateLoot("Shadowstone", lv_p, 2.0, true, 100, 0);
    autoFBBC495F_ae = 3;
    autoFBBC495F_ai = 1;
    lv_a = 1;
    for ( ; ( (autoFBBC495F_ai >= 0 && lv_a <= autoFBBC495F_ae) || (autoFBBC495F_ai <= 0 && lv_a >= autoFBBC495F_ae) ) ; lv_a += autoFBBC495F_ai ) {
        gf_CreateLoot("SmokedLambSirloin", lv_p, 2.0, true, 100, 0);
    }
    autoFBD06F2B_ae = RandomInt(4, 5);
    autoFBD06F2B_ai = 1;
    lv_a = 1;
    for ( ; ( (autoFBD06F2B_ai >= 0 && lv_a <= autoFBD06F2B_ae) || (autoFBD06F2B_ai <= 0 && lv_a >= autoFBD06F2B_ae) ) ; lv_a += autoFBD06F2B_ai ) {
        gf_CreateLoot("GoldPurse", lv_p, 2.0, true, 100, RandomInt(20, 30));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RABSpawn
//--------------------------------------------------------------------------------------------------
void gf_RABSpawn (point lp_point, int lp_summoningPlayer) {
    int autoF8B8BE44_ae;
    int autoF8B8BE44_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/74F741A6"));
    SoundPlay(SoundLink("RagingArcaneBeastSpawn", -1), PlayerGroupAll(), 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/B163589B", "A", gf_GetPlayerName(lp_summoningPlayer, 0));
    TextExpressionSetToken("Param/Expression/B163589B", "B", StringExternal("Param/Value/65E6E91F"));
    UIDisplayMessage(PlayerGroupSingle(lp_summoningPlayer), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble("Param/Expression/B163589B"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_summoningPlayer, false))) + StringExternal("Param/Value/F865C3E0")));
    MinimapPing(PlayerGroupAll(), lp_point, 5.0, Color(100.00, 0.00, 0.00));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicBossHeroic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
            UnitAbilitySpend(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, AbilityCommand("MysteriousArcaneRitual", 0), c_spendLocationAbility);
        }
        else {
        }
        CameraShake(PlayerGroupLoopCurrent(), "Massive", "Shake", 0.0, 1.0, 2.0);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lp_point, 16.0), 15.0, false);
    }
    PlayerGroupLoopEnd();
    gf_SetScaledStats("RagingArcaneBeast", 15);
    UnitCreate(1, "RagingArcaneBeast", 0, 15, lp_point, libNtve_gf_RandomAngle());
    UnitSetCustomValue(UnitLastCreated(), 1, lp_summoningPlayer);
    UnitSetCustomValue(UnitLastCreated(), 2, gv_gameDuration);
    autoF8B8BE44_ae = 3;
    autoF8B8BE44_ai = 1;
    lv_a = 1;
    for ( ; ( (autoF8B8BE44_ai >= 0 && lv_a <= autoF8B8BE44_ae) || (autoF8B8BE44_ai <= 0 && lv_a >= autoF8B8BE44_ae) ) ; lv_a += autoF8B8BE44_ai ) {
        UnitCreate(1, "LightningCloud", 0, 15, RegionRandomPoint(RegionCircle(lp_point, 12.0)), libNtve_gf_RandomAngle());
        UnitSetHeight(UnitLastCreated(), RandomFixed(6.0, 8.0), 0.0);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnstableAnomalyAscent
//--------------------------------------------------------------------------------------------------
void gf_UnstableAnomalyAscent (unit lp_unit, fixed lp_damage) {
    // Variable Declarations
    fixed lv_currentHeight;
    fixed lv_verticalForce;
    const fixed lv_damageConversionFactor = 0.03;
    // Variable Initialization
    lv_currentHeight = UnitGetHeight(lp_unit);
    lv_verticalForce = UnitGetCustomValue(lp_unit, 0);
    // Implementation
    if ((UnitGetType(lp_unit) == "UnstableAnomaly")) {
        UnitSetCustomValue(lp_unit, 0, libNtve_gf_ArithmeticRealClamp((lv_verticalForce + (SquareRoot(lp_damage) * lv_damageConversionFactor)), -0.25, 0.5));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RABDeath
//--------------------------------------------------------------------------------------------------
void gf_RABDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    int auto285212B3_ae;
    int auto285212B3_ai;
    int auto1ABE0FB0_ae;
    int auto1ABE0FB0_ai;
    // Variable Declarations
    point lv_p;
    int lv_a;
    // Variable Initialization
    lv_p = UnitGetPosition(lp_dyingUnit);
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A410AE83"));
    SoundPlay(SoundLink("RagingArcaneBeastDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicBossHeroicVictory", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitGroupLoopBegin(UnitGroup("LightningCloud", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 3));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_AddExperience(lp_killingUnit, 200.0);
    gf_CreateLoot("SpellbreakerArmor", lv_p, 0.0, false, 100, 0);
    auto285212B3_ae = 5;
    auto285212B3_ai = 1;
    lv_a = 1;
    for ( ; ( (auto285212B3_ai >= 0 && lv_a <= auto285212B3_ae) || (auto285212B3_ai <= 0 && lv_a >= auto285212B3_ae) ) ; lv_a += auto285212B3_ai ) {
        gf_CreateLoot("RadiantGem", lv_p, 2.0, true, 100, 0);
        gf_CreateLoot("Shadowstone", lv_p, 2.0, true, 100, 0);
    }
    auto1ABE0FB0_ae = RandomInt(2, 3);
    auto1ABE0FB0_ai = 1;
    lv_a = 1;
    for ( ; ( (auto1ABE0FB0_ai >= 0 && lv_a <= auto1ABE0FB0_ae) || (auto1ABE0FB0_ai <= 0 && lv_a >= auto1ABE0FB0_ae) ) ; lv_a += auto1ABE0FB0_ai ) {
        gf_CreateLoot("GoldPurse", lv_p, 2.0, true, 100, RandomInt(20, 30));
    }
    if ((UnitGetCustomValue(lp_dyingUnit, 2) >= 3600.0)) {
        PlayerGroupLoopBegin(gv_teamData[gv_playerData[UnitGetOwner(lp_killingUnit)].lv_team].lv_members);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_UnlockRequirement(PlayerGroupLoopCurrent(), 1, 21);
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpellCasts
//--------------------------------------------------------------------------------------------------
void gf_SpellCast (unit lp_caster, fixed lp_cost) {
    // Implementation
    if (gf_UnitExists(lp_caster)) {
        if (((UnitGetOwner(lp_caster) >= 1) && (UnitGetOwner(lp_caster) <= gv_players))) {
            gv_playerData[UnitGetOwner(lp_caster)].lv_gameStats.lv_spellsCast += 1;
        }
        else {
        }
        gf_SpellbreakerHaste(lp_caster);
        gf_LeatherCoatHeal(lp_caster, lp_cost);
        gf_NightwispSynergy(lp_caster);
        gf_SpellbreakerTrigger(lp_caster);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LeatherCoatHeal
//--------------------------------------------------------------------------------------------------
void gf_LeatherCoatHeal (unit lp_caster, fixed lp_cost) {
    // Variable Declarations
    fixed lv_haelz;
    // Variable Initialization
    lv_haelz = (lp_cost * 0.75);
    // Implementation
    if ((UnitHasBehavior(lp_caster, "LeatherCoat") == true)) {
        gf_HealUnit(lp_caster, lp_caster, lv_haelz, true);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpellbreakerHaste
//--------------------------------------------------------------------------------------------------
void gf_SpellbreakerHaste (unit lp_caster) {
    // Implementation
    if ((UnitHasBehavior(lp_caster, "SpellbreakerArmor") == true)) {
        UnitBehaviorAdd(lp_caster, "SpellbreakerHaste", lp_caster, 1);
        gf_UpdateStatsAll(UnitGetOwner(lp_caster));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NightwispSynergy
//--------------------------------------------------------------------------------------------------
void gf_NightwispSynergy (unit lp_caster) {
    // Implementation
    UnitGroupLoopBegin(UnitGroupFilter("Nightwisp", c_playerAny, gv_pets[UnitGetOwner(lp_caster)], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitAbilityCheck(UnitGroupLoopCurrent(), "Synergy", true) == false)) {
            UnitCreateEffectUnit(lp_caster, "SynergyBeamSmall", UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "SynergyProc", lp_caster, 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpellbreakerTrigger
//--------------------------------------------------------------------------------------------------
void gf_SpellbreakerTrigger (unit lp_unit) {
    // Implementation
    if ((UnitHasBehavior(lp_unit, "SpellbreakerTrigger") == true)) {
        UnitBehaviorAdd(lp_unit, "Spellbroken", lp_unit, 1);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HealUnit
//--------------------------------------------------------------------------------------------------
void gf_HealUnit (unit lp_target, unit lp_source, fixed lp_amount, bool lp_showText) {
    // Variable Declarations
    unit lv_target;
    fixed lv_healAmount;
    fixed lv_modifier;
    // Variable Initialization
    lv_target = lp_target;
    lv_healAmount = lp_amount;
    lv_modifier = 1.0;
    // Implementation
    if ((UnitHasBehavior(lv_target, "GravesingersClawDebuff") == true)) {
        lv_modifier -= gv_gravesingerHealFactor;
    }
    else {
    }
    if ((UnitHasBehavior(lp_source, "LeatherCoat") == true)) {
        lv_modifier += 0.1;
    }
    else {
    }
    lv_modifier = libNtve_gf_ArithmeticRealClamp(lv_modifier, 0.0, 100.0);
    lv_healAmount *= lv_modifier;
    UnitSetPropertyFixed(lv_target, c_unitPropLife, (UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent) + lv_healAmount));
    if ((lp_showText == true)) {
        TextExpressionSetToken("Param/Expression/0F08CE5A", "A", StringExternal("Param/Value/7AC70323"));
        TextExpressionSetToken("Param/Expression/0F08CE5A", "B", FixedToText(Round(lv_healAmount), 0));
        gf_Advancedtag(lv_target, UnitGetOwner(lp_source), TextExpressionAssemble("Param/Expression/0F08CE5A"), 2.0, 24);
    }
    else {
    }
    if ((lv_target == gv_wizard) && (UnitGetPropertyFixed(gv_wizard, c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
        gf_WizardHealed(lv_target, lp_source);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GuardianSpiritLoop
//--------------------------------------------------------------------------------------------------
trigger auto_gf_GuardianSpiritLoop_Trigger = null;
unit auto_gf_GuardianSpiritLoop_lp_unit;
void gf_GuardianSpiritLoop (unit lp_unit) {
    auto_gf_GuardianSpiritLoop_lp_unit = lp_unit;
    if (auto_gf_GuardianSpiritLoop_Trigger == null) {
        auto_gf_GuardianSpiritLoop_Trigger = TriggerCreate("auto_gf_GuardianSpiritLoop_TriggerFunc");
    }
    TriggerExecute(auto_gf_GuardianSpiritLoop_Trigger, false, false);
}
bool auto_gf_GuardianSpiritLoop_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_GuardianSpiritLoop_lp_unit;
    // Variable Declarations
    const fixed lv_spiritZOffset = 0.5;
    const fixed lv_spiritInterval = 0.0625;
    fixed lv_rotationSpeed;
    unit lv_spirit;
    fixed lv_distanceOffset;
    fixed lv_startingAngle;
    fixed lv_angle;
    unit lv_sacrificeTarget;
    int lv_checkInterval;
    fixed lv_healAmount;
    bool lv_sacrificed;
    // Variable Initialization
    lv_startingAngle = libNtve_gf_RandomAngle();
    // Implementation
    UnitCreate(1, "GuardianSpirit", 0, UnitGetOwner(lp_unit), UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
    lv_spirit = UnitLastCreated();
    UnitSetHeight(lv_spirit, (WorldHeight(c_heightMapGround, UnitGetPosition(lp_unit)) + lv_spiritZOffset), 0.0);
    while ((lv_sacrificed == false) && (lp_unit != null) && (lv_spirit != null) && (UnitHasBehavior(lp_unit, "GuardianSpirit") == true)) {
        lv_angle += (4.0 + lv_rotationSpeed);
        lv_rotationSpeed += 0.01;
        if ((lv_angle >= 360.0)) {
            lv_angle = (lv_angle - 360.0);
        }
        else {
        }
        lv_distanceOffset = libNtve_gf_ArithmeticRealClamp((lv_distanceOffset + 0.05), 0.0, 1.5);
        if (lv_checkInterval >= 8) {
            lv_checkInterval = 1;
        }
        else {
            lv_checkInterval = lv_checkInterval + 1;
        }
        if ((lv_checkInterval == 1)) {
            lv_sacrificeTarget = gf_NearbySacrificeTarget(lp_unit);
        }
        else {
        }
        if ((lv_sacrificeTarget != null) && (UnitGetPropertyFixed(lv_sacrificeTarget, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_spirit), UnitGetPosition(lv_sacrificeTarget)) <= 0.5)) {
                if ((UnitGetPropertyFixed(lv_sacrificeTarget, c_unitPropLifePercent, c_unitPropCurrent) < 10.0) && (UnitGetType(lv_sacrificeTarget) == "Kobold") && (lv_sacrificeTarget != lp_unit)) {
                    gf_UnlockRequirement(UnitGetOwner(lp_unit), 1, 9);
                }
                else {
                }
                lv_healAmount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GuardianSpiritStats", "AttributeBonus[Biological]", UnitGetOwner(lp_unit)));
                gf_HealUnit(lv_sacrificeTarget, lp_unit, lv_healAmount, true);
                if ((UnitHasBehavior(lp_unit, "ConjurersCharm") == true)) {
                    UnitBehaviorAdd(lv_sacrificeTarget, "GuardianSpiritLingering", lp_unit, 1);
                }
                else {
                }
                libNtve_gf_AttachActorToUnit(lv_sacrificeTarget, "GuardianSpiritHealImpact", "Ref_Origin");
                lv_sacrificed = true;
            }
            else {
                UnitSetPosition(lv_spirit, PointWithOffsetPolar(UnitGetPosition(lv_spirit), 0.3, AngleBetweenPoints(UnitGetPosition(lv_spirit), UnitGetPosition(lv_sacrificeTarget))), true);
                lv_angle = (AngleBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_spirit)) - lv_startingAngle);
            }
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_spirit)) > 2.5)) {
                UnitSetPosition(lv_spirit, PointWithOffsetPolar(UnitGetPosition(lv_spirit), 0.2, AngleBetweenPoints(UnitGetPosition(lv_spirit), UnitGetPosition(lp_unit))), true);
                lv_angle = (AngleBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_spirit)) - lv_startingAngle);
            }
            else {
                UnitSetPosition(lv_spirit, PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_distanceOffset, (lv_startingAngle + lv_angle)), true);
            }
        }
        UnitSetHeight(lv_spirit, (WorldHeight(c_heightMapGround, UnitGetPosition(lp_unit)) + lv_spiritZOffset), lv_spiritInterval);
        Wait(lv_spiritInterval, c_timeGame);
    }
    UnitKill(lv_spirit);
    UnitBehaviorRemove(lp_unit, "GuardianSpirit", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NearbySacrificeTarget
//--------------------------------------------------------------------------------------------------
unit gf_NearbySacrificeTarget (unit lp_unit) {
    // Variable Declarations
    unitgroup lv_kobolds;
    unit lv_target;
    // Variable Initialization
    lv_kobolds = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", UnitGetOwner(lp_unit), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_unit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Implementation
    UnitGroupLoopBegin(lv_kobolds);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) > 40.0)) {
            UnitGroupRemove(lv_kobolds, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    lv_target = UnitGroupClosestToPoint(lv_kobolds, UnitGetPosition(lp_unit));
    if ((lv_target == null) && (gv_questIndexActive == 12)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_wizard)) <= gv_interactRadius)) {
            lv_target = gv_wizard;
        }
        else {
        }
    }
    else {
    }
    if ((lv_target == null) && (gv_questIndexActive == 14)) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_unit), UnitGetOwner(gv_exile), 0) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_exile)) <= 12.0) && (UnitGetPropertyFixed(gv_exile, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0)) {
            lv_target = gv_exile;
        }
        else {
        }
    }
    else {
    }
    return lv_target;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DayNightCyclePaused
//--------------------------------------------------------------------------------------------------
bool gf_DayNightCyclePaused () {
    // Variable Declarations
    bool lv_value;
    // Variable Initialization
    // Implementation
    if ((((gv_tutorial == true) && (gv_pauseNextDusk == true) && (gv_dayNightCycle == (gv_dayDuration - gv_transitionTime))) || ((gv_tutorial == true) && (gv_pauseNextDawn == true) && (gv_dayNightCycle == ((gv_dayDuration + gv_nightDuration) - gv_transitionTime))))) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DayNightCycle
//--------------------------------------------------------------------------------------------------
void gf_DayNightCycle () {
    // Implementation
    gf_UpdateDayTimer(gv_dayNightCycle);
    if ((gv_dayNightCycle == 1.0)) {
        gf_DiscoverDeposits();
    }
    else if ((gv_dayNightCycle == 2.0)) {
        gf_DiscoverBushes();
    }
    else if ((gv_dayNightCycle == (gv_dayDuration - (gv_transitionTime / 2.0)))) {
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_TravelingWizards(PlayerGroupLoopCurrent(), false);
        }
        PlayerGroupLoopEnd();
        gf_SetFogOpacity(gv_dayFogDensity, gv_nightFogDensity, gv_fogDensityTransitionTime);
        if ((gv_questIndexActive == 7) && (gv_deadnightPhase == 1)) {
            gf_DeadnightinitPhase2((gv_transitionTime / 2.0));
        }
        else {
            gf_NewLightset("MeinhoffCampaignNight", gv_transitionTime, true, -1);
        }
    }
    else if ((gv_dayNightCycle == gv_dayDuration)) {
        gf_NightHappened();
    }
    else if ((gv_dayNightCycle == ((gv_dayDuration + gv_nightDuration) - (gv_transitionTime / 2.0)))) {
        if ((gv_questIndexActive == 10)) {
            gf_NewLightset("Snow", gv_transitionTime, true, -1);
        }
        else {
            gf_NewLightset("Haven", gv_transitionTime, true, -1);
        }
        gf_SetFogOpacity(gv_nightFogDensity, gv_dayFogDensity, gv_fogDensityTransitionTime);
    }
    else if ((gv_dayNightCycle == (gv_dayDuration + gv_nightDuration))) {
        gf_MorningHappened();
    }
    if ((gv_dayNightCycle >= (gv_dayDuration + gv_nightDuration))) {
        gv_dayNightCycle = 0.0;
    }
    else {
        gv_dayNightCycle += gv_periodInterval;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateDayTimer
//--------------------------------------------------------------------------------------------------
void gf_UpdateDayTimer (fixed lp_cycle) {
    // Implementation
    if ((gv_dayNight == 1)) {
        libNtve_gf_SetDialogItemCurrentValue(gv_dayTimerProgress, ((lp_cycle / gv_dayDuration) * 100.0), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_dayTimerProgress, (StringExternal("Param/Value/1015D506") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), (FixedToInt(gv_dayDuration) - FixedToInt(lp_cycle)))), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemCurrentValue(gv_dayTimerProgress, (((lp_cycle - gv_dayDuration) / gv_nightDuration) * 100.0), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_dayTimerProgress, (StringExternal("Param/Value/81AC4C59") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), (FixedToInt(gv_nightDuration) - FixedToInt((lp_cycle - gv_dayDuration))))), PlayerGroupAll());
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TravelingWizards
//--------------------------------------------------------------------------------------------------
void gf_TravelingWizards (int lp_player, bool lp_guaranteed) {
    // Variable Declarations
    unitgroup lv_taverns;
    int lv_wizards;
    fixed lv_roll;
    fixed lv_chance;
    // Variable Initialization
    lv_taverns = UnitGroupEmpty();
    // Implementation
    if ((gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerArcaneSanctum == false)) {
        lv_taverns = UnitGroup("Tavern", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupLoopBegin(lv_taverns);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((StringSub(gv_perks[lp_player], 14, 14) == "1") && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 30)) {
                lv_chance = 100.0;
            }
            else {
                lv_roll = libNtve_gf_RandomPercent();
                lv_chance = (40.0 + (libNtve_gf_ArithmeticRealClamp(IntToFixed(PlayerGetPropertyInt(lp_player, c_playerPropMinerals)), 0.0, 120.0) / 2.0));
            }
            if (((lv_roll <= lv_chance) || (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "KoboldBotNormal") == true) || (lp_guaranteed == true) || (lp_player == 0))) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lp_player), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 100.00, 49.02), 3.0, 270.0);
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "TavernWizardApply", UnitGroupLoopCurrent());
                lv_wizards += 1;
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if ((StringSub(gv_perks[lp_player], 14, 14) == "1") && (lv_wizards == 1)) {
            SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/73AA127F"));
            gv_wizardVisitEveryNight[lp_player] = false;
        }
        else if ((StringSub(gv_perks[lp_player], 14, 14) == "1") && (lv_wizards > 1)) {
            SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/F84CF4F5"));
        }
        else if ((lv_wizards == 1)) {
            SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/67CBE1FD"));
            gv_wizardVisitEveryNight[lp_player] = false;
        }
        else if ((lv_wizards > 1) && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) < 100)) {
            SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/5E2BFA9C"));
        }
        else if ((lv_wizards > 1) && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) > 100)) {
            SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/709A3C33"));
        }
        else if (true) {
            gv_wizardVisitEveryNight[lp_player] = false;
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MorningHappened
//--------------------------------------------------------------------------------------------------
void gf_MorningHappened () {
    // Variable Declarations
    int lv_neutralHostile;
    // Variable Initialization
    lv_neutralHostile = 15;
    // Implementation
    gv_day += 1;
    gv_dayNight = 1;
    gv_b_Day = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/460543DF") + (IntToText(gv_day) + StringExternal("Param/Value/6D94F055"))));
    gf_SetScaledStats("MapleTree", 0);
    gf_SetScaledStats("ElderTree", 0);
    gf_SetScaledStats("Stag", 0);
    GameTimeOfDaySet("12:00:00");
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_UpdatePetStats(PlayerGroupLoopCurrent());
        if ((gv_skillForaging[PlayerGroupLoopCurrent()] < 25)) {
            gf_ModifyUnitSight("Kobold", PlayerGroupLoopCurrent(), 2.0);
        }
        else {
        }
        gf_Banker(PlayerGroupLoopCurrent());
        if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) && gf_UnitExists(gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_watchTower) && (gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_watchTowerCanteen == true)) {
            gf_CanteenFood(gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_watchTower, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    gv_nightcrawlerQuota = 0;
    UnitGroupLoopBegin(UnitGroup("Nightcrawler", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lyote", lv_neutralHostile, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Ghoul", lv_neutralHostile, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "GhoulBurrow", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Tavern", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gv_teamData[gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_team].lv_watchTowerArcaneSanctum == false)) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "TavernWizard", 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Fortress", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "WatchTowerNightLight", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Tavern", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "GenericNightBehavior", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("LorenorStatue", "", "", UnitGetOwner(UnitGroupLoopCurrent()), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_stamina += 100.0;
            gf_Quicktag(UnitGroupLoopCurrent(), StringExternal("Param/Value/15ED2E7F"), 3.0, 24);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Inspired", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((gv_questIndexActive == 7) && (gv_deadnightPhase == 3)) {
        gv_questIndexActive = 0;
        gv_questActive = false;
        gv_questCompleted[7] = true;
        UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "DeadnightActive", 1);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Monstrosity", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        ObjectiveDestroy(gv_questObjective);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, gv_musicVolume, 0.0);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        gf_QuestFinishEvents(PlayerGroupActive(), PlayerGroupEmpty());
        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    }
    else {
        SoundPlay(SoundLink("DawnCue", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    if ((gv_raining == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Haven", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else {
    }
    if ((gv_tutorial == true)) {
        TriggerExecute(gt_TutorialPart9, true, false);
    }
    else {
        gf_RainInitialize(RandomInt(2, 60), RandomInt(40, 240), 11.0);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NightHappened
//--------------------------------------------------------------------------------------------------
void gf_NightHappened () {
    // Variable Declarations
    int lv_neutral;
    int lv_neutralHostile;
    // Variable Initialization
    lv_neutralHostile = 15;
    // Implementation
    if ((gv_questIndexActive == 7) && (gv_deadnightPhase == 2)) {
        gf_DeadnightinitPhase3();
    }
    else {
        if ((gv_tutorial == false)) {
            gv_nightDuration = 80.0;
        }
        else {
            if ((gv_day == 2)) {
                gv_nightDuration = 140.0;
            }
            else {
                gv_nightDuration = 40.0;
            }
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B22529CD"));
        SoundPlay(SoundLink("DuskCue", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    GameTimeOfDaySet("00");
    gv_dayNight = 2;
    gv_b_Day = false;
    gf_NightlyBeerCasks();
    gv_nightcrawlerQuota = (UnitGroupCount(UnitGroup("StoneDeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) / 6);
    UnitGroupLoopBegin(UnitGroup("Fortress", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "WatchTowerLookout") == true)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "WatchTowerNightLight", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Tavern", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "GenericNightBehavior", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Inspired", 1);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_UpdatePetStats(PlayerGroupLoopCurrent());
        gf_InGameHint("night", PlayerGroupLoopCurrent());
        if ((gv_skillForaging[PlayerGroupLoopCurrent()] < 25)) {
            gf_ModifyUnitSight("Kobold", PlayerGroupLoopCurrent(), -2.0);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    gf_SetScaledStats("Dog", lv_neutral);
    gf_SetScaledStats("Lyote", lv_neutralHostile);
    gf_SetScaledStats("Bear", lv_neutralHostile);
    gf_SetScaledStats("FrostBear", lv_neutralHostile);
    if ((gv_raining == false)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Hanson01Night", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else {
    }
    if ((gv_tutorial == false)) {
        gf_RainInitialize(RandomInt(2, 60), RandomInt(40, 240), 11.0);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateWolfsbanePlayer
//--------------------------------------------------------------------------------------------------
void gf_UpdateWolfsbanePlayer (int lp_player) {
    // Implementation
    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "Wolfsbane") == true) && (gv_dayNight == 2)) {
        UnitCreateEffectUnit(gv_playerData[lp_player].lv_kobold, "WolfsbaneStrongerApply", gv_playerData[lp_player].lv_kobold);
    }
    else {
    }
    gv_playerData[lp_player].lv_gameStats.lv_wolvesKilled += 1;
    if ((gv_playerData[lp_player].lv_gameStats.lv_wolvesKilled > gv_playerData[gv_wolfsbanePlayer].lv_gameStats.lv_wolvesKilled)) {
        UnitBehaviorRemove(gv_playerData[gv_wolfsbanePlayer].lv_kobold, "WolfsbaneTitle", 1);
        gf_Quicktag(gv_playerData[gv_wolfsbanePlayer].lv_kobold, StringExternal("Param/Value/D7C52291"), 2.0, 24);
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "WolfsbaneTitle", gv_playerData[lp_player].lv_kobold, 1);
        gf_Quicktag(gv_playerData[lp_player].lv_kobold, StringExternal("Param/Value/09D04C19"), 2.0, 24);
        gv_wolfsbanePlayer = lp_player;
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetFogOpacity
//--------------------------------------------------------------------------------------------------
trigger auto_gf_SetFogOpacity_Trigger = null;
fixed auto_gf_SetFogOpacity_lp_opacityOriginal;
fixed auto_gf_SetFogOpacity_lp_opacityTarget;
fixed auto_gf_SetFogOpacity_lp_fadeDuration;
void gf_SetFogOpacity (fixed lp_opacityOriginal, fixed lp_opacityTarget, fixed lp_fadeDuration) {
    auto_gf_SetFogOpacity_lp_opacityOriginal = lp_opacityOriginal;
    auto_gf_SetFogOpacity_lp_opacityTarget = lp_opacityTarget;
    auto_gf_SetFogOpacity_lp_fadeDuration = lp_fadeDuration;
    if (auto_gf_SetFogOpacity_Trigger == null) {
        auto_gf_SetFogOpacity_Trigger = TriggerCreate("auto_gf_SetFogOpacity_TriggerFunc");
    }
    TriggerExecute(auto_gf_SetFogOpacity_Trigger, false, false);
}
bool auto_gf_SetFogOpacity_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_opacityOriginal = auto_gf_SetFogOpacity_lp_opacityOriginal;
    fixed lp_opacityTarget = auto_gf_SetFogOpacity_lp_opacityTarget;
    fixed lp_fadeDuration = auto_gf_SetFogOpacity_lp_fadeDuration;
    // Variable Declarations
    fixed lv_opacity;
    fixed lv_changePerInterval;
    bool lv_positive;
    // Variable Initialization
    lv_opacity = lp_opacityOriginal;
    lv_changePerInterval = (0.0 - (AbsF((lp_opacityOriginal - lp_opacityTarget)) / (8.0 * lp_fadeDuration)));
    // Implementation
    if ((lp_opacityOriginal < lp_opacityTarget)) {
        lv_positive = true;
        lv_changePerInterval = AbsF(lv_changePerInterval);
    }
    else {
    }
    while ((((lv_opacity < lp_opacityTarget) && (lv_positive == true)) || ((lv_opacity > lp_opacityTarget) && (lv_positive == false)))) {
        lv_opacity += lv_changePerInterval;
        FogSetDensity(lv_opacity);
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RainInitialize
//--------------------------------------------------------------------------------------------------
void gf_RainInitialize (fixed lp_wait, fixed lp_duration, fixed lp_chance) {
    // Variable Declarations
    fixed lv_rainChanceModifier;
    fixed lv_rainDurationModifier;
    // Variable Initialization
    lv_rainChanceModifier = 1.0;
    lv_rainDurationModifier = 1.0;
    // Implementation
    UnitGroupLoopBegin(gf_UnitsInUnitGroupWithBuff(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), "StormwizardsRobes"));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_rainChanceModifier += 0.25;
        lv_rainDurationModifier += 0.1;
    }
    UnitGroupLoopEnd();
    if ((gv_raining == false) && (gv_winter == false) && (gv_rainingSoon == false) && (gv_winterSoon == false) && (libNtve_gf_RandomPercent() <= (lp_chance * lv_rainChanceModifier))) {
        gv_rainingSoon = true;
        gv_rainDelayCounter = lp_wait;
        gv_rainCounter = (lp_duration * lv_rainDurationModifier);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RainLoop
//--------------------------------------------------------------------------------------------------
void gf_RainLoop () {
    int auto9236DC58_ae;
    int auto9236DC58_ai;
    int autoAF646891_ae;
    int autoAF646891_ai;
    int auto8FF1BDA9_ae;
    int auto8FF1BDA9_ai;
    int auto9BED1912_ae;
    int auto9BED1912_ai;
    int autoB0A7A97C_ae;
    int autoB0A7A97C_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    fixed lv_f;
    // Variable Initialization
    lv_f = libNtve_gf_RandomAngle();
    // Implementation
    if ((gv_raining == false)) {
        if ((gv_rainingSoon == true)) {
            if ((gv_rainDelayCounter <= 0)) {
                gv_rainingSoon = false;
                gv_raining = true;
                gv_rainJustStarted = true;
            }
            else {
                gv_rainDelayCounter -= gv_periodInterval;
            }
        }
        else {
        }
    }
    else {
        if ((gv_rainJustStarted == true)) {
            gv_rainJustStarted = false;
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_InGameHint("rain", PlayerGroupLoopCurrent());
            }
            PlayerGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Raining", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
            auto9BED1912_ae = gv_weatherSize;
            auto9BED1912_ai = 1;
            lv_a = 0;
            for ( ; ( (auto9BED1912_ai >= 0 && lv_a <= auto9BED1912_ae) || (auto9BED1912_ai <= 0 && lv_a >= auto9BED1912_ae) ) ; lv_a += auto9BED1912_ai ) {
                autoB0A7A97C_ae = gv_weatherSize;
                autoB0A7A97C_ai = 1;
                lv_b = 0;
                for ( ; ( (autoB0A7A97C_ai >= 0 && lv_b <= autoB0A7A97C_ae) || (autoB0A7A97C_ai <= 0 && lv_b >= autoB0A7A97C_ae) ) ; lv_b += autoB0A7A97C_ai ) {
                    lv_p = Point((10 + (19 * lv_a)), (10 + (19 * lv_b)));
                    libNtve_gf_CreateActorAtPoint("RainEmitterLarge", lv_p);
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((lv_f + RandomFixed(-20.0, 20.0))));
                    gv_rainEmitter[lv_a][lv_b] = libNtve_gf_ActorLastCreated();
                }
            }
        }
        else {
            if ((gv_rainCounter > 0.0)) {
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) && ((UnitHasBehavior(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "Sheltered") == true) || (UnitHasBehavior(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "WatchTowerGarrisonCargoBuff") == true))) {
                        if ((gv_rainAmbience[PlayerGroupLoopCurrent()] != 2)) {
                            SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryAmbience, "RainIndoors", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                            gv_rainAmbience[PlayerGroupLoopCurrent()] = 2;
                        }
                        else {
                        }
                    }
                    else {
                        UnitCreateEffectUnit(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "RainApply", gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
                        if ((gv_rainAmbience[PlayerGroupLoopCurrent()] != 1)) {
                            SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryAmbience, "RainOutdoors", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                            gv_rainAmbience[PlayerGroupLoopCurrent()] = 1;
                        }
                        else {
                        }
                    }
                }
                PlayerGroupLoopEnd();
                if ((libNtve_gf_RandomPercent() <= 5.0)) {
                    SoundPlay(SoundLink("DistantThunder", -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                }
                gv_rainCounter -= gv_periodInterval;
            }
            else {
                UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), "Raining", 1);
                }
                UnitGroupLoopEnd();
                auto9236DC58_ae = gv_players;
                auto9236DC58_ai = 1;
                lv_a = 1;
                for ( ; ( (auto9236DC58_ai >= 0 && lv_a <= auto9236DC58_ae) || (auto9236DC58_ai <= 0 && lv_a >= auto9236DC58_ae) ) ; lv_a += auto9236DC58_ai ) {
                    gv_rainAmbience[lv_a] = 0;
                }
                autoAF646891_ae = gv_weatherSize;
                autoAF646891_ai = 1;
                lv_a = 0;
                for ( ; ( (autoAF646891_ai >= 0 && lv_a <= autoAF646891_ae) || (autoAF646891_ai <= 0 && lv_a >= autoAF646891_ae) ) ; lv_a += autoAF646891_ai ) {
                    auto8FF1BDA9_ae = gv_weatherSize;
                    auto8FF1BDA9_ai = 1;
                    lv_b = 0;
                    for ( ; ( (auto8FF1BDA9_ai >= 0 && lv_b <= auto8FF1BDA9_ae) || (auto8FF1BDA9_ai <= 0 && lv_b >= auto8FF1BDA9_ae) ) ; lv_b += auto8FF1BDA9_ai ) {
                        ActorSend(gv_rainEmitter[lv_a][lv_b], "Destroy");
                    }
                }
                if ((gv_dayNight == 1)) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Haven", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Hanson01Night", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                gv_raining = false;
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NewLightSet
//--------------------------------------------------------------------------------------------------
trigger auto_gf_NewLightset_Trigger = null;
string auto_gf_NewLightset_lp_lightset;
fixed auto_gf_NewLightset_lp_duration;
bool auto_gf_NewLightset_lp_waitforit;
int auto_gf_NewLightset_lp_timeofday;
void gf_NewLightset (string lp_lightset, fixed lp_duration, bool lp_waitforit, int lp_timeofday) {
    auto_gf_NewLightset_lp_lightset = lp_lightset;
    auto_gf_NewLightset_lp_duration = lp_duration;
    auto_gf_NewLightset_lp_waitforit = lp_waitforit;
    auto_gf_NewLightset_lp_timeofday = lp_timeofday;
    if (auto_gf_NewLightset_Trigger == null) {
        auto_gf_NewLightset_Trigger = TriggerCreate("auto_gf_NewLightset_TriggerFunc");
    }
    TriggerExecute(auto_gf_NewLightset_Trigger, false, false);
}
bool auto_gf_NewLightset_TriggerFunc (bool testConds, bool runActions) {
    string lp_lightset = auto_gf_NewLightset_lp_lightset;
    fixed lp_duration = auto_gf_NewLightset_lp_duration;
    bool lp_waitforit = auto_gf_NewLightset_lp_waitforit;
    int lp_timeofday = auto_gf_NewLightset_lp_timeofday;
    // Implementation
    if ((lp_waitforit == false)) {
        if ((gv_lightsetTransition == false)) {
            if (((lp_timeofday == -1) || (lp_timeofday == gv_dayNight))) {
                GameSetLighting(lp_lightset, lp_duration);
                gv_lightsetTransition = true;
                Wait(lp_duration, c_timeGame);
                gv_lightsetTransition = false;
            }
            else {
            }
        }
        else {
        }
    }
    else {
        while ((gv_lightsetTransition == true)) {
            Wait(1.0, c_timeGame);
        }
        if (((lp_timeofday == -1) || (lp_timeofday == gv_dayNight))) {
            GameSetLighting(lp_lightset, lp_duration);
            gv_lightsetTransition = true;
            Wait(lp_duration, c_timeGame);
            gv_lightsetTransition = false;
        }
        else {
        }
    }
    return true;
}   

//--------------------------------------------------------------------------------------------------
// Custom Script: RandomPathablePoint
//--------------------------------------------------------------------------------------------------
point gf_RandomPathablePoint (region lp_region) {
    // Variable Declarations
    point lv_p;
    int lv_failsafe;
    // Variable Initialization
    lv_failsafe = 25;
    // Implementation
    while ((lv_p == null)) {
        lv_p = RegionRandomPoint(lp_region);
        lv_failsafe -= 1;
        if ((PathingType(lv_p) == c_pathingGround) && (RegionContainsPoint(gv_regionArena, lv_p) == false)) {
        }
        else {
            if ((lv_failsafe > 0)) {
                lv_p = null;
            }
            else {
                lv_p = RegionGetCenter(lp_region);
            }
        }
    }
    return lv_p;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RandomPathablePointSansVision
//--------------------------------------------------------------------------------------------------
point gf_RandomPathablePointSansVision (region lp_region) {
    // Variable Declarations
    point lv_p;
    int lv_failsafe;
    // Variable Initialization
    lv_failsafe = 25;
    // Implementation
    while ((lv_p == null)) {
        lv_p = RegionRandomPoint(lp_region);
        lv_failsafe -= 1;
        if ((PathingType(lv_p) == c_pathingGround) && (RegionContainsPoint(gv_regionArena, lv_p) == false) && (gf_PointVisibleToAnyone(lv_p) == false)) {
        }
        else {
            if ((lv_failsafe > 0)) {
                lv_p = null;
            }
            else {
                lv_p = gf_RandomPathablePoint(lp_region);
            }
        }
    }
    return lv_p;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PointVisibleToAnyone
//--------------------------------------------------------------------------------------------------
bool gf_PointVisibleToAnyone (point lp_point) {
    int auto2E6D6C8B_ae;
    int auto2E6D6C8B_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    auto2E6D6C8B_ae = gv_players;
    auto2E6D6C8B_ai = 1;
    lv_a = 1;
    for ( ; ( (auto2E6D6C8B_ai >= 0 && lv_a <= auto2E6D6C8B_ae) || (auto2E6D6C8B_ai <= 0 && lv_a >= auto2E6D6C8B_ae) ) ; lv_a += auto2E6D6C8B_ai ) {
        if ((VisIsVisibleForPlayer(lv_a, lp_point) == true)) {
            return true;
        }
        else {
        }
    }
    return false;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateResourceReservesSingle
//--------------------------------------------------------------------------------------------------
void gf_UpdateResourceReservesSingle (unit lp_unit, unit lp_item, bool lp_negative) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((gv_playerData[lv_i].lv_alive == true)) {
        gf_UpdateResourceReserversCond(lv_i, lp_item, lp_negative);
        gf_MiningExpertiseIII(lp_unit);
        if ((gv_playerData[lv_i].lv_isAI == true)) {
            gf_UpdateSupplies(lv_i);
            gv_aIData[lv_i].lv_smithyDesire = gf_WantedItemType(lp_unit, "Smithy");
            gv_aIData[lv_i].lv_benchDesire = gf_WantedItemType(lp_unit, "Workbench");
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateResourceReserversCond
//--------------------------------------------------------------------------------------------------
void gf_UpdateResourceReserversCond (int lp_player, unit lp_item, bool lp_negative) {
    // Variable Declarations
    int lv_modifier;
    string lv_itemType;
    int lv_b;
    // Variable Initialization
    lv_modifier = 1;
    lv_itemType = UnitGetType(lp_item);
    // Implementation
    if ((lp_negative == true)) {
        lv_modifier = -1;
        UnitGroupRemove(gv_aIData[lp_player].lv_tradeItems, lp_item);
    }
    else {
    }
    if ((lv_itemType == "HandfulofBerries")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Biological]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_handfulofBerries, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
    }
    else if ((lv_itemType == "RawLamb")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Armored]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_rawLamb, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodRaw, lp_negative);
    }
    else if ((lv_itemType == "RawPheasant")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Heroic]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_rawPheasant, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodRaw, lp_negative);
    }
    else if ((lv_itemType == "RawWolfMeat")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Hover]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Hover]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_rawWolf, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodRaw, lp_negative);
    }
    else if ((lv_itemType == "RawStagMeat")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_rawStag, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodRaw, lp_negative);
    }
    else if ((lv_itemType == "WolfSteak")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_wolfSteak, lp_negative);
    }
    else if ((lv_itemType == "SpicedLambFeast")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_lambFeast, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
    }
    else if ((lv_itemType == "SmokedLambSirloin")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
    }
    else if ((lv_itemType == "RoastedPheasantWithBerrySauce")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
    }
    else if ((lv_itemType == "RoastedLamb")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_roastedLamb, lp_negative);
    }
    else if ((lv_itemType == "GrilledWolfEntrecote")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_wolfEntrecote, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
    }
    else if ((lv_itemType == "BeerBraisedPheasant")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_beerPhez, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
    }
    else if ((lv_itemType == "StagStew")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
    }
    else if (((lv_itemType == "AlbinoCavefish") || (lv_itemType == "BlindRainfish") || (lv_itemType == "FireAmmonite") || (lv_itemType == "ForestTrout") || (lv_itemType == "GiantSunfish") || (lv_itemType == "HighlandGuppy") || (lv_itemType == "JewelDanio") || (lv_itemType == "SlipperyEel") || (lv_itemType == "StripedLurker") || (lv_itemType == "WaterScorpion"))) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
    }
    else if ((lv_itemType == "Beer")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Hover]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Hover]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_beer, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
    }
    else if ((lv_itemType == "SpicyHerbs")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Light]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Light]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_spicyHerbs, lp_negative);
    }
    else if ((lv_itemType == "LambentSunflower")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Armored]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_sunflowers, lp_negative);
    }
    else if ((lv_itemType == "Sageberry")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Massive]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Massive]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_sageberries, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_consumables, lp_negative);
    }
    else if ((lv_itemType == "Lumber")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Armored]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_lumber, lp_negative);
    }
    else if ((lv_itemType == "LumberParts")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_lumberParts, lp_negative);
    }
    else if ((lv_itemType == "Stone")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Biological]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_stone, lp_negative);
    }
    else if ((lv_itemType == "Leather")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Heroic]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_leather, lp_negative);
    }
    else if ((lv_itemType == "Wool")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Hover]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Hover]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_wool, lp_negative);
    }
    else if ((lv_itemType == "IronOre")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Light]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Light]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_ironOre, lp_negative);
    }
    else if ((lv_itemType == "Shadowstone")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Biological]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_shadowstone, lp_negative);
    }
    else if ((lv_itemType == "RadiantGem")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Heroic]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_radiantGem, lp_negative);
    }
    else if ((lv_itemType == "MurlocSkull")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Massive]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Massive]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_murlocSkulls, lp_negative);
    }
    else if ((lv_itemType == "InfusedLumber")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Mechanical]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Mechanical]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_infusedLumber, lp_negative);
    }
    else if ((lv_itemType == "BearPelt")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Psionic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Psionic]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_bearPelts, lp_negative);
    }
    else if ((lv_itemType == "WarmWoolTunic")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves3", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves3", "AttributeBonus[Armored]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_warmWoolTunics, lp_negative);
    }
    else if ((lv_itemType == "MurlocSkullFragment")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves3", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves3", "AttributeBonus[Biological]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_murlocSkullFragments, lp_negative);
    }
    else if ((lv_itemType == "SturdyWoodenStick")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StatsMaterialReserves3", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves3", "AttributeBonus[Heroic]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_sturdyWoodenSticks, lp_negative);
    }
    else if ((lv_itemType == "HuntsmansJacket")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_huntsmansJackets, lp_negative);
    }
    else if ((lv_itemType == "WhiteBearFang")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Armored]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_whiteBearFangs, lp_negative);
    }
    else if ((lv_itemType == "BoneTalisman")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Biological]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_boneTalismans, lp_negative);
    }
    else if ((lv_itemType == "TrollNoseBone")) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Heroic]", lp_player, IntToString((lv_b + lv_modifier)));
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_trollNoseBones, lp_negative);
    }
    else if ((lv_itemType == "Antlers")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_antlers, lp_negative);
    }
    else if ((lv_itemType == "DraughtofDecay")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_consumables, lp_negative);
    }
    else if ((lv_itemType == "ReapersHand")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_reapersHands, lp_negative);
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_consumables, lp_negative);
    }
    else if ((lv_itemType == "ObedienceRod")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_obedRods, lp_negative);
    }
    else if ((lv_itemType == "Candle")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_candles, lp_negative);
    }
    else if ((lv_itemType == "Lantern")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_lanterns, lp_negative);
    }
    else if ((lv_itemType == "SkeletalFinger")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_skeletalFingers, lp_negative);
    }
    else if ((lv_itemType == "BerserkersBattleAxe")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_berserkersBattleAxes, lp_negative);
    }
    else if ((lv_itemType == "SharpIronPickaxe")) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_sharpIronPickaxe, lp_negative);
    }
    else if (((lv_itemType == "FishingRod") || (lv_itemType == "EpicFishingRod"))) {
        gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_fishingRods, lp_negative);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AddRemoveUnitFromUnitGroup
//--------------------------------------------------------------------------------------------------
void gf_AddRemoveUnitFromUnitGroup (unit lp_unit, unitgroup lp_unitGroup, bool lp_negative) {
    // Implementation
    if ((lp_negative == true)) {
        UnitGroupRemove(lp_unitGroup, lp_unit);
    }
    else {
        UnitGroupAdd(lp_unitGroup, lp_unit);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MiningExpertiseIII
//--------------------------------------------------------------------------------------------------
void gf_MiningExpertiseIII (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((gv_skillMining[UnitGetOwner(lp_unit)] >= 25)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) > 0) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) > 0)) {
            UnitBehaviorAdd(lp_unit, "MiningExpertise", lp_unit, 1);
        }
        else {
            UnitBehaviorRemove(lp_unit, "MiningExpertise", 1);
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ClearResourceReserves
//--------------------------------------------------------------------------------------------------
void gf_ClearResourceReserves (int lp_player) {
    // Variable Declarations
    int lv_b;
    // Variable Initialization
    // Implementation
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_antlers);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_bearPelts);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_beer);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_beerPhez);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_boneTalismans);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_candles);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_consumables);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_food);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_foodCooked);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_foodRaw);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_handfulofBerries);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_huntsmansJackets);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_infusedLumber);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_ironOre);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_lambFeast);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_lanterns);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_leather);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_lumber);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_lumberParts);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_murlocSkullFragments);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_murlocSkulls);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_obedRods);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_radiantGem);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_rawLamb);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_rawPheasant);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_rawStag);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_rawWolf);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_reapersHands);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_sageberries);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_shadowstone);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_skeletalFingers);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_spicyHerbs);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_stone);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_sturdyWoodenSticks);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_sunflowers);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_trollNoseBones);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_warmWoolTunics);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_whiteBearFangs);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_wolfEntrecote);
    UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_wool);
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Armored]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Biological]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Heroic]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Hover]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Light]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Massive]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsFoodReserves", "AttributeBonus[Mechanical]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Armored]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Hover]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Armored]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Biological]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Heroic]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Hover]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves", "AttributeBonus[Light]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Biological]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Heroic]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Massive]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Mechanical]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves2", "AttributeBonus[Psionic]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Armored]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Biological]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "TrophyCount", "AttributeBonus[Heroic]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves3", "AttributeBonus[Armored]", lp_player, IntToString(lv_b));
    CatalogFieldValueSet(c_gameCatalogEffect, "StatsMaterialReserves3", "AttributeBonus[Biological]", lp_player, IntToString(lv_b));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateResourceTooltip
//--------------------------------------------------------------------------------------------------
void gf_UpdateResourceTooltip (unit lp_unit) {
    // Implementation
    if (gf_UnitExists(lp_unit)) {
        TextExpressionSetToken("Param/Expression/1CC5227B", "A", StringExternal("Param/Value/9A5EB282"));
        TextExpressionSetToken("Param/Expression/1CC5227B", "B", FixedToText(UnitGetCustomValue(lp_unit, 0), 0));
        TextExpressionSetToken("Param/Expression/1CC5227B", "C", StringExternal("Param/Value/A9ECB7AE"));
        UnitSetInfoText(lp_unit, StringExternal("Param/Value/DDC8FDEB"), TextExpressionAssemble("Param/Expression/1CC5227B"), StringExternal("Param/Value/2B9CFAED"));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SaveResources
//--------------------------------------------------------------------------------------------------
void gf_SaveResources (int lp_i) {
    // Variable Declarations
    string lv_keystring;
    string lv_floodstring;
    string lv_keystringRq;
    string lv_floodstringRq;
    // Variable Initialization
    lv_keystring = gf_GetRandom8String();
    lv_floodstring = gf_GetRandom8String();
    lv_keystringRq = gf_GetRandom8String();
    lv_floodstringRq = gf_GetRandom8String();
    // Implementation
    BankLoad("nostrobskalufs", lp_i);
    BankValueSetFromString(BankLastCreated(), "stats", "Y7rGzk0", gf_EncryptInt(gv_accwins[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 0), (gv_trollz - 0))), StringToInt(StringSub(lv_floodstring, 1, 1))));
    BankValueSetFromString(BankLastCreated(), "stats", "hhgh3hha", gf_EncryptInt(gv_acclosses[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 1), (gv_trollz - 1))), StringToInt(StringSub(lv_floodstring, 2, 2))));
    BankValueSetFromString(BankLastCreated(), "stats", "ni6u1rK", gf_EncryptInt(gv_acclvl[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 2), (gv_trollz - 2))), StringToInt(StringSub(lv_floodstring, 3, 3))));
    BankValueSetFromString(BankLastCreated(), "stats", "bJr0nQ2", gf_EncryptInt(gv_kobkills[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 3), (gv_trollz - 3))), StringToInt(StringSub(lv_floodstring, 4, 4))));
    BankValueSetFromString(BankLastCreated(), "stats", "norl0sP", gf_EncryptInt(gv_kobdeaths[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 4), (gv_trollz - 4))), StringToInt(StringSub(lv_floodstring, 5, 5))));
    BankValueSetFromString(BankLastCreated(), "stats", "xpJar65", gf_EncryptInt(gv_accxp[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 5), (gv_trollz - 5))), StringToInt(StringSub(lv_floodstring, 6, 6))));
    BankValueSetFromString(BankLastCreated(), "stats", "Uut1s3t", gf_EncryptInt(gv_conqpoints[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 6), (gv_trollz - 6))), StringToInt(StringSub(lv_floodstring, 7, 7))));
    BankValueSetFromString(BankLastCreated(), "stats", "gTl8zbk", gf_EncryptInt(gv_gladSpree[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 7), (gv_trollz - 7))), StringToInt(StringSub(lv_floodstring, 8, 8))));
    BankValueSetFromString(BankLastCreated(), "stats", "7HuRb8gn", lv_keystring);
    BankValueSetFromString(BankLastCreated(), "stats", "Jyr8GxL", lv_floodstring);
    BankValueSetFromString(BankLastCreated(), "stats", "RiBktos", gv_matchhistory[lp_i]);
    BankSave(BankLastCreated());
    gf_SaveSB3(lp_i);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateGold
//--------------------------------------------------------------------------------------------------
void gf_UpdateGold (int lp_player) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "GoldReserves", "Amount", lp_player, IntToString(PlayerGetPropertyInt(lp_player, c_playerPropMinerals)));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DiscoverDeposits
//--------------------------------------------------------------------------------------------------
void gf_DiscoverDeposits () {
    int autoA9F6F6BD_ae;
    int autoA9F6F6BD_ai;
    int auto1AF45301_ae;
    int auto1AF45301_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    fixed lv_depositFindAmount;
    unitgroup lv_depositCandidates;
    unit lv_chosenStone;
    int lv_index;
    // Variable Initialization
    lv_depositCandidates = UnitGroupEmpty();
    // Implementation
    autoA9F6F6BD_ae = gv_players;
    autoA9F6F6BD_ai = 1;
    lv_a = 1;
    for ( ; ( (autoA9F6F6BD_ai >= 0 && lv_a <= autoA9F6F6BD_ae) || (autoA9F6F6BD_ai <= 0 && lv_a >= autoA9F6F6BD_ae) ) ; lv_a += autoA9F6F6BD_ai ) {
        if ((gv_playerData[lv_a].lv_alive == true)) {
            lv_depositFindAmount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Heroic]", lv_a));
            if ((FixedToInt(lv_depositFindAmount) >= 1)) {
                lv_depositCandidates = UnitGroup("StoneDeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupAddUnitGroup(lv_depositCandidates, UnitGroup("GoldDeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupLoopBegin(lv_depositCandidates);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGroupHasUnit(gv_discoveredDepositsTeam[gf_GetTeamOfPlayer(lv_a)], UnitGroupLoopCurrent()) == true)) {
                        UnitGroupRemove(lv_depositCandidates, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if ((UnitGroupCount(lv_depositCandidates, c_unitCountAlive) > 0)) {
                    lv_index = 0;
                    auto1AF45301_ae = FixedToInt(lv_depositFindAmount);
                    auto1AF45301_ai = 1;
                    lv_b = 1;
                    for ( ; ( (auto1AF45301_ai >= 0 && lv_b <= auto1AF45301_ae) || (auto1AF45301_ai <= 0 && lv_b >= auto1AF45301_ae) ) ; lv_b += auto1AF45301_ai ) {
                        lv_chosenStone = UnitGroupClosestToPoint(lv_depositCandidates, UnitGetPosition(gv_playerData[lv_a].lv_kobold));
                        if (gf_UnitExists(lv_chosenStone)) {
                            VisRevealArea(lv_a, RegionCircle(UnitGetPosition(lv_chosenStone), 2.0), 1.0, false);
                            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_a), "PingSimple", UnitGetPosition(lv_chosenStone), Color(75.29, 75.29, 75.29), 5.0, 270.0);
                            PingSetScale(PingLastCreated(), 0.75);
                            UnitGroupRemove(lv_depositCandidates, lv_chosenStone);
                            UnitGroupAdd(gv_discoveredDepositsTeam[gf_GetTeamOfPlayer(lv_a)], lv_chosenStone);
                            gv_playerData[lv_a].lv_gameStats.lv_nodesDiscovered += 1;
                            lv_index += 1;
                        }
                        else {
                        }
                    }
                    gf_Quicktag(gv_playerData[lv_a].lv_kobold, (StringExternal("Param/Value/FE21D66D") + (IntToText(lv_index) + StringExternal("Param/Value/232D2C63"))), 2.0, 24);
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DiscoverBushes
//--------------------------------------------------------------------------------------------------
void gf_DiscoverBushes () {
    int auto0E5B3F22_ae;
    int auto0E5B3F22_ai;
    int auto2889B3D5_ae;
    int auto2889B3D5_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    fixed lv_bushFindAmount;
    unitgroup lv_bushCandidates;
    unit lv_chosenBush;
    int lv_index;
    // Variable Initialization
    lv_bushCandidates = UnitGroupEmpty();
    // Implementation
    auto0E5B3F22_ae = gv_players;
    auto0E5B3F22_ai = 1;
    lv_a = 1;
    for ( ; ( (auto0E5B3F22_ai >= 0 && lv_a <= auto0E5B3F22_ae) || (auto0E5B3F22_ai <= 0 && lv_a >= auto0E5B3F22_ae) ) ; lv_a += auto0E5B3F22_ai ) {
        if ((gv_playerData[lv_a].lv_alive == true)) {
            lv_bushFindAmount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Heroic]", lv_a));
            if ((FixedToInt(lv_bushFindAmount) >= 1)) {
                lv_bushCandidates = UnitGroup("BerryBush", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupAddUnitGroup(lv_bushCandidates, UnitGroup("CulinaryHerbBush", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupLoopBegin(lv_bushCandidates);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGroupHasUnit(gv_discoveredBushesTeam[gf_GetTeamOfPlayer(lv_a)], UnitGroupLoopCurrent()) == true)) {
                        UnitGroupRemove(lv_bushCandidates, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if ((UnitGroupCount(lv_bushCandidates, c_unitCountAlive) > 0)) {
                    lv_index = 0;
                    auto2889B3D5_ae = FixedToInt(lv_bushFindAmount);
                    auto2889B3D5_ai = 1;
                    lv_b = 1;
                    for ( ; ( (auto2889B3D5_ai >= 0 && lv_b <= auto2889B3D5_ae) || (auto2889B3D5_ai <= 0 && lv_b >= auto2889B3D5_ae) ) ; lv_b += auto2889B3D5_ai ) {
                        lv_chosenBush = UnitGroupClosestToPoint(lv_bushCandidates, UnitGetPosition(gv_playerData[lv_a].lv_kobold));
                        if (gf_UnitExists(lv_chosenBush)) {
                            VisRevealArea(lv_a, RegionCircle(UnitGetPosition(lv_chosenBush), 2.0), 1.0, false);
                            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_a), "PingSimple", UnitGetPosition(lv_chosenBush), Color(100.00, 100.00, 100.00), 5.0, 270.0);
                            PingSetScale(PingLastCreated(), 0.75);
                            UnitGroupRemove(lv_bushCandidates, lv_chosenBush);
                            UnitGroupAdd(gv_discoveredBushesTeam[gf_GetTeamOfPlayer(lv_a)], lv_chosenBush);
                            gv_playerData[lv_a].lv_gameStats.lv_nodesDiscovered += 1;
                            lv_index += 1;
                        }
                        else {
                        }
                    }
                    gf_Quicktag(gv_playerData[lv_a].lv_kobold, (StringExternal("Param/Value/EC7C8646") + (IntToText(lv_index) + StringExternal("Param/Value/F7AB3588"))), 2.0, 24);
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpawnBerries
//--------------------------------------------------------------------------------------------------
void gf_SpawnBerries (unit lp_bush) {
    int auto25FAC5F8_ae;
    int auto25FAC5F8_ai;
    int auto96D7F99C_ae;
    int auto96D7F99C_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    auto25FAC5F8_ae = RandomInt(4, 8);
    auto25FAC5F8_ai = 1;
    lv_a = 1;
    for ( ; ( (auto25FAC5F8_ai >= 0 && lv_a <= auto25FAC5F8_ae) || (auto25FAC5F8_ai <= 0 && lv_a >= auto25FAC5F8_ae) ) ; lv_a += auto25FAC5F8_ai ) {
        UnitCreate(1, "Berry", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_bush), RandomFixed(0.3, 0.6), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
        UnitSetCustomValue(lp_bush, 0, (UnitGetCustomValue(lp_bush, 0) + 1.0));
    }
    auto96D7F99C_ae = RandomInt(2, 4);
    auto96D7F99C_ai = 1;
    lv_a = 1;
    for ( ; ( (auto96D7F99C_ai >= 0 && lv_a <= auto96D7F99C_ae) || (auto96D7F99C_ai <= 0 && lv_a >= auto96D7F99C_ae) ) ; lv_a += auto96D7F99C_ai ) {
        UnitCreate(1, "Berry", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_bush), RandomFixed(0.3, 0.6), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
        UnitSetHeight(UnitLastCreated(), 1.0, 0.0);
        UnitSetCustomValue(lp_bush, 0, (UnitGetCustomValue(lp_bush, 0) + 1.0));
    }
    gf_UpdateResourceTooltip(lp_bush);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpawnHerbs
//--------------------------------------------------------------------------------------------------
void gf_SpawnHerbs (unit lp_bush) {
    int autoEA66F7DC_ae;
    int autoEA66F7DC_ai;
    int auto14992F84_ae;
    int auto14992F84_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    autoEA66F7DC_ae = RandomInt(4, 7);
    autoEA66F7DC_ai = 1;
    lv_a = 1;
    for ( ; ( (autoEA66F7DC_ai >= 0 && lv_a <= autoEA66F7DC_ae) || (autoEA66F7DC_ai <= 0 && lv_a >= autoEA66F7DC_ae) ) ; lv_a += autoEA66F7DC_ai ) {
        UnitCreate(1, "CulinaryHerb", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_bush), RandomFixed(0.4, 0.5), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
        UnitSetHeight(UnitLastCreated(), RandomFixed(0.6, 0.8), 0.0);
        UnitSetCustomValue(lp_bush, 0, (UnitGetCustomValue(lp_bush, 0) + 1.0));
    }
    auto14992F84_ae = RandomInt(2, 4);
    auto14992F84_ai = 1;
    lv_a = 1;
    for ( ; ( (auto14992F84_ai >= 0 && lv_a <= auto14992F84_ae) || (auto14992F84_ai <= 0 && lv_a >= auto14992F84_ae) ) ; lv_a += auto14992F84_ai ) {
        UnitCreate(1, "CulinaryHerb", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_bush), RandomFixed(0.3, 0.4), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
        UnitSetHeight(UnitLastCreated(), RandomFixed(1.4, 1.6), 0.0);
        UnitSetCustomValue(lp_bush, 0, (UnitGetCustomValue(lp_bush, 0) + 1.0));
    }
    gf_UpdateResourceTooltip(lp_bush);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpawnResources
//--------------------------------------------------------------------------------------------------
void gf_SpawnResources () {
    int auto3DBA009C_ae;
    int auto3DBA009C_ai;
    int autoF0BF3E91_ae;
    int autoF0BF3E91_ai;
    int auto6B12CC81_ae;
    int auto6B12CC81_ai;
    int auto0EEFC461_ae;
    int auto0EEFC461_ai;
    int auto9B4D1838_ae;
    int auto9B4D1838_ai;
    int auto75CBAC5C_ae;
    int auto75CBAC5C_ai;
    int auto7015A077_ae;
    int auto7015A077_ai;
    int autoB2C34D1F_ae;
    int autoB2C34D1F_ai;
    int auto408B1AA7_ae;
    int auto408B1AA7_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_spawnedCount;
    unitgroup lv_uG;
    // Variable Initialization
    lv_uG = UnitGroupEmpty();
    // Implementation
    if ((gv_tutorial == false) && (gv_gameOver == false)) {
        lv_a = (gv_treeQuota - UnitGroupCount(UnitGroup("MapleTree", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if ((lv_a > 0)) {
            UnitCreate(1, "MapleTree", 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
            UnitCreateEffectUnit(UnitLastCreated(), "GrowingTreeSet", UnitLastCreated());
            lv_spawnedCount += 1;
        }
        else {
        }
        lv_a = (gv_birdQuota - UnitGroupCount(UnitGroup("Bird", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if ((lv_a > 0)) {
            auto3DBA009C_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
            auto3DBA009C_ai = 1;
            lv_b = 1;
            for ( ; ( (auto3DBA009C_ai >= 0 && lv_b <= auto3DBA009C_ae) || (auto3DBA009C_ai <= 0 && lv_b >= auto3DBA009C_ae) ) ; lv_b += auto3DBA009C_ai ) {
                UnitCreate(1, "Bird", 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                lv_spawnedCount += 1;
            }
        }
        else {
        }
        lv_a = (gv_sheepQuota - UnitGroupCount(gv_wildSheep, c_unitCountAlive));
        if ((lv_a > 0)) {
            autoF0BF3E91_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
            autoF0BF3E91_ai = 1;
            lv_b = 1;
            for ( ; ( (autoF0BF3E91_ai >= 0 && lv_b <= autoF0BF3E91_ae) || (autoF0BF3E91_ai <= 0 && lv_b >= autoF0BF3E91_ae) ) ; lv_b += autoF0BF3E91_ai ) {
                UnitCreate(1, "Sheep", 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wildSheep, UnitLastCreated());
                lv_spawnedCount += 1;
            }
        }
        else {
        }
        lv_a = (gv_blueJunglefowlQuota - UnitGroupCount(UnitGroup("Pheasant", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if ((lv_a > 0)) {
            auto6B12CC81_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
            auto6B12CC81_ai = 1;
            lv_b = 1;
            for ( ; ( (auto6B12CC81_ai >= 0 && lv_b <= auto6B12CC81_ae) || (auto6B12CC81_ai <= 0 && lv_b >= auto6B12CC81_ae) ) ; lv_b += auto6B12CC81_ai ) {
                UnitCreate(1, "Pheasant", 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                lv_spawnedCount += 1;
            }
        }
        else {
        }
        lv_a = (gv_wolfQuota - UnitGroupCount(UnitGroup("Dog", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if ((lv_a > 0)) {
            auto0EEFC461_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
            auto0EEFC461_ai = 1;
            lv_b = 1;
            for ( ; ( (auto0EEFC461_ai >= 0 && lv_b <= auto0EEFC461_ae) || (auto0EEFC461_ai <= 0 && lv_b >= auto0EEFC461_ae) ) ; lv_b += auto0EEFC461_ai ) {
                UnitCreate(1, "Dog", 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                lv_spawnedCount += 1;
            }
        }
        else {
        }   
        if (gv_questIndexActive != 10){
            lv_a = (gv_bearQuota - UnitGroupCount(UnitGroup("Bear", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            if ((lv_a > 0)) {
                auto9B4D1838_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                auto9B4D1838_ai = 1;
                lv_b = 1;
                for ( ; ( (auto9B4D1838_ai >= 0 && lv_b <= auto9B4D1838_ae) || (auto9B4D1838_ai <= 0 && lv_b >= auto9B4D1838_ae) ) ; lv_b += auto9B4D1838_ai ) {
                    UnitCreate(1, "Bear", 0, 15, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                    lv_spawnedCount += 1;
                }
            }
        }
        if ((gv_dayNight == 2) && (gv_questIndexActive != 7)) {
            gv_direWolfQuota = (3 * UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive));
            lv_a = (gv_direWolfQuota - UnitGroupCount(UnitGroup("Lyote", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            if ((lv_a > 0)) {
                auto75CBAC5C_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                auto75CBAC5C_ai = 1;
                lv_b = 1;
                for ( ; ( (auto75CBAC5C_ai >= 0 && lv_b <= auto75CBAC5C_ae) || (auto75CBAC5C_ai <= 0 && lv_b >= auto75CBAC5C_ae) ) ; lv_b += auto75CBAC5C_ai ) {
                    UnitCreate(1, "Lyote", 0, 15, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                    lv_spawnedCount += 1;
                }
            }
            else {
            }
        }
        else {
        }
        if ((gv_dayNight == 2) && (gv_questIndexActive == 7) && (gv_deadnightPhase == 3)) {
            gv_ghoulExtra += 2;
            gv_undeadQuota = (100 + (12 * UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive)));
            gv_undeadQuota += gv_ghoulExtra;
            lv_a = (gv_undeadQuota - UnitGroupCount(UnitGroup("Ghoul", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            if ((lv_a > 0)) {
                auto7015A077_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 10);
                auto7015A077_ai = 1;
                lv_b = 1;
                for ( ; ( (auto7015A077_ai >= 0 && lv_b <= auto7015A077_ae) || (auto7015A077_ai <= 0 && lv_b >= auto7015A077_ae) ) ; lv_b += auto7015A077_ai ) {
                    UnitCreate(1, "Ghoul", 0, 15, gf_RandomPathablePoint(RegionEntireMap()), 270.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(0.8, 1.2)));
                    lv_spawnedCount += 1;
                }
            }
            else {
            }
            if ((UnitGroupCount(UnitGroup("Monstrosity", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive))) {
                gf_SpawnMonstrosity();
            }
            else {
            }
        }
        else {
        }
        if ((gv_questIndexActive == 10)) {
            lv_a = (gv_frostBearQuota - UnitGroupCount(UnitGroup("FrostBear", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            if ((lv_a > 0)) {
                autoB2C34D1F_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                autoB2C34D1F_ai = 1;
                lv_b = 1;
                for ( ; ( (autoB2C34D1F_ai >= 0 && lv_b <= autoB2C34D1F_ae) || (autoB2C34D1F_ai <= 0 && lv_b >= autoB2C34D1F_ae) ) ; lv_b += autoB2C34D1F_ai ) {
                    UnitCreate(1, "FrostBear", 0, 15, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                    lv_spawnedCount += 1;
                }
            }
            else {
            }
        }
        else {
        }
        lv_a = (gv_stagQuota - UnitGroupCount(UnitGroup("Stag", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if ((lv_a > 0)) {
            UnitCreate(1, "Stag", 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
            lv_spawnedCount += 1;
        }
        else {
        }
        lv_a = (gv_nightcrawlerQuota - UnitGroupCount(UnitGroup("Nightcrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if ((lv_a > 0)) {
            lv_uG = UnitGroup("StoneDeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto408B1AA7_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 10);
            auto408B1AA7_ai = 1;
            lv_b = 1;
            for ( ; ( (auto408B1AA7_ai >= 0 && lv_b <= auto408B1AA7_ae) || (auto408B1AA7_ai <= 0 && lv_b >= auto408B1AA7_ae) ) ; lv_b += auto408B1AA7_ai ) {
                UnitCreate(1, "Nightcrawler", 0, 0, UnitGetPosition(UnitGroupRandomUnit(lv_uG, c_unitCountAlive)), libNtve_gf_RandomAngle());
                lv_spawnedCount += 1;
            }
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GatherStop
//--------------------------------------------------------------------------------------------------
void gf_GatherStop (unit lp_unit) {
    // Implementation
    UnitBehaviorRemove(lp_unit, "MiningStoneSmart", 1);
    UnitBehaviorRemove(lp_unit, "MiningGoldSmart", 1);
    UnitBehaviorRemove(lp_unit, "PickingBerriesSmart", 1);
    UnitBehaviorRemove(lp_unit, "PickingHerbsSmart", 1);
    UnitBehaviorRemove(lp_unit, "UnlockingChestSmart", 1);
    UnitSetCustomValue(lp_unit, 0, 0.0);
    UnitSetCustomValue(lp_unit, 1, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GatherType
//--------------------------------------------------------------------------------------------------
int gf_GatherType (unit lp_unit) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((UnitHasBehavior(lp_unit, "MiningStoneSmart") == true)) {
        lv_value = 1;
    }
    else if ((UnitHasBehavior(lp_unit, "MiningGoldSmart") == true)) {
        lv_value = 2;
    }
    else if ((UnitHasBehavior(lp_unit, "PickingBerriesSmart") == true)) {
        lv_value = 3;
    }
    else if ((UnitHasBehavior(lp_unit, "PickingHerbsSmart") == true)) {
        lv_value = 4;
    }
    else if ((UnitHasBehavior(lp_unit, "UnlockingChestSmart") == true)) {
        lv_value = 5;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GatherCap
//--------------------------------------------------------------------------------------------------
int gf_GatherCap (unit lp_unit, unit lp_node, int lp_type) {
    int auto19632423_val;
    // Variable Declarations
    int lv_i;
    fixed lv_gatheringSpeed;
    int lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_gatheringSpeed = 1.0;
    // Implementation
    if (gf_UnitExists(lp_node)) {
        auto19632423_val = lp_type;
        if (auto19632423_val == 1) {
            if ((UnitGetType(lp_unit) == "Kobold")) {
                lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Armored]", lv_i)) * 0.01);
                if ((UnitHasBehavior(lp_unit, "SharpIronPickaxe") == true)) {
                    lv_gatheringSpeed += 0.15;
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, "DullPickaxe") == true)) {
                    lv_gatheringSpeed += 0.05;
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 3, 3) == "1")) {
                    lv_gatheringSpeed += 0.05;
                }
                else {
                }
                if ((gv_playerData[lv_i].lv_isAI == true)) {
                    lv_gatheringSpeed += (gv_aIData[lv_i].lv_difficultyRating * 0.002);
                }
                else {
                }
                if ((UnitHasBehavior(lp_node, "MineralTap") == true)) {
                    lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MineralTapStats", "Amount", lv_i)) * 0.01);
                }
                else {
                }
            }
            else {
                lv_gatheringSpeed = gf_Nonkoboldgatherrate(lp_unit);
            }
            lv_value = FixedToInt(Round((48.0 * (1.0 / lv_gatheringSpeed))));
        }
        else if (auto19632423_val == 2) {
            if ((UnitGetType(lp_unit) == "Kobold")) {
                lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "AttributeBonus[Armored]", lv_i)) * 0.01);
                if ((UnitHasBehavior(lp_unit, "SharpIronPickaxe") == true)) {
                    lv_gatheringSpeed += 0.15;
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, "DullPickaxe") == true)) {
                    lv_gatheringSpeed += 0.05;
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 3, 3) == "1")) {
                    lv_gatheringSpeed += 0.05;
                }
                else {
                }
                if ((gv_playerData[lv_i].lv_isAI == true)) {
                    lv_gatheringSpeed += (gv_aIData[lv_i].lv_difficultyRating * 0.002);
                }
                else {
                }
                if ((UnitHasBehavior(lp_node, "MineralTap") == true)) {
                    lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MineralTapStats", "Amount", lv_i)) * 0.01);
                }
                else {
                }
            }
            else {
                lv_gatheringSpeed = gf_Nonkoboldgatherrate(lp_unit);
            }
            lv_value = FixedToInt(Round((8.0 * (1.0 / lv_gatheringSpeed))));
        }
        else if (auto19632423_val == 3) {
            if ((UnitGetType(lp_unit) == "Kobold")) {
                lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Biological]", lv_i)) * 0.01);
                if ((StringSub(gv_perks[lv_i], 4, 4) == "1")) {
                    lv_gatheringSpeed += 0.05;
                }
                else {
                }
                if ((gv_playerData[lv_i].lv_isAI == true)) {
                    lv_gatheringSpeed += (gv_aIData[lv_i].lv_difficultyRating * 0.002);
                }
                else {
                }
            }
            else {
                lv_gatheringSpeed = gf_Nonkoboldgatherrate(lp_unit);
            }
            lv_value = FixedToInt(Round((48.0 * (1.0 / lv_gatheringSpeed))));
        }
        else if (auto19632423_val == 4) {
            if ((UnitGetType(lp_unit) == "Kobold")) {
                lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Biological]", lv_i)) * 0.01);
                if ((StringSub(gv_perks[lv_i], 4, 4) == "1")) {
                    lv_gatheringSpeed += 0.05;
                }
                else {
                }
                if ((gv_playerData[lv_i].lv_isAI == true)) {
                    lv_gatheringSpeed += (gv_aIData[lv_i].lv_difficultyRating * 0.002);
                }
                else {
                }
            }
            else {
                lv_gatheringSpeed = gf_Nonkoboldgatherrate(lp_unit);
            }
            lv_value = FixedToInt(Round((48.0 * (1.0 / lv_gatheringSpeed))));
        }
        else if (auto19632423_val == 5) {
            lv_value = 48;
        }
        else {
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GatherResult
//--------------------------------------------------------------------------------------------------
void gf_GatherResult (unit lp_unit, unit lp_node, int lp_type) {
    int auto7E194AC8_val;
    // Variable Declarations
    int lv_i;
    int lv_a;
    string lv_type;
    point lv_p;
    int lv_cv;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGetCustomValue(lp_node, 0) >= 1.0)) {
        auto7E194AC8_val = lp_type;
        if (auto7E194AC8_val == 1) {
            lv_type = gf_ProduceStone(lp_unit);
            if ((UnitGetType(lp_unit) == "Kobold") && (libNtve_gf_RandomPercent() < ((20.0 * BoolToInt((gv_skillMining[lv_i] >= 15))) + (30.0 * BoolToInt(UnitHasBehavior(lp_unit, "SharpIronPickaxe")))))) {
            }
            else {
                UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
            }
            if ((UnitGetCustomValue(lp_node, 0) == 0.0)) {
                gf_GatherStop(lp_unit);
                UnitKill(lp_node);
                gf_Quicktag(lp_unit, (StringExternal("Param/Value/FA47B320") + (UnitTypeGetName(lv_type) + StringExternal("Param/Value/738CF64F"))), 3.0, 24);
            }
            else {
                gf_UpdateResourceTooltip(lp_node);
                gf_Quicktag(lp_unit, (StringExternal("Param/Value/EC5EEC60") + (UnitTypeGetName(lv_type) + StringExternal("Param/Value/8FF85F31"))), 2.0, 24);
            }
            gf_AddExperience(lp_unit, 25.0);
            gf_CreateItemForUnit(lp_unit, lv_type, 1);
            gf_BoostAdrenalineRush(lv_i, UnitGetType(lp_unit), 5);
        }
        else if (auto7E194AC8_val == 2) {
            if ((UnitGetType(lp_unit) == "Kobold") && (libNtve_gf_RandomPercent() < ((20.0 * BoolToInt((gv_skillMining[lv_i] >= 15))) + (30.0 * BoolToInt(UnitHasBehavior(lp_unit, "SharpIronPickaxe")))))) {
            }
            else {
                UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
            }
            if ((UnitGetCustomValue(lp_node, 0) == 0.0)) {
                gf_GatherStop(lp_unit);
                lv_type = gf_ProduceGold(lp_unit, true);
                UnitKill(lp_node);
                if ((lv_type != null)) {
                    gf_CreateItemForUnit(lp_unit, lv_type, 1);
                    gf_Quicktag(lp_unit, (StringExternal("Param/Value/6CC4AA3D") + (UnitTypeGetName(lv_type) + StringExternal("Param/Value/6D9BF3AF"))), 3.0, 24);
                }
                else {
                    gf_Quicktag(lp_unit, StringExternal("Param/Value/B6FA4BBD"), 3.0, 24);
                }
            }
            else {
                lv_type = gf_ProduceGold(lp_unit, false);
                if ((lv_type != null)) {
                    gf_CreateItemForUnit(lp_unit, lv_type, 1);
                    gf_Quicktag(lp_unit, (StringExternal("Param/Value/5E058594") + (UnitTypeGetName(lv_type) + StringExternal("Param/Value/66ADDF30"))), 2.0, 24);
                    gf_BoostAdrenalineRush(lv_i, UnitGetType(lp_unit), 30);
                }
                else {
                }
                gf_UpdateResourceTooltip(lp_node);
            }
            gv_playerData[lv_i].lv_gameStats.lv_goldEarned += 1;
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperAdd, 1);
            gf_AddExperience(lp_unit, 7.5);
            gf_BoostAdrenalineRush(lv_i, UnitGetType(lp_unit), 1);
        }
        else if (auto7E194AC8_val == 3) {
            lv_type = gf_ProduceBerries(lp_unit);
            gv_playerData[lv_i].lv_gameStats.lv_berriesPicked += 1;
            UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
            UnitRemove(UnitGroupRandomUnit(UnitGroup("Berry", c_playerAny, RegionCircle(UnitGetPosition(lp_node), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            if ((UnitGetCustomValue(lp_node, 0) == 0.0)) {
                gf_GatherStop(lp_unit);
                UnitKill(lp_node);
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "Signal WorkComplete");
                TextExpressionSetToken("Param/Expression/248AED3D", "A", StringExternal("Param/Value/1B2BE344"));
                TextExpressionSetToken("Param/Expression/248AED3D", "B", UnitTypeGetName(lv_type));
                TextExpressionSetToken("Param/Expression/248AED3D", "C", StringExternal("Param/Value/C11345F1"));
                gf_Quicktag(lp_unit, TextExpressionAssemble("Param/Expression/248AED3D"), 3.0, 24);
            }
            else {
                gf_UpdateResourceTooltip(lp_node);
                TextExpressionSetToken("Param/Expression/6699FC93", "A", StringExternal("Param/Value/61070284"));
                TextExpressionSetToken("Param/Expression/6699FC93", "B", UnitTypeGetName(lv_type));
                TextExpressionSetToken("Param/Expression/6699FC93", "C", StringExternal("Param/Value/3E09BC74"));
                gf_Quicktag(lp_unit, TextExpressionAssemble("Param/Expression/6699FC93"), 2.0, 24);
                if ((gv_skillForaging[lv_i] >= 15)) {
                    UnitSetCustomValue(lp_node, 1, (UnitGetCustomValue(lp_node, 1) + 1.0));
                    UnitBehaviorAdd(lp_node, "BushRegrowth", lp_node, 1);
                }
                else {
                }
            }
            SoundPlayOnUnit(SoundLink("ForageSound", -1), PlayerGroupAll(), lp_node, 0.0, 100.0, 0.0);
            gf_AddExperience(lp_unit, 25.0);
            gf_CreateItemForUnit(lp_unit, lv_type, 1);
        }
        else if (auto7E194AC8_val == 4) {
            lv_type = gf_ProduceHerb(lp_unit);
            gv_playerData[lv_i].lv_gameStats.lv_berriesPicked += 1;
            UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
            UnitRemove(UnitGroupRandomUnit(UnitGroup("CulinaryHerb", c_playerAny, RegionCircle(UnitGetPosition(lp_node), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            if ((UnitGetCustomValue(lp_node, 0) == 0.0)) {
                gf_GatherStop(lp_unit);
                UnitKill(lp_node);
                gf_Quicktag(lp_unit, (StringExternal("Param/Value/7A70B351") + (UnitTypeGetName(lv_type) + StringExternal("Param/Value/31B86819"))), 2.0, 24);
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "Signal WorkComplete");
            }
            else {
                if ((gv_skillForaging[lv_i] >= 15)) {
                    UnitSetCustomValue(lp_node, 1, (UnitGetCustomValue(lp_node, 1) + 1.0));
                    UnitBehaviorAdd(lp_node, "BushRegrowth", lp_node, 1);
                }
                else {
                }
                gf_Quicktag(lp_unit, (StringExternal("Param/Value/D76C466B") + (UnitTypeGetName(lv_type) + StringExternal("Param/Value/C0CBE479"))), 2.0, 24);
                gf_UpdateResourceTooltip(lp_node);
            }
            SoundPlayOnUnit(SoundLink("ForageSound", -1), PlayerGroupAll(), lp_node, 0.0, 100.0, 0.0);
            gf_AddExperience(lp_unit, 25.0);
            gf_CreateItemForUnit(lp_unit, lv_type, 1);
        }
        else if (auto7E194AC8_val == 5) {
            gf_GatherStop(lp_unit);
            UnitGroupRemove(gv_treasureChests, lp_node);
            UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
            gf_Quicktag(lp_unit, StringExternal("Param/Value/94CEE36D"), 2.0, 24);
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "Signal WorkComplete");
            lv_p = UnitGetPosition(lp_node);
            lv_cv = FixedToInt(UnitGetCustomValue(lp_node, 1));
            if ((UnitHasBehavior(lp_node, "GoblinLoot") == true)) {
                UnitKill(lp_node);
                PingDestroy(gv_treasurePing[lv_cv]);
                gf_GladiatorsStrength(lv_i);
                gf_TreasureSpawnLoot(lv_p);
                gf_TreasureEndPrem();
            }
            else if ((UnitHasBehavior(lp_node, "KingsReward") == true)) {
                UnitKill(lp_node);
                gf_ExileLoot(lv_p);
            }
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GatherAnimation
//--------------------------------------------------------------------------------------------------
void gf_GatherAnimation (unit lp_unit, int lp_cV, int lp_type, int lp_cap) {
    string auto454C32CF_val;
    int auto06888FD0_val;
    // Variable Declarations
    string lv_miningAnimation;
    string lv_gatherAnimation;
    const fixed lv_animationSpeed = 1.0;
    // Variable Initialization
    lv_miningAnimation = "";
    lv_gatherAnimation = "";
    // Implementation
    if ((UnitGetCustomValue(lp_unit, 1) == 0)) {
        auto454C32CF_val = UnitGetType(lp_unit);
        if (auto454C32CF_val == "Kobold") {
            lv_miningAnimation = "Work";
            lv_gatherAnimation = "Spell";
        }
        else if (auto454C32CF_val == "MurlocSlave") {
            lv_miningAnimation = "Attack";
            lv_gatherAnimation = "Spell";
        }
        else {
            lv_miningAnimation = "Attack";
            lv_gatherAnimation = "Attack";
        }
        auto06888FD0_val = lp_type;
        if (auto06888FD0_val == 1) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear("Spell", -1.0));
            libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay("Mining", lv_miningAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
            SoundPlayOnUnit(SoundLink("MiningSound", -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
        }
        else if (auto06888FD0_val == 2) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear("Spell", -1.0));
            libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay("Mining", lv_miningAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
            SoundPlayOnUnit(SoundLink("MiningSound", -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
        }
        else if (auto06888FD0_val == 3) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay("Picking", lv_gatherAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
        }
        else if (auto06888FD0_val == 4) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay("Picking", lv_gatherAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
        }
        else if (auto06888FD0_val == 5) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay("Picking", lv_gatherAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Nonkoboldgatherrate
//--------------------------------------------------------------------------------------------------
fixed gf_Nonkoboldgatherrate (unit lp_unit) {
    // Variable Declarations
    fixed lv_value;
    // Variable Initialization
    lv_value = 0.5;
    // Implementation
    if ((UnitHasBehavior(lp_unit, "MurlocEquipment") == true)) {
        lv_value += 0.1;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ProduceStone
//--------------------------------------------------------------------------------------------------
string gf_ProduceStone (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    fixed lv_shadowstone = 10.0;
    fixed lv_ironOre = 20.0;
    fixed lv_bonusFactor;
    bool lv_guaranteedStone;
    string lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_bonusFactor = 1.0;
    // Implementation
    if ((gv_playerData[lv_i].lv_isAI == true) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) == 0)) {
        lv_guaranteedStone = true;
    }
    else {
    }
    if ((gv_playerData[lv_i].lv_isAI == true) && (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) && (gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_aIWatchTowerBuilder != lv_i)) {
        lv_bonusFactor += 0.1;
    }
    else {
    }
    if (gv_dayNight == 2){
        lv_shadowstone = 17.;
        lv_ironOre = 30.;
    }
    if ((lv_guaranteedStone == false) && ((lv_shadowstone * lv_bonusFactor) >= libNtve_gf_RandomPercent())) {
        lv_value = "Shadowstone";
    }
    else if ((lv_guaranteedStone == false) && ((lv_ironOre * lv_bonusFactor) >= libNtve_gf_RandomPercent())) {
        lv_value = "IronOre";
    }
    else if (true) {
        lv_value = "Stone";
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ProduceGold
//--------------------------------------------------------------------------------------------------
string gf_ProduceGold (unit lp_unit, bool lp_depleted) {
    // Variable Declarations
    const fixed lv_radiantGem = 2.25;
    fixed lv_bonusFactor;
    string lv_value;
    // Variable Initialization
    lv_bonusFactor = 1.0;
    // Implementation
    if ((((lv_radiantGem * lv_bonusFactor) >= libNtve_gf_RandomPercent()) || ((lp_depleted == true) && (StringSub(gv_perks[UnitGetOwner(lp_unit)], 24, 24) == "1")))) {
        lv_value = "RadiantGem";
    }
    else if (true) {
        lv_value = null;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ProduceBerries
//--------------------------------------------------------------------------------------------------
string gf_ProduceBerries (unit lp_unit) {
    // Variable Declarations
    fixed lv_sageberry = 33.0;
    fixed lv_bonusFactor;
    string lv_value;
    // Variable Initialization
    lv_bonusFactor = 1.0;
    // Implementation
    if (gv_dayNight == 2){
        lv_sageberry = 66.;
    }
    if (((lv_sageberry * lv_bonusFactor) >= libNtve_gf_RandomPercent())) {
        lv_value = "Sageberry";
    }
    else if (true) {
        lv_value = "HandfulofBerries";
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ProduceHerb
//--------------------------------------------------------------------------------------------------
string gf_ProduceHerb (unit lp_unit) {
    // Variable Declarations
    fixed lv_sunflower = 33.0;
    fixed lv_bonusFactor;
    string lv_value;
    // Variable Initialization
    lv_bonusFactor = 1.0;
    if (gv_dayNight == 2){
        lv_sunflower = 66;
    }
    // Implementation
    if (((lv_sunflower * lv_bonusFactor) >= libNtve_gf_RandomPercent())) {
        lv_value = "LambentSunflower";
    }
    else if (true) {
        lv_value = "SpicyHerbs";
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateBuildingStats
//--------------------------------------------------------------------------------------------------
void gf_UpdateBuildingStats (int lp_player) {
    // Variable Declarations
    fixed lv_lifeFlatModifier;
    fixed lv_lifePercentageModifier;
    fixed lv_armorFlatModifier;
    fixed lv_armorPercentageModifier;
    fixed lv_artisanLifeBonus;
    fixed lv_artisanArmorBonus;
    fixed lv_cookingCampfireBonus;
    fixed lv_aDTLifeBonus;
    // Variable Initialization
    lv_lifePercentageModifier = 1.0;
    lv_armorPercentageModifier = 1.0;
    lv_artisanLifeBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Hover]", lp_player));
    lv_artisanArmorBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Light]", lp_player));
    lv_cookingCampfireBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Mechanical]", lp_player));
    lv_aDTLifeBonus = (50.0 * IntToFixed(BoolToInt((gv_skillArtisanship[lp_player] >= 20))));
    // Implementation
    lv_lifePercentageModifier += (lv_artisanLifeBonus / 100.0);
    lv_armorFlatModifier += lv_artisanArmorBonus;
    CatalogFieldValueSet(c_gameCatalogUnit, "Tent", "LifeMax", lp_player, FixedToString(((150.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Tent", "LifeStart", lp_player, FixedToString(((150.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Tent", "LifeArmor", lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Tavern", "LifeMax", lp_player, FixedToString(((250.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Tavern", "LifeStart", lp_player, FixedToString(((250.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Tavern", "LifeArmor", lp_player, FixedToString(((1.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "StorageOutpost", "LifeMax", lp_player, FixedToString(((350.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "StorageOutpost", "LifeStart", lp_player, FixedToString(((350.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "StorageOutpost", "LifeArmor", lp_player, FixedToString(((2.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "SpikeTrap", "LifeMax", lp_player, FixedToString(((10.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "SpikeTrap", "LifeStart", lp_player, FixedToString(((10.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "SpikeTrap", "LifeArmor", lp_player, FixedToString(((5.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Smithy", "LifeMax", lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Smithy", "LifeStart", lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Smithy", "LifeArmor", lp_player, FixedToString(((1.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Farm", "LifeMax", lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Farm", "LifeStart", lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Farm", "LifeArmor", lp_player, FixedToString(((1.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "CampfireLit", "LifeMax", lp_player, FixedToString(((200.0 + (lv_lifeFlatModifier + lv_cookingCampfireBonus)) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "CampfireLit", "LifeStart", lp_player, FixedToString(((200.0 + (lv_lifeFlatModifier + lv_cookingCampfireBonus)) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "CampfireLit", "LifeArmor", lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Campfire", "LifeMax", lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Campfire", "LifeStart", lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Campfire", "LifeArmor", lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Workbench", "LifeMax", lp_player, FixedToString(((100.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Workbench", "LifeStart", lp_player, FixedToString(((100.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Workbench", "LifeArmor", lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "HuntersLodge", "LifeMax", lp_player, FixedToString(((300.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "HuntersLodge", "LifeStart", lp_player, FixedToString(((300.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "HuntersLodge", "LifeArmor", lp_player, FixedToString(((1.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Palisade", "LifeMax", lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Palisade", "LifeStart", lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Palisade", "LifeArmor", lp_player, FixedToString(((10.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "PalisadeGateClosed", "LifeMax", lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "PalisadeGateClosed", "LifeStart", lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "PalisadeGateClosed", "LifeArmor", lp_player, FixedToString(((10.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "PalisadeGateOpen", "LifeMax", lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "PalisadeGateOpen", "LifeStart", lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "PalisadeGateOpen", "LifeArmor", lp_player, FixedToString(((10.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "LorenorStatue", "LifeMax", lp_player, FixedToString(((1000.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "LorenorStatue", "LifeStart", lp_player, FixedToString(((1000.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "LorenorStatue", "LifeArmor", lp_player, FixedToString(((5.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "AutomatedDefenseTurret", "LifeMax", lp_player, FixedToString((((250.0 + lv_aDTLifeBonus) + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "AutomatedDefenseTurret", "LifeStart", lp_player, FixedToString((((250.0 + lv_aDTLifeBonus) + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "AutomatedDefenseTurret", "LifeArmor", lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Fortress", "LifeMax", lp_player, FixedToString((((5000.0 + (2000.0 * BoolToInt(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_watchTowerStructuralReinforcement))) + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Fortress", "LifeStart", lp_player, FixedToString((((5000.0 + (2000.0 * BoolToInt(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_watchTowerStructuralReinforcement))) + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Fortress", "LifeArmor", lp_player, FixedToString((((5.0 + (5.0 * BoolToInt(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_watchTowerStructuralReinforcement))) + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Fortress", "LifeRegenRate", lp_player, FixedToString((0.0 + (2.0 * BoolToInt(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_watchTowerStructuralReinforcement))), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Trebuchet", "LifeMax", lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Trebuchet", "LifeStart", lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "Trebuchet", "LifeArmor", lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildTent
//--------------------------------------------------------------------------------------------------
void gf_BuildTent (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_wool;
    unitgroup lv_leather;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_wool = UnitGroupFilter("Wool", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_leather = UnitGroupFilter("Leather", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    if ((UnitGroupCount(lv_wool, c_unitCountAlive) >= 1)) {
        UnitGroupAddUnitGroup(lv_sum, lv_wool);
    }
    else {
        UnitGroupAddUnitGroup(lv_sum, lv_leather);
    }
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 2)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 50.0);
        TriggerExecute(gt_TutorialPart4, true, false);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildCampfire
//--------------------------------------------------------------------------------------------------
void gf_BuildCampfire (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_stone;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_stone = UnitGroupFilter("Stone", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_stone);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 2)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 50.0);
        TriggerExecute(gt_TutorialPart2, true, false);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildFarm
//--------------------------------------------------------------------------------------------------
void gf_BuildFarm (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_stone;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_stone = UnitGroupFilter("Stone", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_stone);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 2)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 50.0);
        TriggerExecute(gt_TutorialPart7, true, false);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildWorkbench
//--------------------------------------------------------------------------------------------------
void gf_BuildWorkbench (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_leather;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_leather = UnitGroupFilter("Leather", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_leather);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 2)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 50.0);
        TriggerExecute(gt_TutorialPart10, true, false);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildSmithy
//--------------------------------------------------------------------------------------------------
void gf_BuildSmithy (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_leather;
    unitgroup lv_stone;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_leather = UnitGroupFilter("Leather", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_stone = UnitGroupFilter("Stone", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_leather);
    UnitGroupAddUnitGroup(lv_sum, lv_stone);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 3)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 80.0);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildTavern
//--------------------------------------------------------------------------------------------------
void gf_BuildTavern (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    int lv_lumberCost;
    unitgroup lv_lumber;
    unitgroup lv_stone;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumberCost = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "Artisan25LumberCost", "AttributeBonus[Armored]", lv_i));
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lv_lumberCost);
    lv_stone = UnitGroupFilter("Stone", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_stone);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == (lv_lumberCost + 2))) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 100.0);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildOutpost
//--------------------------------------------------------------------------------------------------
void gf_BuildOutpost (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    int lv_lumberCost;
    unitgroup lv_lumber;
    unitgroup lv_wool;
    unitgroup lv_leather;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumberCost = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "Artisan25LumberCost", "AttributeBonus[Biological]", lv_i));
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lv_lumberCost);
    lv_wool = UnitGroupFilter("Wool", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2);
    lv_leather = UnitGroupFilter("Leather", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    if ((UnitGroupCount(lv_wool, c_unitCountAlive) == 2)) {
        UnitGroupAddUnitGroup(lv_sum, lv_wool);
    }
    else if ((UnitGroupCount(lv_leather, c_unitCountAlive) == 2)) {
        UnitGroupAddUnitGroup(lv_sum, lv_leather);
    }
    else if ((UnitGroupCount(lv_leather, c_unitCountAlive) == 1) && (UnitGroupCount(lv_wool, c_unitCountAlive) == 1)) {
        UnitGroupAddUnitGroup(lv_sum, lv_wool);
        UnitGroupAddUnitGroup(lv_sum, lv_leather);
    }
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == (lv_lumberCost + 2))) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 120.0);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildSpikeTrap
//--------------------------------------------------------------------------------------------------
void gf_BuildSpikeTrap (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_ironOre;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_ironOre = UnitGroupFilter("IronOre", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_ironOre);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 1)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 40.0);
        UnitSetCustomValue(lp_building, 0, 1.0);
        if ((UnitHasBehavior(lv_unit, "KoboldBotNormal") == true) && (UnitHasBehavior(lv_unit, "SkipChatTraps180") == false)) {
            TextExpressionSetToken("Param/Expression/A1225262", "A", gf_GetPlayerName(lv_i, 0));
            TextExpressionSetToken("Param/Expression/A1225262", "B", StringExternal("Param/Value/9A7FDCCE"));
            TextExpressionSetToken("Param/Expression/54110DCA", "A", StringExternal("Param/Value/952DCC6E"));
            TextExpressionSetToken("Param/Expression/54110DCA", "B", TextWithColor(TextExpressionAssemble("Param/Expression/A1225262"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            TextExpressionSetToken("Param/Expression/54110DCA", "C", StringToText(gv_aITrapsString[RandomInt(1, gv_aITrapsStringAmount)]));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/54110DCA"));
            UnitBehaviorAdd(lv_unit, "SkipChatTraps180", lv_unit, 1);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildLodge
//--------------------------------------------------------------------------------------------------
void gf_BuildLodge (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    int lv_lumberCost;
    unitgroup lv_lumber;
    unitgroup lv_leather;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumberCost = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "Artisan25LumberCost", "AttributeBonus[Heroic]", lv_i));
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lv_lumberCost);
    lv_leather = UnitGroupFilter("Leather", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_leather);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == (lv_lumberCost + 3))) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_StaminaOnCraft(lv_unit);
        gf_AddExperience(lv_unit, 120.0);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildMonument
//--------------------------------------------------------------------------------------------------
void gf_BuildMonument (unit lp_building) {
    int auto59DA779E_ae;
    int auto59DA779E_ai;
    // Variable Declarations
    int lv_a;
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_stone;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 9);
    lv_stone = UnitGroupFilter("Stone", c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 9);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_stone);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 18)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_building), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_building), false))) + (StringExternal("Param/Value/558A4D02") + (gf_GetTribeTextOfPlayer(UnitGetOwner(lp_building)) + StringExternal("Param/Value/C6CCBC80")))));
        SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_building)), 100.0, 0.0);
        SoundPlay(SoundLink("UI_LoadingFinished", -1), gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_members, 100.0, 0.0);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(lp_building, true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lp_building), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 10.0, 270.0);
        gf_Quicktag(lv_unit, StringExternal("Param/Value/30FCC1CC"), 2.0, 24);
        gf_Quicktag(lp_building, StringExternal("Param/Value/344E867C"), 3.0, 24);
        auto59DA779E_ae = gv_activeTeams;
        auto59DA779E_ai = 1;
        lv_a = 1;
        for ( ; ( (auto59DA779E_ai >= 0 && lv_a <= auto59DA779E_ae) || (auto59DA779E_ai <= 0 && lv_a >= auto59DA779E_ae) ) ; lv_a += auto59DA779E_ai ) {
            if ((lv_a != gf_GetTeamOfPlayer(lv_i))) {
                gv_aIMonumentBuilder[lv_a] = 0;
            }
            else {
            }
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildPalisade
//--------------------------------------------------------------------------------------------------
void gf_BuildPalisade (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_lumberParts;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_lumberParts = UnitGroupFilter("LumberParts", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_sum = UnitGroupEmpty();
    // Implementation
    if ((UnitGroupCount(lv_lumberParts, c_unitCountAlive) == 1)) {
        UnitGroupAddUnitGroup(lv_sum, lv_lumberParts);
    }
    else if ((UnitGroupCount(lv_lumber, c_unitCountAlive) == 1)) {
        UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    }
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 1)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Lumber")) {
                gf_CreateItemForUnit(lv_unit, "LumberParts", 1);
            }
            else {
            }
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_Quicktag(lv_unit, StringExternal("Param/Value/90F0D84A"), 2.0, 24);
        libHots_gf_StorePointForUnit(lp_building, 1, UnitGetPosition(gv_playerData[lv_i].lv_kobold));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildADT
//--------------------------------------------------------------------------------------------------
void gf_BuildADT (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_stone;
    unitgroup lv_ironOre;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_stone = UnitGroupFilter("Stone", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_ironOre = UnitGroupFilter("IronOre", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_stone);
    UnitGroupAddUnitGroup(lv_sum, lv_ironOre);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 3)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_Quicktag(lv_unit, StringExternal("Param/Value/E4ECA6DF"), 2.0, 24);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildWatchTower
//--------------------------------------------------------------------------------------------------
void gf_BuildWatchTower (unit lp_building) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    unitgroup lv_lumber;
    unitgroup lv_stone;
    unitgroup lv_sum;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_building);
    lv_unit = gv_playerData[lv_i].lv_kobold;
    lv_lumber = UnitGroupFilter("Lumber", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 10);
    lv_stone = UnitGroupFilter("Stone", c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 6);
    lv_sum = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
    UnitGroupAddUnitGroup(lv_sum, lv_stone);
    if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 16)) {
        UnitGroupLoopBegin(lv_sum);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_Quicktag(lv_unit, StringExternal("Param/Value/868CE6A4"), 2.0, 24);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LeastConstructionProgress
//--------------------------------------------------------------------------------------------------
fixed gf_LeastConstructionProgress (unitgroup lp_buildings, fixed lp_buildTime) {
    // Variable Declarations
    fixed lv_value;
    fixed lv_percentComplete;
    // Variable Initialization
    lv_percentComplete = 100.0;
    // Implementation
    UnitGroupLoopBegin(lp_buildings);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetProgressComplete(UnitGroupLoopCurrent(), 1) < lv_percentComplete)) {
            lv_percentComplete = UnitGetProgressComplete(UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    lv_value = (lp_buildTime * (1.0 - (lv_percentComplete * 0.01)));
    lv_value += 1.0;
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpikeTrapSuffix
//--------------------------------------------------------------------------------------------------
text gf_SpikeTrapSuffix (int lp_charges) {
    int auto2C0435F4_val;
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    // Implementation
    lv_value = (lv_value + StringExternal("Param/Value/D3E6B28D"));
    auto2C0435F4_val = lp_charges;
    if (auto2C0435F4_val == 0) {
        lv_value = (lv_value + StringExternal("Param/Value/160B7278"));
    }
    else if (auto2C0435F4_val == 1) {
        lv_value = (lv_value + IntToText(lp_charges));
        lv_value = (lv_value + StringExternal("Param/Value/AFAF3E92"));
    }
    else {
        lv_value = (lv_value + IntToText(lp_charges));
        lv_value = (lv_value + StringExternal("Param/Value/8780EBED"));
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RefreshCampfire
//--------------------------------------------------------------------------------------------------
void gf_RefreshCampfire (unit lp_unit, int lp_player, bool lp_expert) {
    // Implementation
    if (gf_UnitExists(gv_playerData[lp_player].lv_kobold)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_playerData[lp_player].lv_kobold)) <= gv_interactRadius)) {
            if ((lp_expert == true)) {
                UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
                UnitAbilityEnable(lp_unit, "LightTorch", true);
                SoundPlayOnUnit(SoundLink("CampfireRefresh", -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
            }
            else {
                UnitAbilityReset(lp_unit, AbilityCommand("RefreshCampfireExpert", 0), c_spendLocationAll);
                if ((UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
                    gf_DropandRemove(UnitGroupUnit(gv_playerData[lp_player].lv_resources.lv_lumber, 1));
                    gf_AddExperience(gv_playerData[lp_player].lv_kobold, 20.0);
                    UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
                    UnitAbilityEnable(lp_unit, "LightTorch", true);
                    SoundPlayOnUnit(SoundLink("CampfireRefresh", -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, gv_errorMessage.lv_outOfRange);
            UnitAbilityReset(lp_unit, AbilityCommand("RefreshCampfireExpert", 0), c_spendLocationAll);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, gv_errorMessage.lv_dead);
        UnitAbilityReset(lp_unit, AbilityCommand("RefreshCampfireExpert", 0), c_spendLocationAll);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ADTUpdateAmmo
//--------------------------------------------------------------------------------------------------
void gf_ADTUpdateAmmo (unit lp_unit) {
    // Implementation
    TextExpressionSetToken("Param/Expression/97B3D951", "D", gf_GetPlayerName(UnitGetOwner(lp_unit), 0));
    TextExpressionSetToken("Param/Expression/97B3D951", "E", StringExternal("Param/Value/1F3683CC"));
    TextExpressionSetToken("Param/Expression/97B3D951", "A", StringExternal("Param/Value/1E90D0A4"));
    TextExpressionSetToken("Param/Expression/97B3D951", "B", IntToText(FixedToInt(UnitGetCustomValue(lp_unit, 1))));
    TextExpressionSetToken("Param/Expression/97B3D951", "C", StringExternal("Param/Value/227A6C6B"));
    UnitSetInfoText(lp_unit, StringExternal("Param/Value/52DFAC54"), TextExpressionAssemble("Param/Expression/97B3D951"), StringExternal("Param/Value/E7060DF6"));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PalisadeMutability
//--------------------------------------------------------------------------------------------------
void gf_PalisadeMutability (unit lp_unit, unitgroup lp_exclude, int lp_layer) {
    int autoE4AC679B_ae;
    int autoE4AC679B_ai;
    int auto777AA9C7_ae;
    int auto777AA9C7_ai;
    // Variable Declarations
    int lv_a;
    fixed lv_x;
    fixed lv_y;
    unit[9] lv_neighbour;
    int lv_totalneighbours;
    int lv_adjacentPalisades;
    int lv_adjacentGates;
    int lv_diagonalPalisades;
    int lv_diagonalGates;
    unitgroup lv_exclude;
    fixed lv_agr;
    // Variable Initialization
    lv_x = PointGetX(UnitGetPosition(lp_unit));
    lv_y = PointGetY(UnitGetPosition(lp_unit));
    lv_exclude = lp_exclude;
    // Implementation
    lv_neighbour[1] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Palisade", "PalisadeGateClosed", "PalisadeGateOpen", UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), -1.0, -1.0), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    lv_neighbour[2] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Palisade", "PalisadeGateClosed", "PalisadeGateOpen", UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), -1.0, 0.0), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    lv_neighbour[3] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Palisade", "PalisadeGateClosed", "PalisadeGateOpen", UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), -1.0, 1.0), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    lv_neighbour[4] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Palisade", "PalisadeGateClosed", "PalisadeGateOpen", UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 0.0, 1.0), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    lv_neighbour[5] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Palisade", "PalisadeGateClosed", "PalisadeGateOpen", UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 1.0, 1.0), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    lv_neighbour[6] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Palisade", "PalisadeGateClosed", "PalisadeGateOpen", UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 1.0, 0.0), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    lv_neighbour[7] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Palisade", "PalisadeGateClosed", "PalisadeGateOpen", UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 1.0, -1.0), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    lv_neighbour[8] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Palisade", "PalisadeGateClosed", "PalisadeGateOpen", UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 0.0, -1.0), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    autoE4AC679B_ae = 8;
    autoE4AC679B_ai = 1;
    lv_a = 1;
    for ( ; ( (autoE4AC679B_ai >= 0 && lv_a <= autoE4AC679B_ae) || (autoE4AC679B_ai <= 0 && lv_a >= autoE4AC679B_ae) ) ; lv_a += autoE4AC679B_ai ) {
        if ((lv_neighbour[lv_a] != null)) {
            lv_totalneighbours += 1;
            if ((ModI(lv_a, 2) == 0)) {
                lv_adjacentPalisades += 1;
                if (((UnitGetType(lv_neighbour[lv_a]) == "PalisadeGateClosed") || (UnitGetType(lv_neighbour[lv_a]) == "PalisadeGateOpen"))) {
                    lv_adjacentGates += 1;
                }
                else {
                }
            }
            else {
                lv_diagonalPalisades += 1;
                if (((UnitGetType(lv_neighbour[lv_a]) == "PalisadeGateClosed") || (UnitGetType(lv_neighbour[lv_a]) == "PalisadeGateOpen"))) {
                    lv_diagonalGates += 1;
                }
                else {
                }
            }
        }
        else {
        }
    }
    if ((lv_adjacentGates == 0) && (lv_neighbour[2] != null) && (lv_neighbour[4] == null) && (lv_neighbour[6] != null) && (lv_neighbour[8] == null)) {
        if ((UnitGetCustomValue(lp_unit, 0) == 0.0)) {
            UnitSetFacing(lp_unit, 90.0, 0.0);
        }
        else {
            UnitSetFacing(lp_unit, 270.0, 0.0);
        }
        if ((UnitGetType(lp_unit) == "Palisade")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale 1.000000,1.500000,1.000000");
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap PalisadeLength");
            UnitBehaviorAdd(lp_unit, "CanBecomeGate", lp_unit, 1);
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale");
        }
        UnitBehaviorRemove(lp_unit, "PalisadeCandle", 1);
    }
    else if ((lv_adjacentGates == 0) && (lv_neighbour[2] == null) && (lv_neighbour[4] != null) && (lv_neighbour[6] == null) && (lv_neighbour[8] != null)) {
        if ((UnitGetCustomValue(lp_unit, 0) == 0.0)) {
            UnitSetFacing(lp_unit, 0.0, 0.0);
        }
        else {
            UnitSetFacing(lp_unit, 180.0, 0.0);
        }
        if ((UnitGetType(lp_unit) == "Palisade")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale 1.000000,1.500000,1.000000");
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap PalisadeLength");
            UnitBehaviorAdd(lp_unit, "CanBecomeGate", lp_unit, 1);
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale");
        }
        UnitBehaviorRemove(lp_unit, "PalisadeCandle", 1);
    }
    else if ((lv_diagonalGates == 0) && (lv_neighbour[1] == null) && (lv_neighbour[3] != null) && (lv_neighbour[5] == null) && (lv_neighbour[7] != null)) {
        if ((UnitGetCustomValue(lp_unit, 0) == 0.0)) {
            UnitSetFacing(lp_unit, 45.0, 0.0);
        }
        else {
            UnitSetFacing(lp_unit, 225.0, 0.0);
        }
        if ((UnitGetType(lp_unit) == "Palisade")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale 1.500000,1.500000,1.000000");
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap PalisadeLength");
            UnitBehaviorAdd(lp_unit, "CanBecomeGate", lp_unit, 1);
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale 1.400000,1.400000,1.000000");
        }
        UnitBehaviorRemove(lp_unit, "PalisadeCandle", 1);
    }
    else if ((lv_diagonalGates == 0) && (lv_neighbour[1] != null) && (lv_neighbour[3] == null) && (lv_neighbour[5] != null) && (lv_neighbour[7] == null)) {
        if ((UnitGetCustomValue(lp_unit, 0) == 0.0)) {
            UnitSetFacing(lp_unit, 135.0, 0.0);
        }
        else {
            UnitSetFacing(lp_unit, 315.0, 0.0);
        }
        if ((UnitGetType(lp_unit) == "Palisade")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale 1.500000,1.500000,1.000000");
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap PalisadeLength");
            UnitBehaviorAdd(lp_unit, "CanBecomeGate", lp_unit, 1);
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale 1.400000,1.400000,1.000000");
        }
        UnitBehaviorRemove(lp_unit, "PalisadeCandle", 1);
    }
    else if (((lv_adjacentPalisades > 2) || (lv_diagonalPalisades > 2) || (lv_adjacentGates > 0) || (lv_diagonalGates > 0) || ((lv_neighbour[2] != null) && (lv_neighbour[4] != null)) || ((lv_neighbour[4] != null) && (lv_neighbour[6] != null)) || ((lv_neighbour[6] != null) && (lv_neighbour[8] != null)) || ((lv_neighbour[8] != null) && (lv_neighbour[2] != null)))) {
        if ((UnitGetType(lp_unit) == "Palisade")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale");
            UnitSetFacing(lp_unit, 270.0, 0.0);
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap PalisadeCorner");
            UnitBehaviorRemove(lp_unit, "CanBecomeGate", 1);
        }
        else {
            libNtve_gf_ReplaceUnit(lp_unit, "Palisade", 1);
        }
        if (gf_RewardCatIndexActive(UnitGetOwner(lp_unit), 3, 5)) {
            UnitBehaviorAdd(lp_unit, "PalisadeCandle", lp_unit, 1);
        }
        else {
        }
    }
    UnitGroupAdd(lv_exclude, lp_unit);
    if ((UnitGroupCount(lv_exclude, c_unitCountAlive) >= 30)) {
        gf_UnlockRequirement(UnitGetOwner(lp_unit), 3, 5);
    }
    else {
    }
    if ((lp_layer < 50)) {
        auto777AA9C7_ae = 8;
        auto777AA9C7_ai = 1;
        lv_a = 1;
        for ( ; ( (auto777AA9C7_ai >= 0 && lv_a <= auto777AA9C7_ae) || (auto777AA9C7_ai <= 0 && lv_a >= auto777AA9C7_ae) ) ; lv_a += auto777AA9C7_ai ) {
            if ((lv_neighbour[lv_a] != null) && (UnitGroupHasUnit(lv_exclude, lv_neighbour[lv_a]) == false)) {
                gf_PalisadeMutability(lv_neighbour[lv_a], lv_exclude, (lp_layer + 1));
            }
            else {
            }
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PalisadeRangedProtection
//--------------------------------------------------------------------------------------------------
void gf_PailsadeRangedProtection (unit lp_attacker, unit lp_target, string lp_effect) {
    // Variable Declarations
    fixed lv_dmgReduction;
    int lv_intervals;
    fixed lv_angle;
    point lv_p;
    unit lv_u;
    // Variable Initialization
    lv_intervals = FixedToInt(DistanceBetweenPoints(UnitGetPosition(lp_target), UnitGetPosition(lp_attacker)));
    lv_angle = AngleBetweenPoints(UnitGetPosition(lp_target), UnitGetPosition(lp_attacker));
    // Implementation
    if (true) {
    }
    else {
    }
    if (gf_RangedAttack(lp_effect)) {
        while ((lv_intervals > 0)) {
            lv_intervals -= 1;
            lv_p = PointWithOffsetPolar(UnitGetPosition(lp_target), lv_intervals, lv_angle);
            lv_u = UnitGroupClosestToPoint(UnitGroupFilterAlliance(UnitGroup(null, c_playerAny, RegionCircle(lv_p, 1.0), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetOwner(lp_attacker), c_unitAllianceEnemy, 0), lv_p);
            if ((lv_u == lp_target)) {
                lv_u = null;
            }
            else {
            }
            if ((lv_u != null)) {
                lv_intervals = 0;
            }
            else {
            }
        }
        if ((lv_u != null)) {
            gf_Advancedtag(lv_u, UnitGetOwner(lp_attacker), StringExternal("Param/Value/A6274FCD"), 1.5, 20);
            gf_Advancedtag(lv_u, UnitGetOwner(lp_target), StringExternal("Param/Value/C5FFD5B1"), 1.5, 20);
            lv_dmgReduction = (gv_damageTaken / 2.0);
            gv_damageTaken -= lv_dmgReduction;
            UnitSetPropertyFixed(lp_target, c_unitPropLife, (UnitGetPropertyFixed(lp_target, c_unitPropLife, c_unitPropCurrent) + lv_dmgReduction));
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Cooking
//--------------------------------------------------------------------------------------------------
void gf_Cooking (unit lp_unit, string lp_mealType, fixed lp_preparationTime) {
    // Variable Declarations
    const fixed lv_interval = 0.125;
    int lv_i;
    fixed lv_preparationTime;
    fixed lv_experienceGain;
    fixed lv_preparationTimeCoefficient;
    int lv_progressTextTag;
    fixed lv_progress;
    int lv_turnInterval;
    bool lv_finished;
    unit lv_cookingNode;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_preparationTime = lp_preparationTime;
    lv_experienceGain = (lp_preparationTime * 3.0);
    lv_preparationTimeCoefficient = libNtve_gf_ArithmeticRealClamp((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Biological]", lv_i)) * 0.01), 0.0, 0.8);
    lv_progressTextTag = c_textTagNone;
    lv_cookingNode = gf_GetCookingNode(lp_unit);
    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/6124D3D0") + UnitTypeGetName(lp_mealType)), false);
    UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    if ((UnitGetType(lp_unit) == "Kobold")) {
        lv_preparationTime = (lv_preparationTime - (lv_preparationTime * lv_preparationTimeCoefficient));
    }
    else {
        lv_preparationTime *= 1.25;
    }
    CatalogFieldValueSet(c_gameCatalogBehavior, "Cooking", "Duration", lv_i, FixedToString(lv_preparationTime, 1));
    UnitBehaviorAdd(lp_unit, "Cooking", lp_unit, 1);
    gf_Quicktag(lp_unit, gf_GetCookingTypeText(lp_mealType), 2.0, 24);
    while ((lv_finished == false) && gf_UnitExists(lp_unit) && (UnitHasBehavior(lp_unit, "Unconscious") == false) && gf_UnitExists(lv_cookingNode)) {
        if ((lv_progress >= lv_preparationTime)) {
            lv_finished = true;
            gv_playerData[lv_i].lv_gameStats.lv_mealsCooked += 1;
            gf_FeastCriteria(lp_unit, lp_mealType);
            gf_Quicktag(lp_unit, (StringExternal("Param/Value/574B8588") + (UnitTypeGetName(lp_mealType) + StringExternal("Param/Value/432E819A"))), 2.0, 24);
            gf_CreateItemForUnit(lp_unit, lp_mealType, 1);
            if ((UnitGetType(lp_unit) == "Kobold") && (gv_skillCooking[lv_i] >= 15)) {
                UnitBehaviorAdd(lp_unit, "CookingExpertiseI", lp_unit, 1);
                UnitSetCustomValue(gv_lastCreatedItem, 0, IntToFixed(lv_i));
            }
            else {
            }
            if ((UnitGetType(lp_unit) == "Kobold") && (gv_skillCooking[lv_i] >= 20)) {
                UnitSetCustomValue(gv_lastCreatedItem, 1, IntToFixed(lv_i));
            }
            else {
            }
            if ((UnitGetType(lp_unit) == "Kobold")) {
                gf_AddExperience(lp_unit, lv_experienceGain);
            }
            else {
            }
            if ((UnitHasBehavior(lp_unit, "MagnificentChefsHat") == true)) {
                PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                        UnitBehaviorAdd(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "ChefsInspiration", lp_unit, 1);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
            }
            else {
            }
        }
        else {
            lv_progress += lv_interval;
            if (lv_turnInterval >= 8) {
                lv_turnInterval = 1;
            }
            else {
                lv_turnInterval = lv_turnInterval + 1;
            }
            if (gf_UnitExists(lv_cookingNode) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_cookingNode)) <= ((UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent) + UnitGetPropertyFixed(lv_cookingNode, c_unitPropRadius, c_unitPropCurrent)) + (gv_interactRadius + gv_interactRadiusBonus)))) {
                if ((lv_turnInterval == 1) && (UnitHasBehavior(lp_unit, "Stationary") == true)) {
                    libNtve_gf_MakeUnitFacePoint(lp_unit, UnitGetPosition(lv_cookingNode), 0.5);
                }
                else {
                }
            }
            else {
                lv_cookingNode = gf_GetCookingNode(lp_unit);
            }
            Wait(lv_interval, c_timeGame);
        }
    }
    if ((lv_finished == false)) {
        SoundPlay(SoundLink("CraftingFailed", -1), PlayerGroupSingle(lv_i), 100.0, 0.0);
        gf_Quicktag(lp_unit, StringExternal("Param/Value/7BD17DC8"), 2.0, 24);
    }
    else {
    }
    UnitBehaviorRemove(lp_unit, "Cooking", 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetCookingNode
//--------------------------------------------------------------------------------------------------
unit gf_GetCookingNode (unit lp_kobold) {
    // Variable Declarations
    unit lv_value;
    // Variable Initialization
    // Implementation
    if ((UnitHasBehavior(lp_kobold, "Heat") == true)) {
        lv_value = UnitBehaviorEffectUnit(lp_kobold, "Heat", c_effectUnitCaster, 0);
    }
    else {
        if (gf_UnitExists(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower)) <= ((UnitGetPropertyFixed(lp_kobold, c_unitPropRadius, c_unitPropCurrent) + UnitGetPropertyFixed(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower, c_unitPropRadius, c_unitPropCurrent)) + gv_interactRadius)) && (UnitHasBehavior(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower, "WatchTowerCanteen") == true)) {
            lv_value = gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CookingTypeText
//--------------------------------------------------------------------------------------------------
text gf_GetCookingTypeText (string lp_unitType) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    // Implementation
    if ((lp_unitType == "CleansingDraught")) {
        lv_value = StringExternal("Param/Value/380C5311");
    }
    else if (true) {
        lv_value = StringExternal("Param/Value/178464D9");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EatFood
//--------------------------------------------------------------------------------------------------
void gf_EatFood (unit lp_unit, unit lp_item, bool lp_consume) {
    // Variable Declarations
    int lv_i;
    text lv_text;
    text lv_suffix;
    fixed lv_rawLamb;
    fixed lv_roastedLamb;
    fixed lv_handfulofBerries;
    fixed lv_spicedLambFeast;
    fixed lv_rawPheasant;
    fixed lv_roastedPheasantWithBerrySauce;
    fixed lv_beerBraisedPheasant;
    fixed lv_beer;
    fixed lv_rawWolfMeat;
    fixed lv_wolfSteak;
    fixed lv_grilledWolfEntrecote;
    fixed lv_smokedLambSirloin1;
    fixed lv_smokedLambSirloin2;
    fixed lv_smokedLambSirloin3;
    fixed lv_sageberry;
    fixed lv_a;
    fixed lv_b;
    fixed lv_c;
    const bool lv_showHealing = true;
    bool lv_showText;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_rawLamb = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Heroic]", UnitGetOwner(lp_unit)));
    lv_roastedLamb = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Hover]", UnitGetOwner(lp_unit)));
    lv_handfulofBerries = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Light]", UnitGetOwner(lp_unit)));
    lv_spicedLambFeast = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Massive]", UnitGetOwner(lp_unit)));
    lv_rawPheasant = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Mechanical]", UnitGetOwner(lp_unit)));
    lv_roastedPheasantWithBerrySauce = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Psionic]", UnitGetOwner(lp_unit)));
    lv_beerBraisedPheasant = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Robotic]", UnitGetOwner(lp_unit)));
    lv_beer = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Structure]", UnitGetOwner(lp_unit)));
    lv_rawWolfMeat = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Armored]", UnitGetOwner(lp_unit)));
    lv_wolfSteak = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Biological]", UnitGetOwner(lp_unit)));
    lv_grilledWolfEntrecote = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Heroic]", UnitGetOwner(lp_unit)));
    lv_smokedLambSirloin1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Hover]", UnitGetOwner(lp_unit)));
    lv_smokedLambSirloin3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Light]", UnitGetOwner(lp_unit)));
    lv_sageberry = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats2", "AttributeBonus[Massive]", UnitGetOwner(lp_unit)));
    // Implementation
    if ((UnitGetType(lp_item) == "RawLamb")) {
        gf_HealUnit(lp_unit, lp_unit, lv_rawLamb, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_rawLamb * 0.5);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "RoastedLamb")) {
        gf_HealUnit(lp_unit, lp_unit, lv_roastedLamb, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_roastedLamb * 0.5);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "HandfulofBerries")) {
        gf_HealUnit(lp_unit, lp_unit, lv_handfulofBerries, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_handfulofBerries * 0.5);
        gf_ActivateFoodCooldown(lp_unit, 4.0);
    }
    else if ((UnitGetType(lp_item) == "SpicedLambFeast")) {
        gf_HealUnit(lp_unit, lp_unit, lv_spicedLambFeast, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_spicedLambFeast * 0.5);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "WellFedEndurance", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "RawPheasant")) {
        gf_HealUnit(lp_unit, lp_unit, lv_rawPheasant, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_rawPheasant * 0.5);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "RoastedPheasantWithBerrySauce")) {
        gf_HealUnit(lp_unit, lp_unit, lv_roastedPheasantWithBerrySauce, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_roastedPheasantWithBerrySauce * 0.5);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "BeerBraisedPheasant")) {
        gf_HealUnit(lp_unit, lp_unit, lv_beerBraisedPheasant, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_beerBraisedPheasant * 0.5);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "WellFedStrength", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "Beer")) {
        gf_HealUnit(lp_unit, lp_unit, lv_beer, lv_showHealing);
        if ((UnitHasBehavior(lp_unit, "BloodthirstyPirateHat") == false)) {
            gf_ActivateFoodCooldown(lp_unit, 4.0);
        }
        else {
        }
        UnitBehaviorAdd(lp_unit, "WellFedBeer", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "RawWolfMeat")) {
        gf_HealUnit(lp_unit, lp_unit, lv_rawWolfMeat, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_rawWolfMeat * 0.667);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "WolfSteak")) {
        gf_HealUnit(lp_unit, lp_unit, lv_wolfSteak, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_wolfSteak * 0.667);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "GrilledWolfEntrecote")) {
        gf_HealUnit(lp_unit, lp_unit, lv_grilledWolfEntrecote, lv_showHealing);
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_grilledWolfEntrecote * 0.667);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "WellFedDex", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "SmokedLambSirloin")) {
        lv_smokedLambSirloin2 = (UnitGetPropertyFixed(lp_unit, c_unitPropEnergyMax, c_unitPropCurrent) * (lv_smokedLambSirloin1 / 200.0));
        lv_smokedLambSirloin1 = (UnitGetPropertyFixed(lp_unit, c_unitPropLifeMax, c_unitPropCurrent) * (lv_smokedLambSirloin1 / 100.0));
        gf_HealUnit(lp_unit, lp_unit, lv_smokedLambSirloin1, lv_showHealing);
        UnitSetPropertyFixed(lp_unit, c_unitPropEnergy, (UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent) + lv_smokedLambSirloin2));
        gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += lv_smokedLambSirloin3;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "Sageberry")) {
        UnitSetPropertyFixed(lp_unit, c_unitPropEnergy, (UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent) + lv_sageberry));
        TextExpressionSetToken("Param/Expression/4409F779", "C", StringExternal("Param/Value/EF1747DA"));
        TextExpressionSetToken("Param/Expression/4409F779", "F", FixedToText(lv_sageberry, 0));
        TextExpressionSetToken("Param/Expression/4409F779", "G", StringExternal("Param/Value/EF7020A6"));
        gf_Quicktag(lp_unit, TextExpressionAssemble("Param/Expression/4409F779"), 3.0, 24);
        gf_ActivateFoodCooldown(lp_unit, 4.0);
    }
    else if ((UnitGetType(lp_item) == "RawStagMeat")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Biological]", lv_i));
        lv_c = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Heroic]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gv_playerData[lv_i].lv_stamina += lv_c;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "StagStew")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Hover]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Massive]", lv_i));
        lv_c = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StagFoodStats", "AttributeBonus[Mechanical]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gv_playerData[lv_i].lv_stamina += lv_c;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "WellFedStag", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "GiantSunfish")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsGiantSunfish", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsGiantSunfish", "AttributeBonus[Biological]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "GiantSunfish", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "SlipperyEel")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsSlipperyEel", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsSlipperyEel", "AttributeBonus[Biological]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "SlipperyEel", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "ToxicFrog")) {
        lv_a = (0.35 * UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(lp_unit, c_unitPropLife, (UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent) - lv_a));
        TextExpressionSetToken("Param/Expression/CAB35B1E", "A", StringExternal("Param/Value/572B0AC7"));
        TextExpressionSetToken("Param/Expression/CAB35B1E", "B", FixedToText(lv_a, 0));
        TextExpressionSetToken("Param/Expression/CAB35B1E", "C", StringExternal("Param/Value/0493DA19"));
        gf_Quicktag(lp_unit, TextExpressionAssemble("Param/Expression/CAB35B1E"), 3.0, 24);
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "ToxicFrog", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "ForestTrout")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsForestTrout", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsForestTrout", "AttributeBonus[Biological]", lv_i));
        lv_c = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsForestTrout", "AttributeBonus[Heroic]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gv_playerData[lv_i].lv_stamina += lv_c;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "HighlandGuppy")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsHighlandGuppy", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsHighlandGuppy", "AttributeBonus[Biological]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "HighlandGuppy", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "AlbinoCavefish")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsAlbinoCavefish", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsAlbinoCavefish", "AttributeBonus[Biological]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "AlbinoCavefish", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "StripedLurker")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsStripedLurker", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsStripedLurker", "AttributeBonus[Biological]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "StripedLurker", lp_unit, 1);
        UnitBehaviorAdd(lp_unit, "StripedLurkerInvisibility", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "JewelDanio")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsJewelDanio", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsJewelDanio", "AttributeBonus[Biological]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        UnitBehaviorAdd(lp_unit, "JewelDanio", lp_unit, 1);
    }
    else if ((UnitGetType(lp_item) == "WaterScorpion")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsWaterScorpion", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsWaterScorpion", "AttributeBonus[Biological]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gf_ActivateFoodCooldown(lp_unit, 16.0);
    }
    else if ((UnitGetType(lp_item) == "FireAmmonite")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFireAmmonite", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFireAmmonite", "AttributeBonus[Biological]", lv_i));
        lv_c = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsFireAmmonite", "AttributeBonus[Heroic]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        if ((UnitHasBehavior(lp_unit, "FrostBarrier") == false) && (UnitHasBehavior(lp_unit, "FrostArmor") == false)) {
            gv_playerData[lv_i].lv_warmth += lv_c;
        }
        else {
        }
        gf_ActivateFoodCooldown(lp_unit, 8.0);
    }
    else if ((UnitGetType(lp_item) == "BlindRainfish")) {
        lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsBlindRainfish", "AttributeBonus[Armored]", lv_i));
        lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsBlindRainfish", "AttributeBonus[Biological]", lv_i));
        gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
        gv_playerData[lv_i].lv_hunger += lv_b;
        gf_ActivateFoodCooldown(lp_unit, 8.0);
        gf_RainInitialize(2.0, RandomFixed(30.0, 60.0), 100.0);
    }
    else if ((UnitGetType(lp_item) == "TigerGourami")) {
        UnitGroupLoopBegin(gv_pets[lv_i]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "TigerRage", lp_unit, 1);
            gf_Quicktag(lp_unit, StringExternal("Param/Value/5082F7DD"), 3.0, 24);
        }
        UnitGroupLoopEnd();
    }
    else if ((UnitGetType(lp_item) == "MurlocTreat")) {
        UnitCreate(1, "MurlocSlave", 0, lv_i, UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
        UnitBehaviorRemove(UnitLastCreated(), "MurlocContract", 1);
        UnitGroupAdd(gv_playerData[lv_i].lv_murlocSlaves, UnitLastCreated());
        UnitControlGroupAddUnit(lv_i, 8, UnitLastCreated());
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/47465454"), gf_GetPlayerName(UnitGetOwner(UnitLastCreated()), 0), StringExternal("Param/Value/CEDA1A2B"));
        if ((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "TheMurlocket") == true)) {
            UnitBehaviorAdd(UnitLastCreated(), "MurlocRebelSpirit", UnitLastCreated(), 1);
        }
        else {
        }
        if (gf_RewardCatIndexActive(lv_i, 3, 4)) {
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_TextureSelectByID("MurlocOrange"));
        }
        else {
        }
        if ((UnitGroupCount(gv_playerData[lv_i].lv_murlocSlaves, c_unitCountAlive) >= 50)) {
            gf_UnlockRequirement(lv_i, 3, 4);
        }
        else {
        }
        gf_Quicktag(lp_unit, StringExternal("Param/Value/B118DE8F"), 3.0, 24);
    }
    if ((UnitGetCustomValue(lp_item, 0) != 0.0)) {
        lv_text = StringExternal("Param/Value/BBF1891C");
        lv_showText = true;
        UnitBehaviorAdd(lp_unit, "CookingExpertiseII", gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 0))].lv_kobold, 1);
    }
    else {
    }
    if ((UnitGetCustomValue(lp_item, 1) != 0.0)) {
        UnitBehaviorAdd(gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 1))].lv_kobold, "CookingExpertiseIII", gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 1))].lv_kobold, 1);
        if ((lp_unit == gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 1))].lv_kobold)) {
            lv_text = (lv_text + StringExternal("Param/Value/5D5CA705"));
            lv_showText = true;
        }
        else {
            gf_Quicktag(gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 1))].lv_kobold, StringExternal("Param/Value/74A037B3"), 2.0, 24);
        }
    }
    else {
    }
    if ((lp_consume == true)) {
        gf_DropandRemove(lp_item);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ActivateFoodCooldown
//--------------------------------------------------------------------------------------------------
void gf_ActivateFoodCooldown (unit lp_unit, fixed lp_duration) {
    // Variable Declarations
    int lv_i;
    fixed lv_durationModded;
    const fixed lv_tolerace = 0.01;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_durationModded = lp_duration;
    // Implementation
    if ((gv_skillCooking[lv_i] >= 25)) {
        lv_durationModded *= (1.0 - 0.2);
    }
    else {
    }
    if ((UnitHasBehavior(lp_unit, "VenomousArbalestPoison") == true)) {
        lv_durationModded *= (1.0 + 0.2);
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogBehavior, "KoboldDigestion", "Duration", lv_i, FixedToString(lv_durationModded, 1));
    UnitBehaviorAdd(lp_unit, "KoboldDigestion", lp_unit, 1);
    UnitAbilityReset(lp_unit, AbilityCommand("Eatasnack", 0), c_spendLocationAll);
    CatalogFieldValueSet(c_gameCatalogAbil, "Eatasnack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(lp_unit), FixedToString(lv_durationModded, 2));
    UnitAbilitySpend(lp_unit, AbilityCommand("Eatasnack", 0), c_spendLocationAbility);
    CatalogFieldValueSet(c_gameCatalogAbil, "Eatasnack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(lp_unit), FixedToString(0.25, 2));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RemoveAilments
//--------------------------------------------------------------------------------------------------
void gf_RemoveAilments (unit lp_unit) {
    // Implementation
    UnitBehaviorRemove(lp_unit, "DemonicStrikes", 50);
    UnitBehaviorRemove(lp_unit, "Infection", 10);
    UnitBehaviorRemove(lp_unit, "IronPickaxeBleed", 5);
    UnitBehaviorRemove(lp_unit, "VenomousArbalestPoison", 5);
    UnitBehaviorRemove(lp_unit, "ArmorShred", 3);
    UnitBehaviorRemove(lp_unit, "Affliction", 1);
    UnitBehaviorRemove(lp_unit, "AfflictionArmorShred", 1);
    UnitBehaviorRemove(lp_unit, "SturdyWoodenStickSlow", 1);
    UnitBehaviorRemove(lp_unit, "Trampled", 1);
    UnitBehaviorRemove(lp_unit, "RotatingBladeBleed", 1);
    UnitBehaviorRemove(lp_unit, "FelFlames", 1);
    UnitBehaviorRemove(lp_unit, "Tether", 1);
    UnitBehaviorRemove(lp_unit, "Clairvoyance", 1);
    UnitBehaviorRemove(lp_unit, "ClairvoyanceNecromancerBonus", 1);
    UnitBehaviorRemove(lp_unit, "Annihilate", 1);
    if ((UnitHasBehavior(lp_unit, "Stalked") == true)) {
        UnitCreateEffectUnit(lp_unit, "BirdServiceExpire", UnitBehaviorEffectUnit(lp_unit, "Stalked", c_effectUnitCaster, 0));
        UnitBehaviorRemove(lp_unit, "Stalked", 1);
        gf_Quicktag(lp_unit, StringExternal("Param/Value/DFC57BDF"), 3.0, 24);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Crafting
//--------------------------------------------------------------------------------------------------
void gf_Crafting (unit lp_craftsman, unit lp_station, string lp_itemType, fixed lp_craftingTime) {
    // Variable Declarations
    const fixed lv_interval = 0.125;
    int lv_i;
    fixed lv_craftingTime;
    fixed lv_experienceGain;
    fixed lv_craftingTimeCoefficient;
    int lv_progressTextTag;
    fixed lv_progress;
    int lv_turnInterval;
    bool lv_finished;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_craftsman);
    lv_craftingTime = lp_craftingTime;
    lv_experienceGain = (lp_craftingTime * 3.0);
    lv_craftingTimeCoefficient = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "AttributeBonus[Heroic]", lv_i)) * 0.01);
    lv_progressTextTag = c_textTagNone;
    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/6A41732D") + UnitTypeGetName(lp_itemType)), false);
    UnitIssueOrder(lp_craftsman, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    lv_craftingTime = (lv_craftingTime - (lv_craftingTime * lv_craftingTimeCoefficient));
    if ((gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArmory == true)) {
        lv_craftingTime *= 0.5;
    }
    else {
    }
    gf_Quicktag(lp_craftsman, StringExternal("Param/Value/2C605AC4"), 2.0, 24);
    CatalogFieldValueSet(c_gameCatalogBehavior, "Crafting", "Duration", lv_i, FixedToString(lv_craftingTime, 1));
    UnitBehaviorAdd(lp_craftsman, "Crafting", lp_craftsman, 1);
    if ((UnitGetType(lp_station) == "Smithy")) {
        UnitBehaviorAdd(lp_station, "SmithyWorking", lp_station, 1);
    }
    else {
    }
    while ((lv_finished == false) && (gv_playerData[lv_i].lv_alive == true) && gf_UnitExists(lp_station) && (UnitHasBehavior(lp_craftsman, "Unconscious") == false) && (DistanceBetweenPoints(UnitGetPosition(lp_craftsman), UnitGetPosition(lp_station)) <= (gv_interactRadius + gv_interactRadiusBonus))) {
        if ((lv_progress >= lv_craftingTime)) {
            lv_finished = true;
            gv_playerData[lv_i].lv_gameStats.lv_itemsCrafted += 1;
            gf_AddExperience(lp_craftsman, lv_experienceGain);
            gf_CreateItemForUnit(lp_craftsman, lp_itemType, 1);
            gf_Quicktag(lp_craftsman, (StringExternal("Param/Value/F3CA4DFE") + (UnitTypeGetName(lp_itemType) + StringExternal("Param/Value/5F1667AF"))), 2.0, 24);
            gf_StaminaOnCraft(lp_craftsman);
            ActorSend(libNtve_gf_MainActorofUnit(lp_craftsman), "Signal WorkComplete");
            if ((gv_playerData[lv_i].lv_isAI == true)) {
                gf_UpdateSupplies(lv_i);
                gv_aIData[lv_i].lv_smithyDesire = gf_WantedItemType(lp_craftsman, "Smithy");
                gv_aIData[lv_i].lv_benchDesire = gf_WantedItemType(lp_craftsman, "Workbench");
            }
            else {
            }
            if ((gv_tutorial == true)) {
                if ((lp_itemType == "SturdyWoodenStick")) {
                    TriggerExecute(gt_TutorialPart11, true, false);
                }
                else if ((lp_itemType == "WarmWoolTunic")) {
                    TriggerExecute(gt_TutorialPart12, true, false);
                }
            }
            else {
            }
        }
        else {
            lv_progress += lv_interval;
            if (lv_turnInterval >= 8) {
                lv_turnInterval = 1;
            }
            else {
                lv_turnInterval = lv_turnInterval + 1;
            }
            if ((lv_turnInterval == 1) && (UnitHasBehavior(lp_craftsman, "Stationary") == true)) {
                libNtve_gf_MakeUnitFacePoint(lp_craftsman, UnitGetPosition(lp_station), 0.5);
            }
            else {
            }
            Wait(lv_interval, c_timeGame);
        }
    }
    if ((lv_finished == false)) {
        SoundPlay(SoundLink("CraftingFailed", -1), PlayerGroupSingle(lv_i), 100.0, 0.0);
        gf_Quicktag(lp_craftsman, StringExternal("Param/Value/E3F73A38"), 2.0, 24);
    }
    else {
    }
    gv_aIData[lv_i].lv_benchDesire = null;
    gv_aIData[lv_i].lv_smithyDesire = null;
    UnitBehaviorRemove(lp_craftsman, "Crafting", 1);
    UnitBehaviorRemove(lp_station, "SmithyWorking", 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BlunderbussShotgun
//--------------------------------------------------------------------------------------------------
void gf_BlunderbussShotgun (unit lp_attacker, unit lp_target, string lp_effect) {
    // Variable Declarations
    fixed lv_distance;
    fixed lv_extraDamage;
    fixed lv_maxRange;
    fixed lv_damageFactor;
    // Variable Initialization
    // Implementation
    if ((lp_effect == "BlunderbussDamage")) {
        lv_maxRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "Blunderbuss", "Range", UnitGetOwner(lp_attacker)));
        lv_distance = DistanceBetweenPoints(UnitGetPosition(lp_attacker), UnitGetPosition(lp_target));
        lv_distance -= (UnitGetPropertyFixed(lp_attacker, c_unitPropRadius, c_unitPropCurrent) + 0.5);
        lv_distance -= UnitGetPropertyFixed(lp_target, c_unitPropRadius, c_unitPropCurrent);
        lv_damageFactor = (0.2 * (1.0 - (lv_distance / lv_maxRange)));
        lv_extraDamage = (gv_damageTaken * lv_damageFactor);
        gv_damageTaken += lv_extraDamage;
        UnitDamage(lp_attacker, "RangedDamageDummyNoText", lp_target, lv_extraDamage);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetItemLevel
//--------------------------------------------------------------------------------------------------
int gf_GetItemLevel (string lp_type, int lp_player) {
    // Variable Declarations
    string lv_itemTypeID;
    int lv_value;
    // Variable Initialization
    lv_itemTypeID = "";
    // Implementation
    if ((lp_type != null)) {
        if ((lp_type == "TwinThrowingAxes") && (gv_playerData[lp_player].lv_isAI == true)) {
            lv_value = -1;
        }
        else if ((lp_type == "OffhandBlockedHelper") && (gv_playerData[lp_player].lv_isAI == true)) {
            lv_value = 1000;
        }
        else if ((lp_type == "ViciousJavelin") && (gv_playerData[lp_player].lv_isAI == true) && (gf_RangedWeapon(gv_playerData[lp_player].lv_kobold) == true)) {
            lv_value = -1;
        }
        else if ((lp_type == "Torch") && ((gv_b_Day == false) || (gv_winter == true))) {
            if ((gv_winter == true)) {
                lv_value = 102;
            }
            else {
                lv_value = 100;
            }
        }
        else if ((lp_type == "Lantern") && (gv_b_Day == false)) {
            lv_value = 101;
        }
        else if ((lp_type == "FelFireTorch") && ((gv_b_Day == false) || (gv_winter == true))) {
            lv_value = 103;
        }
        else if ((lp_type == "ObedienceRod") && ((lp_player >= 1) && (lp_player <= gv_players)) && (TimerGetRemaining(gv_aIData[lp_player].lv_tamingTime) > 0.0)) {
            lv_value = 100;
        }
        else if (((lp_type == "FishingRod") || (lp_type == "EpicFishingRod")) && ((lp_player >= 1) && (lp_player <= gv_players)) && (TimerGetRemaining(gv_aIData[lp_player].lv_fishingTime) > 0.0)) {
            lv_value = 100;
        }
        else if (true) {
            lv_itemTypeID = (lp_type);
            lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Level", lp_player));
        }
    }
    else {
        lv_value = -1;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnitCanGetItem
//--------------------------------------------------------------------------------------------------
bool gf_UnitCanGetItem (unit lp_unit, string lp_type) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_inventory;
    int lv_freeSpace;
    bool lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_inventory = UnitInventoryGroup(lp_unit);
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold")) {
        lv_freeSpace = gv_playerData[lv_i].lv_backpackSize;
        if ((gf_UnitExists(gf_KoboldMainHand(lp_unit)) == false) && (CatalogFieldValueGet(c_gameCatalogItem, lp_type, "Class", lv_i) == "MainHand")) {
            lv_freeSpace += 1;
        }
        else {
            UnitGroupRemove(lv_inventory, gf_KoboldMainHand(lp_unit));
        }
        if ((gf_UnitExists(gf_KoboldOffhand(lp_unit)) == false) && ((CatalogFieldValueGet(c_gameCatalogItem, lp_type, "Class", lv_i) == "Offhand") || (CatalogFieldValueGet(c_gameCatalogItem, lp_type, "Class", lv_i) == "OffhandHelper"))) {
            lv_freeSpace += 1;
        }
        else {
            UnitGroupRemove(lv_inventory, gf_KoboldOffhand(lp_unit));
        }
        if ((gf_UnitExists(gf_KoboldArmor(lp_unit)) == false) && (CatalogFieldValueGet(c_gameCatalogItem, lp_type, "Class", lv_i) == "Armor")) {
            lv_freeSpace += 1;
        }
        else {
            UnitGroupRemove(lv_inventory, gf_KoboldArmor(lp_unit));
        }
    }
    else if ((UnitGetType(lp_unit) == "MurlocSlave")) {
        lv_freeSpace = 4;
    }
    else if ((UnitGetType(lp_unit) == "StorageOutpost")) {
        lv_freeSpace = 26;
    }
    else if ((UnitGetType(lp_unit) == "PackBeaver")) {
        lv_freeSpace = 1;
    }
    else if ((UnitGetType(lp_unit) == "Fortress") && (UnitHasBehavior(lp_unit, "WatchTowerStorage") == true)) {
        lv_freeSpace = 40;
    }
    lv_freeSpace -= UnitGroupCount(lv_inventory, c_unitCountAlive);
    if ((lv_freeSpace > 0)) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CreateItemForUnit
//--------------------------------------------------------------------------------------------------
void gf_CreateItemForUnit (unit lp_unit, string lp_itemType, int lp_amount) {
    int autoBEED6783_ae;
    int autoBEED6783_ai;
    // Variable Declarations
    int lv_a;
    unitgroup lv_inventoryItems;
    int lv_numberOfItemsCarried;
    bool lv_inventoryFull;
    unit lv_daItem;
    // Variable Initialization
    lv_inventoryItems = UnitInventoryGroup(lp_unit);
    // Implementation
    if (gf_UnitExists(lp_unit) && (lp_itemType != null) && (lp_amount != 0)) {
        autoBEED6783_ae = lp_amount;
        autoBEED6783_ai = 1;
        lv_a = 1;
        for ( ; ( (autoBEED6783_ai >= 0 && lv_a <= autoBEED6783_ae) || (autoBEED6783_ai <= 0 && lv_a >= autoBEED6783_ae) ) ; lv_a += autoBEED6783_ai ) {
            if (gf_UnitCanGetItem(lp_unit, lp_itemType)) {
                UnitInventoryCreate(lp_unit, lp_itemType);
                lv_daItem = UnitInventoryLastCreated();
                gv_lastCreatedItem = UnitInventoryLastCreated();
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
            else {
                if ((UnitGetType(lp_unit) == "StorageOutpost") && (lp_itemType == "Beer")) {
                    UnitCreate(1, lp_itemType, 0, 0, PointWithOffsetPolar(UnitGetPosition(lp_unit), 1.5, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                }
                else {
                    UnitCreate(1, lp_itemType, 0, 0, UnitGetPosition(lp_unit), 270.0);
                }
                lv_daItem = UnitLastCreated();
                gv_lastCreatedItem = UnitLastCreated();
                lv_inventoryFull = true;
            }
            if ((UnitGetType(lv_daItem) == "Torch")) {
                if ((UnitHasBehavior(lp_unit, "Lightbringer") == true)) {
                    UnitBehaviorAdd(lv_daItem, "TorchTimedLifePerked", lv_daItem, 1);
                }
                else {
                    UnitBehaviorAdd(lv_daItem, "TorchTimedLife", lv_daItem, 1);
                }
            }
            else {
            }
        }
        if ((lv_inventoryFull == true)) {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, StringExternal("Param/Value/AD1A70A6"));
        }
        else {
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, StringExternal("Param/Value/E42168FB"));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CreateLoot
//--------------------------------------------------------------------------------------------------
void gf_CreateLoot (string lp_itemType, point lp_origin, fixed lp_randomOffset, bool lp_fountainEffect, int lp_dropChance, int lp_goldAmountoptional) {
    // Implementation
    if ((RandomInt(1, 100) <= lp_dropChance)) {
        UnitCreate(1, lp_itemType, c_unitCreateIgnorePlacement, 0, lp_origin, libNtve_gf_RandomAngle());
        if ((lp_itemType == "GoldPurse")) {
            UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/0A9A2FE8"), (IntToText(lp_goldAmountoptional) + StringExternal("Param/Value/BBFB4EC7")), StringExternal("Param/Value/916A9DED"));
            UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lp_goldAmountoptional));
        }
        else {
        }
        if ((lp_fountainEffect == true)) {
            UnitCreateEffectPoint(UnitLastCreated(), "LootFountainEffect", gf_RandomPathablePoint(RegionCircle(lp_origin, lp_randomOffset)));
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CreateCoinPurse
//--------------------------------------------------------------------------------------------------
void gf_CreateCoinPurse (int lp_value, point lp_point) {
    // Implementation
    UnitCreate(1, "GoldPurse", 0, 0, lp_point, libNtve_gf_RandomAngle());
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/FD257A8D"), (IntToText(lp_value) + StringExternal("Param/Value/35E054F6")), StringExternal("Param/Value/BC71D966"));
    UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lp_value));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipmentChange
//--------------------------------------------------------------------------------------------------
void gf_EquipmentChange (int lp_player, unit lp_item, bool lp_negative, int lp_actionIndex) {
    // Variable Declarations
    string lv_itemTypeID;
    // Variable Initialization
    lv_itemTypeID = (UnitGetType(lp_item));
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lp_player) == "MainHand")) {
        if ((lp_negative == false)) {
            UnitGroupAdd(gv_playerData[lp_player].lv_equippedMainHandG, lp_item);
        }
        else {
            UnitGroupRemove(gv_playerData[lp_player].lv_equippedMainHandG, lp_item);
            if ((UnitGetType(lp_item) == "CommonSword")) {
                gf_DropandRemove(lp_item);
            }
            else {
            }
        }
        gf_EquipMainHands(lp_player, UnitGetType(lp_item), lp_negative);
    }
    else if (((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lp_player) == "Offhand") || (CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lp_player) == "OffhandHelper"))) {
        if ((lp_negative == false)) {
            UnitGroupAdd(gv_playerData[lp_player].lv_equippedOffhandG, lp_item);
        }
        else {
            UnitGroupRemove(gv_playerData[lp_player].lv_equippedOffhandG, lp_item);
            if ((UnitGetType(lp_item) == "CommonBuckler")) {
                gf_DropandRemove(lp_item);
            }
            else {
            }
        }
        gf_EquipOffhands(lp_player, UnitGetType(lp_item), lp_negative);
    }
    else if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lp_player) == "Armor")) {
        if ((lp_negative == false)) {
            UnitGroupAdd(gv_playerData[lp_player].lv_equippedArmorG, lp_item);
        }
        else {
            UnitGroupRemove(gv_playerData[lp_player].lv_equippedArmorG, lp_item);
            if ((UnitGetType(lp_item) == "CommonArmor")) {
                gf_DropandRemove(lp_item);
            }
            else {
            }
        }
        gf_EquipArmors(lp_player, UnitGetType(lp_item), lp_negative);
    }
    gv_aIData[lp_player].lv_benchDesire = null;
    gv_aIData[lp_player].lv_smithyDesire = null;
    gf_UpdateStatsAll(lp_player);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipMainHands
//--------------------------------------------------------------------------------------------------
void gf_EquipMainHands (int lp_player, string lp_itemType, bool lp_negative) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_r;
    fixed lv_weap1Str;
    fixed lv_weap1Dex;
    fixed lv_weap2Str;
    fixed lv_weap2End;
    fixed lv_weap3Str;
    fixed lv_weap3End;
    fixed lv_weap4Str;
    fixed lv_weap5Str;
    fixed lv_weap5End;
    fixed lv_weap6Str;
    fixed lv_weap6End;
    fixed lv_weap7Str;
    fixed lv_weap7Dex;
    fixed lv_weap7End;
    fixed lv_weap8Dex;
    fixed lv_weap8Int;
    fixed lv_weap8End;
    fixed lv_weap9Str;
    fixed lv_weap9Dex;
    fixed lv_weap11Str;
    fixed lv_weap11Will;
    fixed lv_weap11Armor;
    fixed lv_weap11EL;
    fixed lv_weap12Str;
    fixed lv_weap12End;
    fixed lv_weap12Int;
    fixed lv_weap13Str;
    fixed lv_weap13Dex;
    fixed lv_weap14Dex;
    fixed lv_weap14End;
    fixed lv_weap15Int;
    fixed lv_weap16Int;
    fixed lv_weap16Will;
    fixed lv_weap17Str;
    fixed lv_weap17Dex;
    fixed lv_weap17End;
    fixed lv_weap18Str;
    fixed lv_weap18End;
    fixed lv_weap18Int;
    fixed lv_weap19WillCelestialOrb;
    fixed lv_weap19EndCelestialOrb;
    fixed lv_weap20Dex;
    fixed lv_weap20Int;
    fixed lv_weap20Will;
    unit lv_tU;
    // Variable Initialization
    lv_r = gf_ReversalFactor(lp_negative);
    lv_weap1Str = (4.0 * lv_r);
    lv_weap1Dex = (4.0 * lv_r);
    lv_weap2Str = (6.0 * lv_r);
    lv_weap2End = (4.0 * lv_r);
    lv_weap3Str = (3.0 * lv_r);
    lv_weap3End = (5.0 * lv_r);
    lv_weap4Str = (15.0 * lv_r);
    lv_weap5Str = (10.0 * lv_r);
    lv_weap5End = (10.0 * lv_r);
    lv_weap6Str = (2.0 * lv_r);
    lv_weap6End = (2.0 * lv_r);
    lv_weap7Str = (5.0 * lv_r);
    lv_weap7Dex = (3.0 * lv_r);
    lv_weap7End = (4.0 * lv_r);
    lv_weap8Dex = (10.0 * lv_r);
    lv_weap8Int = (6.0 * lv_r);
    lv_weap8End = (4.0 * lv_r);
    lv_weap9Str = (8.0 * lv_r);
    lv_weap9Dex = (4.0 * lv_r);
    lv_weap11Str = (7.0 * lv_r);
    lv_weap11Will = (6.0 * lv_r);
    lv_weap11Armor = (2.0 * lv_r);
    lv_weap11EL = (0.1 * lv_r);
    lv_weap12Str = (5.0 * lv_r);
    lv_weap12End = (5.0 * lv_r);
    lv_weap12Int = (4.0 * lv_r);
    lv_weap13Str = (10.0 * lv_r);
    lv_weap13Dex = (10.0 * lv_r);
    lv_weap14Dex = (2.0 * lv_r);
    lv_weap14End = (2.0 * lv_r);
    lv_weap15Int = (5.0 * lv_r);
    lv_weap16Int = (15.0 * lv_r);
    lv_weap16Will = (5.0 * lv_r);
    lv_weap17Str = (8.0 * lv_r);
    lv_weap17Dex = (6.0 * lv_r);
    lv_weap17End = (6.0 * lv_r);
    lv_weap18Str = (7.0 * lv_r);
    lv_weap18End = (4.0 * lv_r);
    lv_weap18Int = (4.0 * lv_r);
    lv_weap19WillCelestialOrb = (3.0 * lv_r);
    lv_weap19EndCelestialOrb = (2.0 * lv_r);
    lv_weap20Dex = (7.0 * lv_r);
    lv_weap20Int = (7.0 * lv_r);
    lv_weap20Will = (6.0 * lv_r);
    // Implementation
    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "ShadowCloakStopAttack", gv_playerData[lp_player].lv_kobold, 1);
    if ((lp_itemType == "SturdyWoodenStick")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap1Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap1Dex), 0));
    }
    else if ((lp_itemType == "SharpIronPickaxe")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap2Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap2End), 0));
    }
    else if ((lp_itemType == "RoughBlunderbuss")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap3Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap3End), 0));
    }
    else if ((lp_itemType == "Wolfsbane")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap4Str), 0));
    }
    else if ((lp_itemType == "MurlocDoomhammer")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap5Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap5End), 0));
        if ((gv_playerData[lp_player].lv_alive == true) && (lp_negative == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "MurlocRage", 1);
        }
        else {
        }
    }
    else if ((lp_itemType == "DullPickaxe")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap6Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap6End), 0));
    }
    else if ((lp_itemType == "BerserkersBattleAxe")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap7Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap7Dex), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap7End), 0));
    }
    else if ((lp_itemType == "CravensFishSticker")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap8Dex), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap8Int), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap8End), 0));
    }
    else if ((lp_itemType == "GoldenPolearm")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap9Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap9Dex), 0));
    }
    else if ((lp_itemType == "EnigmaticStaff")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap11Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap11Will), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_weap11Armor), gv_armorPrecision));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MeleeDamage", "LeechFraction[Energy]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "MeleeDamage", "LeechFraction[Energy]", lp_player, FixedToString((lv_x + lv_weap11EL), 2));
    }
    else if ((lp_itemType == "VenomousArbalest")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap12Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap12Int), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap12End), 0));
    }
    else if ((lp_itemType == "ViciouslySharpArmblade")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap13Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap13Dex), 0));
    }
    else if ((lp_itemType == "ObedienceRod")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap14Dex), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap14End), 0));
    }
    else if ((lp_itemType == "ElderWand")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap15Int), 0));
    }
    else if ((lp_itemType == "FrostNeedle")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap16Int), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap16Will), 0));
    }
    else if ((lp_itemType == "Bloodcleaver")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap17Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap17Dex), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap17End), 0));
        if ((gv_playerData[lp_player].lv_alive == true) && (lp_negative == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "BloodcleaverHaste", 1);
        }
        else {
        }
    }
    else if ((lp_itemType == "JudgmentGavel")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap18Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap18End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap18Int), 0));
    }
    else if ((lp_itemType == "CelestialOrb")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap19WillCelestialOrb), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_weap19EndCelestialOrb), 0));
    }
    else if ((lp_itemType == "LiquidatorSpellblade")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap20Dex), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_weap20Int), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_weap20Will), 0));
        if ((gv_playerData[lp_player].lv_alive == true) && (lp_negative == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "LiquidatorSpellbladeActive", 1);
        }
        else {
        }
    }
    else if ((lp_itemType == "RepeatingCrossbow")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
    }
    else if ((lp_itemType == "FishingRod")) {
        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "Fishing", 1);
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + (5.0 * lv_r)), 0));
    }
    else if ((lp_itemType == "EpicFishingRod")) {
        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "Fishing", 1);
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
    }
    else if ((lp_itemType == "TwinThrowingAxes")) {
        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "TwinThrowingAxesAlternate", 1);
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + (12.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + (10.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + (10.0 * lv_r)), 0));
        if ((lp_negative == false)) {
            if (gf_UnitExists(gf_KoboldOffhand(gv_playerData[lp_player].lv_kobold))) {
                UnitSetPosition(gf_KoboldOffhand(gv_playerData[lp_player].lv_kobold), UnitGetPosition(gv_playerData[lp_player].lv_kobold), false);
                lv_tU = gf_KoboldOffhand(gv_playerData[lp_player].lv_kobold);
            }
            else {
            }
            UnitInventoryCreate(gv_playerData[lp_player].lv_kobold, "OffhandBlockedHelper");
            if (gf_UnitExists(lv_tU)) {
                UnitIssueOrder(gv_playerData[lp_player].lv_kobold, OrderTargetingUnit(null, lv_tU), c_orderQueueAddToFront);
            }
            else {
            }
        }
        else {
            gf_DropandRemove(gf_KoboldOffhand(gv_playerData[lp_player].lv_kobold));
        }
    }
    else if ((lp_itemType == "CommonSword")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + (5.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + (5.0 * lv_r)), 0));
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/1E8DF119"), false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipOffHands
//--------------------------------------------------------------------------------------------------
void gf_EquipOffhands (int lp_player, string lp_itemType, bool lp_negative) {
    // Variable Declarations
    fixed lv_temp;
    fixed lv_r;
    fixed lv_offh1Str;
    fixed lv_offh1End;
    fixed lv_offh1Armor;
    fixed lv_offh2Omni;
    fixed lv_offh3Str;
    fixed lv_offh3End;
    fixed lv_offh3Armor;
    fixed lv_offh4End;
    fixed lv_offh4Int;
    fixed lv_offh4Will;
    fixed lv_offh4Armor;
    fixed lv_offh5Will;
    fixed lv_offh6End;
    fixed lv_offh6Armor;
    fixed lv_offh7Int;
    fixed lv_offh7Will;
    fixed lv_offh8Str;
    fixed lv_offh8End;
    fixed lv_offh9Str;
    fixed lv_offh9Dex;
    fixed lv_offh9End;
    fixed lv_offh10End;
    fixed lv_offh10Int;
    fixed lv_offh10Will;
    fixed lv_offh10Armor;
    fixed lv_offh11Dex;
    fixed lv_offh11End;
    fixed lv_offh11Armor;
    fixed lv_offh12StrDex;
    // Variable Initialization
    lv_r = gf_ReversalFactor(lp_negative);
    lv_offh1Str = (5.0 * lv_r);
    lv_offh1End = (3.0 * lv_r);
    lv_offh1Armor = (4.0 * lv_r);
    lv_offh2Omni = (2.0 * lv_r);
    lv_offh3Str = (8.0 * lv_r);
    lv_offh3End = (12.0 * lv_r);
    lv_offh3Armor = (6.0 * lv_r);
    lv_offh4End = (4.0 * lv_r);
    lv_offh4Int = (3.0 * lv_r);
    lv_offh4Will = (2.0 * lv_r);
    lv_offh4Armor = (3.0 * lv_r);
    lv_offh5Will = (6.0 * lv_r);
    lv_offh6End = (8.0 * lv_r);
    lv_offh6Armor = (5.0 * lv_r);
    lv_offh7Int = (10.0 * lv_r);
    lv_offh7Will = (10.0 * lv_r);
    lv_offh8Str = (2.0 * lv_r);
    lv_offh8End = (2.0 * lv_r);
    lv_offh9Str = (4.0 * lv_r);
    lv_offh9Dex = (8.0 * lv_r);
    lv_offh9End = (4.0 * lv_r);
    lv_offh10End = (6.0 * lv_r);
    lv_offh10Int = (7.0 * lv_r);
    lv_offh10Will = (7.0 * lv_r);
    lv_offh10Armor = (4.0 * lv_r);
    lv_offh11Dex = (3.0 * lv_r);
    lv_offh11End = (4.0 * lv_r);
    lv_offh11Armor = (3.0 * lv_r);
    lv_offh12StrDex = (5.0 * lv_r);
    // Implementation
    if ((lp_itemType == "ViciousJavelin")) {
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "ShadowCloakStopAttack", gv_playerData[lp_player].lv_kobold, 1);
    }
    else {
    }
    if (((lp_player >= 0) && (lp_player <= gv_players)) && (StringSub(gv_perks[lp_player], 18, 18) == "1")) {
        lv_offh8Str += (1.0 * lv_r);
        lv_offh8End += (1.0 * lv_r);
    }
    else {
    }
    if ((lp_itemType == "IronBandedBuckler")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh1Str), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh1End), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player, FixedToString((lv_temp + lv_offh1Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "Lantern")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
    }
    else if ((lp_itemType == "SpikedShadowstoneScutum")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh3Str), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh3End), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player, FixedToString((lv_temp + lv_offh3Armor), gv_armorPrecision));
        if ((lp_negative == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "TowerShield", 1);
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "TowerShieldRain", 1);
        }
        else {
        }
    }
    else if ((lp_itemType == "MysticsTribalShield")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh4End), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh4Int), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh4Will), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player, FixedToString((lv_temp + lv_offh4Armor), gv_armorPrecision));
        gf_UpdateSpellCosts(lp_player);
    }
    else if ((lp_itemType == "VengefulMurlocSkull")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh5Will), 0));
    }
    else if ((lp_itemType == "HeavyTowerShield")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh6End), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player, FixedToString((lv_temp + lv_offh6Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "FelFireTorch")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh7Int), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh7Will), 0));
        if ((lv_r == 1)) {
            gv_aIData[lp_player].lv_supply.lv_lanterns = 0;
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_lanterns = 1;
        }
    }
    else if ((lp_itemType == "Torch")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh8Str), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh8End), 0));
    }
    else if ((lp_itemType == "OutlandishHeartpiercer")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh9Str), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh9Dex), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh9End), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SiphonLifeApply", "Count", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "SiphonLifeApply", "Count", lp_player, FixedToString((lv_temp + (2.0 * lv_r)), 0));
    }
    else if ((lp_itemType == "FrostBarrier")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh10End), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh10Int), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh10Will), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player, FixedToString((lv_temp + lv_offh10Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "LightLeatherShield")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh11Dex), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + lv_offh11End), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_temp + lv_offh11Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "ViciousJavelin")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + lv_offh12StrDex), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_temp + lv_offh12StrDex), 0));
    }
    else if ((lp_itemType == "Demonward")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + (5.0 * lv_r)), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + (8.0 * lv_r)), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_temp + (6.0 * lv_r)), gv_armorPrecision));
    }
    else if ((lp_itemType == "GravesingersClaw")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + (4.0 * lv_r)), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_temp + (7.0 * lv_r)), 0));
        if ((gv_playerData[lp_player].lv_alive == true) && (lp_negative == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "GravesingersClawActive", 1);
        }
        else {
        }
    }
    else if ((lp_itemType == "CommonBuckler")) {
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_temp + (6.0 * lv_r)), 0));
        lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_temp + (5.0 * lv_r)), gv_armorPrecision));
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/12688F49"), false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipArmors
//--------------------------------------------------------------------------------------------------
void gf_EquipArmors (int lp_player, string lp_itemType, bool lp_negative) {
    // Variable Declarations
    int lv_y;
    fixed lv_x;
    fixed lv_r;
    fixed lv_armor1End;
    fixed lv_armor1Int;
    fixed lv_armor1Will;
    fixed lv_armor2Str;
    fixed lv_armor2End;
    fixed lv_armor2Will;
    fixed lv_armor2Armor;
    fixed lv_armor3End;
    fixed lv_armor3Armor;
    fixed lv_armor4Str;
    fixed lv_armor4StrBonus;
    fixed lv_armor4End;
    fixed lv_armor4Armor;
    fixed lv_armor5Int;
    fixed lv_armor5End;
    fixed lv_armor6Str;
    fixed lv_armor6Dex;
    fixed lv_armor6End;
    fixed lv_armor6Arm;
    fixed lv_armor6Range;
    fixed lv_armor7Str;
    fixed lv_armor7End;
    fixed lv_armor7Arm;
    fixed lv_armor8Str;
    fixed lv_armor8End;
    fixed lv_armor8Will;
    fixed lv_armor8Arm;
    fixed lv_armor9End;
    fixed lv_armor9Int;
    fixed lv_armor9Will;
    fixed lv_armor9Armor;
    fixed lv_armor10Str;
    fixed lv_armor10Dex;
    fixed lv_armor10End;
    fixed lv_armor11Str;
    fixed lv_armor11End;
    fixed lv_armor11Int;
    fixed lv_armor11Armor;
    fixed lv_armor12WillWarlocksVestments;
    fixed lv_armor12ArmorWarlocksVestments;
    fixed lv_armor13StrHighRangersChainmail;
    fixed lv_armor13DexHighRangersChainmail;
    fixed lv_armor13EndHighRangersChainmail;
    fixed lv_armor13ArmorHighRangersChainmail;
    fixed lv_armor13SightHighRangersChainmail;
    fixed lv_armor13StrBonus;
    fixed lv_armor13DexBonus;
    fixed lv_armor14Omni;
    fixed lv_armor14Armor;
    // Variable Initialization
    lv_r = gf_ReversalFactor(lp_negative);
    lv_armor1End = (3.0 * lv_r);
    lv_armor1Int = (3.0 * lv_r);
    lv_armor1Will = (4.0 * lv_r);
    lv_armor2Str = (3.0 * lv_r);
    lv_armor2End = (3.0 * lv_r);
    lv_armor2Will = (2.0 * lv_r);
    lv_armor2Armor = (2.0 * lv_r);
    lv_armor3End = (14.0 * lv_r);
    lv_armor3Armor = (6.0 * lv_r);
    lv_armor4Str = (8.0 * lv_r);
    lv_armor4StrBonus = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GladiatorsStrength", "Amount", lp_player)) * lv_r);
    lv_armor4End = (8.0 * lv_r);
    lv_armor4Armor = (6.0 * lv_r);
    lv_armor5Int = (8.0 * lv_r);
    lv_armor5End = (6.0 * lv_r);
    lv_armor6Str = (3.0 * lv_r);
    lv_armor6Dex = (4.0 * lv_r);
    lv_armor6End = (3.0 * lv_r);
    lv_armor6Arm = (2.0 * lv_r);
    lv_armor6Range = (1.0 * lv_r);
    lv_armor7Str = (8.0 * lv_r);
    lv_armor7End = (8.0 * lv_r);
    lv_armor7Arm = (5.0 * lv_r);
    lv_armor8Str = (5.0 * lv_r);
    lv_armor8End = (4.0 * lv_r);
    lv_armor8Will = (3.0 * lv_r);
    lv_armor8Arm = (3.0 * lv_r);
    lv_armor9End = (4.0 * lv_r);
    lv_armor9Int = (5.0 * lv_r);
    lv_armor9Will = (5.0 * lv_r);
    lv_armor9Armor = (3.0 * lv_r);
    lv_armor10Str = (8.0 * lv_r);
    lv_armor10Dex = (7.0 * lv_r);
    lv_armor10End = (5.0 * lv_r);
    lv_armor11Str = (5.0 * lv_r);
    lv_armor11End = (8.0 * lv_r);
    lv_armor11Int = (2.0 * lv_r);
    lv_armor11Armor = (5.0 * lv_r);
    lv_armor12WillWarlocksVestments = (10.0 * lv_r);
    lv_armor12ArmorWarlocksVestments = (1.0 * lv_r);
    lv_armor13StrHighRangersChainmail = (2.0 * lv_r);
    lv_armor13DexHighRangersChainmail = (3.0 * lv_r);
    lv_armor13EndHighRangersChainmail = (5.0 * lv_r);
    lv_armor13ArmorHighRangersChainmail = (4.0 * lv_r);
    lv_armor13SightHighRangersChainmail = (2.0 * lv_r);
    lv_armor13StrBonus = (2.0 * lv_r);
    lv_armor13DexBonus = (2.0 * lv_r);
    lv_armor14Omni = (5.0 * lv_r);
    lv_armor14Armor = (8.0 * lv_r);
    // Implementation
    if ((lp_itemType == "LeatherCoat")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor1End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor1Int), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor1Will), 0));
    }
    else if ((lp_itemType == "WarmWoolTunic")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor2Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor2End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor2Will), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor2Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "HeavyIronBreastplate")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor3End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player, FixedToString((lv_x + lv_armor3Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "GarishGladiatorsGarb")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + (lv_armor4Str + lv_armor4StrBonus)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor4End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor[0]", lp_player, FixedToString((lv_x + lv_armor4Armor), gv_armorPrecision));
        if ((gv_playerData[lp_player].lv_alive == true)) {
            if ((lp_negative == true) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "GladiatorsStrength") == true)) {
                UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "GladiatorsStrength", UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "GladiatorsStrength"));
            }
            else {
                UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "GladiatorsStrength", gv_playerData[lp_player].lv_kobold, FixedToInt(lv_armor4StrBonus));
            }
        }
        else {
        }
    }
    else if ((lp_itemType == "MagnificentChefsHat")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor5Int), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor5End), 0));
    }
    else if ((lp_itemType == "HuntsmansJacket")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor6Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor6Dex), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor6End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor6Arm), gv_armorPrecision));
    }
    else if ((lp_itemType == "DreadplateArmor")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor7Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor7End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor7Arm), gv_armorPrecision));
    }
    else if ((lp_itemType == "IronStuddedVest")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor8Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor8End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor8Will), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor8Arm), gv_armorPrecision));
        if ((lp_negative == true)) {
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "SpellAbsorb", 1);
            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "SpellAbsorbCooldown", 1);
        }
        else {
        }
    }
    else if ((lp_itemType == "BearShamansShroud")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor9End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor9Int), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor9Will), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor9Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "BloodthirstyPirateHat")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor10Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor10Dex), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor10End), 0));
    }
    else if ((lp_itemType == "GoldenHauberk")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor11Str), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor11End), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor11Int), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor11Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "WarlocksVestments")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor12WillWarlocksVestments), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor12ArmorWarlocksVestments), gv_armorPrecision));
        gf_UpdateSpellCosts(lp_player);
    }
    else if ((lp_itemType == "MasterRangersMaille")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor13StrHighRangersChainmail), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor13DexHighRangersChainmail), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor13EndHighRangersChainmail), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor13ArmorHighRangersChainmail), gv_armorPrecision));
        gf_ModifyUnitSight("Kobold", lp_player, (2.0 * lv_r));
        if ((gv_playerData[lp_player].lv_alive == true)) {
            if ((lp_negative == true)) {
                UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleStrDex", UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleStrDex"));
                UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleStrEnd", UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleStrEnd"));
                UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleIntWil", UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleIntWil"));
            }
            else {
                UnitGroupLoopBegin(gv_pets[lp_player]);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_AcquirePet(lp_player, UnitGetType(UnitGroupLoopCurrent()));
                }
                UnitGroupLoopEnd();
            }
        }
        else {
        }
    }
    else if ((lp_itemType == "SpellbreakerArmor")) {
        gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + lv_armor14Armor), gv_armorPrecision));
    }
    else if ((lp_itemType == "StormwizardsRobes")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + (8.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + (8.0 * lv_r)), 0));
    }
    else if ((lp_itemType == "IronbarkArmor")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player, FixedToString((lv_x + (5.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + (7.0 * lv_r)), 0));
    }
    else if ((lp_itemType == "CommonArmor")) {
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + (4.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
        CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player));
        CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((lv_x + (4.0 * lv_r)), 0));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: KoboldMainHand
//--------------------------------------------------------------------------------------------------
unit gf_KoboldMainHand (unit lp_kobold) {
    // Implementation
    if (gf_UnitExists(lp_kobold)) {
        return UnitGroupUnit(gv_playerData[UnitGetOwner(lp_kobold)].lv_equippedMainHandG, 1);
    }
    else {
        return null;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: KoboldOffHand
//--------------------------------------------------------------------------------------------------
unit gf_KoboldOffhand (unit lp_kobold) {
    // Implementation
    if (gf_UnitExists(lp_kobold)) {
        return UnitGroupUnit(gv_playerData[UnitGetOwner(lp_kobold)].lv_equippedOffhandG, 1);
    }
    else {
        return null;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: KoboldArmor
//--------------------------------------------------------------------------------------------------
unit gf_KoboldArmor (unit lp_kobold) {
    // Implementation
    if (gf_UnitExists(lp_kobold)) {
        return UnitGroupUnit(gv_playerData[UnitGetOwner(lp_kobold)].lv_equippedArmorG, 1);
    }
    else {
        return null;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReversalFactor
//--------------------------------------------------------------------------------------------------
fixed gf_ReversalFactor (bool lp_booly) {
    // Variable Declarations
    fixed lv_reversalFactor;
    // Variable Initialization
    lv_reversalFactor = 1.0;
    // Implementation
    if ((lp_booly == true)) {
        lv_reversalFactor = -1.0;
    }
    else {
    }
    return lv_reversalFactor;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MetalArmor
//--------------------------------------------------------------------------------------------------
void gf_MetalArmor (unit lp_unit, fixed lp_r) {
    // Implementation
    if ((lp_r == 1.0)) {
        UnitBehaviorAdd(lp_unit, "MetalArmor", lp_unit, 1);
    }
    else {
        UnitBehaviorRemove(lp_unit, "MetalArmor", 1);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GladiatorsStrength
//--------------------------------------------------------------------------------------------------
void gf_GladiatorsStrength (int lp_player) {
    // Variable Declarations
    const fixed lv_increment = 1.0;
    const int lv_stackCap = 10;
    fixed lv_gladiatorGarbCurrentBonus;
    fixed lv_currentStrength;
    // Variable Initialization
    // Implementation
    if (((lp_player >= 0) && (lp_player <= 15)) && (gv_playerData[lp_player].lv_alive == true)) {
        lv_gladiatorGarbCurrentBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GladiatorsStrength", "Amount", lp_player));
        lv_currentStrength = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "GarishGladiatorsGarb") == true) && (UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, "GladiatorsStrength") < lv_stackCap)) {
            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "GladiatorsStrength", gv_playerData[lp_player].lv_kobold, 1);
            CatalogFieldValueSet(c_gameCatalogEffect, "GladiatorsStrength", "Amount", lp_player, FixedToString((lv_gladiatorGarbCurrentBonus + lv_increment), 0));
            CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player, FixedToString((lv_currentStrength + lv_increment), 0));
            gf_Quicktag(gv_playerData[lp_player].lv_kobold, StringExternal("Param/Value/346EAD87"), 3.0, 24);
            gf_UpdateStatsAll(lp_player);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NightlyBeerCasks
//--------------------------------------------------------------------------------------------------
void gf_NightlyBeerCasks () {
    // Variable Declarations
    unitgroup lv_pirates;
    unitgroup lv_beerOutposts;
    // Variable Initialization
    lv_pirates = gf_UnitsInUnitGroupWithBuff(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), "BloodthirstyPirateHat");
    lv_beerOutposts = UnitGroupEmpty();
    // Implementation
    UnitGroupLoopBegin(lv_pirates);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAddUnitGroup(lv_beerOutposts, UnitGroup("StorageOutpost", UnitGetOwner(UnitGroupLoopCurrent()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_beerOutposts);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupCount(UnitInventoryGroup(UnitGroupLoopCurrent()), c_unitCountAlive) < 36)) {
            UnitInventoryCreate(UnitGroupLoopCurrent(), "Beer");
            UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpawnScrollofTransmutation
//--------------------------------------------------------------------------------------------------
void gf_SpawnScrollofTransmutation (point lp_a, fixed lp_b) {
    // Implementation
    if ((libNtve_gf_RandomPercent() <= lp_b)) {
        UnitCreate(1, "ScrollofTransmutation", 0, 0, lp_a, libNtve_gf_RandomAngle());
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ModifyTorchIntensity
//--------------------------------------------------------------------------------------------------
void gf_ModifyTorchIntensity (int lp_player, fixed lp_amount) {
    // Variable Declarations
    fixed lv_intensity;
    // Variable Initialization
    lv_intensity = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FelFireTorchIntensity", "Amount", lp_player));
    // Implementation
    lv_intensity = libNtve_gf_ArithmeticRealClamp((lv_intensity + lp_amount), 0.0, 100.0);
    CatalogFieldValueSet(c_gameCatalogEffect, "FelFireTorchIntensity", "Amount", lp_player, FixedToString(lv_intensity, 1));
    CatalogFieldValueSet(c_gameCatalogEffect, "FelFlamesDamage", "Amount", lp_player, FixedToString((1.0 + (lv_intensity * 0.05)), 1));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemCleansingPotion
//--------------------------------------------------------------------------------------------------
void gf_ItemCleansingPotion (unit lp_unit, unit lp_item, bool lp_itemUsed) {
    // Implementation
    if ((lp_itemUsed == false)) {
        UnitAddChargeUsed(lp_item, "Abil/GenericUseItem3Charges", 1.0);
    }
    else {
    }
    if ((UnitGetChargeUsed(lp_item, "Abil/GenericUseItem3Charges") == 3.0)) {
        gf_DropandRemove(lp_item);
    }
    else {
    }
    gf_Quicktag(lp_unit, StringExternal("Param/Value/BA915C75"), 2.0, 24);
    gf_RemoveAilments(lp_unit);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemMurlocDoomhammer
//--------------------------------------------------------------------------------------------------
void gf_ItemMurlocDoomhammer (unit lp_unit, unit lp_item) {
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold") && (UnitInventoryContainer(lp_item) == gv_mainHandSlot)) {
        UnitCreateEffectUnit(lp_unit, "MurlocRage", lp_unit);
        UnitBehaviorAdd(lp_unit, "MurlocDoomhammerCooldown", lp_unit, 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_itemEquipReq);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemGoldenHauberk
//--------------------------------------------------------------------------------------------------
void gf_ItemGoldenHauberk (unit lp_unit, unit lp_item) {
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold") && (UnitInventoryContainer(lp_item) == gv_armorSlot)) {
        UnitCreateEffectUnit(lp_unit, "GoldenHauberkHealSearch", lp_unit);
        UnitBehaviorAdd(lp_unit, "GoldenHauberkCooldown", lp_unit, 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_itemEquipReq);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemShovelDig
//--------------------------------------------------------------------------------------------------
void gf_ItemShovelDig (unit lp_unit, unit lp_item, bool lp_itemUsed) {
    // Variable Declarations
    point lv_digLocation;
    // Variable Initialization
    lv_digLocation = UnitGetPosition(lp_unit);
    // Implementation
    if ((lp_itemUsed == false)) {
        UnitAddChargeUsed(lp_item, "Abil/GenericUseItem2Charges", 1.0);
    }
    else {
    }
    if ((UnitGetChargeUsed(lp_item, "Abil/GenericUseItem2Charges") == 2.0)) {
        gf_DropandRemove(lp_item);
    }
    else {
    }
    if ((gv_questIndexActive == 11)) {
        UnitCreateEffectUnit(lp_unit, "ShovelDig", lp_unit);
        if ((DistanceBetweenPoints(lv_digLocation, gv_piratesTreasureLocation) <= (1.5 + (0.05 * gv_skillMining[UnitGetOwner(lp_unit)])))) {
            gf_Quicktag(lp_unit, StringExternal("Param/Value/8854468B"), 2.0, 24);
            gv_skillPointsPlayer[UnitGetOwner(lp_unit)] += 10;
            gf_IncreaseSkillType(UnitGetOwner(lp_unit), 2, 10);
            gf_PiratesFound(lp_unit);
        }
        else {
            gf_Quicktag(lp_unit, StringExternal("Param/Value/410A6960"), 2.0, 24);
            gf_PiratesDirection(lp_unit);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, StringExternal("Param/Value/170A3719"));
        gf_CreateLoot("Stone", lv_digLocation, 1.5, true, 100, 0);
        gf_CreateLoot("Stone", lv_digLocation, 1.5, true, 100, 0);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemBearPeltSplit
//--------------------------------------------------------------------------------------------------
void gf_ItemBearPeltSplit (unit lp_unit, unit lp_item, bool lp_consume) {
    // Implementation
    if ((lp_consume == true)) {
        gf_DropandRemove(lp_item);
    }
    else {
    }
    gf_CreateItemForUnit(lp_unit, "Leather", 2);
    gf_Quicktag(lp_unit, StringExternal("Param/Value/855E4E44"), 3.0, 24);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemRaiseDead
//--------------------------------------------------------------------------------------------------
void gf_ItemRaiseDead (unit lp_unit, unit lp_item, bool lp_consume) {
    int auto1F30808A_ae;
    int auto1F30808A_ai;
    // Variable Declarations
    int lv_a;
    int lv_amount;
    // Variable Initialization
    lv_amount = 8;
    // Implementation
    if ((lp_consume == true)) {
        gf_DropandRemove(lp_item);
    }
    else {
    }
    gf_SetScaledStats("Ghoul", UnitGetOwner(lp_unit));
    auto1F30808A_ae = lv_amount;
    auto1F30808A_ai = 1;
    lv_a = 1;
    for ( ; ( (auto1F30808A_ai >= 0 && lv_a <= auto1F30808A_ae) || (auto1F30808A_ai <= 0 && lv_a >= auto1F30808A_ae) ) ; lv_a += auto1F30808A_ai ) {
        UnitCreate(1, "Ghoul", 0, UnitGetOwner(lp_unit), gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_unit), 4.0)), libNtve_gf_RandomAngle());
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemDraughtofDecay
//--------------------------------------------------------------------------------------------------
void gf_ItemDraughtofDecay (unit lp_unit, unit lp_item, bool lp_consume) {
    // Implementation
    if ((lp_consume == true)) {
        gf_DropandRemove(lp_item);
    }
    else {
    }
    gf_Quicktag(lp_unit, StringExternal("Param/Value/FFA02403"), 2.0, 24);
    UnitCreateEffectUnit(lp_unit, "UnlivingStrengthApply", lp_unit);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemDemonward
//--------------------------------------------------------------------------------------------------
void gf_ItemDemonward (unit lp_unit, unit lp_item) {
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold") && (UnitInventoryContainer(lp_item) == gv_offhandSlot)) {
        gf_SetScaledStats("InfernalMinion", UnitGetOwner(lp_unit));
        UnitCreateEffectUnit(lp_unit, "DemonwardSummon", lp_unit);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_itemEquipReq);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemOrbofDarkness
//--------------------------------------------------------------------------------------------------
void gf_ItemOrbofDarkness (unit lp_unit, unit lp_item, bool lp_consume) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold")) {
        if ((lp_consume == true)) {
            gf_DropandRemove(lp_item);
        }
        else {
        }
        gf_VeilofDarkness(30.0, gf_GetTeamOfPlayer(lv_i));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemJavelin
//--------------------------------------------------------------------------------------------------
void gf_ItemJavelin (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold")) {
        UnitAbilityReset(lp_unit, AbilityCommand("JavelinCooldown", 0), c_spendLocationPlayer);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemLiquidatorSpellblade
//--------------------------------------------------------------------------------------------------
void gf_ItemLiquidatorSpellblade (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold")) {
        UnitAbilityReset(lp_unit, AbilityCommand("LiquidatorSpellbladeCooldown", 0), c_spendLocationPlayer);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemNightcrawler
//--------------------------------------------------------------------------------------------------
void gf_ItemNightcrawler (unit lp_unit, unit lp_item, bool lp_consume) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGetType(lp_unit) == "Kobold")) {
        if ((lp_consume == true)) {
            gf_DropandRemove(lp_item);
        }
        else {
        }
        UnitBehaviorAdd(lp_unit, "Nightcrawler", lp_unit, 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemLumberParts
//--------------------------------------------------------------------------------------------------
void gf_ItemLumberParts (unit lp_unit, unit lp_item) {
    // Implementation
    if ((UnitGroupCount(gv_playerData[UnitGetOwner(lp_unit)].lv_resources.lv_lumberParts, c_unitCountAlive) >= 2)) {
        gf_CreateItemForUnit(lp_unit, "Lumber", 1);
        UnitGroupRemove(gv_playerData[UnitGetOwner(lp_unit)].lv_resources.lv_lumberParts, lp_item);
        gf_DropandRemove(lp_item);
        gf_DropandRemove(UnitGroupRandomUnit(gv_playerData[UnitGetOwner(lp_unit)].lv_resources.lv_lumberParts, c_unitCountAlive));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemFireworks
//--------------------------------------------------------------------------------------------------
void gf_ItemFireworks (unit lp_unit, unit lp_item) {
    int auto95E4A53A_val;
    // Implementation
    auto95E4A53A_val = RandomInt(1, 3);
    if (auto95E4A53A_val == 1) {
        UnitCreate(1, "FireworksRed", 0, 0, UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "FireworksTimedLife", UnitLastCreated(), 1);
    }
    else if (auto95E4A53A_val == 2) {
        UnitCreate(1, "FireworksYellow", 0, 0, UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "FireworksTimedLife", UnitLastCreated(), 1);
    }
    else if (auto95E4A53A_val == 3) {
        UnitCreate(1, "FireworksBlue", 0, 0, UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "FireworksTimedLife", UnitLastCreated(), 1);
    }
    else {
    }
    gf_DropandRemove(lp_item);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemFishingStart
//--------------------------------------------------------------------------------------------------
bool gf_FishingStart (unit lp_unit, point lp_target) {
    int auto51B37CA7_ae;
    int auto51B37CA7_ai;
    // Variable Declarations
    int lv_a;
    int lv_i;
    int lv_fishingRegion;
    fixed lv_fishingTime;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_fishingRegion = gf_FishRegionAtPoint(lp_target);
    lv_fishingTime = libNtve_gf_ArithmeticRealClamp((gv_fishTime * gf_FishingSpeedModifier(lp_unit)), 5.0, 100.0);
    lv_success = true;
    // Implementation
    if ((lv_fishingRegion != 0)) {
        UnitSetCustomValue(lp_unit, 7, 0.0);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Fishing", "Duration", lv_i, FixedToString(lv_fishingTime, 1));
        CatalogFieldValueSet(c_gameCatalogBehavior, "FishingBobber", "Duration", lv_i, FixedToString(lv_fishingTime, 1));
        gf_Quicktag(lp_unit, StringExternal("Param/Value/9FA40A0A"), 3.0, 22);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(lp_unit, lp_target, 0.25);
        UnitCreate(1, "FishingTarget", c_unitCreateIgnorePlacement, lv_i, lp_target, libNtve_gf_RandomAngle());
        UnitSetHeight(UnitLastCreated(), (gv_fishRegionEleveation[lv_fishingRegion] - 0.05), 0.0);
        UnitBehaviorAdd(lp_unit, "Fishing", lp_unit, 1);
        UnitBehaviorAdd(UnitLastCreated(), "FishingBobber", lp_unit, 1);
        UnitCreateEffectUnit(lp_unit, "FishingLine", UnitLastCreated());
        if ((gv_questIndexActive == 16)) {
            auto51B37CA7_ae = gv_expeditionAreas;
            auto51B37CA7_ai = 1;
            lv_a = 1;
            for ( ; ( (auto51B37CA7_ai >= 0 && lv_a <= auto51B37CA7_ae) || (auto51B37CA7_ai <= 0 && lv_a >= auto51B37CA7_ae) ) ; lv_a += auto51B37CA7_ai ) {
                if ((RegionContainsPoint(RegionCircle(gv_expeditionActivePoint[lv_a], gv_expeditionRadius), UnitGetPosition(UnitLastCreated())) == true)) {
                    if ((gv_expeditionProgress[gv_playerData[lv_i].lv_team][lv_a] == false)) {
                        gf_Quicktag(UnitLastCreated(), StringExternal("Param/Value/90EAEA5D"), 3.0, 22);
                    }
                    else {
                    }
                    UnitSetCustomValue(lp_unit, 7, IntToFixed(lv_a));
                }
                else {
                }
            }
        }
        else {
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, StringExternal("Param/Value/8639080B"));
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FishRegionAtPoint
//--------------------------------------------------------------------------------------------------
int gf_FishRegionAtPoint (point lp_point) {
    int auto92BE4A68_ae;
    int auto92BE4A68_ai;
    // Variable Declarations
    int lv_a;
    int lv_value;
    // Variable Initialization
    // Implementation
    auto92BE4A68_ae = gv_fishRegions;
    auto92BE4A68_ai = 1;
    lv_a = 1;
    for ( ; ( (auto92BE4A68_ai >= 0 && lv_a <= auto92BE4A68_ae) || (auto92BE4A68_ai <= 0 && lv_a >= auto92BE4A68_ae) ) ; lv_a += auto92BE4A68_ai ) {
        if ((RegionContainsPoint(gv_fishRegion[lv_a], lp_point) == true) && (WorldHeight(c_heightMapGround, lp_point) <= gv_fishRegionEleveation[lv_a])) {
            lv_value = lv_a;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetFishReward
//--------------------------------------------------------------------------------------------------
string gf_GetFishReward (unit lp_bobber) {
    // Variable Declarations
    string lv_value;
    // Variable Initialization
    // Implementation
    if ((RandomInt(1, 75) == 1)) {
        lv_value = "TheMurlocket";
    }
    else if ((gv_dayNight == 1)) {
        lv_value = gv_fishReward[RandomInt(1, gv_fishRewards)];
    }
    else if (true) {
        lv_value = gv_fishReward[RandomInt(2, gv_fishRewards)];
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FishingSpeedModifier
//--------------------------------------------------------------------------------------------------
fixed gf_FishingSpeedModifier (unit lp_unit) {
    // Variable Declarations
    fixed lv_value;
    // Variable Initialization
    lv_value = 1.0;
    // Implementation
    lv_value *= (1.0 - (IntToFixed(gv_skillForaging[UnitGetOwner(lp_unit)]) * 0.01));
    if ((UnitHasBehavior(lp_unit, "EpicFishingRod") == true)) {
        lv_value *= (1.0 - 0.15);
    }
    else {
    }
    if ((UnitHasBehavior(lp_unit, "Nightcrawler") == true)) {
        lv_value *= (1.0 - 0.35);
    }
    else {
    }
    if ((gv_raining == true)) {
        lv_value *= (1.0 - 0.1);
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BirdScoutLand
//--------------------------------------------------------------------------------------------------
void gf_BirdScoutLand (unit lp_bird, unit lp_outpost) {
    // Variable Declarations
    point lv_targetLocation;
    // Variable Initialization
    lv_targetLocation = PointWithOffset(UnitGetPosition(lp_outpost), gv_birdScoutXOffset, gv_birdScoutYOffset);
    // Implementation
    UnitBehaviorRemove(lp_bird, "BirdLookingForNest", 1);
    UnitSetState(lp_bird, c_unitStateFidget, false);
    UnitIssueOrder(lp_bird, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLocation), c_orderQueueReplace);
    UnitSetHeight(lp_bird, gv_birdScoutZOffset, (DistanceBetweenPoints(UnitGetPosition(lp_bird), lv_targetLocation) / UnitGetPropertyFixed(lp_bird, c_unitPropMovementSpeed, c_unitPropCurrent)));
    while (!((((DistanceBetweenPoints(UnitGetPosition(lp_bird), lv_targetLocation) <= 0.1)) || (lp_bird == null) || (lp_outpost == null) || (UnitHasBehavior(lp_outpost, "OutpostGotBird") == true)))) {
        Wait(0.125, c_timeGame);
    }
    if (gf_UnitExists(lp_outpost) && (UnitHasBehavior(lp_outpost, "OutpostGotBird") == false)) {
        UnitSetHeight(lp_bird, (WorldHeight(c_heightMapGround, lv_targetLocation) + gv_birdScoutZOffset), 0.0625);
        UnitSetState(lp_bird, c_unitStateIgnoreTerrainZ, true);
        UnitBehaviorAdd(lp_bird, "BirdNesting", lp_outpost, 1);
        UnitBehaviorAdd(lp_outpost, "OutpostGotBird", lp_bird, 1);
        gf_Quicktag(lp_outpost, StringExternal("Param/Value/22F1D842"), 2.0, 24);
    }
    else {
        UnitBehaviorAdd(lp_bird, "BirdLookingForNest", lp_bird, 1);
        gf_BirdScoutTakeOff(lp_bird, lp_outpost);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BirdScoutTakeOff
//--------------------------------------------------------------------------------------------------
void gf_BirdScoutTakeOff (unit lp_bird, unit lp_outpost) {
    // Implementation
    UnitSetState(lp_bird, c_unitStateIgnoreTerrainZ, false);
    UnitSetHeight(lp_bird, gv_birdScoutZOffset, 0.0);
    UnitSetHeight(lp_bird, RandomFixed(5.0, 6.0), 4.0);
    UnitSetState(lp_bird, c_unitStateFidget, true);
    UnitBehaviorAdd(lp_bird, "BirdNoLand", lp_bird, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateOutpostVisual
//--------------------------------------------------------------------------------------------------
void gf_UpdateOutpostVisual (unit lp_hut) {
    // Variable Declarations
    int lv_current;
    const int lv_maximum = 26;
    // Variable Initialization
    lv_current = gf_GetNumberOfItemsInOutpost(lp_hut);
    // Implementation
    TextExpressionSetToken("Param/Expression/1C91219E", "A", gf_GetPlayerName(UnitGetOwner(lp_hut), 0));
    TextExpressionSetToken("Param/Expression/1C91219E", "B", StringExternal("Param/Value/DA0524E8"));
    TextExpressionSetToken("Param/Expression/1C91219E", "C", IntToText(lv_current));
    TextExpressionSetToken("Param/Expression/1C91219E", "D", StringExternal("Param/Value/DF89C6EA"));
    TextExpressionSetToken("Param/Expression/1C91219E", "E", IntToText(lv_maximum));
    UnitSetInfoText(lp_hut, StringExternal("Param/Value/EA02E31A"), TextExpressionAssemble("Param/Expression/1C91219E"), StringExternal("Param/Value/A80C2CE3"));
    if ((UnitGetType(lp_hut) == "StorageOutpost")) {
        if ((lv_current >= 1)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity1", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity1", 1);
        }
        if ((lv_current >= 2)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity2", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity2", 1);
        }
        if ((lv_current >= 4)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity3", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity3", 1);
        }
        if ((lv_current >= 6)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity4", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity4", 1);
        }
        if ((lv_current >= 8)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity5", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity5", 1);
        }
        if ((lv_current >= 10)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity6", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity6", 1);
        }
        if ((lv_current >= 12)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity7", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity7", 1);
        }
        if ((lv_current >= 14)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity8", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity8", 1);
        }
        if ((lv_current >= 16)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity9", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity9", 1);
        }
        if ((lv_current >= 18)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity10", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity10", 1);
        }
        if ((lv_current >= 20)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity11", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity11", 1);
        }
        if ((lv_current >= 22)) {
            UnitBehaviorAdd(lp_hut, "StorageOutpostCapacity12", lp_hut, 1);
        }
        else {
            UnitBehaviorRemove(lp_hut, "StorageOutpostCapacity12", 1);
        }
    }
    else {
    }
    gf_UpdateShipmentAvailability(lp_hut);
    if (gf_RewardCatIndexActive(UnitGetOwner(lp_hut), 3, 1)) {
        UnitBehaviorAdd(lp_hut, "OutpostCandles", lp_hut, 1);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateShipmentAvailability
//--------------------------------------------------------------------------------------------------
void gf_UpdateShipmentAvailability (unit lp_unit) {
    // Variable Declarations
    unitgroup lv_inventory;
    bool lv_well;
    // Variable Initialization
    lv_inventory = UnitInventoryGroup(lp_unit);
    // Implementation
    UnitGroupLoopBegin(lv_inventory);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
            lv_well = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_well == true)) {
        UnitBehaviorAdd(lp_unit, "ShipmentAvailable", lp_unit, 1);
    }
    else {
        UnitBehaviorRemove(lp_unit, "ShipmentAvailable", 1);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetNumberOfItemsInPost
//--------------------------------------------------------------------------------------------------
int gf_GetNumberOfItemsInOutpost (unit lp_outpost) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    fixed lv_cV;
    int lv_index;
    unitgroup lv_inventory;
    int lv_total;
    // Variable Initialization
    lv_inventory = UnitInventoryGroup(lp_outpost);
    lv_total = UnitGroupCount(lv_inventory, c_unitCountAlive);
    // Implementation
    if ((lv_total >= 26)) {
        UnitSetCustomValue(lp_outpost, 0, 1.0);
    }
    else {
        UnitSetCustomValue(lp_outpost, 0, 0.0);
    }
    if ((lv_total > gv_playerData[UnitGetOwner(lp_outpost)].lv_gameStats.lv_storedItems)) {
        gv_playerData[UnitGetOwner(lp_outpost)].lv_gameStats.lv_storedItems = lv_total;
    }
    else {
    }
    return lv_total;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellResource
//--------------------------------------------------------------------------------------------------
void gf_SellResource (unit lp_item, int lp_seller, unit lp_outpost) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    // Implementation
    if (gf_UnitExists(lp_item)) {
        lv_type = UnitGetType(lp_item);
        if (gf_TypeIsTradeGood(lv_type)) {
            lv_amount = gf_GetSellPrice(lv_type, lp_seller);
            gf_DropandRemove(lp_item);
            PlayerModifyPropertyInt(lp_seller, c_playerPropMinerals, c_playerPropOperAdd, lv_amount);
            gv_playerData[lp_seller].lv_gameStats.lv_goldEarned += lv_amount;
            gf_Quicktag(gv_playerData[lp_seller].lv_kobold, (StringExternal("Param/Value/0D604AAE") + (IntToText(lv_amount) + StringExternal("Param/Value/0DEC48DF"))), 2.0, 24);
            SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lp_seller), gv_playerData[lp_seller].lv_kobold, 0.0, 100.0, 0.0);
            gf_UpdateSellPrice(lv_type, lv_amount, gf_GetTradeIncrement(lv_type));
        }
        else {
            UnitGroupRemove(gv_aIData[lp_seller].lv_tradeItems, lp_item);
            UnitSetPosition(lp_item, PointWithOffsetPolar(UnitGetPosition(lp_outpost), RandomFixed(1.3, 1.6), libNtve_gf_RandomAngle()), false);
            UnitIssueOrder(lp_outpost, OrderTargetingUnit(null, lp_item), c_orderQueueAddToEnd);
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyResource
//--------------------------------------------------------------------------------------------------
bool gf_BuyResource (unit lp_buyer, string lp_type) {
    // Variable Declarations
    int lv_i;
    int lv_amount;
    bool lv_succeed;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_buyer);
    lv_amount = gf_GetBuyPrice(lp_type, UnitGetOwner(lp_buyer));
    lv_succeed = true;
    // Implementation
    if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_amount)) {
        PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_amount);
        gf_CreateItemForUnit(lp_buyer, lp_type, 1);
        gf_Quicktag(lp_buyer, (UnitTypeGetName(lp_type) + StringExternal("Param/Value/AD8AD045")), 2.0, 24);
        SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), lp_buyer, 0.0, 100.0, 0.0);
        gf_UpdateBuyPrice(lp_type, lv_amount, 1);
    }
    else {
        lv_succeed = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
    }
    return lv_succeed;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetTradeIncrement
//--------------------------------------------------------------------------------------------------
int gf_GetTradeIncrement (string lp_type) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if (((lp_type == "Lumber") || (lp_type == "Stone") || (lp_type == "Wool") || (lp_type == "Leather"))) {
        lv_value = 1;
    }
    else if ((lp_type == "IronOre")) {
        lv_value = 2;
    }
    else if ((lp_type == "Shadowstone")) {
        lv_value = 3;
    }
    else if (((lp_type == "InfusedLumber") || (lp_type == "RadiantGem"))) {
        lv_value = 5;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetSellPrice
//--------------------------------------------------------------------------------------------------
int gf_GetSellPrice (string lp_type, int lp_player) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((lp_type == "Lumber")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LumberSellPrice", "Amount", lp_player));
    }
    else if ((lp_type == "Stone")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StoneSellPrice", "Amount", lp_player));
    }
    else if ((lp_type == "Wool")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "WoolSellPrice", "Amount", lp_player));
    }
    else if ((lp_type == "Leather")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LeatherSellPrice", "Amount", lp_player));
    }
    else if ((lp_type == "IronOre")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "IronOreSellPrice", "Amount", lp_player));
    }
    else if ((lp_type == "Shadowstone")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "ShadowstoneSellPrice", "Amount", lp_player));
    }
    else if ((lp_type == "InfusedLumber")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "InfusedLumberSellPrice", "Amount", lp_player));
    }
    else if ((lp_type == "RadiantGem")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "RadiantGemSellPrice", "Amount", lp_player));
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetBuyPrice
//--------------------------------------------------------------------------------------------------
int gf_GetBuyPrice (string lp_type, int lp_player) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((lp_type == "Lumber")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LumberBuyPrice", "Amount", lp_player));
    }
    else if ((lp_type == "Stone")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StoneBuyPrice", "Amount", lp_player));
    }
    else if ((lp_type == "Wool")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "WoolBuyPrice", "Amount", lp_player));
    }
    else if ((lp_type == "Leather")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LeatherBuyPrice", "Amount", lp_player));
    }
    else if ((lp_type == "IronOre")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "IronOreBuyPrice", "Amount", lp_player));
    }
    else if ((lp_type == "Shadowstone")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "ShadowstoneBuyPrice", "Amount", lp_player));
    }
    else if ((lp_type == "InfusedLumber")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "InfusedLumberBuyPrice", "Amount", lp_player));
    }
    else if ((lp_type == "RadiantGem")) {
        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "RadiantGemBuyPrice", "Amount", lp_player));
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TypeIsTradedGood
//--------------------------------------------------------------------------------------------------
bool gf_TypeIsTradeGood (string lp_type) {
    // Variable Declarations
    bool lv_value;
    // Variable Initialization
    lv_value = true;
    // Implementation
    if ((lp_type != "Lumber") && (lp_type != "Stone") && (lp_type != "Wool") && (lp_type != "Leather") && (lp_type != "IronOre") && (lp_type != "Shadowstone") && (lp_type != "InfusedLumber") && (lp_type != "RadiantGem")) {
        lv_value = false;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateSellPrice
//--------------------------------------------------------------------------------------------------
void gf_UpdateSellPrice (string lp_unitType, fixed lp_amount, int lp_tier) {
    int auto3B890E7D_val;
    // Variable Declarations
    fixed lv_sellPriceCoefficient;
    fixed lv_sellPriceReductionCoefficient;
    fixed lv_finalPrice;
    fixed lv_baseReduction;
    fixed lv_minimum;
    // Variable Initialization
    lv_sellPriceCoefficient = 1.0;
    lv_sellPriceReductionCoefficient = 1.0;
    // Implementation
    auto3B890E7D_val = lp_tier;
    if (auto3B890E7D_val == 1) {
        lv_baseReduction = 1.0;
        lv_minimum = 5.0;
    }
    else if (auto3B890E7D_val == 2) {
        lv_baseReduction = 2.0;
        lv_minimum = 10.0;
    }
    else {
        lv_minimum = 15.0;
        lv_baseReduction = IntToFixed(lp_tier);
    }
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_sellPriceCoefficient = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SellPriceCoefficient", "Amount", PlayerGroupLoopCurrent()));
        lv_finalPrice = libNtve_gf_ArithmeticRealClamp(Round(((lp_amount - (lv_baseReduction * lv_sellPriceReductionCoefficient)) * lv_sellPriceCoefficient)), lv_minimum, 100.0);
        if ((lp_unitType == "Lumber")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "LumberSellPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "Stone")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "StoneSellPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "Wool")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "WoolSellPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "Leather")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "LeatherSellPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "IronOre")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "IronOreSellPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "Shadowstone")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "ShadowstoneSellPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "InfusedLumber")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "InfusedLumberSellPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "RadiantGem")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "RadiantGemSellPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
    }
    PlayerGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateBuyPrice
//--------------------------------------------------------------------------------------------------
void gf_UpdateBuyPrice (string lp_unitType, fixed lp_amount, int lp_tier) {
    // Variable Declarations
    fixed lv_buyPriceCoefficient;
    fixed lv_buyPriceIncrementCoefficient;
    fixed lv_finalPrice;
    fixed lv_baseIncrement;
    fixed lv_maximum;
    // Variable Initialization
    lv_buyPriceCoefficient = 1.0;
    lv_buyPriceIncrementCoefficient = 1.0;
    // Implementation
    lv_maximum = 100.0;
    lv_baseIncrement = IntToFixed(lp_tier);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_buyPriceCoefficient = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "BuyPriceCoefficient", "Amount", PlayerGroupLoopCurrent()));
        lv_finalPrice = libNtve_gf_ArithmeticRealClamp(Round(((lp_amount + (lv_baseIncrement * lv_buyPriceIncrementCoefficient)) * lv_buyPriceCoefficient)), 1.0, lv_maximum);
        if ((lp_unitType == "Lumber")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "LumberBuyPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "Stone")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "StoneBuyPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "Wool")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "WoolBuyPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "Leather")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "LeatherBuyPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "IronOre")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "IronOreBuyPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "Shadowstone")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "ShadowstoneBuyPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "InfusedLumber")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "InfusedLumberBuyPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
        else if ((lp_unitType == "RadiantGem")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "RadiantGemBuyPrice", "Amount", PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
        }
    }
    PlayerGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NormalizePrices
//--------------------------------------------------------------------------------------------------
void gf_NormalizePrices (int lp_player) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    // Variable Initialization
    // Implementation
    if (((lp_player >= 0) && (lp_player <= gv_players))) {
        lv_b = 12;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LumberSellPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "LumberSellPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 18;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LumberBuyPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "LumberBuyPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 10;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StoneSellPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "StoneSellPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 15;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StoneBuyPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "StoneBuyPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 10;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "WoolSellPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "WoolSellPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 15;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "WoolBuyPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "WoolBuyPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 10;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LeatherSellPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "LeatherSellPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 15;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LeatherBuyPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "LeatherBuyPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 20;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "IronOreSellPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "IronOreSellPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 30;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "IronOreBuyPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "IronOreBuyPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 30;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "ShadowstoneSellPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "ShadowstoneSellPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 45;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "ShadowstoneBuyPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "ShadowstoneBuyPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 50;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "InfusedLumberSellPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "InfusedLumberSellPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 75;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "InfusedLumberBuyPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "InfusedLumberBuyPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 40;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "RadiantGemSellPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "RadiantGemSellPrice", "Amount", lp_player, IntToString(lv_a));
        lv_b = 60;
        lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "RadiantGemBuyPrice", "Amount", lp_player));
        lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "RadiantGemBuyPrice", "Amount", lp_player, IntToString(lv_a));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SendBeaver
//--------------------------------------------------------------------------------------------------
void gf_SendBeaver (unit lp_sourceUnit, point lp_targetPoint, unit lp_targetUnit, string lp_shipmentType, int lp_sendingPlayer) {
    // Variable Declarations
    point lv_p;
    unit lv_beavy;
    unit lv_package;
    // Variable Initialization
    // Implementation
    if (gf_UnitExists(lp_targetUnit)) {
        lv_p = UnitGetPosition(lp_targetUnit);
    }
    else {
        lv_p = lp_targetPoint;
    }
    UnitCreate(1, "PackBeaver", 0, lp_sendingPlayer, PointWithOffsetPolar(UnitGetPosition(lp_sourceUnit), 1.0, AngleBetweenPoints(UnitGetPosition(lp_sourceUnit), lv_p)), 270.0);
    lv_beavy = UnitLastCreated();
    gf_CreateItemForUnit(lv_beavy, lp_shipmentType, 1);
    lv_package = UnitGroupUnit(UnitInventoryGroup(lv_beavy), 1);
    UnitSetInfoText(lv_beavy, StringExternal("Param/Value/6D98B7F3"), UnitTypeGetName(UnitGetType(lv_package)), StringExternal("Param/Value/E85AD903"));
    UnitBehaviorAdd(lv_beavy, "BeaverCargo", lv_beavy, 1);
    gf_AutofillShipmentSlot(lp_sourceUnit, lp_sendingPlayer, lp_shipmentType);
    if ((StringSub(gv_perks[lp_sendingPlayer], 37, 37) == "1")) {
        UnitBehaviorRemove(lv_beavy, "BeaverTrigger", 1);
        UnitBehaviorAdd(lv_beavy, "BeaverStamina", lv_beavy, 1);
    }
    else {
    }
    if (gf_UnitExists(lp_targetUnit)) {
        UnitIssueOrder(lv_beavy, OrderTargetingUnit(AbilityCommand("GiveAllItemsToTarget", 0), lp_targetUnit), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_beavy, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        UnitIssueOrder(lv_beavy, Order(AbilityCommand("ShipmentArrived", 0)), c_orderQueueAddToEnd);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AutofillShipmentSlot
//--------------------------------------------------------------------------------------------------
void gf_AutofillShipmentSlot (unit lp_outpost, int lp_sendingPlayer, string lp_sendItemType) {
    // Variable Declarations
    const int lv_outpostSize = 26;
    const int lv_shipmentContainer = 1;
    const int lv_storageContainer = 2;
    int lv_a;
    unit lv_item;
    // Variable Initialization
    // Implementation
    UnitGroupLoopBegin(UnitInventoryGroup(lp_outpost));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == lv_storageContainer)) {
            lv_item = UnitGroupLoopCurrent();
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if (gf_UnitExists(lv_item)) {
        TextExpressionSetToken("Param/Expression/8AC695B4", "A", StringExternal("Param/Value/455E116B"));
        TextExpressionSetToken("Param/Expression/8AC695B4", "B", UnitTypeGetName(lp_sendItemType));
        TextExpressionSetToken("Param/Expression/8AC695B4", "C", StringExternal("Param/Value/009BE4E4"));
        gf_Advancedtag(lp_outpost, lp_sendingPlayer, TextExpressionAssemble("Param/Expression/8AC695B4"), 3.0, 24);
        gf_DropandPickup(lp_outpost, lv_item);
    }
    else {
        TextExpressionSetToken("Param/Expression/60C42768", "A", StringExternal("Param/Value/CE5B44C8"));
        TextExpressionSetToken("Param/Expression/60C42768", "B", UnitTypeGetName(lp_sendItemType));
        gf_Advancedtag(lp_outpost, lp_sendingPlayer, TextExpressionAssemble("Param/Expression/60C42768"), 3.0, 24);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DropandRemove
//--------------------------------------------------------------------------------------------------
void gf_DropandRemove (unit lp_unit) {
    // Implementation
    if (gf_UnitExists(lp_unit) && gf_UnitExists(UnitInventoryUnit(lp_unit))) {
        UnitSetPosition(lp_unit, UnitGetPosition(UnitInventoryUnit(lp_unit)), false);
        UnitBehaviorAdd(lp_unit, "DropandRemove", lp_unit, 1);
        libNtve_gf_ShowHideUnit(lp_unit, false);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DropandPickup
//--------------------------------------------------------------------------------------------------
void gf_DropandPickup (unit lp_carrier, unit lp_item) {
    // Implementation
    UnitSetPosition(lp_item, UnitGetPosition(lp_carrier), false);
    UnitIssueOrder(lp_carrier, OrderTargetingUnit(null, lp_item), c_orderQueueAddToEnd);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TavernSpawn
//--------------------------------------------------------------------------------------------------
void gf_TavernSpawn (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    UnitSetInfoText(lp_unit, StringExternal("Param/Value/F2E44590"), gf_GetPlayerName(UnitGetOwner(lp_unit), 0), StringExternal("Param/Value/0DB70CA5"));
    if (gf_RewardCatIndexActive(lv_i, 3, 2)) {
        UnitBehaviorAdd(lp_unit, "TavernBeerSupply", lp_unit, 1);
    }
    else {
    }
    if ((gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArcaneSanctum == true)) {
        UnitBehaviorAdd(lp_unit, "TavernWizard", lp_unit, 1);
    }
    else {
    }
    if ((gv_b_Day == false)) {
        UnitBehaviorAdd(lp_unit, "GenericNightBehavior", lp_unit, 1);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Gossip
//--------------------------------------------------------------------------------------------------
void gf_Gossip (int lp_player, bool lp_bribed) {
    int autoD54E22E9_ae;
    int autoD54E22E9_ai;
    int auto6194C53B_val;
    // Variable Declarations
    int lv_a;
    int lv_troll;
    text lv_gossip;
    int lv_randomIndex;
    int lv_lastRemainingGossip;
    int lv_gossipIndex;
    // Variable Initialization
    lv_gossip = StringExternal("Param/Value/CF252F50");
    // Implementation
    if ((gf_OutOfGossip(lp_player) == true)) {
        gv_gossipListened[lp_player] = 0;
        autoD54E22E9_ae = gv_gossipAmount;
        autoD54E22E9_ai = 1;
        lv_a = 1;
        for ( ; ( (autoD54E22E9_ai >= 0 && lv_a <= autoD54E22E9_ae) || (autoD54E22E9_ai <= 0 && lv_a >= autoD54E22E9_ae) ) ; lv_a += autoD54E22E9_ai ) {
            gv_gossipPool[lv_a][lp_player] = lv_a;
        }
    }
    else {
    }
    lv_lastRemainingGossip = (gv_gossipAmount - gv_gossipListened[lp_player]);
    lv_randomIndex = RandomInt(1, lv_lastRemainingGossip);
    lv_gossipIndex = gv_gossipPool[lv_randomIndex][lp_player];
    gv_gossipPool[lv_randomIndex][lp_player] = gv_gossipPool[lv_lastRemainingGossip][lp_player];
    gv_gossipPool[lv_lastRemainingGossip][lp_player] = 0;
    gv_gossipListened[lp_player] += 1;
    auto6194C53B_val = lv_gossipIndex;
    if (auto6194C53B_val == 1) {
        lv_troll = gf_GossipMostGold(PlayerGroupActive());
        if ((PlayerGetPropertyInt(lv_troll, c_playerPropMinerals) > 20)) {
            if ((lv_troll == lp_player)) {
                lv_gossip = (TextWithColor(StringExternal("Param/Value/AD79591C"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/E902CF81"));
            }
            else {
                if ((PlayerGetPropertyInt(lv_troll, c_playerPropMinerals) > 1000)) {
                    lv_gossip = (TextWithColor(StringExternal("Param/Value/B113B66F"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/12357527") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/01F09C70"))));
                }
                else {
                    if ((PlayerGetPropertyInt(lv_troll, c_playerPropMinerals) > 200)) {
                        lv_gossip = (TextWithColor(StringExternal("Param/Value/3E0B90DB"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/23CE268C") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/3067C577"))));
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal("Param/Value/2D0D259D"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/74C0800A") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/E406C377"))));
                    }
                }
            }
        }
        else {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/B84ADDCD"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/CE653668"));
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 2) {
        lv_troll = gv_wolfsbanePlayer;
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_troll) == true)) {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/E8B6D560"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/D2A3F409") + (gf_GetPlayerName(gv_wolfsbanePlayer, 1) + StringExternal("Param/Value/8E434F72"))));
        }
        else {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/BA4B1F41"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/8B904713"));
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 3) {
        lv_troll = gf_GossipMostBribes(PlayerGroupActive());
        if ((gv_playerData[lv_troll].lv_gameStats.lv_drunkardsBribed > 0)) {
            if ((lv_troll == lp_player)) {
                lv_gossip = (TextWithColor(StringExternal("Param/Value/D1859C74"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/EDD9BD91") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/CE59CE37"))));
            }
            else {
                lv_gossip = (TextWithColor(StringExternal("Param/Value/5D7201F5"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/72D025AA") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/D274E787"))));
            }
        }
        else {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/B05BF1D5"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/DB259942"));
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 4) {
        lv_troll = gf_GossipMostBerries(PlayerGroupActive());
        if ((gv_playerData[lv_troll].lv_gameStats.lv_berriesPicked > 0)) {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/BD37B454"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/86AF14C7") + (gf_GetPlayerName(lv_troll, 1) + StringExternal("Param/Value/7372FD3B"))));
        }
        else {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/C7A12BB9"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/6898195A"));
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 5) {
        lv_troll = gf_GossipMostTreesFelled(PlayerGroupActive());
        if ((gv_playerData[lv_troll].lv_gameStats.lv_treesFelled > 0)) {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/1671B71B"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/BCF7A9A0") + (gf_GetPlayerName(lv_troll, 1) + StringExternal("Param/Value/660120E0"))));
        }
        else {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/0AD4DC39"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/0C35CA48"));
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 6) {
        lv_troll = gf_GossipMostSheepsBred(PlayerGroupActive());
        if ((gv_playerData[lv_troll].lv_gameStats.lv_sheepBred > 0)) {
            if ((gv_playerData[lv_troll].lv_gameStats.lv_sheepBred > 100)) {
                lv_gossip = (TextWithColor(StringExternal("Param/Value/A842814B"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/8037C248") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/5DC3692B"))));
            }
            else {
                lv_gossip = (TextWithColor(StringExternal("Param/Value/46012502"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/B62F60DE") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/5E9D8525"))));
            }
        }
        else {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/FEB8D450"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/3726C621"));
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 7) {
        lv_troll = gf_GossipMostMealsCooked(PlayerGroupActive());
        if ((gv_playerData[lv_troll].lv_gameStats.lv_mealsCooked > 0)) {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/EB745699"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/29535FBF") + (gf_GetPlayerName(lv_troll, 1) + StringExternal("Param/Value/271E1887"))));
        }
        else {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/C9F47A5E"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/7CF83947"));
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 8) {
        lv_troll = gf_GossipMostExp(PlayerGroupActive());
        lv_gossip = (TextWithColor(StringExternal("Param/Value/D2232039"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/935FCB2F") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/DE216312"))));
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 9) {
        lv_troll = gf_GossipMostCrafts(PlayerGroupActive());
        if ((gv_playerData[lv_troll].lv_gameStats.lv_itemsCrafted > 0)) {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/A23AF597"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/1AB6C37E") + (gf_GetPlayerName(lv_troll, 1) + StringExternal("Param/Value/726EA1B1"))));
        }
        else {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/36D43CB7"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/F8F43D9C"));
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else if (auto6194C53B_val == 10) {
        lv_troll = gf_GossipMostPetTLI(PlayerGroupActive());
        if ((gf_GetPetTLI(lv_troll) > 0)) {
            lv_gossip = (TextWithColor(StringExternal("Param/Value/F755D229"), Color(74.90, 69.02, 58.43)) + (StringExternal("Param/Value/B7EF374C") + (gf_GetPlayerName(lv_troll, 0) + StringExternal("Param/Value/EFEAE909"))));
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                lv_gossip = (TextWithColor(StringExternal("Param/Value/721A9302"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/54C088FF"));
            }
            else {
                lv_gossip = (TextWithColor(StringExternal("Param/Value/9DE96627"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/99F2746C"));
            }
        }
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
    }
    else {
    }
    gv_playerData[lp_player].lv_gameStats.lv_drunkardsBribed += 1;
    gv_gossipTypeListened[lp_player] = StringReplace(gv_gossipTypeListened[lp_player], "1", lv_gossipIndex, lv_gossipIndex);
    if ((gv_gossipTypeListened[lp_player] == "1111111111")) {
        gf_UnlockRequirement(lp_player, 3, 2);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: OutOfGossip
//--------------------------------------------------------------------------------------------------
bool gf_OutOfGossip (int lp_player) {
    int auto89C688D7_ae;
    int auto89C688D7_ai;
    // Variable Declarations
    int lv_a;
    bool lv_value;
    // Variable Initialization
    lv_value = true;
    // Implementation
    auto89C688D7_ae = gv_gossipAmount;
    auto89C688D7_ai = 1;
    lv_a = 1;
    for ( ; ( (auto89C688D7_ai >= 0 && lv_a <= auto89C688D7_ae) || (auto89C688D7_ai <= 0 && lv_a >= auto89C688D7_ae) ) ; lv_a += auto89C688D7_ai ) {
        if ((gv_gossipPool[lv_a][lp_player] > 0)) {
            lv_value = false;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostGold
//--------------------------------------------------------------------------------------------------
int gf_GossipMostGold (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals) < PlayerGetPropertyInt(lv_troll, c_playerPropMinerals))) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostWolfKills
//--------------------------------------------------------------------------------------------------
int gf_GossipMostWolfKills () {
    int autoCC630E02_ae;
    int autoCC630E02_ai;
    // Variable Declarations
    int lv_a;
    int lv_value;
    // Variable Initialization
    // Implementation
    autoCC630E02_ae = gv_players;
    autoCC630E02_ai = 1;
    lv_a = 1;
    for ( ; ( (autoCC630E02_ai >= 0 && lv_a <= autoCC630E02_ae) || (autoCC630E02_ai <= 0 && lv_a >= autoCC630E02_ae) ) ; lv_a += autoCC630E02_ai ) {
        if ((gv_playerData[lv_a].lv_gameStats.lv_wolvesKilled > gv_playerData[lv_value].lv_gameStats.lv_wolvesKilled)) {
            lv_value = lv_a;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostBribes
//--------------------------------------------------------------------------------------------------
int gf_GossipMostBribes (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_drunkardsBribed < gv_playerData[lv_troll].lv_gameStats.lv_drunkardsBribed)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostBerries
//--------------------------------------------------------------------------------------------------
int gf_GossipMostBerries (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_berriesPicked < gv_playerData[lv_troll].lv_gameStats.lv_berriesPicked)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostTreesFelled
//--------------------------------------------------------------------------------------------------
int gf_GossipMostTreesFelled (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_treesFelled < gv_playerData[lv_troll].lv_gameStats.lv_treesFelled)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostSheepsBred
//--------------------------------------------------------------------------------------------------
int gf_GossipMostSheepsBred (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_sheepBred < gv_playerData[lv_troll].lv_gameStats.lv_sheepBred)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostMealsCooked
//--------------------------------------------------------------------------------------------------
int gf_GossipMostMealsCooked (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_mealsCooked < gv_playerData[lv_troll].lv_gameStats.lv_mealsCooked)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostExp
//--------------------------------------------------------------------------------------------------
int gf_GossipMostExp (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, c_unitPropXP, c_unitPropCurrent) < UnitGetPropertyFixed(gv_playerData[lv_troll].lv_kobold, c_unitPropXP, c_unitPropCurrent))) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostCrafts
//--------------------------------------------------------------------------------------------------
int gf_GossipMostCrafts (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_itemsCrafted < gv_playerData[lv_troll].lv_gameStats.lv_itemsCrafted)) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GossipMostPetTLI
//--------------------------------------------------------------------------------------------------
int gf_GossipMostPetTLI (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_troll;
    bool lv_sadTroll;
    // Variable Initialization
    lv_sadTroll = true;
    // Implementation
    while ((PlayerGroupCount(lp_playerGroup) > 1)) {
        lv_sadTroll = true;
        lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        PlayerGroupRemove(lp_playerGroup, lv_troll);
        PlayerGroupLoopBegin(lp_playerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gf_GetPetTLI(PlayerGroupLoopCurrent()) < gf_GetPetTLI(lv_troll))) {
                PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                lv_sadTroll = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_sadTroll == false)) {
            PlayerGroupAdd(lp_playerGroup, lv_troll);
        }
        else {
        }
    }
    return PlayerGroupPlayer(lp_playerGroup, 1);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetPetTLI
//--------------------------------------------------------------------------------------------------
fixed gf_GetPetTLI (int lp_player) {
    // Variable Declarations
    unitgroup lv_pets;
    fixed lv_value;
    // Variable Initialization
    lv_pets = gf_UnitsInUnitGroupWithBuff(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), "Tamed");
    // Implementation
    UnitGroupLoopBegin(lv_pets);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_value += gf_EvaluateThreat(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SendBeaverScavenger
//--------------------------------------------------------------------------------------------------
void gf_SendBeaverScavenger (int lp_player, point lp_point) {
    // Implementation
    if (gf_UnitExists(gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTower) && (gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerBeaverPen == true)) {
        UnitCreate(1, "PackBeaver", 0, lp_player, PointWithOffsetPolar(UnitGetPosition(gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTower), 2.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_point), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BeaverScavengerActivate", 0)), c_orderQueueAddToEnd);
        if ((StringSub(gv_perks[lp_player], 37, 37) == "1")) {
            UnitBehaviorRemove(UnitLastCreated(), "BeaverTrigger", 1);
            UnitBehaviorAdd(UnitLastCreated(), "BeaverStamina", UnitLastCreated(), 1);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CanteenFood
//--------------------------------------------------------------------------------------------------
void gf_CanteenFood (unit lp_watchTower, unit lp_kobold) {
    int auto6FC66CF1_val;
    // Variable Declarations
    int lv_i;
    int lv_r;
    string lv_type;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    // Implementation
    lv_r = RandomInt(1, 5);
    auto6FC66CF1_val = lv_r;
    if (auto6FC66CF1_val == 1) {
        lv_type = "RoastedLamb";
    }
    else if (auto6FC66CF1_val == 2) {
        lv_type = "WolfSteak";
    }
    else if (auto6FC66CF1_val == 3) {
        lv_type = "SpicedLambFeast";
    }
    else if (auto6FC66CF1_val == 4) {
        lv_type = "GrilledWolfEntrecote";
    }
    else if (auto6FC66CF1_val == 5) {
        lv_type = "RoastedPheasantWithBerrySauce";
    }
    else {
    }
    if ((UnitHasBehavior(lp_watchTower, "BeaverPen") == true)) {
        gf_SendBeaver(lp_watchTower, UnitGetPosition(lp_kobold), lp_kobold, lv_type, UnitGetOwner(lp_watchTower));
    }
    else {
        if (gf_UnitCanGetItem(lp_watchTower, lv_type)) {
            gf_CreateItemForUnit(lp_watchTower, lv_type, 1);
        }
        else {
            UnitCreate(1, lv_type, 0, 0, PointWithOffsetPolar(UnitGetPosition(lp_watchTower), 3.0, RandomFixed(240.0, 300.0)), libNtve_gf_RandomAngle());
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateWatchTowerGoldCost
//--------------------------------------------------------------------------------------------------
void gf_UpdateWatchTowerGoldCost (int lp_player) {
    // Variable Declarations
    int lv_numberOfTeamMembers;
    // Variable Initialization
    lv_numberOfTeamMembers = PlayerGroupCount(gv_teamData[gv_playerData[lp_player].lv_team].lv_members);
    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "ArcaneSanctum", "SmartPriority", lp_player, FixedToString((80.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "WatchTowerArmory", "SmartPriority", lp_player, FixedToString((80.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "WatchTowerBarracks", "SmartPriority", lp_player, FixedToString((20.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "Ballista", "SmartPriority", lp_player, FixedToString((70.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "Canteen", "SmartPriority", lp_player, FixedToString((30.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "Groundskeeper", "SmartPriority", lp_player, FixedToString((20.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "Infirmary", "SmartPriority", lp_player, FixedToString((20.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "Lookout", "SmartPriority", lp_player, FixedToString((10.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "MunitionsSquad", "SmartPriority", lp_player, FixedToString((50.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "WatchTowerMurlocMilitia", "SmartPriority", lp_player, FixedToString((60.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "Storage", "SmartPriority", lp_player, FixedToString((20.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "StructuralReinforcement", "SmartPriority", lp_player, FixedToString((80.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "TunnelerCrew", "SmartPriority", lp_player, FixedToString((30.0 * lv_numberOfTeamMembers), 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "WatchTowerWarHorn", "SmartPriority", lp_player, FixedToString((50.0 * lv_numberOfTeamMembers), 0));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTUpdateTooltip
//--------------------------------------------------------------------------------------------------
void gf_WTUpdateTooltip (unit lp_unit) {
    // Implementation
    TextExpressionSetToken("Param/Expression/A5EB5B48", "D", gf_GetTribeTextOfPlayer(UnitGetOwner(lp_unit)));
    TextExpressionSetToken("Param/Expression/A5EB5B48", "E", StringExternal("Param/Value/3CBCF2CA"));
    TextExpressionSetToken("Param/Expression/A5EB5B48", "A", StringExternal("Param/Value/E818E6E4"));
    TextExpressionSetToken("Param/Expression/A5EB5B48", "B", IntToText(FixedToInt(UnitGetCustomValue(lp_unit, 1))));
    TextExpressionSetToken("Param/Expression/A5EB5B48", "C", StringExternal("Param/Value/BF5A5D94"));
    UnitSetInfoText(lp_unit, StringExternal("Param/Value/0A265D1A"), TextExpressionAssemble("Param/Expression/A5EB5B48"), StringExternal("Param/Value/F0222B17"));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AllLivingTeamsHaveWT
//--------------------------------------------------------------------------------------------------
bool gf_AllLivingTeamsHaveWT () {
    int auto8B02A598_ae;
    int auto8B02A598_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    auto8B02A598_ae = gv_activeTeams;
    auto8B02A598_ai = 1;
    lv_a = 1;
    for ( ; ( (auto8B02A598_ai >= 0 && lv_a <= auto8B02A598_ae) || (auto8B02A598_ai <= 0 && lv_a >= auto8B02A598_ae) ) ; lv_a += auto8B02A598_ai ) {
        if ((gv_teamData[lv_a].lv_allDead == false) && (gf_UnitExists(gv_teamData[lv_a].lv_watchTower) == false)) {
            return false;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WatchTowerDefeatTeam
//--------------------------------------------------------------------------------------------------
void gf_WatchTowerDefeatTeam (int lp_team) {
    // Implementation
    gv_teamData[lp_team].lv_watchTowerDefeat = true;
    PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold)) {
            gv_playerData[PlayerGroupLoopCurrent()].lv_showDeathMessage = false;
            UnitCreateEffectUnit(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "KillWithDamage", gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    gv_teamData[lp_team].lv_allDead = true;
    if ((gf_LastTeamStanding() != -1)) {
        gf_Endgame(false, false);
    }
    else if ((gv_activeTeams == 1) && gf_AllDeadOnTeam(lp_team, false)) {
        gf_Endgame(false, true);
    }
    else if ((gv_activeTeams > 2)) {
        PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            DialogSetVisible(gv_observeRequest, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        }
        PlayerGroupLoopEnd();
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HuntersLodgeSpawn
//--------------------------------------------------------------------------------------------------
void gf_HuntersLodgeSpawn (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    int lv_trophies;
    text lv_suffix;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_trophies = gf_NumberofTrophies(lp_unit);
    // Implementation
    if ((lv_trophies > 0)) {
        if ((lv_trophies == 1)) {
            lv_suffix = StringExternal("Param/Value/FC4C4BD8");
        }
        else {
            lv_suffix = StringExternal("Param/Value/BA183C11");
        }
        TextExpressionSetToken("Param/Expression/A69D2034", "A", gf_GetPlayerName(UnitGetOwner(lp_unit), 0));
        TextExpressionSetToken("Param/Expression/A69D2034", "B", StringExternal("Param/Value/42E3D999"));
        TextExpressionSetToken("Param/Expression/A69D2034", "C", IntToText(gf_NumberofTrophies(lp_unit)));
        TextExpressionSetToken("Param/Expression/A69D2034", "D", StringExternal("Param/Value/E8E98167"));
        TextExpressionSetToken("Param/Expression/A69D2034", "E", lv_suffix);
        UnitSetInfoText(lp_unit, StringExternal("Param/Value/29B28883"), TextExpressionAssemble("Param/Expression/A69D2034"), StringExternal("Param/Value/92C0F396"));
    }
    else {
        UnitSetInfoText(lp_unit, StringExternal("Param/Value/0F3424B8"), gf_GetPlayerName(UnitGetOwner(lp_unit), 0), StringExternal("Param/Value/784F9C43"));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NumberofTrophies
//--------------------------------------------------------------------------------------------------
int gf_NumberofTrophies (unit lp_unit) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    // Implementation
    lv_value += UnitBehaviorCount(lp_unit, "TrollNoseBoneStack");
    lv_value += UnitBehaviorCount(lp_unit, "WhiteBearToothStack");
    lv_value += UnitBehaviorCount(lp_unit, "BoneTalismanStack");
    lv_value += UnitBehaviorCount(lp_unit, "AntlersStack");
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnitFacingGeneralDirection
//--------------------------------------------------------------------------------------------------
bool gf_UnitFacingGeneralDirection (unit lp_source, unit lp_target) {
    // Variable Declarations
    fixed lv_sourceFacing;
    fixed lv_angleToTarget;
    bool lv_success;
    // Variable Initialization
    // Implementation
    if (gf_UnitExists(lp_source) && gf_UnitExists(lp_target)) {
        lv_sourceFacing = UnitGetFacing(lp_source);
        lv_angleToTarget = AngleBetweenPoints(UnitGetPosition(lp_source), UnitGetPosition(lp_target));
        if (((AbsF((lv_angleToTarget - lv_sourceFacing)) <= 60.0) || (AbsF((lv_angleToTarget - lv_sourceFacing)) >= 300.0))) {
            lv_success = true;
        }
        else {
        }
    }
    else {
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdatePetStats
//--------------------------------------------------------------------------------------------------
void gf_UpdatePetStats (int lp_player) {
    // Variable Declarations
    fixed lv_masterStrength;
    fixed lv_masterIntelligence;
    fixed lv_masterWillpower;
    fixed lv_masterEndurance;
    fixed lv_masterAttackSpeed;
    fixed lv_regen;
    fixed lv_armor;
    fixed lv_damageFactor;
    fixed lv_lifeFactor;
    fixed lv_arPen;
    fixed lv_aPS;
    fixed lv_movementSpeed;
    fixed lv_movespeedBonus;
    fixed lv_armorBonus;
    fixed lv_lifeBonus;
    fixed lv_bearShamansShroudBonus;
    fixed lv_predKno_WolfDmg;
    fixed lv_predKno_BearDmg;
    fixed lv_predKno_BearArm;
    fixed lv_predKno_WispDmg;
    fixed lv_predKno_WispRng;
    // Variable Initialization
    lv_masterStrength = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lp_player));
    lv_masterIntelligence = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lp_player));
    lv_masterWillpower = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lp_player));
    lv_masterEndurance = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lp_player));
    lv_masterAttackSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "KoboldAttackMeleeBash", "Period", lp_player));
    lv_regen = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Heroic]", lp_player));
    lv_armor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Hover]", lp_player));
    lv_damageFactor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lp_player));
    lv_lifeFactor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Biological]", lp_player));
    lv_arPen = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Light]", lp_player));
    lv_aPS = (1.0 / lv_masterAttackSpeed);
    lv_movementSpeed = libNtve_gf_ArithmeticRealClamp(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "Speed", lp_player)), 2.5, 100.0);
    lv_movespeedBonus = 1.0;
    lv_predKno_WolfDmg = (gv_predatoryKnowledgeStacks[1][lp_player] * 1.0);
    lv_predKno_BearDmg = (gv_predatoryKnowledgeStacks[2][lp_player] * 0.5);
    lv_predKno_BearArm = (gv_predatoryKnowledgeStacks[2][lp_player] * 0.3);
    lv_predKno_WispDmg = (gv_predatoryKnowledgeStacks[3][lp_player] * 0.3);
    lv_predKno_WispRng = (gv_predatoryKnowledgeStacks[3][lp_player] * 0.1);
    // Implementation
    if ((lp_player != 0) && (lp_player != 15)) {
        if ((lv_masterIntelligence > lv_masterStrength)) {
            lv_masterStrength = lv_masterIntelligence;
        }
        else {
        }
        if ((lv_masterWillpower > lv_masterStrength)) {
            lv_masterStrength = lv_masterWillpower;
        }
        else {
        }
        CatalogFieldValueSet(c_gameCatalogEffect, "StatsMasterStrength", "Amount", lp_player, FixedToString(lv_masterStrength, 2));
        if ((UnitGetType(gf_KoboldArmor(gv_playerData[lp_player].lv_kobold)) == "BearShamansShroud")) {
            lv_bearShamansShroudBonus += 2.0;
        }
        else {
        }
        if ((gv_skillForaging[lp_player] >= 25)) {
            lv_armorBonus += (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player)) * 0.5);
        }
        else {
        }
        if ((StringSub(gv_taughtPetsString[lp_player], 6, 6) == "1")) {
            lv_movespeedBonus += 0.1;
        }
        else {
        }
        lv_armorBonus += (0.5 * gv_antlerStacks[lp_player]);
        CatalogFieldValueSet(c_gameCatalogEffect, "WolfBiteDamage", "Amount", lp_player, FixedToString(((lv_masterStrength + lv_predKno_WolfDmg) * lv_damageFactor), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "DirewolfBiteDamage", "Amount", lp_player, FixedToString(((lv_masterStrength + lv_predKno_WolfDmg) * lv_damageFactor), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "BearMaulDamage", "Amount", lp_player, FixedToString((1.25 * ((lv_masterStrength + lv_predKno_BearDmg) * lv_damageFactor)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBearMaulDamage", "Amount", lp_player, FixedToString((1.4 * ((lv_masterStrength + lv_predKno_BearDmg) * lv_damageFactor)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "NightwispDamage", "Amount", lp_player, FixedToString((0.8 * ((lv_masterStrength + lv_predKno_WispDmg) * lv_damageFactor)), 0));
        CatalogFieldValueSet(c_gameCatalogWeapon, "WolfBite", "Period", lp_player, FixedToString((1.0 / (lv_aPS * (1.0 + (BoolToInt(gv_b_Day) * 0.25)))), 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "DirewolfBite", "Period", lp_player, FixedToString((1.0 / (lv_aPS * (1.0 + (BoolToInt(!(gv_b_Day)) * 0.35)))), 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "BearMaul", "Period", lp_player, FixedToString(lv_masterAttackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "FrostBearMaul", "Period", lp_player, FixedToString(lv_masterAttackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "NightwispAttack", "Period", lp_player, FixedToString(lv_masterAttackSpeed, 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "WolfBiteDamage", "ArmorReduction", lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "DirewolfBiteDamage", "ArmorReduction", lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "BearMaulDamage", "ArmorReduction", lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBearMaulDamage", "ArmorReduction", lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "NightwispDamage", "ArmorReduction", lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Dog", "LifeMax", lp_player, FixedToString((lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Dog", "LifeStart", lp_player, FixedToString((lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Lyote", "LifeMax", lp_player, FixedToString((lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Lyote", "LifeStart", lp_player, FixedToString((lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Bear", "LifeMax", lp_player, FixedToString((1.15 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Bear", "LifeStart", lp_player, FixedToString((1.15 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostBear", "LifeMax", lp_player, FixedToString((1.2 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostBear", "LifeStart", lp_player, FixedToString((1.2 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Nightwisp", "LifeMax", lp_player, FixedToString((0.7 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Nightwisp", "LifeStart", lp_player, FixedToString((0.7 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Dog", "LifeRegenRate", lp_player, FixedToString(lv_regen, 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Lyote", "LifeRegenRate", lp_player, FixedToString(lv_regen, 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Bear", "LifeRegenRate", lp_player, FixedToString(lv_regen, 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostBear", "LifeRegenRate", lp_player, FixedToString(lv_regen, 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Nightwisp", "LifeRegenRate", lp_player, FixedToString(lv_regen, 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Dog", "LifeArmor", lp_player, FixedToString((lv_armor + lv_armorBonus), 1));
        CatalogFieldValueSet(c_gameCatalogUnit, "Lyote", "LifeArmor", lp_player, FixedToString((lv_armor + lv_armorBonus), 1));
        CatalogFieldValueSet(c_gameCatalogUnit, "Bear", "LifeArmor", lp_player, FixedToString(((lv_armor + lv_predKno_BearArm) + (lv_armorBonus + lv_bearShamansShroudBonus)), 1));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostBear", "LifeArmor", lp_player, FixedToString(((lv_armor + lv_predKno_BearArm) + (lv_armorBonus + lv_bearShamansShroudBonus)), 1));
        CatalogFieldValueSet(c_gameCatalogUnit, "Nightwisp", "LifeArmor", lp_player, FixedToString((lv_armor + lv_armorBonus), 1));
        CatalogFieldValueSet(c_gameCatalogUnit, "Dog", "Speed", lp_player, FixedToString((lv_movementSpeed * (lv_movespeedBonus + (BoolToInt(gv_b_Day) * 0.1))), 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Lyote", "Speed", lp_player, FixedToString((lv_movementSpeed * (lv_movespeedBonus + (BoolToInt(!(gv_b_Day)) * 0.1))), 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Bear", "Speed", lp_player, FixedToString((lv_movementSpeed * lv_movespeedBonus), 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostBear", "Speed", lp_player, FixedToString((lv_movementSpeed * lv_movespeedBonus), 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Nightwisp", "Speed", lp_player, FixedToString((lv_movementSpeed * lv_movespeedBonus), 2));
        CatalogFieldValueSet(c_gameCatalogWeapon, "NightwispAttack", "Range", lp_player, FixedToString((4.5 + lv_predKno_WispRng), 1));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TameAnimal
//--------------------------------------------------------------------------------------------------
void gf_TameAnimal (unit lp_master, unit lp_animal) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_master);
    // Implementation
    if ((UnitHasBehavior(lp_animal, "Tamed") == true) && (libNtve_gf_PlayerIsEnemy(lv_i, UnitGetOwner(lp_animal), 4) == true)) {
        UnitBehaviorRemove(lp_animal, "HunterRequirement", 1);
        UnitBehaviorAdd(lp_animal, "HunterRequirement", lp_master, 1);
    }
    else {
    }
    UnitBehaviorRemove(lp_animal, "AnimalRush", 1);
    UnitBehaviorRemove(lp_animal, "Beast", 1);
    gv_playerData[lv_i].lv_gameStats.lv_petsTamed += 1;
    UnitCreateEffectUnit(lp_master, "TamedRemove", lp_animal);
    UnitCreateEffectUnit(lp_master, "TamedApply", lp_animal);
    UnitGroupRemove(gv_pets[UnitGetOwner(lp_animal)], lp_animal);
    UnitIssueOrder(lp_master, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lp_animal, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetOwner(lp_animal, lv_i, true);
    UnitSetInfoText(lp_animal, StringExternal("Param/Value/9FD92E01"), gf_GetPlayerName(lv_i, 0), StringExternal("Param/Value/EE4FD5D4"));
    UnitSetPropertyFixed(lp_animal, c_unitPropLifePercent, 100.0);
    UnitGroupAdd(gv_pets[lv_i], lp_animal);
    gf_Quicktag(lp_animal, StringExternal("Param/Value/8ED5DC33"), 3.0, 24);
    if (((UnitGetType(lp_animal) == "Bear") || (UnitGetType(lp_animal) == "FrostBear"))) {
        libNtve_gf_SendActorMessageToUnit(lp_animal, "AnimGroupRemove Slow");
        libNtve_gf_SendActorMessageToUnit(lp_animal, "SetWalkAnimMoveSpeed 4.5");
    }
    else if (((UnitGetType(lp_animal) == "Dog") || (UnitGetType(lp_animal) == "Lyote"))) {
        libNtve_gf_SendActorMessageToUnit(lp_animal, "AnimGroupRemove Slow");
        libNtve_gf_SendActorMessageToUnit(lp_animal, "SetWalkAnimMoveSpeed 2.8007");
    }
    gf_AcquirePet(lv_i, UnitGetType(lp_animal));
    gf_ApplyPetBehaviors(lp_animal, lp_master);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ApplyPetBehaviors
//--------------------------------------------------------------------------------------------------
void gf_ApplyPetBehaviors (unit lp_animal, unit lp_master) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_animal);
    // Implementation
    if ((StringSub(gv_taughtPetsString[lv_i], 5, 5) == "1") && (UnitHasBehavior(lp_animal, "NaturalTenacity") == false)) {
        UnitBehaviorAdd(lp_animal, "NaturalTenacity", lp_master, 1);
    }
    else {
    }
    if ((StringSub(gv_taughtPetsString[lv_i], 4, 4) == "1") && (UnitHasBehavior(lp_animal, "PredatoryKnowledgeCounter") == false)) {
        UnitBehaviorAdd(lp_animal, "PredatoryKnowledgeCounter", lp_master, 1);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AcquirePet
//--------------------------------------------------------------------------------------------------
void gf_AcquirePet (int lp_player, string lp_type) {
    // Implementation
    if (gf_UnitExists(gv_playerData[lp_player].lv_kobold)) {
        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "MasterRangersMaille") == true)) {
            if (((lp_type == "Dog") || (lp_type == "Lyote"))) {
                UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleStrDex", gv_playerData[lp_player].lv_kobold, 1);
            }
            else if (((lp_type == "Bear") || (lp_type == "FrostBear"))) {
                UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleStrEnd", gv_playerData[lp_player].lv_kobold, 1);
            }
            else if ((lp_type == "Nightwisp")) {
                UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "MasterRangersMailleIntWil", gv_playerData[lp_player].lv_kobold, 1);
            }
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LosePet
//--------------------------------------------------------------------------------------------------
void gf_LosePet (unit lp_pet) {
    // Variable Declarations
    unit lv_b;
    int lv_i;
    string lv_type;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_pet);
    lv_type = UnitGetType(lp_pet);
    // Implementation
    if (gf_UnitExists(gv_playerData[lv_i].lv_kobold)) {
        if (((lv_type == "Dog") || (lv_type == "Lyote"))) {
            UnitBehaviorRemove(gv_playerData[lv_i].lv_kobold, "MasterRangersMailleStrDex", 1);
        }
        else if (((lv_type == "Bear") || (lv_type == "FrostBear"))) {
            UnitBehaviorRemove(gv_playerData[lv_i].lv_kobold, "MasterRangersMailleStrEnd", 1);
        }
        else if ((lv_type == "Nightwisp")) {
            UnitBehaviorRemove(gv_playerData[lv_i].lv_kobold, "MasterRangersMailleIntWil", 1);
        }
        lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("HuntersLodge", "", "", lv_i, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_playerData[lv_i].lv_kobold));
        if (gf_UnitExists(lv_b) && (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "MasterRangersMaille") == true) && (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "MasterRangersMailleCooldown") == false)) {
            UnitBehaviorAdd(gv_playerData[lv_i].lv_kobold, "MasterRangersMailleCooldown", gv_playerData[lv_i].lv_kobold, 1);
            UnitCreate(1, UnitGetType(lp_pet), 0, lv_i, PointWithOffsetPolar(UnitGetPosition(lv_b), UnitGetPropertyFixed(lv_b, c_unitPropRadius, c_unitPropCurrent), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            gf_TameAnimal(gv_playerData[lv_i].lv_kobold, UnitLastCreated());
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: KoboldDeath
//--------------------------------------------------------------------------------------------------
void gf_KoboldDeath (point lp_location, unit lp_dyingUnit, unit lp_killingUnit) {
    int autoD8E3FCBA_ae;
    int autoD8E3FCBA_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_dyingPlayer;
    text lv_dyingTribeText;
    text lv_dyerName;
    int lv_killingPlayer;
    text lv_killingTribeText;
    text lv_killerName;
    // Variable Initialization
    lv_dyingPlayer = UnitGetOwner(lp_dyingUnit);
    lv_dyerName = gf_GetPlayerName(lv_dyingPlayer, 0);
    lv_killingPlayer = UnitGetOwner(lp_killingUnit);
    lv_killerName = gf_GetPlayerName(lv_killingPlayer, 0);
    // Implementation
    if ((gv_questIndexActive == 6) && (gv_gladiatorPhase == 2) && ((gv_challenger[1] == lp_dyingUnit) || (gv_challenger[2] == lp_dyingUnit))) {
        gf_GladiatorEndPhase2(lp_dyingUnit, gf_RemainingDuelist());
    }
    else if ((lp_dyingUnit != lp_killingUnit) && ((UnitGetType(lp_killingUnit) == "Kobold") || (UnitHasBehavior(lp_killingUnit, "Tamed") == true))) {
        if ((libNtve_gf_PlayerIsEnemy(lv_killingPlayer, lv_dyingPlayer, 1) == true)) {
            TextExpressionSetToken("Param/Expression/D8CC6D80", "A", TextWithColor(lv_killerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingPlayer, false))));
            TextExpressionSetToken("Param/Expression/D8CC6D80", "B", StringExternal("Param/Value/5CBFE623"));
            TextExpressionSetToken("Param/Expression/D8CC6D80", "C", gf_GetTribeTextOfPlayer(lv_killingPlayer));
            TextExpressionSetToken("Param/Expression/D8CC6D80", "D", StringExternal("Param/Value/26FCD851"));
            TextExpressionSetToken("Param/Expression/D8CC6D80", "E", TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
            TextExpressionSetToken("Param/Expression/D8CC6D80", "H", StringExternal("Param/Value/59A8D93D"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D8CC6D80"));
        }
        else {
            TextExpressionSetToken("Param/Expression/CC02D59B", "A", TextWithColor(lv_killerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingPlayer, false))));
            TextExpressionSetToken("Param/Expression/CC02D59B", "B", StringExternal("Param/Value/10ADD886"));
            TextExpressionSetToken("Param/Expression/CC02D59B", "C", gf_GetTribeTextOfPlayer(lv_killingPlayer));
            TextExpressionSetToken("Param/Expression/CC02D59B", "D", StringExternal("Param/Value/F89D5E17"));
            TextExpressionSetToken("Param/Expression/CC02D59B", "E", TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
            TextExpressionSetToken("Param/Expression/CC02D59B", "F", StringExternal("Param/Value/1B8CC388"));
            TextExpressionSetToken("Param/Expression/CC02D59B", "G", gf_GetTribeTextOfPlayer(lv_dyingPlayer));
            TextExpressionSetToken("Param/Expression/CC02D59B", "H", StringExternal("Param/Value/F71A51F7"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/CC02D59B"));
        }
    }
    else if ((UnitGetType(lp_killingUnit) == "SpikeTrap")) {
        TextExpressionSetToken("Param/Expression/76F4CB47", "A", TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
        TextExpressionSetToken("Param/Expression/76F4CB47", "B", StringExternal("Param/Value/3FA7ED09"));
        TextExpressionSetToken("Param/Expression/76F4CB47", "C", gf_GetTribeTextOfPlayer(lv_dyingPlayer));
        TextExpressionSetToken("Param/Expression/76F4CB47", "D", StringExternal("Param/Value/37A513D2"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/76F4CB47"));
    }
    else if (((UnitGetType(lp_killingUnit) == "Dog") || (UnitGetType(lp_killingUnit) == "Lyote"))) {
        TextExpressionSetToken("Param/Expression/3BD4BB62", "A", TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
        TextExpressionSetToken("Param/Expression/3BD4BB62", "B", StringExternal("Param/Value/877EA55B"));
        TextExpressionSetToken("Param/Expression/3BD4BB62", "C", gf_GetTribeTextOfPlayer(UnitGetOwner(lp_dyingUnit)));
        TextExpressionSetToken("Param/Expression/3BD4BB62", "D", StringExternal("Param/Value/D326E37A"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/3BD4BB62"));
    }
    else if ((UnitGetType(lp_killingUnit) == "MurlocChieftain")) {
        TextExpressionSetToken("Param/Expression/669C6A51", "A", TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
        TextExpressionSetToken("Param/Expression/669C6A51", "B", StringExternal("Param/Value/CE74E85D"));
        TextExpressionSetToken("Param/Expression/669C6A51", "C", gf_GetTribeTextOfPlayer(lv_dyingPlayer));
        TextExpressionSetToken("Param/Expression/669C6A51", "D", StringExternal("Param/Value/AF4C62D0"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/669C6A51"));
    }
    else if ((UnitGetType(lp_killingUnit) == "Zulrogg")) {
        TextExpressionSetToken("Param/Expression/49D56CC1", "A", TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
        TextExpressionSetToken("Param/Expression/49D56CC1", "B", StringExternal("Param/Value/22BD09C5"));
        TextExpressionSetToken("Param/Expression/49D56CC1", "C", gf_GetTribeTextOfPlayer(lv_dyingPlayer));
        TextExpressionSetToken("Param/Expression/49D56CC1", "D", StringExternal("Param/Value/AACDD511"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/49D56CC1"));
    }
    else if (((UnitGetType(lp_killingUnit) == "RagingArcaneBeast") || (UnitGetType(lp_killingUnit) == "UnstableAnomaly") || (UnitGetType(lp_killingUnit) == "LightningCloud"))) {
        TextExpressionSetToken("Param/Expression/DB0C3911", "A", TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
        TextExpressionSetToken("Param/Expression/DB0C3911", "B", StringExternal("Param/Value/5E330B12"));
        TextExpressionSetToken("Param/Expression/DB0C3911", "C", gf_GetTribeTextOfPlayer(lv_dyingPlayer));
        TextExpressionSetToken("Param/Expression/DB0C3911", "D", StringExternal("Param/Value/E7B9B662"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/DB0C3911"));
        TriggerExecute(gt_RABKill, true, false);
    }
    else if ((gv_playerData[lv_dyingPlayer].lv_showDeathMessage == true)) {
        TextExpressionSetToken("Param/Expression/5E2D9D8A", "A", TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
        TextExpressionSetToken("Param/Expression/5E2D9D8A", "B", StringExternal("Param/Value/034896C7"));
        TextExpressionSetToken("Param/Expression/5E2D9D8A", "C", gf_GetTribeTextOfPlayer(lv_dyingPlayer));
        TextExpressionSetToken("Param/Expression/5E2D9D8A", "D", StringExternal("Param/Value/8E83B0BA"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/5E2D9D8A"));
    }
    gf_AddExperience(lp_killingUnit, 100.0);
    gf_GladiatorsStrength(lv_killingPlayer);
    UnitGroupClear(gv_aIData[lv_dyingPlayer].lv_enemies);
    if (((lv_killingPlayer >= 0) && (lv_killingPlayer <= 15))) {
        gf_AITaunt(gv_playerData[lv_killingPlayer].lv_kobold);
    }
    else {
    }
    if ((lp_dyingUnit == gv_challenger[1])) {
        gv_challenger[1] = null;
    }
    else if ((lp_dyingUnit == gv_challenger[2])) {
        gv_challenger[2] = null;
    }
    gv_savedXP[lv_dyingPlayer] = UnitGetPropertyFixed(gv_playerData[lv_dyingPlayer].lv_kobold, c_unitPropXP, c_unitPropCurrent);
    if (((lv_killingPlayer >= 0) && (lv_killingPlayer <= 15)) && (gv_playerData[lv_killingPlayer].lv_alive == true) && (UnitGroupCount(gv_playerData[lv_killingPlayer].lv_resources.lv_sunflowers, c_unitCountAlive) >= 20)) {
        gf_UnlockRequirement(lv_killingPlayer, 2, 9);
    }
    else {
    }
    DialogSetVisible(gv_rezzDialog, PlayerGroupSingle(lv_dyingPlayer), false);
    SoundPlay(SoundLink("Defeat", -1), gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_members, 100.0, 0.0);
    SoundtrackPlay(PlayerGroupSingle(lv_dyingPlayer), c_soundtrackCategoryMusic, "KoboldMusicDead", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    autoD8E3FCBA_ae = 3;
    autoD8E3FCBA_ai = 1;
    lv_a = 1;
    for ( ; ( (autoD8E3FCBA_ai >= 0 && lv_a <= autoD8E3FCBA_ae) || (autoD8E3FCBA_ai <= 0 && lv_a >= autoD8E3FCBA_ae) ) ; lv_a += autoD8E3FCBA_ai ) {
        gf_SendBeaverScavenger(lv_dyingPlayer, UnitGetPosition(lp_dyingUnit));
    }
    if ((((gv_gameMode == 2) && (gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_watchTowerDefeat == false)) || (gv_playerData[lv_dyingPlayer].lv_reincarnation == true))) {
        gv_playerData[lv_dyingPlayer].lv_kobold = null;
        gv_playerData[lv_dyingPlayer].lv_alive = false;
        gf_ReincarnatePlayerStart(lv_dyingPlayer, (10.0 + (gv_gameDuration / 60.0)));
    }
    else {
        gv_dead[lv_dyingPlayer] = true;
        gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_koboldsAlive -= 1;
        if ((lp_dyingUnit != lp_killingUnit) && ((lv_killingPlayer >= 0) && (lv_killingPlayer <= 15))) {
            gv_playerData[lv_killingPlayer].lv_gameStats.lv_playerKills += 1;
            gv_kobkills[lv_killingPlayer] += 1;
        }
        else {
        }
        gv_kobdeaths[lv_dyingPlayer] += 1;
        lv_b = PlayerGetPropertyInt(lv_dyingPlayer, c_playerPropMinerals);
        if ((lv_b > 0)) {
            gf_CreateCoinPurse(lv_b, lp_location);
        }
        else {
        }
        PlayerModifyPropertyInt(lv_dyingPlayer, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        if ((gv_activeTeams > 2) && (gf_AllDeadOnTeam(gv_playerData[lv_dyingPlayer].lv_team, false) == true) && (gv_gameMode == 1)) {
            gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_allDead = true;
            PlayerGroupLoopBegin(gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_members);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                DialogSetVisible(gv_observeRequest, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
            PlayerGroupLoopEnd();
        }
        else {
        }
        UnitGroupLoopBegin(UnitGroup(null, lv_dyingPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() == gv_exile) && (gv_questIndexActive == 14)) {
                TriggerExecute(gt_ExileTransfer, true, false);
            }
            else if ((UnitGetType(UnitGroupLoopCurrent()) == "LorenorStatue")) {
                UnitSetOwner(UnitGroupLoopCurrent(), 0, false);
                UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/88111439"), StringExternal("Param/Value/9790F152"), StringExternal("Param/Value/EC3BFABB"));
            }
            else if (true) {
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_animalVisionGroup[lv_dyingPlayer]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, lv_dyingPlayer);
        }
        UnitGroupLoopEnd();
        UnitGroupClear(gv_animalVisionGroup[lv_dyingPlayer]);
        if ((gv_playerData[lv_killingPlayer].lv_team != 0) && (gv_playerData[lv_dyingPlayer].lv_team != 0)) {
            gv_destroyerProgress[lv_killingPlayer] += 1;
            if ((TimerGetRemaining(gv_destroyerTimer[lv_killingPlayer]) == 0.0)) {
                TimerStart(gv_destroyerTimer[lv_killingPlayer], 120.0, false, c_timeGame);
                gv_destroyerProgress[lv_killingPlayer] = 1;
            }
            else {
                if ((gv_destroyerProgress[lv_killingPlayer] == 3)) {
                    TimerPause(gv_destroyerTimer[lv_killingPlayer], true);
                    gf_UnlockRequirement(lv_killingPlayer, 1, 15);
                }
                else {
                }
            }
            PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(lv_dyingPlayer)].lv_members);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((PlayerGroupLoopCurrent() != lv_dyingPlayer)) {
                    gf_VanquisherStart(PlayerGroupLoopCurrent());
                }
                else {
                }
            }
            PlayerGroupLoopEnd();
        }
        else {
        }
        gv_playerData[lv_dyingPlayer].lv_kobold = null;
        gv_playerData[lv_dyingPlayer].lv_alive = false;
        if ((gf_LastTeamStanding() != -1)) {
            gf_Endgame(false, false);
        }
        else if ((gv_activeTeams == 1) && gf_AllDeadOnTeam(gf_GetTeamOfPlayer(lv_dyingPlayer), false)) {
            gf_Endgame(false, true);
        }
        else if (true) {
            gf_InGameHint("death", lv_dyingPlayer);
            gf_PostDeathHint(UnitGetOwner(lp_dyingUnit), 15.0);
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SheepDeath
//--------------------------------------------------------------------------------------------------
void gf_SheepDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Implementation
    if ((UnitGetOwner(lp_killingUnit) != 0) && (UnitGetOwner(lp_killingUnit) != 15)) {
        gf_AddExperience(lp_killingUnit, 30.0);
        UnitCreate(1, "RawLamb", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
        if (((libNtve_gf_RandomPercent() <= 50.0) || (gv_tutorial == true))) {
            UnitCreate(1, "Wool", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WolfDeath
//--------------------------------------------------------------------------------------------------
void gf_WolfDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Implementation
    gf_AddExperience(lp_killingUnit, 40.0);
    UnitCreate(1, "Leather", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
    UnitCreate(1, "RawWolfMeat", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
    if ((UnitGetType(lp_killingUnit) == "Kobold")) {
        gf_UpdateWolfsbanePlayer(UnitGetOwner(lp_killingUnit));
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_pets[UnitGetOwner(lp_dyingUnit)], lp_dyingUnit) == true)) {
        gf_LosePet(lp_dyingUnit);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DirewolfDeath
//--------------------------------------------------------------------------------------------------
void gf_DirewolfDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Implementation
    gf_AddExperience(lp_killingUnit, 50.0);
    if ((gv_tutorial == false)) {
        UnitCreate(1, "RawWolfMeat", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
    }
    else {
    }
    if (((libNtve_gf_RandomPercent() <= 50.0) || (gv_tutorial == true))) {
        UnitCreate(1, "Leather", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
    }
    else {
    }
    if ((UnitGetType(lp_killingUnit) == "Kobold")) {
        if ((gv_tutorial == true)) {
            TriggerExecute(gt_TutorialPart8, true, false);
        }
        else {
            gf_UpdateWolfsbanePlayer(UnitGetOwner(lp_killingUnit));
        }
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_pets[UnitGetOwner(lp_dyingUnit)], lp_dyingUnit) == true)) {
        gf_LosePet(lp_dyingUnit);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BearDeath
//--------------------------------------------------------------------------------------------------
void gf_BearDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Variable Declarations
    int lv_i;
    int lv_b;
    int lv_oHBonus;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_killingUnit);
    lv_oHBonus = 2;
    // Implementation
    gf_AddExperience(lp_killingUnit, 100.0);
    UnitCreate(1, "BearPelt", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
    if ((UnitGetType(lp_dyingUnit) == "FrostBear")) {
        UnitCreate(1, "WhiteBearFang", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
        lv_oHBonus += 1;
        if ((gv_questIndexActive == 10) && (gv_witchSummoned == false)) {
            gv_bearsKilled += 1;
            gf_FrostWitchSpawn(lp_killingUnit, UnitGetPosition(lp_dyingUnit));
        }
        else {
        }
    }
    else {
    }
    if (((lv_i >= 1) && (lv_i <= gv_players)) && (gv_playerData[lv_i].lv_alive == true) && (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "OutlandishHeartpiercer") == true) && ((lp_killingUnit == gv_playerData[lv_i].lv_kobold) || (UnitGroupHasUnit(gv_pets[lv_i], lp_killingUnit) == true))) {
        lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "OutlandishHeartpiercerBonus", "Amount", lv_i));
        CatalogFieldValueSet(c_gameCatalogEffect, "OutlandishHeartpiercerBonus", "Amount", lv_i, IntToString(libNtve_gf_ArithmeticIntClamp((lv_b + lv_oHBonus), 20, 50)));
        gf_UpdateStatsAll(lv_i);
    }
    else {
    }
    if (((UnitGetOwner(lp_dyingUnit) >= 1) && (UnitGetOwner(lp_dyingUnit) <= gv_players)) && (UnitGroupHasUnit(gv_pets[UnitGetOwner(lp_dyingUnit)], lp_dyingUnit) == true)) {
        gf_LosePet(lp_dyingUnit);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PheasantDeath
//--------------------------------------------------------------------------------------------------
void gf_PheasantDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Implementation
    if ((UnitGetOwner(lp_killingUnit) != 0) && (UnitGetOwner(lp_killingUnit) != 15)) {
        gf_AddExperience(lp_killingUnit, 30.0);
        UnitCreate(1, "RawPheasant", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocDeath
//--------------------------------------------------------------------------------------------------
void gf_MurlocDeath (unit lp_dyingUnit) {
    // Implementation
    UnitCreate(1, "MurlocSkullFragment", 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GhoulDeath
//--------------------------------------------------------------------------------------------------
void gf_GhoulDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Variable Declarations
    string lv_loot;
    int lv_a;
    // Variable Initialization
    // Implementation
    gf_AddExperience(lp_killingUnit, 10.0);
    if ((libNtve_gf_RandomPercent() <= 10.0)) {
        lv_loot = "SkeletalFinger";
    }
    else {
    }
    if ((lv_loot != null)) {
        UnitCreate(1, lv_loot, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilGuardianDeath
//--------------------------------------------------------------------------------------------------
void gf_VeilGuardianDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Variable Declarations
    string lv_loot;
    int lv_a;
    // Variable Initialization
    // Implementation
    gf_AddExperience(lp_killingUnit, 50.0);
    gf_CreateCoinPurse(RandomInt(5, 10), UnitGetPosition(lp_dyingUnit));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UndeadSavageDeath
//--------------------------------------------------------------------------------------------------
void gf_UndeadSavageDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    int autoB3ACBA79_val;
    // Variable Declarations
    string lv_loot;
    int lv_a;
    // Variable Initialization
    // Implementation
    gf_AddExperience(lp_killingUnit, 75.0);
    lv_a = RandomInt(1, 2);
    autoB3ACBA79_val = lv_a;
    if (autoB3ACBA79_val == 1) {
        lv_loot = "DraughtofDecay";
    }
    else if (autoB3ACBA79_val == 2) {
        lv_loot = "BoneTalisman";
    }
    else {
    }
    if ((lv_loot != null)) {
        UnitCreate(1, lv_loot, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DeathTombGuardian
//--------------------------------------------------------------------------------------------------
void gf_DeathTombGuardian (unit lp_dyingUnit, unit lp_killingUnit) {
    // Variable Declarations
    string lv_loot;
    int lv_a;
    // Variable Initialization
    // Implementation
    gf_AddExperience(lp_killingUnit, 50.0);
    gf_CreateLoot("RadiantGem", UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DeathMonstrosity
//--------------------------------------------------------------------------------------------------
void gf_DeathMonstrosity (unit lp_dyingUnit, unit lp_killingUnit) {
    int auto04A3D1B9_val;
    // Variable Declarations
    string lv_loot;
    int lv_a;
    // Variable Initialization
    // Implementation
    gf_AddExperience(lp_killingUnit, 500.0);
    lv_a = RandomInt(1, 5);
    auto04A3D1B9_val = lv_a;
    if (auto04A3D1B9_val == 1) {
        lv_loot = "Demonward";
    }
    else if (auto04A3D1B9_val == 2) {
        lv_loot = "RepeatingCrossbow";
    }
    else if (auto04A3D1B9_val == 3) {
        lv_loot = "GoldenHauberk";
    }
    else if (auto04A3D1B9_val == 4) {
        lv_loot = "MasterRangersMaille";
    }
    else if (auto04A3D1B9_val == 5) {
        lv_loot = "GravesingersClaw";
    }
    else {
        lv_loot = "HandfulofBerries";
    }
    gf_CreateLoot(lv_loot, UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
    gf_CreateLoot("ReapersHand", UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
    gf_CreateLoot("BoneTalisman", UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
    gf_CreateLoot("DraughtofDecay", UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
    gf_CreateLoot("GoldPurse", UnitGetPosition(lp_dyingUnit), 1.0, true, 100, RandomInt(50, 60));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CampfireDeath
//--------------------------------------------------------------------------------------------------
void gf_CampfireDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_dyingUnit);
    // Implementation
    if ((gv_dead[lv_i] == true)) {
    }
    else {
        UnitCreate(1, "Campfire", c_unitCreateIgnorePlacement, lv_i, UnitGetPosition(lp_dyingUnit), UnitGetFacing(lp_dyingUnit));
        if ((lp_killingUnit == lp_dyingUnit)) {
            UnitClearSelection(lv_i);
            UnitSelect(UnitLastCreated(), UnitGetOwner(UnitLastCreated()), true);
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NightwispDeath
//--------------------------------------------------------------------------------------------------
void gf_NightwispDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Implementation
    gf_AddExperience(lp_killingUnit, 50.0);
    if ((UnitGroupHasUnit(gv_pets[UnitGetOwner(lp_dyingUnit)], lp_dyingUnit) == true)) {
        gf_LosePet(lp_dyingUnit);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StagDeath
//--------------------------------------------------------------------------------------------------
void gf_StagDeath (unit lp_dyingUnit, unit lp_killingUnit) {
    // Implementation
    if ((UnitGetOwner(lp_killingUnit) != 0) && (UnitGetOwner(lp_killingUnit) != 15)) {
        gf_AddExperience(lp_killingUnit, 100.0);
        UnitCreate(1, "RawStagMeat", 0, 0, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_dyingUnit), 1.0)), libNtve_gf_RandomAngle());
        UnitCreate(1, "Leather", 0, 0, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_dyingUnit), 1.0)), libNtve_gf_RandomAngle());
        UnitCreate(1, "Antlers", 0, 0, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_dyingUnit), 1.0)), libNtve_gf_RandomAngle());
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PostDeathHint
//--------------------------------------------------------------------------------------------------
trigger auto_gf_PostDeathHint_Trigger = null;
int auto_gf_PostDeathHint_lp_player;
fixed auto_gf_PostDeathHint_lp_delay;
void gf_PostDeathHint (int lp_player, fixed lp_delay) {
    auto_gf_PostDeathHint_lp_player = lp_player;
    auto_gf_PostDeathHint_lp_delay = lp_delay;
    if (auto_gf_PostDeathHint_Trigger == null) {
        auto_gf_PostDeathHint_Trigger = TriggerCreate("auto_gf_PostDeathHint_TriggerFunc");
    }
    TriggerExecute(auto_gf_PostDeathHint_Trigger, false, false);
}
bool auto_gf_PostDeathHint_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_PostDeathHint_lp_player;
    fixed lp_delay = auto_gf_PostDeathHint_lp_delay;
    // Implementation
    if ((StringSub(gv_hints[lp_player], 20, 20) == "0")) {
        Wait(lp_delay, c_timeGame);
        if ((gv_gameOver == false)) {
            gf_InGameHint("perks", lp_player);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateRezShrine
//--------------------------------------------------------------------------------------------------
void gf_UpdateRezShrine (int lp_player) {
    int autoF5592C72_ae;
    int autoF5592C72_ai;
    // Variable Declarations
    playergroup lv_deadPlayers;
    playergroup lv_tempGroup;
    int lv_a;
    // Variable Initialization
    lv_deadPlayers = PlayerGroupEmpty();
    lv_tempGroup = PlayerGroupEmpty();
    // Implementation
    PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_beingResurrected[PlayerGroupLoopCurrent()] == false) && ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) || (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeComputer)) && ((gv_playerData[PlayerGroupLoopCurrent()].lv_kobold == null) || (UnitIsAlive(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) == false))) {
            PlayerGroupAdd(lv_deadPlayers, PlayerGroupLoopCurrent());
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    autoF5592C72_ae = 4;
    autoF5592C72_ai = 1;
    lv_a = 1;
    for ( ; ( (autoF5592C72_ai >= 0 && lv_a <= autoF5592C72_ae) || (autoF5592C72_ai <= 0 && lv_a >= autoF5592C72_ae) ) ; lv_a += autoF5592C72_ai ) {
        if ((PlayerGroupCount(lv_deadPlayers) > 0)) {
            libNtve_gf_SetDialogItemText(gv_rezzDialogBTN[lv_a], (StringExternal("Param/Value/4B65B3D1") + (gf_GetPlayerName(PlayerGroupPlayer(lv_deadPlayers, 1), -1) + StringExternal("Param/Value/90946D2A"))), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_rezzDialogBTN[lv_a], StringExternal("Param/Value/AEBC4DE7"), PlayerGroupSingle(lp_player));
            DialogControlSetVisible(gv_rezzDialogBTN[lv_a], PlayerGroupSingle(lp_player), true);
            gv_rezzBTNTargetPlayer[lv_a][lp_player] = PlayerGroupPlayer(lv_deadPlayers, 1);
            PlayerGroupRemove(lv_deadPlayers, PlayerGroupPlayer(lv_deadPlayers, 1));
            lv_tempGroup = lv_deadPlayers;
            lv_deadPlayers = lv_tempGroup;
        }
        else {
            DialogControlSetVisible(gv_rezzDialogBTN[lv_a], PlayerGroupSingle(lp_player), false);
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Resurrecting
//--------------------------------------------------------------------------------------------------
void gf_Resurrecting (unit lp_rezzer, unit lp_shrine, int lp_player, fixed lp_rezzTimes) {
    // Variable Declarations
    const fixed lv_interval = 0.25;
    int lv_i;
    fixed lv_rezzDuration;
    fixed lv_experienceGain;
    fixed lv_progress;
    int lv_turnInterval;
    bool lv_finished;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_rezzer);
    lv_rezzDuration = lp_rezzTimes;
    lv_experienceGain = (lp_rezzTimes * 2.0);
    // Implementation
    UnitIssueOrder(lp_rezzer, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gf_Quicktag(lp_rezzer, StringExternal("Param/Value/1B22FE2A"), 2.0, 24);
    UIAlertUnit("BeingResurrected", lp_player, StringExternal("Param/Value/C272ED5B"), null, lp_shrine);
    UIAlertUnit("AllyBeingResurrected", lp_player, StringExternal("Param/Value/01C512CF"), null, lp_shrine);
    gv_beingResurrected[lp_player] = true;
    while ((lv_finished == false) && (gv_playerData[lv_i].lv_alive == true) && (UnitHasBehavior(lp_rezzer, "Unconscious") == false) && (DistanceBetweenPoints(UnitGetPosition(lp_rezzer), UnitGetPosition(lp_shrine)) <= (gv_interactRadius + gv_interactRadiusBonus))) {
        if ((lv_progress >= lv_rezzDuration)) {
            lv_finished = true;
            gv_alliesResurrected[lv_i] += 1;
            gf_Quicktag(lp_rezzer, (StringExternal("Param/Value/09003102") + (gf_GetPlayerName(lp_player, 0) + StringExternal("Param/Value/8D46DF6F"))), 2.0, 24);
            gf_AddExperience(lp_rezzer, lv_experienceGain);
            gf_ResurrectPlayer(lp_player, lp_shrine);
            SoundPlayAtPoint(SoundLink("ResurrectionFinishSound", -1), PlayerGroupAll(), UnitGetPosition(lp_shrine), 0.0, 100.0, 0.0);
            ActorSend(libNtve_gf_MainActorofUnit(lp_rezzer), "Signal WorkComplete");
            if ((gv_alliesResurrected[lv_i] >= 5)) {
                gf_UnlockRequirement(lv_i, 2, 2);
            }
            else {
            }
        }
        else {
            lv_progress += lv_interval;
            if (lv_turnInterval >= 4) {
                lv_turnInterval = 1;
            }
            else {
                lv_turnInterval = lv_turnInterval + 1;
            }
            if ((lv_turnInterval == 1) && (UnitHasBehavior(lp_rezzer, "Stationary") == true)) {
                libNtve_gf_MakeUnitFacePoint(lp_rezzer, UnitGetPosition(lp_shrine), 0.5);
            }
            else {
            }
            Wait(lv_interval, c_timeGame);
        }
    }
    if ((lv_finished == false)) {
        SoundPlay(SoundLink("CraftingFailed", -1), PlayerGroupSingle(lv_i), 100.0, 0.0);
        gf_Quicktag(lp_rezzer, StringExternal("Param/Value/712799BE"), 2.0, 24);
    }
    else {
    }
    UnitBehaviorRemove(lp_rezzer, "Resurrecting", 1);
    gv_beingResurrected[lp_player] = false;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ResurrectPlayer
//--------------------------------------------------------------------------------------------------
void gf_ResurrectPlayer (int lp_player, unit lp_shrine) {
    // Variable Declarations
    point lv_rezzloc;
    fixed lv_temp;
    int lv_a;
    // Variable Initialization
    // Implementation
    gf_SetKoboldDefault(lp_player);
    gf_ClearResourceReserves(lp_player);
    if ((lp_shrine == UnitFromId(2745))) {
        lv_rezzloc = PointWithOffsetPolar(UnitGetPosition(UnitFromId(2745)), 2.0, 250.0);
    }
    else if ((lp_shrine == UnitFromId(2316))) {
        lv_rezzloc = PointWithOffsetPolar(UnitGetPosition(UnitFromId(2316)), 2.0, 310.0);
    }
    else if ((lp_shrine == null)) {
        lv_rezzloc = gf_DynamicResLocation(lp_player);
    }
    UnitCreate(1, "Kobold", 0, lp_player, lv_rezzloc, libNtve_gf_RandomAngle());
    gv_playerData[lp_player].lv_kobold = UnitLastCreated();
    gv_dead[lp_player] = false;
    gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_koboldsAlive += 1;
    gv_playerData[lp_player].lv_alive = true;
    gv_playerData[lp_player].lv_gameStats.lv_timesResurrected += 1;
    UnitClearSelection(lp_player);
    UnitSelect(gv_playerData[lp_player].lv_kobold, lp_player, true);
    UnitControlGroupAddUnit(lp_player, 1, gv_playerData[lp_player].lv_kobold);
    UnitBehaviorAdd(UnitLastCreated(), "RecentlyResurrected", gv_playerData[lp_player].lv_kobold, 1);
    gf_SetupStartingSpells(gv_playerData[lp_player].lv_kobold);
    gf_SetupStartingItems(gv_playerData[lp_player].lv_kobold, true);
    gf_SetupPerkBonusi(gv_playerData[lp_player].lv_kobold, true);
    gf_SkillBonusesPostMortem(lp_player);
    gf_UpdateSpellCosts(lp_player);
    CameraPan(lp_player, UnitGetPosition(gv_playerData[lp_player].lv_kobold), 0.0, -1, 10, true);
    if ((gv_playerData[lp_player].lv_isAI == true)) {
        UnitSetCustomValue(gv_playerData[lp_player].lv_kobold, 5, 1.0);
        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, "KoboldBotInitialDelay", gv_playerData[lp_player].lv_kobold, 1);
        gf_AISpendSkillPoints(lp_player);
    }
    else {
    }
    UnitSetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropXP, gv_savedXP[lp_player]);
    gf_UpdateHighlightTooltip(lp_player);
    gv_playerData[lp_player].lv_warmth += 100.0;
    gv_playerData[lp_player].lv_hunger += 100.0;
    gv_playerData[lp_player].lv_stamina += 100.0;
    UnitGroupLoopBegin(gv_pets[lp_player]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_TameAnimal(UnitLastCreated(), UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_UpdateForestry(lp_player);
    gf_UpdateMining(lp_player);
    gf_UpdateCooking(lp_player);
    gf_UpdateForaging(lp_player);
    gf_UpdateArtisanship(lp_player);
    gf_UpdateStatsAll(lp_player);
    gf_ResumeSituationalMusic(lp_player);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SkillBonusesPostMortem
//--------------------------------------------------------------------------------------------------
void gf_SkillBonusesPostMortem (int lp_player) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lp_player)) + IntToFixed((gv_skillForestry[lp_player] / 5))), 0));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerStart
//--------------------------------------------------------------------------------------------------
void gf_ReincarnatePlayerStart (int lp_player, fixed lp_time) {
    // Implementation
    if ((gv_gameOver == false) && (((gv_gameMode == 2) && (gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerDefeat == false)) || (gv_playerData[lp_player].lv_reincarnation == true))) {
        TimerStart(gv_reincarnationTimer[lp_player], lp_time, false, c_timeGame);
        TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/20AFBED1"), false, false);
        TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(lp_player), true);
        TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
        TimerWindowShowBorder(TimerWindowLastCreated(), false);
        gv_reincarnationTimerWindow[lp_player] = TimerWindowLastCreated();
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish
//--------------------------------------------------------------------------------------------------
void gf_ReincarnatePlayerFinish (int lp_player) {
    // Implementation
    if ((gv_gameOver == false) && (((gv_gameMode == 2) && (gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerDefeat == false)) || (gv_playerData[lp_player].lv_reincarnation == true))) {
        gf_ResurrectPlayer(lp_player, gv_playerData[lp_player].lv_reincarnationBuilding);
        gv_playerData[lp_player].lv_reincarnation = false;
        gv_playerData[lp_player].lv_reincarnationBuilding = null;
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DynamicResLocation
//--------------------------------------------------------------------------------------------------
point gf_DynamicResLocation (int lp_player) {
    int auto78F0B3CE_ae;
    int auto78F0B3CE_ai;
    // Variable Declarations
    int lv_a;
    unit lv_b;
    int lv_t;
    point lv_value;
    // Variable Initialization
    lv_t = gv_playerData[lp_player].lv_team;
    // Implementation
    if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_teamData[lv_t].lv_watchTower), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Fortress", "Sight", UnitGetOwner(gv_teamData[lv_t].lv_watchTower)))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lv_value = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(gv_teamData[lv_t].lv_watchTower), 8.0));
    }
    else {
        UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lp_player, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "Sight", UnitGetOwner(UnitGroupLoopCurrent())))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                lv_b = UnitGroupLoopCurrent();
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if (gf_UnitExists(lv_b)) {
            lv_value = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lv_b), 4.0));
        }
        else {
            auto78F0B3CE_ae = 20;
            auto78F0B3CE_ai = 1;
            lv_a = 1;
            for ( ; ( (auto78F0B3CE_ai >= 0 && lv_a <= auto78F0B3CE_ae) || (auto78F0B3CE_ai <= 0 && lv_a >= auto78F0B3CE_ae) ) ; lv_a += auto78F0B3CE_ai ) {
                if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower)) {
                    lv_value = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(gv_teamData[lv_t].lv_watchTower), 64.0));
                }
                else {
                    lv_value = gf_RandomPathablePoint(RegionPlayableMap());
                }
                if ((lv_value != null) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lp_player, c_unitAllianceEnemy, RegionCircle(lv_value, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    lv_a = 100;
                }
                else {
                }
            }
            if ((lv_value != null)) {
            }
            else {
                lv_value = gf_GetTeamStart(lp_player);
            }
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EndGame
//--------------------------------------------------------------------------------------------------
void gf_Endgame (bool lp_ignoreConditions, bool lp_soloTeamGame) {
    // Variable Declarations
    int lv_dead;
    text lv_victoryText;
    text lv_defeatedText;
    // Variable Initialization
    lv_victoryText = StringExternal("Param/Value/FFF9767D");
    lv_defeatedText = StringExternal("Param/Value/1D0523FA");
    // Implementation
    if ((gv_gameStarted == true) && (gv_gameOver == false) && (gv_tutorial == false)) {
        gf_Turnoffstuff();
        if ((lp_soloTeamGame == false)) {
            gv_winningTeam = gf_LastTeamStanding();
            gv_losingPlayers = PlayerGroupActive();
            gv_winningPlayers = gv_teamData[gv_winningTeam].lv_members;
            libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_winningPlayers, gv_losingPlayers);
        }
        else {
            gv_losingPlayers = PlayerGroupActive();
        }
        SoundtrackPlay(gv_losingPlayers, c_soundtrackCategoryMusic, "KoboldMusicDefeat", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        SoundtrackPlay(gv_winningPlayers, c_soundtrackCategoryMusic, "KoboldMusicVictory", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        UIDisplayMessage(gv_winningPlayers, c_messageAreaDirective, lv_victoryText);
        UIDisplayMessage(gv_losingPlayers, c_messageAreaDirective, lv_defeatedText);
        CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        gf_EndgameStats(gv_winningPlayers, gv_losingPlayers);
        Wait(5.0, c_timeGame);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_InGameHint("postgame", PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        Wait(25.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2D628DFB"));
        Wait(60.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AEB8FB95"));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AllDeadOnTeam
//--------------------------------------------------------------------------------------------------
bool gf_AllDeadOnTeam (int lp_team, bool lp_messages) {
    // Variable Declarations
    bool lv_value;
    // Variable Initialization
    lv_value = true;
    // Implementation
    if ((gv_teamData[lp_team].lv_watchTowerDefeat == false)) {
        PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (((gv_dead[PlayerGroupLoopCurrent()] == false) || (gv_playerData[PlayerGroupLoopCurrent()].lv_reincarnation == true)) && (((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) && (PlayerStatus(PlayerGroupLoopCurrent()) != c_playerStatusLeft)) || (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeComputer) || (gv_aIFFATestingOverride == true))) {
                lv_value = false;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    if ((lp_messages == true)) {
        if ((lv_value == true)) {
            if ((UnitGroupCount(gf_LivingKoboldsOnTeam(lp_team), c_unitCountAlive) == 1)) {
                TextExpressionSetToken("Param/Expression/E18FA707", "A", StringExternal("Param/Value/2E7A8335"));
                TextExpressionSetToken("Param/Expression/E18FA707", "B", gf_GetTribeTextOfTeam(lp_team));
                TextExpressionSetToken("Param/Expression/E18FA707", "C", StringExternal("Param/Value/8AF9A483"));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/E18FA707"));
            }
            else if ((UnitGroupCount(gf_LivingKoboldsOnTeam(lp_team), c_unitCountAlive) > 1)) {
                TextExpressionSetToken("Param/Expression/D1729179", "A", StringExternal("Param/Value/8DE578B2"));
                TextExpressionSetToken("Param/Expression/D1729179", "B", gf_GetTribeTextOfTeam(lp_team));
                TextExpressionSetToken("Param/Expression/D1729179", "C", StringExternal("Param/Value/DF9A1F62"));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D1729179"));
            }
        }
        else {
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LivingKoboldsOnTeam
//--------------------------------------------------------------------------------------------------
unitgroup gf_LivingKoboldsOnTeam (int lp_team) {
    // Variable Declarations
    unitgroup lv_value;
    // Variable Initialization
    lv_value = UnitGroupEmpty();
    // Implementation
    if (((lp_team >= 1) && (lp_team <= gv_maxTeams))) {
        PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                UnitGroupAdd(lv_value, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EndgameStats
//--------------------------------------------------------------------------------------------------
void gf_EndgameStats (playergroup lp_winningPlayers, playergroup lp_losingPlayers) {
    int auto4AB2417E_n;
    int auto4AB2417E_i;
    // Variable Declarations
    int lv_a;
    bool[gv_players + 1] lv_dinged;
    fixed[gv_players + 1] lv_experienceGained;
    fixed[gv_players + 1] lv_experienceTotal;
    fixed[gv_players + 1] lv_experienceTNL;
    bool[gv_players + 1] lv_gainedXP;
    playergroup lv_allUsers;
    fixed lv_cPEarned;
    fixed lv_cPFactor;
    // Variable Initialization
    lv_allUsers = PlayerGroupEmpty();
    lv_cPFactor = RandomFixed(1.2, 1.4);
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            PlayerGroupAdd(lv_allUsers, PlayerGroupLoopCurrent());
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    gf_SetupPostgameFeats();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    // Just checks if player cheated in single player
    if (!gv_cheated){
        PlayerGroupLoopBegin(gv_winningPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_ModifyMatchHistory(PlayerGroupLoopCurrent(), "W");
            if ((gv_rated == true) && (gv_validRatedGame == true)) {
                gf_UpdatePlayerRating(PlayerGroupLoopCurrent(), 1);
            }
            else {
            }
            gv_accwins[PlayerGroupLoopCurrent()] += 1;
            lv_experienceGained[PlayerGroupLoopCurrent()] = (25.0 + (gv_gameDuration * 0.07));
            gv_accxp[PlayerGroupLoopCurrent()] += FixedToInt(lv_experienceGained[PlayerGroupLoopCurrent()]);
            lv_experienceTotal[PlayerGroupLoopCurrent()] = gv_accxp[PlayerGroupLoopCurrent()];
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(gv_losingPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_ModifyMatchHistory(PlayerGroupLoopCurrent(), "L");
            if ((gv_rated == true) && (gv_validRatedGame == true)) {
                gf_UpdatePlayerRating(PlayerGroupLoopCurrent(), 0);
            }
            else {
            }
            gv_acclosses[PlayerGroupLoopCurrent()] += 1;
            lv_experienceGained[PlayerGroupLoopCurrent()] = (10.0 + (gv_gameDuration * 0.05));
            gv_accxp[PlayerGroupLoopCurrent()] += FixedToInt(lv_experienceGained[PlayerGroupLoopCurrent()]);
            lv_experienceTotal[PlayerGroupLoopCurrent()] = gv_accxp[PlayerGroupLoopCurrent()];
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            auto4AB2417E_n = 20;
            for (auto4AB2417E_i = 1; auto4AB2417E_i <= auto4AB2417E_n; auto4AB2417E_i += 1) {
                if ((gv_acclvl[PlayerGroupLoopCurrent()] < 20)) {
                    lv_gainedXP[PlayerGroupLoopCurrent()] = true;
                    lv_experienceTNL[PlayerGroupLoopCurrent()] = (-50.0 + (IntToFixed(gv_acclvl[PlayerGroupLoopCurrent()]) * (100.0 + (5.0 * IntToFixed(gv_acclvl[PlayerGroupLoopCurrent()])))));
                    if ((gv_accxp[PlayerGroupLoopCurrent()] >= FixedToInt(lv_experienceTNL[PlayerGroupLoopCurrent()]))) {
                        gv_acclvl[PlayerGroupLoopCurrent()] += 1;
                        gv_accpp[PlayerGroupLoopCurrent()] += 1;
                        lv_dinged[PlayerGroupLoopCurrent()] = true;
                        lv_experienceTNL[PlayerGroupLoopCurrent()] = (-50.0 + (IntToFixed(gv_acclvl[PlayerGroupLoopCurrent()]) * (100.0 + (5.0 * IntToFixed(gv_acclvl[PlayerGroupLoopCurrent()])))));
                    }
                    else {
                    }
                }
                else {
                    lv_experienceTNL[PlayerGroupLoopCurrent()] = 0.0;
                }
            }
        }
        PlayerGroupLoopEnd();
    }
    // You cheated in single player
    else {  
        UIDisplayMessage(PlayerGroupAll(), 1, StringToText("<c val=\"04ADFF\">Single Player: </c>" + 
            "<c val=\"A6D69A\">No stats will be recorded due to cheating.</c>"));
    }
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_gainedXP[PlayerGroupLoopCurrent()] == true)) {
            if ((gv_acclvl[PlayerGroupLoopCurrent()] == 20) && (lv_dinged[PlayerGroupLoopCurrent()] == true)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/6551B093") + (FixedToText(lv_experienceGained[PlayerGroupLoopCurrent()], 0) + (StringExternal("Param/Value/E9436739") + (FixedToText(lv_experienceTotal[PlayerGroupLoopCurrent()], 0) + StringExternal("Param/Value/FE6BB8E4"))))));
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/0C619275") + (IntToText(gv_acclvl[PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/2250725E"))));
                SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
                gf_InGameHint("conqpoints", PlayerGroupLoopCurrent());
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/4137514A") + (FixedToText(lv_experienceGained[PlayerGroupLoopCurrent()], 0) + (StringExternal("Param/Value/F8243520") + (FixedToText(lv_experienceTotal[PlayerGroupLoopCurrent()], 0) + (StringExternal("Param/Value/6B85F99A") + (FixedToText((lv_experienceTNL[PlayerGroupLoopCurrent()] - lv_experienceTotal[PlayerGroupLoopCurrent()]), 0) + StringExternal("Param/Value/D109164F"))))))));
                if ((lv_dinged[PlayerGroupLoopCurrent()] == true)) {
                    if ((gv_acclvl[PlayerGroupLoopCurrent()] == gv_rewardLevelRequirement)) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/B6A3EB26") + (IntToText(gv_acclvl[PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/762652A3"))));
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/1F67632A"));
                        SoundPlay(SoundLink("UI_BNet_Achievement", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/3D87509B") + (IntToText(gv_acclvl[PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/1ED6E77D"))));
                        SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
                    }
                }
                else {
                }
            }
        }
        else {
        }
        if ((gv_acclvl[PlayerGroupLoopCurrent()] >= gv_rewardLevelRequirement)) {
            lv_cPEarned = (lv_experienceGained[PlayerGroupLoopCurrent()] * lv_cPFactor);
            gv_conqpoints[PlayerGroupLoopCurrent()] += FixedToInt(lv_cPEarned);
            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/0188EA42") + (IntToText(FixedToInt(lv_cPEarned)) + (StringExternal("Param/Value/BC2DBF54") + (IntToText(gv_conqpoints[PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/05C8617B"))))));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    if ((gv_banksInitialized == true)) {
        PlayerGroupLoopBegin(lv_allUsers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_bankSynced[PlayerGroupLoopCurrent()] == true)) {
                gf_SaveResources(PlayerGroupLoopCurrent());
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_UpdatePGSWindow(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetDialogItemText(gv_pGSWindowSmallBTN, StringExternal("Param/Value/342414FA"), PlayerGroupActive());
    libNtve_gf_SetDialogItemText(gv_perkDialogSmallBTN, StringExternal("Param/Value/85DC213C"), PlayerGroupActive());
    if ((gv_activeTeams == 2)) {
        DialogSetVisible(gv_pGSWindowLarge, PlayerGroupAll(), true);
    }
    else {
        DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupAll(), true);
    }
    DialogSetVisible(gv_perkDialogSmall, PlayerGroupActive(), true);
    DialogSetVisible(gv_pGSWindowSmall, PlayerGroupActive(), true);
    DialogSetVisible(gv_rewardsOpenerDialog, PlayerGroupActive(), true);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_acclvl[PlayerGroupLoopCurrent()] < gv_rewardLevelRequirement)) {
            libNtve_gf_SetDialogItemTooltip(gv_rewardsOpenerItem, (libNtve_gf_DialogItemTooltip(gv_rewardsOpenerItem, PlayerGroupLoopCurrent()) + StringExternal("Param/Value/F1143CFD")), PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
        libNtve_gf_SetDialogItemText(gv_rewardsOpenerItem, gf_RewardsOpenerText(PlayerGroupLoopCurrent()), PlayerGroupSingle(PlayerGroupLoopCurrent()));
        gf_RunPostgameFeats(PlayerGroupLoopCurrent());
        gf_EndgameRequirementsCheck(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TurnoffStuff
//--------------------------------------------------------------------------------------------------
void gf_Turnoffstuff () {
    int autoE04053BF_ae;
    int autoE04053BF_ai;
    int auto403FF605_ae;
    int auto403FF605_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Implementation
    gv_gameOver = true;
    gv_questIndexActive = 0;
    gv_questActive = false;
    TimerPause(gv_questDelayTimer, true);
    TimerPause(gv_questTimer, true);
    autoE04053BF_ae = gv_players;
    autoE04053BF_ai = 1;
    lv_a = 1;
    for ( ; ( (autoE04053BF_ai >= 0 && lv_a <= autoE04053BF_ae) || (autoE04053BF_ai <= 0 && lv_a >= autoE04053BF_ae) ) ; lv_a += autoE04053BF_ai ) {
        TimerPause(gv_reincarnationTimer[lv_a], true);
        TimerWindowDestroy(gv_reincarnationTimerWindow[lv_a]);
        TimerPause(gv_destroyerTimer[lv_a], true);
        DialogSetVisible(gv_observeAnswer[lv_a], PlayerGroupAll(), false);
    }
    DialogSetVisible(gv_observeRequest, PlayerGroupAll(), false);
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_chiefPing);
    PingDestroy(gv_feastChefPing);
    PingDestroy(gv_merchantPing);
    PingDestroy(gv_shipmentPing);
    auto403FF605_ae = 20;
    auto403FF605_ai = 1;
    lv_a = 1;
    for ( ; ( (auto403FF605_ai >= 0 && lv_a <= auto403FF605_ae) || (auto403FF605_ai <= 0 && lv_a >= auto403FF605_ae) ) ; lv_a += auto403FF605_ai ) {
        PingDestroy(gv_treasurePing[lv_a]);
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    DialogSetVisible(gv_skillWindowBig, PlayerGroupAll(), false);
    DialogSetVisible(gv_skillWindowSmall, PlayerGroupAll(), false);
    DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_statusDialog, PlayerGroupAll(), false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, gv_musicVolume, 0.0);
    TriggerEnable(gt_TheBigPeriod, false);
    TriggerEnable(gt_AIMainThread, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ModifyMatchHistory
//--------------------------------------------------------------------------------------------------
void gf_ModifyMatchHistory (int lp_player, string lp_char) {
    // Variable Declarations
    int lv_maximumHistoryLength;
    // Variable Initialization
    lv_maximumHistoryLength = 10;
    // Implementation
    gv_matchhistory[lp_player] = (gv_matchhistory[lp_player] + lp_char);
    if ((StringLength(gv_matchhistory[lp_player]) > lv_maximumHistoryLength)) {
        gv_matchhistory[lp_player] = StringReplace(gv_matchhistory[lp_player], "", 1, (StringLength(gv_matchhistory[lp_player]) - lv_maximumHistoryLength));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LastTeamStanding
//--------------------------------------------------------------------------------------------------
int gf_LastTeamStanding () {
    int autoEEDF286F_ae;
    int autoEEDF286F_ai;
    // Variable Declarations
    int lv_a;
    int lv_teamsRemaining;
    int lv_value;
    // Variable Initialization
    // Implementation
    autoEEDF286F_ae = gv_activeTeams;
    autoEEDF286F_ai = 1;
    lv_a = 1;
    for ( ; ( (autoEEDF286F_ai >= 0 && lv_a <= autoEEDF286F_ae) || (autoEEDF286F_ai <= 0 && lv_a >= autoEEDF286F_ae) ) ; lv_a += autoEEDF286F_ai ) {
        if ((gf_AllDeadOnTeam(lv_a, false) == false)) {
            lv_teamsRemaining += 1;
            lv_value = lv_a;
        }
        else {
        }
    }
    if (((lv_teamsRemaining > 1) || (gv_activeTeams == 1))) {
        lv_value = -1;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DamageText
//--------------------------------------------------------------------------------------------------
void gf_DamageText (unit lp_source, unit lp_target, fixed lp_damageAmount, fixed lp_absorbed, string lp_effect) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_fontSize;
    fixed lv_angle;
    fixed lv_offset;
    text lv_text;
    color lv_color;
    bool lv_fatal;
    playergroup lv_playergroup;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_source);
    lv_j = UnitGetOwner(lp_target);
    lv_color = Color(100,100,100);
    lv_fatal = (UnitGetPropertyFixed(lp_target, c_unitPropLife, c_unitPropCurrent) == 0);
    lv_playergroup = PlayerGroupSingle(lv_i);
    // Implementation
    if ((lp_target != lp_source) && (lp_effect != "KillWithDamage") && ((lp_damageAmount > 0.5) || (UnitHasBehavior(lp_target, "TigerRage") == true) || (gv_noDamage == true))) {
        if (((lv_i >= 1) && (lv_i <= gv_players)) && ((gv_dTDamageDoneOn[lv_i] == true) || (gv_playerData[lv_i].lv_isAI == true)) && ((UnitGetType(lp_source) == "Kobold") || (UnitGetType(lp_source) == "Fortress") || (UnitGetType(lp_source) == "AutomatedDefenseTurret") || (UnitGetType(lp_source) == "SpikeTrap") || (UnitHasBehavior(lp_source, "Tamed") == true)) && (libNtve_gf_UnitIsVisibleToPlayer(lp_target, lv_i) == true)) {
            lv_fontSize = FixedToInt(Round((gv_dTScaleValue[lv_i] * (19.0 + (lp_damageAmount * 0.05)))));
            lv_fontSize = gf_RoundIntegertoEven(lv_fontSize);
            if ((UnitGroupHasUnit(gv_recentlyDamaged[lv_i], lp_target) == true)) {
                lv_offset = (RandomFixed(0.3, 0.35) + (IntToFixed(lv_fontSize) * 0.01));
                lv_angle = gf_GetDTDamageDoneAngle(lv_i);
            }
            else {
                gv_dTAngles[lv_i] = "123456";
            }
            if ((lp_damageAmount == 0.0) && ((UnitHasBehavior(lp_target, "TigerRage") == true))) {
                lv_text = StringExternal("Param/Value/240A50C7");
                lv_color = Color(100.00, 100.00, 0.00);
            }
            else {
                lv_text = FixedToText(Round(lp_damageAmount), 0);
                lv_text = gf_DTSuffix(lp_absorbed, lv_text, lv_fatal);
                lv_color = gf_GetDamageColor(lp_effect);
            }
            if ((lp_effect == "BallistaDamage")) {
                UnitGroupLoopBegin(UnitCargoGroup(lp_source));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    PlayerGroupAdd(lv_playergroup, UnitGetOwner(UnitGroupLoopCurrent()));
                }
                UnitGroupLoopEnd();
            }
            else {
            }
            TextTagCreate(TextWithColor(lv_text, lv_color), lv_fontSize, PointWithOffsetPolar(UnitGetPosition(lp_target), lv_offset, lv_angle), 1.5, true, false, lv_playergroup);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, (0.75 * gv_dTDurationValue[lv_i]));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (0.5 * gv_dTDurationValue[lv_i]));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (0.25 * gv_dTDurationValue[lv_i]));
            UnitBehaviorAdd(lp_target, "RecentlyDamaged", lp_source, 1);
            if ((UnitGroupHasUnit(gv_recentlyDamaged[lv_i], lp_target) == false)) {
                UnitGroupAdd(gv_recentlyDamaged[lv_i], lp_target);
            }
            else {
            }
        }
        else {
        }
        if (((lv_j >= 1) && (lv_j <= gv_players)) && ((gv_dTDamageTakenOn[lv_j] == true) || (gv_playerData[lv_j].lv_isAI == true)) && (UnitGetType(lp_target) == "Kobold")) {
            lv_fontSize = FixedToInt(Round((gv_dTScaleValue[lv_j] * (19.0 + (lp_damageAmount * 0.05)))));
            lv_fontSize = gf_RoundIntegertoEven(lv_fontSize);
            if ((UnitGroupHasUnit(gv_recentlyDamaged[lv_j], lp_target) == true)) {
                lv_offset = (RandomFixed(0.3, 0.35) + (IntToFixed(lv_fontSize) * 0.01));
                lv_angle = gf_GetDTDamageTakenAngle(lv_j);
            }
            else {
                gv_dTAngles2[lv_j] = "123456";
            }
            lv_text = FixedToText(Round(lp_damageAmount), 0);
            lv_text = gf_DTSuffix(lp_absorbed, lv_text, lv_fatal);
            lv_color = Color(100.00, 0.00, 0.00);
            TextTagCreate(TextWithColor(lv_text, lv_color), lv_fontSize, PointWithOffsetPolar(UnitGetPosition(lp_target), lv_offset, lv_angle), 1.5, true, false, PlayerGroupSingle(lv_j));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, (0.75 * gv_dTDurationValue[lv_j]));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (0.5 * gv_dTDurationValue[lv_j]));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (0.25 * gv_dTDurationValue[lv_j]));
            UnitBehaviorAdd(lp_target, "RecentlyDamaged", lp_target, 1);
            if ((UnitGroupHasUnit(gv_recentlyDamaged[lv_j], lp_target) == false)) {
                UnitGroupAdd(gv_recentlyDamaged[lv_j], lp_target);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RoundIntegerToEven
//--------------------------------------------------------------------------------------------------
int gf_RoundIntegertoEven (int lp_int) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    lv_value = lp_int;
    // Implementation
    if ((ModI(lv_value, 2) == 1)) {
        lv_value -= 1;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DTSuffix
//--------------------------------------------------------------------------------------------------
text gf_DTSuffix (fixed lp_absorbed, text lp_text, bool lp_fatal) {
    // Variable Declarations
    text lv_value;
    // Variable Initialization
    lv_value = lp_text;
    // Implementation
    if ((lp_fatal == true)) {
        TextExpressionSetToken("Param/Expression/84FDAAD7", "B", lv_value);
        TextExpressionSetToken("Param/Expression/84FDAAD7", "C", StringExternal("Param/Value/A2817C16"));
        lv_value = TextExpressionAssemble("Param/Expression/84FDAAD7");
    }
    else if ((lp_absorbed > 0.0)) {
        TextExpressionSetToken("Param/Expression/5794B673", "B", lv_value);
        TextExpressionSetToken("Param/Expression/5794B673", "C", StringExternal("Param/Value/DF34F289"));
        lv_value = TextExpressionAssemble("Param/Expression/5794B673");
    }
    else if ((lp_absorbed < 0.0)) {
        TextExpressionSetToken("Param/Expression/659393E0", "B", lv_value);
        TextExpressionSetToken("Param/Expression/659393E0", "C", StringExternal("Param/Value/201F4EE4"));
        lv_value = TextExpressionAssemble("Param/Expression/659393E0");
    }
    else if (true) {
        TextExpressionSetToken("Param/Expression/B5E5588C", "B", lv_value);
        TextExpressionSetToken("Param/Expression/B5E5588C", "C", StringExternal("Param/Value/E0F8CC08"));
        lv_value = TextExpressionAssemble("Param/Expression/B5E5588C");
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetDamageColor
//--------------------------------------------------------------------------------------------------
color gf_GetDamageColor (string lp_effect) {
    // Variable Declarations
    color lv_value;
    // Variable Initialization
    lv_value = Color(100,100,100);
    // Implementation
    if (((lp_effect == "MeleeDamage") || (lp_effect == "BlunderbussDamage") || (lp_effect == "ElderWandDamage") || (lp_effect == "CravensFishStickerDamage") || (lp_effect == "CravensFishStickerDamageExplosive") || (lp_effect == "VenomousArbalestDamage") || (lp_effect == "ViciousJavelinDamage") || (lp_effect == "CelestialOrbDamage") || (lp_effect == "RepeatingCrossbowDamage") || (lp_effect == "RepeatingCrossbowDamageNoProc") || (lp_effect == "TwinThrowingAxesDamageLeft") || (lp_effect == "TwinThrowingAxesDamageRight") || (lp_effect == "FrostBeamDamage"))) {
        lv_value = Color(100,100,100);
    }
    else if (((lp_effect == "ShadowCloakDamage") || (lp_effect == "SiphonLifeDummyDamage") || (lp_effect == "FrostArmorDamage") || (lp_effect == "AfflictionDamage"))) {
        lv_value = Color(28*100/255,167*100/255,234*100/255);
    }
    else if (((lp_effect == "WolfBiteDamage") || (lp_effect == "DirewolfBiteDamage") || (lp_effect == "BearMaulDamage") || (lp_effect == "FrostBearMaulDamage") || (lp_effect == "NightwispDamage") || (lp_effect == "SpikeTrapDamage") || (lp_effect == "AutomatedDefenseTurretDamage"))) {
        lv_value = Color(149*100/255,150*100/255,151*100/255);
    }
    else if (true) {
        lv_value = Color(254*100/255,138*100/255,14*100/255);
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetDTDamageDoneAngle
//--------------------------------------------------------------------------------------------------
fixed gf_GetDTDamageDoneAngle (int lp_player) {
    // Variable Declarations
    int lv_random;
    int lv_index;
    fixed lv_value;
    // Variable Initialization
    // Implementation
    if ((StringLength(gv_dTAngles[lp_player]) == 0)) {
        gv_dTAngles[lp_player] = "123456";
    }
    else {
    }
    lv_random = RandomInt(1, StringLength(gv_dTAngles[lp_player]));
    lv_index = StringToInt(StringSub(gv_dTAngles[lp_player], lv_random, lv_random));
    lv_value = 90.0;
    lv_value += (IntToFixed(lv_index) * 45.0);
    gv_dTAngles[lp_player] = StringReplace(gv_dTAngles[lp_player], "", lv_random, lv_random);
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetDTDamageTakenAngle
//--------------------------------------------------------------------------------------------------
fixed gf_GetDTDamageTakenAngle (int lp_player) {
    // Variable Declarations
    int lv_random;
    int lv_index;
    fixed lv_value;
    // Variable Initialization
    // Implementation
    if ((StringLength(gv_dTAngles2[lp_player]) == 0)) {
        gv_dTAngles2[lp_player] = "123456";
    }
    else {
    }
    lv_random = RandomInt(1, StringLength(gv_dTAngles2[lp_player]));
    lv_index = StringToInt(StringSub(gv_dTAngles2[lp_player], lv_random, lv_random));
    lv_value = 90.0;
    lv_value += (IntToFixed(lv_index) * 45.0);
    gv_dTAngles2[lp_player] = StringReplace(gv_dTAngles2[lp_player], "", lv_random, lv_random);
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: QuickTag
//--------------------------------------------------------------------------------------------------
void gf_Quicktag (unit lp_unit, text lp_text, fixed lp_totalDuration, int lp_fontSize) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if (gf_UnitExists(lp_unit)) {
        if ((lp_unit == gv_playerData[lv_i].lv_kobold)) {
            if (gv_tTCycle[lv_i] >= gv_tTQueueSize) {
                gv_tTCycle[lv_i] = 1;
            }
            else {
                gv_tTCycle[lv_i] = gv_tTCycle[lv_i] + 1;
            }
            gv_tTUnit[gv_tTCycle[lv_i]][lv_i] = lp_unit;
            gv_tTPlayer[gv_tTCycle[lv_i]][lv_i] = lv_i;
            gv_tTText[gv_tTCycle[lv_i]][lv_i] = lp_text;
            gv_tTDuration[gv_tTCycle[lv_i]][lv_i] = lp_totalDuration;
            gv_tTSize[gv_tTCycle[lv_i]][lv_i] = lp_fontSize;
            gv_tTExists[gv_tTCycle[lv_i]][lv_i] = true;
            if ((UnitHasBehavior(lp_unit, "TextTagged") == false)) {
                gf_TextTag(lv_i, false);
            }
            else {
            }
        }
        else {
            TextTagCreate(lp_text, lp_fontSize, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupSingle(lv_i));
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_totalDuration);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (lp_totalDuration * 0.5));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (lp_totalDuration * 0.5));
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AdvancedTag
//--------------------------------------------------------------------------------------------------
void gf_Advancedtag (unit lp_unit, int lp_player, text lp_text, fixed lp_totalDuration, int lp_fontSize) {
    // Implementation
    if (gf_UnitExists(lp_unit)) {
        if ((lp_unit == gv_playerData[lp_player].lv_kobold)) {
            if (gv_tTCycle[lp_player] >= gv_tTQueueSize) {
                gv_tTCycle[lp_player] = 1;
            }
            else {
                gv_tTCycle[lp_player] = gv_tTCycle[lp_player] + 1;
            }
            gv_tTUnit[gv_tTCycle[lp_player]][lp_player] = lp_unit;
            gv_tTPlayer[gv_tTCycle[lp_player]][lp_player] = lp_player;
            gv_tTText[gv_tTCycle[lp_player]][lp_player] = lp_text;
            gv_tTDuration[gv_tTCycle[lp_player]][lp_player] = lp_totalDuration;
            gv_tTSize[gv_tTCycle[lp_player]][lp_player] = lp_fontSize;
            gv_tTExists[gv_tTCycle[lp_player]][lp_player] = true;
            if ((UnitHasBehavior(lp_unit, "TextTagged") == false)) {
                gf_TextTag(lp_player, false);
            }
            else {
            }
        }
        else {
            TextTagCreate(lp_text, lp_fontSize, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupSingle(lp_player));
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_totalDuration);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (lp_totalDuration * 0.5));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (lp_totalDuration * 0.5));
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AllTag
//--------------------------------------------------------------------------------------------------
void gf_Alltag (unit lp_unit, text lp_text, fixed lp_totalDuration, int lp_fontSize) {
    // Implementation
    if (gf_UnitExists(lp_unit)) {
        TextTagCreate(lp_text, lp_fontSize, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupActive());
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_totalDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (lp_totalDuration * 0.5));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (lp_totalDuration * 0.5));
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((VisIsVisibleForPlayer(PlayerGroupLoopCurrent(), UnitGetPosition(lp_unit)) == false)) {
                TextTagShow(TextTagLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TextTag
//--------------------------------------------------------------------------------------------------
void gf_TextTag (int lp_player, bool lp_queued) {
    // Variable Declarations
    int lv_index;
    unit lv_unit;
    // Variable Initialization
    // Implementation
    if (gv_tTCurrentIndex[lp_player] >= gv_tTQueueSize) {
        gv_tTCurrentIndex[lp_player] = 1;
    }
    else {
        gv_tTCurrentIndex[lp_player] = gv_tTCurrentIndex[lp_player] + 1;
    }
    lv_index = gv_tTCurrentIndex[lp_player];
    lv_unit = gv_tTUnit[lv_index][lp_player];
    TextTagCreate(gv_tTText[lv_index][lp_player], gv_tTSize[lv_index][lp_player], UnitGetPosition(gv_tTUnit[lv_index][lp_player]), 1.0, true, false, PlayerGroupSingle(lp_player));
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, gv_tTDuration[lv_index][lp_player]);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (gv_tTDuration[lv_index][lp_player] * 0.5));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (gv_tTDuration[lv_index][lp_player] * 0.5));
    UnitBehaviorAdd(lv_unit, "TextTagged", lv_unit, 1);
    gf_TextTagIndexWipe(lp_player, lv_index);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TextTagNextIndex
//--------------------------------------------------------------------------------------------------
int gf_TextTagNextIndex (int lp_player, int lp_currentIndex) {
    // Variable Declarations
    int lv_value;
    // Variable Initialization
    lv_value = lp_currentIndex;
    // Implementation
    lv_value += 1;
    if ((lv_value > gv_tTQueueSize)) {
        lv_value = 1;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TextTagIndexWipe
//--------------------------------------------------------------------------------------------------
void gf_TextTagIndexWipe (int lp_player, int lp_index) {
    // Implementation
    gv_tTUnit[lp_index][lp_player] = null;
    gv_tTPlayer[lp_index][lp_player] = -1;
    gv_tTText[lp_index][lp_player] = null;
    gv_tTDuration[lp_index][lp_player] = 0.0;
    gv_tTSize[lp_index][lp_player] = 0;
    gv_tTExists[lp_index][lp_player] = false;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Upyougo
//--------------------------------------------------------------------------------------------------
trigger auto_gf_Upyougo_Trigger = null;
unit auto_gf_Upyougo_lp_unit;
fixed auto_gf_Upyougo_lp_force;
void gf_Upyougo (unit lp_unit, fixed lp_force) {
    auto_gf_Upyougo_lp_unit = lp_unit;
    auto_gf_Upyougo_lp_force = lp_force;
    if (auto_gf_Upyougo_Trigger == null) {
        auto_gf_Upyougo_Trigger = TriggerCreate("auto_gf_Upyougo_TriggerFunc");
    }
    TriggerExecute(auto_gf_Upyougo_Trigger, false, false);
}
bool auto_gf_Upyougo_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Upyougo_lp_unit;
    fixed lp_force = auto_gf_Upyougo_lp_force;
    // Variable Declarations
    fixed lv_negForce;
    // Variable Initialization
    // Implementation
    if ((UnitGetHeight(lp_unit) == 0.0)) {
        UnitSetHeight(lp_unit, 0.1, 0.0);
        while (((UnitGetHeight(lp_unit) > 0.0) || (lv_negForce == 0.0))) {
            lv_negForce += 0.08;
            UnitSetHeight(lp_unit, (UnitGetHeight(lp_unit) + (lp_force - lv_negForce)), 0.0625);
            Wait(0.0625, c_timeGame);
        }
        if ((UnitGetHeight(lp_unit) != 0.0)) {
            UnitSetHeight(lp_unit, 0.0, 0.0625);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Charge
//--------------------------------------------------------------------------------------------------
trigger auto_gf_Charge_Trigger = null;
unit auto_gf_Charge_lp_unit;
point auto_gf_Charge_lp_target;
fixed auto_gf_Charge_lp_force;
void gf_Charge (unit lp_unit, point lp_target, fixed lp_force) {
    auto_gf_Charge_lp_unit = lp_unit;
    auto_gf_Charge_lp_target = lp_target;
    auto_gf_Charge_lp_force = lp_force;
    if (auto_gf_Charge_Trigger == null) {
        auto_gf_Charge_Trigger = TriggerCreate("auto_gf_Charge_TriggerFunc");
    }
    TriggerExecute(auto_gf_Charge_Trigger, false, false);
}
bool auto_gf_Charge_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Charge_lp_unit;
    point lp_target = auto_gf_Charge_lp_target;
    fixed lp_force = auto_gf_Charge_lp_force;
    // Variable Declarations
    point lv_startingPosition;
    fixed lv_distance;
    // Variable Initialization
    lv_startingPosition = UnitGetPosition(lp_unit);
    lv_distance = DistanceBetweenPoints(UnitGetPosition(lp_unit), lp_target);
    // Implementation
    libNtve_gf_MakeUnitFacePoint(lp_unit, lp_target, 0.0);
    if ((UnitGetType(lp_unit) == "MurlocChieftain")) {
        if ((UnitHasBehavior(lp_unit, "MurlocFrenzy") == true)) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "MurlocRushSetup", "Duration", UnitGetOwner(lp_unit), FixedToString(1.6, 1));
            UnitBehaviorAdd(lp_unit, "MurlocRushSetup", lp_unit, 1);
            Wait(1.6, c_timeGame);
        }
        else {
            CatalogFieldValueSet(c_gameCatalogBehavior, "MurlocRushSetup", "Duration", UnitGetOwner(lp_unit), FixedToString(1.9, 1));
            UnitBehaviorAdd(lp_unit, "MurlocRushSetup", lp_unit, 1);
            Wait(1.9, c_timeGame);
        }
        UnitBehaviorAdd(lp_unit, "MurlocRushTrample", lp_unit, 1);
    }
    if ((lp_unit != null) && (UnitIsAlive(lp_unit) == true)) {
        while ((lp_unit != null) && (UnitIsAlive(lp_unit) == true) && (DistanceBetweenPoints(lv_startingPosition, UnitGetPosition(lp_unit)) < lv_distance) && (PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(lp_unit), lp_force, AngleBetweenPoints(UnitGetPosition(lp_unit), lp_target))) == true)) {
            UnitSetPosition(lp_unit, PointWithOffsetPolar(UnitGetPosition(lp_unit), lp_force, AngleBetweenPoints(UnitGetPosition(lp_unit), lp_target)), true);
            Wait(0.0625, c_timeGame);
            if ((lp_unit != null) && (UnitIsAlive(lp_unit) == true)) {
            }
            else {
                break;
            }
        }
    }
    else {
    }
    if ((lp_unit != null) && (UnitIsAlive(lp_unit) == true) && (UnitGetType(lp_unit) == "MurlocChieftain")) {
        UnitCreateEffectUnit(lp_unit, "HuntKoboldsTrigger", lp_unit);
        UnitBehaviorRemove(lp_unit, "MurlocRushSetup", 1);
        UnitBehaviorRemove(lp_unit, "MurlocRushTrample", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetScaledStats
//--------------------------------------------------------------------------------------------------
void gf_SetScaledStats (string lp_unitType, int lp_player) {
    // Variable Declarations
    int lv_livingKobolds;
    fixed lv_avgRmnTeamSize;
    fixed lv_damageCoefficientNormal;
    fixed lv_lifeCoefficientNormal;
    fixed lv_damageCoefficientBoss;
    fixed lv_lifeCoefficientBoss;
    // Variable Initialization
    lv_livingKobolds = UnitGroupCount(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    lv_avgRmnTeamSize = gf_AverageRemainingTeamSize();
    lv_damageCoefficientNormal = 1.0;
    lv_lifeCoefficientNormal = 1.0;
    lv_damageCoefficientBoss = 1.0;
    lv_lifeCoefficientBoss = 1.0;
    // Implementation
    lv_lifeCoefficientNormal *= (lv_avgRmnTeamSize * 0.2);
    lv_damageCoefficientNormal *= (lv_avgRmnTeamSize * 0.2);
    lv_lifeCoefficientBoss *= (lv_avgRmnTeamSize * 0.2);
    lv_damageCoefficientBoss *= (lv_avgRmnTeamSize * 0.2);
    if ((lp_unitType == "MurlocSlave")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "Smash", "Amount", lp_player, FixedToString((10.0 + (gv_gameDuration / 360.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "MurlocSlave", "LifeMax", lp_player, FixedToString((80.0 + (gv_gameDuration / 45.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "MurlocSlave", "LifeStart", lp_player, FixedToString((80.0 + (gv_gameDuration / 45.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "MurlocSlave", "LifeRegenRate", lp_player, FixedToString((0.5 + (gv_gameDuration / 7200.0)), 2));
    }
    else if ((lp_unitType == "KingFurbeastIV")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "KingFurbeastIV", "LifeMax", lp_player, FixedToString(((280.0 + (gv_gameDuration / 5.0)) * lv_lifeCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "KingFurbeastIV", "LifeStart", lp_player, FixedToString(((280.0 + (gv_gameDuration / 5.0)) * lv_lifeCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "KingFurbeastIV", "LifeRegenRate", lp_player, FixedToString(((1.0 + (gv_gameDuration * 0.001)) * lv_lifeCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "KingFurbeastIV", "LifeArmor", lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
    }
    else if ((lp_unitType == "Ghoul")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "GhoulDamage", "Amount", lp_player, FixedToString(((6.0 + (gv_gameDuration * 0.005)) * 1.0), 1));
        CatalogFieldValueSet(c_gameCatalogUnit, "Ghoul", "LifeMax", lp_player, FixedToString(((25.0 + (gv_gameDuration * 0.015)) * 1.0), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Ghoul", "LifeStart", lp_player, FixedToString(((25.0 + (gv_gameDuration * 0.015)) * 1.0), 0));
    }
    else if ((lp_unitType == "Dog")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "WolfBiteDamage", "Amount", lp_player, FixedToString((10.0 + (gv_gameDuration / 180.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Dog", "LifeMax", lp_player, FixedToString((40.0 + (gv_gameDuration / 36.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Dog", "LifeStart", lp_player, FixedToString((40.0 + (gv_gameDuration / 36.0)), 0));
    }
    else if ((lp_unitType == "Lyote")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "DirewolfBiteDamage", "Amount", lp_player, FixedToString((15.0 + (gv_gameDuration / 120.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Lyote", "LifeMax", lp_player, FixedToString((50.0 + (gv_gameDuration / 30.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Lyote", "LifeStart", lp_player, FixedToString((50.0 + (gv_gameDuration / 30.0)), 0));
    }
    else if ((lp_unitType == "Bear")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "BearMaulDamage", "Amount", lp_player, FixedToString((20.0 + (gv_gameDuration / 90.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Bear", "LifeMax", lp_player, FixedToString((150.0 + (gv_gameDuration / 18.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Bear", "LifeStart", lp_player, FixedToString((150.0 + (gv_gameDuration / 18.0)), 0));
    }
    else if ((lp_unitType == "FrostBear")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostBearMaulDamage", "Amount", lp_player, FixedToString((40.0 + (gv_gameDuration / 90.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostBear", "LifeMax", lp_player, FixedToString((200.0 + (gv_gameDuration / 18.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostBear", "LifeStart", lp_player, FixedToString((200.0 + (gv_gameDuration / 18.0)), 0));
    }
    else if ((lp_unitType == "MapleTree")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "MapleTree", "LifeMax", lp_player, FixedToString((100.0 + (gv_gameDuration / 36.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "MapleTree", "LifeStart", lp_player, FixedToString((100.0 + (gv_gameDuration / 36.0)), 0));
    }
    else if ((lp_unitType == "ElderTree")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "ElderTree", "LifeMax", lp_player, FixedToString((750.0 + (gv_gameDuration / 7.2)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "ElderTree", "LifeStart", lp_player, FixedToString((750.0 + (gv_gameDuration / 7.2)), 0));
    }
    else if ((lp_unitType == "Stag")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "Stag", "LifeMax", lp_player, FixedToString((70.0 + (gv_gameDuration / 20.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Stag", "LifeStart", lp_player, FixedToString((70.0 + (gv_gameDuration / 20.0)), 0));
    }
    else if ((lp_unitType == "TheWoundedWizard")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "TheWoundedWizard", "LifeMax", lp_player, FixedToString(((500.0 + (gv_gameDuration * 0.2)) * lv_lifeCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "TheWoundedWizard", "LifeStart", lp_player, FixedToString(1.0, 0));
    }
    else if ((lp_unitType == "InfernalMinion")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "InfernalMinionDamage", "Amount", lp_player, FixedToString(((5.0 + (gv_gameDuration / 120.0)) * lv_damageCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "InfernalMinion", "LifeMax", lp_player, FixedToString(((100.0 + (gv_gameDuration / 20.0)) * lv_lifeCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "InfernalMinion", "LifeStart", lp_player, FixedToString(((100.0 + (gv_gameDuration / 20.0)) * lv_lifeCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "InfernalMinion", "Speed", lp_player, FixedToString(3.25, 0));
    }
    else if ((lp_unitType == "VeilGuardian")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "DeathBowDamage", "Amount", lp_player, FixedToString(((30.0 + (gv_gameDuration / 30.0)) * lv_damageCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "VeilGuardian", "LifeMax", lp_player, FixedToString((75.0 + (gv_gameDuration / 16.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "VeilGuardian", "LifeStart", lp_player, FixedToString((75.0 + (gv_gameDuration / 16.0)), 0));
    }
    else if ((lp_unitType == "UndeadSavage")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "SavageSwordDamage", "Amount", lp_player, FixedToString(((10.0 + (gv_gameDuration / 60.0)) * lv_damageCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "UndeadSavage", "LifeMax", lp_player, FixedToString(((50.0 + (gv_gameDuration / 12.0)) * lv_lifeCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "UndeadSavage", "LifeStart", lp_player, FixedToString(((50.0 + (gv_gameDuration / 12.0)) * lv_lifeCoefficientNormal), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "UndeadSavage", "LifeArmor", lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
    }
    else if ((lp_unitType == "MurlocMilitia")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "MurlocMilitiaJavelinDamage", "Amount", lp_player, FixedToString((15.0 + (gv_gameDuration / 144.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "MurlocMilitia", "LifeMax", lp_player, FixedToString((50.0 + (gv_gameDuration / 72.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "MurlocMilitia", "LifeStart", lp_player, FixedToString((50.0 + (gv_gameDuration / 72.0)), 0));
    }
    else if ((lp_unitType == "TombGuardian")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "FireballDamagePoint", "Amount", lp_player, FixedToString((50.0 + (gv_gameDuration / 36.0)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "FireballDamageUnit", "Amount", lp_player, FixedToString((50.0 + (gv_gameDuration / 36.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "TombGuardian", "LifeMax", lp_player, FixedToString((100.0 + (gv_gameDuration / 18.0)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "TombGuardian", "LifeStart", lp_player, FixedToString((100.0 + (gv_gameDuration / 18.0)), 0));
    }
    else if ((lp_unitType == "Monstrosity")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "Monstrosity", "LifeMax", lp_player, FixedToString((1000.0 + (gv_gameDuration / 1.8)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Monstrosity", "LifeStart", lp_player, FixedToString((1000.0 + (gv_gameDuration / 1.8)), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Monstrosity", "LifeRegenRate", lp_player, FixedToString((1.0 + (gv_gameDuration / 900.0)), 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "MonstrousFistsDamage", "Amount", lp_player, FixedToString((40.0 + (gv_gameDuration / 45.0)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "MonstrousFistsDamage", "AttributeBonus[Structure]", lp_player, FixedToString((40.0 + (gv_gameDuration / 45.0)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "AfflictionDamage", "Amount", lp_player, FixedToString((4.0 + (gv_gameDuration / 450.0)), 0));
    }
    else if ((lp_unitType == "MurlocChieftain")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "MurlocChieftain", "LifeMax", lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "MurlocChieftain", "LifeStart", lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "MurlocChieftain", "LifeArmor", lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "MurlocDoomhammerDamage", "Amount", lp_player, FixedToString((10.0 + (gv_gameDuration / 40.0)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "MurlocDoomhammerDamage", "AttributeBonus[Structure]", lp_player, FixedToString((10.0 + (gv_gameDuration / 40.0)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "MurlocRushTrampleDamage", "Amount", lp_player, FixedToString(((60.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "MurlocRushTrampleDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((60.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 0));
    }
    else if ((lp_unitType == "Zulrogg")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "Zulrogg", "LifeMax", lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Zulrogg", "LifeStart", lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "Zulrogg", "LifeArmor", lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "TrollBossDamage", "Amount", lp_player, FixedToString(((8.0 + (gv_gameDuration / 50.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "TrollBossDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((8.0 + (gv_gameDuration / 50.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "RotatingBladeDamage", "Amount", lp_player, FixedToString(((6.0 + (gv_gameDuration * 0.015)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "RotatingBladeDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((5.0 + (gv_gameDuration * 0.015)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "ShreddedDamage", "Amount", lp_player, FixedToString(((4.0 + (gv_gameDuration / 100.0)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "TrollGroundSpikeDamage", "Amount", lp_player, FixedToString(((20.0 + (gv_gameDuration / 20.0)) * lv_damageCoefficientBoss), 1));
    }
    else if ((lp_unitType == "FrostWitch")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostWitch", "LifeMax", lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostWitch", "LifeStart", lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "FrostWitch", "LifeArmor", lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostWitchDamage", "Amount", lp_player, FixedToString(((10.0 + (gv_gameDuration / 40.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "FrostWitchDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((10.0 + (gv_gameDuration / 40.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "PermafrostDamage", "Amount", lp_player, FixedToString(((8.0 + (gv_gameDuration / 50.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "PermafrostDamageSecondary", "Amount", lp_player, FixedToString(((8.0 + (gv_gameDuration / 50.0)) * lv_damageCoefficientBoss), 0));
    }
    else if ((lp_unitType == "DemonLordJaryx")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "DemonLordJaryx", "LifeMax", lp_player, FixedToString(((5600.0 + (gv_gameDuration * 4.0)) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "DemonLordJaryx", "LifeStart", lp_player, FixedToString(((5600.0 + (gv_gameDuration * 4.0)) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "DemonLordJaryx", "LifeArmor", lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "DemonLordJaryxAttackDamage", "Amount", lp_player, FixedToString(((10.0 + (gv_gameDuration / 90.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "DemonLordJaryxAttackDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((10.0 + (gv_gameDuration / 90.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "FirestormDamage", "Amount", lp_player, FixedToString(((10.0 + (gv_gameDuration / 120.0)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "FirestormDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((10.0 + (gv_gameDuration / 120.0)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "TetherDamage", "Amount", lp_player, FixedToString(((5.0 + (gv_gameDuration / 360.0)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "MoltenSphereDamage", "Amount", lp_player, FixedToString(((10.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogEffect, "MoltenSphereDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((10.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 1));
        CatalogFieldValueSet(c_gameCatalogUnit, "InfernalMinion", "LifeMax", lp_player, FixedToString(((120.0 + (gv_gameDuration / 20.0)) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "InfernalMinion", "LifeStart", lp_player, FixedToString(((120.0 + (gv_gameDuration / 20.0)) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "InfernalMinionDamage", "Amount", lp_player, FixedToString(((5.0 + (gv_gameDuration / 240.0)) * lv_damageCoefficientBoss), 0));
    }
    else if ((lp_unitType == "RagingArcaneBeast")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "RagingArcaneBeast", "LifeMax", lp_player, FixedToString(((12000.0 + (gv_gameDuration * 5.0)) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "RagingArcaneBeast", "LifeStart", lp_player, FixedToString(((12000.0 + (gv_gameDuration * 5.0)) * lv_lifeCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogUnit, "RagingArcaneBeast", "LifeArmor", lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "ArcanePulseDamage", "Amount", lp_player, FixedToString(((10.0 + (gv_gameDuration / 60.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "ArcanePulseDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((10.0 + (gv_gameDuration / 60.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "ArcaneEruptionDamage", "Amount", lp_player, FixedToString(((40.0 + (gv_gameDuration / 10.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "ArcaneEruptionDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((40.0 + (gv_gameDuration / 10.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "LightningCloudDamage", "Amount", lp_player, FixedToString(((5.0 + (gv_gameDuration / 240.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "LightningCloudDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((5.0 + (gv_gameDuration / 240.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "LightningCloudDamage", "AttributeBonus[Armored]", lp_player, FixedToString(((5.0 + (gv_gameDuration / 240.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "AnnihilateDamage", "Amount", lp_player, FixedToString(((10.0 + (gv_gameDuration / 90.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "AnnihilateDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((10.0 + (gv_gameDuration / 90.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "EmpoweredLightningDamage", "Amount", lp_player, FixedToString(((12.0 + (gv_gameDuration / 200.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "EmpoweredLightningDamage", "AttributeBonus[Structure]", lp_player, FixedToString(((12.0 + (gv_gameDuration / 200.0)) * lv_damageCoefficientBoss), 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "UnstableAnomalyZapDamage", "Amount", lp_player, FixedToString(((60.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 0));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AverageRemainingTeamSize
//--------------------------------------------------------------------------------------------------
fixed gf_AverageRemainingTeamSize () {
    int autoE61F678D_ae;
    int autoE61F678D_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    fixed lv_value;
    // Variable Initialization
    // Implementation
    autoE61F678D_ae = gv_maxTeams;
    autoE61F678D_ai = 1;
    lv_a = 1;
    for ( ; ( (autoE61F678D_ai >= 0 && lv_a <= autoE61F678D_ae) || (autoE61F678D_ai <= 0 && lv_a >= autoE61F678D_ae) ) ; lv_a += autoE61F678D_ai ) {
        if ((PlayerGroupCount(gv_teamData[lv_a].lv_members) > 0) && (gv_teamData[lv_a].lv_allDead == false)) {
            lv_value += IntToFixed(PlayerGroupCount(gv_teamData[lv_a].lv_members));
            lv_b += 1;
        }
        else {
        }
    }
    if ((lv_b != 0)) {
        lv_value /= lv_b;
    }
    else {
        lv_value = 1.0;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WeightedCenterofKobolds
//--------------------------------------------------------------------------------------------------
point gf_WeightedCenterofKobolds () {
    int autoECBDE876_ae;
    int autoECBDE876_ai;
    // Variable Declarations
    int lv_a;
    unitgroup lv_t;
    point lv_p;
    int lv_d;
    fixed lv_sumX;
    fixed lv_sumY;
    point lv_value;
    // Variable Initialization
    lv_t = UnitGroupEmpty();
    lv_value = gv_center;
    // Implementation
    autoECBDE876_ae = gv_activeTeams;
    autoECBDE876_ai = 1;
    lv_a = 1;
    for ( ; ( (autoECBDE876_ai >= 0 && lv_a <= autoECBDE876_ae) || (autoECBDE876_ai <= 0 && lv_a >= autoECBDE876_ae) ) ; lv_a += autoECBDE876_ai ) {
        if ((gv_teamData[lv_a].lv_koboldsAlive > 0)) {
            PlayerGroupLoopBegin(gv_teamData[lv_a].lv_members);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold)) {
                    UnitGroupAdd(lv_t, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
                }
                else {
                }
            }
            PlayerGroupLoopEnd();
            if ((UnitGroupCount(lv_t, c_unitCountAlive) > 0)) {
                lv_d += 1;
                lv_p = UnitGroupCenterOfGroup(lv_t);
                lv_sumX += PointGetX(lv_p);
                lv_sumY += PointGetY(lv_p);
                UnitGroupClear(lv_t);
            }
            else {
            }
        }
        else {
        }
    }
    if ((lv_d > 0)) {
        lv_value = Point((lv_sumX / lv_d), (lv_sumY / lv_d));
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnitIsBusy
//--------------------------------------------------------------------------------------------------
bool gf_UnitIsBusy (unit lp_unit) {
    // Variable Declarations
    bool lv_value;
    // Variable Initialization
    lv_value = true;
    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/A0E3E05A"), false);
    if (gf_UnitExists(lp_unit)) {
        TextExpressionSetToken("Param/Expression/D4AEA969", "A", StringExternal("Param/Value/3AC9CC1D"));
        TextExpressionSetToken("Param/Expression/D4AEA969", "B", UnitTypeGetName(UnitGetType(lp_unit)));
        TextExpressionSetToken("Param/Expression/D4AEA969", "C", StringExternal("Param/Value/C061BF66"));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/D4AEA969"), false);
        if ((UnitHasBehavior(lp_unit, "MiningStoneSmart") == false) && (UnitHasBehavior(lp_unit, "MiningGoldSmart") == false) && (UnitHasBehavior(lp_unit, "PickingBerriesSmart") == false) && (UnitHasBehavior(lp_unit, "PickingHerbsSmart") == false) && (UnitHasBehavior(lp_unit, "UnlockingChestSmart") == false) && (UnitHasBehavior(lp_unit, "SleepingBag") == false) && (UnitHasBehavior(lp_unit, "Unconscious") == false) && (UnitHasBehavior(lp_unit, "Cooking") == false) && (UnitHasBehavior(lp_unit, "Crafting") == false) && (UnitHasBehavior(lp_unit, "Fishing") == false) && (UnitHasBehavior(lp_unit, "Resurrecting") == false) && (UnitHasBehavior(lp_unit, "MysteriousArcaneRitual") == false)) {
            lv_value = false;
        }
        else {
            lv_value = true;
        }
    }
    else {
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/10114F0A"), false);
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnitExists
//--------------------------------------------------------------------------------------------------
bool gf_UnitExists (unit lp_unit) {
    // Variable Declarations
    bool lv_value;
    // Variable Initialization
    // Implementation
    if ((lp_unit != null)) {
        if ((UnitIsAlive(lp_unit) == true)) {
            lv_value = true;
        }
        else {
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ResumeSituationalMusic
//--------------------------------------------------------------------------------------------------
void gf_ResumeSituationalMusic (int lp_player) {
    // Implementation
    if (((gv_questIndexActive == 1) || (gv_questIndexActive == 8))) {
        SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, "KoboldMusicBoss", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else if ((gv_questIndexActive == 7)) {
        SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, "KoboldMusicGloom", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else if ((gv_questIndexActive == 10)) {
        SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, "KoboldMusicWinter", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else if ((gv_questIndexActive == 11)) {
        SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, "KoboldMusicPirate", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else if ((gv_questIndexActive == 15)) {
        SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, "KoboldMusicCrypt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else if (true) {
        SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITaunt
//--------------------------------------------------------------------------------------------------
trigger auto_gf_AITaunt_Trigger = null;
unit auto_gf_AITaunt_lp_unit;
void gf_AITaunt (unit lp_unit) {
    auto_gf_AITaunt_lp_unit = lp_unit;
    if (auto_gf_AITaunt_Trigger == null) {
        auto_gf_AITaunt_Trigger = TriggerCreate("auto_gf_AITaunt_TriggerFunc");
    }
    TriggerExecute(auto_gf_AITaunt_Trigger, false, false);
}
bool auto_gf_AITaunt_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_AITaunt_lp_unit;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if (gf_UnitExists(lp_unit) && (UnitHasBehavior(lp_unit, "KoboldBotNormal") == true) && (libNtve_gf_RandomPercent() <= 50.0)) {
        Wait(RandomFixed(2.0, 5.0), c_timeGame);
        if (gf_UnitExists(lp_unit) && (gv_gameOver == false) && (UnitHasBehavior(lp_unit, "SkipChatTaunt30") == false)) {
            TextExpressionSetToken("Param/Expression/D73A2F50", "A", gf_GetPlayerName(lv_i, 0));
            TextExpressionSetToken("Param/Expression/D73A2F50", "B", StringExternal("Param/Value/131C8373"));
            TextExpressionSetToken("Param/Expression/CC272CE2", "A", StringExternal("Param/Value/79467263"));
            TextExpressionSetToken("Param/Expression/CC272CE2", "B", TextWithColor(TextExpressionAssemble("Param/Expression/D73A2F50"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            TextExpressionSetToken("Param/Expression/CC272CE2", "C", StringToText(gv_aITauntString[RandomInt(1, gv_aITauntStringAmount)]));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupEnemy, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/CC272CE2"));
            UnitBehaviorAdd(lp_unit, "SkipChatTaunt30", lp_unit, 1);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIDeadnightChat
//--------------------------------------------------------------------------------------------------
trigger auto_gf_AIDeadnightChat_Trigger = null;
unit auto_gf_AIDeadnightChat_lp_unit;
void gf_AIDeadnightChat (unit lp_unit) {
    auto_gf_AIDeadnightChat_lp_unit = lp_unit;
    if (auto_gf_AIDeadnightChat_Trigger == null) {
        auto_gf_AIDeadnightChat_Trigger = TriggerCreate("auto_gf_AIDeadnightChat_TriggerFunc");
    }
    TriggerExecute(auto_gf_AIDeadnightChat_Trigger, false, false);
}
bool auto_gf_AIDeadnightChat_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_AIDeadnightChat_lp_unit;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    Wait(RandomFixed(4.0, 6.0), c_timeGame);
    if (gf_UnitExists(lp_unit) && (UnitHasBehavior(lp_unit, "SkipChatQuest120") == false)) {
        TextExpressionSetToken("Param/Expression/9978FCE2", "A", gf_GetPlayerName(lv_i, 0));
        TextExpressionSetToken("Param/Expression/9978FCE2", "B", StringExternal("Param/Value/7DCE36C6"));
        TextExpressionSetToken("Param/Expression/8C61BEDB", "A", StringExternal("Param/Value/F6F60766"));
        TextExpressionSetToken("Param/Expression/8C61BEDB", "B", TextWithColor(TextExpressionAssemble("Param/Expression/9978FCE2"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
        TextExpressionSetToken("Param/Expression/8C61BEDB", "C", StringToText(gv_aIQuestDeadnightString[RandomInt(1, gv_aIQuestDeadnightStringAmount)]));
        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/8C61BEDB"));
        UnitBehaviorAdd(lp_unit, "SkipChatQuest120", lp_unit, 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupAI
//--------------------------------------------------------------------------------------------------
void gf_SetupAI (unit lp_unit) {
    int auto02E159D7_ae;
    int auto02E159D7_ai;
    // Variable Declarations
    int lv_a;
    int lv_i;
    int lv_b;
    string lv_s;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_s = "";
    // Implementation
    if (((gv_aIFFATestingOverride == true) || (PlayerType(lv_i) == c_playerTypeComputer) || (PlayerStatus(lv_i) == c_playerStatusLeft))) {
        gv_playerData[lv_i].lv_isAI = true;
        UnitSetCustomValue(lp_unit, 5, 1.0);
        gf_SetAIName(lv_i);
        UnitBehaviorAdd(lp_unit, "KoboldBotInitialDelay", lp_unit, 1);
        auto02E159D7_ae = gv_players;
        auto02E159D7_ai = 1;
        lv_a = 1;
        for ( ; ( (auto02E159D7_ai >= 0 && lv_a <= auto02E159D7_ae) || (auto02E159D7_ai <= 0 && lv_a >= auto02E159D7_ae) ) ; lv_a += auto02E159D7_ai ) {
            if ((PlayerType(lv_a) == c_playerTypeUser) && (libNtve_gf_PlayerIsEnemy(lv_i, lv_a, 0) == true)) {
                PlayerSetAlliance(lv_i, c_allianceIdControl, lv_a, true);
            }
            else {
            }
        }
        gf_UpdateSkillButton(lv_i);
        gv_perks[lv_i] = gf_AIPerks(lv_i, gv_averagePlayerLevel);
        gv_aIData[lv_i].lv_difficultyRating = libNtve_gf_ArithmeticRealClamp((gv_averagePlayerLevel * 5.0), 1.0, 100.0);
        gf_AICustomization(lv_i);
        gf_AISpendSkillPoints(lv_i);
        if ((GameGetMissionTime() <= 30.0) && (gv_activeTeams == 2)) {
            gv_aIData[lv_i].lv_explorerAngle = (AngleBetweenPoints(UnitGetPosition(gv_playerData[lv_i].lv_kobold), RegionGetCenter(RegionPlayableMap())) + RandomFixed(-45.0, 45.0));
            TimerStart(gv_aIData[lv_i].lv_explorerTimer, RandomFixed(15.0, 30.0), false, c_timeGame);
        }
        else {
        }
        gv_aIData[lv_i].lv_weightedPOI = gv_center;
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIEquipment
//--------------------------------------------------------------------------------------------------
bool gf_AIEquipment (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unit lv_b;
    int lv_a;
    unitgroup lv_loot;
    string lv_itemTypeID;
    int lv_levelMainHand;
    int lv_levelOffhand;
    int lv_levelArmor;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_loot = UnitGroupEmpty();
    lv_itemTypeID = "";
    lv_levelMainHand = gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(lp_kobold)), lv_i);
    lv_levelOffhand = gf_GetItemLevel(UnitGetType(gf_KoboldOffhand(lp_kobold)), lv_i);
    lv_levelArmor = gf_GetItemLevel(UnitGetType(gf_KoboldArmor(lp_kobold)), lv_i);
    // Implementation
    lv_loot = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_loot, UnitGroupFilter(null, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    lv_b = UnitGroupClosestToPoint(UnitGroupFilterAlliance(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("StorageOutpost", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_aIData[lv_i].lv_tradeRoamRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1, 0.0), lv_i, c_unitAllianceAlly, 0), UnitGetPosition(lp_kobold));
    if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
        UnitGroupAddUnitGroup(lv_loot, UnitGroupFilter(null, c_playerAny, UnitInventoryGroup(lv_b), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    }
    else {
    }
    UnitGroupRemove(lv_loot, gf_KoboldMainHand(lp_kobold));
    UnitGroupRemove(lv_loot, gf_KoboldOffhand(lp_kobold));
    UnitGroupRemove(lv_loot, gf_KoboldArmor(lp_kobold));
    UnitGroupLoopBegin(lv_loot);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_itemTypeID = (UnitGetType(UnitGroupLoopCurrent()));
        if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lv_i) != "MainHand") && (CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lv_i) != "Offhand") && (CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lv_i) != "Armor")) {
            UnitGroupRemove(lv_loot, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_loot);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_itemTypeID = (UnitGetType(UnitGroupLoopCurrent()));
        if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lv_i) == "MainHand") && (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) > lv_levelMainHand)) {
            lv_success = true;
            if ((UnitInventoryUnit(UnitGroupLoopCurrent()) == UnitGroupLoopCurrent())) {
                if (gf_UnitExists(gf_KoboldMainHand(lp_kobold))) {
                    UnitSetPosition(gf_KoboldMainHand(lp_kobold), UnitGetPosition(lp_kobold), false);
                }
                else {
                }
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueReplace);
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gf_KoboldMainHand(lp_kobold)), c_orderQueueAddToEnd);
            }
            else {
                if ((UnitGetType(UnitInventoryUnit(UnitGroupLoopCurrent())) == "StorageOutpost") && gf_AITradeBuyWithdraw(lp_kobold, UnitGetType(UnitGroupLoopCurrent()), 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lp_kobold), false);
                }
            }
            break;
        }
        else {
            if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lv_i) == "Offhand") && (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) > lv_levelOffhand)) {
                lv_success = true;
                if ((UnitInventoryUnit(UnitGroupLoopCurrent()) == UnitGroupLoopCurrent())) {
                    if (gf_UnitExists(gf_KoboldOffhand(lp_kobold))) {
                        UnitSetPosition(gf_KoboldOffhand(lp_kobold), UnitGetPosition(lp_kobold), false);
                    }
                    else {
                    }
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueReplace);
                    if ((UnitGetType(gf_KoboldOffhand(lp_kobold)) != "Torch")) {
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gf_KoboldOffhand(lp_kobold)), c_orderQueueAddToEnd);
                    }
                    else {
                    }
                }
                else {
                    if ((UnitGetType(UnitInventoryUnit(UnitGroupLoopCurrent())) == "StorageOutpost") && gf_AITradeBuyWithdraw(lp_kobold, UnitGetType(UnitGroupLoopCurrent()), 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lp_kobold), false);
                    }
                }
                break;
            }
            else {
                if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, "Class", lv_i) == "Armor") && (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) > lv_levelArmor)) {
                    lv_success = true;
                    if ((UnitInventoryUnit(UnitGroupLoopCurrent()) == UnitGroupLoopCurrent())) {
                        if (gf_UnitExists(gf_KoboldArmor(lp_kobold))) {
                            UnitSetPosition(gf_KoboldArmor(lp_kobold), UnitGetPosition(lp_kobold), false);
                        }
                        else {
                        }
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueReplace);
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gf_KoboldArmor(lp_kobold)), c_orderQueueAddToEnd);
                    }
                    else {
                        if ((UnitGetType(UnitInventoryUnit(UnitGroupLoopCurrent())) == "StorageOutpost") && gf_AITradeBuyWithdraw(lp_kobold, UnitGetType(UnitGroupLoopCurrent()), 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                        }
                        else {
                            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lp_kobold), false);
                        }
                    }
                    break;
                }
                else {
                }
            }
        }
    }
    UnitGroupLoopEnd();
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIRunWalk
//--------------------------------------------------------------------------------------------------
void gf_AIRunWalk (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    fixed lv_walkLimit;
    fixed lv_runLimit;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_walkLimit = 5.0;
    lv_runLimit = 8.0;
    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/88138A93"), false);
    if ((UnitHasBehavior(lp_kobold, "Affliction") == true)) {
        lv_walkLimit += 10.0;
        lv_runLimit += 10.0;
    }
    else {
    }
    if ((gv_playerData[lv_i].lv_stamina <= lv_walkLimit) && (UnitHasBehavior(lp_kobold, "Running") == true)) {
        UnitIssueOrder(lp_kobold, Order(AbilityCommand("Run", 1)), c_orderQueueReplace);
    }
    else if ((gv_playerData[lv_i].lv_stamina > lv_runLimit) && (UnitHasBehavior(lp_kobold, "Running") == false) && (UnitAbilityCheck(lp_kobold, "Run", true) == true)) {
        UnitIssueOrder(lp_kobold, Order(AbilityCommand("Run", 0)), c_orderQueueReplace);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIRetreat
//--------------------------------------------------------------------------------------------------
bool gf_AIRetreat (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_enemies;
    unitgroup lv_enemiesKoboldsExclusive;
    fixed lv_enemiesThreat;
    unitgroup lv_allies;
    fixed lv_alliesThreat;
    point lv_point;
    unitgroup lv_food;
    unitgroup lv_g;
    unit lv_a;
    unit lv_b;
    int lv_spellVariation;
    bool lv_onlybears;
    bool lv_onlyStructuresNoADTs;
    bool lv_includingKoboldPetorBoss;
    fixed lv_d;
    region lv_spellbladeRegion;
    unitgroup lv_fleeingBuddies;
    fixed lv_retreatAngle;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_enemies = gf_GetEnemiesNearPoint(UnitGetPosition(lp_kobold), lv_i, gv_playerData[lv_i].lv_stats.lv_sightRadius, false);
    lv_enemiesKoboldsExclusive = UnitGroupEmpty();
    lv_allies = gf_GetAlliesNearPoint(UnitGetPosition(lp_kobold), lv_i, gv_playerData[lv_i].lv_stats.lv_sightRadius);
    lv_food = UnitGroupEmpty();
    lv_g = UnitGroupEmpty();
    lv_onlybears = true;
    lv_onlyStructuresNoADTs = true;
    lv_fleeingBuddies = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    UnitGroupLoopBegin(lv_enemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectUnit(lp_kobold, "AIHelperEnemyTriggerStart5", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(lv_enemies, gv_aIData[lv_i].lv_enemies);
    UnitGroupLoopBegin(lv_enemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_enemiesThreat += gf_EvaluateThreat(UnitGroupLoopCurrent());
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Kobold") || (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "Tamed") == true))) {
            lv_includingKoboldPetorBoss = true;
        }
        else {
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Kobold")) {
            UnitGroupAdd(lv_enemiesKoboldsExclusive, UnitGroupLoopCurrent());
        }
        else {
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Bear")) {
            lv_onlybears = false;
        }
        else {
        }
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Fortress") || (UnitGetType(UnitGroupLoopCurrent()) == "AutomatedDefenseTurret") || (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false))) {
            lv_onlyStructuresNoADTs = false;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_allies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_alliesThreat += gf_EvaluateThreat(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((UnitGroupHasUnit(lv_allies, gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTower) == true)) {
        lv_alliesThreat *= 2.0;
    }
    else {
    }
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) > 0) && (libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == false) && (!(((gv_playerData[lv_i].lv_stamina <= 5.0) && (UnitGroupCount(UnitGroupFilter("Kobold", c_playerAny, lv_enemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupFilter("Kobold", c_playerAny, lv_allies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (UnitHasBehavior(UnitGroupClosestToPoint(UnitGroupFilter("Kobold", c_playerAny, lv_enemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold)), "Running") == true) && ((gf_RangedWeapon(lp_kobold) == true) || (gf_RangedWeapon(UnitGroupClosestToPoint(UnitGroupFilter("Kobold", c_playerAny, lv_enemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold))) == false))))) && ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Ghoul", "UndeadSavage", "", lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 8) || (lv_alliesThreat < (lv_enemiesThreat * gv_errorEstimationFactor)) || ((gf_GroupStamina(lv_allies) < (gf_GroupStamina(lv_enemies) * gv_errorEstimationFactor)) && ((lv_alliesThreat * 1.25) <= lv_enemiesThreat)) || ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) <= gf_MinimumRetreatLife(lp_kobold)) && (lv_onlyStructuresNoADTs == false)) || ((lv_includingKoboldPetorBoss == true) && (gv_dayNight == 2) && (UnitGetType(gf_KoboldOffhand(lp_kobold)) != "Torch") && (UnitGetType(gf_KoboldOffhand(lp_kobold)) != "Lantern") && (UnitGetType(gf_KoboldOffhand(lp_kobold)) != "FelFireTorch") && (UnitHasBehavior(lp_kobold, "Heat") == false)))) {
        if ((UnitHasBehavior(lp_kobold, "CrabShipment") == true)) {
            UnitSetPosition(gv_shipment, UnitGetPosition(lp_kobold), false);
        }
        else {
        }
        lv_a = UnitGroupClosestToPoint(lv_enemies, UnitGetPosition(lp_kobold));
        gv_aIData[lv_i].lv_focalNode = lv_a;
        lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpikeTrap", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b) && (DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lp_kobold)) <= DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lv_b))) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) <= DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lv_b)))) {
            lv_retreatAngle = AngleBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b));
        }
        else {
            lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("AutomatedDefenseTurret", "Fortress", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), (gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && (UnitWeaponIsEnabled(lv_b, 1) == true) && (libNtve_gf_UnitIsUnderConstruction(lv_b) == false) && (DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lp_kobold)) <= DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lv_b))) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) <= DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lv_b)))) {
                UnitIssueOrder(lv_b, OrderTargetingUnit(AbilityCommand("attack", 0), lv_a), c_orderQueueReplace);
                lv_retreatAngle = AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lv_b));
            }
            else {
                if ((UnitGroupCount(lv_enemiesKoboldsExclusive, c_unitCountAlive) > 0)) {
                    lv_fleeingBuddies = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_aIStatusIndex, 2.0);
                    UnitGroupAddUnitGroup(lv_enemiesKoboldsExclusive, lv_fleeingBuddies);
                    lv_retreatAngle = AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemiesKoboldsExclusive), UnitGetPosition(lp_kobold));
                }
                else {
                    lv_retreatAngle = AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_kobold));
                }
            }
        }
        lv_point = gf_SmartRetreatPoint(lp_kobold, lv_retreatAngle);
        if ((lv_point != null)) {
            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
            gv_aIData[lv_i].lv_weightedPOI = gf_RandomPathablePoint(RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_kobold), (DistanceBetweenPoints(UnitGetPosition(lp_kobold), lv_point) * 3.0), lv_point), 4.0));
            if ((UnitHasBehavior(lp_kobold, "LiquidatorSpellbladeActive") == true)) {
                lv_spellbladeRegion = RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_kobold), 5.0, lv_point), 5.0);
                RegionAddCircle(lv_spellbladeRegion, false, UnitGetPosition(lp_kobold), 5.0);
                lv_a = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, lv_spellbladeRegion, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_a) && (UnitCanAttackTarget(lp_kobold, lv_a) == true) && (libNtve_gf_PlayerIsEnemy(lv_i, UnitGetOwner(lv_a), 0) == false)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_a), c_orderQueueReplace);
                }
                else {
                }
            }
            else {
            }
            UnitIssueOrder(lp_kobold, Order(AbilityCommand("KoboldTestBuild", 30)), c_orderQueueAddToFront);
        }
        else {
        }
        if (((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) < 70.0) || (UnitHasBehavior(lp_kobold, "Starving") == true)) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) > 0) && (UnitHasBehavior(lp_kobold, "KoboldCanEat") == true)) {
            UnitIssueOrder(lp_kobold, Order(AbilityCommand("Eatasnack", 0)), c_orderQueueReplace);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupAlliance(lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && gf_AICanCastSpell(lp_kobold, AbilityCommand("ShadowCloak", 0))) {
            UnitIssueOrder(lp_kobold, Order(AbilityCommand("ShadowCloak", 0)), c_orderQueueReplace);
        }
        else if (gf_AICanCastSpell(lp_kobold, AbilityCommand("Affliction", 0))) {
            lv_b = UnitGroupClosestToPoint(gf_UnitsInUnitGroupWithoutBuff(lv_enemies, "Affliction"), UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b)) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("Affliction", 0), lv_b), c_orderQueueReplace);
            }
            else {
            }
        }
        else if ((UnitHasBehavior(lp_kobold, "GoldenHauberk") == true) && (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, "GoldenHauberkHeal", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_i)) == 0.0) && ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) || (UnitGroupCount(gf_UnitsInUnitGroupWithLife(UnitGroupAlliance(lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GoldenHauberkHealSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_i))), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), 25.0), c_unitCountAlive) > 0))) {
            UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand("KoboldBackpack", 3), gf_KoboldArmor(lp_kobold)), c_orderQueueReplace);
        }
        else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_consumables, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand("KoboldBackpack", 3), UnitGroupRandomUnit(gv_playerData[lv_i].lv_resources.lv_consumables, c_unitCountAlive)), c_orderQueueReplace);
        }
        if (gf_AIQuickwarmth(lp_kobold)) {
        }
        else {
            if ((gv_playerData[lv_i].lv_stamina <= 10.0) && (UnitHasBehavior(lp_kobold, "Resting") == false) && gf_HasMaterialsFor(lp_kobold, "Tent") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 0), null)) {
            }
            else {
                if (gf_AIQuicktree(lp_kobold)) {
                }
                else {
                    if (gf_AIQuickstone(lp_kobold)) {
                    }
                    else {
                        if (gf_AIQuickammo(lp_kobold, true)) {
                        }
                        else {
                        }
                    }
                }
            }
        }
        if ((lv_includingKoboldPetorBoss == true) && (libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == false)) {
            UnitSetCustomValue(lp_kobold, gv_aIStatusIndex, IntToFixed(2));
            UnitBehaviorAdd(lp_kobold, "AIRecentCombat", lp_kobold, 1);
        }
        else {
        }
        if ((UnitHasBehavior(lp_kobold, "SkipChatRetreat60") == false)) {
            TextExpressionSetToken("Param/Expression/E1ED5808", "A", gf_GetPlayerName(lv_i, 0));
            TextExpressionSetToken("Param/Expression/E1ED5808", "B", StringExternal("Param/Value/4EBE1B53"));
            TextExpressionSetToken("Param/Expression/5B491372", "A", StringExternal("Param/Value/38937256"));
            TextExpressionSetToken("Param/Expression/5B491372", "B", TextWithColor(TextExpressionAssemble("Param/Expression/E1ED5808"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            TextExpressionSetToken("Param/Expression/5B491372", "C", StringToText(gv_aIRetreatString[RandomInt(1, gv_aIRetreatStringAmount)]));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/5B491372"));
            UnitBehaviorAdd(lp_kobold, "SkipChatRetreat60", lp_kobold, 1);
        }
        else {
        }
        gv_aIData[lv_i].lv_lastCombatState = 2;
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AICombat
//--------------------------------------------------------------------------------------------------
bool gf_AICombat (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_enemies;
    fixed lv_enemyThreat;
    unitgroup lv_allies;
    fixed lv_alliesThreat;
    point lv_point;
    unit lv_target;
    unit lv_a;
    unit lv_b;
    int lv_spellVariation;
    unitgroup lv_nearbyActiveAlliedSpikeTraps;
    bool lv_onlyBears;
    bool lv_onlyStructures;
    bool lv_onlyGhoulsorSavages;
    bool lv_includingKoboldPetorBoss;
    point lv_p;
    unitgroup lv_executableFoes;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_enemies = gf_GetEnemiesNearPoint(UnitGetPosition(lp_kobold), lv_i, gv_playerData[lv_i].lv_stats.lv_sightRadius, true);
    lv_allies = gf_GetAlliesNearPoint(UnitGetPosition(lp_kobold), lv_i, gv_playerData[lv_i].lv_stats.lv_sightRadius);
    lv_nearbyActiveAlliedSpikeTraps = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpikeTrap", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_onlyBears = true;
    lv_onlyStructures = true;
    lv_onlyGhoulsorSavages = true;
    lv_executableFoes = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    UnitGroupLoopBegin(lv_enemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectUnit(lp_kobold, "AIHelperEnemyTriggerStart5", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(lv_enemies, gv_aIData[lv_i].lv_enemies);
    UnitGroupLoopBegin(lv_enemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_enemyThreat += gf_EvaluateThreat(UnitGroupLoopCurrent());
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Kobold") || (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "Tamed") == true))) {
            lv_includingKoboldPetorBoss = true;
        }
        else {
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Bear") && (UnitGetType(UnitGroupLoopCurrent()) != "FrostBear")) {
            lv_onlyBears = false;
        }
        else {
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Ghoul") && (UnitGetType(UnitGroupLoopCurrent()) != "UndeadSavage")) {
            lv_onlyGhoulsorSavages = false;
        }
        else {
        }
        if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false)) {
            lv_onlyStructures = false;
        }
        else {
        }
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) <= 30.0) && ((UnitGetType(UnitGroupLoopCurrent()) == "Kobold") || (UnitHasBehavior(lp_kobold, "Tamed") == true))) {
            UnitGroupAdd(lv_executableFoes, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_allies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_alliesThreat += gf_EvaluateThreat(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((UnitGroupHasUnit(lv_allies, gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTower) == true)) {
        lv_alliesThreat *= 2.0;
    }
    else {
    }
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) > 0) && ((lv_onlyStructures == false) || (UnitGroupCount(gf_GetNearbyDirewolves(lp_kobold), c_unitCountAlive) == 0)) && ((libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == true) || ((gv_playerData[lv_i].lv_stamina <= 5.0) && (UnitGroupCount(UnitGroupFilter("Kobold", c_playerAny, lv_enemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupFilter("Kobold", c_playerAny, lv_allies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && ((gf_RangedWeapon(lp_kobold) == true) || (gf_RangedWeapon(UnitGroupClosestToPoint(UnitGroupFilter("Kobold", c_playerAny, lv_enemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold))) == false))) || (((lv_enemyThreat * gv_errorEstimationFactor) <= lv_alliesThreat) && ((gv_playerData[lv_i].lv_stamina >= 50.0) || ((lv_enemyThreat * 1.5) <= lv_alliesThreat) || ((gf_GroupStamina(lv_enemies) * gv_errorEstimationFactor) <= gf_GroupStamina(lv_allies))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) > gf_MinimumRetreatLife(lp_kobold))))) {
        gv_aIData[lv_i].lv_weightedPOI = UnitGroupCenterOfGroup(lv_enemies);
        if ((gv_playerData[lv_i].lv_stamina <= 15.0) && (UnitHasBehavior(lp_kobold, "Resting") == false) && gf_HasMaterialsFor(lp_kobold, "Tent") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 0), null)) {
        }
        else {
            if (gf_AIQuickwarmth(lp_kobold)) {
            }
            else {
                if ((gv_questIndexActive == 3) && (lp_kobold == UnitInventoryUnit(gv_shipment)) && (UnitGroupCount(lv_allies, c_unitCountAlive) > (1 + UnitGroupCount(gv_pets[lv_i], c_unitCountAlive)))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_merchant)), c_orderQueueReplace);
                }
                else {
                    if (gf_AIDodgeBossAbilities(lp_kobold)) {
                    }
                    else {
                        if ((gv_questIndexActive == 7) && (UnitHasBehavior(lp_kobold, "BoneTalisman") == false) && gf_FindPickupItem(lp_kobold, "BoneTalisman")) {
                        }
                        else {
                            if (gf_AIQuicktree(lp_kobold)) {
                            }
                            else {
                                if (gf_AIQuickstone(lp_kobold)) {
                                }
                                else {
                                    if (gf_AIQuickammo(lp_kobold, false)) {
                                    }
                                    else {
                                        lv_point = UnitGroupCenterOfGroup(lv_enemies);
                                        lv_target = gf_GetEnemyTarget(lp_kobold, lv_enemies);
                                        gv_aIData[lv_i].lv_focalNode = lv_target;
                                        if ((UnitGetType(lv_target) == "Campfire")) {
                                            UnitSetOwner(lv_target, lv_i, false);
                                            UnitSetInfoText(lv_target, StringExternal("Param/Value/0542D33F"), gf_GetPlayerName(lv_i, 0), StringExternal("Param/Value/F525E82C"));
                                        }
                                        else {
                                            if ((UnitTestState(lv_target, c_unitStateCloaked) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_target, lv_i) == false) && gf_AICanCastSpell(lp_kobold, AbilityCommand("Clairvoyance", 0))) {
                                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("Clairvoyance", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
                                            }
                                            else {
                                                if (gf_RangedWeapon(lp_kobold) && (gf_AttackCooldown(lp_kobold) > 0.5) && (UnitHasBehavior(lv_target, "ArcaneEruption") == false) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_target)) < (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, (UnitWeaponGet(lp_kobold, 1)), "Range", lv_i)) * 0.8))) {
                                                    lv_b = UnitGroupClosestToPoint(lv_nearbyActiveAlliedSpikeTraps, UnitGetPosition(lp_kobold));
                                                    if (gf_UnitExists(lv_b) && (DistanceBetweenPoints(UnitGetPosition(lv_target), UnitGetPosition(lp_kobold)) < DistanceBetweenPoints(UnitGetPosition(lv_target), UnitGetPosition(lv_b)))) {
                                                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_kobold), (UnitGetPropertyFixed(lp_kobold, c_unitPropMovementSpeed, c_unitPropCurrent) * gf_AttackCooldown(lp_kobold)), AngleBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)))), c_orderQueueReplace);
                                                    }
                                                    else {
                                                        lv_p = gf_SmartRetreatPoint(lp_kobold, AngleBetweenPoints(lv_point, UnitGetPosition(lp_kobold)));
                                                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), lv_p), c_orderQueueReplace);
                                                    }
                                                }
                                                else {
                                                    lv_b = UnitGroupClosestToPoint(lv_executableFoes, UnitGetPosition(lp_kobold));
                                                    if (gf_UnitExists(lv_b) && (UnitHasBehavior(lp_kobold, "ShadowCloak") == true)) {
                                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                                                    }
                                                    else {
                                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        lv_spellVariation = RandomInt(1, 5);
        if (((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) < 70.0) || (UnitHasBehavior(lp_kobold, "Starving") == true)) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) > 0) && (UnitHasBehavior(lp_kobold, "KoboldCanEat") == true)) {
            UnitIssueOrder(lp_kobold, Order(AbilityCommand("Eatasnack", 0)), c_orderQueueReplace);
        }
        else {
            if (((UnitGroupCount(lv_executableFoes, c_unitCountAlive) > 0) || (lv_spellVariation == 2)) && (lv_onlyStructures == false) && (lv_onlyGhoulsorSavages == false) && (TimerGetRemaining(gv_aIData[lv_i].lv_tamingTime) == 0.0) && gf_AICanCastSpell(lp_kobold, AbilityCommand("ShadowCloak", 0))) {
                UnitIssueOrder(lp_kobold, Order(AbilityCommand("ShadowCloak", 0)), c_orderQueueReplace);
            }
            else {
                lv_b = UnitGroupClosestToPoint(lv_enemies, UnitGetPosition(lp_kobold));
                if ((lv_spellVariation == 4) && (lv_onlyStructures == false) && (TimerGetRemaining(gv_aIData[lv_i].lv_tamingTime) == 0.0) && gf_AICanCastSpell(lp_kobold, AbilityCommand("Affliction", 0)) && gf_UnitExists(lv_b) && (UnitHasBehavior(lv_b, "Affliction") == false) && (libNtve_gf_UnitIsVisibleToPlayer(lv_b, lv_i) == true) && (UnitFilterMatch(lv_b, UnitGetOwner(lv_b), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("Affliction", 0), lv_b), c_orderQueueReplace);
                }
                else {
                    if ((UnitHasBehavior(lp_kobold, "InCombat") == true) && (lv_spellVariation == 3) && (lv_onlyStructures == false) && (TimerGetRemaining(gv_aIData[lv_i].lv_tamingTime) == 0.0) && gf_AICanCastSpell(lp_kobold, AbilityCommand("FrostArmor", 0))) {
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand("FrostArmor", 0)), c_orderQueueAddToFront);
                    }
                    else {
                        if ((((lv_spellVariation == 1) && (UnitHasBehavior(lp_kobold, "Attacking") == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) < 95.0)) || (lv_onlyBears == true)) && (lv_onlyStructures == false) && gf_AICanCastSpell(lp_kobold, AbilityCommand("SiphonLife", 0))) {
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand("SiphonLife", 0)), c_orderQueueAddToFront);
                        }
                        else {
                            if ((((lv_spellVariation == 5) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) < 80.0)) || (UnitGroupCount(gf_UnitsInUnitGroupWithLife(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 40.0), c_unitCountAlive) > 0)) && (lv_onlyStructures == false) && gf_AICanCastSpell(lp_kobold, AbilityCommand("GuardianSpirit", 0))) {
                                UnitIssueOrder(lp_kobold, Order(AbilityCommand("GuardianSpirit", 0)), c_orderQueueAddToFront);
                            }
                            else {
                                if ((UnitHasBehavior(lp_kobold, "GoldenHauberk") == true) && (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, "GoldenHauberkHeal", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_i)) == 0.0) && ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) || (UnitGroupCount(gf_UnitsInUnitGroupWithLife(UnitGroupAlliance(lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GoldenHauberkHealSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_i))), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), 25.0), c_unitCountAlive) > 0))) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand("KoboldBackpack", 3), gf_KoboldArmor(lp_kobold)), c_orderQueueReplace);
                                }
                                else {
                                    if ((UnitHasBehavior(lp_kobold, "MurlocDoomhammer") == true) && (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, "MurlocDoomhammer", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_i)) == 0.0) && (lv_includingKoboldPetorBoss == true) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(UnitGroupClosestToPoint(lv_enemies, UnitGetPosition(lp_kobold)))) <= 3.0)) {
                                        UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand("KoboldBackpack", 3), gf_KoboldMainHand(lp_kobold)), c_orderQueueReplace);
                                    }
                                    else {
                                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_consumables, c_unitCountAlive) > 0) && (lv_includingKoboldPetorBoss == true)) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand("KoboldBackpack", 3), UnitGroupRandomUnit(gv_playerData[lv_i].lv_resources.lv_consumables, c_unitCountAlive)), c_orderQueueReplace);
                                        }
                                        else {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if ((lv_onlyBears == true) && (UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) < StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lv_i)))) {
            TimerStart(gv_aIData[lv_i].lv_tamingTime, 4.0, false, c_timeGame);
        }
        else {
        }
        if ((lv_includingKoboldPetorBoss == true) && (libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == false)) {
            UnitSetCustomValue(lp_kobold, gv_aIStatusIndex, IntToFixed(1));
            UnitBehaviorAdd(lp_kobold, "AIRecentCombat", lp_kobold, 1);
        }
        else {
        }
        if ((UnitHasBehavior(lp_kobold, "SkipChatCombat60") == false) && (libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == false) && (lv_includingKoboldPetorBoss == true)) {
            TextExpressionSetToken("Param/Expression/C7298D82", "A", gf_GetPlayerName(lv_i, 0));
            TextExpressionSetToken("Param/Expression/C7298D82", "B", StringExternal("Param/Value/3E41B091"));
            TextExpressionSetToken("Param/Expression/8BA4C916", "A", StringExternal("Param/Value/BD9D07E2"));
            TextExpressionSetToken("Param/Expression/8BA4C916", "B", TextWithColor(TextExpressionAssemble("Param/Expression/C7298D82"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            TextExpressionSetToken("Param/Expression/8BA4C916", "C", StringToText(gv_aIEnemySighted[RandomInt(1, gv_aIEnemySightedAmount)]));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/8BA4C916"));
            UnitBehaviorAdd(lp_kobold, "SkipChatCombat60", lp_kobold, 1);
        }
        else {
        }
        gv_aIData[lv_i].lv_lastCombatState = 1;
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuickWarmth
//--------------------------------------------------------------------------------------------------
bool gf_AIQuickwarmth (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_hasTorch;
    bool lv_hasLantern;
    bool lv_b_Night;
    bool lv_b_Winter;
    bool lv_needTorch;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_hasTorch = ((UnitHasBehavior(lp_kobold, "Torch") || UnitHasBehavior(lp_kobold, "FelFireTorch")) || (UnitGroupCount(UnitGroupFilter("Torch", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0));
    lv_hasLantern = (UnitHasBehavior(lp_kobold, "Lantern") || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) > 0));
    lv_b_Night = (!(gv_b_Day) && !((lv_hasTorch || lv_hasLantern)));
    lv_b_Winter = (gv_winter && !(lv_hasTorch));
    lv_needTorch = (lv_b_Night || lv_b_Winter);
    lv_success = true;
    // Implementation
    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CampfireLit", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_b = UnitGroupRandomUnit(lv_a, c_unitCountAlive);
    if (gf_UnitExists(lv_b) && (lv_needTorch == true)) {
        gf_CreateItemForUnit(lp_kobold, "Torch", 1);
    }
    else {
        lv_a = UnitGroup("Campfire", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b) && (lv_needTorch == true) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
            if ((UnitGetOwner(lv_b) != lv_i)) {
                UnitSetOwner(lv_b, lv_i, false);
            }
            else {
            }
            UnitIssueOrder(lv_b, Order(AbilityCommand("LightCampfire", 0)), c_orderQueueReplace);
        }
        else {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CampfireLit", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && (lv_needTorch == true) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            }
            else {
                lv_a = UnitGroup("Campfire", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b) && (lv_needTorch == true) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                }
                else {
                    if (((lv_needTorch == true) || (gv_playerData[lv_i].lv_warmth <= 5.0)) && gf_HasMaterialsFor(lp_kobold, "CampfireLit") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 1), null)) {
                    }
                    else {
                        lv_success = false;
                    }
                }
            }
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuickTree
//--------------------------------------------------------------------------------------------------
bool gf_AIQuicktree (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_b_LumberForFire;
    bool lv_b_ForestryReplenish;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_b_LumberForFire = ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) == 0) && ((UnitHasBehavior(lp_kobold, "Frostbite") || !((((UnitHasBehavior(lp_kobold, "Heat") || UnitHasBehavior(lp_kobold, "Torch")) || UnitHasBehavior(lp_kobold, "FelFireTorch")) || UnitHasBehavior(lp_kobold, "Lantern")))) && ((gv_playerData[lv_i].lv_warmth <= 50.0) && !(UnitHasBehavior(lp_kobold, "FrostBarrier")))));
    lv_b_ForestryReplenish = ((gv_skillForestry[lv_i] >= 15) && ((gv_playerData[lv_i].lv_stamina <= 10.0) || ((gv_playerData[lv_i].lv_warmth <= 10.0) && (!(UnitHasBehavior(lp_kobold, "FrostArmor")) && !(UnitHasBehavior(lp_kobold, "FrostBarrier"))))));
    lv_success = true;
    // Implementation
    if ((gv_b_Day == false)) {
        if (((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) == 0) || ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_lumber) && (lv_b_ForestryReplenish == true))) && gf_FindPickupItem(lp_kobold, "Lumber")) {
        }
        else {
            if ((lv_b_LumberForFire == true) && gf_AITradeBuyWithdraw(lp_kobold, "Lumber", 1, true, false, gv_playerData[lv_i].lv_stats.lv_sightRadius)) {
            }
            else {
                if (((lv_b_LumberForFire == true) || (lv_b_ForestryReplenish == true)) && gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "MapleTree") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                }
                else {
                    lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("MapleTree", c_playerAny, gf_WeightedInterestRegion(lp_kobold, gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 1.0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (((lv_b_LumberForFire == true) || (lv_b_ForestryReplenish == true)) && gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                        gv_aIData[lv_i].lv_focalNode = lv_b;
                    }
                    else {
                        lv_success = false;
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuickStone
//--------------------------------------------------------------------------------------------------
bool gf_AIQuickstone (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_b_StoneForFire;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_b_StoneForFire = ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) == 0) && ((UnitHasBehavior(lp_kobold, "Frostbite") || !((((UnitHasBehavior(lp_kobold, "Heat") || UnitHasBehavior(lp_kobold, "Torch")) || UnitHasBehavior(lp_kobold, "FelFireTorch")) || UnitHasBehavior(lp_kobold, "Lantern")))) && ((gv_playerData[lv_i].lv_warmth <= 50.0) && !(UnitHasBehavior(lp_kobold, "FrostBarrier")))));
    lv_success = true;
    // Implementation
    if ((gv_b_Day == false)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) == 0) && gf_FindPickupItem(lp_kobold, "Stone")) {
        }
        else {
            if ((lv_b_StoneForFire == true) && gf_AITradeBuyWithdraw(lp_kobold, "Stone", 1, true, false, gv_playerData[lv_i].lv_stats.lv_sightRadius)) {
            }
            else {
                if ((lv_b_StoneForFire == true) && gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "StoneDeposit") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                    UnitBehaviorAdd(lp_kobold, "BriefPassivity", lp_kobold, 1);
                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                }
                else {
                    lv_a = UnitGroup("StoneDeposit", c_playerAny, gf_WeightedInterestRegion(lp_kobold, gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if ((lv_b_StoneForFire == true) && gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                        gv_aIData[lv_i].lv_focalNode = lv_b;
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        UnitBehaviorAdd(lp_kobold, "BriefPassivity", lp_kobold, 1);
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                    }
                    else {
                        lv_success = false;
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuickAmmo
//--------------------------------------------------------------------------------------------------
bool gf_AIQuickammo (unit lp_kobold, bool lp_proximityCheck) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_t = gv_playerData[lv_i].lv_team;
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
        if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)) <= gv_interactRadius) && (UnitGetCustomValue(gv_teamData[lv_t].lv_watchTower, 1) <= 10.0) && (libNtve_gf_UnitIsUnderConstruction(gv_teamData[lv_t].lv_watchTower) == false)) {
            gf_PlayerUseUnitAbility(lv_i, gv_teamData[lv_t].lv_watchTower, AbilityCommand("WatchTowerRefillAmmunition", 0));
        }
        else {
            if ((lp_proximityCheck == false) && gf_UnitExists(gv_teamData[lv_t].lv_watchTower) && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_teamData[lv_t].lv_watchTower), FixedToInt(gv_playerData[lv_i].lv_stats.lv_sightRadius)) && (UnitGetCustomValue(gv_teamData[lv_t].lv_watchTower, 1) <= 5.0) && (libNtve_gf_UnitIsUnderConstruction(gv_teamData[lv_t].lv_watchTower) == false)) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)), c_orderQueueReplace);
            }
            else {
                lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("AutomatedDefenseTurret", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1, 0.0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) <= gv_interactRadius)) {
                        gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand("RefillAmmunition", 0));
                    }
                    else {
                        if ((lp_proximityCheck == false)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmartRetreatPoint
//--------------------------------------------------------------------------------------------------
point gf_SmartRetreatPoint (unit lp_kobold, fixed lp_angle) {
    int auto8FE0BCC9_ae;
    int auto8FE0BCC9_ai;
    // Variable Declarations
    const fixed lv_arc = 90.0;
    const int lv_nodes = 7;
    int lv_a;
    point lv_p;
    const fixed lv_r = 8.0;
    point lv_value;
    // Variable Initialization
    // Implementation
    auto8FE0BCC9_ae = lv_nodes;
    auto8FE0BCC9_ai = 1;
    lv_a = 0;
    for ( ; ( (auto8FE0BCC9_ai >= 0 && lv_a <= auto8FE0BCC9_ae) || (auto8FE0BCC9_ai <= 0 && lv_a >= auto8FE0BCC9_ae) ) ; lv_a += auto8FE0BCC9_ai ) {
        lv_p = PointWithOffsetPolar(UnitGetPosition(lp_kobold), (lv_r + (lv_a * 0.1)), (lp_angle + (lv_a * (lv_arc / (lv_nodes + 1.0)))));
        if ((AIPathingCostUnit(lp_kobold, lv_p, c_ignoreEnemyBuildings) != -1) && ((lv_value == null) || (AIPathingCostUnit(lp_kobold, lv_p, c_ignoreEnemyBuildings) < AIPathingCostUnit(lp_kobold, lv_value, c_ignoreEnemyBuildings)))) {
            lv_value = lv_p;
        }
        else {
        }
        lv_p = PointWithOffsetPolar(UnitGetPosition(lp_kobold), (lv_r + (lv_a * 0.1)), (lp_angle - (lv_a * (lv_arc / (lv_nodes + 1.0)))));
        if ((AIPathingCostUnit(lp_kobold, lv_p, c_ignoreEnemyBuildings) != -1) && ((lv_value == null) || (AIPathingCostUnit(lp_kobold, lv_p, c_ignoreEnemyBuildings) < AIPathingCostUnit(lp_kobold, lv_value, c_ignoreEnemyBuildings)))) {
            lv_value = lv_p;
        }
        else {
        }
    }
    if ((lv_value == null)) {
        lv_value = PointWithOffsetPolar(UnitGetPosition(lp_kobold), 1.0, (lp_angle + 90.0));
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetEnemyTarget
//--------------------------------------------------------------------------------------------------
unit gf_GetEnemyTarget (unit lp_attacker, unitgroup lp_group) {
    // Variable Declarations
    unit lv_value;
    unitgroup lv_enemiesAll;
    unitgroup lv_enemiesNoStructures;
    // Variable Initialization
    lv_enemiesAll = UnitGroupFilter(null, c_playerAny, lp_group, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_enemiesNoStructures = UnitGroupFilter(null, c_playerAny, lp_group, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Implementation
    UnitGroupAddUnitGroup(lv_enemiesNoStructures, UnitGroupFilter("SpikeTrap", c_playerAny, lp_group, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_enemiesNoStructures, UnitGroupFilter("AutomatedDefenseTurret", c_playerAny, lp_group, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_enemiesNoStructures, UnitGroupFilter("Fortress", c_playerAny, lp_group, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((UnitGroupCount(lv_enemiesNoStructures, c_unitCountAlive) > 0)) {
        lv_value = UnitGroupClosestToPoint(lv_enemiesNoStructures, UnitGetPosition(lp_attacker));
    }
    else {
        lv_value = UnitGroupClosestToPoint(lv_enemiesAll, UnitGetPosition(lp_attacker));
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MinimumRetreatLife
//--------------------------------------------------------------------------------------------------
fixed gf_MinimumRetreatLife (unit lp_unit) {
    // Variable Declarations
    fixed lv_value;
    // Variable Initialization
    lv_value = 30.0;
    // Implementation
    if (gf_RangedWeapon(lp_unit)) {
        lv_value = 20.0;
    }
    else {
    }
    lv_value += (2 * UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIDodgeBossAbilities
//--------------------------------------------------------------------------------------------------
bool gf_AIDodgeBossAbilities (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    bool lv_success;
    unit lv_unit;
    point lv_p;
    unitgroup lv_a;
    unit lv_b;
    region lv_region;
    unit lv_rAB;
    unit lv_uA;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_success = true;
    lv_a = UnitGroupEmpty();
    lv_region = RegionCircle(UnitGetPosition(lp_unit), gv_playerData[lv_i].lv_stats.lv_sightRadius);
    lv_rAB = UnitGroupClosestToPoint(UnitGroup("RagingArcaneBeast", c_playerAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    lv_uA = UnitGroupClosestToPoint(UnitGroup("UnstableAnomaly", c_playerAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
    // Implementation
    if (gf_UnitExists(lv_rAB) && (UnitHasBehavior(lv_rAB, "ArcaneEruption") == true) && ((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_rAB)) >= ((UnitGetCustomValue(lv_rAB, 0) * 1.75) - (1.75 / 2.0))) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_rAB)) <= ((UnitGetCustomValue(lv_rAB, 0) * 1.75) + (1.75 / 2.0))))) {
        if ((UnitGetCustomValue(lv_rAB, 0) == 1.0)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_unit), 2.0, AngleBetweenPoints(UnitGetPosition(lv_rAB), UnitGetPosition(lp_unit)))), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            if ((UnitHasBehavior(lp_unit, "Tamed") == true)) {
                UnitCreateEffectUnit(lp_unit, "PetDodging05Sec", lp_unit);
            }
            else {
            }
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_unit), 2.0, AngleBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_rAB)))), c_orderQueueReplace);
        }
    }
    else {
        if (gf_UnitExists(lv_uA) && (UnitGetHeight(lv_uA) < gv_uAMeleeHeight)) {
            UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_uA), c_orderQueueReplace);
        }
        else {
            if (gf_UnitExists(lv_rAB) && (UnitHasBehavior(lp_unit, "Annihilate") == true)) {
                lv_p = PointWithOffsetPolar(UnitGetPosition(lv_rAB), 6.0, (AngleBetweenPoints(UnitGetPosition(lv_rAB), UnitGetPosition(lp_unit)) + 35.0));
                if (gf_PathableMaximum(lp_unit, lv_p, 4)) {
                    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_p), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), gf_SmartRetreatPoint(lp_unit, AngleBetweenPoints(UnitGetPosition(lv_rAB), UnitGetPosition(lp_unit)))), c_orderQueueReplace);
                }
            }
            else {
                if ((UnitGroupCount(UnitGroup("TrollGroundSpike", c_playerAny, RegionCircle(UnitGetPosition(lp_unit), (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "TrollGroundSpikeSearch", "AreaArray[" + IntToString(0) + "].Radius", 15)) + UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), gf_PointWithoutUnitType(lp_unit, 4.0, "TrollGroundSpike", (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "TrollGroundSpikeSearch", "AreaArray[" + IntToString(0) + "].Radius", 15)) + UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent)))), c_orderQueueReplace);
                    UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                }
                else {
                    lv_a = UnitGroup("MoltenSphere", c_playerAny, RegionCircle(UnitGetPosition(lp_unit), (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MoltenSphereSearch", "AreaArray[" + IntToString(0) + "].Radius", 15)) + UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_unit));
                    if (gf_UnitExists(lv_b) && (UnitGetHeight(lv_b) <= 4.0)) {
                        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), gf_PointWithoutUnitType(lp_unit, 6.0, "MoltenSphere", (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MoltenSphereSearch", "AreaArray[" + IntToString(0) + "].Radius", 15)) + UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent)))), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitHasBehavior(lp_unit, "FirestormDoT") == true)) {
                            lv_b = UnitBehaviorEffectUnit(lp_unit, "FirestormDoT", c_effectUnitCaster, 0);
                            if (gf_UnitExists(lv_b)) {
                                lv_p = PointWithOffsetPolar(UnitGetPosition(lv_b), 4.0, (AngleBetweenPoints(UnitGetPosition(lv_b), UnitGetPosition(lp_unit)) + 10.0));
                                if (gf_PathableMaximum(lp_unit, lv_p, 4)) {
                                    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_p), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), gf_SmartRetreatPoint(lp_unit, AngleBetweenPoints(UnitGetPosition(lv_b), UnitGetPosition(lp_unit)))), c_orderQueueReplace);
                                }
                            }
                            else {
                                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), gf_SmartRetreatPoint(lp_unit, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                            }
                        }
                        else {
                            if (gf_UnitExists(gv_warlord) && (UnitHasBehavior(gv_warlord, "WhirlingBlades") == true) && (DistanceBetweenPoints(UnitGetPosition(gv_warlord), UnitGetPosition(lp_unit)) <= 8.0)) {
                                if (((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_warlord)) >= 3.75) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_warlord)) <= 4.25))) {
                                    UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                                    if ((UnitHasBehavior(lp_unit, "Tamed") == true)) {
                                        UnitCreateEffectUnit(lp_unit, "PetDodging05Sec", lp_unit);
                                    }
                                    else {
                                    }
                                }
                                else {
                                    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_warlord), 4.0, (AngleBetweenPoints(UnitGetPosition(gv_warlord), UnitGetPosition(lp_unit)) + RandomFixed(-20.0, 20.0)))), c_orderQueueReplace);
                                    UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                                    if ((UnitHasBehavior(lp_unit, "Tamed") == true)) {
                                        UnitCreateEffectUnit(lp_unit, "PetDodging05Sec", lp_unit);
                                    }
                                    else {
                                    }
                                }
                            }
                            else {
                                if (gf_UnitExists(gv_murlocChief) && (UnitHasBehavior(gv_murlocChief, "MurlocRushSetup") == true) && (DistanceBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_unit)) <= 10.0)) {
                                    gf_DodgeMurlocCharge(lp_unit);
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PointWithoutUnitType
//--------------------------------------------------------------------------------------------------
point gf_PointWithoutUnitType (unit lp_origin, fixed lp_radius, string lp_type, fixed lp_typeRadius) {
    int autoD0AB5D99_ae;
    int autoD0AB5D99_ai;
    // Variable Declarations
    int lv_a;
    region lv_region;
    const int lv_attempts = 30;
    point lv_value;
    // Variable Initialization
    lv_region = RegionCircle(UnitGetPosition(lp_origin), lp_radius);
    // Implementation
    autoD0AB5D99_ae = lv_attempts;
    autoD0AB5D99_ai = 1;
    lv_a = 1;
    for ( ; ( (autoD0AB5D99_ai >= 0 && lv_a <= autoD0AB5D99_ae) || (autoD0AB5D99_ai <= 0 && lv_a >= autoD0AB5D99_ae) ) ; lv_a += autoD0AB5D99_ai ) {
        lv_value = RegionRandomPoint(lv_region);
        if ((UnitGroupCount(UnitGroup(lp_type, c_playerAny, RegionCircle(lv_value, lp_typeRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && gf_PathableMaximum(lp_origin, lv_value, FixedToInt(lp_radius))) {
            return lv_value;
        }
        else {
            lv_value = null;
        }
    }
    if ((lv_value == null)) {
        lv_value = RegionRandomPoint(lv_region);
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DodgeMurlocCharge
//--------------------------------------------------------------------------------------------------
void gf_DodgeMurlocCharge (unit lp_dodger) {
    // Variable Declarations
    fixed lv_a;
    fixed lv_b;
    // Variable Initialization
    // Implementation
    lv_a = (UnitGetFacing(gv_murlocChief) - AngleBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_dodger)));
    if ((AbsF(lv_a) <= 45.0)) {
        if ((lv_a >= 0.0)) {
            lv_b = -75.0;
        }
        else {
            lv_b = 75.0;
        }
        UnitIssueOrder(lp_dodger, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointWithOffsetPolar(UnitGetPosition(gv_murlocChief), DistanceBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_dodger)), UnitGetFacing(gv_murlocChief)), 4.0, (UnitGetFacing(gv_murlocChief) + lv_b))), c_orderQueueReplace);
    }
    else if ((DistanceBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_dodger)) <= 2.5)) {
        UnitIssueOrder(lp_dodger, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_murlocChief), 4.0, AngleBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_dodger)))), c_orderQueueReplace);
    }
    if ((UnitHasBehavior(lp_dodger, "Tamed") == true)) {
        UnitIssueOrder(lp_dodger, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        UnitBehaviorAdd(lp_dodger, "PetDodging", lp_dodger, 1);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GroupStamina
//--------------------------------------------------------------------------------------------------
fixed gf_GroupStamina (unitgroup lp_group) {
    // Variable Declarations
    fixed lv_value;
    // Variable Initialization
    // Implementation
    UnitGroupLoopBegin(lp_group);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Kobold")) {
            lv_value += gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_stamina;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIHelpAlly
//--------------------------------------------------------------------------------------------------
bool gf_AIHelpAlly (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    unitgroup lv_engagedBruddahs;
    unit lv_u;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_t = gf_GetTeamOfPlayer(lv_i);
    lv_engagedBruddahs = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower) && (UnitGroupCount(gf_GetEnemiesNearPoint(UnitGetPosition(gv_teamData[lv_t].lv_watchTower), lv_i, StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Fortress", "Sight", UnitGetOwner(gv_teamData[lv_t].lv_watchTower))), false), c_unitCountAlive) > 0)) {
        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)), c_orderQueueReplace);
    }
    else {
        if ((gv_aIMonumentBuilder[lv_t] != lv_i) && (gv_teamData[lv_t].lv_aIWatchTowerBuilder != lv_i) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) >= 50.0)) {
            UnitGroupAddUnitGroup(lv_engagedBruddahs, libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceAllyExcludeSelf, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_aIStatusIndex, 1.0));
            UnitGroupAddUnitGroup(lv_engagedBruddahs, libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceAllyExcludeSelf, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_aIStatusIndex, 2.0));
            lv_u = UnitGroupClosestToPoint(lv_engagedBruddahs, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_u) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_u), 64) && (libNtve_gf_UnitInRegion(lv_u, gv_regionArena) == false)) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_u)), c_orderQueueReplace);
            }
            else {
                lv_success = false;
            }
        }
        else {
            lv_success = false;
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIRepairFortress
//--------------------------------------------------------------------------------------------------
bool gf_AIRepairFortress (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_t = gv_playerData[lv_i].lv_team;
    lv_success = true;
    // Implementation
    if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower) && (gv_skillArtisanship[lv_i] >= 5) && (UnitGetPropertyFixed(gv_teamData[lv_t].lv_watchTower, c_unitPropLifePercent, c_unitPropCurrent) < 75.0) && (UnitHasBehavior(gv_teamData[lv_t].lv_watchTower, "Dilapidated") == false) && (UnitHasBehavior(gv_teamData[lv_t].lv_watchTower, "UnderSiege") == false)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)) < 6.0)) {
            gv_unstuckRating[lv_i] = 0;
        }
        else {
            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)), c_orderQueueReplace);
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITakeABreath
//--------------------------------------------------------------------------------------------------
bool gf_AITakeABreath (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    // Implementation
    if ((UnitHasBehavior(lp_kobold, "ShadowCloak") == true) && (UnitHasBehavior(lp_kobold, "AIProwlsStag") == false) && (TimerGetRemaining(gv_aIData[lv_i].lv_shadowCloakMinimum) == 0.0)) {
        UnitIssueOrder(lp_kobold, Order(AbilityCommand("ShadowCloak", 1)), c_orderQueueReplace);
    }
    else {
    }
    return false;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIEarlyExploring
//--------------------------------------------------------------------------------------------------
bool gf_AIEarlyExploring (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    point lv_p;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_success = true;
    // Implementation
    if ((TimerGetRemaining(gv_aIData[lv_i].lv_explorerTimer) > 0.0)) {
        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_kobold), 8.0, (gv_aIData[lv_i].lv_explorerAngle + RandomFixed(-10.0, 10.0)))), c_orderQueueReplace);
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AILootFish
//--------------------------------------------------------------------------------------------------
bool gf_AILootFish (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_success = true;
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_food)) {
        if (gf_FindPickupItem(lp_kobold, "WaterScorpion")) {
        }
        else {
            if (gf_FindPickupItem(lp_kobold, "AlbinoCavefish")) {
            }
            else {
                if (gf_FindPickupItem(lp_kobold, "GiantSunfish")) {
                }
                else {
                    if (gf_FindPickupItem(lp_kobold, "BlindRainfish")) {
                    }
                    else {
                        if (gf_FindPickupItem(lp_kobold, "StripedLurker")) {
                        }
                        else {
                            if (gf_FindPickupItem(lp_kobold, "SlipperyEel")) {
                            }
                            else {
                                if (gf_FindPickupItem(lp_kobold, "JewelDanio")) {
                                }
                                else {
                                    if (gf_FindPickupItem(lp_kobold, "HighlandGuppy")) {
                                    }
                                    else {
                                        if (gf_FindPickupItem(lp_kobold, "ForestTrout")) {
                                        }
                                        else {
                                            if (gf_FindPickupItem(lp_kobold, "FireAmmonite")) {
                                            }
                                            else {
                                                lv_success = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AILootFood
//--------------------------------------------------------------------------------------------------
bool gf_AILootFood (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_success = true;
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_food)) {
        if (gf_FindPickupItem(lp_kobold, "StagStew")) {
        }
        else {
            if (gf_FindPickupItem(lp_kobold, "SmokedLambSirloin")) {
            }
            else {
                if (gf_FindPickupItem(lp_kobold, "BeerBraisedPheasant")) {
                }
                else {
                    if (gf_FindPickupItem(lp_kobold, "RoastedPheasantWithBerrySauce")) {
                    }
                    else {
                        if (gf_FindPickupItem(lp_kobold, "GrilledWolfEntrecote")) {
                        }
                        else {
                            if (gf_FindPickupItem(lp_kobold, "SpicedLambFeast")) {
                            }
                            else {
                                if (gf_FindPickupItem(lp_kobold, "RoastedLamb")) {
                                }
                                else {
                                    if (gf_FindPickupItem(lp_kobold, "WolfSteak")) {
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AILootQuestGear
//--------------------------------------------------------------------------------------------------
bool gf_AILootQuestGear (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_success = true;
    // Implementation
    if ((gv_aIMonumentBuilder[lv_i] != lv_i)) {
        if ((UnitHasBehavior(lp_kobold, "ConjurersCharm") == false) && gf_FindPickupItem(lp_kobold, "ConjurersCharm")) {
            if ((UnitHasBehavior(lp_kobold, "NecromancersNecklace") == false) && gf_FindPickupItem(lp_kobold, "NecromancersNecklace")) {
            }
            else {
                if ((UnitHasBehavior(lp_kobold, "TheMurlocket") == false) && gf_FindPickupItem(lp_kobold, "TheMurlocket")) {
                }
                else {
                    if (gf_FindPickupItem(lp_kobold, "MurlocDoomhammer")) {
                    }
                    else {
                        if (gf_FindPickupItem(lp_kobold, "ViciouslySharpArmblade")) {
                        }
                        else {
                            if (gf_FindPickupItem(lp_kobold, "CravensFishSticker")) {
                            }
                            else {
                                if (gf_FindPickupItem(lp_kobold, "FelFireTorch")) {
                                }
                                else {
                                    if (gf_FindPickupItem(lp_kobold, "SpikedShadowstoneScutum")) {
                                    }
                                    else {
                                        if (gf_FindPickupItem(lp_kobold, "FrostNeedle")) {
                                        }
                                        else {
                                            if (gf_FindPickupItem(lp_kobold, "FrostBarrier")) {
                                            }
                                            else {
                                                if (gf_FindPickupItem(lp_kobold, "Bloodcleaver")) {
                                                }
                                                else {
                                                    lv_success = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            lv_success = false;
        }
    }
    else {
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITreasureChest
//--------------------------------------------------------------------------------------------------
bool gf_AITreasureChests (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "TreasureChest") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 128)) {
        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
    }
    else {
        lv_b = UnitGroupClosestToPoint(UnitGroup("TreasureChest", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b) && gf_PathableMaximum(null, null, 128) && (libNtve_gf_UnitIsVisibleToPlayer(lv_b, lv_i) == true) && ((UnitHasBehavior(lv_b, "ChestBeingUnlocked") == false) || (UnitHasBehavior(lp_kobold, "UnlockingChestSmart") == true))) {
            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                TextExpressionSetToken("Param/Expression/4D4F9DDD", "A", gf_GetPlayerName(lv_i, 0));
                TextExpressionSetToken("Param/Expression/4D4F9DDD", "B", StringExternal("Param/Value/D39374F4"));
                TextExpressionSetToken("Param/Expression/39E28F09", "A", StringExternal("Param/Value/5CE6D4A5"));
                TextExpressionSetToken("Param/Expression/39E28F09", "B", TextWithColor(TextExpressionAssemble("Param/Expression/4D4F9DDD"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                TextExpressionSetToken("Param/Expression/39E28F09", "C", StringToText(gv_aIQuestLootString[RandomInt(1, gv_aIQuestLootStringAmount)]));
                UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/39E28F09"));
                UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
            }
            else {
            }
        }
        else {
            lv_success = false;
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuestingImperative
//--------------------------------------------------------------------------------------------------
bool gf_AIQuestingImperative (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_success = true;
    // Implementation
    if ((UnitHasBehavior(lp_kobold, "Fishing") == true)) {
        TimerStart(gv_aIData[lv_i].lv_fishingTime, 5.0, false, c_timeGame);
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuestingHighPriority
//--------------------------------------------------------------------------------------------------
bool gf_AIQuestingHighPriority (unit lp_kobold) {
    // Variable Declarations
    unitgroup lv_a;
    unit lv_b;
    unitgroup lv_group;
    fixed lv_temp;
    int lv_i;
    int lv_t;
    unit lv_carrier;
    bool lv_success;
    // Variable Initialization
    lv_a = UnitGroupEmpty();
    lv_group = UnitGroupEmpty();
    lv_i = UnitGetOwner(lp_kobold);
    lv_t = gf_GetTeamOfPlayer(lv_i);
    lv_success = true;
    // Implementation
    if ((lv_i != gv_teamData[lv_t].lv_aIWatchTowerBuilder)) {
        if (gf_AITreasureChests(lp_kobold)) {
        }
        else {
            if ((gv_questIndexActive == 3)) {
                lv_carrier = UnitInventoryUnit(gv_shipment);
                if ((lv_carrier == lp_kobold)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_merchant)), c_orderQueueReplace);
                }
                else {
                    if ((UnitGetType(UnitInventoryUnit(gv_shipment)) == "CrabShipment")) {
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_shipment), c_orderQueueReplace);
                    }
                    else {
                        lv_success = false;
                    }
                }
            }
            else {
                if (gf_AIQuestGastronomist(lp_kobold)) {
                }
                else {
                    if ((gv_questIndexActive == 6) && (gv_gladiatorPhase == 2) && gf_IsGladiator(lp_kobold)) {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2592)), c_orderQueueReplace);
                    }
                    else {
                        if ((gv_questIndexActive == 13)) {
                            lv_a = UnitGroup("LorenorStatue", lv_i, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) && (libNtve_gf_UnitIsUnderConstruction(lv_b) == true)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                if ((lv_i == gv_aIMonumentBuilder[lv_t]) && gf_HasMaterialsFor(lp_kobold, "LorenorStatue") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 9), null)) {
                                }
                                else {
                                    if ((lv_i != gv_aIMonumentBuilder[lv_t]) && (UnitHasBehavior(gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_kobold, "Constructing") == false) && (UnitGroupCount(gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_resources.lv_stone, c_unitCountAlive) < 9) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) > 1) && gf_AIBringItemToUnit(lp_kobold, UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_stone, 1), gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_kobold)) {
                                    }
                                    else {
                                        if ((lv_i != gv_aIMonumentBuilder[lv_t]) && (UnitHasBehavior(gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_kobold, "Constructing") == false) && (UnitGroupCount(gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_resources.lv_lumber, c_unitCountAlive) < 9) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) > 1) && gf_AIBringItemToUnit(lp_kobold, UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lumber, 1), gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_kobold)) {
                                        }
                                        else {
                                            if ((lv_i != gv_aIMonumentBuilder[lv_t])) {
                                                lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("LorenorStatue", "", "", lv_i, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
                                                if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                                                    if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                                                        TextExpressionSetToken("Param/Expression/B6A98FAE", "A", gf_GetPlayerName(lv_i, 0));
                                                        TextExpressionSetToken("Param/Expression/B6A98FAE", "B", StringExternal("Param/Value/4B4A2100"));
                                                        TextExpressionSetToken("Param/Expression/466DF4F4", "A", StringExternal("Param/Value/90FE1F76"));
                                                        TextExpressionSetToken("Param/Expression/466DF4F4", "B", TextWithColor(TextExpressionAssemble("Param/Expression/B6A98FAE"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                                        TextExpressionSetToken("Param/Expression/466DF4F4", "C", StringToText(gv_aIMonumentString[RandomInt(1, gv_aIMonumentStringAmount)]));
                                                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/466DF4F4"));
                                                        UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
                                                    }
                                                    else {
                                                    }
                                                }
                                                else {
                                                    lv_success = false;
                                                }
                                            }
                                            else {
                                                lv_success = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (gf_AIDiggyHole(lp_kobold)) {
                            }
                            else {
                                if (gf_FindPickupItem(lp_kobold, "GoldPurse")) {
                                }
                                else {
                                    if ((gv_aIMonumentBuilder[lv_t] != lv_i) && (UnitHasBehavior(lp_kobold, "SpellBook") == false) && (UnitHasBehavior(lp_kobold, "ConjurersCharm") == false) && (UnitHasBehavior(lp_kobold, "NecromancersNecklace") == false) && (UnitHasBehavior(lp_kobold, "TheMurlocket") == false) && gf_FindPickupItem(lp_kobold, "SpellBook")) {
                                    }
                                    else {
                                        if ((gv_aIMonumentBuilder[lv_t] != lv_i) && (UnitGroupCount(UnitGroupFilter("ScrollofTransmutation", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && gf_FindPickupItem(lp_kobold, "ScrollofTransmutation")) {
                                        }
                                        else {
                                            if ((gv_aIMonumentBuilder[lv_t] != lv_i) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_obedRods, c_unitCountAlive) == 0) && (UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) < StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lv_i))) && gf_FindPickupItem(lp_kobold, "ObedienceRod")) {
                                            }
                                            else {
                                                if ((gv_aIMonumentBuilder[lv_t] != lv_i) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) < (gv_aIData[lv_i].lv_supply.lv_radiantGems + 1)) && gf_FindPickupItem(lp_kobold, "RadiantGem")) {
                                                }
                                                else {
                                                    if ((gv_aIMonumentBuilder[lv_t] != lv_i) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_lanterns) && gf_FindPickupItem(lp_kobold, "Lantern")) {
                                                    }
                                                    else {
                                                        if (gf_AIGatherCandles(lp_kobold)) {
                                                        }
                                                        else {
                                                            if (gf_AILootFish(lp_kobold)) {
                                                            }
                                                            else {
                                                                if (gf_AILootFood(lp_kobold)) {
                                                                }
                                                                else {
                                                                    if (gf_AILootQuestGear(lp_kobold)) {
                                                                    }
                                                                    else {
                                                                        lv_success = false;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuestingNormal
//--------------------------------------------------------------------------------------------------
bool gf_AIQuestingNormal (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unit lv_b;
    unitgroup lv_group;
    fixed lv_temp;
    unit lv_carrier;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_group = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((lv_i != gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder)) {
        if ((gv_questIndexActive == 1)) {
            lv_temp = 0.0;
            lv_group = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupLoopBegin(lv_group);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_temp += gf_EvaluateThreat(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            if ((lv_temp > gf_EvaluateThreat(gv_murlocChief))) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_murlocChief)), c_orderQueueReplace);
                if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                    TextExpressionSetToken("Param/Expression/09106C1F", "A", gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken("Param/Expression/09106C1F", "B", StringExternal("Param/Value/4AD4E17C"));
                    TextExpressionSetToken("Param/Expression/A4E16D80", "A", StringExternal("Param/Value/51E97D76"));
                    TextExpressionSetToken("Param/Expression/A4E16D80", "B", TextWithColor(TextExpressionAssemble("Param/Expression/09106C1F"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                    TextExpressionSetToken("Param/Expression/A4E16D80", "C", StringToText(gv_aIQuestKillString[RandomInt(1, gv_aIQuestKillStringAmount)]));
                    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/A4E16D80"));
                    UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
                }
                else {
                }
            }
            else {
                lv_success = false;
            }
        }
        else if ((UnitGroupCount(UnitGroup("TreasureChest", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            lv_b = UnitGroupClosestToPoint(UnitGroup("TreasureChest", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && (UnitHasBehavior(lv_b, "ChestBeingUnlocked") == false)) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                    TextExpressionSetToken("Param/Expression/A217DD53", "A", gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken("Param/Expression/A217DD53", "B", StringExternal("Param/Value/6E18413C"));
                    TextExpressionSetToken("Param/Expression/5AD081A6", "A", StringExternal("Param/Value/D89A1505"));
                    TextExpressionSetToken("Param/Expression/5AD081A6", "B", TextWithColor(TextExpressionAssemble("Param/Expression/A217DD53"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                    TextExpressionSetToken("Param/Expression/5AD081A6", "C", StringToText(gv_aIQuestLootString[RandomInt(1, gv_aIQuestLootStringAmount)]));
                    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/5AD081A6"));
                    UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
                }
                else {
                }
            }
            else {
                lv_success = false;
            }
        }
        else if ((gv_questIndexActive == 3)) {
            lv_carrier = UnitInventoryUnit(gv_shipment);
            if ((libNtve_gf_PlayerIsEnemy(lv_i, UnitGetOwner(lv_carrier), 0) == true)) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_carrier), 4.0))), c_orderQueueReplace);
            }
            else {
                if ((libNtve_gf_PlayerIsEnemy(lv_i, UnitGetOwner(lv_carrier), 4) == true)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_carrier), (DistanceBetweenPoints(UnitGetPosition(lv_carrier), UnitGetPosition(gv_merchant)) * 0.5), AngleBetweenPoints(UnitGetPosition(lv_carrier), UnitGetPosition(gv_merchant)))), c_orderQueueReplace);
                }
                else {
                    lv_success = false;
                }
            }
            if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                TextExpressionSetToken("Param/Expression/D381E109", "A", gf_GetPlayerName(lv_i, 0));
                TextExpressionSetToken("Param/Expression/D381E109", "B", StringExternal("Param/Value/EDCBD2E6"));
                TextExpressionSetToken("Param/Expression/D1A794F2", "A", StringExternal("Param/Value/3BBD9F97"));
                TextExpressionSetToken("Param/Expression/D1A794F2", "B", TextWithColor(TextExpressionAssemble("Param/Expression/D381E109"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                TextExpressionSetToken("Param/Expression/D1A794F2", "C", StringToText(gv_aIQuestString[RandomInt(1, gv_aIQuestStringAmount)]));
                UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D1A794F2"));
                UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
            }
            else {
            }
        }
        else if ((gv_questIndexActive == 6) && (gv_gladiatorPhase == 1) && (gf_GetTeamOfPlayer(UnitGetOwner(gv_challenger[1])) != gf_GetTeamOfPlayer(lv_i)) && (gf_GetTeamOfPlayer(UnitGetOwner(gv_challenger[2])) != gf_GetTeamOfPlayer(lv_i)) && (gf_StrongestOnTeam(lp_kobold) == true)) {
            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("ChallengeBanner", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold)))), c_orderQueueReplace);
            if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                TextExpressionSetToken("Param/Expression/B5EA9D64", "A", gf_GetPlayerName(lv_i, 0));
                TextExpressionSetToken("Param/Expression/B5EA9D64", "B", StringExternal("Param/Value/FFBF87FF"));
                TextExpressionSetToken("Param/Expression/FCA6CC1B", "A", StringExternal("Param/Value/E56B2A11"));
                TextExpressionSetToken("Param/Expression/FCA6CC1B", "B", TextWithColor(TextExpressionAssemble("Param/Expression/B5EA9D64"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                TextExpressionSetToken("Param/Expression/FCA6CC1B", "C", StringToText(gv_aIQuestGladiatorString[RandomInt(1, gv_aIQuestGladiatorStringAmount)]));
                UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/FCA6CC1B"));
                UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
            }
            else {
            }
        }
        else if ((gv_questIndexActive == 8)) {
            lv_temp = 0.0;
            lv_group = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupLoopBegin(lv_group);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_temp += gf_EvaluateThreat(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            if ((lv_temp > gf_EvaluateThreat(gv_warlord))) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_warlord)), c_orderQueueReplace);
                if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                    TextExpressionSetToken("Param/Expression/6C06A308", "A", gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken("Param/Expression/6C06A308", "B", StringExternal("Param/Value/360A7E81"));
                    TextExpressionSetToken("Param/Expression/624C13C4", "A", StringExternal("Param/Value/D98B36C8"));
                    TextExpressionSetToken("Param/Expression/624C13C4", "B", TextWithColor(TextExpressionAssemble("Param/Expression/6C06A308"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                    TextExpressionSetToken("Param/Expression/624C13C4", "C", StringToText(gv_aIQuestKillString[RandomInt(1, gv_aIQuestKillStringAmount)]));
                    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/624C13C4"));
                    UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
                }
                else {
                }
            }
            else {
                lv_success = false;
            }
        }
        else if ((gv_questIndexActive == 10)) {
            lv_group = UnitGroup("FrostBear", 15, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((gv_witchSummoned == false) && (lv_group != UnitGroupEmpty())) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("move", 0), UnitGroupClosestToPoint(UnitGroup("FrostBear", 15, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold))), c_orderQueueReplace);
            }
            else {
                if (gf_UnitExists(gv_frostWitch)) {
                    lv_temp = 0.0;
                    lv_group = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    UnitGroupLoopBegin(lv_group);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        lv_temp += gf_EvaluateThreat(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    if ((lv_temp > gf_EvaluateThreat(gv_frostWitch))) {
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("move", 0), gv_frostWitch), c_orderQueueReplace);
                        if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                            TextExpressionSetToken("Param/Expression/4EDF7C9C", "A", gf_GetPlayerName(lv_i, 0));
                            TextExpressionSetToken("Param/Expression/4EDF7C9C", "B", StringExternal("Param/Value/838AD204"));
                            TextExpressionSetToken("Param/Expression/B35F1E0A", "A", StringExternal("Param/Value/3E29BE88"));
                            TextExpressionSetToken("Param/Expression/B35F1E0A", "B", TextWithColor(TextExpressionAssemble("Param/Expression/4EDF7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                            TextExpressionSetToken("Param/Expression/B35F1E0A", "C", StringToText(gv_aIQuestKillString[RandomInt(1, gv_aIQuestKillStringAmount)]));
                            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/B35F1E0A"));
                            UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
                        }
                        else {
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
                else {
                    lv_success = false;
                }
            }
        }
        else if ((gv_questIndexActive == 12)) {
            if ((UnitHasBehavior(lp_kobold, "GoldenHauberk") == true) && (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, "GoldenHauberkHeal", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_i)) == 0.0)) {
                if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_wizard)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GoldenHauberkHealSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_i)))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand("KoboldBackpack", 3), gf_KoboldArmor(lp_kobold)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_wizard)), c_orderQueueReplace);
                }
            }
            else {
                if ((UnitHasBehavior(lp_kobold, "GuardianSpirit") == true)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_wizard)), c_orderQueueReplace);
                }
                else {
                    if (gf_AICanCastSpell(lp_kobold, AbilityCommand("GuardianSpirit", 0))) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_wizard)) < 32.0)) {
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand("GuardianSpirit", 0)), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_wizard)), c_orderQueueReplace);
                        }
                    }
                    else {
                        if ((UnitGetType(gf_KoboldMainHand(lp_kobold)) == "CelestialOrb")) {
                            lv_group = UnitGroup("Palisade", lv_i, RegionCircle(UnitGetPosition(gv_wizard), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_group, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b)) {
                                if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_wizard)) <= 8.0)) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_wizard), RandomFixed(2.0, 6.0), UnitGetPosition(lv_b))), c_orderQueueReplace);
                                }
                            }
                            else {
                                if (((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) + UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumberParts, c_unitCountAlive)) >= 1)) {
                                    if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_wizard)) <= 4.0) && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 15), "TheWoundedWizard")) {
                                    }
                                    else {
                                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_wizard)), c_orderQueueReplace);
                                    }
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
            }
        }
        else if ((gv_questIndexActive == 14) && gf_UnitExists(gv_exile) && (gf_GetTeamOfPlayer(lv_i) == gv_attackers)) {
            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_exile)), c_orderQueueReplace);
            if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
                TextExpressionSetToken("Param/Expression/44188474", "A", gf_GetPlayerName(lv_i, 0));
                TextExpressionSetToken("Param/Expression/44188474", "B", StringExternal("Param/Value/5E4BB6AD"));
                TextExpressionSetToken("Param/Expression/73C05D96", "A", StringExternal("Param/Value/593868E8"));
                TextExpressionSetToken("Param/Expression/73C05D96", "B", TextWithColor(TextExpressionAssemble("Param/Expression/44188474"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                TextExpressionSetToken("Param/Expression/73C05D96", "C", StringToText(gv_aIExileString[RandomInt(1, gv_aIExileStringAmount)]));
                UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/73C05D96"));
                UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
            }
            else {
            }
        }
        else if (gf_AIQuestFishing(lp_kobold)) {
        }
        else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_skeletalFingers, c_unitCountAlive) >= 3)) {
            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gf_GetClosestResurrectionShrine(lp_kobold, true))), c_orderQueueReplace);
        }
        else if (true) {
            if ((gv_questIndexActive != 7) && (gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] != lv_i) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder != lv_i) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_skeletalFingers, c_unitCountAlive) < 3) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_reapersHands, c_unitCountAlive) == 0) && gf_FindPickupItem(lp_kobold, "SkeletalFinger")) {
            }
            else {
                if ((gv_questIndexActive != 7) && (gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] != lv_i) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder != lv_i) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_reapersHands, c_unitCountAlive) == 0) && gf_AITradeBuyWithdraw(lp_kobold, "SkeletalFinger", 3, false, false, 32.0)) {
                }
                else {
                    if ((gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] != lv_i) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder != lv_i) && gf_FindPickupItem(lp_kobold, "AncientArtifactFragment")) {
                    }
                    else {
                        if ((gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] != lv_i) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder != lv_i) && (UnitGroupCount(UnitGroupFilter("DraughtofDecay", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && gf_FindPickupItem(lp_kobold, "DraughtofDecay")) {
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuestGastronomist
//--------------------------------------------------------------------------------------------------
bool gf_AIQuestGastronomist (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    bool lv_b_CanCook1;
    bool lv_b_CanCook2;
    bool lv_b_CanCook3;
    bool lv_b_CanCookAny;
    unit lv_gastroCampfire;
    bool lv_success;
    unitgroup lv_g;
    point lv_p;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_t = gf_GetTeamOfPlayer(lv_i);
    lv_b_CanCook1 = (!(gv_feastCooked[lv_t][1]) && gf_HasMaterialsFor(lp_kobold, "SpicedLambFeast"));
    lv_b_CanCook2 = (!(gv_feastCooked[lv_t][2]) && gf_HasMaterialsFor(lp_kobold, "GrilledWolfEntrecote"));
    lv_b_CanCook3 = (!(gv_feastCooked[lv_t][3]) && gf_HasMaterialsFor(lp_kobold, "BeerBraisedPheasant"));
    lv_b_CanCookAny = ((lv_b_CanCook1 || lv_b_CanCook2) || lv_b_CanCook3);
    lv_success = true;
    lv_g = UnitGroupEmpty();
    // Implementation
    if ((gv_questIndexActive == 5) && (lv_b_CanCookAny == true)) {
        if ((UnitHasBehavior(lp_kobold, "TheGastronomistsTutelage") == true) && (UnitHasBehavior(lp_kobold, "Heat") == true) && (gf_UnitIsBusy(lp_kobold) == false)) {
            if ((lv_b_CanCook1 == true)) {
                UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingSpicedLambFeast", 0)), c_orderQueueReplace);
            }
            else {
                if ((lv_b_CanCook2 == true)) {
                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingGrilledWolfEntrecote", 0)), c_orderQueueReplace);
                }
                else {
                    if ((lv_b_CanCook3 == true)) {
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingBeerBraisedPheasant", 0)), c_orderQueueReplace);
                    }
                    else {
                    }
                }
            }
        }
        else {
            lv_gastroCampfire = UnitGroupClosestToPoint(UnitGroup("Campfire", c_playerAny, RegionCircle(UnitGetPosition(gv_feastChef), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_feastChef));
            if (gf_UnitExists(lv_gastroCampfire) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_gastroCampfire)) <= gv_interactRadius) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
                if ((UnitGetOwner(lv_gastroCampfire) != lv_i)) {
                    UnitSetOwner(lv_gastroCampfire, lv_i, false);
                }
                else {
                }
                UnitIssueOrder(lv_gastroCampfire, Order(AbilityCommand("LightCampfire", 0)), c_orderQueueReplace);
            }
            else {
                lv_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CampfireLit", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_feastChef), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_g, c_unitCountAlive) == 0) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
                    UnitGroupAddUnitGroup(lv_g, UnitGroup("Campfire", c_playerAny, RegionCircle(UnitGetPosition(gv_feastChef), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                }
                else {
                }
                lv_gastroCampfire = UnitGroupClosestToPoint(lv_g, UnitGetPosition(gv_feastChef));
                if (gf_UnitExists(lv_gastroCampfire)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_gastroCampfire), (DistanceBetweenPoints(UnitGetPosition(lv_gastroCampfire), UnitGetPosition(gv_feastChef)) / 2.0), UnitGetPosition(gv_feastChef))), c_orderQueueReplace);
                }
                else {
                    if (gf_HasMaterialsFor(lp_kobold, "CampfireLit")) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_feastChef)) <= 8.0)) {
                            lv_p = gf_GetBuildLocation3x3(RegionCircle(UnitGetPosition(gv_feastChef), 6.0));
                            if ((lv_p != null)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("KoboldTestBuild", 1), lv_p), c_orderQueueReplace);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                        else {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_feastChef)), c_orderQueueReplace);
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIQuestFishing
//--------------------------------------------------------------------------------------------------
bool gf_AIQuestFishing (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    int lv_a;
    region lv_area;
    point lv_p;
    fixed lv_angleoffset;
    const int lv_searchattempts = 40;
    int lv_failsafe;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_angleoffset = libNtve_gf_RandomAngle();
    lv_failsafe = 50;
    lv_success = true;
    // Implementation
    if ((gv_questIndexActive == 16) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_fishingRods, c_unitCountAlive) > 0)) {
        lv_area = RegionCircle(gv_expeditionActivePoint[gf_ClosestFishableExpeditionPoint(lp_kobold)], gv_expeditionRadius);
        if ((lv_area != null)) {
            if ((libNtve_gf_UnitInRegion(lp_kobold, lv_area) == true)) {
                TimerStart(gv_aIData[lv_i].lv_fishingTime, 5.0, false, c_timeGame);
                if (((UnitGetType(gf_KoboldMainHand(lp_kobold)) == "FishingRod") || (UnitGetType(gf_KoboldMainHand(lp_kobold)) == "EpicFishingRod"))) {
                    lv_p = gf_FishablePointInRegion(lp_kobold, lv_area);
                    if ((lv_p != null) && gf_FishingStart(lp_kobold, lv_p)) {
                    }
                    else {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(lv_area), 1.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    }
                }
                else {
                    lv_success = false;
                }
            }
            else {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lv_area)), c_orderQueueReplace);
            }
        }
        else {
            lv_success = false;
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ClosestFishableExpeditionPoint
//--------------------------------------------------------------------------------------------------
int gf_ClosestFishableExpeditionPoint (unit lp_kobold) {
    int auto94D9BCBA_ae;
    int auto94D9BCBA_ai;
    // Variable Declarations
    int lv_i;
    int lv_a;
    int lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    // Implementation
    auto94D9BCBA_ae = gv_expeditionAreas;
    auto94D9BCBA_ai = 1;
    lv_a = 1;
    for ( ; ( (auto94D9BCBA_ai >= 0 && lv_a <= auto94D9BCBA_ae) || (auto94D9BCBA_ai <= 0 && lv_a >= auto94D9BCBA_ae) ) ; lv_a += auto94D9BCBA_ai ) {
        if (((lv_value == 0) || (DistanceBetweenPoints(UnitGetPosition(lp_kobold), gv_expeditionActivePoint[lv_a]) < DistanceBetweenPoints(UnitGetPosition(lp_kobold), gv_expeditionActivePoint[lv_value]))) && (gv_expeditionProgress[gv_playerData[lv_i].lv_team][lv_a] == false)) {
            lv_value = lv_a;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FishablePointInRegion
//--------------------------------------------------------------------------------------------------
point gf_FishablePointInRegion (unit lp_unit, region lp_reg) {
    int autoBA59C61A_ae;
    int autoBA59C61A_ai;
    int autoF5D56B4F_ae;
    int autoF5D56B4F_ai;
    // Variable Declarations
    fixed lv_angleoffset;
    int lv_a;
    int lv_b;
    point lv_value;
    // Variable Initialization
    lv_angleoffset = libNtve_gf_RandomAngle();
    // Implementation
    autoBA59C61A_ae = 4;
    autoBA59C61A_ai = 1;
    lv_a = 1;
    for ( ; ( (autoBA59C61A_ai >= 0 && lv_a <= autoBA59C61A_ae) || (autoBA59C61A_ai <= 0 && lv_a >= autoBA59C61A_ae) ) ; lv_a += autoBA59C61A_ai ) {
        autoF5D56B4F_ae = 8;
        autoF5D56B4F_ai = 1;
        lv_b = 1;
        for ( ; ( (autoF5D56B4F_ai >= 0 && lv_b <= autoF5D56B4F_ae) || (autoF5D56B4F_ai <= 0 && lv_b >= autoF5D56B4F_ae) ) ; lv_b += autoF5D56B4F_ai ) {
            lv_value = PointWithOffsetPolar(UnitGetPosition(lp_unit), (lv_a * 2.0), (lv_angleoffset + (lv_b * (360.0 / 8.0))));
            if ((RegionContainsPoint(lp_reg, lv_value) == true) && (gf_FishRegionAtPoint(lv_value) != 0)) {
            }
            else {
                lv_value = null;
            }
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AICampfire
//--------------------------------------------------------------------------------------------------
bool gf_AICampfire (unit lp_kobold, fixed lp_warmth, unit lp_shrine, bool lp_toCook) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    unit lv_h;
    point lv_p;
    bool lv_hasTorch;
    bool lv_hasLantern;
    bool lv_b_Night;
    bool lv_b_Winter;
    bool lv_needTorch;
    bool lv_hugCampfire;
    bool lv_stayAWhile;
    bool lv_anythingCampfire;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_hasTorch = ((UnitHasBehavior(lp_kobold, "Torch") || UnitHasBehavior(lp_kobold, "FelFireTorch")) || (UnitGroupCount(UnitGroupFilter("Torch", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0));
    lv_hasLantern = (UnitHasBehavior(lp_kobold, "Lantern") || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) > 0));
    lv_b_Night = (!(gv_b_Day) && !((lv_hasTorch || lv_hasLantern)));
    lv_b_Winter = (gv_winter && !(lv_hasTorch));
    lv_needTorch = (lv_b_Night || lv_b_Winter);
    lv_hugCampfire = (gv_playerData[lv_i].lv_warmth <= (IntToFixed(gv_dayNight) * 25.0));
    lv_stayAWhile = ((UnitHasBehavior(lp_kobold, "Heat") && (gv_playerData[lv_i].lv_warmth <= 85.0)) && (gv_winter || (gv_raining || !(gv_b_Day))));
    lv_anythingCampfire = ((lv_needTorch || lp_toCook) || (lv_hugCampfire || lv_stayAWhile));
    lv_success = true;
    // Implementation
    if ((lv_anythingCampfire == true)) {
        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CampfireLit", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupRandomUnit(lv_a, c_unitCountAlive);
        if (gf_UnitExists(lv_b) && (lv_needTorch == true)) {
            gf_CreateItemForUnit(lp_kobold, "Torch", 1);
        }
        else {
            lv_a = UnitGroup("Campfire", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
                if ((UnitGetOwner(lv_b) != lv_i)) {
                    UnitSetOwner(lv_b, lv_i, false);
                }
                else {
                }
                UnitIssueOrder(lv_b, Order(AbilityCommand("LightCampfire", 0)), c_orderQueueReplace);
            }
            else {
                if ((lv_stayAWhile == true)) {
                    gv_unstuckRating[lv_i] = 0;
                    if (gf_AIFood(lp_kobold, true, gv_playerData[lv_i].lv_hunger, true)) {
                    }
                    else {
                        lv_h = UnitBehaviorEffectUnit(lp_kobold, "Heat", c_effectUnitCaster, 0);
                        if (gf_UnitExists(lv_h)) {
                            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Tent", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_h), 7.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) && (UnitHasBehavior(lp_kobold, "Sheltered") == false) && ((gv_raining == true) || (gv_winter == true) || (gv_playerData[lv_i].lv_stamina <= 85.0))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_b), 1.5, UnitGetPosition(lv_h))), c_orderQueueReplace);
                            }
                            else {
                                UnitIssueOrder(lp_kobold, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                            }
                        }
                        else {
                        }
                    }
                }
                else {
                    if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && ((UnitGetType(gv_aIData[lv_i].lv_focalNode) == "CampfireLit") || ((UnitGetType(gv_aIData[lv_i].lv_focalNode) == "Campfire") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1))) && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 48)) {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Tent", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        lv_h = UnitGroupClosestToPoint(lv_a, UnitGetPosition(gv_aIData[lv_i].lv_focalNode));
                        if (gf_UnitExists(lv_h)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), (DistanceBetweenPoints(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), UnitGetPosition(lv_h)) / 2.0), UnitGetPosition(lv_h))), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                        }
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CampfireLit", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 48)) {
                            gv_aIData[lv_i].lv_focalNode = lv_b;
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        }
                        else {
                            lv_a = UnitGroup("Campfire", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 48) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
                                gv_aIData[lv_i].lv_focalNode = lv_b;
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                if (gf_HasMaterialsFor(lp_kobold, "CampfireLit") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 1), "Tent")) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIFood
//--------------------------------------------------------------------------------------------------
bool gf_AIFood (unit lp_kobold, bool lp_stock, fixed lp_hunger, bool lp_whileWarming) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    unitgroup lv_a;
    unit lv_b;
    bool lv_cooking;
    bool lv_success;
    bool lv_busy;
    bool lv_b_HasEnoughCookedFood;
    bool lv_b_WantRoastedLamb;
    bool lv_b_WantWolfSteak;
    bool lv_b_WantLambFeast;
    bool lv_b_WantWolfEntrecote;
    bool lv_b_WantBerryPheasant;
    bool lv_b_WantBeerPhez;
    bool lv_b_WantStagSoup;
    bool lv_b_WantsToCookSomething;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_t = gf_GetTeamOfPlayer(lv_i);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    lv_busy = gf_UnitIsBusy(lp_kobold);
    lv_b_HasEnoughCookedFood = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodCooked, c_unitCountAlive) >= gv_aIData[lv_i].lv_supply.lv_food);
    lv_b_WantRoastedLamb = (((((gv_skillCooking[lv_i] >= 0) && (gv_skillCooking[lv_i] <= 4)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodCooked, c_unitCountAlive) == 0)) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawLamb, c_unitCountAlive) > 0)) && !(lv_busy));
    lv_b_WantWolfSteak = (((((gv_skillCooking[lv_i] >= 0) && (gv_skillCooking[lv_i] <= 4)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodCooked, c_unitCountAlive) == 0)) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawWolf, c_unitCountAlive) > 0)) && !(lv_busy));
    lv_b_WantLambFeast = (((gv_skillCooking[lv_i] >= 5) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lambFeast, c_unitCountAlive) == 0) && gf_HasMaterialsFor(lp_kobold, "SpicedLambFeast"))) && ((gv_questIndexActive != 5) && !(lv_busy)));
    lv_b_WantWolfEntrecote = (((gv_skillCooking[lv_i] >= 5) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfEntrecote, c_unitCountAlive) == 0) && gf_HasMaterialsFor(lp_kobold, "GrilledWolfEntrecote"))) && ((gv_questIndexActive != 5) && !(lv_busy)));
    lv_b_WantBerryPheasant = (((gv_skillCooking[lv_i] >= 5) && gf_HasMaterialsFor(lp_kobold, "RoastedPheasantWithBerrySauce")) && !(lv_busy));
    lv_b_WantBeerPhez = (((gv_skillCooking[lv_i] >= 10) && gf_HasMaterialsFor(lp_kobold, "BeerBraisedPheasant")) && ((gv_questIndexActive != 5) && !(lv_busy)));
    lv_b_WantStagSoup = (((gv_skillCooking[lv_i] >= 20) && gf_HasMaterialsFor(lp_kobold, "StagStew")) && !(lv_busy));
    lv_b_WantsToCookSomething = (lv_b_WantBeerPhez || (lv_b_WantLambFeast || (lv_b_WantRoastedLamb || (lv_b_WantWolfEntrecote || (lv_b_WantWolfSteak || (lv_b_WantBerryPheasant || lv_b_WantStagSoup))))));
    // Implementation
    if ((UnitHasBehavior(lp_kobold, "GoldenHauberk") == true) && (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, "GoldenHauberkHeal", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_i)) == 0.0) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
        UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand("KoboldBackpack", 3), gf_KoboldArmor(lp_kobold)), c_orderQueueReplace);
    }
    else {
        if ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) <= 70.0) && gf_AICanCastSpell(lp_kobold, AbilityCommand("GuardianSpirit", 0))) {
            UnitIssueOrder(lp_kobold, Order(AbilityCommand("GuardianSpirit", 0)), c_orderQueueReplace);
        }
        else {
            if ((UnitHasBehavior(lp_kobold, "KoboldCanEat") == true) && ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) <= 70.0) || (gv_playerData[lv_i].lv_hunger <= 60.0)) && gf_AIFoodSnack(lp_kobold)) {
            }
            else {
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodCooked, c_unitCountAlive) > 0) && (UnitHasBehavior(lp_kobold, "KoboldCanEat") == true) && ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) <= 60.0) || (gv_playerData[lv_i].lv_hunger <= 50.0))) {
                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("Eatasnack", 0)), c_orderQueueReplace);
                }
                else {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodRaw, c_unitCountAlive) > 0) && (UnitHasBehavior(lp_kobold, "KoboldCanEat") == true) && ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0) || (gv_playerData[lv_i].lv_hunger <= 0.0))) {
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand("Eatasnack", 0)), c_orderQueueReplace);
                    }
                    else {
                        if ((lv_b_HasEnoughCookedFood == false) && (lv_b_WantsToCookSomething == true)) {
                            if ((UnitHasBehavior(lp_kobold, "Heat") == true)) {
                                if ((lv_b_WantStagSoup == true)) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingStagStew", 0)), c_orderQueueReplace);
                                }
                                else if ((lv_b_WantBerryPheasant == true)) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingRoastedPheasantWithBlueberrySauce", 0)), c_orderQueueReplace);
                                }
                                else if ((lv_b_WantBeerPhez == true)) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingBeerBraisedPheasant", 0)), c_orderQueueReplace);
                                }
                                else if ((lv_b_WantLambFeast == true)) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingSpicedLambFeast", 0)), c_orderQueueReplace);
                                }
                                else if ((lv_b_WantWolfEntrecote == true)) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingGrilledWolfEntrecote", 0)), c_orderQueueReplace);
                                }
                                else if ((lv_b_WantWolfSteak == true)) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingWolfSteak", 0)), c_orderQueueReplace);
                                }
                                else if ((lv_b_WantRoastedLamb == true)) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("CookingRoastedLamb", 0)), c_orderQueueReplace);
                                }
                                else if (true) {
                                    lv_success = false;
                                }
                                lv_b = UnitBehaviorEffectUnit(lp_kobold, "Heat", c_effectUnitCaster, 0);
                                if (gf_UnitExists(lv_b) && (StringSub(gv_perks[UnitGetOwner(lv_b)], 40, 40) == "1") && (UnitAbilityGetCooldown(lv_b, "RefreshCampfireExpert", "Abil/RefreshCampfire") == 0.0)) {
                                    UnitIssueOrder(lv_b, Order(AbilityCommand("RefreshCampfireExpert", 0)), c_orderQueueAddToEnd);
                                }
                                else {
                                }
                            }
                            else {
                                if ((lp_whileWarming == false) && gf_AICampfire(lp_kobold, 0.0, null, true)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
            }
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIFoodSnack
//--------------------------------------------------------------------------------------------------
bool gf_AIFoodSnack (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unit lv_thisbeeating;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_success = true;
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, 1);
    }
    else {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfSteak, c_unitCountAlive) > 0)) {
            lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_wolfSteak, 1);
        }
        else {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_roastedLamb, c_unitCountAlive) > 0)) {
                lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_roastedLamb, 1);
            }
            else {
            }
        }
    }
    if ((lv_thisbeeating == null)) {
        lv_success = false;
    }
    else {
        gf_EatFood(lp_kobold, lv_thisbeeating, true);
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIStamina
//--------------------------------------------------------------------------------------------------
bool gf_AIStamina (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    unit lv_h;
    bool lv_success;
    bool lv_b_NoLumberjack;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    lv_b_NoLumberjack = (TimerGetRemaining(gv_aIData[lv_i].lv_lumberjackTimer) == 0.0);
    // Implementation
    if ((UnitHasBehavior(lp_kobold, "Resting") == true) && (gv_playerData[lv_i].lv_stamina < 75.0) && (lv_b_NoLumberjack == true)) {
        gv_unstuckRating[lv_i] = 0;
        if ((UnitHasBehavior(lp_kobold, "Heat") == true) && gf_AIFood(lp_kobold, true, 100.0, false)) {
        }
        else {
            if ((gv_dayNight == 2)) {
                UnitIssueOrder(lp_kobold, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            }
            else {
            }
        }
    }
    else {
        if ((gv_playerData[lv_i].lv_stamina < 25.0) && (lv_b_NoLumberjack == true)) {
            if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "Tent") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 48)) {
                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CampfireLit", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_h = UnitGroupClosestToPoint(lv_a, UnitGetPosition(gv_aIData[lv_i].lv_focalNode));
                if (gf_UnitExists(lv_h) && (UnitHasBehavior(lp_kobold, "Heat") == false)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), (DistanceBetweenPoints(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), UnitGetPosition(lv_h)) / 2.0), UnitGetPosition(lv_h))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                }
            }
            else {
                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Tent", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 48)) {
                    gv_aIData[lv_i].lv_focalNode = lv_b;
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                }
                else {
                    if (gf_HasMaterialsFor(lp_kobold, "Tent") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 0), "CampfireLit")) {
                    }
                    else {
                        lv_success = false;
                    }
                }
            }
        }
        else {
            lv_success = false;
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITradeSellStore
//--------------------------------------------------------------------------------------------------
bool gf_AITradeSellStore (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    unit lv_sellingItem;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((UnitGroupCount(gv_aIData[lv_i].lv_tradeItems, c_unitCountAlive) >= gf_GetExcessLimit(lp_kobold))) {
        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b) && ((UnitHasBehavior(lv_b, "Locked") == false) || (UnitGetOwner(lv_b) == lv_i))) {
            lv_sellingItem = UnitGroupRandomUnit(gv_aIData[lv_i].lv_tradeItems, c_unitCountAlive);
            if ((UnitInventoryUnit(lv_sellingItem) == lp_kobold)) {
                gv_unstuckRating[lv_i] = 0;
                gf_SellResource(lv_sellingItem, lv_i, lv_b);
            }
            else {
                UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, lv_sellingItem);
            }
            gf_AIBirdScout(lv_i, lv_b);
        }
        else {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_aIData[lv_i].lv_tradeRoamRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 0.0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && ((UnitHasBehavior(lv_b, "Locked") == false) || (UnitGetOwner(lv_b) == lv_i))) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            }
            else {
                if (gf_HasMaterialsFor(lp_kobold, "StorageOutpost") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 6), "CampfireLit")) {
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITradeBuyWithdraw
//--------------------------------------------------------------------------------------------------
bool gf_AITradeBuyWithdraw (unit lp_kobold, string lp_type, int lp_limit, bool lp_ignoreRichRequirement, bool lp_withdrawToSell, fixed lp_radius) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    unit lv_c;
    bool lv_tradeGood;
    bool lv_affordable;
    bool lv_wantToBuy;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_tradeGood = gf_TypeIsTradeGood(lp_type);
    lv_affordable = ((lp_ignoreRichRequirement || (PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= gv_aIData[lv_i].lv_richLimit)) && (PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= gf_GetBuyPrice(lp_type, lv_i)));
    lv_wantToBuy = (lv_tradeGood && (lv_affordable && !(lp_withdrawToSell)));
    lv_success = true;
    // Implementation
    if ((UnitGroupCount(UnitGroupFilter(lp_type, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < lp_limit)) {
        if ((lp_withdrawToSell == true)) {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", lv_i, -1, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b) && ((UnitHasBehavior(lv_b, "Locked") == false) || (UnitGetOwner(lv_b) == lv_i)) && ((lv_wantToBuy == true) || (UnitGroupCount(UnitGroupFilter(lp_type, c_playerAny, UnitInventoryGroup(lv_b), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0))) {
            lv_a = UnitGroupFilter(lp_type, c_playerAny, UnitInventoryGroup(lv_b), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
            lv_c = UnitGroupUnit(lv_a, 1);
            if (gf_UnitExists(lv_c) && ((UnitHasBehavior(lv_b, "Locked") == false) || (UnitGetOwner(lv_b) == lv_i))) {
                gv_unstuckRating[lv_i] = 0;
                UnitSetPosition(lv_c, UnitGetPosition(lp_kobold), false);
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_c), c_orderQueueReplace);
                gf_Quicktag(lp_kobold, (UnitTypeGetName(UnitGetType(lv_c)) + StringExternal("Param/Value/95CB5ED6")), 2.0, 24);
                if ((lp_withdrawToSell == true)) {
                    UnitGroupAdd(gv_aIData[lv_i].lv_tradeItems, lv_c);
                }
                else {
                }
            }
            else {
                if ((lv_wantToBuy == true) && gf_BuyResource(lp_kobold, lp_type)) {
                    gf_AIBirdScout(lv_i, lv_b);
                }
                else {
                    lv_success = false;
                }
            }
        }
        else {
            if ((lp_withdrawToSell == true)) {
                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", lv_i, -1, RegionCircle(UnitGetPosition(lp_kobold), lp_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            }
            else {
                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), lp_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            }
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && ((UnitHasBehavior(lv_b, "Locked") == false) || (UnitGetOwner(lv_b) == lv_i))) {
                if (((lv_wantToBuy == true) || (UnitGroupCount(UnitGroupFilter(lp_type, c_playerAny, UnitInventoryGroup(lv_b), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                }
                else {
                    lv_success = false;
                }
            }
            else {
                if ((lp_withdrawToSell == false) && gf_HasMaterialsFor(lp_kobold, "StorageOutpost") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 6), "CampfireLit")) {
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIBirdScout
//--------------------------------------------------------------------------------------------------
void gf_AIBirdScout (int lp_player, unit lp_outpost) {
    // Variable Declarations
    unitgroup lv_enemies;
    point lv_target;
    // Variable Initialization
    lv_enemies = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lp_player, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Implementation
    if ((UnitHasBehavior(lp_outpost, "OutpostGotBird") == true) && (UnitHasBehavior(gv_playerData[UnitGetOwner(lp_outpost)].lv_kobold, "KoboldBotNormal") == true)) {
        if ((UnitGroupCount(lv_enemies, c_unitCountAlive) > 0)) {
            lv_target = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_enemies, c_unitCountAlive)), 32.0));
        }
        else {
            lv_target = RegionRandomPoint(RegionPlayableMap());
        }
        UnitIssueOrder(lp_outpost, OrderTargetingPoint(AbilityCommand("TameBird", 0), lv_target), c_orderQueueReplace);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIBuildStructure
//--------------------------------------------------------------------------------------------------
bool gf_AIBuildStructure (unit lp_kobold, abilcmd lp_order, string lp_nearStructureType) {
    // Variable Declarations
    const fixed lv_radius = 6.0;
    const fixed lv_preferedStructuresRadius = 32.0;
    unitgroup lv_preferedStructures;
    unit lv_b;
    int lv_i;
    point lv_point;
    bool lv_success;
    // Variable Initialization
    lv_preferedStructures = UnitGroupEmpty();
    lv_i = UnitGetOwner(lp_kobold);
    lv_success = true;
    // Implementation
    if ((TimerGetRemaining(gv_aIData[lv_i].lv_buildPlacement) == 0.0)) {
        if ((lp_nearStructureType != null)) {
            lv_preferedStructures = UnitGroup(lp_nearStructureType, lv_i, RegionCircle(UnitGetPosition(lp_kobold), lv_preferedStructuresRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_preferedStructures, UnitGetPosition(lp_kobold));
        }
        else {
        }
        if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt(lv_preferedStructuresRadius)) && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_b), lv_radius), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5)) {
            lv_point = gf_GetBuildLocation3x3(RegionCircle(UnitGetPosition(lv_b), lv_radius));
        }
        else {
            if ((lp_order == AbilityCommand("KoboldTestBuild", 16))) {
                lv_point = gf_GetBuildLocation4x4(RegionCircle(UnitGetPosition(lp_kobold), lv_radius));
            }
            else {
                if ((lp_order == AbilityCommand("KoboldTestBuild", 7)) && (lp_nearStructureType == null)) {
                    lv_point = gf_GetBuildLocation3x3(RegionCircle(UnitGetPosition(lp_kobold), 2.0));
                }
                else {
                    lv_point = gf_GetBuildLocation3x3(RegionCircle(UnitGetPosition(lp_kobold), lv_radius));
                }
            }
        }
        if ((lv_point != null) && gf_PathableMaximum(lp_kobold, lv_point, FixedToInt(lv_radius))) {
            UnitIssueOrder(lp_kobold, OrderTargetingPoint(lp_order, lv_point), c_orderQueueReplace);
        }
        else {
            if ((TimerGetRemaining(gv_aIData[lv_i].lv_buildPlacement) == 0.0)) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_kobold), RandomFixed(-2.0, 2.0), PointFromId(2850))), c_orderQueueReplace);
            }
            else {
            }
            lv_success = false;
        }
    }
    else {
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetBuildLocation2x2
//--------------------------------------------------------------------------------------------------
point gf_GetBuildLocation2x2 (region lp_region) {
    // Variable Declarations
    point lv_p;
    int lv_failsafe;
    bool lv_deny;
    // Variable Initialization
    // Implementation
    while ((lv_p == null)) {
        lv_p = RegionRandomPoint(lp_region);
        lv_p = Point(Round(PointGetX(lv_p)), Round(PointGetY(lv_p)));
        lv_failsafe += 1;
        if ((gf_StructurePathable2x2(lv_p) == true)) {
        }
        else {
            if ((lv_failsafe < 50)) {
                lv_p = null;
            }
            else {
                lv_p = RegionGetCenter(lp_region);
                lv_deny = true;
            }
        }
    }
    if ((lv_deny == true)) {
        lv_p = null;
    }
    else {
    }
    return lv_p;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetBuildLocation3x3
//--------------------------------------------------------------------------------------------------
point gf_GetBuildLocation3x3 (region lp_region) {
    // Variable Declarations
    point lv_p;
    int lv_failsafe;
    bool lv_deny;
    // Variable Initialization
    // Implementation
    while ((lv_p == null)) {
        lv_p = RegionRandomPoint(lp_region);
        lv_p = Point((Round(PointGetX(lv_p)) + 0.5), (Round(PointGetY(lv_p)) + 0.5));
        lv_failsafe += 1;
        if ((gf_StructurePathable3x3(lv_p) == true)) {
        }
        else {
            if ((lv_failsafe < 50)) {
                lv_p = null;
            }
            else {
                lv_p = RegionGetCenter(lp_region);
                lv_deny = true;
            }
        }
    }
    if ((lv_deny == true)) {
        lv_p = null;
    }
    else {
    }
    return lv_p;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetBuildLocation4x4
//--------------------------------------------------------------------------------------------------
point gf_GetBuildLocation4x4 (region lp_region) {
    // Variable Declarations
    point lv_p;
    int lv_failsafe;
    bool lv_deny;
    // Variable Initialization
    // Implementation
    while ((lv_p == null)) {
        lv_p = RegionRandomPoint(lp_region);
        lv_p = Point(Round(PointGetX(lv_p)), Round(PointGetY(lv_p)));
        lv_failsafe += 1;
        if ((gf_StructurePathable4x4(lv_p) == true)) {
        }
        else {
            if ((lv_failsafe < 50)) {
                lv_p = null;
            }
            else {
                lv_p = RegionGetCenter(lp_region);
                lv_deny = true;
            }
        }
    }
    if ((lv_deny == true)) {
        lv_p = null;
    }
    else {
    }
    return lv_p;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StructurePathable2x2
//--------------------------------------------------------------------------------------------------
bool gf_StructurePathable2x2 (point lp_point) {
    int auto55F90FB2_ae;
    int auto55F90FB2_ai;
    int auto7267C3FA_ae;
    int auto7267C3FA_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    region lv_rect;
    bool lv_value;
    // Variable Initialization
    lv_rect = RegionRect((PointGetX(lp_point) - 1.0), (PointGetY(lp_point) - 1.0), (PointGetX(lp_point) + 1.0), (PointGetY(lp_point) + 1.0));
    lv_value = true;
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, lv_rect, UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        auto55F90FB2_ae = 2;
        auto55F90FB2_ai = 1;
        lv_a = 1;
        for ( ; ( (auto55F90FB2_ai >= 0 && lv_a <= auto55F90FB2_ae) || (auto55F90FB2_ai <= 0 && lv_a >= auto55F90FB2_ae) ) ; lv_a += auto55F90FB2_ai ) {
            auto7267C3FA_ae = 2;
            auto7267C3FA_ai = 1;
            lv_b = 1;
            for ( ; ( (auto7267C3FA_ai >= 0 && lv_b <= auto7267C3FA_ae) || (auto7267C3FA_ai <= 0 && lv_b >= auto7267C3FA_ae) ) ; lv_b += auto7267C3FA_ai ) {
                lv_p = PointWithOffset(lp_point, (-1.5 + lv_a), (-1.5 + lv_b));
                if ((PathingType(lv_p) == c_pathingGround)) {
                }
                else {
                    lv_value = false;
                }
            }
        }
    }
    else {
        lv_value = false;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StructurePathable3x3
//--------------------------------------------------------------------------------------------------
bool gf_StructurePathable3x3 (point lp_point) {
    int auto7AC9A611_ae;
    int auto7AC9A611_ai;
    int autoB38528A1_ae;
    int autoB38528A1_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    region lv_rect;
    bool lv_value;
    // Variable Initialization
    lv_rect = RegionRect((PointGetX(lp_point) - 1.5), (PointGetY(lp_point) - 1.5), (PointGetX(lp_point) + 1.5), (PointGetY(lp_point) + 1.5));
    lv_value = true;
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, lv_rect, UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        auto7AC9A611_ae = 3;
        auto7AC9A611_ai = 1;
        lv_a = 1;
        for ( ; ( (auto7AC9A611_ai >= 0 && lv_a <= auto7AC9A611_ae) || (auto7AC9A611_ai <= 0 && lv_a >= auto7AC9A611_ae) ) ; lv_a += auto7AC9A611_ai ) {
            autoB38528A1_ae = 3;
            autoB38528A1_ai = 1;
            lv_b = 1;
            for ( ; ( (autoB38528A1_ai >= 0 && lv_b <= autoB38528A1_ae) || (autoB38528A1_ai <= 0 && lv_b >= autoB38528A1_ae) ) ; lv_b += autoB38528A1_ai ) {
                lv_p = PointWithOffset(lp_point, (-2 + lv_a), (-2 + lv_b));
                if ((PathingType(lv_p) == c_pathingGround)) {
                }
                else {
                    lv_value = false;
                }
            }
        }
    }
    else {
        lv_value = false;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StructurePathable4x4
//--------------------------------------------------------------------------------------------------
bool gf_StructurePathable4x4 (point lp_point) {
    int auto44067D85_ae;
    int auto44067D85_ai;
    int auto496B37DA_ae;
    int auto496B37DA_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    region lv_rect;
    bool lv_value;
    // Variable Initialization
    lv_rect = RegionRect((PointGetX(lp_point) - 2.0), (PointGetY(lp_point) - 2.0), (PointGetX(lp_point) + 2.0), (PointGetY(lp_point) + 2.0));
    lv_value = true;
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, lv_rect, UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        auto44067D85_ae = 4;
        auto44067D85_ai = 1;
        lv_a = 1;
        for ( ; ( (auto44067D85_ai >= 0 && lv_a <= auto44067D85_ae) || (auto44067D85_ai <= 0 && lv_a >= auto44067D85_ae) ) ; lv_a += auto44067D85_ai ) {
            auto496B37DA_ae = 4;
            auto496B37DA_ai = 1;
            lv_b = 1;
            for ( ; ( (auto496B37DA_ai >= 0 && lv_b <= auto496B37DA_ae) || (auto496B37DA_ai <= 0 && lv_b >= auto496B37DA_ae) ) ; lv_b += auto496B37DA_ai ) {
                lv_p = PointWithOffset(lp_point, (-2.5 + lv_a), (-2.5 + lv_b));
                if ((PathingType(lv_p) == c_pathingGround)) {
                }
                else {
                    lv_value = false;
                }
            }
        }
    }
    else {
        lv_value = false;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WantedItemType
//--------------------------------------------------------------------------------------------------
string gf_WantedItemType (unit lp_kobold, string lp_craftingStation) {
    // Variable Declarations
    int lv_i;
    unit lv_kobold;
    string lv_needsItemType;
    int lv_mainHandLevel;
    int lv_offhandLevel;
    int lv_armorLevel;
    int lv_owner;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_kobold = lp_kobold;
    lv_owner = UnitGetOwner(lv_kobold);
    // Implementation
    if ((gv_questIndexActive != 2) && (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) && (gf_IsGladiator(lp_kobold) == false)) {
        lv_mainHandLevel = gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(lp_kobold)), lv_i);
        lv_offhandLevel = gf_GetItemLevel(UnitGetType(gf_KoboldOffhand(lp_kobold)), lv_i);
        lv_armorLevel = gf_GetItemLevel(UnitGetType(gf_KoboldArmor(lp_kobold)), lv_i);
        if ((gv_questIndexActive == 11) && (lp_craftingStation == "Smithy") && (UnitGroupCount(UnitGroupFilter("IronShovel", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && gf_HasMaterialsFor(lp_kobold, "IronShovel")) {
            lv_needsItemType = "IronShovel";
        }
        else if ((gv_skillArtisanship[lv_i] >= 25) && (lp_craftingStation == "Smithy") && (gf_GetItemLevel("LiquidatorSpellblade", lv_i) > lv_mainHandLevel) && gf_HasMaterialsFor(lp_kobold, "LiquidatorSpellblade")) {
            lv_needsItemType = "LiquidatorSpellblade";
        }
        else if ((gv_skillArtisanship[lv_i] >= 20) && (lp_craftingStation == "Workbench") && (UnitHasBehavior(lp_kobold, "ViciousJavelin") == false) && (gf_GetItemLevel("RepeatingCrossbow", lv_i) > lv_mainHandLevel) && gf_HasMaterialsFor(lp_kobold, "RepeatingCrossbow")) {
            lv_needsItemType = "RepeatingCrossbow";
        }
        else if ((gv_skillArtisanship[lv_i] >= 20) && (lp_craftingStation == "Smithy") && (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == "1") && (gf_GetItemLevel("GoldenHauberk", lv_i) > lv_armorLevel) && gf_HasMaterialsFor(lp_kobold, "GoldenHauberk")) {
            lv_needsItemType = "GoldenHauberk";
        }
        else if (((gv_skillArtisanship[lv_i] >= 15) && (gv_skillArtisanship[lv_i] <= 19)) && (lp_craftingStation == "Workbench") && (UnitHasBehavior(lp_kobold, "ViciousJavelin") == false) && (gf_GetItemLevel("ElderWand", lv_i) > lv_mainHandLevel) && gf_HasMaterialsFor(lp_kobold, "ElderWand")) {
            lv_needsItemType = "ElderWand";
        }
        else if ((gv_skillArtisanship[lv_i] >= 15) && (lp_craftingStation == "Workbench") && (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == "0") && (gf_GetItemLevel("VengefulMurlocSkull", lv_i) > lv_offhandLevel) && gf_HasMaterialsFor(lp_kobold, "VengefulMurlocSkull")) {
            lv_needsItemType = "VengefulMurlocSkull";
        }
        else if ((gv_skillArtisanship[lv_i] >= 15) && (lp_craftingStation == "Smithy") && (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == "1") && (gf_GetItemLevel("HeavyTowerShield", lv_i) > lv_offhandLevel) && gf_HasMaterialsFor(lp_kobold, "HeavyTowerShield")) {
            lv_needsItemType = "HeavyTowerShield";
        }
        else if (((gv_skillArtisanship[lv_i] >= 15) && (gv_skillArtisanship[lv_i] <= 19)) && (lp_craftingStation == "Smithy") && (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == "1") && (gf_GetItemLevel("HeavyIronBreastplate", lv_i) > lv_armorLevel) && gf_HasMaterialsFor(lp_kobold, "HeavyIronBreastplate")) {
            lv_needsItemType = "HeavyIronBreastplate";
        }
        else if ((gv_skillArtisanship[lv_i] >= 15) && (lp_craftingStation == "Workbench") && (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == "0") && (gf_GetItemLevel("BearShamansShroud", lv_i) > lv_armorLevel) && gf_HasMaterialsFor(lp_kobold, "BearShamansShroud")) {
            lv_needsItemType = "BearShamansShroud";
        }
        else if (((gv_skillArtisanship[lv_i] >= 10) && (gv_skillArtisanship[lv_i] <= 14)) && (lp_craftingStation == "Smithy") && (gf_RangedWeapon(lp_kobold) == false) && (gf_GetItemLevel("ViciousJavelin", lv_i) > lv_offhandLevel) && gf_HasMaterialsFor(lp_kobold, "ViciousJavelin")) {
            lv_needsItemType = "ViciousJavelin";
        }
        else if (((gv_skillArtisanship[lv_i] >= 10) && (gv_skillArtisanship[lv_i] <= 14)) && (lp_craftingStation == "Smithy") && (gf_GetItemLevel("IronStuddedVest", lv_i) > lv_armorLevel) && gf_HasMaterialsFor(lp_kobold, "IronStuddedVest")) {
            lv_needsItemType = "IronStuddedVest";
        }
        else if (((gv_skillArtisanship[lv_i] >= 10) && (gv_skillArtisanship[lv_i] <= 14)) && (lp_craftingStation == "Smithy") && (gf_GetItemLevel("BerserkersBattleAxe", lv_i) > lv_mainHandLevel) && gf_HasMaterialsFor(lp_kobold, "BerserkersBattleAxe")) {
            lv_needsItemType = "BerserkersBattleAxe";
        }
        else if (((gv_skillArtisanship[lv_i] >= 5) && (gv_skillArtisanship[lv_i] <= 9)) && (lp_craftingStation == "Workbench") && (UnitHasBehavior(lp_kobold, "ViciousJavelin") == false) && (StringSub(gv_aIData[lv_i].lv_customization, 5, 5) == "0") && (gf_GetItemLevel("CelestialOrb", lv_i) > lv_mainHandLevel) && gf_HasMaterialsFor(lp_kobold, "CelestialOrb")) {
            lv_needsItemType = "CelestialOrb";
        }
        else if (((gv_skillArtisanship[lv_i] >= 5) && (gv_skillArtisanship[lv_i] <= 9)) && (lp_craftingStation == "Workbench") && (UnitHasBehavior(lp_kobold, "ViciousJavelin") == false) && (StringSub(gv_aIData[lv_i].lv_customization, 5, 5) == "1") && (gf_GetItemLevel("RoughBlunderbuss", lv_i) > lv_mainHandLevel) && gf_HasMaterialsFor(lp_kobold, "RoughBlunderbuss")) {
            lv_needsItemType = "RoughBlunderbuss";
        }
        else if (((((gv_skillArtisanship[lv_i] >= 5) && (gv_skillArtisanship[lv_i] <= 14)) && (gf_RangedWeapon(lp_kobold) == true)) || (((gv_skillArtisanship[lv_i] >= 5) && (gv_skillArtisanship[lv_i] <= 9)) && (gf_RangedWeapon(lp_kobold) == false))) && (lp_craftingStation == "Workbench") && (StringSub(gv_aIData[lv_i].lv_customization, 6, 6) == "1") && (gf_GetItemLevel("MysticsTribalShield", lv_i) > lv_offhandLevel) && gf_HasMaterialsFor(lp_kobold, "MysticsTribalShield")) {
            lv_needsItemType = "MysticsTribalShield";
        }
        else if (((gv_skillArtisanship[lv_i] >= 5) && (gv_skillArtisanship[lv_i] <= 14)) && (lp_craftingStation == "Workbench") && (StringSub(gv_aIData[lv_i].lv_customization, 3, 3) == "0") && (gf_GetItemLevel("LeatherCoat", lv_i) > lv_armorLevel) && gf_HasMaterialsFor(lp_kobold, "LeatherCoat") && (!(((UnitHasBehavior(lv_kobold, "WarmWoolTunic") == true) && (gv_skillArtisanship[lv_i] >= 10)))) && (true)) {
            lv_needsItemType = "LeatherCoat";
        }
        else if (((gv_skillArtisanship[lv_i] >= 5) && (gv_skillArtisanship[lv_i] <= 14)) && (lp_craftingStation == "Workbench") && (StringSub(gv_aIData[lv_i].lv_customization, 3, 3) == "1") && (gf_GetItemLevel("HuntsmansJacket", lv_i) > lv_armorLevel) && gf_HasMaterialsFor(lp_kobold, "HuntsmansJacket") && (!(((UnitHasBehavior(lv_kobold, "WarmWoolTunic") == true) && (gv_skillArtisanship[lv_i] >= 10))))) {
            lv_needsItemType = "HuntsmansJacket";
        }
        else if (((((gv_skillArtisanship[lv_i] >= 5) && (gv_skillArtisanship[lv_i] <= 14)) && (gf_RangedWeapon(lp_kobold) == true)) || (((gv_skillArtisanship[lv_i] >= 5) && (gv_skillArtisanship[lv_i] <= 9)) && (gf_RangedWeapon(lp_kobold) == false))) && (lp_craftingStation == "Smithy") && (StringSub(gv_aIData[lv_i].lv_customization, 6, 6) == "0") && (gf_GetItemLevel("IronBandedBuckler", lv_i) > lv_offhandLevel) && gf_HasMaterialsFor(lp_kobold, "IronBandedBuckler")) {
            lv_needsItemType = "IronBandedBuckler";
        }
        else if ((lp_craftingStation == "Workbench") && gf_HasMaterialsFor(lp_kobold, "Lantern") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_lanterns)) {
            lv_needsItemType = "Lantern";
        }
        else if ((lp_craftingStation == "Workbench") && ((gf_GetItemLevel("SturdyWoodenStick", lv_i) > lv_mainHandLevel) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sturdyWoodenSticks, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_sturdyWoodenSticks)) && gf_HasMaterialsFor(lp_kobold, "SturdyWoodenStick")) {
            lv_needsItemType = "SturdyWoodenStick";
        }
        else if ((lp_craftingStation == "Workbench") && ((gf_GetItemLevel("WarmWoolTunic", lv_i) > lv_armorLevel) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_warmWoolTunics, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_warmWoolTunics)) && gf_HasMaterialsFor(lp_kobold, "WarmWoolTunic")) {
            lv_needsItemType = "WarmWoolTunic";
        }
    }
    else {
    }
    return lv_needsItemType;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HasMaterialsFor
//--------------------------------------------------------------------------------------------------
bool gf_HasMaterialsFor (unit lp_builder, string lp_unitType) {
    string auto3E61AAC5_val;
    // Variable Declarations
    int lv_i;
    bool lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_builder);
    // Implementation
    if ((UnitTypeTestAttribute(lp_unitType, c_unitAttributeStructure) == true)) {
        auto3E61AAC5_val = lp_unitType;
        if (auto3E61AAC5_val == "Tent") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) + UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive)) >= 1)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "CampfireLit") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "Workbench") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 1)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "Smithy") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 1)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "Farm") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "Tavern") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 2)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "StorageOutpost") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 3) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) + UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive)) >= 2)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "HuntersLodge") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 3)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "AutomatedDefenseTurret") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "LorenorStatue") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 9) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 9)) {
                lv_value = true;
            }
            else {
            }
        }
        else if (auto3E61AAC5_val == "Fortress") {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 10) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 6)) {
                lv_value = true;
            }
            else {
            }
        }
        else {
        }
    }
    else {
        if ((lp_unitType == "LiquidatorSpellblade") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) >= 1) && (UnitGroupCount(UnitGroupFilter("Nightwisp", lv_i, libNtve_gf_UnitsInUnitGroupWithCustomValue(gv_pets[lv_i], 0, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "RepeatingCrossbow") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "GoldenHauberk") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) >= 3)) {
            lv_value = true;
        }
        else if ((lp_unitType == "ElderWand") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "VengefulMurlocSkull") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "CelestialOrb") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "RoughBlunderbuss") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "LeatherCoat") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "BerserkersBattleAxe") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "SturdyWoodenStick") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 2)) {
            lv_value = true;
        }
        else if ((lp_unitType == "WarmWoolTunic") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) >= 2)) {
            lv_value = true;
        }
        else if ((lp_unitType == "IronBandedBuckler") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "IronStuddedVest") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_warmWoolTunics, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "HeavyTowerShield") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "HeavyIronBreastplate") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) >= 2)) {
            lv_value = true;
        }
        else if ((lp_unitType == "BearShamansShroud") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "HuntsmansJacket") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "MysticsTribalShield") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "ObedienceRod") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "IronShovel") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "ViciousJavelin") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sturdyWoodenSticks, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "Lantern") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "FishingRod") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "StagStew") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawStag, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "RoastedPheasantWithBerrySauce") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "SpicedLambFeast") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawLamb, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "GrilledWolfEntrecote") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawWolf, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "BeerBraisedPheasant") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_beer, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
        else if ((lp_unitType == "Kobold") && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) >= 1)) {
            lv_value = true;
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIWatchTower
//--------------------------------------------------------------------------------------------------
bool gf_AIWatchTower (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_t = gv_playerData[lv_i].lv_team;
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((gv_gameMode == 2)) {
        if ((gf_UnitExists(gv_teamData[lv_t].lv_watchTower) == false)) {
            if ((gv_teamData[lv_t].lv_aIWatchTowerBuilder == 0) && ((TimerGetElapsed(gv_watchTowerTimer) > 0.0) || (GameGetMissionTime() > 300.0))) {
                gv_teamData[lv_t].lv_aIWatchTowerBuilder = lv_i;
                TextExpressionSetToken("Param/Expression/A458AC05", "A", gf_GetPlayerName(lv_i, 0));
                TextExpressionSetToken("Param/Expression/A458AC05", "B", StringExternal("Param/Value/2F1DF187"));
                TextExpressionSetToken("Param/Expression/E33BF228", "A", StringExternal("Param/Value/B403E9C0"));
                TextExpressionSetToken("Param/Expression/E33BF228", "B", TextWithColor(TextExpressionAssemble("Param/Expression/A458AC05"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                TextExpressionSetToken("Param/Expression/E33BF228", "C", StringToText(gv_aIWatchTowerBuilder[RandomInt(1, gv_aIWatchTowerBuilderAmount)]));
                UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/E33BF228"));
            }
            else {
                lv_a = UnitGroup("Fortress", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b) && (libNtve_gf_UnitIsUnderConstruction(lv_b) == true) && (lv_i == UnitGetOwner(lv_b))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                }
                else {
                    if ((gv_teamData[lv_t].lv_aIWatchTowerBuilder == lv_i) && (gf_IsGladiator(lp_kobold) == false) && ((gv_dayNight == 1) || (UnitHasBehavior(lp_kobold, "Torch") == true) || (UnitHasBehavior(lp_kobold, "Lantern") == true) || (UnitHasBehavior(lp_kobold, "FelFireTorch") == true) || (UnitHasBehavior(lp_kobold, "Heat") == true)) && gf_HasMaterialsFor(lp_kobold, "Fortress") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 16), null)) {
                    }
                    else {
                        if ((lv_i != gv_teamData[lv_t].lv_aIWatchTowerBuilder) && (UnitHasBehavior(gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_kobold, "Constructing") == false)) {
                            if ((UnitGroupCount(gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_resources.lv_lumber, c_unitCountAlive) < 4) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) > 1) && gf_AIBringItemToUnit(lp_kobold, UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lumber, 1), gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_kobold)) {
                            }
                            else {
                                if ((UnitGroupCount(gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_resources.lv_stone, c_unitCountAlive) < 12) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) > 1) && gf_AIBringItemToUnit(lp_kobold, UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_stone, 1), gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_kobold)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
            }
        }
        else {
            if ((UnitGetCustomValue(gv_teamData[lv_t].lv_watchTower, 1) <= 10.0) && (libNtve_gf_UnitIsUnderConstruction(gv_teamData[lv_t].lv_watchTower) == false) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroupFilter("IronOre", c_playerAny, UnitInventoryGroup(gv_teamData[lv_t].lv_watchTower), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) >= 1))) {
                if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)) <= gv_interactRadius)) {
                    gf_PlayerUseUnitAbility(lv_i, gv_teamData[lv_t].lv_watchTower, AbilityCommand("WatchTowerRefillAmmunition", 0));
                }
                else {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)), c_orderQueueReplace);
                }
            }
            else {
                lv_success = false;
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AISmithy
//--------------------------------------------------------------------------------------------------
bool gf_AISmithy (unit lp_kobold, string lp_wantedItem) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((lp_wantedItem != null) && (gf_UnitIsBusy(lp_kobold) == false) && gf_HasMaterialsFor(lp_kobold, lp_wantedItem) && ((gv_dayNight == 1) || (UnitHasBehavior(lp_kobold, "Torch") == true) || (UnitHasBehavior(lp_kobold, "Lantern") == true) || (UnitHasBehavior(lp_kobold, "FelFireTorch") == true) || (UnitHasBehavior(lp_kobold, "Heat") == true))) {
        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Smithy", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b)) {
            gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand((("Forge" + (lp_wantedItem))), 0));
        }
        else {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Smithy", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b)) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            }
            else {
                if (gf_HasMaterialsFor(lp_kobold, "Smithy") && (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i)) {
                    if (gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 4), "CampfireLit")) {
                    }
                    else {
                        lv_success = false;
                    }
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIWorkbench
//--------------------------------------------------------------------------------------------------
bool gf_AIWorkbench (unit lp_kobold, string lp_wantedItem) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((lp_wantedItem != null) && (gf_UnitIsBusy(lp_kobold) == false) && gf_HasMaterialsFor(lp_kobold, lp_wantedItem) && ((gv_dayNight == 1) || (UnitHasBehavior(lp_kobold, "Torch") == true) || (UnitHasBehavior(lp_kobold, "Lantern") == true) || (UnitHasBehavior(lp_kobold, "FelFireTorch") == true) || (UnitHasBehavior(lp_kobold, "Heat") == true))) {
        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Workbench", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b)) {
            gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand((("Craft" + (lp_wantedItem))), 0));
        }
        else {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Workbench", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 96)) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            }
            else {
                if (gf_HasMaterialsFor(lp_kobold, "Workbench") && (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i)) {
                    if (gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 3), "CampfireLit")) {
                    }
                    else {
                        lv_success = false;
                    }
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AISheep
//--------------------------------------------------------------------------------------------------
bool gf_AISheep (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    bool lv_b_WantFood;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    lv_b_WantFood = gf_WantRawLamb(lp_kobold);
    // Implementation
    if (((lv_b_WantFood == true) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_wool))) {
        if ((lv_b_WantFood == true) && gf_FindPickupItem(lp_kobold, "RawLamb")) {
        }
        else {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_wool) && gf_FindPickupItem(lp_kobold, "Wool")) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            }
            else {
                if (gf_AITradeBuyWithdraw(lp_kobold, "Wool", gv_aIData[lv_i].lv_supply.lv_wool, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    lv_a = UnitGroup("Sheep", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Farm", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        if ((UnitGroupCount(lv_a, c_unitCountAlive) == 0) && gf_HasMaterialsFor(lp_kobold, "Farm") && (gv_dayNight == 1) && (GameGetMissionTime() > 60.0) && (AbsF((gv_dayDuration - libNtve_gf_DialogItemValue(gv_dayTimerProgress, lv_i))) > 20.0)) {
                            if (gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 2), "CampfireLit")) {
                            }
                            else {
                                lv_success = false;
                            }
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIPhez
//--------------------------------------------------------------------------------------------------
bool gf_AIPhez (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_b_WantFood;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_b_WantFood = gf_WantRawBird(lp_kobold);
    lv_success = true;
    // Implementation
    if ((lv_b_WantFood == true)) {
        if (gf_FindPickupItem(lp_kobold, "RawPheasant")) {
        }
        else {
            if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "Pheasant") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 128)) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
            }
            else {
                if ((gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][3] == false) && (gv_questIndexActive == 5) && (gv_skillCooking[lv_i] >= 10)) {
                    lv_a = UnitGroup("Pheasant", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                }
                else {
                    lv_a = UnitGroup("Pheasant", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                }
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 128)) {
                    gv_aIData[lv_i].lv_focalNode = lv_b;
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITrees
//--------------------------------------------------------------------------------------------------
bool gf_AITrees (unit lp_kobold, int lp_priority) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    bool lv_b_WantLumber;
    bool lv_b_WantInfusedLumber;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    lv_b_WantLumber = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_lumber);
    lv_b_WantInfusedLumber = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_infusedLumber);
    // Implementation
    if ((GameGetMissionTime() > 30.0) && (UnitAbilityGetCooldown(lp_kobold, "PlantTree", "Abil/PlantTree") == 0.0) && gf_AIBuildStructure(lp_kobold, AbilityCommand("PlantTree", 0), null)) {
    }
    else {
        if ((gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) < (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) + 1)) && gf_FindPickupItem(lp_kobold, "InfusedLumber")) {
        }
        else {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_lumber) && gf_FindPickupItem(lp_kobold, "Lumber")) {
            }
            else {
                if (gf_AITradeBuyWithdraw(lp_kobold, "Lumber", gv_aIData[lv_i].lv_supply.lv_lumber, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, "InfusedLumber", gv_aIData[lv_i].lv_supply.lv_infusedLumber, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (((UnitGetType(gv_aIData[lv_i].lv_focalNode) == "MapleTree") && (lv_b_WantLumber == true)) || ((UnitGetType(gv_aIData[lv_i].lv_focalNode) == "ElderTree") && ((lv_b_WantLumber == true) || (lv_b_WantInfusedLumber == true)))) && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 64)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                            if ((gv_skillForestry[lv_i] >= 5)) {
                                TimerStart(gv_aIData[lv_i].lv_lumberjackTimer, 2.0, false, c_timeGame);
                            }
                            else {
                            }
                        }
                        else {
                            lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("MapleTree", c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 1.0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if ((lp_priority == 1) && gf_UnitExists(lv_b) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) == 0) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                                gv_aIData[lv_i].lv_focalNode = lv_b;
                            }
                            else {
                                lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("ElderTree", c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 1.0);
                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                if ((lp_priority == 2) && gf_UnitExists(lv_b) && ((lv_b_WantLumber == true) || (lv_b_WantInfusedLumber == true)) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                                    gv_aIData[lv_i].lv_focalNode = lv_b;
                                }
                                else {
                                    lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("MapleTree", c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 1.0);
                                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                    if ((lp_priority == 2) && gf_UnitExists(lv_b) && (lv_b_WantLumber == true) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                                        gv_aIData[lv_i].lv_focalNode = lv_b;
                                    }
                                    else {
                                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("MapleTree", "", "", c_playerAny, -1, RegionCircle(UnitGetPosition(lp_kobold), StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "NaturesGrace", "Range[" + IntToString(0) + "]", lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                        UnitGroupRemoveUnitGroup(lv_a, libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 1.0));
                                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b) && (lv_b_WantLumber == true) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "NaturesGrace", "Range[" + IntToString(0) + "]", lv_i))) && (libNtve_gf_UnitIsVisibleToPlayer(lv_b, lv_i) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergyPercent, c_unitPropCurrent) >= 90.0) && (UnitGetPropertyFixed(lv_b, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) && gf_AICanCastSpell(lp_kobold, AbilityCommand("NaturesGrace", 0))) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("NaturesGrace", 0), lv_b), c_orderQueueReplace);
                                        }
                                        else {
                                            lv_success = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIStone
//--------------------------------------------------------------------------------------------------
bool gf_AIStone (unit lp_kobold, int lp_priority) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((gv_playerData[lv_i].lv_stamina >= 10.0) && (((lp_priority == 1) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) == 0)) || ((lp_priority == 2) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_stone) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_ironOre) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_shadowstone))))) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_stone) && gf_FindPickupItem(lp_kobold, "Stone")) {
        }
        else {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_ironOre) && gf_FindPickupItem(lp_kobold, "IronOre")) {
            }
            else {
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_shadowstone) && gf_FindPickupItem(lp_kobold, "Shadowstone")) {
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, "Stone", gv_aIData[lv_i].lv_supply.lv_stone, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        if (gf_AITradeBuyWithdraw(lp_kobold, "IronOre", gv_aIData[lv_i].lv_supply.lv_ironOre, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                        }
                        else {
                            if (gf_AITradeBuyWithdraw(lp_kobold, "Shadowstone", gv_aIData[lv_i].lv_supply.lv_shadowstone, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                            }
                            else {
                                if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "StoneDeposit") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 64)) {
                                    if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MineralTap", "Range[" + IntToString(0) + "]", lv_i))) && (UnitHasBehavior(gv_aIData[lv_i].lv_focalNode, "MineralTap") == false) && gf_AICanCastSpell(lp_kobold, AbilityCommand("MineralTap", 0))) {
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("MineralTap", 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueAddToEnd);
                                    }
                                    else {
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                    }
                                    UnitBehaviorAdd(lp_kobold, "BriefPassivity", lp_kobold, 1);
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                                }
                                else {
                                    lv_a = UnitGroup("StoneDeposit", c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                    if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                        gv_aIData[lv_i].lv_focalNode = lv_b;
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIGold
//--------------------------------------------------------------------------------------------------
bool gf_AIGold (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if (gf_AITradeBuyWithdraw(lp_kobold, "RadiantGem", gv_aIData[lv_i].lv_supply.lv_radiantGems, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
    }
    else {
        if ((gv_playerData[lv_i].lv_stamina >= 25.0) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_radiantGems)) {
            if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "GoldDeposit") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 64)) {
                if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MineralTap", "Range[" + IntToString(0) + "]", lv_i))) && (UnitHasBehavior(gv_aIData[lv_i].lv_focalNode, "MineralTap") == false) && gf_AICanCastSpell(lp_kobold, AbilityCommand("MineralTap", 0))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("MineralTap", 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                }
                UnitBehaviorAdd(lp_kobold, "BriefPassivity", lp_kobold, 1);
                UnitIssueOrder(lp_kobold, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }
            else {
                lv_a = UnitGroup("GoldDeposit", c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                    gv_aIData[lv_i].lv_focalNode = lv_b;
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                }
                else {
                    lv_success = false;
                }
            }
        }
        else {
            lv_success = false;
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIWolves
//--------------------------------------------------------------------------------------------------
bool gf_AIWolves (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_flee;
    bool lv_b_StrongerThanWolves;
    bool lv_b_WantBearPelt;
    bool lv_b_WantFood;
    bool lv_b_WantLeather;
    bool lv_b_WantFoodOrLeather;
    bool lv_b_WantTame;
    bool lv_b_LumberMoreImportant;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_b_StrongerThanWolves = gf_StrongerThanDirewolves(lp_kobold);
    lv_b_WantBearPelt = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_bearPelt);
    lv_b_WantFood = gf_WantRawWolf(lp_kobold);
    lv_b_WantLeather = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) < (gv_aIData[lv_i].lv_supply.lv_leather + gv_aIData[lv_i].lv_supply.lv_leatherBonus));
    lv_b_WantFoodOrLeather = (lv_b_WantFood || lv_b_WantLeather);
    lv_b_WantTame = ((UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) < StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lv_i))) && (((UnitGroupCount(UnitGroupFilter("Dog", c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroupFilter("Lyote", c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) == 0) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_obedRods, c_unitCountAlive) > 0)));
    lv_b_LumberMoreImportant = ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) == 0) && (UnitHasBehavior(lp_kobold, "Frostbite") || (gv_raining || (gv_winter || !(gv_b_Day)))));
    lv_success = true;
    // Implementation
    if ((lv_b_StrongerThanWolves == false) && (gv_dayNight == 2)) {
        UnitIssueOrder(lp_kobold, Order(AbilityCommand("KoboldTestBuild", 30)), c_orderQueueReplace);
        if (gf_AIQuickwarmth(lp_kobold)) {
        }
        else {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64) && ((UnitGetType(gf_KoboldOffhand(lp_kobold)) == "Torch") || (UnitGetType(gf_KoboldOffhand(lp_kobold)) == "Lantern") || (UnitGetType(gf_KoboldOffhand(lp_kobold)) == "FelFireTorch"))) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                if (gf_AICanCastSpell(lp_kobold, AbilityCommand("ShadowCloak", 0))) {
                    UnitIssueOrder(lp_kobold, Order(AbilityCommand("ShadowCloak", 0)), c_orderQueueReplace);
                    TimerStart(gv_aIData[lv_i].lv_shadowCloakMinimum, 5.0, false, c_timeGame);
                }
                else {
                }
            }
            else {
                lv_a = UnitGroup("Lyote", 15, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b)) {
                    if (gf_AICanCastSpell(lp_kobold, AbilityCommand("GuardianSpirit", 0))) {
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand("GuardianSpirit", 0)), c_orderQueueReplace);
                    }
                    else {
                        if (gf_AICanCastSpell(lp_kobold, AbilityCommand("SiphonLife", 0))) {
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand("SiphonLife", 0)), c_orderQueueReplace);
                        }
                        else {
                            if (gf_AICanCastSpell(lp_kobold, AbilityCommand("FrostArmor", 0))) {
                                UnitIssueOrder(lp_kobold, Order(AbilityCommand("FrostArmor", 0)), c_orderQueueReplace);
                            }
                            else {
                                if (gf_AICanCastSpell(lp_kobold, AbilityCommand("Affliction", 0))) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("Affliction", 0), lv_b), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        if ((lv_b_WantFood == true) && gf_FindPickupItem(lp_kobold, "RawWolfMeat")) {
        }
        else {
            lv_b = UnitGroupRandomUnit(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive);
            if (gf_UnitExists(lv_b) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_bearPelt)) {
                gf_ItemBearPeltSplit(lp_kobold, lv_b, true);
            }
            else {
                if (((lv_b_WantBearPelt == true) || (lv_b_WantLeather == true)) && (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) < (gv_aIData[lv_i].lv_supply.lv_bearPelt + 1)) && gf_FindPickupItem(lp_kobold, "BearPelt")) {
                }
                else {
                    if ((lv_b_WantLeather == true) && gf_FindPickupItem(lp_kobold, "Leather")) {
                    }
                    else {
                        if (gf_AITradeBuyWithdraw(lp_kobold, "Leather", (gv_aIData[lv_i].lv_supply.lv_leather + gv_aIData[lv_i].lv_supply.lv_leatherBonus), false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                        }
                        else {
                            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Lyote", "", "", lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0))) && ((lv_b_WantFoodOrLeather == true) || (lv_b_WantTame == true)) && ((UnitHasBehavior(lp_kobold, "Running") == true) || ((UnitHasBehavior(lp_kobold, "Torch") == false) && (UnitHasBehavior(lp_kobold, "LanternLight") == false) && (UnitHasBehavior(lp_kobold, "FelFireTorch") == false)))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                                if ((lv_b_WantTame == true)) {
                                    TimerStart(gv_aIData[lv_i].lv_tamingTime, 4.0, false, c_timeGame);
                                }
                                else {
                                    if (gf_AICanCastSpell(lp_kobold, AbilityCommand("SiphonLife", 0))) {
                                        UnitIssueOrder(lp_kobold, Order(AbilityCommand("SiphonLife", 0)), c_orderQueueReplace);
                                    }
                                    else {
                                        if (gf_AICanCastSpell(lp_kobold, AbilityCommand("Affliction", 0))) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("Affliction", 0), lv_b), c_orderQueueReplace);
                                        }
                                        else {
                                        }
                                    }
                                }
                            }
                            else {
                                lv_a = UnitGroup("Dog", 0, RegionCircle(UnitGetPosition(lp_kobold), (gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                if (gf_UnitExists(lv_b) && (lv_b_LumberMoreImportant == false) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 4.0))) && ((lv_b_WantFoodOrLeather == true) || (lv_b_WantTame == true)) && ((UnitHasBehavior(lp_kobold, "Running") == true) || ((UnitHasBehavior(lp_kobold, "Torch") == false) && (UnitHasBehavior(lp_kobold, "LanternLight") == false) && (UnitHasBehavior(lp_kobold, "FelFireTorch") == false)))) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                                    if ((lv_b_WantTame == true)) {
                                        TimerStart(gv_aIData[lv_i].lv_tamingTime, 4.0, false, c_timeGame);
                                    }
                                    else {
                                        if (gf_AICanCastSpell(lp_kobold, AbilityCommand("SiphonLife", 0))) {
                                            UnitIssueOrder(lp_kobold, Order(AbilityCommand("SiphonLife", 0)), c_orderQueueReplace);
                                        }
                                        else {
                                        }
                                    }
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIRessurect
//--------------------------------------------------------------------------------------------------
bool gf_AIResurrect (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unit lv_b;
    bool lv_b_ImFineLetsRess;
    int lv_reviveTarget;
    bool lv_succeed;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_b_ImFineLetsRess = (!((UnitHasBehavior(lp_kobold, "Starving") || UnitHasBehavior(lp_kobold, "Frostbite"))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) >= 30.0));
    lv_reviveTarget = gf_GetRandomDeadPlayerOnTeam(gv_playerData[lv_i].lv_team);
    lv_succeed = true;
    // Implementation
    if ((lv_b_ImFineLetsRess == true) && ((lv_reviveTarget >= 1) && (lv_reviveTarget <= gv_players)) && gf_HasMaterialsFor(lp_kobold, "Kobold")) {
        if (gf_AIQuickwarmth(lp_kobold)) {
        }
        else {
            if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && ((UnitGetType(gv_aIData[lv_i].lv_focalNode) == "ResurrectionShrine") || (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "ResurrectionShrineSouth"))) {
                if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) <= gv_interactRadius)) {
                    gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_radiantGem, 1));
                    gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_shadowstone, 1));
                    gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_sunflowers, 1));
                    UnitCreateEffectUnit(lp_kobold, "ResurrectingApply", lp_kobold);
                    gf_Resurrecting(lp_kobold, gv_aIData[lv_i].lv_focalNode, lv_reviveTarget, 15.0);
                }
                else {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)), c_orderQueueReplace);
                    if ((UnitHasBehavior(lp_kobold, "SkipChatResurrect60") == false) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) <= 32.0)) {
                        TextExpressionSetToken("Param/Expression/476DA4F2", "A", gf_GetPlayerName(lv_i, 0));
                        TextExpressionSetToken("Param/Expression/476DA4F2", "B", StringExternal("Param/Value/44B8E68D"));
                        TextExpressionSetToken("Param/Expression/FD197A0A", "A", StringExternal("Param/Value/8407CBB0"));
                        TextExpressionSetToken("Param/Expression/FD197A0A", "B", TextWithColor(TextExpressionAssemble("Param/Expression/476DA4F2"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken("Param/Expression/FD197A0A", "C", StringToText(gv_aIReviveString[RandomInt(1, gv_aIReviveStringAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/FD197A0A"));
                        UnitBehaviorAdd(lp_kobold, "SkipChatResurrect60", lp_kobold, 1);
                    }
                    else {
                    }
                }
            }
            else {
                lv_b = gf_GetClosestResurrectionShrine(lp_kobold, false);
                if (gf_UnitExists(lv_b)) {
                    gv_aIData[lv_i].lv_focalNode = lv_b;
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                }
                else {
                    lv_succeed = false;
                }
            }
        }
    }
    else {
        lv_succeed = false;
    }
    return lv_succeed;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIBerries
//--------------------------------------------------------------------------------------------------
bool gf_AIBerries (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_b_WantHandfulOfBerries;
    bool lv_b_WantSageBerries;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_b_WantHandfulOfBerries = ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) == 0) && (((gv_skillCooking[lv_i] >= 5) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) > 0)) || ((gv_skillCooking[lv_i] >= 20) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawStag, c_unitCountAlive) > 0))));
    lv_b_WantSageBerries = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_sageberry);
    lv_success = true;
    // Implementation
    if (((lv_b_WantHandfulOfBerries == true) || (lv_b_WantSageBerries == true))) {
        if ((lv_b_WantHandfulOfBerries == true) && gf_FindPickupItem(lp_kobold, "HandfulofBerries")) {
        }
        else {
            if ((lv_b_WantSageBerries == true) && gf_FindPickupItem(lp_kobold, "Sageberry")) {
            }
            else {
                if (gf_AITradeBuyWithdraw(lp_kobold, "HandfulofBerries", 1, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, "Sageberry", gv_aIData[lv_i].lv_supply.lv_sageberry, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "BerryBush") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 64)) {
                            if ((UnitGetCustomValue(gv_aIData[lv_i].lv_focalNode, 0) < 10.0) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "NaturesGrace", "Range[" + IntToString(0) + "]", lv_i))) && gf_AICanCastSpell(lp_kobold, AbilityCommand("NaturesGrace", 0))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("NaturesGrace", 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueAddToEnd);
                            }
                            else {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                            }
                            UnitBehaviorAdd(lp_kobold, "BriefPassivity", lp_kobold, 1);
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                        }
                        else {
                            lv_a = UnitGroup("BerryBush", c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                gv_aIData[lv_i].lv_focalNode = lv_b;
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIHerbs
//--------------------------------------------------------------------------------------------------
bool gf_AIHerbs (unit lp_kobold, int lp_priority) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    fixed lv_r;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((((lp_priority == 1) && ((gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsAlive < gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsTotal) || ((gv_questIndexActive == 5) && (gv_skillCooking[lv_i] >= 5) && ((gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][1] == false) || (gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][2] == false))))) || (lp_priority == 2)) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_spicyHerbs) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_sunflowers))) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_sunflowers) && gf_FindPickupItem(lp_kobold, "LambentSunflower")) {
        }
        else {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_spicyHerbs) && gf_FindPickupItem(lp_kobold, "SpicyHerbs")) {
            }
            else {
                if (gf_AITradeBuyWithdraw(lp_kobold, "LambentSunflower", gv_aIData[lv_i].lv_supply.lv_sunflowers, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, "SpicyHerbs", gv_aIData[lv_i].lv_supply.lv_spicyHerbs, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitGetType(gv_aIData[lv_i].lv_focalNode) == "CulinaryHerbBush") && gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 128)) {
                            if ((UnitGetCustomValue(gv_aIData[lv_i].lv_focalNode, 0) < 10.0) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "NaturesGrace", "Range[" + IntToString(0) + "]", lv_i))) && gf_AICanCastSpell(lp_kobold, AbilityCommand("NaturesGrace", 0))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("NaturesGrace", 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                            }
                            else {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                            }
                            UnitBehaviorAdd(lp_kobold, "BriefPassivity", lp_kobold, 1);
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                        }
                        else {
                            lv_a = UnitGroup("CulinaryHerbBush", c_playerAny, gf_WeightedInterestRegion(lp_kobold, 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) && gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 128)) {
                                gv_aIData[lv_i].lv_focalNode = lv_b;
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIStags
//--------------------------------------------------------------------------------------------------
bool gf_AIStags (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_b_HuntStags;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_b_HuntStags = (gf_WantRawStag(lp_kobold) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_antlers));
    lv_success = true;
    // Implementation
    if ((gf_WantRawStag(lp_kobold) == true) && gf_FindPickupItem(lp_kobold, "RawStagMeat")) {
    }
    else {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_antlers) && gf_FindPickupItem(lp_kobold, "Antlers")) {
        }
        else {
            if (gf_AITradeBuyWithdraw(lp_kobold, "Antlers", gv_aIData[lv_i].lv_supply.lv_antlers, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
            }
            else {
                if ((lv_b_HuntStags == true) && ((UnitHasBehavior(lp_kobold, "AIProwlsStag") == true) || (gf_AICanCastSpell(lp_kobold, AbilityCommand("Affliction", 0)) && gf_RangedWeapon(lp_kobold)) || gf_AICanCastSpell(lp_kobold, AbilityCommand("ShadowCloak", 0)))) {
                    lv_a = UnitGroup("Stag", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b)) {
                        if (gf_AICanCastSpell(lp_kobold, AbilityCommand("ShadowCloak", 0))) {
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand("ShadowCloak", 0)), c_orderQueueReplace);
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                        }
                        else {
                            if (gf_AICanCastSpell(lp_kobold, AbilityCommand("Affliction", 0))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("Affliction", 0), lv_b), c_orderQueueReplace);
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueAddToEnd);
                            }
                            else {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                            }
                        }
                        if ((UnitHasBehavior(lp_kobold, "ShadowCloak") == true) && gf_RangedWeapon(lp_kobold) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) > 2.0)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("move", 0), lv_b), c_orderQueueReplace);
                        }
                        else {
                        }
                        UnitBehaviorAdd(lp_kobold, "AIProwlsStag", lp_kobold, 1);
                    }
                    else {
                        lv_a = UnitGroup("Stag", c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("move", 0), lv_b), c_orderQueueReplace);
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AINightwisp
//--------------------------------------------------------------------------------------------------
bool gf_AINightwisp (unit lp_kobold) {
    // Variable Declarations
    int lv_h;
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) > 0)) {
        lv_a = UnitGroupFilter("Nightwisp", lv_i, libNtve_gf_UnitsInUnitGroupWithCustomValue(gv_pets[lv_i], 0, 0.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupRandomUnit(lv_a, c_unitCountAlive);
        if (gf_UnitExists(lv_b)) {
            UnitIssueOrder(lv_b, Order(AbilityCommand("Synergy", 0)), c_orderQueueReplace);
        }
        else {
            lv_success = false;
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIMurlocs
//--------------------------------------------------------------------------------------------------
bool gf_AIMurlocs (unit lp_kobold) {
    int auto7D1F1FEF_ae;
    int auto7D1F1FEF_ai;
    // Variable Declarations
    int lv_h;
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_murlocSkulls)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, c_unitCountAlive) >= 3)) {
            auto7D1F1FEF_ae = 3;
            auto7D1F1FEF_ai = 1;
            lv_h = 1;
            for ( ; ( (auto7D1F1FEF_ai >= 0 && lv_h <= auto7D1F1FEF_ae) || (auto7D1F1FEF_ai <= 0 && lv_h >= auto7D1F1FEF_ae) ) ; lv_h += auto7D1F1FEF_ai ) {
                lv_b = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, 1);
                gf_DropandRemove(lv_b);
                UnitGroupRemove(gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, lv_b);
            }
            gf_CreateItemForUnit(lp_kobold, "MurlocSkull", 1);
        }
        else {
            if (gf_FindPickupItem(lp_kobold, "MurlocSkull")) {
            }
            else {
                if (gf_FindPickupItem(lp_kobold, "MurlocSkullFragment")) {
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, "MurlocSkull", gv_aIData[lv_i].lv_supply.lv_murlocSkulls, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        if (gf_AITradeBuyWithdraw(lp_kobold, "MurlocSkullFragment", 3, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                        }
                        else {
                            lv_b = UnitGroupClosestToPoint(gv_playerData[lv_i].lv_murlocSlaves, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITraps
//--------------------------------------------------------------------------------------------------
bool gf_AITraps (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    const fixed lv_spikeTrapMaintenanceRadius = 32.0;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    if ((((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpikeTrap", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), lv_spikeTrapMaintenanceRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 1.0), c_unitCountAlive) < 2) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) || ((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpikeTrap", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), lv_spikeTrapMaintenanceRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAlive) > 0) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1)))) {
        lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpikeTrap", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0);
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1)) {
            gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand("Sharpen", 0));
        }
        else {
            lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpikeTrap", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), lv_spikeTrapMaintenanceRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
            }
            else {
                if ((UnitHasBehavior(lp_kobold, "AIGatheringToCraft") == false) && (GameGetMissionTime() > (gv_dayDuration + gv_nightDuration)) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                    if (gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 7), "AutomatedDefenseTurret")) {
                    }
                    else {
                        lv_success = false;
                    }
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIADT
//--------------------------------------------------------------------------------------------------
bool gf_AIADT (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("AutomatedDefenseTurret", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
    if (gf_UnitExists(lv_b) && (UnitWeaponIsEnabled(lv_b, 1) == false) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
        gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand("RefillAmmunition", 0));
    }
    else {
        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("AutomatedDefenseTurret", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b) && (libNtve_gf_UnitIsUnderConstruction(lv_b) == false) && (UnitWeaponIsEnabled(lv_b, 1) == false) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
        }
        else {
            if (gf_UnitExists(lv_b) && (libNtve_gf_UnitIsUnderConstruction(lv_b) == true) && (lv_i == UnitGetOwner(lv_b))) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            }
            else {
                if ((GameGetMissionTime() > (gv_dayDuration + gv_nightDuration))) {
                    if ((UnitHasBehavior(lp_kobold, "AIGatheringToCraft") == false) && (UnitGroupCount(UnitGroup("AutomatedDefenseTurret", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < gv_aDTCapPlayer[lv_i]) && gf_HasMaterialsFor(lp_kobold, "AutomatedDefenseTurret") && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (gv_questIndexActive != 11) && (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) && (gf_IsGladiator(lp_kobold) == false) && ((gv_dayNight == 1) || (UnitHasBehavior(lp_kobold, "Torch") == true) || (UnitHasBehavior(lp_kobold, "Lantern") == true) || (UnitHasBehavior(lp_kobold, "FelFireTorch") == true) || (UnitHasBehavior(lp_kobold, "Heat") == true))) {
                        if (gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 14), "AutomatedDefenseTurret")) {
                        }
                        else {
                            lv_success = false;
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FindPickupItem
//--------------------------------------------------------------------------------------------------
bool gf_FindPickupItem (unit lp_unit, string lp_type) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_a = UnitGroupEmpty();
    // Implementation
    if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) && (UnitFilterMatch(gv_aIData[lv_i].lv_focalNode, lv_i, UnitFilter((1 << c_targetFilterItem), 0, 0, (1 << (c_targetFilterHidden - 32)))) == true) && gf_PathableMaximum(lp_unit, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 1.5)))) {
        UnitIssueOrder(lp_unit, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
        return true;
    }
    else {
        lv_a = UnitGroup(lp_type, c_playerAny, RegionCircle(UnitGetPosition(lp_unit), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_unit));
        if (gf_UnitExists(lv_b) && gf_Allowedtopickup(lp_unit, lv_b) && gf_PathableMaximum(lp_unit, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 1.5)))) {
            UnitIssueOrder(lp_unit, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            gv_aIData[lv_i].lv_focalNode = lv_b;
            return true;
        }
        else {
            return false;
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateSupplies
//--------------------------------------------------------------------------------------------------
void gf_UpdateSupplies (int lp_player) {
    // Variable Declarations
    int lv_t;
    unit lv_unit;
    int lv_equipped_MainHand_Level;
    int lv_equipped_Offhand_Level;
    int lv_equipped_Armor_Level;
    bool lv_teammateDead;
    bool lv_b_LiquidatorSpellblade;
    bool lv_b_RepeatingCrossbow;
    bool lv_b_GoldenHauberk;
    bool lv_b_VengefulMurlocSkull;
    bool lv_b_BearShamShroud;
    bool lv_b_HeavyTowerShield;
    bool lv_b_HeavyIronBreastplate;
    bool lv_b_ElderWand;
    bool lv_b_BerserkerBattleAx;
    bool lv_b_ViciousJavelin;
    bool lv_b_IronStuddedVest;
    bool lv_b_CelestialOrb;
    bool lv_b_Blunderbuss;
    bool lv_b_MysticsTribalShield;
    bool lv_baseResources;
    // Variable Initialization
    lv_t = gv_playerData[lp_player].lv_team;
    lv_unit = gv_playerData[lp_player].lv_kobold;
    lv_equipped_MainHand_Level = gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(lv_unit)), lp_player);
    lv_equipped_Offhand_Level = gf_GetItemLevel(UnitGetType(gf_KoboldOffhand(lv_unit)), lp_player);
    lv_equipped_Armor_Level = gf_GetItemLevel(UnitGetType(gf_KoboldArmor(lv_unit)), lp_player);
    lv_teammateDead = (gv_teamData[lv_t].lv_koboldsAlive < gv_teamData[lv_t].lv_koboldsTotal);
    lv_b_LiquidatorSpellblade = ((gv_skillArtisanship[lp_player] >= 25) && ((lv_equipped_MainHand_Level < gf_GetItemLevel("LiquidatorSpellblade", lp_player)) && (UnitGroupCount(UnitGroupFilter("Nightwisp", lp_player, gv_pets[lp_player], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)));
    lv_b_RepeatingCrossbow = ((gv_skillArtisanship[lp_player] >= 20) && (!(UnitHasBehavior(lv_unit, "ViciousJavelin")) && (lv_equipped_MainHand_Level < gf_GetItemLevel("RepeatingCrossbow", lp_player))));
    lv_b_GoldenHauberk = ((gv_skillArtisanship[lp_player] >= 20) && ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == "1") && (lv_equipped_Armor_Level < gf_GetItemLevel("GoldenHauberk", lp_player))));
    lv_b_VengefulMurlocSkull = ((gv_skillArtisanship[lp_player] >= 15) && ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == "0") && (lv_equipped_Offhand_Level < gf_GetItemLevel("VengefulMurlocSkull", lp_player))));
    lv_b_BearShamShroud = ((gv_skillArtisanship[lp_player] >= 15) && ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == "0") && (lv_equipped_Armor_Level < gf_GetItemLevel("BearShamansShroud", lp_player))));
    lv_b_HeavyTowerShield = ((gv_skillArtisanship[lp_player] >= 15) && ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == "1") && (lv_equipped_Offhand_Level < gf_GetItemLevel("HeavyTowerShield", lp_player))));
    lv_b_HeavyIronBreastplate = (((gv_skillArtisanship[lp_player] >= 15) && (gv_skillArtisanship[lp_player] <= 19)) && ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == "1") && (lv_equipped_Armor_Level < gf_GetItemLevel("HeavyIronBreastplate", lp_player))));
    lv_b_ElderWand = (((gv_skillArtisanship[lp_player] >= 15) && (gv_skillArtisanship[lp_player] <= 19)) && (!(UnitHasBehavior(lv_unit, "ViciousJavelin")) && (lv_equipped_MainHand_Level < gf_GetItemLevel("ElderWand", lp_player))));
    lv_b_BerserkerBattleAx = (((gv_skillArtisanship[lp_player] >= 10) && (gv_skillArtisanship[lp_player] <= 14)) && (lv_equipped_MainHand_Level < gf_GetItemLevel("BerserkersBattleAxe", lp_player)));
    lv_b_ViciousJavelin = (((gv_skillArtisanship[lp_player] >= 10) && (gv_skillArtisanship[lp_player] <= 14)) && (!(gf_RangedWeapon(lv_unit)) && (lv_equipped_Offhand_Level < gf_GetItemLevel("ViciousJavelin", lp_player))));
    lv_b_IronStuddedVest = (((gv_skillArtisanship[lp_player] >= 10) && (gv_skillArtisanship[lp_player] <= 14)) && (lv_equipped_Armor_Level < gf_GetItemLevel("IronStuddedVest", lp_player)));
    lv_b_CelestialOrb = (((gv_skillArtisanship[lp_player] >= 5) && (gv_skillArtisanship[lp_player] <= 9)) && (!(UnitHasBehavior(lv_unit, "ViciousJavelin")) && ((StringSub(gv_aIData[lp_player].lv_customization, 5, 5) == "0") && (lv_equipped_MainHand_Level < gf_GetItemLevel("CelestialOrb", lp_player)))));
    lv_b_Blunderbuss = (((gv_skillArtisanship[lp_player] >= 5) && (gv_skillArtisanship[lp_player] <= 9)) && (!(UnitHasBehavior(lv_unit, "ViciousJavelin")) && ((StringSub(gv_aIData[lp_player].lv_customization, 5, 5) == "1") && (lv_equipped_MainHand_Level < gf_GetItemLevel("RoughBlunderbuss", lp_player)))));
    lv_b_MysticsTribalShield = (((gv_skillArtisanship[lp_player] >= 5) && (gv_skillArtisanship[lp_player] <= 14)) && ((StringSub(gv_aIData[lp_player].lv_customization, 6, 6) == "1") && (lv_equipped_Offhand_Level < gf_GetItemLevel("MysticsTribalShield", lp_player))));
    lv_baseResources = ((UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_stone, c_unitCountAlive) >= 1));
    // Implementation
    if ((gv_aIMonumentBuilder[lv_t] != lp_player) && (gv_teamData[lv_t].lv_aIWatchTowerBuilder != lp_player)) {
        if ((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", lp_player, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_playerData[lp_player].lv_kobold), gv_aIData[lp_player].lv_tradeRoamRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAlive) == 0)) {
            gv_aIData[lp_player].lv_supply.lv_lumber = 3;
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_lumber = 2;
        }
        if ((((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Tavern", "", "", lp_player, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_playerData[lp_player].lv_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gf_AITavernWishlist(lp_player) != 0)) || (gv_questIndexActive == 13))) {
            gv_aIData[lp_player].lv_supply.lv_stone = 2;
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_stone = 1;
        }
        if ((((gv_skillCooking[lp_player] >= 5) && ((UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lambFeast, c_unitCountAlive) == 0) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_wolfEntrecote, c_unitCountAlive) == 0))) || ((gv_skillCooking[lp_player] >= 20) && (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_rawStag, c_unitCountAlive) > 0)) || ((gv_skillCooking[lp_player] >= 5) && (gv_questIndexActive == 5)) || (lv_b_MysticsTribalShield == true) || ((StringSub(gv_aIData[lp_player].lv_customization, 3, 3) == "0") && (lv_equipped_Armor_Level < gf_GetItemLevel("LeatherCoat", lp_player))))) {
            if ((gv_questIndexActive == 5) && (gv_skillCooking[lp_player] >= 5)) {
                gv_aIData[lp_player].lv_supply.lv_spicyHerbs = (2 - (libNtve_gf_ArithmeticIntClamp(UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lambFeast, c_unitCountAlive), 0, 1) + libNtve_gf_ArithmeticIntClamp(UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_wolfEntrecote, c_unitCountAlive), 0, 1)));
            }
            else {
                gv_aIData[lp_player].lv_supply.lv_spicyHerbs = 1;
            }
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_spicyHerbs = 0;
        }
        if (((lv_teammateDead == true) || (lv_b_CelestialOrb == true) || (lv_b_GoldenHauberk == true) || (lv_b_LiquidatorSpellblade == true) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lanterns, c_unitCountAlive) < gv_aIData[lp_player].lv_supply.lv_lanterns))) {
            if ((lv_b_GoldenHauberk == true)) {
                gv_aIData[lp_player].lv_supply.lv_radiantGems = 3;
            }
            else {
                gv_aIData[lp_player].lv_supply.lv_radiantGems = 1;
            }
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_radiantGems = 0;
        }
        if (((lv_teammateDead == true) || (lv_b_ElderWand == true) || (lv_b_IronStuddedVest == true) || (lv_b_BearShamShroud == true) || ((gv_skillCooking[lp_player] > 20) && (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_rawStag, c_unitCountAlive) > 0)))) {
            gv_aIData[lp_player].lv_supply.lv_sunflowers = 1;
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_sunflowers = 0;
        }
        if ((gv_playerData[lp_player].lv_hasMainSpell == true) && (gf_AIHuntersLodgeWishlist(lp_player) != 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("HuntersLodge", "", "", lp_player, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_playerData[lp_player].lv_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            gv_aIData[lp_player].lv_supply.lv_leatherBonus = (3 - gv_aIData[lp_player].lv_supply.lv_leather);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_leatherBonus = 0;
        }
        if (((lv_b_HeavyIronBreastplate == true) || (lv_b_LiquidatorSpellblade == true))) {
            gv_aIData[lp_player].lv_supply.lv_shadowstone = 2;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            if (((lv_teammateDead == true) || (lv_b_BerserkerBattleAx == true) || (lv_b_HeavyTowerShield == true) || (lv_b_VengefulMurlocSkull == true) || (lv_b_Blunderbuss == true) || (StringSub(gv_learnedSpellsString[lp_player], 7, 7) == "0"))) {
                gv_aIData[lp_player].lv_supply.lv_shadowstone = 1;
                UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
            }
            else {
                gv_aIData[lp_player].lv_supply.lv_shadowstone = 0;
            }
        }
        if (((lv_equipped_Armor_Level < gf_GetItemLevel("WarmWoolTunic", lp_player)) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_warmWoolTunics, c_unitCountAlive) < gv_aIData[lp_player].lv_supply.lv_warmWoolTunics))) {
            gv_aIData[lp_player].lv_supply.lv_wool = 2;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else if ((((gv_questIndexActive == 16) && (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_fishingRods, c_unitCountAlive) == 0)) || (lv_b_CelestialOrb == true) || (lv_b_RepeatingCrossbow == true) || (lv_b_BearShamShroud == true))) {
            gv_aIData[lp_player].lv_supply.lv_wool = 1;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else if (true) {
            gv_aIData[lp_player].lv_supply.lv_wool = 0;
        }
        if (((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", lp_player, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_playerData[lp_player].lv_kobold), gv_aIData[lp_player].lv_tradeRoamRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAlive) == 0) || ((lv_baseResources == true) && ((gv_skillArtisanship[lp_player] >= 5) && (gv_skillArtisanship[lp_player] <= 9)) && (((StringSub(gv_aIData[lp_player].lv_customization, 3, 3) == "0") && (lv_equipped_Armor_Level < gf_GetItemLevel("LeatherCoat", lp_player))) || ((StringSub(gv_aIData[lp_player].lv_customization, 3, 3) == "1") && (lv_equipped_Armor_Level < gf_GetItemLevel("HuntsmansJacket", lp_player))))))) {
            gv_aIData[lp_player].lv_supply.lv_leather = 2;
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_leather = 1;
        }
        if (((lv_b_BerserkerBattleAx == true) || (lv_b_HeavyIronBreastplate == true) || (lv_b_HeavyTowerShield == true) || (lv_b_RepeatingCrossbow == true) || (lv_b_GoldenHauberk == true) || (lv_b_ViciousJavelin == true))) {
            gv_aIData[lp_player].lv_supply.lv_ironOre = 2;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_ironOre = 1;
        }
        if (((lv_b_MysticsTribalShield == true) || (lv_b_ElderWand == true))) {
            gv_aIData[lp_player].lv_supply.lv_infusedLumber = 1;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_infusedLumber = 0;
        }
        if (((lv_b_BearShamShroud == true) || (((gv_skillArtisanship[lp_player] >= 5) && (gv_skillArtisanship[lp_player] <= 9)) && (StringSub(gv_aIData[lp_player].lv_customization, 3, 3) == "1") && (lv_equipped_Armor_Level < gf_GetItemLevel("HuntsmansJacket", lp_player))))) {
            gv_aIData[lp_player].lv_supply.lv_bearPelt = 1;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_bearPelt = 0;
        }
        if ((lv_b_BearShamShroud == true)) {
            gv_aIData[lp_player].lv_supply.lv_sageberry = 1;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_sageberry = 0;
        }
        if (((lv_b_RepeatingCrossbow == true) || (lv_b_LiquidatorSpellblade == true))) {
            gv_aIData[lp_player].lv_supply.lv_antlers = 1;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_antlers = 0;
        }
        if ((lv_b_VengefulMurlocSkull == true)) {
            gv_aIData[lp_player].lv_supply.lv_murlocSkulls = 1;
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_murlocSkulls = 0;
        }
        if ((lv_b_ViciousJavelin == true)) {
            gv_aIData[lp_player].lv_supply.lv_sturdyWoodenSticks = 1;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_sturdyWoodenSticks = 0;
        }
        if ((lv_b_IronStuddedVest == true)) {
            gv_aIData[lp_player].lv_supply.lv_warmWoolTunics = 1;
            UnitBehaviorAdd(lv_unit, "AIGatheringToCraft", lv_unit, 1);
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_warmWoolTunics = 0;
        }
        if ((GameGetMissionTime() >= (gv_dayDuration + gv_nightDuration))) {
            if (((UnitHasBehavior(lv_unit, "AIGatheringToCraft") == false) || (lv_unit == gv_challenger[1]) || (lv_unit == gv_challenger[2]))) {
                gv_aIData[lp_player].lv_supply.lv_food = 6;
                gv_aIData[lp_player].lv_supply.lv_candles = 2;
            }
            else {
                gv_aIData[lp_player].lv_supply.lv_food = 3;
                gv_aIData[lp_player].lv_supply.lv_candles = 1;
            }
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_food = 1;
        }
        if ((gv_playerData[lp_player].lv_hasMainSpell == true)) {
            gv_aIData[lp_player].lv_supply.lv_murlocSlaves = 1;
        }
        else {
            gv_aIData[lp_player].lv_supply.lv_murlocSlaves = 0;
        }
    }
    else {
        gv_aIData[lp_player].lv_supply.lv_lumber = 0;
        gv_aIData[lp_player].lv_supply.lv_stone = 0;
        gv_aIData[lp_player].lv_supply.lv_candles = 0;
        gv_aIData[lp_player].lv_supply.lv_food = 0;
        gv_aIData[lp_player].lv_supply.lv_spicyHerbs = 0;
        gv_aIData[lp_player].lv_supply.lv_sageberry = 0;
        gv_aIData[lp_player].lv_supply.lv_radiantGems = 0;
        gv_aIData[lp_player].lv_supply.lv_sunflowers = 0;
        gv_aIData[lp_player].lv_supply.lv_leatherBonus = 0;
        gv_aIData[lp_player].lv_supply.lv_shadowstone = 0;
        gv_aIData[lp_player].lv_supply.lv_wool = 0;
        gv_aIData[lp_player].lv_supply.lv_leather = 0;
        gv_aIData[lp_player].lv_supply.lv_ironOre = 0;
        gv_aIData[lp_player].lv_supply.lv_infusedLumber = 0;
        gv_aIData[lp_player].lv_supply.lv_bearPelt = 0;
        gv_aIData[lp_player].lv_supply.lv_antlers = 0;
        gv_aIData[lp_player].lv_supply.lv_sturdyWoodenSticks = 0;
        gv_aIData[lp_player].lv_supply.lv_warmWoolTunics = 0;
        if ((gv_teamData[lv_t].lv_aIWatchTowerBuilder == lp_player)) {
            gv_aIData[lp_player].lv_supply.lv_lumber = 10;
            gv_aIData[lp_player].lv_supply.lv_stone = 6;
            gv_aIData[lp_player].lv_supply.lv_food = 1;
            gv_aIData[lp_player].lv_supply.lv_leather = 1;
        }
        else if ((gv_aIMonumentBuilder[lv_t] == lp_player)) {
            gv_aIData[lp_player].lv_supply.lv_lumber = 9;
            gv_aIData[lp_player].lv_supply.lv_stone = 9;
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WantRawRamb
//--------------------------------------------------------------------------------------------------
bool gf_WantRawLamb (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    bool lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawLamb, c_unitCountAlive) == 0) && (((gv_skillCooking[lv_i] >= 5) && (gv_questIndexActive == 5) && (gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][1] == false) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsAlive == gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsTotal)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_food)) && (((gv_skillCooking[lv_i] >= 0) && (gv_skillCooking[lv_i] <= 4)) || ((gv_skillCooking[lv_i] >= 5) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lambFeast, c_unitCountAlive) == 0) || (gv_questIndexActive == 5))))) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WantRawWolf
//--------------------------------------------------------------------------------------------------
bool gf_WantRawWolf (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    bool lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawWolf, c_unitCountAlive) == 0) && (((gv_skillCooking[lv_i] >= 5) && (gv_questIndexActive == 5) && (gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][2] == false) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsAlive == gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsTotal)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_food)) && (((gv_skillCooking[lv_i] >= 0) && (gv_skillCooking[lv_i] <= 4)) || ((gv_skillCooking[lv_i] >= 5) && ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfEntrecote, c_unitCountAlive) == 0) || (gv_questIndexActive == 5))))) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WantRawBird
//--------------------------------------------------------------------------------------------------
bool gf_WantRawBird (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    bool lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((((gv_skillCooking[lv_i] >= 10) && (gv_questIndexActive == 5) && (gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][3] == false) && (gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsAlive == gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsTotal) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) == 0)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_food)) && (gv_skillCooking[lv_i] >= 5)) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WantRawStag
//--------------------------------------------------------------------------------------------------
bool gf_WantRawStag (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    bool lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawStag, c_unitCountAlive) == 0) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) < gv_aIData[lv_i].lv_supply.lv_food) && (gv_skillCooking[lv_i] >= 20)) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIGatherCandles
//--------------------------------------------------------------------------------------------------
bool gf_AIGatherCandles (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_success = true;
    // Implementation
    lv_a = UnitGroup("Candle", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
    if (gf_UnitExists(lv_b) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_candles, c_unitCountAlive) < (gv_aIData[lv_i].lv_supply.lv_candles + 1))) {
        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
    }
    else {
        if (gf_AITradeBuyWithdraw(lp_kobold, "Candle", gv_aIData[lv_i].lv_supply.lv_candles, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
        }
        else {
            lv_success = false;
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PathableMaximum
//--------------------------------------------------------------------------------------------------
bool gf_PathableMaximum (unit lp_unit, point lp_point, int lp_maximum) {
    // Implementation
    if ((AIPathingCostUnit(lp_unit, lp_point, c_ignoreEnemyBuildings) != -1) && (AIPathingCostUnit(lp_unit, lp_point, c_ignoreEnemyBuildings) <= lp_maximum)) {
        return true;
    }
    else {
        return false;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIStorageCleaning
//--------------------------------------------------------------------------------------------------
bool gf_AIStorageCleaning (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_success = true;
    // Implementation
    if (gf_AITradeBuyWithdraw(lp_kobold, "Stone", (gv_aIData[lv_i].lv_supply.lv_stone + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
    }
    else {
        if (gf_AITradeBuyWithdraw(lp_kobold, "Lumber", (gv_aIData[lv_i].lv_supply.lv_lumber + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
        }
        else {
            if (gf_AITradeBuyWithdraw(lp_kobold, "IronOre", (gv_aIData[lv_i].lv_supply.lv_ironOre + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
            }
            else {
                if (gf_AITradeBuyWithdraw(lp_kobold, "Shadowstone", (gv_aIData[lv_i].lv_supply.lv_shadowstone + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, "RadiantGem", (gv_aIData[lv_i].lv_supply.lv_radiantGems + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        lv_success = false;
                    }
                }
            }
        }
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WeightedInterestRegion
//--------------------------------------------------------------------------------------------------
region gf_WeightedInterestRegion (unit lp_kobold, fixed lp_radius) {
    // Variable Declarations
    int lv_i;
    region lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    // Implementation
    if ((gv_aIData[lv_i].lv_weightedPOI != null)) {
        lv_value = RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_kobold), (lp_radius / 3.0), gv_aIData[lv_i].lv_weightedPOI), lp_radius);
    }
    else {
        lv_value = RegionCircle(UnitGetPosition(lp_kobold), lp_radius);
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITavern
//--------------------------------------------------------------------------------------------------
bool gf_AITavern (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    int lv_desiredService;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_desiredService = gf_AITavernWishlist(lv_i);
    lv_success = true;
    // Implementation
    if ((lv_desiredService != 0)) {
        if ((lv_desiredService == -3) && gf_AITradeBuyWithdraw(lp_kobold, "SpellBook", 1, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
        }
        else {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Tavern", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b)) {
                gf_AITavernInteract(lp_kobold, lv_b, lv_desiredService);
            }
            else {
                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Tavern", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                }
                else {
                    if ((gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) && gf_HasMaterialsFor(lp_kobold, "Tavern") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 5), "CampfireLit")) {
                    }
                    else {
                        lv_success = false;
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITavernInteract
//--------------------------------------------------------------------------------------------------
void gf_AITavernInteract (unit lp_kobold, unit lp_tavern, int lp_desiredService) {
    // Variable Declarations
    int lv_i;
    bool lv_any;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    // Implementation
    if ((lp_desiredService == -3)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("BuySpellBook", 0));
    }
    else if ((lp_desiredService == 1)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("LearnNaturesGrace", 0));
        lv_any = true;
    }
    else if ((lp_desiredService == 2)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("LearnMineralTap", 0));
        lv_any = true;
    }
    else if ((lp_desiredService == 3)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("LearnClairvoyance", 0));
        lv_any = true;
    }
    else if ((lp_desiredService == 4)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("LearnFrostArmor", 0));
        lv_any = true;
    }
    else if ((lp_desiredService == 5)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("LearnSiphonLife", 0));
        lv_any = true;
    }
    else if ((lp_desiredService == 6)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("LearnAffliction", 0));
        lv_any = true;
    }
    else if ((lp_desiredService == 7)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("LearnShadowCloak", 0));
        lv_any = true;
    }
    else if ((lp_desiredService == 8)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("LearnGuardianSpirit", 0));
        lv_any = true;
    }
    else if ((lp_desiredService == -1)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("PurchaseNightwisp", 0));
    }
    else if ((lp_desiredService == -2)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("BuyBeer", 0));
    }
    else if ((lp_desiredService == -4)) {
        gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand("HireMurlocSlave", 0));
    }
    if ((lv_any == true)) {
        if ((UnitHasBehavior(lp_kobold, "SkipChatSpell60") == false) && (gv_dayNight == 2)) {
            TextExpressionSetToken("Param/Expression/1297B79C", "A", gf_GetPlayerName(lv_i, 0));
            TextExpressionSetToken("Param/Expression/1297B79C", "B", StringExternal("Param/Value/6D44DC17"));
            TextExpressionSetToken("Param/Expression/7A6B449C", "A", StringExternal("Param/Value/26949D24"));
            TextExpressionSetToken("Param/Expression/7A6B449C", "B", TextWithColor(TextExpressionAssemble("Param/Expression/1297B79C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            TextExpressionSetToken("Param/Expression/7A6B449C", "C", StringToText(gv_aISpellString[RandomInt(1, gv_aISpellStringAmount)]));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/7A6B449C"));
            UnitBehaviorAdd(lp_kobold, "SkipChatSpell60", lp_kobold, 1);
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AITavernWishlist
//--------------------------------------------------------------------------------------------------
int gf_AITavernWishlist (int lp_player) {
    // Variable Declarations
    const fixed lv_spellDiffRatingReq = 25.0;
    int lv_value;
    // Variable Initialization
    // Implementation
    if ((gv_skillCooking[lp_player] >= 10) && (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_beer, c_unitCountAlive) == 0) && (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_rawPheasant, c_unitCountAlive) > 0) && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 6)) {
        lv_value = -2;
    }
    else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "SpellBook") == false) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "ConjurersCharm") == false) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "NecromancersNecklace") == false) && (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "TheMurlocket") == false) && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 10)) {
        lv_value = -3;
    }
    else if ((StringSub(gv_learnedSpellsString[lp_player], 6, 6) == "0") && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 60)) {
        lv_value = 6;
    }
    else if ((StringSub(gv_learnedSpellsString[lp_player], 7, 7) == "0") && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 70) && (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_shadowstone, c_unitCountAlive) > 0)) {
        lv_value = 7;
    }
    else if ((StringSub(gv_learnedSpellsString[lp_player], 5, 5) == "0") && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 50)) {
        lv_value = 5;
    }
    else if ((StringSub(gv_learnedSpellsString[lp_player], 4, 4) == "0") && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 40)) {
        lv_value = 4;
    }
    else if ((StringSub(gv_learnedSpellsString[lp_player], 1, 1) == "0") && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 20) && (gv_playerData[lp_player].lv_hasMainSpell == true)) {
        lv_value = 1;
    }
    else if ((StringSub(gv_learnedSpellsString[lp_player], 2, 2) == "0") && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 20) && (gv_playerData[lp_player].lv_hasMainSpell == true)) {
        lv_value = 2;
    }
    else if ((StringSub(gv_learnedSpellsString[lp_player], 8, 8) == "0") && ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 100) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_radiantGem, c_unitCountAlive) >= 2))) {
        lv_value = 8;
    }
    else if ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 30) && (gv_learnedSpellsString[lp_player] == "11011111")) {
        lv_value = 3;
    }
    else if ((gv_playerData[lp_player].lv_hasMainSpell == true) && (gv_dayNight == 2) && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 45) && ((UnitGroupCount(UnitGroupFilter("Dog", c_playerAny, gv_pets[lp_player], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroupFilter("Lyote", c_playerAny, gv_pets[lp_player], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) > 0) && (UnitGroupCount(UnitGroupFilter("Nightwisp", c_playerAny, gv_pets[lp_player], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(gv_pets[lp_player], c_unitCountAlive) < StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lp_player)))) {
        lv_value = -1;
    }
    else if ((UnitGroupCount(gv_playerData[lp_player].lv_murlocSlaves, c_unitCountAlive) < gv_aIData[lp_player].lv_supply.lv_murlocSlaves) && (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 45) && (gv_questIndexActive != 7)) {
        lv_value = -4;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIHuntersLodge
//--------------------------------------------------------------------------------------------------
bool gf_AIHuntersLodge (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    int lv_desiredService;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_a = UnitGroupEmpty();
    lv_desiredService = gf_AIHuntersLodgeWishlist(lv_i);
    lv_success = true;
    // Implementation
    if ((lv_desiredService != 0)) {
        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("HuntersLodge", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
        if (gf_UnitExists(lv_b)) {
            gf_AIHuntardLodgeInteract(lp_kobold, lv_b, lv_desiredService);
        }
        else {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("HuntersLodge", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b)) {
                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
            }
            else {
                if (gf_HasMaterialsFor(lp_kobold, "HuntersLodge") && gf_AIBuildStructure(lp_kobold, AbilityCommand("KoboldTestBuild", 8), "CampfireLit")) {
                }
                else {
                    lv_success = false;
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIHuntardLodgeInteract
//--------------------------------------------------------------------------------------------------
void gf_AIHuntardLodgeInteract (unit lp_kobold, unit lp_huntersLodge, int lp_desiredService) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    // Implementation
    if ((lp_desiredService == 8)) {
        gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand("CraftFishingRod", 0));
        if ((UnitHasBehavior(lp_kobold, "SkipChatQuest120") == false)) {
            TextExpressionSetToken("Param/Expression/ED0087EF", "A", gf_GetPlayerName(lv_i, 0));
            TextExpressionSetToken("Param/Expression/ED0087EF", "B", StringExternal("Param/Value/04B37291"));
            TextExpressionSetToken("Param/Expression/5B396BFA", "A", StringExternal("Param/Value/F4D3D667"));
            TextExpressionSetToken("Param/Expression/5B396BFA", "B", TextWithColor(TextExpressionAssemble("Param/Expression/ED0087EF"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            TextExpressionSetToken("Param/Expression/5B396BFA", "C", StringToText(gv_aIFishingString[RandomInt(1, gv_aIFishingStringAmount)]));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/5B396BFA"));
            UnitBehaviorAdd(lp_kobold, "SkipChatQuest120", lp_kobold, 1);
        }
        else {
        }
    }
    else if ((lp_desiredService == 1)) {
        gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand("CraftObedienceRod", 0));
        if ((UnitHasBehavior(lp_kobold, "SkipChatPet120") == false)) {
            TextExpressionSetToken("Param/Expression/855EF91C", "A", gf_GetPlayerName(lv_i, 0));
            TextExpressionSetToken("Param/Expression/855EF91C", "B", StringExternal("Param/Value/A9576B3C"));
            TextExpressionSetToken("Param/Expression/EF84B591", "A", StringExternal("Param/Value/3DCF7A28"));
            TextExpressionSetToken("Param/Expression/EF84B591", "B", TextWithColor(TextExpressionAssemble("Param/Expression/855EF91C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            TextExpressionSetToken("Param/Expression/EF84B591", "C", StringToText(gv_aIPetString[RandomInt(1, gv_aIPetStringAmount)]));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/EF84B591"));
            UnitBehaviorAdd(lp_kobold, "SkipChatPet120", lp_kobold, 1);
        }
        else {
        }
    }
    else if ((lp_desiredService == 2)) {
        gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand("ThickHide", 0));
    }
    else if ((lp_desiredService == 3)) {
        gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand("NaturalTenacity", 0));
    }
    else if ((lp_desiredService == 4)) {
        gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand("Viciousness", 0));
    }
    else if ((lp_desiredService == 5)) {
        gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand("InspirationalMaster", 0));
    }
    else if ((lp_desiredService == 6)) {
        gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand("PredatoryKnowledge", 0));
    }
    else if ((lp_desiredService == 7)) {
        gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand("Companionship", 0));
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIHuntersLodgeWishlist
//--------------------------------------------------------------------------------------------------
int gf_AIHuntersLodgeWishlist (int lp_player) {
    // Variable Declarations
    bool lv_allowUpgrades;
    int lv_value;
    // Variable Initialization
    lv_allowUpgrades = (gv_playerData[lp_player].lv_hasAllSpells && !(UnitHasBehavior(gv_playerData[lp_player].lv_kobold, "AIGatheringToCraft")));
    // Implementation
    if ((gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lp_player)] != lp_player)) {
        if ((gv_questIndexActive == 16) && gf_HasMaterialsFor(gv_playerData[lp_player].lv_kobold, "FishingRod") && (UnitGroupCount(UnitGroupFilter("FishingRod", c_playerAny, UnitInventoryGroup(gv_playerData[lp_player].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("EpicFishingRod", c_playerAny, UnitInventoryGroup(gv_playerData[lp_player].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) {
            lv_value = 8;
        }
        else if (((gv_questIndexActive == 9) || (lv_allowUpgrades == true)) && (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lumber, c_unitCountAlive) >= 1) && (UnitGroupCount(UnitGroupFilter("ObedienceRod", c_playerAny, UnitInventoryGroup(gv_playerData[lp_player].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(gv_pets[lp_player], c_unitCountAlive) < StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lp_player)))) {
            lv_value = 1;
        }
        else if ((lv_allowUpgrades == true) && (StringSub(gv_taughtPetsString[lp_player], 1, 1) == "0") && ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 30) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) >= 1))) {
            lv_value = 2;
        }
        else if ((lv_allowUpgrades == true) && (StringSub(gv_taughtPetsString[lp_player], 5, 5) == "0") && ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 30) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) >= 1))) {
            lv_value = 3;
        }
        else if ((lv_allowUpgrades == true) && (StringSub(gv_taughtPetsString[lp_player], 6, 6) == "0") && ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 60) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) >= 2))) {
            lv_value = 4;
        }
        else if ((lv_allowUpgrades == true) && (StringSub(gv_taughtPetsString[lp_player], 2, 2) == "0") && ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 60) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) >= 2))) {
            lv_value = 5;
        }
        else if ((lv_allowUpgrades == true) && (StringSub(gv_taughtPetsString[lp_player], 4, 4) == "0") && ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 60) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) >= 2))) {
            lv_value = 6;
        }
        else if (((lv_allowUpgrades == true) || (gv_skillArtisanship[lp_player] >= 25)) && (StringSub(gv_taughtPetsString[lp_player], 3, 3) == "0") && ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) >= 90) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) >= 3))) {
            lv_value = 7;
        }
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnitsInUnitGroupWithoutBuff
//--------------------------------------------------------------------------------------------------
unitgroup gf_UnitsInUnitGroupWithoutBuff (unitgroup lp_group, string lp_buff) {
    // Variable Declarations
    unitgroup lv_group;
    // Variable Initialization
    lv_group = lp_group;
    // Implementation
    UnitGroupLoopBegin(lv_group);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), lp_buff) == true)) {
            UnitGroupRemove(lv_group, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lv_group;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnitsInUnitGroupWithBuff
//--------------------------------------------------------------------------------------------------
unitgroup gf_UnitsInUnitGroupWithBuff (unitgroup lp_group, string lp_buff) {
    // Variable Declarations
    unitgroup lv_group;
    // Variable Initialization
    lv_group = lp_group;
    // Implementation
    UnitGroupLoopBegin(lv_group);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), lp_buff) == false)) {
            UnitGroupRemove(lv_group, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lv_group;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnitsInUnitGroupWithLife
//--------------------------------------------------------------------------------------------------
unitgroup gf_UnitsInUnitGroupWithLife (unitgroup lp_group, fixed lp_life) {
    // Variable Declarations
    unitgroup lv_group;
    // Variable Initialization
    lv_group = lp_group;
    // Implementation
    UnitGroupLoopBegin(lv_group);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) > lp_life)) {
            UnitGroupRemove(lv_group, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lv_group;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetEnemiesNearPoint
//--------------------------------------------------------------------------------------------------
unitgroup gf_GetEnemiesNearPoint (point lp_point, int lp_player, fixed lp_radius, bool lp_visible) {
    // Variable Declarations
    unitgroup lv_enemies;
    unitgroup lv_secondWave;
    // Variable Initialization
    lv_secondWave = UnitGroupEmpty();
    // Implementation
    lv_enemies = UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(lp_point, lp_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    UnitGroupAddUnitGroup(lv_secondWave, lv_enemies);
    UnitGroupLoopBegin(lv_enemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), lp_player) == true) || (lp_visible == false)) && ((UnitGetType(UnitGroupLoopCurrent()) == "Kobold") || (UnitHasBehavior(UnitGroupLoopCurrent(), "Tamed") == true))) {
            UnitGroupAddUnitGroup(lv_secondWave, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), (lp_radius / 2.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_secondWave);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), lp_player) == true) || (lp_visible == false)) && ((UnitHasBehavior(UnitGroupLoopCurrent(), "Tamed") == true) || ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == true) && gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 6)) || (UnitGetType(UnitGroupLoopCurrent()) == "Kobold") || (UnitGetType(UnitGroupLoopCurrent()) == "MurlocChieftain") || (UnitGetType(UnitGroupLoopCurrent()) == "Zulrogg") || (UnitGetType(UnitGroupLoopCurrent()) == "FrostWitch") || (UnitGetType(UnitGroupLoopCurrent()) == "DemonLordJaryx") || (UnitGetType(UnitGroupLoopCurrent()) == "RagingArcaneBeast") || ((UnitGetType(UnitGroupLoopCurrent()) == "InfernalMinion") && gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 4)) || (UnitGetType(UnitGroupLoopCurrent()) == "MurlocSlave") || ((UnitGetType(UnitGroupLoopCurrent()) == "Ghoul") && gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 4)) || ((UnitGetType(UnitGroupLoopCurrent()) == "Bear") && ((UnitHasBehavior(UnitGroupLoopCurrent(), "Tamed") == true) || gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 6))) || ((UnitGetType(UnitGroupLoopCurrent()) == "FrostBear") && ((UnitHasBehavior(UnitGroupLoopCurrent(), "Tamed") == true) || gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 6))) || (UnitGetType(UnitGroupLoopCurrent()) == "KingFurbeastIV") || (UnitGetType(UnitGroupLoopCurrent()) == "TombGuardian") || ((UnitGetType(UnitGroupLoopCurrent()) == "Monstrosity") && gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 6)) || (UnitGetType(UnitGroupLoopCurrent()) == "Fortress") || (UnitGetType(UnitGroupLoopCurrent()) == "AutomatedDefenseTurret"))) {
        }
        else {
            UnitGroupRemove(lv_secondWave, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    return lv_secondWave;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetAlliesNearPoint
//--------------------------------------------------------------------------------------------------
unitgroup gf_GetAlliesNearPoint (point lp_point, int lp_player, fixed lp_radius) {
    // Variable Declarations
    unitgroup lv_allies;
    // Variable Initialization
    // Implementation
    lv_allies = UnitGroupAlliance(lp_player, c_unitAllianceAlly, RegionCircle(lp_point, lp_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_allies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((((UnitGetType(UnitGroupLoopCurrent()) == "Fortress") || (UnitGetType(UnitGroupLoopCurrent()) == "AutomatedDefenseTurret")) && (UnitWeaponIsEnabled(UnitGroupLoopCurrent(), 1) == true) && (libNtve_gf_UnitIsInvulnerable(UnitGroupLoopCurrent()) == false) && (DistanceBetweenPoints(lp_point, UnitGetPosition(UnitGroupLoopCurrent())) <= 4.0)) || (UnitGetType(UnitGroupLoopCurrent()) == "Kobold") || (UnitHasBehavior(UnitGroupLoopCurrent(), "Tamed") == true) || (UnitGetType(UnitGroupLoopCurrent()) == "Ghoul") || (UnitGetType(UnitGroupLoopCurrent()) == "InfernalMinion") || (UnitGetType(UnitGroupLoopCurrent()) == "MurlocMilitia"))) {
        }
        else {
            UnitGroupRemove(lv_allies, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    return lv_allies;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetNearbyEnemiesNoStructures
//--------------------------------------------------------------------------------------------------
unitgroup gf_GetNearbyEnemiesNoStructures (unit lp_unit) {
    // Variable Declarations
    fixed lv_radius;
    unitgroup lv_enemies;
    // Variable Initialization
    lv_radius = 12.0;
    // Implementation
    lv_enemies = UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_enemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), UnitGetOwner(lp_unit)) == true) && ((UnitHasBehavior(UnitGroupLoopCurrent(), "Tamed") == true) || (UnitGetType(UnitGroupLoopCurrent()) == "Kobold") || (UnitGetType(UnitGroupLoopCurrent()) == "MurlocChieftain") || (UnitGetType(UnitGroupLoopCurrent()) == "Zulrogg") || (UnitGetType(UnitGroupLoopCurrent()) == "FrostWitch") || (UnitGetType(UnitGroupLoopCurrent()) == "DemonLordJaryx") || (UnitGetType(UnitGroupLoopCurrent()) == "RagingArcaneBeast") || (UnitGetType(UnitGroupLoopCurrent()) == "InfernalMinion") || (UnitGetType(UnitGroupLoopCurrent()) == "MurlocSlave") || (UnitGetType(UnitGroupLoopCurrent()) == "Ghoul") || (UnitGetType(UnitGroupLoopCurrent()) == "Bear") || (UnitGetType(UnitGroupLoopCurrent()) == "FrostBear") || (UnitGetType(UnitGroupLoopCurrent()) == "KingFurbeastIV") || (UnitGetType(UnitGroupLoopCurrent()) == "VeilGuardian") || (UnitGetType(UnitGroupLoopCurrent()) == "UndeadSavage"))) {
        }
        else {
            UnitGroupRemove(lv_enemies, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    return lv_enemies;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetNearbyDirewolves
//--------------------------------------------------------------------------------------------------
unitgroup gf_GetNearbyDirewolves (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_enemies;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    lv_enemies = UnitGroup("Lyote", 15, RegionCircle(UnitGetPosition(lp_unit), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    return lv_enemies;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetClosestRessurectionShrine
//--------------------------------------------------------------------------------------------------
unit gf_GetClosestResurrectionShrine (unit lp_unit, bool lp_allowNearbyEnemies) {
    // Variable Declarations
    unitgroup lv_shrines;
    unit lv_value;
    unitgroup lv_enemies;
    // Variable Initialization
    lv_shrines = UnitGroupEmpty();
    lv_enemies = UnitGroupEmpty();
    // Implementation
    if (((UnitGroupCount(gf_GetEnemiesNearPoint(UnitGetPosition(UnitFromId(2745)), UnitGetOwner(lp_unit), 24.0, false), c_unitCountAlive) == 0) || (lp_allowNearbyEnemies == true))) {
        UnitGroupAdd(lv_shrines, UnitFromId(2745));
    }
    else {
    }
    if (((UnitGroupCount(gf_GetEnemiesNearPoint(UnitGetPosition(UnitFromId(2316)), UnitGetOwner(lp_unit), 24.0, false), c_unitCountAlive) == 0) || (lp_allowNearbyEnemies == true))) {
        UnitGroupAdd(lv_shrines, UnitFromId(2316));
    }
    else {
    }
    lv_value = UnitGroupClosestToPoint(lv_shrines, UnitGetPosition(lp_unit));
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetRandomDeadPlayerOnTeam
//--------------------------------------------------------------------------------------------------
int gf_GetRandomDeadPlayerOnTeam (int lp_team) {
    // Variable Declarations
    playergroup lv_deadUsers;
    playergroup lv_deadAI;
    int lv_value;
    // Variable Initialization
    lv_deadUsers = PlayerGroupEmpty();
    lv_deadAI = PlayerGroupEmpty();
    // Implementation
    PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_dead[PlayerGroupLoopCurrent()] == true) && (gv_beingResurrected[PlayerGroupLoopCurrent()] == false)) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_isAI == true)) {
                PlayerGroupAdd(lv_deadAI, PlayerGroupLoopCurrent());
            }
            else {
                PlayerGroupAdd(lv_deadUsers, PlayerGroupLoopCurrent());
            }
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    if ((PlayerGroupCount(lv_deadUsers) > 0)) {
        lv_value = PlayerGroupPlayer(lv_deadUsers, RandomInt(1, PlayerGroupCount(lv_deadUsers)));
    }
    else {
        if ((PlayerGroupCount(lv_deadAI) > 0)) {
            lv_value = PlayerGroupPlayer(lv_deadAI, RandomInt(1, PlayerGroupCount(lv_deadAI)));
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EvaluateThreat
//--------------------------------------------------------------------------------------------------
fixed gf_EvaluateThreat (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    fixed lv_life;
    fixed lv_armor;
    fixed lv_effectiveLife;
    fixed lv_damage;
    fixed lv_attackSpeed;
    int lv_willpower;
    fixed lv_energy;
    fixed lv_effectiveDPS;
    fixed lv_spellStrength;
    fixed lv_extraMultiplier;
    fixed lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    lv_attackSpeed = 1.0;
    lv_spellStrength = 1.0;
    lv_extraMultiplier = 1.0;
    // Implementation
    if (gf_UnitExists(lp_unit) && ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeStructure) == false) || (UnitGetType(lp_unit) == "AutomatedDefenseTurret") || (UnitGetType(lp_unit) == "Fortress"))) {
        if ((UnitGetType(lp_unit) == "Kobold")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MeleeDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "KoboldAttackMeleeBash", "Period", UnitGetOwner(lp_unit)));
            lv_energy += UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent);
            lv_willpower += StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lv_i));
            if ((gv_playerData[lv_i].lv_hasMainSpell == true)) {
                lv_spellStrength += (lv_energy * (lv_willpower * 0.1));
            }
            else {
            }
            if ((UnitHasBehavior(lp_unit, "KoboldCanEat") == true) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) > 0)) {
                lv_extraMultiplier += 0.1;
            }
            else {
            }
            if (((UnitHasBehavior(lp_unit, "SiphonLife") == true) || (UnitHasBehavior(lp_unit, "FrostArmor") == true) || (UnitHasBehavior(lp_unit, "GuardianSpirit") == true))) {
                lv_extraMultiplier += 0.25;
            }
            else {
            }
            if (gf_RangedWeapon(lp_unit)) {
                lv_extraMultiplier += 0.1;
            }
            else {
            }
        }
        else if ((UnitGetType(lp_unit) == "MurlocSlave")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "MurlocSlave", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Smash", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "Smash", "Period", UnitGetOwner(lp_unit)));
        }
        else if ((UnitGetType(lp_unit) == "Zulrogg")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Zulrogg", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "TrollBossDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "TrollBossWeapon", "Period", UnitGetOwner(lp_unit)));
            lv_extraMultiplier *= 0.75;
        }
        else if ((UnitGetType(lp_unit) == "MurlocChieftain")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "MurlocChieftain", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MurlocDoomhammerDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "MurlocDoomhammer", "Period", UnitGetOwner(lp_unit)));
            lv_extraMultiplier *= 0.75;
        }
        else if ((UnitGetType(lp_unit) == "Lyote")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Lyote", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "DirewolfBiteDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "DirewolfBite", "Period", UnitGetOwner(lp_unit)));
        }
        else if ((UnitGetType(lp_unit) == "Dog")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Dog", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "WolfBiteDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "WolfBite", "Period", UnitGetOwner(lp_unit)));
        }
        else if ((UnitGetType(lp_unit) == "Ghoul")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Ghoul", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GhoulDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "GhoulClaws", "Period", UnitGetOwner(lp_unit)));
        }
        else if ((UnitGetType(lp_unit) == "Bear")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Bear", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "BearMaulDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "BearMaul", "Period", UnitGetOwner(lp_unit)));
        }
        else if ((UnitGetType(lp_unit) == "FrostBear")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "FrostBear", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FrostBearMaulDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "FrostBearMaul", "Period", UnitGetOwner(lp_unit)));
        }
        else if ((UnitGetType(lp_unit) == "Nightwisp")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Nightwisp", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "NightwispDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "NightwispAttack", "Period", UnitGetOwner(lp_unit)));
        }
        else if ((UnitGetType(lp_unit) == "DemonLordJaryx")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "DemonLordJaryx", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "DemonLordJaryxAttackDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "DemonLordJaryxAttack", "Period", UnitGetOwner(lp_unit)));
            lv_extraMultiplier *= 0.5;
        }
        else if ((UnitGetType(lp_unit) == "FrostWitch")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "FrostWitch", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FrostWitchDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "FrostWitchWeapon", "Period", UnitGetOwner(lp_unit)));
            lv_extraMultiplier *= 0.75;
        }
        else if ((UnitGetType(lp_unit) == "AutomatedDefenseTurret")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "AutomatedDefenseTurret", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "AutomatedDefenseTurretDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "HeavyAutomatedCrossbow", "Period", UnitGetOwner(lp_unit)));
            if (((UnitWeaponIsEnabled(lp_unit, 1) == false) || (libNtve_gf_UnitIsUnderConstruction(lp_unit) == true))) {
                lv_extraMultiplier = 0.0;
            }
            else {
                lv_extraMultiplier += 0.25;
            }
        }
        else if ((UnitGetType(lp_unit) == "Fortress")) {
            lv_life += 500.0;
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Fortress", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "WatchTowerDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "WatchTowerWeapon", "Period", UnitGetOwner(lp_unit)));
            if (((UnitWeaponIsEnabled(lp_unit, 1) == false) || (libNtve_gf_UnitIsUnderConstruction(lp_unit) == true))) {
                lv_extraMultiplier = 0.0;
            }
            else {
            }
        }
        else if ((UnitGetType(lp_unit) == "TombGuardian")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "TombGuardian", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FireballDamagePoint", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "Fireball", "Period", UnitGetOwner(lp_unit)));
        }
        else if ((UnitGetType(lp_unit) == "Monstrosity")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Monstrosity", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MonstrousFistsDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "MonstrousFists", "Period", UnitGetOwner(lp_unit)));
            lv_extraMultiplier *= 0.75;
        }
        else if ((UnitGetType(lp_unit) == "RagingArcaneBeast")) {
            lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
            lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "RagingArcaneBeast", "LifeArmor", UnitGetOwner(lp_unit)));
            lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArcanePulseDamage", "Amount", UnitGetOwner(lp_unit)));
            lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "ArcanePulse", "Period", UnitGetOwner(lp_unit)));
            lv_extraMultiplier *= 0.25;
        }
        if ((UnitHasBehavior(lp_unit, "AutomatedDefenseTurretDazed") == true)) {
            lv_extraMultiplier *= 0.8;
        }
        else {
        }
        if ((UnitHasBehavior(lp_unit, "SturdyWoodenStickSlow") == true)) {
            lv_extraMultiplier *= 0.8;
        }
        else {
        }
        if ((UnitFilterMatch(lp_unit, UnitGetOwner(lp_unit), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            lv_extraMultiplier *= 0.5;
        }
        else {
        }
        if ((UnitHasBehavior(lp_unit, "Unconscious") == true)) {
            lv_extraMultiplier = 0.0;
        }
        else {
        }
        lv_effectiveDPS = (lv_damage / lv_attackSpeed);
        lv_effectiveLife = (lv_life * (1.0 + ((lv_armor * gv_positiveArmorFactor) / (1.0 + (lv_armor * gv_positiveArmorFactor)))));
        lv_value = ((((lv_effectiveDPS * 5.0) + lv_effectiveLife) + lv_spellStrength) * lv_extraMultiplier);
    }
    else {
        lv_value = 0.0;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIBringItemToUnit
//--------------------------------------------------------------------------------------------------
bool gf_AIBringItemToUnit (unit lp_kobold, unit lp_item, unit lp_target) {
    // Variable Declarations
    bool lv_success;
    // Variable Initialization
    lv_success = true;
    // Implementation
    if (gf_UnitExists(lp_item) && gf_UnitExists(lp_target)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lp_target)) <= 3.0)) {
            UnitSetPosition(lp_item, UnitGetPosition(lp_target), false);
            if ((gv_playerData[UnitGetOwner(lp_target)].lv_isAI == true)) {
                UnitIssueOrder(lp_target, OrderTargetingUnit(null, lp_item), c_orderQueueAddToFront);
            }
            else {
            }
        }
        else {
            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand("move", 0), lp_target), c_orderQueueReplace);
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AICanCastSpell
//--------------------------------------------------------------------------------------------------
bool gf_AICanCastSpell (unit lp_kobold, abilcmd lp_ability) {
    // Variable Declarations
    int lv_i;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/CCCC9C23"), false);
    if (((UnitHasBehavior(lp_kobold, "SpellBook") == true) || (UnitHasBehavior(lp_kobold, "ConjurersCharm") == true))) {
        if ((lp_ability == AbilityCommand("NaturesGrace", 0)) && (UnitAbilityCheck(lp_kobold, "NaturesGrace", true) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "NaturesGrace", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "NaturesGrace", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergyPercent, c_unitPropCurrent) >= 90.0)) {
            lv_success = true;
        }
        else if ((lp_ability == AbilityCommand("MineralTap", 0)) && (UnitAbilityCheck(lp_kobold, "MineralTap", true) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MineralTap", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MineralTap", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergyPercent, c_unitPropCurrent) >= 90.0)) {
            lv_success = true;
        }
        else if ((lp_ability == AbilityCommand("FrostArmor", 0)) && (UnitAbilityCheck(lp_kobold, "FrostArmor", true) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "FrostArmor", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "FrostArmor", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_i))) && (UnitHasBehavior(lp_kobold, "FrostArmor") == false)) {
            lv_success = true;
        }
        else if ((lp_ability == AbilityCommand("SiphonLife", 0)) && (UnitAbilityCheck(lp_kobold, "SiphonLife", true) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "SiphonLife", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "SiphonLife", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_i))) && (UnitHasBehavior(lp_kobold, "SiphonLife") == false)) {
            lv_success = true;
        }
        else if ((lp_ability == AbilityCommand("Affliction", 0)) && (UnitAbilityCheck(lp_kobold, "Affliction", true) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "Affliction", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "Affliction", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_i)))) {
            lv_success = true;
        }
        else if ((lp_ability == AbilityCommand("ShadowCloak", 0)) && (UnitAbilityCheck(lp_kobold, "ShadowCloak", true) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) > (StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "ShadowCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i)) * 1.2)) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "ShadowCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_i))) && (UnitAbilityGetCooldown(lp_kobold, "ShadowCloak", "Abil/ShadowCloak") == 0.0) && (UnitHasBehavior(lp_kobold, "ShadowCloak") == false)) {
            lv_success = true;
        }
        else if ((lp_ability == AbilityCommand("GuardianSpirit", 0)) && (UnitAbilityCheck(lp_kobold, "GuardianSpirit", true) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "GuardianSpirit", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "GuardianSpirit", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_i))) && (UnitHasBehavior(lp_kobold, "GuardianSpirit") == false)) {
            lv_success = true;
        }
        else if ((lp_ability == AbilityCommand("Clairvoyance", 0)) && (UnitAbilityCheck(lp_kobold, "Clairvoyance", true) == true) && (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "Clairvoyance", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i))) && (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) > StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "Clairvoyance", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_i)))) {
            lv_success = true;
        }
    }
    else {
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/71FFA546"), false);
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Allowedtopickup
//--------------------------------------------------------------------------------------------------
bool gf_Allowedtopickup (unit lp_kobold, unit lp_item) {
    // Variable Declarations
    bool lv_value;
    // Variable Initialization
    lv_value = true;
    // Implementation
    if ((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", UnitGetOwner(lp_kobold), c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lp_item), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 5, 0.0), c_unitCountAlive) > 0)) {
        lv_value = false;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StrongerThanDirewolves
//--------------------------------------------------------------------------------------------------
bool gf_StrongerThanDirewolves (unit lp_unit) {
    // Variable Declarations
    unitgroup lv_nearbyDirewolves;
    fixed lv_threatIndex;
    bool lv_value;
    // Variable Initialization
    lv_nearbyDirewolves = gf_GetNearbyDirewolves(lp_unit);
    // Implementation
    UnitGroupLoopBegin(lv_nearbyDirewolves);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_threatIndex += gf_EvaluateThreat(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if (((UnitHasBehavior(lp_unit, "Torch") == true) || (UnitHasBehavior(lp_unit, "Lantern") == true) || (UnitHasBehavior(lp_unit, "FelFireTorch") == true) || ((lv_threatIndex * 1.1) < gf_EvaluateThreat(lp_unit)))) {
        lv_value = true;
    }
    else {
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StrongestOnTeam
//--------------------------------------------------------------------------------------------------
bool gf_StrongestOnTeam (unit lp_unit) {
    // Variable Declarations
    unitgroup lv_alliedKobolds;
    bool lv_value;
    // Variable Initialization
    lv_alliedKobolds = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", UnitGetOwner(lp_unit), c_unitAllianceAllyExcludeSelf, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_value = true;
    // Implementation
    UnitGroupLoopBegin(lv_alliedKobolds);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gf_EvaluateThreat(UnitGroupLoopCurrent()) > gf_EvaluateThreat(lp_unit))) {
            lv_value = false;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PlayerUseUnitAbility
//--------------------------------------------------------------------------------------------------
void gf_PlayerUseUnitAbility (int lp_player, unit lp_unit, abilcmd lp_ability) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((lp_player != lv_i)) {
        UnitSetOwner(lp_unit, lp_player, false);
        UnitIssueOrder(lp_unit, Order(lp_ability), c_orderQueueReplace);
        UnitSetOwner(lp_unit, lv_i, false);
    }
    else {
        UnitIssueOrder(lp_unit, Order(lp_ability), c_orderQueueReplace);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: OthersSelectingUnit
//--------------------------------------------------------------------------------------------------
bool gf_OthersSelectingUnit (unit lp_unit, int lp_player) {
    int auto832B2931_ae;
    int auto832B2931_ai;
    // Variable Declarations
    int lv_a;
    bool lv_value;
    // Variable Initialization
    // Implementation
    auto832B2931_ae = gv_players;
    auto832B2931_ai = 1;
    lv_a = 1;
    for ( ; ( (auto832B2931_ai >= 0 && lv_a <= auto832B2931_ae) || (auto832B2931_ai <= 0 && lv_a >= auto832B2931_ae) ) ; lv_a += auto832B2931_ai ) {
        if ((lv_a != lp_player) && (UnitGroupHasUnit(gv_aISelected2[lv_a], lp_unit) == true)) {
            lv_value = true;
        }
        else {
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIExcessItems
//--------------------------------------------------------------------------------------------------
void gf_AIExcessItems (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_simpleSpellBook;
    unitgroup lv_artifacts;
    unitgroup lv_skeleFingers;
    unitgroup lv_shovels;
    unitgroup lv_obedRods;
    unitgroup lv_scrolls;
    unitgroup lv_boneTali;
    unit lv_drop;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_simpleSpellBook = UnitGroupFilter("SpellBook", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_artifacts = UnitGroupFilter("AncientArtifactFragment", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_skeleFingers = UnitGroupFilter("SkeletalFinger", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_shovels = UnitGroupFilter("IronShovel", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_obedRods = UnitGroupFilter("ObedienceRod", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_scrolls = UnitGroupFilter("ScrollofTransmutation", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_boneTali = UnitGroupFilter("BoneTalisman", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Implementation
    if ((gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] == lv_i)) {
        UnitGroupLoopBegin(gv_aIData[lv_i].lv_tradeItems);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_kobold), 1.0)), false);
            UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_playerData[lv_i].lv_resources.lv_food);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_kobold), 1.0)), false);
            UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((UnitGetType(gf_KoboldOffhand(lp_kobold)) == "Torch") && (gv_b_Day == true) && (gv_winter == false)) {
        UnitSetPosition(gf_KoboldOffhand(lp_kobold), UnitGetPosition(lp_kobold), false);
        UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, gf_KoboldOffhand(lp_kobold));
    }
    else {
    }
    if ((UnitGroupCount(lv_simpleSpellBook, c_unitCountAlive) > 0) && ((UnitHasBehavior(lp_kobold, "ConjurersCharm") == true) || (UnitHasBehavior(lp_kobold, "NecromancersNecklace") == true) || (UnitHasBehavior(lp_kobold, "TheMurlocket") == true))) {
        UnitSetPosition(UnitGroupUnit(lv_simpleSpellBook, 1), UnitGetPosition(lp_kobold), false);
        UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupUnit(lv_simpleSpellBook, 1));
    }
    else {
    }
    if ((UnitGroupCount(lv_obedRods, c_unitCountAlive) > 0) && (UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) >= StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lv_i)))) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, lv_obedRods, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) > 1)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_handfulofBerries, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) - 1)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_sageberry)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sageberries, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_sageberry)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_spicyHerbs)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_spicyHerbs)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_sunflowers)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_sunflowers)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_lumber)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_lumber)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumberParts, c_unitCountAlive) > 0)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, gv_playerData[lv_i].lv_resources.lv_lumberParts);
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_stone)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_stone)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) > (gv_aIData[lv_i].lv_supply.lv_leather + gv_aIData[lv_i].lv_supply.lv_leatherBonus))) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) - (gv_aIData[lv_i].lv_supply.lv_leather + gv_aIData[lv_i].lv_supply.lv_leatherBonus))));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_wool)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_wool)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_ironOre)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_ironOre)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_shadowstone)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_shadowstone)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_radiantGems)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_radiantGems)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_infusedLumber)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_infusedLumber)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) > 0)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, gv_playerData[lv_i].lv_resources.lv_sageberries);
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_antlers)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_antlers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_antlers)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_murlocSkulls)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkulls, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_murlocSkulls)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, c_unitCountAlive) > 0) && (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) >= gv_aIData[lv_i].lv_supply.lv_murlocSkulls)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments);
    }
    else {
    }
    if ((UnitGroupCount(lv_artifacts, c_unitCountAlive) > 0)) {
        UnitGroupAdd(gv_aIData[lv_i].lv_tradeItems, UnitGroupUnit(lv_artifacts, 1));
    }
    else {
    }
    if ((gv_questIndexActive != 11) && (UnitGroupCount(lv_shovels, c_unitCountAlive) > 0)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, lv_shovels);
    }
    else {
    }
    if ((gv_questIndexActive != 7) && (UnitGroupCount(lv_boneTali, c_unitCountAlive) > 0)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, lv_boneTali);
    }
    else {
    }
    if ((UnitGroupCount(lv_scrolls, c_unitCountAlive) > 0)) {
        if ((UnitGroupCount(UnitGroupFilter("Bear", c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitCreateEffectUnit(lp_kobold, "ScrollofTransmutation", UnitGroupRandomUnit(UnitGroupFilter("Bear", c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            gf_DropandRemove(UnitGroupUnit(lv_scrolls, 1));
        }
        else {
            UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, lv_scrolls);
        }
    }
    else {
    }
    if ((UnitGroupCount(lv_skeleFingers, c_unitCountAlive) > 0) && (UnitGroupCount(lv_skeleFingers, c_unitCountAlive) < 3) && (UnitGroupCount(UnitGroup("SkeletalFinger", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, lv_skeleFingers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_candles, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_candles)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_candles, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_candles, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_candles)));
    }
    else {
    }
    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) > gv_aIData[lv_i].lv_supply.lv_lanterns)) {
        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lanterns, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_lanterns)));
    }
    else {
    }
    UnitGroupLoopBegin(UnitInventoryGroup(lp_kobold));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == gv_backpackSlot) && (((gf_KoboldMainHand(lp_kobold) != null) && (CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "Class", lv_i) == "MainHand") && (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) <= gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(lp_kobold)), lv_i)) && (UnitGetType(gf_KoboldMainHand(lp_kobold)) != "ObedienceRod") && ((gv_questIndexActive != 16) || ((UnitGetType(UnitGroupLoopCurrent()) != "FishingRod") && (UnitGetType(UnitGroupLoopCurrent()) != "EpicFishingRod"))) && ((UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) >= StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lv_i))) || (UnitGetType(UnitGroupLoopCurrent()) != "ObedienceRod")) && ((gv_aIData[lv_i].lv_supply.lv_sturdyWoodenSticks == 0) || (UnitGetType(UnitGroupLoopCurrent()) != "SturdyWoodenStick"))) || ((gf_KoboldOffhand(lp_kobold) != null) && (CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "Class", lv_i) == "Offhand") && (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) <= gf_GetItemLevel(UnitGetType(gf_KoboldOffhand(lp_kobold)), lv_i)) && (UnitGetType(gf_KoboldOffhand(lp_kobold)) != "Torch") && (UnitGetType(gf_KoboldOffhand(lp_kobold)) != "Lantern") && (UnitGetType(UnitGroupLoopCurrent()) != "Lantern")) || ((gf_KoboldArmor(lp_kobold) != null) && (CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "Class", lv_i) == "Armor") && (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) <= gf_GetItemLevel(UnitGetType(gf_KoboldArmor(lp_kobold)), lv_i)) && ((gv_aIData[lv_i].lv_supply.lv_warmWoolTunics == 0) || (UnitGetType(UnitGroupLoopCurrent()) != "WarmWoolTunic"))))) {
            UnitGroupAdd(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if (gf_UnitCanGetItem(lp_kobold, "HandfulofBerries")) {
    }
    else {
        if ((UnitGroupCount(gv_aIData[lv_i].lv_tradeItems, c_unitCountAlive) > 0)) {
            gf_DropItems(lp_kobold, gv_aIData[lv_i].lv_tradeItems);
        }
        else {
            if ((((gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] == lv_i) && gf_HasMaterialsFor(lp_kobold, "LorenorStatue")) || ((gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder == lv_i) && gf_HasMaterialsFor(lp_kobold, "Fortress")))) {
            }
            else {
                gf_DropAllItems(lp_kobold);
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetExcessLimit
//--------------------------------------------------------------------------------------------------
int gf_GetExcessLimit (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    int lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_unit);
    // Implementation
    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", UnitGetOwner(lp_unit), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_unit), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_value = 1;
    }
    else {
        lv_value = 2;
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AISpendSkillPoints
//--------------------------------------------------------------------------------------------------
void gf_AISpendSkillPoints (int lp_player) {
    int init_i;
    // Variable Declarations
    const int lv_maxlevel = 8;
    int lv_artisanshipAim;
    int[5] lv_exception;
    int lv_exceptionIndex;
    int lv_pointsMissing;
    // Variable Initialization
    lv_artisanshipAim = (5 * StringToInt(StringSub(gv_aIData[lp_player].lv_customization, 2, 2)));
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_exception[init_i] = -1;
    }
    lv_exceptionIndex = 1;
    // Implementation
    if ((gv_playerData[lp_player].lv_alive == true) && (gv_skillPointsPlayer[lp_player] > 0)) {
        lv_pointsMissing = (lv_artisanshipAim - gv_skillArtisanship[lp_player]);
        if ((lv_pointsMissing <= 0)) {
            lv_exception[lv_exceptionIndex] = 5;
            lv_exceptionIndex += 1;
        }
        else {
            if ((lv_pointsMissing > ((lv_maxlevel - UnitLevel(gv_playerData[lp_player].lv_kobold)) * 5))) {
                gf_IncreaseSkillType(lp_player, 5, libNtve_gf_ArithmeticIntClamp(lv_pointsMissing, 1, gv_skillPointsPlayer[lp_player]));
                lv_exception[lv_exceptionIndex] = 5;
                lv_exceptionIndex += 1;
            }
            else {
            }
        }
        gf_IncreaseSkillType(lp_player, gf_GetInteger15(lv_exception[1], lv_exception[2], lv_exception[3], lv_exception[4]), gv_skillPointsPlayer[lp_player]);
        gf_UpdateSkillButton(lp_player);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetInteger15
//--------------------------------------------------------------------------------------------------
int gf_GetInteger15 (int lp_exception1, int lp_exception2, int lp_exception3, int lp_exception4) {
    // Variable Declarations
    int lv_a;
    string lv_possibilities;
    int lv_index;
    int lv_value;
    // Variable Initialization
    lv_possibilities = "12345";
    // Implementation
    while ((lv_value == 0)) {
        lv_index = RandomInt(1, StringLength(lv_possibilities));
        lv_value = StringToInt(StringSub(lv_possibilities, lv_index, lv_index));
        if ((lv_value != lp_exception1) && (lv_value != lp_exception2) && (lv_value != lp_exception3) && (lv_value != lp_exception4)) {
        }
        else {
            lv_possibilities = StringReplace(lv_possibilities, StringSub(lv_possibilities, StringLength(lv_possibilities), StringLength(lv_possibilities)), lv_index, lv_index);
            lv_possibilities = StringReplace(lv_possibilities, "", StringLength(lv_possibilities), StringLength(lv_possibilities));
            lv_value = 0;
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AICustomization
//--------------------------------------------------------------------------------------------------
void gf_AICustomization (int lp_player) {
    // Implementation
    gv_rewardState[lp_player][2][RandomInt(1, 8)] = RandomInt(2, 3);
    gv_rewardState[lp_player][3][1] = RandomInt(2, 3);
    gv_rewardState[lp_player][3][2] = RandomInt(2, 3);
    gv_rewardState[lp_player][3][4] = RandomInt(2, 3);
    gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 1, 1);
    gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(1, 4)), 2, 2);
    gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 3, 3);
    gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 4, 4);
    gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 5, 5);
    gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 6, 6);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetAIName
//--------------------------------------------------------------------------------------------------
void gf_SetAIName (int lp_player) {
    // Variable Declarations
    int lv_r;
    // Variable Initialization
    // Implementation
    lv_r = RandomInt(1, (gv_numberofnames - gv_namestaken));
    gv_aIData[lp_player].lv_name = StringToText(gv_aINamePool[lv_r]);
    gv_aINamePool[lv_r] = gv_aINamePool[(gv_numberofnames - gv_namestaken)];
    gv_namestaken += 1;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIDiggyHole
//--------------------------------------------------------------------------------------------------
bool gf_AIDiggyHole (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    unitgroup lv_shovels;
    unit lv_b;
    unitgroup lv_idleShovels;
    fixed lv_angleOffset;
    bool lv_success;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    lv_t = gf_GetTeamOfPlayer(lv_i);
    lv_shovels = UnitGroupFilter("IronShovel", c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_idleShovels = UnitGroupEmpty();
    lv_angleOffset = libNtve_gf_ArithmeticRealClamp((35.0 - FixedToInt(gv_skillMining[lv_i])), 0.0, 35.0);
    lv_success = true;
    // Implementation
    if ((gv_questIndexActive == 11)) {
        if ((UnitGroupCount(lv_shovels, c_unitCountAlive) > 0)) {
            if (((gv_aIPirateSearchT[lv_t] == null) || ((gv_aIPirateSearchP[lv_i] != null) && (DistanceBetweenPoints(UnitGetPosition(lp_kobold), gv_aIPirateSearchP[lv_i]) <= (1.5 + (0.05 * gv_skillMining[lv_i])))))) {
                gf_ItemShovelDig(lp_kobold, UnitGroupUnit(lv_shovels, 1), false);
            }
            else {
                if ((gv_aIPirateSearchP[lv_i] == null)) {
                    gv_aIPirateSearchP[lv_i] = PointWithOffsetPolar(gv_aIPirateSearchT[lv_t], RandomFixed(2.0, 4.0), (AngleBetweenPoints(UnitGetPosition(lp_kobold), gv_piratesTreasureLocation) + RandomFixed((0.0 - lv_angleOffset), lv_angleOffset)));
                }
                else {
                }
                if (gf_PathableMaximum(lp_kobold, gv_aIPirateSearchP[lv_i], 200)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand("move", 0), gv_aIPirateSearchP[lv_i]), c_orderQueueReplace);
                }
                else {
                    gv_aIPirateSearchP[lv_i] = gf_RandomPathablePoint(RegionCircle(gv_aIPirateSearchP[lv_i], 16.0));
                }
            }
        }
        else {
            lv_idleShovels = UnitGroup("IronShovel", c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_b = UnitGroupClosestToPoint(lv_idleShovels, UnitGetPosition(lp_kobold));
            if (gf_UnitExists(lv_b)) {
                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
            }
            else {
                if (gf_AITradeBuyWithdraw(lp_kobold, "IronShovel", 1, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, "IronOre", 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        if (gf_AITradeBuyWithdraw(lp_kobold, "Lumber", 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
            }
        }
    }
    else {
        lv_success = false;
    }
    return lv_success;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIPerks
//--------------------------------------------------------------------------------------------------
string gf_AIPerks (int lp_player, int lp_points) {
    int auto69413521_ae;
    int auto69413521_ai;
    int auto30E45F55_ae;
    int auto30E45F55_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_r;
    int lv_i;
    string lv_s;
    int lv_perksPerTier;
    string lv_value;
    // Variable Initialization
    lv_s = "";
    lv_value = "0000000000000000000000000000000000000000";
    // Implementation
    gv_perkPointsSpent[lp_player] = 0;
    gv_accpp[lp_player] = libNtve_gf_ArithmeticIntClamp(lp_points, 0, 40);
    lv_perksPerTier = (gv_accpp[lp_player] / 4);
    auto69413521_ae = 3;
    auto69413521_ai = 1;
    lv_a = 0;
    for ( ; ( (auto69413521_ai >= 0 && lv_a <= auto69413521_ae) || (auto69413521_ai <= 0 && lv_a >= auto69413521_ae) ) ; lv_a += auto69413521_ai ) {
        lv_s = "0123456789";
        auto30E45F55_ae = lv_perksPerTier;
        auto30E45F55_ai = 1;
        lv_b = 1;
        for ( ; ( (auto30E45F55_ai >= 0 && lv_b <= auto30E45F55_ae) || (auto30E45F55_ai <= 0 && lv_b >= auto30E45F55_ae) ) ; lv_b += auto30E45F55_ai ) {
            if ((gv_perkPointsSpent[lp_player] < lp_points)) {
                lv_r = RandomInt(1, StringLength(lv_s));
                lv_i = (1 + StringToInt(StringSub(lv_s, lv_r, lv_r)));
                lv_s = StringReplace(lv_s, "", lv_r, lv_r);
                lv_value = StringReplace(lv_value, "1", ((lv_a * 10) + lv_i), ((lv_a * 10) + lv_i));
                gv_perkPointsSpent[lp_player] += 1;
                gv_accpp[lp_player] -= 1;
            }
            else {
            }
        }
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AllAIsShareControlwithAllies
//--------------------------------------------------------------------------------------------------
void gf_AllAIsShareControlwithAllies () {
    int autoC4FFE31A_ae;
    int autoC4FFE31A_ai;
    int autoFE2147E7_ae;
    int autoFE2147E7_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    // Variable Initialization
    // Implementation
    autoC4FFE31A_ae = gv_players;
    autoC4FFE31A_ai = 1;
    lv_a = 1;
    for ( ; ( (autoC4FFE31A_ai >= 0 && lv_a <= autoC4FFE31A_ae) || (autoC4FFE31A_ai <= 0 && lv_a >= autoC4FFE31A_ae) ) ; lv_a += autoC4FFE31A_ai ) {
        if ((gv_playerData[lv_a].lv_isAI == true)) {
            autoFE2147E7_ae = gv_players;
            autoFE2147E7_ai = 1;
            lv_b = 1;
            for ( ; ( (autoFE2147E7_ai >= 0 && lv_b <= autoFE2147E7_ae) || (autoFE2147E7_ai <= 0 && lv_b >= autoFE2147E7_ae) ) ; lv_b += autoFE2147E7_ai ) {
                if ((PlayerType(lv_b) == c_playerTypeUser) && (libNtve_gf_PlayerIsEnemy(lv_a, lv_b, 0) == true)) {
                    PlayerSetAlliance(lv_a, c_allianceIdControl, lv_b, true);
                }
                else {
                }
            }
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnstuckNudge
//--------------------------------------------------------------------------------------------------
void gf_UnstuckNudge (unit lp_kobold) {
    // Variable Declarations
    int lv_i;
    fixed lv_dist;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_kobold);
    // Implementation
    if (((lv_i >= 0) && (lv_i <= gv_players))) {
        if (gv_unstuckRating[lv_i] >= 20) {
            gv_unstuckRating[lv_i] = 1;
        }
        else {
            gv_unstuckRating[lv_i] = gv_unstuckRating[lv_i] + 1;
        }
        if ((gv_unstuckPoint[lv_i] != null) && (gv_unstuckPoint[lv_i] != Point(0.0, 0.0))) {
            lv_dist = DistanceBetweenPoints(UnitGetPosition(lp_kobold), gv_unstuckPoint[lv_i]);
        }
        else {
            lv_dist = 10.0;
        }
        if (((lv_dist > 0.5) || (gf_UnitIsBusy(lp_kobold) == true) || (UnitHasBehavior(lp_kobold, "Attacking") == true) || (UnitHasBehavior(lp_kobold, "Constructing") == true))) {
            gv_unstuckPoint[lv_i] = UnitGetPosition(lp_kobold);
            gv_unstuckRating[lv_i] = 1;
            UnitBehaviorRemove(lp_kobold, "Nudgable", 1);
        }
        if ((gv_unstuckRating[lv_i] == 20)) {
            if ((UnitHasBehavior(lp_kobold, "KoboldBotNormal") == true) && (UnitHasBehavior(lp_kobold, "ToggleAI") == false)) {
                UnitSetPosition(lp_kobold, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius)), false);
                UnitIssueOrder(lp_kobold, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
            else {
                UnitBehaviorAdd(lp_kobold, "Nudgable", lp_kobold, 1);
            }
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetDropOffLocation
//--------------------------------------------------------------------------------------------------
point gf_GetDropoffLocation (unit lp_murloc) {
    // Variable Declarations
    int lv_i;
    point lv_value;
    // Variable Initialization
    lv_i = UnitGetOwner(lp_murloc);
    // Implementation
    if (gf_UnitExists(gv_playerData[lv_i].lv_kobold) && (UnitGetCustomValue(lp_murloc, 2) == 0.0)) {
        lv_value = UnitGetPosition(gv_playerData[lv_i].lv_kobold);
    }
    else if ((UnitGetCustomValue(lp_murloc, 2) == 1.0)) {
        lv_value = Point(UnitGetCustomValue(lp_murloc, 3), UnitGetCustomValue(lp_murloc, 4));
    }
    else if ((UnitGetCustomValue(lp_murloc, 2) == 2.0)) {
        lv_value = Point(UnitGetCustomValue(lp_murloc, 3), UnitGetCustomValue(lp_murloc, 4));
    }
    return lv_value;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GetMurlocFocalNode
//--------------------------------------------------------------------------------------------------
unit gf_GetMurlocFocalNode (unit lp_murloc) {
    // Variable Declarations
    point lv_p;
    unit lv_node;
    // Variable Initialization
    lv_p = Point(UnitGetCustomValue(lp_murloc, 5), UnitGetCustomValue(lp_murloc, 6));
    // Implementation
    lv_node = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionCircle(lv_p, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_p);
    if (gf_UnitExists(lv_node) && gf_PathableMaximum(lp_murloc, UnitGetPosition(lv_node), 32) && ((UnitGetType(lv_node) == "StoneDeposit") || (UnitGetType(lv_node) == "GoldDeposit") || (UnitGetType(lv_node) == "BerryBush") || (UnitGetType(lv_node) == "CulinaryHerbBush") || (UnitGetType(lv_node) == "MapleTree") || (UnitGetType(lv_node) == "ElderTree") || (UnitGetType(lv_node) == "Sheep"))) {
    }
    else {
        lv_node = null;
        UnitSetCustomValue(lp_murloc, 5, 0.0);
        UnitSetCustomValue(lp_murloc, 6, 0.0);
    }
    return lv_node;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetMurlocFocalNode
//--------------------------------------------------------------------------------------------------
void gf_SetMurlocFocalNode (unit lp_murloc, unit lp_node) {
    // Implementation
    UnitSetCustomValue(lp_murloc, 5, PointGetX(UnitGetPosition(lp_node)));
    UnitSetCustomValue(lp_murloc, 6, PointGetY(UnitGetPosition(lp_node)));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocResetOrders
//--------------------------------------------------------------------------------------------------
void gf_MurlocResetOrders (unit lp_unit) {
    // Implementation
    UnitBehaviorRemove(lp_unit, "MurlocFetchBerries", 1);
    UnitBehaviorRemove(lp_unit, "MurlocFetchGold", 1);
    UnitBehaviorRemove(lp_unit, "MurlocFetchHerbs", 1);
    UnitBehaviorRemove(lp_unit, "MurlocFetchLumber", 1);
    UnitBehaviorRemove(lp_unit, "MurlocFetchStone", 1);
    UnitBehaviorRemove(lp_unit, "MurlocChef", 1);
    UnitBehaviorRemove(lp_unit, "MurlocReturnItems", 1);
    UnitBehaviorRemove(lp_unit, "MurlocForcedReturn", 1);
    UnitSetFacing(lp_unit, (UnitGetFacing(lp_unit) + 1.0), 0.0);
    UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocSkin
//--------------------------------------------------------------------------------------------------
void gf_MurlocSkin(unit murloc, int skinType){
    actor act = libNtve_gf_MainActorofUnit(murloc);
    string skinTexture = "MurlocBlue";
    if (skinType == 1){
        skinTexture = "MurlocOrange";
    }
    else if(skinType == 2){
        skinTexture = "MurlocYellow";
    }
    else if(skinType == 3){
        skinTexture = "MurlocGray";
    }
    else if(skinType == 4){
        skinTexture = "MurlocWhite";
    }
    ActorSend(act, "TextureSelectById " + skinTexture);
}
bool MurlocSkin_Cheat(bool cond, bool actions){
    int p = EventPlayer();
    int skinType;
    unitgroup g;
    
    if (gv_admin[p]){
        skinType = StringToInt(StringWord(EventChatMessage(false), 2));
        g = UnitGroup("MurlocSlave", p, RegionPlayableMap(), null, c_noMaxCount);
        for(UnitGroupLoopBegin(g);!UnitGroupLoopDone();UnitGroupLoopStep()){
            gf_MurlocSkin(UnitGroupLoopCurrent(), skinType);
        }UnitGroupLoopEnd();
        g = UnitGroup("MurlocMilitia", p, RegionPlayableMap(), null, c_noMaxCount);
        for(UnitGroupLoopBegin(g);!UnitGroupLoopDone();UnitGroupLoopStep()){
            gf_MurlocSkin(UnitGroupLoopCurrent(), skinType);
        }UnitGroupLoopEnd();
    }
    return true;
}
void MurlocSkin_Init(){
    TriggerAddEventChatMessage(TriggerCreate("MurlocSkin_Cheat"), c_playerAny, "-MurlocSkin ", false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShowTutorialText
//--------------------------------------------------------------------------------------------------
void gf_ShowTutorialText (int lp_index) {
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gv_tutorialText[lp_index]);
    gv_transcript = (gv_transcript + StringExternal("Param/Value/4802CCD7") + gv_tutorialText[lp_index]);
    HelpPanelDestroyAllTips();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/096829E1"), 0), gv_transcript, StringExternal("Param/Value/D681952B"), "Icons\\Candle.dds");
    TipAlertPanelClear(PlayerGroupAll());
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InGameHint
//--------------------------------------------------------------------------------------------------
void gf_InGameHint (string lp_hint, int lp_player) {
    // Variable Declarations
    bool lv_changed;
    text lv_prefix;
    // Variable Initialization
    lv_prefix = StringExternal("Param/Value/9ADED528");
    // Implementation
    if ((PlayerType(lp_player) == c_playerTypeUser) && (PlayerStatus(lp_player) == c_playerStatusActive) && (gv_tutorial == false)) {
        if ((lp_hint == "start") && (StringSub(gv_hints[lp_player], 1, 1) == "0")) {
            if ((StringSub(gv_hints[lp_player], 16, 16) == "0")) {
                TextExpressionSetToken("Param/Expression/943C2247", "A", lv_prefix);
                TextExpressionSetToken("Param/Expression/943C2247", "B", StringExternal("Param/Value/5E93AF75"));
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/943C2247"));
            }
            else {
                TextExpressionSetToken("Param/Expression/D0EF46EB", "A", lv_prefix);
                TextExpressionSetToken("Param/Expression/D0EF46EB", "B", StringExternal("Param/Value/A4BDA356"));
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D0EF46EB"));
            }
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 1, 1);
            lv_changed = true;
        }
        else if ((lp_hint == "stone") && (StringSub(gv_hints[lp_player], 2, 2) == "0")) {
            TextExpressionSetToken("Param/Expression/8A7013C2", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/8A7013C2", "B", StringExternal("Param/Value/ACC9C4AE"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/8A7013C2"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 2, 2);
            lv_changed = true;
        }
        else if ((lp_hint == "tree") && (StringSub(gv_hints[lp_player], 3, 3) == "0")) {
            TextExpressionSetToken("Param/Expression/CFFDC568", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/CFFDC568", "B", StringExternal("Param/Value/8E107F63"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/CFFDC568"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 3, 3);
            lv_changed = true;
        }
        else if ((lp_hint == "rezz") && (StringSub(gv_hints[lp_player], 4, 4) == "0")) {
            TextExpressionSetToken("Param/Expression/75D7409C", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/75D7409C", "B", StringExternal("Param/Value/6896372C"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/75D7409C"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 4, 4);
            lv_changed = true;
        }
        else if ((lp_hint == "postgame") && (StringSub(gv_hints[lp_player], 5, 5) == "0")) {
            TextExpressionSetToken("Param/Expression/0978FA8C", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/0978FA8C", "B", StringExternal("Param/Value/98E730F7"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/0978FA8C"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 5, 5);
            lv_changed = true;
        }
        else if ((lp_hint == "gold") && (StringSub(gv_hints[lp_player], 6, 6) == "0")) {
            TextExpressionSetToken("Param/Expression/5F2DE0C5", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/5F2DE0C5", "B", StringExternal("Param/Value/D55E78F5"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/5F2DE0C5"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 6, 6);
            lv_changed = true;
        }
        else if ((lp_hint == "bear") && (StringSub(gv_hints[lp_player], 7, 7) == "0")) {
            TextExpressionSetToken("Param/Expression/5924F54E", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/5924F54E", "B", StringExternal("Param/Value/84FE7456"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/5924F54E"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 7, 7);
            lv_changed = true;
        }
        else if ((lp_hint == "level") && (StringSub(gv_hints[lp_player], 8, 8) == "0")) {
            TextExpressionSetToken("Param/Expression/2A940331", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/2A940331", "B", StringExternal("Param/Value/8CB2CF1A"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2A940331"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 8, 8);
            lv_changed = true;
        }
        else if ((lp_hint == "smithy") && (StringSub(gv_hints[lp_player], 9, 9) == "0")) {
            TextExpressionSetToken("Param/Expression/B8CC0240", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/B8CC0240", "B", StringExternal("Param/Value/1D46968D"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/B8CC0240"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 9, 9);
            lv_changed = true;
        }
        else if ((lp_hint == "outpost") && (StringSub(gv_hints[lp_player], 10, 10) == "0")) {
            TextExpressionSetToken("Param/Expression/111B15AA", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/111B15AA", "B", StringExternal("Param/Value/F4C828B0"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/111B15AA"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 10, 10);
            lv_changed = true;
        }
        else if ((lp_hint == "stamina") && (StringSub(gv_hints[lp_player], 11, 11) == "0")) {
            TextExpressionSetToken("Param/Expression/2825266D", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/2825266D", "B", StringExternal("Param/Value/7929F469"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2825266D"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 11, 11);
            lv_changed = true;
        }
        else if ((lp_hint == "warmth") && (StringSub(gv_hints[lp_player], 12, 12) == "0")) {
            TextExpressionSetToken("Param/Expression/0E1DFC8A", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/0E1DFC8A", "B", StringExternal("Param/Value/6A1560E1"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/0E1DFC8A"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 12, 12);
            lv_changed = true;
        }
        else if ((lp_hint == "hunger") && (StringSub(gv_hints[lp_player], 13, 13) == "0")) {
            TextExpressionSetToken("Param/Expression/F5CC6816", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/F5CC6816", "B", StringExternal("Param/Value/F9AF7F62"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/F5CC6816"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 13, 13);
            lv_changed = true;
        }
        else if ((lp_hint == "rain") && (StringSub(gv_hints[lp_player], 14, 14) == "0")) {
            TextExpressionSetToken("Param/Expression/5BD9B1AB", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/5BD9B1AB", "B", StringExternal("Param/Value/F7C072A6"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/5BD9B1AB"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 14, 14);
            lv_changed = true;
        }
        else if ((lp_hint == "night") && (StringSub(gv_hints[lp_player], 15, 15) == "0")) {
            TextExpressionSetToken("Param/Expression/C90801D6", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/C90801D6", "B", StringExternal("Param/Value/A6A12D9D"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/C90801D6"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 15, 15);
            lv_changed = true;
        }
        else if ((lp_hint == "berry") && (StringSub(gv_hints[lp_player], 17, 17) == "0")) {
            TextExpressionSetToken("Param/Expression/DAB82CCB", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/DAB82CCB", "B", StringExternal("Param/Value/62B06E36"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/DAB82CCB"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 17, 17);
            lv_changed = true;
        }
        else if ((lp_hint == "herb") && (StringSub(gv_hints[lp_player], 18, 18) == "0")) {
            TextExpressionSetToken("Param/Expression/F2A26BA2", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/F2A26BA2", "B", StringExternal("Param/Value/CE0F250A"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/F2A26BA2"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 18, 18);
            lv_changed = true;
        }
        else if ((lp_hint == "hunter") && (StringSub(gv_hints[lp_player], 19, 19) == "0")) {
            TextExpressionSetToken("Param/Expression/A3A12C28", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/A3A12C28", "B", StringExternal("Param/Value/FE3825EE"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/A3A12C28"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 19, 19);
            lv_changed = true;
        }
        else if ((lp_hint == "perks") && (StringSub(gv_hints[lp_player], 20, 20) == "0")) {
            TextExpressionSetToken("Param/Expression/E753EDE6", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/E753EDE6", "B", StringExternal("Param/Value/A7038A11"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/E753EDE6"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 20, 20);
            lv_changed = true;
        }
        else if ((lp_hint == "patch") && (StringSub(gv_hints[lp_player], 21, 21) == "0")) {
            TextExpressionSetToken("Param/Expression/1C610A0C", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/1C610A0C", "B", StringExternal("Param/Value/53B0CC42"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/1C610A0C"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 21, 21);
            lv_changed = true;
        }
        else if ((lp_hint == "death") && (StringSub(gv_hints[lp_player], 22, 22) == "0")) {
            TextExpressionSetToken("Param/Expression/AEDCD381", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/AEDCD381", "B", StringExternal("Param/Value/00E94E18"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/AEDCD381"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 22, 22);
            lv_changed = true;
        }
        else if ((lp_hint == "defense") && (StringSub(gv_hints[lp_player], 23, 23) == "0")) {
            TextExpressionSetToken("Param/Expression/56AD67D4", "A", lv_prefix);
            TextExpressionSetToken("Param/Expression/56AD67D4", "B", StringExternal("Param/Value/D1ABC150"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/56AD67D4"));
            gv_hints[lp_player] = StringReplace(gv_hints[lp_player], "1", 23, 23);
            lv_changed = true;
        }
        if ((lv_changed == true)) {
            BankLoad("nostrobskalufs", lp_player);
            BankValueSetFromString(BankLastCreated(), "stats", "IU8eR7g", gv_hints[lp_player]);
            BankSave(BankLastCreated());
        }
        else {
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AdminSetup
//--------------------------------------------------------------------------------------------------
void gf_AdminSetup (int lp_player) {
    // Implementation
    if (gv_handle[lp_player] == "2-S2-1-313986" || // Qancakes Euro
        gv_handle[lp_player] == "1-S2-1-3931630" || //Qancakes Na
        gv_handle[lp_player] == "2-S2-1-4691978" || // Broot Euro
        gv_handle[lp_player] == "1-S2-1-4047328") { // Broot Na
        gv_admin[lp_player] = true;
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PreInitialization
//--------------------------------------------------------------------------------------------------
bool gt_PreInitialization_Func (bool testConds, bool runActions) {
    int autoDB0FDAC4_ae;
    int autoDB0FDAC4_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerDebugEnableType(1, false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    if ((GameAttributeGameValue("1") == "0001")) {
        gv_gameMode = 1;
    }
    else if ((GameAttributeGameValue("1") == "0002")) {
        gv_gameMode = 2;
    }
    else if ((GameAttributeGameValue("1") == "0003")) {
        gv_tutorial = true;
        TriggerExecute(gt_SetupTutorial1, true, true);
    }
    TriggerExecute(gt_ReprimandedListInfo, true, true);
    TriggerExecute(gt_InitializeText, true, true);
    TriggerExecute(gt_SetupAIChatStrings, true, true);
    TriggerExecute(gt_InitializeDialogs, true, false);
    TriggerExecute(gt_InitializeEnvironment, true, false);
    TriggerExecute(gt_InitializePerks, true, false);
    TriggerExecute(gt_SetupRewardData, true, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    autoDB0FDAC4_ae = gv_players;
    autoDB0FDAC4_ai = 1;
    lv_a = 1;
    for ( ; ( (autoDB0FDAC4_ai >= 0 && lv_a <= autoDB0FDAC4_ae) || (autoDB0FDAC4_ai <= 0 && lv_a >= autoDB0FDAC4_ae) ) ; lv_a += autoDB0FDAC4_ai ) {
        gv_handle[lv_a] = PlayerHandle(lv_a);
        if ((gv_handle[lv_a] == "")) {
            gv_handle[lv_a] = "UnknownHandle";
        }
        else {
        }
        gv_reprimanded[lv_a] = gf_ReprimandedPlayer(lv_a);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PreInitialization_Init () {
    gt_PreInitialization = TriggerCreate("gt_PreInitialization_Func");
    TriggerAddEventMapInit(gt_PreInitialization);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    int auto4B09C9CF_ae;
    int auto4B09C9CF_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    int lv_c;
    int[gv_maxTeams + 1] lv_offset;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SyncBanks, true, true);
    TriggerExecute(gt_LoadBank, true, true);
    TriggerExecute(gt_InitializeTeams, true, true);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetResourceTradingMinorStep(c_resourceTypeMinerals, 25);
    UISetResourceTradingMajorStep(c_resourceTypeMinerals, 50);
    gv_averagePlayerLevel = gf_AveragePlayerLevel(PlayerGroupActive());
    auto4B09C9CF_ae = 14;
    auto4B09C9CF_ai = 1;
    lv_a = 1;
    for ( ; ( (auto4B09C9CF_ai >= 0 && lv_a <= auto4B09C9CF_ae) || (auto4B09C9CF_ai <= 0 && lv_a >= auto4B09C9CF_ae) ) ; lv_a += auto4B09C9CF_ai ) {
        if (((PlayerType(lv_a) == c_playerTypeUser) || (PlayerType(lv_a) == c_playerTypeComputer) || ((gv_aIFFATestingOverride == true) && (lv_a <= 12)))) {
            gv_playerData[lv_a].lv_team = gf_GetTeamOfPlayer(lv_a);
            gv_teamData[gv_playerData[lv_a].lv_team].lv_koboldsTotal += 1;
            gv_teamData[gv_playerData[lv_a].lv_team].lv_koboldsAlive += 1;
            PlayerOptionOverride(lv_a, "simplecommandcard", "0");
            PlayerOptionOverride(lv_a, "selectuncontrolable", "1");
            lv_p = gf_GetTeamStart(lv_a);
            libNtve_gf_UnitCreateFacingPoint(1, "Kobold", 0, lv_a, PointWithOffsetPolar(lv_p, 2.0, (IntToFixed(lv_offset[gv_playerData[lv_a].lv_team]) * (360.0 / libNtve_gf_ArithmeticIntClamp(PlayerGroupCount(gv_teamData[gv_playerData[lv_a].lv_team].lv_members), 1, 100)))), lv_p);
            lv_offset[gv_playerData[lv_a].lv_team] += 1;
            gv_playerData[lv_a].lv_kobold = UnitLastCreated();
            gv_unstuckPoint[lv_a] = UnitGetPosition(gv_playerData[lv_a].lv_kobold);
            gv_playerData[lv_a].lv_alive = true;
            CameraPan(lv_a, UnitGetPosition(gv_playerData[lv_a].lv_kobold), 0.0, -1, 10, false);
            UnitSelect(gv_playerData[lv_a].lv_kobold, lv_a, true);
            UnitControlGroupAddUnit(lv_a, 1, gv_playerData[lv_a].lv_kobold);
            gf_ClearResourceReserves(lv_a);
            gf_SetupAI(gv_playerData[lv_a].lv_kobold);
            gf_SetupStartingSpells(gv_playerData[lv_a].lv_kobold);
            gf_SetupStartingItems(gv_playerData[lv_a].lv_kobold, false);
            gf_SetupPerkBonusi(gv_playerData[lv_a].lv_kobold, false);
            gf_UpdateSpellCosts(lv_a);
            gf_UpdateBuildingStats(lv_a);
            gf_UpdateSkillButton(lv_a);
            gf_UpdateSkillWindow(lv_a);
            gf_UpdateWatchTowerGoldCost(lv_a);
            gf_UpdateForestry(lv_a);
            gf_UpdateMining(lv_a);
            gf_UpdateCooking(lv_a);
            gf_UpdateForaging(lv_a);
            gf_UpdateArtisanship(lv_a);
            gf_UpdateStatsAll(lv_a);
            gf_AdminSetup(lv_a);
            gf_CheckSeasonalRequirements(lv_a);
        }
        else {
        }
    }
    TriggerExecute(gt_SetupTutorial2, true, true);
    gf_SpawnResources();
    gf_SwapResourceNodes();
    TriggerExecute(gt_InitializeAddon, true, false);
    TriggerExecute(gt_SpecialRewardsList, true, true);
    gv_banksInitialized = true;
    gv_gameStarted = true;
    if ((gf_LastTeamStanding() != -1)) {
        gf_Endgame(false, false);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventTimeElapsed(gt_Initialization, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FadeIn
//--------------------------------------------------------------------------------------------------
bool gt_FadeIn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_VanquisherStart(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    gv_championGame = gf_ChampionGame();
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FadeIn_Init () {
    gt_FadeIn = TriggerCreate("gt_FadeIn_Func");
    TriggerAddEventTimeElapsed(gt_FadeIn, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializeText
//--------------------------------------------------------------------------------------------------
bool gt_InitializeText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    gv_tribeNamePool[1] = "Aquilae Tribe";
    gv_tribeNamePool[2] = "Alnath Tribe";
    gv_tribeNamePool[3] = "Axanar Tribe";
    gv_tribeNamePool[4] = "Chysule Tribe";
    gv_tribeNamePool[5] = "Eridani Tribe";
    gv_tribeNamePool[6] = "Hawthorn Tribe";
    gv_tribeNamePool[7] = "Koltaari Tribe";
    gv_tribeNamePool[8] = "Lorina Tribe";
    gv_tribeNamePool[9] = "Selay Tribe";
    gv_tribeNamePool[10] = "Zadar Tribe";
    gv_tribeNamePool[11] = "Frostburn Tribe";
    gv_tribeNamePool[12] = "Duskglow Tribe";
    gv_tribeNamePool[13] = "Happy Tribe";
    gv_tribeNamePool[14] = "Elder Tribe";
    gv_tribeNamePool[15] = "Grimwhisker Tribe";
    gv_tribeNamePool[16] = "Eastmoor Tribe";
    gv_tribeNamePool[17] = "Westmarch Tribe";
    gv_tribeNamePool[18] = "Nephalem Tribe";
    gv_tribeNamePool[19] = "Skovos Tribe";
    gv_tribeNamePool[20] = "Askari Tribe";
    gv_tribeNamePool[21] = "Kethryes Tribe";
    gv_tribeNamePool[22] = "Mage Tribe";
    gv_tribeNamePool[23] = "Bramwell Tribe";
    gv_tribeNamePool[24] = "Rakkis Tribe";
    gv_tribeNamePool[25] = "Sentinel Tribe";
    gv_tribeNamePool[26] = "Gold Coast Tribe";
    gv_tribeNamePool[27] = "Blue Candle Tribe";
    gv_tribeNamePool[28] = "Raven Tribe";
    gv_tribeNamePool[29] = "Dark Owl Tribe";
    gv_tribeNamePool[30] = "Stonewatch Tribe";
    gv_tribeNamePool[31] = "Murloc-slaying Tribe";
    gv_tribeNamePool[32] = "Deadwind Tribe";
    gv_tribeNamePool[33] = "Ironfist Tribe";
    gv_tribeNamePool[34] = "Stormhammer Tribe";
    gv_tribeNamePool[35] = "Drywhisker Tribe";
    gv_tribeNamePool[36] = "Noggrin Tribe";
    gv_tribeNamePool[37] = "Gogger Tribe";
    gv_tribeNamePool[38] = "Gravelsnout Tribe";
    gv_tribeNamePool[39] = "Whitewhisker Tribe";
    gv_tribeNamePool[40] = "Windshear Tribe";
    gv_tribeNamePool[41] = "Splintertree Tribe";
    gv_tribeNamePool[42] = "Silverwind Tribe";
    gv_tribeNamePool[43] = "Greybeard Tribe";
    gv_tribeNamePool[44] = "Thistlewhisker Tribe";
    gv_tribeNamePool[45] = "Greensnout Tribe";
    gv_tribeNamePool[46] = "Thundersong Tribe";
    gv_tribeNamePool[47] = "Scorn Tribe";
    gv_tribeNamePool[48] = "Scorched Tribe";
    gv_tribeNamePool[49] = "Rustmaul Tribe";
    gv_tribeNamePool[50] = "Dreadmonger Tribe";
    gv_tribeNamePool[51] = "Deepcave Tribe";
    gv_tribeNamePool[52] = "Spelunker Tribe";
    gv_tribeNamePool[53] = "Sunbaked Tribe";
    gv_tribeNamePool[54] = "Stonecrag Tribe";
    gv_tribeNamePool[55] = "Charred Tribe";
    gv_tribeNamePool[56] = "Sirocco Tribe";
    gv_tribeNamePool[57] = "Coldsnout Tribe";
    gv_tribeNamePool[58] = "Meinhoff Tribe";
    gv_tribeNamePool[59] = "Proudwater Tribe";
    gv_tribeNamePool[60] = "Mistlake Tribe";
    gv_tribeNamePool[61] = "Nozzlepot Tribe";
    gv_tribeNamePool[62] = "Friends-with-cats Tribe";
    gv_tribeNamePool[63] = "Warrior Tribe";
    gv_tribeNamePool[64] = "Hunter Tribe";
    gv_tribeNamePool[65] = "Digger Tribe";
    gv_tribeNamePool[66] = "Tribe of Giants";
    gv_tribeNamePool[67] = "Mourn's Stool Tribe";
    gv_tribeNamePool[68] = "Terok Nor Tribe";
    gv_tribeNamePool[69] = "Dawn Tribe";
    gv_tribeNamePool[70] = "Dusk Tribe";
    gv_tribeNamePool[71] = "Autumn Tribe";
    gv_tribeNamePool[72] = "Corrine Tribe";
    gv_tribeNamePool[73] = "White Rose Tribe";
    gv_tribeNamePool[74] = "Corimont Tribe";
    gv_tribeNamePool[75] = "Forsaken Tribe";
    gv_tribeNamePool[76] = "Borg Tribe";
    gv_tribeNamePool[77] = "Tirana Tribe";
    gv_tribeNamePool[78] = "Makkara Tribe";
    gv_tribeNamePool[79] = "Coldheart Tribe";
    gv_tribeNamePool[80] = "Stoneheart Tribe";
    gv_tribeNamePool[81] = "Aventine Tribe";
    gv_tribeNamePool[82] = "Vesta Tribe";
    gv_tribeNamePool[83] = "Rio Grande Tribe";
    gv_tribeNamePool[84] = "Bacco Tribe";
    gv_tribeNamePool[85] = "Kamemor Tribe";
    gv_tribeNamePool[86] = "Pouting Tribe";
    gv_teamColorPool[1] = libNtve_gf_ConvertPlayerColorToColor(1);
    gv_teamColorPool[2] = libNtve_gf_ConvertPlayerColorToColor(2);
    gv_teamColorPool[3] = libNtve_gf_ConvertPlayerColorToColor(3);
    gv_teamColorPool[4] = libNtve_gf_ConvertPlayerColorToColor(4);
    gv_teamColorPool[5] = libNtve_gf_ConvertPlayerColorToColor(5);
    gv_teamColorPool[6] = libNtve_gf_ConvertPlayerColorToColor(6);
    gv_teamColorPool[7] = libNtve_gf_ConvertPlayerColorToColor(7);
    gv_teamColorPool[8] = libNtve_gf_ConvertPlayerColorToColor(8);
    gv_teamColorPool[9] = libNtve_gf_ConvertPlayerColorToColor(9);
    gv_teamColorPool[10] = libNtve_gf_ConvertPlayerColorToColor(10);
    gv_teamColorPool[11] = libNtve_gf_ConvertPlayerColorToColor(11);
    gv_teamColorPool[12] = libNtve_gf_ConvertPlayerColorToColor(12);
    gv_teamColorPool[13] = libNtve_gf_ConvertPlayerColorToColor(13);
    gv_teamColorPool[14] = libNtve_gf_ConvertPlayerColorToColor(14);
    gv_teamColorPool[15] = libNtve_gf_ConvertPlayerColorToColor(15);
    gv_aINamePool[1] = "Qanbot";
    gv_aINamePool[2] = "Nizius";
    gv_aINamePool[3] = "Crabbo";
    gv_aINamePool[4] = "Koddum";
    gv_aINamePool[5] = "Bokkum";
    gv_aINamePool[6] = "Toghson";
    gv_aINamePool[7] = "Nubbet";
    gv_aINamePool[8] = "Kyx";
    gv_aINamePool[9] = "Nisse";
    gv_aINamePool[10] = "Nostrob";
    gv_aINamePool[11] = "Peikko";
    gv_aINamePool[12] = "Kahvimies";
    gv_aINamePool[13] = "Sigurd";
    gv_aINamePool[14] = "Gilgamesh";
    gv_aINamePool[15] = "Ragnar";
    gv_aINamePool[16] = "Burjar";
    gv_aINamePool[17] = "Flintdagger";
    gv_aINamePool[18] = "Goldtooth";
    gv_aINamePool[19] = "Narg";
    gv_aINamePool[20] = "Ruklar";
    gv_aINamePool[21] = "Grizlak";
    gv_aINamePool[22] = "Snivvle";
    gv_aINamePool[23] = "Afvaldr";
    gv_aINamePool[24] = "Ogmundr";
    gv_aINamePool[25] = "Brynjulfr";
    gv_aINamePool[26] = "Farmann";
    gv_aINamePool[27] = "Glogg";
    gv_aINamePool[28] = "Ulfric Stormsnout";
    gv_aINamePool[29] = "Temba Widepaw";
    gv_aINamePool[30] = "Brownbeard";
    gv_aINamePool[31] = "Arngeir";
    gv_aINamePool[32] = "Jarl";
    gv_aINamePool[33] = "General Galmar";
    gv_aINamePool[34] = "Richbold";
    gv_aINamePool[35] = "Overseer Mogh";
    gv_aINamePool[36] = "Mourn";
    gv_aINamePool[37] = "Meekwhisker";
    gv_aINamePool[38] = "Cruelwhisker";
    gv_aINamePool[39] = "Eru'dak";
    gv_aINamePool[40] = "T'prakz";
    gv_aINamePool[41] = "Earhammer";
    gv_aINamePool[42] = "Eyegouger";
    gv_aINamePool[43] = "Darmok";
    gv_aINamePool[44] = "Barthas";
    gv_aINamePool[45] = "Tik";
    gv_aINamePool[46] = "Zek";
    gv_aINamePool[47] = "Nagus Kolx";
    gv_aINamePool[48] = "Grim Magnus";
    gv_aINamePool[49] = "Stormrunner";
    gv_aINamePool[50] = "Magtheridus";
    gv_aINamePool[51] = "Inflated";
    gv_aINamePool[52] = "Solidifire";
    gv_aINamePool[53] = "Private Dexter Grif";
    gv_aINamePool[54] = "Craftor";
    gv_aINamePool[55] = "WindFish";
    gv_aINamePool[56] = "pox";
    gv_aINamePool[57] = "Fnurkz";
    gv_aINamePool[58] = "Cyriaque";
    gv_aINamePool[59] = "Elfiki";
    gv_aINamePool[60] = "Pyrithi";
    gv_aINamePool[61] = "Esperanza";
    gv_aINamePool[62] = "Thelm";
    gv_aINamePool[63] = "Hjolard";
    gv_aINamePool[64] = "Ogmann";
    gv_aINamePool[65] = "Rorthor";
    gv_aINamePool[66] = "Jorunn";
    gv_aINamePool[67] = "Nedrek";
    gv_aINamePool[68] = "Alvor";
    gv_aINamePool[69] = "Horming";
    gv_aINamePool[70] = "Berj";
    gv_aINamePool[71] = "Saborm";
    gv_aINamePool[72] = "Red-Boot";
    gv_aINamePool[73] = "Ergrod";
    gv_aINamePool[74] = "Otalvor";
    gv_aINamePool[75] = "Arvild";
    gv_aINamePool[76] = "Lothgar";
    gv_aINamePool[77] = "Vestrek";
    gv_aINamePool[78] = "Jeggi";
    gv_aINamePool[79] = "Gap-Tooth";
    gv_aINamePool[80] = "Marvin";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializeText_Init () {
    gt_InitializeText = TriggerCreate("gt_InitializeText_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializeDialog
//--------------------------------------------------------------------------------------------------
bool gt_InitializeDialogs_Func (bool testConds, bool runActions) {
    int auto05B4DD58_ae;
    int auto05B4DD58_ai;
    int auto4BCF03FF_ae;
    int auto4BCF03FF_ai;
    int autoCCF7BB74_ae;
    int autoCCF7BB74_ai;
    int auto3A1045B3_ae;
    int auto3A1045B3_ai;
    int auto972AA107_ae;
    int auto972AA107_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SetupPGSWindow, true, true);
    TriggerExecute(gt_SetupRewardsDialog, true, true);
    TriggerExecute(gt_InitializeDayTimerDialog, true, true);
    TriggerExecute(gt_DTConfigSetup, true, true);
    DialogCreate(1200, 540, c_anchorCenter, 0, -125, true);
    gv_perkWindow = DialogLastCreated();
    DialogSetVisible(gv_perkWindow, PlayerGroupAll(), false);
    DialogSetTransparency(gv_perkWindow, 0.0);
    libNtve_gf_CreateDialogItemLabel(gv_perkWindow, 250, 50, c_anchorTopLeft, 250, 50, StringExternal("Param/Value/91FE84CC"), Color(100,100,100), false, 2.0);
    gv_perkTitle = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_perkWindow, 160, 45, c_anchorTopRight, 170, 40, StringExternal("Param/Value/2A71178A"), StringExternal("Param/Value/4E2469CE"), "");
    gv_perkReset = DialogControlLastCreated();
    auto05B4DD58_ae = 4;
    auto05B4DD58_ai = 1;
    lv_b = 1;
    for ( ; ( (auto05B4DD58_ai >= 0 && lv_b <= auto05B4DD58_ae) || (auto05B4DD58_ai <= 0 && lv_b >= auto05B4DD58_ae) ) ; lv_b += auto05B4DD58_ai ) {
        libNtve_gf_CreateDialogItemLabel(gv_perkWindow, 60, 50, c_anchorTopLeft, 100, (25 + (lv_b * 100)), StringExternal("Param/Value/A88514B9"), Color(100,100,100), false, 2.0);
        gv_perkTierLabel[lv_b] = DialogControlLastCreated();
        auto4BCF03FF_ae = 10;
        auto4BCF03FF_ai = 1;
        lv_a = 1;
        for ( ; ( (auto4BCF03FF_ai >= 0 && lv_a <= auto4BCF03FF_ae) || (auto4BCF03FF_ai <= 0 && lv_a >= auto4BCF03FF_ae) ) ; lv_a += auto4BCF03FF_ai ) {
            libNtve_gf_CreateDialogItemButton(gv_perkWindow, 76, 76, c_anchorTopLeft, (200 + ((lv_a - 1) * 89)), (0 + (lv_b * 100)), StringExternal("Param/Value/1B3D6AEB"), StringExternal("Param/Value/0EB3E41F"), "");
            gv_perkButton[lv_b][lv_a] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_perkWindow, 76, 76, c_anchorTopLeft, (200 + ((lv_a - 1) * 89)), (0 + (lv_b * 100)), StringExternal("Param/Value/B9294FF8"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_perkImage[lv_b][lv_a] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_perkWindow, 140, 140, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/939930B8"), "Assets\\Textures\\ui_research_button_protoss_researched.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_perkMarker[lv_b][lv_a] = DialogControlLastCreated();
            DialogControlSetVisible(gv_perkMarker[lv_b][lv_a], PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemRenderPriority(gv_perkMarker[lv_b][lv_a], 513, PlayerGroupAll());
            DialogControlSetPositionRelative(gv_perkMarker[lv_b][lv_a], PlayerGroupAll(), c_anchorCenter, gv_perkButton[lv_b][lv_a], c_anchorCenter, 0, 0);
            libNtve_gf_SetDialogItemBlendMode(gv_perkMarker[lv_b][lv_a], c_triggerBlendModeNormal, PlayerGroupAll());
        }
    }
    DialogCreate(260, 65, c_anchorCenter, -720, -245, true);
    gv_perkDialogSmall = DialogLastCreated();
    DialogSetVisible(gv_perkDialogSmall, PlayerGroupAll(), false);
    DialogSetTransparency(gv_perkDialogSmall, 10.0);
    libNtve_gf_CreateDialogItemButton(gv_perkDialogSmall, 220, 32, c_anchorCenter, 0, 0, StringExternal("Param/Value/99C93ABE"), StringExternal("Param/Value/1DC6FB0C"), "");
    gv_perkDialogSmallBTN = DialogControlLastCreated();
    DialogCreate(700, 170, c_anchorCenter, 0, -250, true);
    gv_rezzDialog = DialogLastCreated();
    DialogSetVisible(gv_rezzDialog, PlayerGroupAll(), false);
    DialogSetTransparency(gv_rezzDialog, 10.0);
    libNtve_gf_CreateDialogItemLabel(gv_rezzDialog, 350, 50, c_anchorTopLeft, 215, 45, StringExternal("Param/Value/E4301301"), Color(100,100,100), false, 2.0);
    gv_rezzDialogTitle = DialogControlLastCreated();
    autoCCF7BB74_ae = 4;
    autoCCF7BB74_ai = 1;
    lv_a = 1;
    for ( ; ( (autoCCF7BB74_ai >= 0 && lv_a <= autoCCF7BB74_ae) || (autoCCF7BB74_ai <= 0 && lv_a >= autoCCF7BB74_ae) ) ; lv_a += autoCCF7BB74_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_rezzDialog, 150, 50, c_anchorTopLeft, (50 + ((lv_a - 1) * 150)), 75, StringExternal("Param/Value/7800084B"), StringExternal("Param/Value/EEFC45E8"), "");
        gv_rezzDialogBTN[lv_a] = DialogControlLastCreated();
    }
    DialogCreate(200, 250, c_anchorBottomRight, 423, -5, true);
    gv_statusDialog = DialogLastCreated();
    DialogSetVisible(gv_statusDialog, PlayerGroupAll(), true);
    DialogSetTransparency(gv_statusDialog, 25.0);
    libNtve_gf_CreateDialogItemLabel(gv_statusDialog, 150, 50, c_anchorTop, 28, 55, StringExternal("Param/Value/A7752C27"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_warmthItem = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_statusDialog, 150, 50, c_anchorTop, 28, 110, StringExternal("Param/Value/DC6D9395"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_hungerItem = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_statusDialog, 150, 50, c_anchorTop, 28, 165, StringExternal("Param/Value/2676BD03"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_fatigueItem = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_statusDialog, 50, 50, c_anchorBottomRight, 0, -2, StringExternal("Param/Value/B76656EC"), ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/2507D9A8"), PlayerGroupAll());
    DialogCreate(200, 65, c_anchorBottomRight, 423, 230, true);
    gv_skillWindowSmall = DialogLastCreated();
    DialogSetVisible(gv_skillWindowSmall, PlayerGroupAll(), true);
    DialogSetTransparency(gv_skillWindowSmall, 10.0);
    libNtve_gf_CreateDialogItemButton(gv_skillWindowSmall, 160, 32, c_anchorCenter, 0, 0, StringExternal("Param/Value/0E27E203"), StringExternal("Param/Value/C38CB4E9"), "");
    gv_skillButton = DialogControlLastCreated();
    DialogCreate(300, 310, c_anchorBottomRight, 375, 283, true);
    gv_skillWindowBig = DialogLastCreated();
    DialogSetVisible(gv_skillWindowBig, PlayerGroupAll(), false);
    DialogSetTransparency(gv_skillWindowBig, 10.0);
    libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 50, (StringExternal("Param/Value/A355D14A") + IntToText(0)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/BC64D793"), PlayerGroupAll());
    gv_skillLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 90, (StringExternal("Param/Value/5C3A8B43") + IntToText(0)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/7759EA82"), PlayerGroupAll());
    gv_skillLabel[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 130, (StringExternal("Param/Value/EBE656F6") + IntToText(0)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/58B4BBAD"), PlayerGroupAll());
    gv_skillLabel[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 170, (StringExternal("Param/Value/75D794FE") + IntToText(0)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/F7BC9EAB"), PlayerGroupAll());
    gv_skillLabel[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 210, (StringExternal("Param/Value/2B12FD93") + IntToText(0)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/DFB326AE"), PlayerGroupAll());
    gv_skillLabel[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTop, 20, 250, (StringExternal("Param/Value/4B46B8EE") + IntToText(0)), Color(100,100,100), false, 2.0);
    gv_skillLabel[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 40, StringExternal("Param/Value/7579D239"), StringExternal("Param/Value/BD65CBB0"), "");
    gv_bTNSkillIncrease[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 80, StringExternal("Param/Value/158E297A"), StringExternal("Param/Value/D0387AA4"), "");
    gv_bTNSkillIncrease[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 120, StringExternal("Param/Value/288F920A"), StringExternal("Param/Value/12FFBE22"), "");
    gv_bTNSkillIncrease[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 160, StringExternal("Param/Value/D998387A"), StringExternal("Param/Value/DFE5827F"), "");
    gv_bTNSkillIncrease[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 200, StringExternal("Param/Value/9962E7BB"), StringExternal("Param/Value/859BD04A"), "");
    gv_bTNSkillIncrease[5] = DialogControlLastCreated();
    DialogCreate(210, 65, c_anchorBottomRight, 433, 260, true);
    gv_minimalistSkillDialog = DialogLastCreated();
    DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupAll(), true);
    DialogSetImage(gv_minimalistSkillDialog, "Assets\\Textures\\blank.dds");
    libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 40, 5, StringExternal("Param/Value/763EE2D4"), StringExternal("Param/Value/ED5E8978"), "");
    gv_minimalistSkillDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 72, 5, StringExternal("Param/Value/15BA58FF"), StringExternal("Param/Value/8306A585"), "");
    gv_minimalistSkillDialogItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 104, 5, StringExternal("Param/Value/9514C062"), StringExternal("Param/Value/3F3369C2"), "");
    gv_minimalistSkillDialogItem[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 136, 5, StringExternal("Param/Value/15E306B2"), StringExternal("Param/Value/0B702CB8"), "");
    gv_minimalistSkillDialogItem[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 167, 5, StringExternal("Param/Value/422DDE49"), StringExternal("Param/Value/00FAA468"), "");
    gv_minimalistSkillDialogItem[5] = DialogControlLastCreated();
    auto3A1045B3_ae = 5;
    auto3A1045B3_ai = 1;
    lv_a = 1;
    for ( ; ( (auto3A1045B3_ai >= 0 && lv_a <= auto3A1045B3_ae) || (auto3A1045B3_ai <= 0 && lv_a >= auto3A1045B3_ae) ) ; lv_a += auto3A1045B3_ai ) {
        DialogControlFadeTransparency(gv_minimalistSkillDialogItem[lv_a], PlayerGroupAll(), 0.0, 10.0);
    }
    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    gv_woundedFlash = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringExternal("Param/Value/1D7115EA"), "Assets\\Textures\\ui_ingame_effects_splash2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_woundedFlashImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(300, 80, c_anchorLeft, 0, -100, false);
    gv_observeRequest = DialogLastCreated();
    DialogSetVisible(gv_observeRequest, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_observeRequest, 250, 40, c_anchorTopLeft, 25, 20, StringExternal("Param/Value/78914B16"), StringExternal("Param/Value/537E3DCA"), "");
    gv_observeRequestBtn = DialogControlLastCreated();
    auto972AA107_ae = gv_players;
    auto972AA107_ai = 1;
    lv_a = 1;
    for ( ; ( (auto972AA107_ai >= 0 && lv_a <= auto972AA107_ae) || (auto972AA107_ai <= 0 && lv_a >= auto972AA107_ae) ) ; lv_a += auto972AA107_ai ) {
        DialogCreate(380, 80, c_anchorRight, 0, -100, false);
        gv_observeAnswer[lv_a] = DialogLastCreated();
        DialogSetVisible(gv_observeAnswer[lv_a], PlayerGroupAll(), false);
        TextExpressionSetToken("Param/Expression/145BC7E7", "A", StringExternal("Param/Value/05BB6ADD"));
        TextExpressionSetToken("Param/Expression/145BC7E7", "B", PlayerName(lv_a));
        TextExpressionSetToken("Param/Expression/145BC7E7", "C", StringExternal("Param/Value/ECB5AF49"));
        libNtve_gf_CreateDialogItemButton(gv_observeAnswer[lv_a], 265, 40, c_anchorTopLeft, 25, 20, StringExternal("Param/Value/6149DA39"), TextExpressionAssemble("Param/Expression/145BC7E7"), "");
        gv_observeAnswerBtnYes[lv_a] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_observeAnswer[lv_a], 70, 40, c_anchorTopRight, 25, 20, StringExternal("Param/Value/EFE81291"), StringExternal("Param/Value/DCB2CA2A"), "");
        gv_observeAnswerBtnNo[lv_a] = DialogControlLastCreated();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializeDialogs_Init () {
    gt_InitializeDialogs = TriggerCreate("gt_InitializeDialogs_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializeEnvironment
//--------------------------------------------------------------------------------------------------
bool gt_InitializeEnvironment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    unitgroup lv_temp;
    unitgroup lv_temp2;
    unitgroup lv_temp3;
    unit lv_pick;
    point lv_p;
    // Variable Initialization
    lv_temp = UnitGroupEmpty();
    lv_temp2 = UnitGroupEmpty();
    lv_temp3 = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/3A69C6B0"), 0), StringExternal("Param/Value/06977190"), StringExternal("Param/Value/3DF8EB68"), "PerkIcons\\PerkListener.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/78B654ED"), 0), StringExternal("Param/Value/FD23247A"), StringExternal("Param/Value/893386C1"), "PerkIcons\\PerkCombatTraining.dds");
    TipAlertPanelClear(PlayerGroupAll());
    GameSetLighting("Haven", 0.0);
    GameTimeOfDaySet("12:00:00");
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UnitSetInfoText(UnitFromId(2745), StringExternal("Param/Value/1A5E4F86"), StringExternal("Param/Value/DEEAA519"), StringExternal("Param/Value/75483908"));
    UnitSetInfoText(UnitFromId(2316), StringExternal("Param/Value/712255A2"), StringExternal("Param/Value/9F5B8587"), StringExternal("Param/Value/7718234E"));
    gv_sheepQuota = 100;
    gv_blueJunglefowlQuota = 80;
    gv_wolfQuota = 40;
    gv_direWolfQuota = 20;
    gv_birdQuota = 35;
    gv_elderTreeQuota = 20;
    gv_bearQuota = 15;
    gv_frostBearQuota = 45;
    gv_stagQuota = 15;
    gv_multiTeamStart[1] = PointFromId(3816);
    gv_multiTeamStart[2] = PointFromId(3818);
    gv_multiTeamStart[3] = PointFromId(3819);
    gv_multiTeamStart[4] = PointFromId(3820);
    gv_multiTeamStart[5] = PointFromId(3822);
    gv_multiTeamStart[6] = PointFromId(3817);
    gv_multiTeamStart[7] = PointFromId(3823);
    gv_multiTeamStart[8] = PointFromId(3824);
    gv_multiTeamStart[9] = PointFromId(3825);
    gv_multiTeamStart[10] = PointFromId(3826);
    gv_multiTeamStart[11] = PointFromId(4238);
    gv_multiTeamStart[12] = PointFromId(4239);
    gv_multiTeamStart[13] = PointFromId(4240);
    gv_multiTeamStart[14] = PointFromId(4241);
    gv_arenaSpectator[0] = PointFromId(3932);
    gv_arenaSpectator[1] = PointFromId(3923);
    gv_arenaSpectator[2] = PointFromId(3924);
    gv_arenaSpectator[3] = PointFromId(3925);
    gv_arenaSpectator[4] = PointFromId(3926);
    gv_arenaSpectator[5] = PointFromId(3927);
    gv_arenaSpectator[6] = PointFromId(3928);
    gv_arenaSpectator[7] = PointFromId(3929);
    gv_arenaSpectator[8] = PointFromId(3930);
    gv_arenaSpectator[9] = PointFromId(3931);
    gf_SetScaledStats("Bear", 15);
    gf_SetScaledStats("Dog", 0);
    TriggerExecute(gt_SetupFishData, true, false);
    TriggerExecute(gt_ExpeditionData, true, false);
    if ((gv_tutorial == false)) {
        if ((gv_activeTeams > 2)) {
            TimerStart(gv_questDelayTimer, (gv_questInitialDelay / 2.0), false, c_timeGame);
        }
        else {
            TimerStart(gv_questDelayTimer, gv_questInitialDelay, false, c_timeGame);
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializeEnvironment_Init () {
    gt_InitializeEnvironment = TriggerCreate("gt_InitializeEnvironment_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializeAddon
//--------------------------------------------------------------------------------------------------
bool gt_InitializeAddon_Func (bool testConds, bool runActions) {
    int autoCB5CF6F8_ae;
    int autoCB5CF6F8_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    autoCB5CF6F8_ae = gv_players;
    autoCB5CF6F8_ai = 1;
    lv_a = 1;
    for ( ; ( (autoCB5CF6F8_ai >= 0 && lv_a <= autoCB5CF6F8_ae) || (autoCB5CF6F8_ai <= 0 && lv_a >= autoCB5CF6F8_ae) ) ; lv_a += autoCB5CF6F8_ai ) {
        if ((gv_playerData[lv_a].lv_alive == true)) {
            gv_playerData[lv_a].lv_warmth += 100.0;
            gv_playerData[lv_a].lv_hunger += 100.0;
            gv_playerData[lv_a].lv_stamina += 100.0;
            gf_UpdateHighlightTooltip(lv_a);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializeAddon_Init () {
    gt_InitializeAddon = TriggerCreate("gt_InitializeAddon_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StartHint
//--------------------------------------------------------------------------------------------------
bool gt_StartHint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lastVersion;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_reprimanded[PlayerGroupLoopCurrent()] == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E3E38666"));
        }
        else {
        }
        if ((StringSub(gv_hints[PlayerGroupLoopCurrent()], 1, 1) == "0")) {
            gf_InGameHint("start", PlayerGroupLoopCurrent());
        }
        else {
        }
        if ((gv_gameMode == 2) && (StringSub(gv_hints[PlayerGroupLoopCurrent()], 23, 23) == "0")) {
            gf_InGameHint("defense", PlayerGroupLoopCurrent());
        }
        else {
        }
        if ((gv_winterHolidays == true)) {
            VisExploreArea(PlayerGroupLoopCurrent(), RegionCircle(PointFromId(4279), 4.0), true, false);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartHint_Init () {
    gt_StartHint = TriggerCreate("gt_StartHint_Func");
    TriggerAddEventTimeElapsed(gt_StartHint, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StartPatch
//--------------------------------------------------------------------------------------------------
bool gt_StartPatch_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_gameVersion != gv_lastGameVersion[PlayerGroupLoopCurrent()])) {
            SoundPlay(SoundLink("UI_TerranNewTechAvailable", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/27BC7167"));
            BankLoad("nostrobskalufs", PlayerGroupLoopCurrent());
            BankValueSetFromFixed(BankLastCreated(), "stats", "LGVP", gv_gameVersion);
            BankSave(BankLastCreated());
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartPatch_Init () {
    gt_StartPatch = TriggerCreate("gt_StartPatch_Func");
    TriggerAddEventTimeElapsed(gt_StartPatch, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TheBigPeriod
//--------------------------------------------------------------------------------------------------
bool gt_TheBigPeriod_Func (bool testConds, bool runActions) {
    int auto106F2693_ae;
    int auto106F2693_ai;
    int auto5ECBA2F4_ae;
    int auto5ECBA2F4_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    unit lv_target;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (gv_periodCycle >= 100) {
        gv_periodCycle = 1;
    }
    else {
        gv_periodCycle = gv_periodCycle + 1;
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/B026812D") + (IntToText(gv_periodCycle) + StringExternal("Param/Value/751881D6"))), false);
    if ((gv_gameDuration < 3600.0)) {
        gv_gameDuration += gv_periodInterval;
    }
    else {
    }
    if (gf_DayNightCyclePaused()) {
    }
    else {
        gf_DayNightCycle();
    }
    gf_RainLoop();
    gf_WinterLoop();
    auto106F2693_ae = gv_players;
    auto106F2693_ai = 1;
    lv_a = 1;
    for ( ; ( (auto106F2693_ai >= 0 && lv_a <= auto106F2693_ae) || (auto106F2693_ai <= 0 && lv_a >= auto106F2693_ae) ) ; lv_a += auto106F2693_ai ) {
        if ((gv_playerData[lv_a].lv_alive == true)) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/156F62D6") + (IntToText(lv_a) + StringExternal("Param/Value/9AA11BAB"))), false);
            gf_KoboldHealthStatus(gv_playerData[lv_a].lv_kobold);
            TriggerDebugOutput(1, StringExternal("Param/Value/73222C8D"), false);
            if ((UnitHasBehavior(gv_playerData[lv_a].lv_kobold, "Stationary") == true) && (gf_UnitIsBusy(gv_playerData[lv_a].lv_kobold) == false)) {
                lv_target = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_playerData[lv_a].lv_kobold), 1.0, UnitGetFacing(gv_playerData[lv_a].lv_kobold)), 1.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterArmored) | (1 << c_targetFilterBiological) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
                if (gf_UnitExists(lv_target) && (AngleBetweenPoints(UnitGetPosition(gv_playerData[lv_a].lv_kobold), UnitGetPosition(lv_target)) == UnitGetFacing(gv_playerData[lv_a].lv_kobold)) && (UnitHasBehavior(lv_target, "NodeGatherDelay") == false)) {
                    UnitBehaviorAdd(lv_target, "NodeGatherDelay", lv_target, 1);
                    UnitCreateEffectUnit(gv_playerData[lv_a].lv_kobold, "GatheringResourcesStart", lv_target);
                }
                else {
                }
            }
            else {
            }
            UnitGroupLoopBegin(gv_playerData[lv_a].lv_murlocSlaves);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Stationary") == true) && (gf_UnitIsBusy(UnitGroupLoopCurrent()) == false)) {
                    lv_target = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 1.0, UnitGetFacing(UnitGroupLoopCurrent())), 1.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterArmored) | (1 << c_targetFilterBiological) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
                    if (gf_UnitExists(lv_target) && (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_target)) == UnitGetFacing(UnitGroupLoopCurrent())) && (UnitHasBehavior(lv_target, "NodeGatherDelay") == false)) {
                        UnitBehaviorAdd(lv_target, "NodeGatherDelay", lv_target, 1);
                        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "GatheringResourcesStart", lv_target);
                    }
                    else {
                    }
                }
                else {
                }
            }
            UnitGroupLoopEnd();
        }
        else {
        }
    }
    if ((ModI(gv_periodCycle, 10) == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/BC57FE87"), false);
        gf_SpawnResources();
    }
    else {
    }
    if ((ModI(gv_periodCycle, 2) == 0)) {
        UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "FelFireTorchGracePeriod") == false)) {
                gf_ModifyTorchIntensity(UnitGetOwner(UnitGroupLoopCurrent()), -0.5);
            }
            else {
            }
            gf_UnstuckNudge(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((ModI(gv_periodCycle, 20) == 0)) {
        auto5ECBA2F4_ae = gv_players;
        auto5ECBA2F4_ai = 1;
        lv_a = 1;
        for ( ; ( (auto5ECBA2F4_ai >= 0 && lv_a <= auto5ECBA2F4_ae) || (auto5ECBA2F4_ai <= 0 && lv_a >= auto5ECBA2F4_ae) ) ; lv_a += auto5ECBA2F4_ai ) {
            gf_SetScaledStats("MurlocSlave", lv_a);
            gf_NormalizePrices(lv_a);
            if (gf_UnitExists(gv_playerData[lv_a].lv_kobold)) {
                lv_b = gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(gv_playerData[lv_a].lv_kobold)), 0);
                TriggerDebugOutput(1, (StringExternal("Param/Value/4A736773") + (IntToText(lv_b) + StringExternal("Param/Value/0C87E83B"))), false);
                if ((lv_b == -1)) {
                    lv_b = 100;
                }
                else {
                }
                gv_favouriteWeaponRating[lv_b][lv_a] += 1;
            }
            else {
            }
        }
    }
    else {
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/B250752E"), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TheBigPeriod_Init () {
    gt_TheBigPeriod = TriggerCreate("gt_TheBigPeriod_Func");
    TriggerAddEventTimePeriodic(gt_TheBigPeriod, gv_periodInterval, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializeTeams
//--------------------------------------------------------------------------------------------------
bool gt_InitializeTeams_Func (bool testConds, bool runActions) {
    int auto14F1C40C_ae;
    int auto14F1C40C_ai;
    int autoB813A59D_ae;
    int autoB813A59D_ai;
    int autoBFBDAA07_ae;
    int autoBFBDAA07_ai;
    // Variable Declarations
    int lv_a;
    playergroup lv_t;
    int lv_startlocationindexoffset;
    int lv_c;
    string lv_teamString;
    int lv_r;
    int lv_s;
    string lv_spawnIndexes;
    // Variable Initialization
    lv_t = PlayerGroupEmpty();
    lv_startlocationindexoffset = RandomInt(1, 10);
    lv_teamString = "";
    lv_spawnIndexes = "010203040506070809101112";
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupActive(), 5);
    auto14F1C40C_ae = gv_maxTeams;
    auto14F1C40C_ai = 1;
    lv_a = 1;
    for ( ; ( (auto14F1C40C_ai >= 0 && lv_a <= auto14F1C40C_ae) || (auto14F1C40C_ai <= 0 && lv_a >= auto14F1C40C_ae) ) ; lv_a += auto14F1C40C_ai ) {
        if ((gv_aIFFATestingOverride == true) && (lv_a <= 12)) {
            lv_t = PlayerGroupSingle(lv_a);
        }
        else {
            lv_t = GameAttributePlayersForTeam(lv_a);
        }
        if ((PlayerGroupCount(lv_t) > 0)) {
            gv_activeTeams += 1;
            gv_teamData[gv_activeTeams].lv_members = lv_t;
            lv_teamString = (lv_teamString + IntToString(gv_activeTeams));
            libNtve_gf_SetPlayerGroupAlliance(gv_teamData[gv_activeTeams].lv_members, 1);
            gv_teamData[lv_a].lv_aICustomization = StringReplace(gv_teamData[lv_a].lv_aICustomization, IntToString(RandomInt(0, 1)), 1, 1);
        }
        else {
        }
    }
    if ((gv_activeTeams == 2)) {
        gv_teamStartLocation[1] = PointFromId(1);
        gv_teamStartLocation[2] = PointFromId(22);
    }
    else {
        autoB813A59D_ae = gv_activeTeams;
        autoB813A59D_ai = 1;
        lv_a = 1;
        for ( ; ( (autoB813A59D_ai >= 0 && lv_a <= autoB813A59D_ae) || (autoB813A59D_ai <= 0 && lv_a >= autoB813A59D_ae) ) ; lv_a += autoB813A59D_ai ) {
            lv_r = (1 + (RandomInt(0, ((StringLength(lv_spawnIndexes) - 2) / 2)) * 2));
            lv_s = StringToInt(StringSub(lv_spawnIndexes, lv_r, (lv_r + 1)));
            gv_teamStartLocation[lv_a] = gv_multiTeamStart[lv_s];
            lv_spawnIndexes = StringReplace(lv_spawnIndexes, "", lv_r, (lv_r + 1));
        }
    }
    if ((gv_activeTeams == 2)) {
        gv_teamData[1].lv_name = StringExternal("Param/Value/0F1FEB49");
        gv_teamData[1].lv_color = Color(0.00, 50.20, 75.29);
        gv_teamData[2].lv_name = StringExternal("Param/Value/B1C4C778");
        gv_teamData[2].lv_color = Color(83.53, 83.53, 0.00);
    }
    else {
        autoBFBDAA07_ae = gv_activeTeams;
        autoBFBDAA07_ai = 1;
        lv_a = 1;
        for ( ; ( (autoBFBDAA07_ai >= 0 && lv_a <= autoBFBDAA07_ae) || (autoBFBDAA07_ai <= 0 && lv_a >= autoBFBDAA07_ae) ) ; lv_a += autoBFBDAA07_ai ) {
            lv_r = RandomInt(1, (gv_tribeNamesCount - gv_tribeNamesTaken));
            gv_teamData[lv_a].lv_name = StringToText(gv_tribeNamePool[lv_r]);
            gv_tribeNamePool[lv_r] = gv_tribeNamePool[(gv_tribeNamesCount - gv_tribeNamesTaken)];
            gv_tribeNamesTaken += 1;
            gv_teamData[lv_a].lv_color = gv_teamColorPool[lv_a];
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializeTeams_Init () {
    gt_InitializeTeams = TriggerCreate("gt_InitializeTeams_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StaminaWake
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
// Trigger: Stamina Wake
//--------------------------------------------------------------------------------------------------
bool gt_StaminaWake_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AnimSetPaused {derp death} 0");
    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AnimSetCompletion {derp death} 100.000000");
    if ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Running") == true)) {
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), Order(AbilityCommand("Run", 1)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StaminaWake_Init () {
    gt_StaminaWake = TriggerCreate("gt_StaminaWake_Func");
    TriggerAddEventPlayerEffectUsed(gt_StaminaWake, c_playerAny, "UnconsciousEndTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SyncBanks
//--------------------------------------------------------------------------------------------------
bool gt_SyncBanks_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((PlayerType(1) == c_playerTypeUser) && (PlayerStatus(1) == c_playerStatusActive)) {
        gv_bankSynced[1] = true;
    }
    else {
    }
    if ((PlayerType(2) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive)) {
        gv_bankSynced[2] = true;
    }
    else {
    }
    if ((PlayerType(3) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive)) {
        gv_bankSynced[3] = true;
    }
    else {
    }
    if ((PlayerType(4) == c_playerTypeUser) && (PlayerStatus(4) == c_playerStatusActive)) {
        gv_bankSynced[4] = true;
    }
    else {
    }
    if ((PlayerType(5) == c_playerTypeUser) && (PlayerStatus(5) == c_playerStatusActive)) {
        gv_bankSynced[5] = true;
    }
    else {
    }
    if ((PlayerType(6) == c_playerTypeUser) && (PlayerStatus(6) == c_playerStatusActive)) {
        gv_bankSynced[6] = true;
    }
    else {
    }
    if ((PlayerType(7) == c_playerTypeUser) && (PlayerStatus(7) == c_playerStatusActive)) {
        gv_bankSynced[7] = true;
    }
    else {
    }
    if ((PlayerType(8) == c_playerTypeUser) && (PlayerStatus(8) == c_playerStatusActive)) {
        gv_bankSynced[8] = true;
    }
    else {
    }
    if ((PlayerType(9) == c_playerTypeUser) && (PlayerStatus(9) == c_playerStatusActive)) {
        gv_bankSynced[9] = true;
    }
    else {
    }
    if ((PlayerType(10) == c_playerTypeUser) && (PlayerStatus(10) == c_playerStatusActive)) {
        gv_bankSynced[10] = true;
    }
    else {
    }
    if ((PlayerType(11) == c_playerTypeUser) && (PlayerStatus(11) == c_playerStatusActive)) {
        gv_bankSynced[11] = true;
    }
    else {
    }
    if ((PlayerType(12) == c_playerTypeUser) && (PlayerStatus(12) == c_playerStatusActive)) {
        gv_bankSynced[12] = true;
    }
    else {
    }
    if ((PlayerType(13) == c_playerTypeUser) && (PlayerStatus(13) == c_playerStatusActive)) {
        gv_bankSynced[13] = true;
    }
    else {
    }
    if ((PlayerType(14) == c_playerTypeUser) && (PlayerStatus(14) == c_playerStatusActive)) {
        gv_bankSynced[14] = true;
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyncBanks_Init () {
    gt_SyncBanks = TriggerCreate("gt_SyncBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoadBankUnverified
//--------------------------------------------------------------------------------------------------
bool gt_LoadBank_Func (bool testConds, bool runActions) {
    int auto090EDF9B_ae;
    int auto090EDF9B_ai;
    // Variable Declarations
    int lv_i;
    bank lv_b;
    int lv_a;
    int lv_temp;
    string lv_tempStr;
    bool lv_perkOverflowDetected;
    // Variable Initialization
    lv_tempStr = "";
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_i = PlayerGroupLoopCurrent();
        if ((PlayerType(lv_i) == c_playerTypeUser) && (gv_bankSynced[lv_i] == true)) {
            lv_perkOverflowDetected = false;
            BankLoad("nostrobskalufs", lv_i);
            lv_b = BankLastCreated();
            BankOptionSet(lv_b, c_bankOptionSignature, true);
            gv_acclvl[lv_i] = gf_LoadAccountLevel(lv_i, lv_b);
            gv_accxp[lv_i] = gf_LoadAccountXP(lv_i, lv_b);
            gv_accwins[lv_i] = gf_LoadAccountWins(lv_i, lv_b);
            gv_acclosses[lv_i] = gf_LoadAccountLosses(lv_i, lv_b);
            gv_kobkills[lv_i] = gf_LoadKoboldKills(lv_i, lv_b);
            gv_kobdeaths[lv_i] = gf_LoadKoboldDeaths(lv_i, lv_b);
            gv_ratingvalue[lv_i] = gf_LoadRatingValue(lv_i, lv_b);
            gv_ratinggames[lv_i] = gf_LoadRatingGames(lv_i, lv_b);
            if ((BankKeyExists(lv_b, "booles", "rezhintshown") == true)) {
                gv_rezhintshown[lv_i] = BankValueGetAsFlag(lv_b, "booles", "rezhintshown");
            }
            else {
                gv_rezhintshown[lv_i] = false;
            }
            if ((BankKeyExists(lv_b, "stats", "RiBktos") == true)) {
                gv_matchhistory[PlayerGroupLoopCurrent()] = BankValueGetAsString(BankLastCreated(), "stats", "RiBktos");
            }
            else {
                gv_matchhistory[PlayerGroupLoopCurrent()] = "";
            }
            if ((BankKeyExists(lv_b, "stats", "perks") == true) && (gv_reprimanded[lv_i] == false)) {
                gv_perks[lv_i] = BankValueGetAsString(lv_b, "stats", "perks");
            }
            else {
                gv_perks[lv_i] = "0000000000000000000000000000000000000000";
            }
            auto090EDF9B_ae = 40;
            auto090EDF9B_ai = 1;
            lv_a = 1;
            for ( ; ( (auto090EDF9B_ai >= 0 && lv_a <= auto090EDF9B_ae) || (auto090EDF9B_ai <= 0 && lv_a >= auto090EDF9B_ae) ) ; lv_a += auto090EDF9B_ai ) {
                if ((StringSub(gv_perks[lv_i], lv_a, lv_a) == "1")) {
                    if ((gv_perkPointsSpent[lv_i] < 20)) {
                        gv_perkPointsSpent[lv_i] += 1;
                    }
                    else {
                        gv_perks[lv_i] = StringReplace(gv_perks[lv_i], "0", lv_a, lv_a);
                        lv_perkOverflowDetected = true;
                    }
                }
                else {
                }
            }
            if ((lv_perkOverflowDetected == true)) {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, StringExternal("Param/Value/C211E324"));
            }
            else {
            }
            if ((BankKeyExists(lv_b, "stats", "IU8eR7g") == true)) {
                gv_hints[lv_i] = BankValueGetAsString(lv_b, "stats", "IU8eR7g");
            }
            else {
                gv_hints[lv_i] = "0000000000000000000000000000000000000000";
            }
            if ((BankKeyExists(lv_b, "stats", "LGVP") == true)) {
                gv_lastGameVersion[lv_i] = BankValueGetAsFixed(lv_b, "stats", "LGVP");
            }
            else {
                gv_lastGameVersion[lv_i] = gv_gameVersion;
            }
            if ((gf_BankChecksOut("gTl8zbk", "stats", 8) == true) && (gv_reprimanded[lv_i] == false)) {
                gv_gladSpree[lv_i] = gf_DecryptInt(BankValueGetAsString(lv_b, "stats", "gTl8zbk"), StringToInt(StringSub(BankValueGetAsString(lv_b, "stats", "7HuRb8gn"), (gv_trollz - 7), (gv_trollz - 7))), StringToInt(StringSub(BankValueGetAsString(lv_b, "stats", "Jyr8GxL"), 8, 8)));
            }
            else {
                gv_gladSpree[lv_i] = 0;
            }
            if ((gf_BankChecksOut("Uut1s3t", "stats", 7) == true) && (gv_reprimanded[lv_i] == false)) {
                gv_conqpoints[lv_i] = gf_DecryptInt(BankValueGetAsString(lv_b, "stats", "Uut1s3t"), StringToInt(StringSub(BankValueGetAsString(lv_b, "stats", "7HuRb8gn"), (gv_trollz - 6), (gv_trollz - 6))), StringToInt(StringSub(BankValueGetAsString(lv_b, "stats", "Jyr8GxL"), 7, 7)));
            }
            else {
                gv_conqpoints[lv_i] = 0;
            }
            gf_LoadRewards(lv_i, lv_b);
            gv_requirementString[1][lv_i] = gf_BankLoadEncryptedString("tKlz8mi", "stats", lv_i);
            gv_requirementString[2][lv_i] = gf_BankLoadEncryptedString("BuGr21z", "stats", lv_i);
            gv_requirementString[3][lv_i] = gf_BankLoadEncryptedString("K128saz", "stats", lv_i);
            gf_LoadDamageText(lv_i, lv_b);
            BankSave(lv_b);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoadBank_Init () {
    gt_LoadBank = TriggerCreate("gt_LoadBank_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializePerks
//--------------------------------------------------------------------------------------------------
bool gt_InitializePerks_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_InitializePerkImages, true, false);
    TriggerExecute(gt_InitializePerkTooltips, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializePerks_Init () {
    gt_InitializePerks = TriggerCreate("gt_InitializePerks_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializePerkImages
//--------------------------------------------------------------------------------------------------
bool gt_InitializePerkImages_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_perkImageFile[1][1] = "PerkIcons\\PerkScholar.dds";
    gv_perkImageFile[1][2] = "PerkIcons\\AnimalHandler.dds";
    gv_perkImageFile[1][3] = "PerkIcons\\PerkExcavating.dds";
    gv_perkImageFile[1][4] = "PerkIcons\\PerkNaturalForager.dds";
    gv_perkImageFile[1][5] = "PerkIcons\\PerkListener.dds";
    gv_perkImageFile[1][6] = "PerkIcons\\PerkSecondWind.dds";
    gv_perkImageFile[1][7] = "PerkIcons\\PerkBrawler.dds";
    gv_perkImageFile[1][8] = "PerkIcons\\PerkThickSkin.dds";
    gv_perkImageFile[1][9] = "PerkIcons\\PerkKoboldAgility.dds";
    gv_perkImageFile[1][10] = "PerkIcons\\PerkSurvivalist.dds";
    gv_perkImageFile[2][1] = "Icons\\Lumber.dds";
    gv_perkImageFile[2][2] = "Icons\\MurlocSlave.dds";
    gv_perkImageFile[2][3] = "Icons\\SpellBook.dds";
    gv_perkImageFile[2][4] = "Icons\\TravelingWizard.dds";
    gv_perkImageFile[2][5] = "Icons\\Alt Wool.dds";
    gv_perkImageFile[2][6] = "PerkIcons\\PerkCombatTraining.dds";
    gv_perkImageFile[2][7] = "PerkIcons\\PerkMysticism.dds";
    gv_perkImageFile[2][8] = "Icons\\Torch.dds";
    gv_perkImageFile[2][9] = "PerkIcons\\PerkFastLearner.dds";
    gv_perkImageFile[2][10] = "PerkIcons\\PerkBudgetMage.dds";
    gv_perkImageFile[3][1] = "Icons\\Alt Pick.dds";
    gv_perkImageFile[3][2] = "Icons\\IronOre.dds";
    gv_perkImageFile[3][3] = "Icons\\Leather.dds";
    gv_perkImageFile[3][4] = "Icons\\Radiant Gem.dds";
    gv_perkImageFile[3][5] = "PerkIcons\\PerkGoldenHands.dds";
    gv_perkImageFile[3][6] = "PerkIcons\\PerkMartialArtist.dds";
    gv_perkImageFile[3][7] = "PerkIcons\\PerkGoodHost.dds";
    gv_perkImageFile[3][8] = "PerkIcons\\PerkSuperstition.dds";
    gv_perkImageFile[3][9] = "Icons\\BearStrength.dds";
    gv_perkImageFile[3][10] = "Icons\\RunWalk.dds";
    gv_perkImageFile[4][1] = "Icons\\HandfulofBerries.dds";
    gv_perkImageFile[4][2] = "Icons\\NaturesGrace.dds";
    gv_perkImageFile[4][3] = "Icons\\MineralTap.dds";
    gv_perkImageFile[4][4] = "PerkIcons\\PerkHerbalist.dds";
    gv_perkImageFile[4][5] = "Icons\\Candle.dds";
    gv_perkImageFile[4][6] = "PerkIcons\\PerkSprint.dds";
    gv_perkImageFile[4][7] = "Icons\\Units\\Beaver.dds";
    gv_perkImageFile[4][8] = "Icons\\Crossbow.dds";
    gv_perkImageFile[4][9] = "PerkIcons\\PerkSharp.dds";
    gv_perkImageFile[4][10] = "PerkIcons\\PerkFireMaster.dds";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializePerkImages_Init () {
    gt_InitializePerkImages = TriggerCreate("gt_InitializePerkImages_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializePerkTooltips
//--------------------------------------------------------------------------------------------------
bool gt_InitializePerkTooltips_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_perkTooltip[1][1] = StringExternal("Param/Value/5C3C68C1");
    gv_perkTooltip[1][2] = StringExternal("Param/Value/D3761C00");
    gv_perkTooltip[1][3] = StringExternal("Param/Value/1D18618C");
    gv_perkTooltip[1][4] = StringExternal("Param/Value/4AA2D8AB");
    gv_perkTooltip[1][5] = StringExternal("Param/Value/7A573960");
    gv_perkTooltip[1][6] = StringExternal("Param/Value/15625720");
    gv_perkTooltip[1][7] = StringExternal("Param/Value/6C921AD7");
    gv_perkTooltip[1][8] = StringExternal("Param/Value/6BEB32C9");
    gv_perkTooltip[1][9] = StringExternal("Param/Value/AFC1A16D");
    gv_perkTooltip[1][10] = StringExternal("Param/Value/10E61718");
    gv_perkTooltip[2][1] = StringExternal("Param/Value/C2A3BD63");
    gv_perkTooltip[2][2] = StringExternal("Param/Value/6E800B51");
    gv_perkTooltip[2][3] = StringExternal("Param/Value/354BC0DC");
    gv_perkTooltip[2][4] = StringExternal("Param/Value/F7037D32");
    gv_perkTooltip[2][5] = StringExternal("Param/Value/566A3626");
    gv_perkTooltip[2][6] = StringExternal("Param/Value/B0B9C41B");
    gv_perkTooltip[2][7] = StringExternal("Param/Value/F2E0AE71");
    gv_perkTooltip[2][8] = StringExternal("Param/Value/35F0629B");
    gv_perkTooltip[2][9] = StringExternal("Param/Value/2CF9449C");
    gv_perkTooltip[2][10] = StringExternal("Param/Value/568DE1B7");
    gv_perkTooltip[3][1] = StringExternal("Param/Value/9EBF2D90");
    gv_perkTooltip[3][2] = StringExternal("Param/Value/43712DCD");
    gv_perkTooltip[3][3] = StringExternal("Param/Value/5120FC20");
    gv_perkTooltip[3][4] = StringExternal("Param/Value/7CFD9B01");
    gv_perkTooltip[3][5] = StringExternal("Param/Value/0A37360F");
    gv_perkTooltip[3][6] = StringExternal("Param/Value/5940572B");
    gv_perkTooltip[3][7] = StringExternal("Param/Value/C3D1CB51");
    gv_perkTooltip[3][8] = StringExternal("Param/Value/FC9CDBAD");
    gv_perkTooltip[3][9] = StringExternal("Param/Value/5FBE2436");
    gv_perkTooltip[3][10] = StringExternal("Param/Value/10B34466");
    gv_perkTooltip[4][1] = StringExternal("Param/Value/6B050219");
    gv_perkTooltip[4][2] = StringExternal("Param/Value/C0FEE850");
    gv_perkTooltip[4][3] = StringExternal("Param/Value/880725E3");
    gv_perkTooltip[4][4] = StringExternal("Param/Value/983F518C");
    gv_perkTooltip[4][5] = StringExternal("Param/Value/6CC674A5");
    gv_perkTooltip[4][6] = StringExternal("Param/Value/1C3E5BCA");
    gv_perkTooltip[4][7] = StringExternal("Param/Value/13674E4D");
    gv_perkTooltip[4][8] = StringExternal("Param/Value/AE378338");
    gv_perkTooltip[4][9] = StringExternal("Param/Value/D42A68DD");
    gv_perkTooltip[4][10] = StringExternal("Param/Value/D6C28171");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializePerkTooltips_Init () {
    gt_InitializePerkTooltips = TriggerCreate("gt_InitializePerkTooltips_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShowPerkWindow
//--------------------------------------------------------------------------------------------------
bool gt_ShowPerkWindow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_perkDialogSmallBTN))) {
            return false;
        }
        if (!((DialogIsVisible(gv_perkWindow, EventPlayer()) == false))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogSetVisible(gv_pGSWindowLarge, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_rewardsMainWindow, PlayerGroupSingle(EventPlayer()), false);
    gf_UpdatePerkWindow(EventPlayer());
    DialogSetVisible(gv_perkWindow, PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_perkDialogSmallBTN, StringExternal("Param/Value/8A5CCFD2"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_pGSWindowSmallBTN, StringExternal("Param/Value/116F2343"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_rewardsOpenerItem, gf_RewardsOpenerText(EventPlayer()), PlayerGroupSingle(EventPlayer()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowPerkWindow_Init () {
    gt_ShowPerkWindow = TriggerCreate("gt_ShowPerkWindow_Func");
    TriggerAddEventDialogControl(gt_ShowPerkWindow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SelectPerk
//--------------------------------------------------------------------------------------------------
bool gt_SelectPerk_Func (bool testConds, bool runActions) {
    int auto395A5EA3_ae;
    int auto395A5EA3_ai;
    int auto76C2E3CB_ae;
    int auto76C2E3CB_ai;
    int autoED71B2E7_ae;
    int autoED71B2E7_ai;
    int auto8E2292E5_ae;
    int auto8E2292E5_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;
    int lv_d;
    int lv_strIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_perkWindow))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventDialogControl() != gv_perkReset)) {
        autoED71B2E7_ae = 4;
        autoED71B2E7_ai = 1;
        lv_a = 1;
        for ( ; ( (autoED71B2E7_ai >= 0 && lv_a <= autoED71B2E7_ae) || (autoED71B2E7_ai <= 0 && lv_a >= autoED71B2E7_ae) ) ; lv_a += autoED71B2E7_ai ) {
            auto8E2292E5_ae = 10;
            auto8E2292E5_ai = 1;
            lv_b = 1;
            for ( ; ( (auto8E2292E5_ai >= 0 && lv_b <= auto8E2292E5_ae) || (auto8E2292E5_ai <= 0 && lv_b >= auto8E2292E5_ae) ) ; lv_b += auto8E2292E5_ai ) {
                if ((EventDialogControl() == gv_perkButton[lv_a][lv_b])) {
                    lv_c = lv_a;
                    lv_d = lv_b;
                    lv_a = 4;
                    lv_b = 10;
                }
                else {
                }
            }
        }
        lv_strIndex = (lv_d + ((lv_c - 1) * 10));
        if ((StringSub(gv_perks[EventPlayer()], lv_strIndex, lv_strIndex) == "0")) {
            if ((gv_accpp[EventPlayer()] > 0)) {
                if ((gv_bankSynced[EventPlayer()] == true)) {
                    gv_perks[EventPlayer()] = StringReplace(gv_perks[EventPlayer()], "1", lv_strIndex, lv_strIndex);
                    gv_perkPointsSpent[EventPlayer()] += 1;
                    gv_accpp[EventPlayer()] -= 1;
                    BankLoad("nostrobskalufs", EventPlayer());
                    BankValueSetFromString(BankLastCreated(), "stats", "perks", gv_perks[EventPlayer()]);
                    BankSave(BankLastCreated());
                }
                else {
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/2B8836FD"));
            }
        }
        else {
            if ((gv_bankSynced[EventPlayer()] == true)) {
                gv_perks[EventPlayer()] = StringReplace(gv_perks[EventPlayer()], "0", lv_strIndex, lv_strIndex);
                gv_perkPointsSpent[EventPlayer()] -= 1;
                gv_accpp[EventPlayer()] += 1;
                BankLoad("nostrobskalufs", EventPlayer());
                BankValueSetFromString(BankLastCreated(), "stats", "perks", gv_perks[EventPlayer()]);
                BankSave(BankLastCreated());
            }
            else {
            }
        }
    }
    else {
        auto395A5EA3_ae = 4;
        auto395A5EA3_ai = 1;
        lv_a = 1;
        for ( ; ( (auto395A5EA3_ai >= 0 && lv_a <= auto395A5EA3_ae) || (auto395A5EA3_ai <= 0 && lv_a >= auto395A5EA3_ae) ) ; lv_a += auto395A5EA3_ai ) {
            auto76C2E3CB_ae = 10;
            auto76C2E3CB_ai = 1;
            lv_b = 1;
            for ( ; ( (auto76C2E3CB_ai >= 0 && lv_b <= auto76C2E3CB_ae) || (auto76C2E3CB_ai <= 0 && lv_b >= auto76C2E3CB_ae) ) ; lv_b += auto76C2E3CB_ai ) {
                DialogControlSetVisible(gv_perkMarker[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
            }
        }
        if ((gv_bankSynced[EventPlayer()] == true)) {
            gv_perks[EventPlayer()] = "0000000000000000000000000000000000000000";
            gv_perkPointsSpent[EventPlayer()] = 0;
            gv_accpp[EventPlayer()] = gv_acclvl[EventPlayer()];
            gf_UpdatePerkWindow(EventPlayer());
            BankLoad("nostrobskalufs", EventPlayer());
            BankValueSetFromString(BankLastCreated(), "stats", "perks", gv_perks[EventPlayer()]);
            BankSave(BankLastCreated());
        }
        else {
        }
    }
    gf_UpdatePerkWindow(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SelectPerk_Init () {
    gt_SelectPerk = TriggerCreate("gt_SelectPerk_Func");
    TriggerAddEventDialogControl(gt_SelectPerk, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GoodHostSpawn
//--------------------------------------------------------------------------------------------------
bool gt_GoodHostSpawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((StringSub(gv_perks[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], 27, 27) == "1"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "GoodHostTent", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GoodHostSpawn_Init () {
    gt_GoodHostSpawn = TriggerCreate("gt_GoodHostSpawn_Func");
    TriggerAddEventPlayerEffectUsed(gt_GoodHostSpawn, c_playerAny, "TentSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupPGSWindow
//--------------------------------------------------------------------------------------------------
bool gt_SetupPGSWindow_Func (bool testConds, bool runActions) {
    int auto88D213E7_ae;
    int auto88D213E7_ai;
    int auto92AFF2E9_ae;
    int auto92AFF2E9_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(260, 65, c_anchorCenter, -720, -300, true);
    gv_pGSWindowSmall = DialogLastCreated();
    DialogSetVisible(gv_pGSWindowSmall, PlayerGroupAll(), false);
    DialogSetTransparency(gv_pGSWindowSmall, 10.0);
    libNtve_gf_CreateDialogItemButton(gv_pGSWindowSmall, 220, 32, c_anchorCenter, 0, 0, StringExternal("Param/Value/1B6B217F"), StringExternal("Param/Value/E780C352"), "");
    gv_pGSWindowSmallBTN = DialogControlLastCreated();
    DialogCreate(1200, 540, c_anchorCenter, 0, -125, true);
    gv_pGSWindowLarge = DialogLastCreated();
    DialogSetVisible(gv_pGSWindowLarge, PlayerGroupAll(), false);
    DialogSetTransparency(gv_pGSWindowLarge, 0.0);
    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 200, 50, c_anchorTopLeft, 95, 50, StringExternal("Param/Value/E2ACB3F9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16", PlayerGroupAll());
    gv_pGSWinLossLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 200, 50, c_anchorTopLeft, 100, 75, StringExternal("Param/Value/5BDB6EA8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 100, 50, c_anchorTopLeft, 415, 80, StringExternal("Param/Value/966F952A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 200, 50, c_anchorTopRight, 95, 50, StringExternal("Param/Value/7232B7AE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
    gv_pGSWinLossLabel[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 200, 50, c_anchorTopRight, 100, 75, StringExternal("Param/Value/0B9B7418"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 100, 50, c_anchorTopRight, 415, 80, StringExternal("Param/Value/D1DFB055"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
    auto88D213E7_ae = 10;
    auto88D213E7_ai = 1;
    lv_a = 1;
    for ( ; ( (auto88D213E7_ai >= 0 && lv_a <= auto88D213E7_ae) || (auto88D213E7_ai <= 0 && lv_a >= auto88D213E7_ae) ) ; lv_a += auto88D213E7_ai ) {
        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorTopLeft, 60, (85 + (lv_a * 40)), StringExternal("Param/Value/13CE47AE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16", PlayerGroupAll());
        gv_pGSPlayerLabelT1[lv_a] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 100, 50, c_anchorTopLeft, 395, (90 + (lv_a * 40)), StringExternal("Param/Value/6B6B9DA3"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_pGSWinLabelT1[lv_a] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 75, 50, c_anchorTopLeft, 465, (95 + (lv_a * 40)), StringExternal("Param/Value/ED818B25"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_pGSLossLabelT1[lv_a] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorTopRight, 60, (85 + (lv_a * 40)), StringExternal("Param/Value/71F6BE20"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        gv_pGSPlayerLabelT2[lv_a] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 100, 50, c_anchorTopRight, 395, (90 + (lv_a * 40)), StringExternal("Param/Value/BA38BA5B"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_pGSWinLabelT2[lv_a] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 75, 50, c_anchorTopRight, 465, (95 + (lv_a * 40)), StringExternal("Param/Value/890B629C"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_pGSLossLabelT2[lv_a] = DialogControlLastCreated();
    }
    DialogCreate(1200, 540, c_anchorCenter, 0, -125, true);
    gv_pGSMultiMainWindow = DialogLastCreated();
    DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupAll(), false);
    DialogSetTransparency(gv_pGSMultiMainWindow, 0.0);
    auto92AFF2E9_ae = gv_maxTeams;
    auto92AFF2E9_ai = 1;
    lv_a = 1;
    for ( ; ( (auto92AFF2E9_ai >= 0 && lv_a <= auto92AFF2E9_ae) || (auto92AFF2E9_ai <= 0 && lv_a >= auto92AFF2E9_ae) ) ; lv_a += auto92AFF2E9_ai ) {
        libNtve_gf_CreateDialogItemLabel(gv_pGSMultiMainWindow, 350, 50, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/B85F9D49"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_pGSMultiTeamLabel[lv_a] = DialogControlLastCreated();
        DialogControlSetVisible(gv_pGSMultiTeamLabel[lv_a], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(gv_pGSMultiMainWindow, 350, 50, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/FC1F61A8"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_pGSMultiPlayerLabel[lv_a] = DialogControlLastCreated();
        DialogControlSetVisible(gv_pGSMultiPlayerLabel[lv_a], PlayerGroupAll(), false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupPGSWindow_Init () {
    gt_SetupPGSWindow = TriggerCreate("gt_SetupPGSWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShowPGSWindow
//--------------------------------------------------------------------------------------------------
bool gt_ShowPGSWindow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_pGSWindowSmallBTN))) {
            return false;
        }
        if (!((DialogIsVisible(gv_pGSWindowLarge, EventPlayer()) == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogSetVisible(gv_perkWindow, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_rewardsMainWindow, PlayerGroupSingle(EventPlayer()), false);
    if ((gv_activeTeams == 2)) {
        DialogSetVisible(gv_pGSWindowLarge, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupSingle(EventPlayer()), true);
    }
    libNtve_gf_SetDialogItemText(gv_pGSWindowSmallBTN, StringExternal("Param/Value/E40C3DE5"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_perkDialogSmallBTN, StringExternal("Param/Value/D06992EB"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_rewardsOpenerItem, gf_RewardsOpenerText(EventPlayer()), PlayerGroupSingle(EventPlayer()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowPGSWindow_Init () {
    gt_ShowPGSWindow = TriggerCreate("gt_ShowPGSWindow_Func");
    TriggerAddEventDialogControl(gt_ShowPGSWindow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShowRewardData
//--------------------------------------------------------------------------------------------------
bool gt_SetupRewardData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    gv_rewardTitle[1][1] = StringExternal("Param/Value/9BB94B5E");
    gv_rewardTitle[1][2] = StringExternal("Param/Value/B143745C");
    gv_rewardTitle[1][3] = StringExternal("Param/Value/005F00C3");
    gv_rewardTitle[1][4] = StringExternal("Param/Value/1231A443");
    gv_rewardTitle[1][5] = StringExternal("Param/Value/ECBF0623");
    gv_rewardTitle[1][6] = StringExternal("Param/Value/045096BD");
    gv_rewardTitle[1][7] = StringExternal("Param/Value/181421BE");
    gv_rewardTitle[1][8] = StringExternal("Param/Value/CB82C041");
    gv_rewardTitle[1][9] = StringExternal("Param/Value/30BB307D");
    gv_rewardTitle[1][10] = StringExternal("Param/Value/DF490859");
    gv_rewardTitle[1][11] = StringExternal("Param/Value/A0C3BBC3");
    gv_rewardTitle[1][12] = StringExternal("Param/Value/8CFC0462");
    gv_rewardTitle[1][13] = StringExternal("Param/Value/55FF8D25");
    gv_rewardTitle[1][14] = StringExternal("Param/Value/BAE2A9F3");
    gv_rewardTitle[1][15] = StringExternal("Param/Value/53C39117");
    gv_rewardTitle[1][16] = StringExternal("Param/Value/C622CF68");
    gv_rewardTitle[1][17] = StringExternal("Param/Value/09324480");
    gv_rewardTitle[1][18] = StringExternal("Param/Value/887C4947");
    gv_rewardTitle[1][19] = StringExternal("Param/Value/3B156E90");
    gv_rewardTitle[1][20] = StringExternal("Param/Value/DB37DD1A");
    gv_rewardTitle[1][21] = StringExternal("Param/Value/842F98D6");
    gv_rewardTitle[1][22] = StringExternal("Param/Value/14CA2CC1");
    gv_rewardTitle[1][23] = StringExternal("Param/Value/945684F6");
    gv_rewardTitle[1][24] = StringExternal("Param/Value/5F742DC5");
    gv_rewardTitle[1][25] = StringExternal("Param/Value/F45A3C95");
    gv_rewardTitle[1][26] = StringExternal("Param/Value/B86F6F0C");
    gv_rewardTitle[1][27] = StringExternal("Param/Value/46584720");
    gv_rewardTitle[1][28] = StringExternal("Param/Value/38688B9D");
    gv_rewardsTitleStyle[3] = 2;
    gv_rewardsTitleStyle[4] = 2;
    gv_rewardsTitleStyle[5] = 2;
    gv_rewardsTitleStyle[6] = 2;
    gv_rewardsTitleStyle[9] = 2;
    gv_rewardsTitleStyle[14] = 2;
    gv_rewardsTitleStyle[15] = 2;
    gv_rewardsTitleStyle[16] = 2;
    gv_rewardsTitleStyle[18] = 2;
    gv_rewardsTitleStyle[19] = 2;
    gv_rewardsTitleStyle[22] = 2;
    gv_rewardsTitleStyle[24] = 2;
    gv_rewardCost[1][1] = 750;
    gv_rewardCost[1][2] = 750;
    gv_rewardCost[1][3] = 750;
    gv_rewardCost[1][4] = 750;
    gv_rewardCost[1][5] = 750;
    gv_rewardCost[1][6] = 1500;
    gv_rewardCost[1][7] = 1500;
    gv_rewardCost[1][8] = 1500;
    gv_rewardCost[1][9] = 2500;
    gv_rewardCost[1][10] = 2500;
    gv_rewardCost[1][11] = 2500;
    gv_rewardCost[1][12] = 5000;
    gv_rewardCost[1][13] = 5000;
    gv_rewardCost[1][14] = 7500;
    gv_rewardCost[1][15] = 7500;
    gv_rewardCost[1][16] = 7500;
    gv_rewardCost[1][17] = 10000;
    gv_rewardCost[1][18] = 15000;
    gv_rewardCost[1][19] = 15000;
    gv_rewardCost[1][20] = 15000;
    gv_rewardCost[1][21] = 17500;
    gv_rewardCost[1][22] = 17500;
    gv_rewardCost[1][23] = 17500;
    gv_rewardCost[1][24] = 20000;
    gv_rewardCost[1][25] = 20000;
    gv_rewardCost[1][26] = 35000;
    gv_rewardCost[1][27] = 0;
    gv_rewardCost[1][28] = 0;
    gv_rewardReq[1][9] = StringExternal("Param/Value/61129994");
    gv_rewardReq[1][10] = StringExternal("Param/Value/7CE7CB2C");
    gv_rewardReq[1][11] = StringExternal("Param/Value/66FFC962");
    gv_rewardReq[1][12] = StringExternal("Param/Value/71BA9112");
    gv_rewardReq[1][13] = StringExternal("Param/Value/B0B04595");
    gv_rewardReq[1][14] = StringExternal("Param/Value/B1FF4E07");
    gv_rewardReq[1][15] = StringExternal("Param/Value/BAB7C0DA");
    gv_rewardReq[1][16] = StringExternal("Param/Value/B8F37DFD");
    TextExpressionSetToken("Param/Expression/E4CF0F47", "A", StringExternal("Param/Value/AE51143C"));
    TextExpressionSetToken("Param/Expression/E4CF0F47", "B", IntToText(0));
    TextExpressionSetToken("Param/Expression/E4CF0F47", "C", StringExternal("Param/Value/5384F83A"));
    TextExpressionSetToken("Param/Expression/E4CF0F47", "D", IntToText(5));
    TextExpressionSetToken("Param/Expression/E4CF0F47", "E", StringExternal("Param/Value/B1E4C1B8"));
    gv_rewardReq[1][17] = TextExpressionAssemble("Param/Expression/E4CF0F47");
    gv_rewardReq[1][18] = StringExternal("Param/Value/DDCBE370");
    gv_rewardReq[1][19] = StringExternal("Param/Value/B3948E78");
    gv_rewardReq[1][20] = StringExternal("Param/Value/EA9E2A4E");
    gv_rewardReq[1][21] = StringExternal("Param/Value/5B7ADD94");
    gv_rewardReq[1][22] = StringExternal("Param/Value/4412CD9C");
    gv_rewardReq[1][23] = StringExternal("Param/Value/10212B4F");
    gv_rewardReq[1][24] = StringExternal("Param/Value/57F48BCF");
    gv_rewardReq[1][25] = StringExternal("Param/Value/69DD661D");
    gv_rewardReq[1][26] = StringExternal("Param/Value/62FE5EB7");
    gv_rewardReq[1][27] = StringExternal("Param/Value/70959859");
    gv_rewardReq[1][28] = StringExternal("Param/Value/8FF6A9AB");
    gv_rewardReqExists[1][9] = true;
    gv_rewardReqExists[1][10] = true;
    gv_rewardReqExists[1][11] = true;
    gv_rewardReqExists[1][12] = true;
    gv_rewardReqExists[1][13] = true;
    gv_rewardReqExists[1][14] = true;
    gv_rewardReqExists[1][15] = true;
    gv_rewardReqExists[1][16] = true;
    gv_rewardReqExists[1][17] = true;
    gv_rewardReqExists[1][18] = true;
    gv_rewardReqExists[1][19] = true;
    gv_rewardReqExists[1][20] = true;
    gv_rewardReqExists[1][21] = true;
    gv_rewardReqExists[1][22] = true;
    gv_rewardReqExists[1][23] = true;
    gv_rewardReqExists[1][24] = true;
    gv_rewardReqExists[1][25] = true;
    gv_rewardReqExists[1][26] = true;
    gv_rewardReqExists[1][27] = true;
    gv_rewardReqExists[1][28] = true;
    gv_rewardHideIfReqIncomplete[1][27] = true;
    gv_rewardHideIfReqIncomplete[1][28] = true;
    gv_rewardTitle[2][1] = StringExternal("Param/Value/EB1DF8E9");
    gv_rewardTitle[2][2] = StringExternal("Param/Value/ED8D8F6A");
    gv_rewardTitle[2][3] = StringExternal("Param/Value/66CDBCB8");
    gv_rewardTitle[2][4] = StringExternal("Param/Value/64063B5A");
    gv_rewardTitle[2][5] = StringExternal("Param/Value/BECF4C47");
    gv_rewardTitle[2][6] = StringExternal("Param/Value/FDC5BBB4");
    gv_rewardTitle[2][7] = StringExternal("Param/Value/4442732C");
    gv_rewardTitle[2][8] = StringExternal("Param/Value/B745CD41");
    gv_rewardTitle[2][9] = StringExternal("Param/Value/0BB102A6");
    gv_rewardTitle[2][27] = StringExternal("Param/Value/6951B6DE");
    gv_rewardTitle[2][28] = StringExternal("Param/Value/B2176861");
    gv_rewardCost[2][1] = 2500;
    gv_rewardCost[2][2] = 2500;
    gv_rewardCost[2][3] = 5000;
    gv_rewardCost[2][4] = 5000;
    gv_rewardCost[2][5] = 7500;
    gv_rewardCost[2][6] = 7500;
    gv_rewardCost[2][7] = 7500;
    gv_rewardCost[2][8] = 7500;
    gv_rewardCost[2][9] = 10000;
    gv_rewardCost[2][27] = 0;
    gv_rewardCost[2][28] = 0;
    gv_rewardTooltip[2][1] = StringExternal("Param/Value/F47798C3");
    gv_rewardTooltip[2][2] = StringExternal("Param/Value/613188CE");
    gv_rewardTooltip[2][3] = StringExternal("Param/Value/9B6B69F3");
    gv_rewardTooltip[2][4] = StringExternal("Param/Value/F6C5577E");
    gv_rewardTooltip[2][5] = StringExternal("Param/Value/B69FBD27");
    gv_rewardTooltip[2][6] = StringExternal("Param/Value/AFF9D081");
    gv_rewardTooltip[2][7] = StringExternal("Param/Value/830ED0F2");
    gv_rewardTooltip[2][8] = StringExternal("Param/Value/2E7D630D");
    gv_rewardTooltip[2][9] = StringExternal("Param/Value/EEB2DD38");
    gv_rewardTooltip[2][27] = StringExternal("Param/Value/2433645B");
    gv_rewardTooltip[2][28] = StringExternal("Param/Value/FE640A06");
    gv_rewardReq[2][2] = StringExternal("Param/Value/D23C549C");
    gv_rewardReq[2][5] = StringExternal("Param/Value/5B2CAFFA");
    gv_rewardReq[2][6] = StringExternal("Param/Value/FA2C8287");
    gv_rewardReq[2][8] = StringExternal("Param/Value/6009899E");
    gv_rewardReq[2][9] = StringExternal("Param/Value/F00D1F5C");
    gv_rewardReq[2][27] = StringExternal("Param/Value/41CEF562");
    gv_rewardReq[2][28] = StringExternal("Param/Value/628AEA03");
    gv_rewardReqExists[2][2] = true;
    gv_rewardReqExists[2][5] = true;
    gv_rewardReqExists[2][6] = true;
    gv_rewardReqExists[2][8] = true;
    gv_rewardReqExists[2][9] = true;
    gv_rewardReqExists[2][27] = true;
    gv_rewardReqExists[2][28] = true;
    gv_rewardHideIfReqIncomplete[2][27] = true;
    gv_rewardHideIfReqIncomplete[2][28] = true;
    gv_rewardTitle[3][1] = StringExternal("Param/Value/6A9B9402");
    gv_rewardTitle[3][2] = StringExternal("Param/Value/A6DEE159");
    gv_rewardTitle[3][3] = StringExternal("Param/Value/9B6456E6");
    gv_rewardTitle[3][4] = StringExternal("Param/Value/5266414A");
    gv_rewardTitle[3][5] = StringExternal("Param/Value/12C374DE");
    gv_rewardCost[3][1] = 4000;
    gv_rewardCost[3][2] = 4000;
    gv_rewardCost[3][3] = 10000;
    gv_rewardCost[3][4] = 15000;
    gv_rewardCost[3][5] = 15000;
    gv_rewardTooltip[3][1] = StringExternal("Param/Value/BA058DA5");
    gv_rewardTooltip[3][2] = StringExternal("Param/Value/AD8F1391");
    gv_rewardTooltip[3][3] = StringExternal("Param/Value/9ADD45F8");
    gv_rewardTooltip[3][4] = StringExternal("Param/Value/C3B758AE");
    gv_rewardTooltip[3][5] = StringExternal("Param/Value/B437C95C");
    gv_rewardReq[3][2] = StringExternal("Param/Value/92A8A7B6");
    gv_rewardReq[3][3] = StringExternal("Param/Value/52E5EB8B");
    gv_rewardReq[3][4] = StringExternal("Param/Value/E4B04AF9");
    gv_rewardReq[3][5] = StringExternal("Param/Value/FE4B8323");
    gv_rewardReqExists[3][2] = true;
    gv_rewardReqExists[3][3] = true;
    gv_rewardReqExists[3][4] = true;
    gv_rewardReqExists[3][5] = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupRewardData_Init () {
    gt_SetupRewardData = TriggerCreate("gt_SetupRewardData_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupRewardsDialog
//--------------------------------------------------------------------------------------------------
bool gt_SetupRewardsDialog_Func (bool testConds, bool runActions) {
    int auto2820C9B2_ae;
    int auto2820C9B2_ai;
    int auto3986868D_ae;
    int auto3986868D_ai;
    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(260, 65, c_anchorCenter, -720, -190, true);
    gv_rewardsOpenerDialog = DialogLastCreated();
    DialogSetVisible(gv_rewardsOpenerDialog, PlayerGroupAll(), false);
    DialogSetTransparency(gv_rewardsOpenerDialog, 10.0);
    libNtve_gf_CreateDialogItemButton(gv_rewardsOpenerDialog, 220, 32, c_anchorCenter, 0, 0, StringExternal("Param/Value/583DD6A1"), StringExternal("Param/Value/A22BC165"), "");
    gv_rewardsOpenerItem = DialogControlLastCreated();
    DialogCreate(1200, 540, c_anchorCenter, 0, -125, true);
    gv_rewardsMainWindow = DialogLastCreated();
    DialogSetVisible(gv_rewardsMainWindow, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_rewardsMainWindow, 250, 50, c_anchorTopLeft, 75, 75, StringExternal("Param/Value/398D1D0C"), Color(100,100,100), false, 2.0);
    gv_conqpointsLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_rewardsMainWindow, 220, 50, c_anchorTopLeft, 75, 125, StringExternal("Param/Value/AA0A072B"), StringExternal("Param/Value/10C2DE53"), "");
    gv_rewardsCatBTN[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_rewardsMainWindow, 220, 50, c_anchorTopLeft, 75, 175, StringExternal("Param/Value/0D73B971"), StringExternal("Param/Value/38C24E7A"), "");
    gv_rewardsCatBTN[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_rewardsMainWindow, 220, 50, c_anchorTopLeft, 75, 225, StringExternal("Param/Value/5B3E6BC0"), StringExternal("Param/Value/1E5F4FBD"), "");
    gv_rewardsCatBTN[3] = DialogControlLastCreated();
    auto2820C9B2_ae = 7;
    auto2820C9B2_ai = 1;
    lv_y = 1;
    for ( ; ( (auto2820C9B2_ai >= 0 && lv_y <= auto2820C9B2_ae) || (auto2820C9B2_ai <= 0 && lv_y >= auto2820C9B2_ae) ) ; lv_y += auto2820C9B2_ai ) {
        auto3986868D_ae = 4;
        auto3986868D_ai = 1;
        lv_x = 1;
        for ( ; ( (auto3986868D_ai >= 0 && lv_x <= auto3986868D_ae) || (auto3986868D_ai <= 0 && lv_x >= auto3986868D_ae) ) ; lv_x += auto3986868D_ai ) {
            lv_i += 1;
            TextExpressionSetToken("Param/Expression/A2EFDF1C", "A", StringExternal("Param/Value/2E5EF66E"));
            TextExpressionSetToken("Param/Expression/A2EFDF1C", "B", IntToText(lv_y));
            TextExpressionSetToken("Param/Expression/A2EFDF1C", "C", StringExternal("Param/Value/6BC0FF44"));
            TextExpressionSetToken("Param/Expression/A2EFDF1C", "D", IntToText(lv_x));
            TextExpressionSetToken("Param/Expression/A2EFDF1C", "E", StringExternal("Param/Value/35F3E661"));
            libNtve_gf_CreateDialogItemButton(gv_rewardsMainWindow, 180, 40, c_anchorTopLeft, (150 + (lv_x * 200)), (30 + (lv_y * 55)), StringExternal("Param/Value/6B0CEF15"), TextExpressionAssemble("Param/Expression/A2EFDF1C"), "");
            gv_rewardButton[lv_i] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupRewardsDialog_Init () {
    gt_SetupRewardsDialog = TriggerCreate("gt_SetupRewardsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RewardsDialogInteract
//--------------------------------------------------------------------------------------------------
bool gt_RewardsDialogInteract_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventDialogControl() == gv_rewardsOpenerItem)) {
        gf_ShowRewardsDialog(EventPlayer());
        gf_UpdateRewardsDialog(EventPlayer());
    }
    else if ((EventDialogControl() == gv_rewardsCatBTN[1])) {
        gv_rewardsCatSelect[EventPlayer()] = 1;
        gf_UpdateRewardsDialog(EventPlayer());
    }
    else if ((EventDialogControl() == gv_rewardsCatBTN[2])) {
        gv_rewardsCatSelect[EventPlayer()] = 2;
        gf_UpdateRewardsDialog(EventPlayer());
    }
    else if ((EventDialogControl() == gv_rewardsCatBTN[3])) {
        gv_rewardsCatSelect[EventPlayer()] = 3;
        gf_UpdateRewardsDialog(EventPlayer());
    }
    else if ((gf_RewardButtonClicked(EventDialogControl()) == true)) {
        lv_a = gf_GetRewardButtonIndex(EventDialogControl());
        if (((gv_rewardReqExists[gv_rewardsCatSelect[EventPlayer()]][lv_a] == false) || (gf_RequirementCompleted(EventPlayer(), gv_rewardsCatSelect[EventPlayer()], lv_a) == true))) {
            if (((gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 1) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 4) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 7))) {
                if ((gv_conqpoints[EventPlayer()] >= gv_rewardCost[gv_rewardsCatSelect[EventPlayer()]][lv_a])) {
                    gv_conqpoints[EventPlayer()] -= gv_rewardCost[gv_rewardsCatSelect[EventPlayer()]][lv_a];
                    gf_SaveResources(EventPlayer());
                    gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] = gf_GetUnlockedVariable(3);
                    gf_DeactivateConflictingRewards(EventPlayer(), gv_rewardsCatSelect[EventPlayer()], lv_a);
                    gf_SaveRewards(EventPlayer());
                    gf_UpdateRewardsDialog(EventPlayer());
                    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                    TextExpressionSetToken("Param/Expression/4589585B", "C", StringExternal("Param/Value/FF5B0BE4"));
                    TextExpressionSetToken("Param/Expression/4589585B", "A", gv_rewardTitle[gv_rewardsCatSelect[EventPlayer()]][lv_a]);
                    TextExpressionSetToken("Param/Expression/4589585B", "B", StringExternal("Param/Value/562738DF"));
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/4589585B"));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/62473311"));
                }
            }
            else if (((gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 2) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 5) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 8))) {
                gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] = gf_GetUnlockedVariable(3);
                gf_DeactivateConflictingRewards(EventPlayer(), gv_rewardsCatSelect[EventPlayer()], lv_a);
                gf_SaveRewards(EventPlayer());
                gf_UpdateRewardsDialog(EventPlayer());
            }
            else if (((gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 3) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 6) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 9))) {
                gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] = gf_GetUnlockedVariable(2);
                gf_SaveRewards(EventPlayer());
                gf_UpdateRewardsDialog(EventPlayer());
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/7B3D3CB6"));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RewardsDialogInteract_Init () {
    gt_RewardsDialogInteract = TriggerCreate("gt_RewardsDialogInteract_Func");
    TriggerAddEventDialogControl(gt_RewardsDialogInteract, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AfflictionTrigger
//--------------------------------------------------------------------------------------------------
bool gt_AfflictionTrigger_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UnlockRequirement(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1, 11);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AfflictionTrigger_Init () {
    gt_AfflictionTrigger = TriggerCreate("gt_AfflictionTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_AfflictionTrigger, c_playerAny, "AfflictionAchievementTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AristocratFail
//--------------------------------------------------------------------------------------------------
bool gt_AristocratFail_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aristocrat[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AristocratFail_Init () {
    gt_AristocratFail = TriggerCreate("gt_AristocratFail_Func");
    TriggerAddEventPlayerEffectUsed(gt_AristocratFail, c_playerAny, "AristocratRequirementRemove");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HunterRequirement
//--------------------------------------------------------------------------------------------------
bool gt_HunterRequirement_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UnlockRequirement(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 1, 22);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HunterRequirement_Init () {
    gt_HunterRequirement = TriggerCreate("gt_HunterRequirement_Func");
    TriggerAddEventPlayerEffectUsed(gt_HunterRequirement, c_playerAny, "HunterRequirement");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CollectorRequirement
//--------------------------------------------------------------------------------------------------
bool gt_CollectorRequirement_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UnlockRequirement(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CollectorRequirement_Init () {
    gt_CollectorRequirement = TriggerCreate("gt_CollectorRequirement_Func");
    TriggerAddEventPlayerEffectUsed(gt_CollectorRequirement, c_playerAny, "CollectorRequirement");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SlavemasterRequirement
//--------------------------------------------------------------------------------------------------
bool gt_SlavemasterRequirement_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UnlockRequirement(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1, 25);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SlavemasterRequirement_Init () {
    gt_SlavemasterRequirement = TriggerCreate("gt_SlavemasterRequirement_Func");
    TriggerAddEventPlayerEffectUsed(gt_SlavemasterRequirement, c_playerAny, "SlavemasterRequirement");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpecialRewardsList
//--------------------------------------------------------------------------------------------------
bool gt_SpecialRewardsList_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_AddSpecialReward("1-S2-1-3931630", "tournamentWin0002a", StringExternal("Param/Value/04BD10CC"));
    gf_AddSpecialReward("1-S2-1-3931630", "tournamentWin0002b", StringExternal("Param/Value/B0921768"));
    gf_AddSpecialReward("1-S2-1-3931630", "tournamentWin0002c", StringExternal("Param/Value/C46F48F4"));
    gf_AddSpecialReward("2-S2-1-313986", "tournamentWin0002a", StringExternal("Param/Value/07175D58"));
    gf_AddSpecialReward("2-S2-1-313986", "tournamentWin0002b", StringExternal("Param/Value/05572D9C"));
    gf_AddSpecialReward("2-S2-1-313986", "tournamentWin0002c", StringExternal("Param/Value/49CAD12B"));
    gf_AddSpecialReward("1-S2-1-1881435", "tournamentWin0002b", StringExternal("Param/Value/082BDBB4"));
    gf_AddSpecialReward("1-S2-1-1065370", "tournamentWin0002b", StringExternal("Param/Value/3CC52069"));
    gf_AddSpecialReward("2-S2-1-1948976", "tournamentWin0002b", StringExternal("Param/Value/589F8640"));
    gf_AddSpecialReward("PLACEHOLDER", "tournamentWin0002a", StringExternal("Param/Value/8CA1CFBE"));
    gf_AddSpecialReward("PLACEHOLDER", "tournamentWin0002a", StringExternal("Param/Value/43E8E9C0"));
    gf_AddSpecialReward("1-S2-1-3632156", "tournamentWin0002a", StringExternal("Param/Value/2C4BA1CB"));
    gf_AddSpecialReward("1-S2-1-2583714", "tournamentWin0002a", StringExternal("Param/Value/83D4B61B"));
    gf_AddSpecialReward("PLACEHOLDER", "tournamentWin0002a", StringExternal("Param/Value/B5C9946F"));
    gf_AddSpecialReward("2-S2-1-3962877", "tournamentWin0002a", StringExternal("Param/Value/F243BEFB"));
    gf_AddSpecialReward("1-S2-1-4297629", "tournamentWin0002c", StringExternal("Param/Value/4627125E"));
    gf_AddSpecialReward("1-S2-1-1854249", "tournamentWin0002c", StringExternal("Param/Value/475E9459"));
    gf_AddSpecialReward("1-S2-1-4309763", "tournamentWin0002c", StringExternal("Param/Value/97F16338"));
    gf_AddSpecialReward("2-S2-2-488074", "tournamentWin0002c", StringExternal("Param/Value/9074E490"));
    gf_AddSpecialReward("1-S2-1-4315539", "tournamentWin0002c", StringExternal("Param/Value/2B9A6736"));
    gf_AddSpecialReward("2-S2-1-236197", "tournamentWin0002c", StringExternal("Param/Value/21D5CAEF"));
    gf_AddSpecialReward("1-S2-1-2021139", "tournamentWin0002c", StringExternal("Param/Value/FA300935"));
    gf_AddSpecialReward("1-S2-1-5100676", "tournamentWin0002c", StringExternal("Param/Value/8733B7D1"));
    gf_AddSpecialReward("1-S2-1-4149377", "tournamentWin0002c", StringExternal("Param/Value/591BEBF1"));
    gf_AddSpecialReward("2-S2-1-3468638", "tournamentWin0002c", StringExternal("Param/Value/824DA49D"));
    gf_AddSpecialReward("1-S2-1-4641268", "tournamentWin0002c", StringExternal("Param/Value/35A82913"));
    gf_AddSpecialReward("2-S2-1-2616365", "tournamentWin0002c", StringExternal("Param/Value/89FBAB39"));
    gf_AddSpecialReward("2-S2-1-189001", "tournamentWin0002c", StringExternal("Param/Value/812555AD"));
    gf_AddSpecialReward("1-S2-1-1709040", "tournamentWin0002c", StringExternal("Param/Value/5A479E5C"));
    gf_AddSpecialReward("1-S2-1-3517129", "tournamentWin0002c", StringExternal("Param/Value/29AFE25E"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpecialRewardsList_Init () {
    gt_SpecialRewardsList = TriggerCreate("gt_SpecialRewardsList_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReprimandedListInfo
//--------------------------------------------------------------------------------------------------
bool gt_ReprimandedListInfo_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReprimandedListInfo_Init () {
    gt_ReprimandedListInfo = TriggerCreate("gt_ReprimandedListInfo_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: QuestTimer
//--------------------------------------------------------------------------------------------------
bool gt_QuestTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_InitializeQuest(0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_QuestTimer_Init () {
    gt_QuestTimer = TriggerCreate("gt_QuestTimer_Func");
    TriggerAddEventTimer(gt_QuestTimer, gv_questDelayTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: QuestTimerUpdate
//--------------------------------------------------------------------------------------------------
bool gt_QuestTimerUpdate_Func (bool testConds, bool runActions) {
    int auto3FA9ED3A_ae;
    int auto3FA9ED3A_ai;
    int auto02A3BBEC_ae;
    int auto02A3BBEC_ai;
    // Variable Declarations
    int lv_a;
    fixed lv_remainingTime;
    text lv_timerAddon;
    text lv_extraAddon;
    // Variable Initialization
    lv_remainingTime = TimerGetRemaining(gv_questTimer);
    // Conditions
    if (testConds) {
        if (!((gv_questActive == true))) {
            return false;
        }
        if (!((lv_remainingTime > 0.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((lv_remainingTime >= 30.0)) {
        TextExpressionSetToken("Param/Expression/CB3C71BD", "A", StringExternal("Param/Value/791098B6"));
        TextExpressionSetToken("Param/Expression/CB3C71BD", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(lv_remainingTime)));
        TextExpressionSetToken("Param/Expression/CB3C71BD", "C", StringExternal("Param/Value/41691093"));
        lv_timerAddon = TextExpressionAssemble("Param/Expression/CB3C71BD");
    }
    else {
        TextExpressionSetToken("Param/Expression/A5E1739B", "A", StringExternal("Param/Value/EB2DA203"));
        TextExpressionSetToken("Param/Expression/A5E1739B", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(lv_remainingTime)));
        TextExpressionSetToken("Param/Expression/A5E1739B", "C", StringExternal("Param/Value/018DB6B3"));
        lv_timerAddon = TextExpressionAssemble("Param/Expression/A5E1739B");
    }
    if ((gv_questIndexActive == 4)) {
        lv_extraAddon = StringExternal("Param/Value/C2A5BFD7");
        auto3FA9ED3A_ae = gv_activeTeams;
        auto3FA9ED3A_ai = 1;
        lv_a = 1;
        for ( ; ( (auto3FA9ED3A_ai >= 0 && lv_a <= auto3FA9ED3A_ae) || (auto3FA9ED3A_ai <= 0 && lv_a >= auto3FA9ED3A_ae) ) ; lv_a += auto3FA9ED3A_ai ) {
            if ((gv_teamData[lv_a].lv_allDead == false)) {
                TextExpressionSetToken("Param/Expression/285BD276", "F", lv_extraAddon);
                TextExpressionSetToken("Param/Expression/285BD276", "D", StringExternal("Param/Value/FD8CAB7D"));
                TextExpressionSetToken("Param/Expression/285BD276", "A", gf_GetTribeTextOfTeam(lv_a));
                TextExpressionSetToken("Param/Expression/285BD276", "B", StringExternal("Param/Value/49AB34A5"));
                TextExpressionSetToken("Param/Expression/285BD276", "C", IntToText(gv_grownTreesTeam[lv_a]));
                lv_extraAddon = TextExpressionAssemble("Param/Expression/285BD276");
            }
            else {
            }
        }
        if ((gv_grownTreesLeadingTeam != 0)) {
            TextExpressionSetToken("Param/Expression/D6E7E9E6", "A", lv_extraAddon);
            TextExpressionSetToken("Param/Expression/D6E7E9E6", "B", StringExternal("Param/Value/AD6FD5C5"));
            TextExpressionSetToken("Param/Expression/D6E7E9E6", "C", gf_GetTribeTextOfTeam(gv_grownTreesLeadingTeam));
            lv_extraAddon = TextExpressionAssemble("Param/Expression/D6E7E9E6");
        }
        else {
        }
    }
    else if ((gv_questIndexActive == 5)) {
        lv_extraAddon = gf_FeastProgressText();
    }
    else if ((gv_questIndexActive == 6)) {
        TextExpressionSetToken("Param/Expression/5430B19F", "A", StringExternal("Param/Value/1A5B981D"));
        TextExpressionSetToken("Param/Expression/5430B19F", "B", gf_GetTeamChallengerName(1));
        TextExpressionSetToken("Param/Expression/5430B19F", "C", StringExternal("Param/Value/F43B2F7B"));
        TextExpressionSetToken("Param/Expression/5430B19F", "D", gf_GetTeamChallengerName(2));
        TextExpressionSetToken("Param/Expression/5430B19F", "E", StringExternal("Param/Value/779FD30D"));
        lv_extraAddon = TextExpressionAssemble("Param/Expression/5430B19F");
    }
    else if ((gv_questIndexActive == 9)) {
        lv_extraAddon = StringExternal("Param/Value/B87A643B");
        auto02A3BBEC_ae = gv_activeTeams;
        auto02A3BBEC_ai = 1;
        lv_a = 1;
        for ( ; ( (auto02A3BBEC_ai >= 0 && lv_a <= auto02A3BBEC_ae) || (auto02A3BBEC_ai <= 0 && lv_a >= auto02A3BBEC_ae) ) ; lv_a += auto02A3BBEC_ai ) {
            if ((gv_teamData[lv_a].lv_allDead == false)) {
                TextExpressionSetToken("Param/Expression/44642923", "F", lv_extraAddon);
                TextExpressionSetToken("Param/Expression/44642923", "D", StringExternal("Param/Value/F78856C8"));
                TextExpressionSetToken("Param/Expression/44642923", "A", gf_GetTribeTextOfTeam(lv_a));
                TextExpressionSetToken("Param/Expression/44642923", "B", StringExternal("Param/Value/E4534C22"));
                TextExpressionSetToken("Param/Expression/44642923", "C", IntToText(gv_trufflesFound[lv_a]));
                lv_extraAddon = TextExpressionAssemble("Param/Expression/44642923");
            }
            else {
            }
        }
        if ((gv_truffleLeadingTeam != 0)) {
            TextExpressionSetToken("Param/Expression/9A790C6F", "A", lv_extraAddon);
            TextExpressionSetToken("Param/Expression/9A790C6F", "B", StringExternal("Param/Value/569114BF"));
            TextExpressionSetToken("Param/Expression/9A790C6F", "C", gf_GetTribeTextOfTeam(gv_truffleLeadingTeam));
            lv_extraAddon = TextExpressionAssemble("Param/Expression/9A790C6F");
        }
        else {
        }
    }
    else if ((gv_questIndexActive == 10) && (gv_witchSummoned == false)) {
        TextExpressionSetToken("Param/Expression/72312767", "A", StringExternal("Param/Value/BA739526"));
        TextExpressionSetToken("Param/Expression/72312767", "B", IntToText(gv_bearsKilled));
        TextExpressionSetToken("Param/Expression/72312767", "C", StringExternal("Param/Value/6BE85037"));
        TextExpressionSetToken("Param/Expression/72312767", "D", IntToText(gv_witchSpawnReq));
        TextExpressionSetToken("Param/Expression/72312767", "E", StringExternal("Param/Value/54262A80"));
        lv_extraAddon = TextExpressionAssemble("Param/Expression/72312767");
    }
    else if ((gv_questIndexActive == 16)) {
        lv_extraAddon = gf_ExpeditionProgressText();
    }
    if ((gv_questIndexActive == 6) && ((TimerGetRemaining(gv_questTimer) >= 1) && (TimerGetRemaining(gv_questTimer) <= 5))) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/0280AA6D", "A", gv_questText);
    TextExpressionSetToken("Param/Expression/0280AA6D", "B", lv_timerAddon);
    TextExpressionSetToken("Param/Expression/0280AA6D", "C", lv_extraAddon);
    ObjectiveSetName(gv_questObjective, TextExpressionAssemble("Param/Expression/0280AA6D"));
    TimerStart(gv_questTimerUpdate, 1.0, false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_QuestTimerUpdate_Init () {
    gt_QuestTimerUpdate = TriggerCreate("gt_QuestTimerUpdate_Func");
    TriggerAddEventTimer(gt_QuestTimerUpdate, gv_questTimerUpdate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ChiefExpire
//--------------------------------------------------------------------------------------------------
bool gt_ChiefExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_p = UnitGetPosition(gv_murlocChief);
    gv_questIndexActive = 0;
    gv_questActive = false;
    SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupActive(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/94AEE95B"));
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_chiefPing);
    UnitRemove(gv_murlocChief);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChiefExpire_Init () {
    gt_ChiefExpire = TriggerCreate("gt_ChiefExpire_Func");
    TriggerAddEventTimer(gt_ChiefExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ChiefCharge
//--------------------------------------------------------------------------------------------------
bool gt_ChiefCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    fixed lv_angle;
    // Variable Initialization
    lv_distance = DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    lv_angle = AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.0);
    gf_Charge(EventPlayerEffectUsedUnit(c_effectUnitCaster), PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), (10.0 - lv_distance), lv_angle), 1.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChiefCharge_Init () {
    gt_ChiefCharge = TriggerCreate("gt_ChiefCharge_Func");
    TriggerAddEventPlayerEffectUsed(gt_ChiefCharge, c_playerAny, "MurlocRushTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ChiefEnrage
//--------------------------------------------------------------------------------------------------
bool gt_ChiefEnrage_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    CatalogFieldValueSet(c_gameCatalogAbil, "MurlocRush", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString(4.0, 0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChiefEnrage_Init () {
    gt_ChiefEnrage = TriggerCreate("gt_ChiefEnrage_Func");
    TriggerAddEventPlayerEffectUsed(gt_ChiefEnrage, c_playerAny, "MurlocFrenzyApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ChiefDerage
//--------------------------------------------------------------------------------------------------
bool gt_ChiefDerage_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    CatalogFieldValueSet(c_gameCatalogAbil, "MurlocRush", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString(7.0, 0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChiefDerage_Init () {
    gt_ChiefDerage = TriggerCreate("gt_ChiefDerage_Func");
    TriggerAddEventPlayerEffectUsed(gt_ChiefDerage, c_playerAny, "MurlocFrenzyRemove");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TreasureExpire
//--------------------------------------------------------------------------------------------------
bool gt_TreasureExpire_Func (bool testConds, bool runActions) {
    int autoC9C4173E_ae;
    int autoC9C4173E_ai;
    // Variable Declarations
    int lv_a;
    point lv_p;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[2] = true;
    UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupActive(), 100.0, 0.0);
    ObjectiveDestroy(gv_questObjective);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FC8D301C"));
    autoC9C4173E_ae = 20;
    autoC9C4173E_ai = 1;
    lv_a = 1;
    for ( ; ( (autoC9C4173E_ai >= 0 && lv_a <= autoC9C4173E_ae) || (autoC9C4173E_ai <= 0 && lv_a >= autoC9C4173E_ae) ) ; lv_a += autoC9C4173E_ai ) {
        PingDestroy(gv_treasurePing[lv_a]);
    }
    UnitGroupLoopBegin(gv_treasureChests);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "KingsReward") == false)) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TreasureExpire_Init () {
    gt_TreasureExpire = TriggerCreate("gt_TreasureExpire_Func");
    TriggerAddEventTimer(gt_TreasureExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Retrieved
//--------------------------------------------------------------------------------------------------
bool gt_Retrieved_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    point lv_p;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_p = UnitGetPosition(gv_merchant);
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Actions
    if (!runActions) {
        return true;
    }
    TextExpressionSetToken("Param/Expression/7C267A37", "A", TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
    TextExpressionSetToken("Param/Expression/7C267A37", "B", StringExternal("Param/Value/9F020F5E"));
    TextExpressionSetToken("Param/Expression/7C267A37", "C", gf_GetTribeTextOfPlayer(lv_i));
    TextExpressionSetToken("Param/Expression/7C267A37", "D", StringExternal("Param/Value/A41D2C13"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/7C267A37"));
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[3] = true;
    TimerPause(gv_questTimer, true);
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_shipmentPing);
    PingDestroy(gv_merchantPing);
    gf_DropandRemove(gv_shipment);
    UnitRemove(gv_merchant);
    gf_RetrieveRewards(lv_p);
    lv_questWinners = gv_teamData[gv_playerData[lv_i].lv_team].lv_members;
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Retrieved_Init () {
    gt_Retrieved = TriggerCreate("gt_Retrieved_Func");
    TriggerAddEventPlayerEffectUsed(gt_Retrieved, 0, "FindCrabTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RetrieveExpire
//--------------------------------------------------------------------------------------------------
bool gt_RetrieveExpire_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 3))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B5707E6E"));
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_shipmentPing);
    PingDestroy(gv_merchantPing);
    gf_DropandRemove(gv_shipment);
    UnitRemove(gv_merchant);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RetrieveExpire_Init () {
    gt_RetrieveExpire = TriggerCreate("gt_RetrieveExpire_Func");
    TriggerAddEventTimer(gt_RetrieveExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PlantEnd
//--------------------------------------------------------------------------------------------------
bool gt_PlantEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    int lv_mostPlantedTeam;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 4))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[4] = true;
    ObjectiveDestroy(gv_questObjective);
    if ((gv_grownTreesLeadingTeam != 0)) {
        lv_questWinners = gv_teamData[gv_grownTreesLeadingTeam].lv_members;
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
        TextExpressionSetToken("Param/Expression/2508B556", "A", StringExternal("Param/Value/60F5B409"));
        TextExpressionSetToken("Param/Expression/2508B556", "B", gf_GetTribeTextOfTeam(gv_grownTreesLeadingTeam));
        TextExpressionSetToken("Param/Expression/2508B556", "C", StringExternal("Param/Value/88B537EA"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2508B556"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A0CFAF7D"));
    }
    if (((gv_grownTreesLeadingTeam >= 1) && (gv_grownTreesLeadingTeam <= gv_players))) {
        PlayerGroupLoopBegin(lv_questWinners);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/56AB984F"));
            gv_skillPointsPlayer[PlayerGroupLoopCurrent()] += 5;
            gf_IncreaseSkillType(PlayerGroupLoopCurrent(), 1, 5);
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                gf_Quicktag(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, StringExternal("Param/Value/8934A9A1"), 5.0, 24);
                CatalogFieldValueSet(c_gameCatalogEffect, "GrandForesterDuration", "Amount", PlayerGroupLoopCurrent(), FixedToString(480.0, 0));
                UnitBehaviorAdd(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "GrandForestersFavoured", gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, 1);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    }
    else {
    }
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlantEnd_Init () {
    gt_PlantEnd = TriggerCreate("gt_PlantEnd_Func");
    TriggerAddEventTimer(gt_PlantEnd, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PlantUpdateBuff
//--------------------------------------------------------------------------------------------------
bool gt_PlantUpdateBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;
    // Variable Initialization
    lv_time = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GrandForesterDuration", "Amount", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "GrandForesterDuration", "Amount", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_time - 1.0), 0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlantUpdateBuff_Init () {
    gt_PlantUpdateBuff = TriggerCreate("gt_PlantUpdateBuff_Func");
    TriggerAddEventPlayerEffectUsed(gt_PlantUpdateBuff, c_playerAny, "GrandForesterUpdate");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeastExpire
//--------------------------------------------------------------------------------------------------
bool gt_FeastExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    int lv_a;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 5))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_p = UnitGetPosition(gv_feastChef);
    gv_questIndexActive = 0;
    gv_questActive = false;
    SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E917DD1A"));
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_feastChefPing);
    UnitRemove(gv_feastChef);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FeastExpire_Init () {
    gt_FeastExpire = TriggerCreate("gt_FeastExpire_Func");
    TriggerAddEventTimer(gt_FeastExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeastTutelageOn
//--------------------------------------------------------------------------------------------------
bool gt_FeastTutelageOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Quicktag(EventUnit(), StringExternal("Param/Value/189C4CB1"), 2.0, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FeastTutelageOn_Init () {
    gt_FeastTutelageOn = TriggerCreate("gt_FeastTutelageOn_Func");
    TriggerAddEventUnitBehaviorChange(gt_FeastTutelageOn, null, "TheGastronomistsTutelage", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FeastTutelageOff
//--------------------------------------------------------------------------------------------------
bool gt_FeastTutelageOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Quicktag(EventUnit(), StringExternal("Param/Value/E8DA5E51"), 2.0, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FeastTutelageOff_Init () {
    gt_FeastTutelageOff = TriggerCreate("gt_FeastTutelageOff_Func");
    TriggerAddEventUnitBehaviorChange(gt_FeastTutelageOff, null, "TheGastronomistsTutelage", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GladiatorEndPhase1
//--------------------------------------------------------------------------------------------------
bool gt_GladiatorEndPhase1_Func (bool testConds, bool runActions) {
    int auto7EAF0CE6_ae;
    int auto7EAF0CE6_ai;
    int auto84BFFAB5_ae;
    int auto84BFFAB5_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    int lv_i;
    // Variable Initialization
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 6))) {
            return false;
        }
        if (!((gv_gladiatorPhase == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitRemove(gv_zoneChecker[1]);
    UnitRemove(gv_zoneChecker[2]);
    PingDestroy(gv_zonePing[1]);
    PingDestroy(gv_zonePing[2]);
    ObjectiveDestroy(gv_questObjective);
    if ((!((gf_UnitExists(gv_challenger[1]) || gf_UnitExists(gv_challenger[2]))))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BC84B02D"));
        gv_questIndexActive = 0;
        gv_questActive = false;
        ObjectiveDestroy(gv_questObjective);
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupActive(), 100.0, 0.0);
        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    }
    else if (((gf_UnitExists(gv_challenger[1]) && (!(gf_UnitExists(gv_challenger[2])))) || (gf_UnitExists(gv_challenger[2]) && (!(gf_UnitExists(gv_challenger[1])))))) {
        lv_i = gf_GetTeamOfPlayer(UnitGetOwner(gf_RemainingDuelist()));
        lv_questWinners = gv_teamData[lv_i].lv_members;
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
        TextExpressionSetToken("Param/Expression/513F7E53", "A", StringExternal("Param/Value/947EFA66"));
        TextExpressionSetToken("Param/Expression/513F7E53", "B", gf_GetTribeTextOfTeam(lv_i));
        TextExpressionSetToken("Param/Expression/513F7E53", "C", StringExternal("Param/Value/2BA8E88F"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/513F7E53"));
        PlayerGroupLoopBegin(lv_questWinners);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_dead[PlayerGroupLoopCurrent()] == false)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, 75);
                UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", PlayerGroupLoopCurrent(), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "Coward", gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, 1);
                }
                UnitGroupLoopEnd();
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        gv_questIndexActive = 0;
        gv_gladiatorPhase = 0;
        gv_questActive = false;
        gv_questCompleted[6] = true;
        auto7EAF0CE6_ae = gv_challengers;
        auto7EAF0CE6_ai = 1;
        lv_a = 1;
        for ( ; ( (auto7EAF0CE6_ai >= 0 && lv_a <= auto7EAF0CE6_ae) || (auto7EAF0CE6_ai <= 0 && lv_a >= auto7EAF0CE6_ae) ) ; lv_a += auto7EAF0CE6_ai ) {
            gv_challenger[lv_a] = null;
        }
        ObjectiveDestroy(gv_questObjective);
        SoundPlay(SoundLink("UI_ObjectiveComplete", -1), lv_questWinners, 100.0, 0.0);
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), lv_questLosers, 100.0, 0.0);
        gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    }
    else if (gf_UnitExists(gv_challenger[1]) && gf_UnitExists(gv_challenger[2])) {
        gv_gladiatorPhase = 2;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F61CF148"));
        auto84BFFAB5_ae = gv_challengers;
        auto84BFFAB5_ai = 1;
        lv_a = 1;
        for ( ; ( (auto84BFFAB5_ai >= 0 && lv_a <= auto84BFFAB5_ae) || (auto84BFFAB5_ai <= 0 && lv_a >= auto84BFFAB5_ae) ) ; lv_a += auto84BFFAB5_ai ) {
            lv_b = UnitGetOwner(gv_challenger[lv_a]);
            gv_returnPoint[lv_a] = UnitGetPosition(gv_challenger[lv_a]);
            UnitSetPosition(gv_challenger[lv_a], gv_gladiatorStart[lv_a], false);
            UnitGroupLoopBegin(gv_pets[lv_b]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPosition(UnitGroupLoopCurrent(), gv_gladiatorStart[lv_a], false);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "SynergyProc", 1);
            }
            UnitGroupLoopEnd();
            UnitIssueOrder(gv_challenger[lv_a], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetPropertyFixed(gv_challenger[lv_a], c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(gv_challenger[lv_a], c_unitPropEnergyPercent, 100.0);
            gv_playerData[lv_b].lv_warmth = 100.0;
            gv_playerData[lv_b].lv_hunger = 100.0;
            gv_playerData[lv_b].lv_stamina = 100.0;
            UnitBehaviorRemove(gv_challenger[lv_a], "Unconscious", 1);
            UnitBehaviorRemove(gv_challenger[lv_a], "Fishing", 1);
            UnitBehaviorRemove(gv_challenger[lv_a], "GuardianSpirit", 1);
            UnitBehaviorRemove(gv_challenger[lv_a], "GuardianSpiritLingering", 1);
            UnitBehaviorRemove(gv_challenger[lv_a], "FrostArmor", 1);
            UnitBehaviorRemove(gv_challenger[lv_a], "ShadowCloak", 1);
            UnitBehaviorRemove(gv_challenger[lv_a], "SiphonLife", 3);
            CameraPan(lv_b, PointFromId(2592), 0.0, -1, 10.0, false);
        }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(2592), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 5.0, 270.0);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            VisRevealerCreate(PlayerGroupLoopCurrent(), gv_regionArena);
            gv_arenaRevealer[PlayerGroupLoopCurrent()] = VisRevealerLastCreated();
        }
        PlayerGroupLoopEnd();
        SoundPlay(SoundLink("UI_MissionComplete", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerEnable(gt_GladiatorCrowd, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GladiatorEndPhase1_Init () {
    gt_GladiatorEndPhase1 = TriggerCreate("gt_GladiatorEndPhase1_Func");
    TriggerAddEventTimer(gt_GladiatorEndPhase1, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GladiatorCrowd
//--------------------------------------------------------------------------------------------------
bool gt_GladiatorCrowd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_r;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((StringLength(gv_previousSpectators) > 5)) {
        gv_previousSpectators = StringSub(gv_previousSpectators, 2, StringLength(gv_previousSpectators));
    }
    else {
    }
    while (true) {
        lv_r = RandomInt(0, 9);
        if ((StringSub(gv_previousSpectators, 1, 1) != IntToString(lv_r)) && (StringSub(gv_previousSpectators, 2, 2) != IntToString(lv_r)) && (StringSub(gv_previousSpectators, 3, 3) != IntToString(lv_r)) && (StringSub(gv_previousSpectators, 4, 4) != IntToString(lv_r)) && (StringSub(gv_previousSpectators, 5, 5) != IntToString(lv_r))) {
            break;
        }
        else {
        }
    }
    gv_previousSpectators = (gv_previousSpectators + IntToString(lv_r));
    TextTagCreate(gf_ArenaCheer(), 18, gv_arenaSpectator[lv_r], 2.0, true, false, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.5);
    if ((RandomInt(1, 8) == 1)) {
        UnitCreate(1, "HandfulofBerries", c_unitCreateIgnorePlacement, 0, gv_arenaSpectator[lv_r], libNtve_gf_RandomAngle());
        UnitSetHeight(UnitLastCreated(), PointGetHeight(gv_arenaSpectator[lv_r]), 0.0);
        UnitCreateEffectPoint(UnitLastCreated(), "LootFountainEffect", RegionRandomPoint(gv_regionArenaThrowArea));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GladiatorCrowd_Init () {
    gt_GladiatorCrowd = TriggerCreate("gt_GladiatorCrowd_Func");
    TriggerEnable(gt_GladiatorCrowd, false);
    TriggerAddEventTimePeriodic(gt_GladiatorCrowd, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GladiatorFind
//--------------------------------------------------------------------------------------------------
bool gt_GladiatorFind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_zone;
    int lv_zoneIndex;
    unit lv_newChallenger;
    int lv_newChallengerPlayer;
    int lv_otherZoneIndex;
    // Variable Initialization
    lv_zone = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_zoneIndex = FixedToInt(UnitGetCustomValue(lv_zone, 0));
    lv_newChallenger = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_newChallengerPlayer = UnitGetOwner(lv_newChallenger);
    lv_otherZoneIndex = lv_zoneIndex;
    // Conditions
    if (testConds) {
        if (!((gv_challenger[1] != EventPlayerEffectUsedUnit(c_effectUnitTarget)))) {
            return false;
        }
        if (!((gv_challenger[2] != EventPlayerEffectUsedUnit(c_effectUnitTarget)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (lv_otherZoneIndex >= 2) {
        lv_otherZoneIndex = 1;
    }
    else {
        lv_otherZoneIndex = lv_otherZoneIndex + 1;
    }
    if (((gf_UnitExists(gv_challenger[lv_otherZoneIndex]) == false) || (gv_playerData[UnitGetOwner(gv_challenger[lv_otherZoneIndex])].lv_team != gv_playerData[lv_newChallengerPlayer].lv_team))) {
        if ((TimerGetRemaining(gv_questTimer) < 30.0)) {
            TimerStart(gv_questTimer, (TimerGetRemaining(gv_questTimer) + 10.0), false, c_timeGame);
        }
        else {
        }
        TextExpressionSetToken("Param/Expression/02862444", "A", gf_GetTribeTextOfPlayer(lv_newChallengerPlayer));
        TextExpressionSetToken("Param/Expression/02862444", "B", StringExternal("Param/Value/BCDD1632"));
        TextExpressionSetToken("Param/Expression/02862444", "C", TextWithColor(gf_GetPlayerName(lv_newChallengerPlayer, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_newChallengerPlayer, false))));
        TextExpressionSetToken("Param/Expression/02862444", "D", StringExternal("Param/Value/7CD0C6A8"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/02862444"));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_challenger[lv_zoneIndex] = EventPlayerEffectUsedUnit(c_effectUnitTarget);
        gv_aIData[lv_newChallengerPlayer].lv_benchDesire = null;
        gv_aIData[lv_newChallengerPlayer].lv_smithyDesire = null;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ChallengeBannerCheckSuppress", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_newChallengerPlayer), c_messageAreaError, StringExternal("Param/Value/DA74D261"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GladiatorFind_Init () {
    gt_GladiatorFind = TriggerCreate("gt_GladiatorFind_Func");
    TriggerAddEventPlayerEffectUsed(gt_GladiatorFind, c_playerAny, "ChallengeBannerTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EnterArena
//--------------------------------------------------------------------------------------------------
bool gt_EnterArena_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventUnit(), "ArenaCombatant", EventUnit(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnterArena_Init () {
    gt_EnterArena = TriggerCreate("gt_EnterArena_Func");
    TriggerAddEventUnitRegion(gt_EnterArena, null, gv_regionArena, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LeaveArena
//--------------------------------------------------------------------------------------------------
bool gt_LeaveArena_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorRemove(EventUnit(), "ArenaCombatant", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LeaveArena_Init () {
    gt_LeaveArena = TriggerCreate("gt_LeaveArena_Func");
    TriggerAddEventUnitRegion(gt_LeaveArena, null, gv_regionArena, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BlinkStalker
//--------------------------------------------------------------------------------------------------
bool gt_BlinkStalker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stalker;
    int lv_targetplayer;
    point lv_p;
    // Variable Initialization
    lv_stalker = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetplayer = FixedToInt(UnitGetCustomValue(lv_stalker, 0));
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gv_playerData[lv_targetplayer].lv_kobold)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_stalker), UnitGetPosition(gv_playerData[lv_targetplayer].lv_kobold)) > gv_monstrosityLeashRadius)) {
            lv_p = gf_BlinkLocation(gv_playerData[lv_targetplayer].lv_kobold);
            if ((lv_p != null)) {
                UnitSetPosition(lv_stalker, lv_p, false);
            }
            else {
                UnitIssueOrder(lv_stalker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_playerData[lv_targetplayer].lv_kobold)), c_orderQueueReplace);
            }
        }
        else {
            UnitIssueOrder(lv_stalker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_playerData[lv_targetplayer].lv_kobold)), c_orderQueueReplace);
        }
    }
    else {
        gf_MonstrosityAcquireTarget(lv_stalker);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BlinkStalker_Init () {
    gt_BlinkStalker = TriggerCreate("gt_BlinkStalker_Func");
    TriggerAddEventPlayerEffectUsed(gt_BlinkStalker, c_playerAny, "BlinkStalker");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WarlordExpire
//--------------------------------------------------------------------------------------------------
bool gt_WarlordExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 8))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_p = UnitGetPosition(gv_warlord);
    gv_questIndexActive = 0;
    gv_questActive = false;
    SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupActive(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A5226121"));
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_warlordPing);
    UnitRemove(gv_warlord);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WarlordExpire_Init () {
    gt_WarlordExpire = TriggerCreate("gt_WarlordExpire_Func");
    TriggerAddEventTimer(gt_WarlordExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WarlordBlades
//--------------------------------------------------------------------------------------------------
bool gt_WarlordBlades_Func (bool testConds, bool runActions) {
    int auto2D3F301C_ae;
    int auto2D3F301C_ai;
    int auto443E971A_ae;
    int auto443E971A_ai;
    int auto68996286_ae;
    int auto68996286_ai;
    // Variable Declarations
    unit lv_caster;
    int lv_i;
    fixed lv_accelerate;
    int lv_a;
    unit[5][3] lv_blade;
    fixed[3] lv_globalcycle;
    fixed[3] lv_localcycle;
    fixed lv_innerdistance;
    fixed lv_outerdistance;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_i = UnitGetOwner(lv_caster);
    lv_innerdistance = RandomFixed(2.0, 2.5);
    lv_outerdistance = RandomFixed(6.0, 6.5);
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(lv_caster, 0.0);
    auto2D3F301C_ae = 4;
    auto2D3F301C_ai = 1;
    lv_a = 1;
    for ( ; ( (auto2D3F301C_ai >= 0 && lv_a <= auto2D3F301C_ae) || (auto2D3F301C_ai <= 0 && lv_a >= auto2D3F301C_ae) ) ; lv_a += auto2D3F301C_ai ) {
        UnitCreate(1, "RotatingBlade", 0, lv_i, UnitGetPosition(lv_caster), 270.0);
        lv_blade[lv_a][1] = UnitLastCreated();
        UnitSetPosition(lv_blade[lv_a][1], PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_innerdistance, (lv_globalcycle[1] + (90.0 * lv_a))), false);
        UnitSetState(UnitLastCreated(), c_unitStateIgnoreTerrainZ, true);
        UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lv_caster)) + 0.5), 0.0);
        UnitCreate(1, "RotatingBlade", 0, lv_i, UnitGetPosition(lv_caster), 270.0);
        lv_blade[lv_a][2] = UnitLastCreated();
        UnitSetPosition(lv_blade[lv_a][2], PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_outerdistance, (lv_globalcycle[2] + (90.0 * lv_a))), false);
        UnitSetState(UnitLastCreated(), c_unitStateIgnoreTerrainZ, true);
        UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lv_caster)) + 0.5), 0.0);
    }
    while (gf_UnitExists(lv_caster) && (UnitHasBehavior(lv_caster, "WhirlingBlades") == true)) {
        if ((lv_accelerate < 1)) {
            lv_accelerate += (1.0 / 8.0);
        }
        else {
        }
        lv_globalcycle[1] += ((360.0 / 48.0) * lv_accelerate);
        lv_localcycle[1] -= ((360.0 / 4.0) * lv_accelerate);
        lv_globalcycle[2] -= ((360.0 / 96.0) * lv_accelerate);
        lv_localcycle[2] += ((360.0 / 4.0) * lv_accelerate);
        auto443E971A_ae = 4;
        auto443E971A_ai = 1;
        lv_a = 1;
        for ( ; ( (auto443E971A_ai >= 0 && lv_a <= auto443E971A_ae) || (auto443E971A_ai <= 0 && lv_a >= auto443E971A_ae) ) ; lv_a += auto443E971A_ai ) {
            UnitSetPosition(lv_blade[lv_a][1], PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_innerdistance, (lv_globalcycle[1] + (90.0 * lv_a))), true);
            UnitSetPosition(lv_blade[lv_a][2], PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_outerdistance, (lv_globalcycle[2] + (90.0 * lv_a))), true);
        }
        if ((lv_globalcycle[1] >= 360.0)) {
            lv_globalcycle[1] = 0.0;
        }
        else {
        }
        if ((lv_localcycle[1] <= -360.0)) {
            lv_localcycle[1] = 0.0;
        }
        else {
        }
        if ((lv_globalcycle[2] <= -360.0)) {
            lv_globalcycle[2] = 0.0;
        }
        else {
        }
        if ((lv_localcycle[2] >= 360.0)) {
            lv_localcycle[2] = 0.0;
        }
        else {
        }
        Wait(0.0625, c_timeGame);
    }
    auto68996286_ae = 4;
    auto68996286_ai = 1;
    lv_a = 1;
    for ( ; ( (auto68996286_ai >= 0 && lv_a <= auto68996286_ae) || (auto68996286_ai <= 0 && lv_a >= auto68996286_ae) ) ; lv_a += auto68996286_ai ) {
        UnitKill(lv_blade[lv_a][1]);
        UnitKill(lv_blade[lv_a][2]);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WarlordBlades_Init () {
    gt_WarlordBlades = TriggerCreate("gt_WarlordBlades_Func");
    TriggerAddEventPlayerEffectUsed(gt_WarlordBlades, c_playerAny, "WhirlingBladesTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TrollGroundSpikesStart
//--------------------------------------------------------------------------------------------------
bool gt_TrollGroundSpikesStart_Func (bool testConds, bool runActions) {
    int autoC7BD8DF7_ae;
    int autoC7BD8DF7_ai;
    // Variable Declarations
    int lv_a;
    const int lv_spikes = 3;
    unit lv_caster;
    int lv_i;
    point lv_p;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_i = UnitGetOwner(lv_caster);
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(lv_caster, 0.0);
    autoC7BD8DF7_ae = lv_spikes;
    autoC7BD8DF7_ai = 1;
    lv_a = 1;
    for ( ; ( (autoC7BD8DF7_ai >= 0 && lv_a <= autoC7BD8DF7_ae) || (autoC7BD8DF7_ai <= 0 && lv_a >= autoC7BD8DF7_ae) ) ; lv_a += autoC7BD8DF7_ai ) {
        lv_p = PointWithOffsetPolar(UnitGetPosition(lv_caster), 2.0, (lv_a * (360.0 / lv_spikes)));
        UnitCreate(1, "TrollGroundSpike", c_unitCreateIgnorePlacement, lv_i, lv_p, AngleBetweenPoints(UnitGetPosition(lv_caster), lv_p));
        UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
        UnitBehaviorAdd(UnitLastCreated(), "TrollGroundSpikeSeek", UnitLastCreated(), 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrollGroundSpikesStart_Init () {
    gt_TrollGroundSpikesStart = TriggerCreate("gt_TrollGroundSpikesStart_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesStart, c_playerAny, "TrollGroundSpikeTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TrollGroundSpikesSeek
//--------------------------------------------------------------------------------------------------
bool gt_TrollGroundSpikesSeek_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spike;
    int lv_i;
    fixed lv_angle;
    point lv_p;
    unit lv_target;
    // Variable Initialization
    lv_spike = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_i = UnitGetOwner(lv_spike);
    // Actions
    if (!runActions) {
        return true;
    }
    lv_target = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_spike), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_spike));
    if ((lv_target == null)) {
        lv_target = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lv_i, c_unitAllianceAnyExcludeSelf, RegionCircle(UnitGetPosition(lv_spike), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_spike));
    }
    else {
    }
    if ((lv_target != null)) {
        if ((AngleBetweenPoints(UnitGetPosition(lv_spike), UnitGetPosition(lv_target)) >= UnitGetFacing(lv_spike))) {
            lv_angle = ((UnitGetFacing(lv_spike) + 9.0) + RandomFixed(-5.0, 5.0));
            lv_p = PointWithOffsetPolar(UnitGetPosition(lv_spike), RandomFixed(0.45, 0.9), lv_angle);
        }
        else {
            lv_angle = ((UnitGetFacing(lv_spike) - 9.0) + RandomFixed(-5.0, 5.0));
            lv_p = PointWithOffsetPolar(UnitGetPosition(lv_spike), RandomFixed(0.45, 0.9), lv_angle);
        }
    }
    else {
        lv_p = PointWithOffsetPolar(UnitGetPosition(lv_spike), RandomFixed(0.45, 0.9), (UnitGetFacing(lv_spike) + RandomFixed(-45.0, 45.0)));
    }
    if ((RegionContainsPoint(RegionEntireMap(), lv_p) == true)) {
        UnitCreate(1, "TrollGroundSpike", c_unitCreateIgnorePlacement, lv_i, lv_p, lv_angle);
        UnitSetCustomValue(UnitLastCreated(), 0, (UnitGetCustomValue(lv_spike, 0) + 1.0));
        if ((UnitGetCustomValue(UnitLastCreated(), 0) < 60.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "TrollGroundSpikeSeek", UnitLastCreated(), 1);
        }
        else {
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrollGroundSpikesSeek_Init () {
    gt_TrollGroundSpikesSeek = TriggerCreate("gt_TrollGroundSpikesSeek_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesSeek, c_playerAny, "TrollGroundSpikeSeek");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TrollGroundSpikesSpring
//--------------------------------------------------------------------------------------------------
bool gt_TrollGroundSpikesSpring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spike;
    const fixed lv_springHeight = 1.0;
    // Variable Initialization
    lv_spike = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetState(lv_spike, c_unitStateIgnoreTerrainZ, true);
    UnitSetHeight(lv_spike, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_spike)) + lv_springHeight), 0.0);
    UnitBehaviorAdd(lv_spike, "TrollGroundSpikePeak", lv_spike, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrollGroundSpikesSpring_Init () {
    gt_TrollGroundSpikesSpring = TriggerCreate("gt_TrollGroundSpikesSpring_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesSpring, c_playerAny, "TrollGroundSpikeSearch");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TrollGroundSpikesSink
//--------------------------------------------------------------------------------------------------
bool gt_TrollGroundSpikesSink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spike;
    fixed lv_sinkHeight;
    // Variable Initialization
    lv_spike = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_sinkHeight = -1.0;
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetHeight(lv_spike, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_spike)) + lv_sinkHeight), 0.625);
    UnitBehaviorAdd(lv_spike, "TrollGroundSpikeTimedLife", lv_spike, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrollGroundSpikesSink_Init () {
    gt_TrollGroundSpikesSink = TriggerCreate("gt_TrollGroundSpikesSink_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesSink, c_playerAny, "TrollGroundSpikePeak");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TrollGroundSpikesKnock
//--------------------------------------------------------------------------------------------------
bool gt_TrollGroundSpikesKnock_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeStructure) == false))) {
            return false;
        }
        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeArmored) == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Upyougo(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0.7);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrollGroundSpikesKnock_Init () {
    gt_TrollGroundSpikesKnock = TriggerCreate("gt_TrollGroundSpikesKnock_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesKnock, c_playerAny, "TrollGroundSpikeDamage");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TruffleFind
//--------------------------------------------------------------------------------------------------
bool gt_TruffleFind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_textAddon;
    int lv_a;
    int lv_i;
    int lv_t;
    bool lv_newLeader;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_t = gf_GetTeamOfPlayer(lv_i);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_RandomPercent() >= (50.0 - (gv_skillForaging[lv_i] * 2.0)))) {
        if ((gv_truffleSkillBonus[lv_i] < 5)) {
            gv_skillPointsPlayer[lv_i] += 1;
            gf_IncreaseSkillType(lv_i, 4, 1);
            lv_textAddon = StringExternal("Param/Value/482E1DB5");
            gv_truffleSkillBonus[lv_i] += 1;
        }
        else {
        }
        TextExpressionSetToken("Param/Expression/4D163015", "A", StringExternal("Param/Value/5F064BC0"));
        TextExpressionSetToken("Param/Expression/4D163015", "B", lv_textAddon);
        gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), TextExpressionAssemble("Param/Expression/4D163015"), 3.0, 24);
        gv_trufflesFound[lv_t] += 1;
        if ((gv_trufflesFound[lv_t] > gv_trufflesFound[gv_truffleLeadingTeam])) {
            gv_truffleLeadingTeam = lv_t;
        }
        else {
        }
    }
    else {
        gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/25086A4E"), 2.0, 24);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TruffleFind_Init () {
    gt_TruffleFind = TriggerCreate("gt_TruffleFind_Func");
    TriggerAddEventPlayerEffectUsed(gt_TruffleFind, c_playerAny, "FindTruffle");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TruffleEnd
//--------------------------------------------------------------------------------------------------
bool gt_TruffleEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    fixed lv_t;
    int lv_mostTrufflesTeam;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 9))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[9] = true;
    ObjectiveDestroy(gv_questObjective);
    if ((gv_truffleLeadingTeam != 0)) {
        lv_questWinners = gv_teamData[gv_truffleLeadingTeam].lv_members;
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
        TextExpressionSetToken("Param/Expression/7EC101D1", "A", StringExternal("Param/Value/953A1FDD"));
        TextExpressionSetToken("Param/Expression/7EC101D1", "B", gf_GetTribeTextOfTeam(gv_truffleLeadingTeam));
        TextExpressionSetToken("Param/Expression/7EC101D1", "C", StringExternal("Param/Value/0A767366"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/7EC101D1"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B3EAEEAA"));
    }
    PlayerGroupLoopBegin(lv_questWinners);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", PlayerGroupLoopCurrent()));
        CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "Amount", PlayerGroupLoopCurrent(), FixedToString((lv_t + 1.0), 0));
    }
    PlayerGroupLoopEnd();
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TruffleEnd_Init () {
    gt_TruffleEnd = TriggerCreate("gt_TruffleEnd_Func");
    TriggerAddEventTimer(gt_TruffleEnd, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LightsOut
//--------------------------------------------------------------------------------------------------
bool gt_LightsOut_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup("CampfireLit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_LightsOutImpact(UnitGetPosition(UnitGroupLoopCurrent()));
        UnitCreateEffectUnit(EventUnit(), "KillWithDamage", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Torch", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterItem), 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_LightsOutImpact(UnitGetPosition(UnitGroupLoopCurrent()));
        gf_DropandRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LightsOut_Init () {
    gt_LightsOut = TriggerCreate("gt_LightsOut_Func");
    TriggerAddEventUnitAbility(gt_LightsOut, null, AbilityCommand("LightsOut", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PermafrostStart
//--------------------------------------------------------------------------------------------------
bool gt_PermafrostStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(lv_caster, 0.0);
    UnitCreate(1, "Nightwisp", 0, 15, PointWithOffsetPolar(UnitGetPosition(lv_caster), 2.5, AngleBetweenPoints(UnitGetPosition(lv_caster), UnitGetPosition(lv_target))), libNtve_gf_RandomAngle());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetHeight(UnitLastCreated(), 1.6, 0.0);
    UnitCreateEffectUnit(UnitLastCreated(), "Permafrost", lv_target);
    UnitBehaviorAdd(lv_caster, "PermafrostVisualTimer", lv_caster, 1);
    SoundPlayOnUnit(SoundLink("FrostWitchSpell", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PermafrostStart_Init () {
    gt_PermafrostStart = TriggerCreate("gt_PermafrostStart_Func");
    TriggerAddEventPlayerEffectUsed(gt_PermafrostStart, c_playerAny, "PermafrostTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PermafrostDrain
//--------------------------------------------------------------------------------------------------
bool gt_PermafrostDrain_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "Kobold"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_warmth -= 3.0;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PermafrostDrain_Init () {
    gt_PermafrostDrain = TriggerCreate("gt_PermafrostDrain_Func");
    TriggerAddEventPlayerEffectUsed(gt_PermafrostDrain, c_playerAny, "PermafrostDamage");
    TriggerAddEventPlayerEffectUsed(gt_PermafrostDrain, c_playerAny, "PermafrostDamageSecondary");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PiratesExpire
//--------------------------------------------------------------------------------------------------
bool gt_PiratesExpire_Func (bool testConds, bool runActions) {
    int auto5A8F09A7_ae;
    int auto5A8F09A7_ai;
    // Variable Declarations
    int lv_a;
    point lv_p;
    int lv_winner;
    int lv_loser;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 11))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    ObjectiveDestroy(gv_questObjective);
    SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupActive(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4FEFDC1C"));
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ShovelKnowledge", 1);
    }
    UnitGroupLoopEnd();
    auto5A8F09A7_ae = gv_players;
    auto5A8F09A7_ai = 1;
    lv_a = 1;
    for ( ; ( (auto5A8F09A7_ai >= 0 && lv_a <= auto5A8F09A7_ae) || (auto5A8F09A7_ai <= 0 && lv_a >= auto5A8F09A7_ae) ) ; lv_a += auto5A8F09A7_ai ) {
        if ((StringSub(gv_perks[lv_a], 5, 5) == "1")) {
            CatalogFieldValueSet(c_gameCatalogEffect, "BeerCost", "Amount", lv_a, FixedToString(5.0, 0));
        }
        else {
            CatalogFieldValueSet(c_gameCatalogEffect, "BeerCost", "Amount", lv_a, FixedToString(6.0, 0));
        }
    }
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PiratesExpire_Init () {
    gt_PiratesExpire = TriggerCreate("gt_PiratesExpire_Func");
    TriggerAddEventTimer(gt_PiratesExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WizardExpire
//--------------------------------------------------------------------------------------------------
bool gt_WizardExpire_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 12))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CCB88CD0"));
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_wizardPing);
    UnitRemove(gv_wizard);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WizardExpire_Init () {
    gt_WizardExpire = TriggerCreate("gt_WizardExpire_Func");
    TriggerAddEventTimer(gt_WizardExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuilderExpire
//--------------------------------------------------------------------------------------------------
bool gt_BuilderExpire_Func (bool testConds, bool runActions) {
    int autoE7AF8E13_ae;
    int autoE7AF8E13_ai;
    // Variable Declarations
    int lv_a;
    point lv_p;
    unitgroup lv_monuments;
    fixed lv_timerExtension;
    // Variable Initialization
    lv_monuments = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 13))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_monuments = UnitGroup("LorenorStatue", c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_monuments, c_unitCountAlive) > 0) && (gv_extensionAllowed == true)) {
        gv_extensionAllowed = false;
        lv_timerExtension = gf_LeastConstructionProgress(lv_monuments, 45.0);
        TimerStart(gv_questTimer, lv_timerExtension, false, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A8CB8CAA"));
        SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        gv_questIndexActive = 0;
        gv_questActive = false;
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/34C60779"));
        UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "BarnetsMonument", 1);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("KoboldTestBuild", 30)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("LorenorStatue", c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        autoE7AF8E13_ae = gv_maxTeams;
        autoE7AF8E13_ai = 1;
        lv_a = 1;
        for ( ; ( (autoE7AF8E13_ai >= 0 && lv_a <= autoE7AF8E13_ae) || (autoE7AF8E13_ai <= 0 && lv_a >= autoE7AF8E13_ae) ) ; lv_a += autoE7AF8E13_ai ) {
            gv_aIMonumentBuilder[lv_a] = 0;
        }
        ObjectiveDestroy(gv_questObjective);
        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuilderExpire_Init () {
    gt_BuilderExpire = TriggerCreate("gt_BuilderExpire_Func");
    TriggerAddEventTimer(gt_BuilderExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuilderFinish
//--------------------------------------------------------------------------------------------------
bool gt_BuilderFinish_Func (bool testConds, bool runActions) {
    int auto1B36423F_ae;
    int auto1B36423F_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    int lv_winningTeam;
    int lv_losingTeam;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "LorenorStatue"))) {
            return false;
        }
        if (!((gv_questIndexActive == 13))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_StaminaOnCraft(EventUnit());
    gf_AddExperience(EventUnit(), 100.0);
    UnitBehaviorRemove(EventUnitProgressUnit(), "BarnetConstruction", 1);
    lv_winningTeam = gf_GetTeamOfPlayer(UnitGetOwner(EventUnitProgressUnit()));
    lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[13] = true;
    TimerPause(gv_questTimer, true);
    ObjectiveDestroy(gv_questObjective);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Kobold", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "BarnetsMonument", 1);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("KoboldTestBuild", 30)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("LorenorStatue", c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    auto1B36423F_ae = gv_activeTeams;
    auto1B36423F_ai = 1;
    lv_a = 1;
    for ( ; ( (auto1B36423F_ai >= 0 && lv_a <= auto1B36423F_ae) || (auto1B36423F_ai <= 0 && lv_a >= auto1B36423F_ae) ) ; lv_a += auto1B36423F_ai ) {
        gv_aIMonumentBuilder[lv_a] = 0;
    }
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(EventUnit()), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/59A62958") + (gf_GetTribeTextOfPlayer(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/A4C879B2")))));
    PlayerGroupLoopBegin(lv_questWinners);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/302E7D35"));
        gv_skillPointsPlayer[PlayerGroupLoopCurrent()] += 5;
        gf_IncreaseSkillType(PlayerGroupLoopCurrent(), 5, 5);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuilderFinish_Init () {
    gt_BuilderFinish = TriggerCreate("gt_BuilderFinish_Func");
    TriggerAddEventUnitConstructProgress(gt_BuilderFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExileDefendVictory
//--------------------------------------------------------------------------------------------------
bool gt_ExileDefendVictory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 14))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[14] = true;
    UnitRemove(gv_exile);
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_exilePing);
    TextExpressionSetToken("Param/Expression/A22BCBEC", "A", StringExternal("Param/Value/D6F70620"));
    TextExpressionSetToken("Param/Expression/A22BCBEC", "B", gf_GetTribeTextOfTeam(gv_defenders));
    TextExpressionSetToken("Param/Expression/A22BCBEC", "C", StringExternal("Param/Value/399A82AA"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/A22BCBEC"));
    UIDisplayMessage(gv_teamData[gv_defenders].lv_members, c_messageAreaSubtitle, StringExternal("Param/Value/E8E6B47E"));
    PlayerGroupLoopBegin(gv_teamData[gv_defenders].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_skillPointsPlayer[PlayerGroupLoopCurrent()] += 5;
        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true) && (gv_playerData[PlayerGroupLoopCurrent()].lv_isAI == true)) {
            gf_AISpendSkillPoints(PlayerGroupLoopCurrent());
        }
        else {
            gf_UpdateSkillButton(PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    gf_QuestFinishEvents(gv_teamData[gv_defenders].lv_members, gv_teamData[gv_attackers].lv_members);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ExileDefendVictory_Init () {
    gt_ExileDefendVictory = TriggerCreate("gt_ExileDefendVictory_Func");
    TriggerAddEventTimer(gt_ExileDefendVictory, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExileAttackVictory
//--------------------------------------------------------------------------------------------------
bool gt_ExileAttackVictory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victors;
    point lv_point;
    // Variable Initialization
    lv_victors = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 14))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[14] = true;
    TimerPause(gv_questTimer, true);
    ObjectiveDestroy(gv_questObjective);
    PingDestroy(gv_exilePing);
    TextExpressionSetToken("Param/Expression/108310E3", "A", StringExternal("Param/Value/B4502278"));
    TextExpressionSetToken("Param/Expression/108310E3", "B", gf_GetTribeTextOfTeam(gv_attackers));
    TextExpressionSetToken("Param/Expression/108310E3", "C", StringExternal("Param/Value/577E9710"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/108310E3"));
    UIDisplayMessage(gv_teamData[gv_attackers].lv_members, c_messageAreaSubtitle, StringExternal("Param/Value/BB5D2C15"));
    PlayerGroupLoopBegin(gv_teamData[gv_attackers].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_UnlockRequirement(PlayerGroupLoopCurrent(), 1, 20);
        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
            UnitGroupAdd(lv_victors, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    if ((UnitGroupCount(lv_victors, c_unitCountAlive) > 0)) {
        lv_point = gf_RandomPathablePoint(RegionCircle(UnitGroupCenterOfGroup(lv_victors), 16.0));
    }
    else {
        lv_point = PointFromId(2850);
    }
    UnitCreate(1, "TreasureChest", 0, 0, lv_point, RandomFixed(230.0, 310.0));
    UnitBehaviorAdd(UnitLastCreated(), "KingsReward", UnitLastCreated(), 1);
    UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
    PingDestroy(gv_exileRewardPing);
    libNtve_gf_CreatePingFacingAngle(gv_teamData[gv_attackers].lv_members, "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_exileRewardPing = PingLastCreated();
    PingSetUnit(gv_exileRewardPing, UnitLastCreated());
    PlayerGroupLoopBegin(gv_teamData[gv_attackers].lv_members);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    gf_QuestFinishEvents(gv_teamData[gv_attackers].lv_members, gv_teamData[gv_defenders].lv_members);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ExileAttackVictory_Init () {
    gt_ExileAttackVictory = TriggerCreate("gt_ExileAttackVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExileTransfer
//--------------------------------------------------------------------------------------------------
bool gt_ExileTransfer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nextStrongest;
    // Variable Initialization
    lv_nextStrongest = gf_GetStrongestOnTeam(gv_defenders);
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(lv_nextStrongest)) {
        UnitSetOwner(gv_exile, UnitGetOwner(lv_nextStrongest), false);
        UnitIssueOrder(gv_exile, OrderTargetingUnit(AbilityCommand("move", 0), lv_nextStrongest), c_orderQueueReplace);
    }
    else {
        UnitCreateEffectUnit(gv_exile, "KillWithDamage", gv_exile);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ExileTransfer_Init () {
    gt_ExileTransfer = TriggerCreate("gt_ExileTransfer_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilExpire
//--------------------------------------------------------------------------------------------------
bool gt_VeilExpire_Func (bool testConds, bool runActions) {
    int autoF928A8E6_ae;
    int autoF928A8E6_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    point lv_p;
    int lv_winner;
    int lv_loser;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    TimerPause(gv_veilGuardianTimer, true);
    UnitGroupLoopBegin(UnitGroup("TombGuardian", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MysteriousShrine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_a = FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0));
        PingDestroy(gv_veilShrinePing[lv_a]);
        autoF928A8E6_ae = 6;
        autoF928A8E6_ai = 1;
        lv_b = 1;
        for ( ; ( (autoF928A8E6_ai >= 0 && lv_b <= autoF928A8E6_ae) || (autoF928A8E6_ai <= 0 && lv_b >= autoF928A8E6_ae) ) ; lv_b += autoF928A8E6_ai ) {
            UnitRemove(gv_veilShrinePad[lv_a][lv_b]);
        }
        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_questCompleted[15] = true;
    ObjectiveDestroy(gv_questObjective);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilExpire_Init () {
    gt_VeilExpire = TriggerCreate("gt_VeilExpire_Func");
    TriggerAddEventTimer(gt_VeilExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilSpawnGuardian
//--------------------------------------------------------------------------------------------------
bool gt_VeilSpawnGuardian_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup("MysteriousShrine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_region = RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 16.0);
        if ((UnitGroupCount(UnitGroup("TombGuardian", c_playerAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 4)) {
            UnitCreate(1, "TombGuardian", 0, 15, gf_RandomPathablePoint(lv_region), libNtve_gf_RandomAngle());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    TimerStart(gv_veilGuardianTimer, RandomFixed(20.0, 25.0), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilSpawnGuardian_Init () {
    gt_VeilSpawnGuardian = TriggerCreate("gt_VeilSpawnGuardian_Func");
    TriggerAddEventTimer(gt_VeilSpawnGuardian, gv_veilGuardianTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilShrineInvestigate
//--------------------------------------------------------------------------------------------------
bool gt_VeilShrineInvestigate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shrine;
    // Variable Initialization
    lv_shrine = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetInfoText(lv_shrine, StringExternal("Param/Value/FE564CEF"), StringExternal("Param/Value/2CAF6609"), StringExternal("Param/Value/13D4353E"));
    UnitSetCustomValue(lv_shrine, 2, 1.0);
    UnitSetCustomValue(lv_shrine, 3, 1.0);
    UnitSetCustomValue(lv_shrine, 4, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilShrineInvestigate_Init () {
    gt_VeilShrineInvestigate = TriggerCreate("gt_VeilShrineInvestigate_Func");
    TriggerAddEventPlayerEffectUsed(gt_VeilShrineInvestigate, c_playerAny, "VeilShrineActive");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilShrinePreview
//--------------------------------------------------------------------------------------------------
bool gt_VeilShrinePreview_Func (bool testConds, bool runActions) {
    int auto45895904_ae;
    int auto45895904_ai;
    // Variable Declarations
    unit lv_shrine;
    int lv_shrineIndex;
    int lv_previewStage;
    unit lv_u;
    int lv_a;
    // Variable Initialization
    lv_shrine = EventPlayerEffectUsedUnit(c_effectUnitOuter);
    lv_shrineIndex = FixedToInt(UnitGetCustomValue(lv_shrine, 0));
    lv_previewStage = FixedToInt(UnitGetCustomValue(lv_shrine, 2));
    // Actions
    if (!runActions) {
        return true;
    }
    if ((lv_previewStage <= 5)) {
        lv_u = gv_veilShrinePad[lv_shrineIndex][StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], lv_previewStage, lv_previewStage))];
        UnitBehaviorAdd(lv_u, "VeilShrinePadFlash", lv_shrine, 1);
        UnitCreateEffectUnit(lv_shrine, "VeilShrineFlashBeamStart", lv_u);
        lv_u = gv_veilShrinePad[lv_shrineIndex][StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], (lv_previewStage + 1), (lv_previewStage + 1)))];
        UnitBehaviorAdd(lv_u, "VeilShrinePadFlash", lv_shrine, 1);
        UnitCreateEffectUnit(lv_shrine, "VeilShrineFlashBeamStart", lv_u);
        UnitSetCustomValue(lv_shrine, 2, (lv_previewStage + 2));
    }
    else {
        gf_Alltag(lv_shrine, StringExternal("Param/Value/35CB4E13"), 2.0, 24);
        auto45895904_ae = 6;
        auto45895904_ai = 1;
        lv_a = 1;
        for ( ; ( (auto45895904_ai >= 0 && lv_a <= auto45895904_ae) || (auto45895904_ai <= 0 && lv_a >= auto45895904_ae) ) ; lv_a += auto45895904_ai ) {
            UnitBehaviorAdd(gv_veilShrinePad[lv_shrineIndex][lv_a], "VeilShrinePadActive", gv_veilShrinePad[lv_shrineIndex][lv_a], 1);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilShrinePreview_Init () {
    gt_VeilShrinePreview = TriggerCreate("gt_VeilShrinePreview_Func");
    TriggerAddEventPlayerEffectUsed(gt_VeilShrinePreview, c_playerAny, "VeilShrinePreviewTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilEnergizedStart
//--------------------------------------------------------------------------------------------------
bool gt_VeilEnergizedStart_Func (bool testConds, bool runActions) {
    int autoB0773D1B_ae;
    int autoB0773D1B_ai;
    // Variable Declarations
    unit lv_pad;
    int lv_padIndex;
    int lv_shrineIndex;
    unit lv_shrine;
    int lv_progress;
    int lv_a;
    point lv_p;
    // Variable Initialization
    lv_pad = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_padIndex = FixedToInt(UnitGetCustomValue(lv_pad, 1));
    lv_shrineIndex = FixedToInt(UnitGetCustomValue(lv_pad, 0));
    lv_shrine = gv_veilShrine[lv_shrineIndex];
    lv_progress = FixedToInt(UnitGetCustomValue(lv_shrine, 3));
    lv_p = UnitGetPosition(lv_shrine);
    // Actions
    if (!runActions) {
        return true;
    }
    if (((lv_padIndex == StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], lv_progress, lv_progress))) || (lv_padIndex == StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], (lv_progress + 1), (lv_progress + 1)))))) {
        UnitSetCustomValue(lv_shrine, 4, (UnitGetCustomValue(lv_shrine, 4) + 1.0));
        if ((UnitGetCustomValue(lv_shrine, 4) == 2.0)) {
            UnitSetCustomValue(lv_shrine, 4, 0.0);
            UnitSetCustomValue(lv_shrine, 3, (UnitGetCustomValue(lv_shrine, 3) + 2.0));
            UnitBehaviorRemove(gv_veilShrinePad[lv_shrineIndex][StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], lv_progress, lv_progress))], "VeilShrinePadActive", 1);
            UnitBehaviorRemove(gv_veilShrinePad[lv_shrineIndex][StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], (lv_progress + 1), (lv_progress + 1)))], "VeilShrinePadActive", 1);
            SoundPlayOnUnit(SoundLink("VeilShrinePadActivate", -1), PlayerGroupAll(), lv_shrine, 1.0, 100.0, 0.0);
        }
        else {
        }
        if ((UnitGetCustomValue(lv_shrine, 3) >= 7.0)) {
            gf_Alltag(lv_shrine, StringExternal("Param/Value/D70A1067"), 2.0, 24);
            UnitBehaviorRemove(lv_shrine, "VeilShrineActive", 1);
            libNtve_gf_CreateExplosionAtPoint(0, 1, UnitGetPosition(lv_shrine));
            UnitRemove(gv_veilShrine[lv_shrineIndex]);
            PingDestroy(gv_veilShrinePing[lv_shrineIndex]);
            autoB0773D1B_ae = 6;
            autoB0773D1B_ai = 1;
            lv_a = 1;
            for ( ; ( (autoB0773D1B_ai >= 0 && lv_a <= autoB0773D1B_ae) || (autoB0773D1B_ai <= 0 && lv_a >= autoB0773D1B_ae) ) ; lv_a += autoB0773D1B_ai ) {
                UnitRemove(gv_veilShrinePad[lv_shrineIndex][lv_a]);
            }
            gf_VeilLoot(lv_p);
            TriggerExecute(gt_VeilEndPrematurely, true, false);
        }
        else {
        }
    }
    else {
        gf_VeilShrineFail(lv_shrine);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilEnergizedStart_Init () {
    gt_VeilEnergizedStart = TriggerCreate("gt_VeilEnergizedStart_Func");
    TriggerAddEventPlayerEffectUsed(gt_VeilEnergizedStart, c_playerAny, "VeilShrineEnergizedStart");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilEnergizedEnd
//--------------------------------------------------------------------------------------------------
bool gt_VeilEnergizedEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pad;
    int lv_padIndex;
    int lv_shrineIndex;
    unit lv_shrine;
    // Variable Initialization
    lv_pad = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_padIndex = FixedToInt(UnitGetCustomValue(lv_pad, 1));
    lv_shrineIndex = FixedToInt(UnitGetCustomValue(lv_pad, 0));
    lv_shrine = gv_veilShrine[lv_shrineIndex];
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(lv_shrine, 4, libNtve_gf_ArithmeticRealClamp((UnitGetCustomValue(lv_shrine, 4) - 1.0), 0.0, 2.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilEnergizedEnd_Init () {
    gt_VeilEnergizedEnd = TriggerCreate("gt_VeilEnergizedEnd_Func");
    TriggerAddEventPlayerEffectUsed(gt_VeilEnergizedEnd, c_playerAny, "VeilShrineEnergizedEnd");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilShrineExpire
//--------------------------------------------------------------------------------------------------
bool gt_VeilShrineExpire_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_VeilShrineFail(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilShrineExpire_Init () {
    gt_VeilShrineExpire = TriggerCreate("gt_VeilShrineExpire_Func");
    TriggerAddEventPlayerEffectUsed(gt_VeilShrineExpire, c_playerAny, "VeilShrineActiveExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilEndPrematurely
//--------------------------------------------------------------------------------------------------
bool gt_VeilEndPrematurely_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("MysteriousShrine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    TimerPause(gv_veilGuardianTimer, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicAmbient", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TimerStart(gv_veilofDarknessTimer, 0.0, false, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TombGuardian", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gv_questCompleted[15] = true;
    ObjectiveDestroy(gv_questObjective);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilEndPrematurely_Init () {
    gt_VeilEndPrematurely = TriggerCreate("gt_VeilEndPrematurely_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilofDarknessCont
//--------------------------------------------------------------------------------------------------
bool gt_VeilofDarknessCont_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) != 15))) {
            return false;
        }
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_veilofDarknessActive[gv_playerData[UnitGetOwner(EventUnit())].lv_team] == true)) {
        if ((UnitGetType(EventUnit()) == "Kobold")) {
            UnitBehaviorAdd(EventUnit(), "VeilofDarkness", EventUnit(), 1);
            UnitBehaviorAdd(EventUnit(), "OrbofDarknessDenied", EventUnit(), 1);
        }
        else {
            if ((UnitGetType(EventUnit()) != "MurlocSlave")) {
                UnitBehaviorAdd(EventUnit(), "VeilofDarknessGeneral", EventUnit(), 1);
            }
            else {
            }
        }
    }
    else {
        if ((UnitGetType(EventUnit()) == "Kobold")) {
            UnitBehaviorAdd(EventUnit(), "OrbofDarknessDenied", EventUnit(), 1);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilofDarknessCont_Init () {
    gt_VeilofDarknessCont = TriggerCreate("gt_VeilofDarknessCont_Func");
    TriggerEnable(gt_VeilofDarknessCont, false);
    TriggerAddEventUnitRegion(gt_VeilofDarknessCont, null, RegionPlayableMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: VeilofDarknessEnd
//--------------------------------------------------------------------------------------------------
bool gt_VeilofDarknessEnd_Func (bool testConds, bool runActions) {
    int auto1C71EC85_ae;
    int auto1C71EC85_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_VeilofDarknessCont, false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Kobold")) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "VeilofDarkness", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "OrbofDarknessDenied", 1);
        }
        else {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "VeilofDarknessGeneral", 1);
        }
    }
    UnitGroupLoopEnd();
    auto1C71EC85_ae = gv_activeTeams;
    auto1C71EC85_ai = 1;
    lv_a = 1;
    for ( ; ( (auto1C71EC85_ai >= 0 && lv_a <= auto1C71EC85_ae) || (auto1C71EC85_ai <= 0 && lv_a >= auto1C71EC85_ae) ) ; lv_a += auto1C71EC85_ai ) {
        gv_veilofDarknessActive[lv_a] = false;
        libNtve_gf_SetPlayerGroupAlliance(gv_teamData[lv_a].lv_members, 1);
    }
    gf_AllAIsShareControlwithAllies();
    CutsceneFade(true, 1.0, Color(0,0,0), 25.0, PlayerGroupAll(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VeilofDarknessEnd_Init () {
    gt_VeilofDarknessEnd = TriggerCreate("gt_VeilofDarknessEnd_Func");
    TriggerAddEventTimer(gt_VeilofDarknessEnd, gv_veilofDarknessTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExpeditionData
//--------------------------------------------------------------------------------------------------
bool gt_ExpeditionData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_expeditionPoint[1][1] = PointFromId(3933);
    gv_expeditionPoint[1][2] = PointFromId(3934);
    gv_expeditionPoint[1][3] = PointFromId(3935);
    gv_expeditionPoint[2][1] = PointFromId(3936);
    gv_expeditionPoint[2][2] = PointFromId(3937);
    gv_expeditionPoint[2][3] = PointFromId(3938);
    gv_expeditionPoint[3][1] = PointFromId(3939);
    gv_expeditionPoint[3][2] = PointFromId(3940);
    gv_expeditionPoint[3][3] = PointFromId(3941);
    gv_expeditionPoint[4][1] = PointFromId(3942);
    gv_expeditionPoint[4][2] = PointFromId(3943);
    gv_expeditionPoint[4][3] = PointFromId(3944);
    gv_expeditionPoint[5][1] = PointFromId(3945);
    gv_expeditionPoint[5][2] = PointFromId(3946);
    gv_expeditionPoint[5][3] = PointFromId(3947);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ExpeditionData_Init () {
    gt_ExpeditionData = TriggerCreate("gt_ExpeditionData_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ExpeditionExpire
//--------------------------------------------------------------------------------------------------
bool gt_ExpeditionExpire_Func (bool testConds, bool runActions) {
    int auto14966BE6_ae;
    int auto14966BE6_ai;
    int auto4B75AD98_ae;
    int auto4B75AD98_ai;
    int auto2AD6F4E2_ae;
    int auto2AD6F4E2_ai;
    // Variable Declarations
    int lv_a;
    int lv_b;
    playergroup lv_questWinners;
    playergroup lv_questLosers;
    // Variable Initialization
    lv_questWinners = PlayerGroupEmpty();
    lv_questLosers = PlayerGroupActive();
    // Conditions
    if (testConds) {
        if (!((gv_questIndexActive == 16))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_questIndexActive = 0;
    gv_questActive = false;
    gv_questCompleted[16] = true;
    ObjectiveDestroy(gv_questObjective);
    auto14966BE6_ae = gv_expeditionAreas;
    auto14966BE6_ai = 1;
    lv_a = 1;
    for ( ; ( (auto14966BE6_ai >= 0 && lv_a <= auto14966BE6_ae) || (auto14966BE6_ai <= 0 && lv_a >= auto14966BE6_ae) ) ; lv_a += auto14966BE6_ai ) {
        UnitRemove(gv_expeditionRing[lv_a]);
    }
    auto4B75AD98_ae = gv_maxTeams;
    auto4B75AD98_ai = 1;
    lv_a = 1;
    for ( ; ( (auto4B75AD98_ai >= 0 && lv_a <= auto4B75AD98_ae) || (auto4B75AD98_ai <= 0 && lv_a >= auto4B75AD98_ae) ) ; lv_a += auto4B75AD98_ai ) {
        auto2AD6F4E2_ae = gv_expeditionAreas;
        auto2AD6F4E2_ai = 1;
        lv_b = 1;
        for ( ; ( (auto2AD6F4E2_ai >= 0 && lv_b <= auto2AD6F4E2_ae) || (auto2AD6F4E2_ai <= 0 && lv_b >= auto2AD6F4E2_ae) ) ; lv_b += auto2AD6F4E2_ai ) {
            PingDestroy(gv_expeditionPing[lv_a][lv_b]);
        }
    }
    if ((gv_expeditionLeadingTeam != 0)) {
        lv_questWinners = gv_teamData[gv_expeditionLeadingTeam].lv_members;
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
        TextExpressionSetToken("Param/Expression/4E8F484F", "A", StringExternal("Param/Value/3D148A35"));
        TextExpressionSetToken("Param/Expression/4E8F484F", "B", gf_GetTribeTextOfTeam(gv_expeditionLeadingTeam));
        TextExpressionSetToken("Param/Expression/4E8F484F", "C", StringExternal("Param/Value/15E0BCD9"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/4E8F484F"));
        PlayerGroupLoopBegin(lv_questWinners);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                gf_Quicktag(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, StringExternal("Param/Value/A4A7216A"), 3.0, 24);
                gf_CreateItemForUnit(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "EpicFishingRod", 1);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ExpeditionExpire_Init () {
    gt_ExpeditionExpire = TriggerCreate("gt_ExpeditionExpire_Func");
    TriggerAddEventTimer(gt_ExpeditionExpire, gv_questTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRHint1
//--------------------------------------------------------------------------------------------------
bool gt_DLJRHint1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    // Variable Initialization
    lv_player = UnitGetOwner(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    // Conditions
    if (testConds) {
        if (!((gv_dLJRHintShown[lv_player] == false))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupFilter("AncientArtifactFragment", c_playerAny, UnitInventoryGroup(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_dLJRHintShown[lv_player] = true;
    UIDisplayMessage(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)), c_messageAreaSubtitle, StringExternal("Param/Value/D99A9C0A"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DLJRHint1_Init () {
    gt_DLJRHint1 = TriggerCreate("gt_DLJRHint1_Func");
    TriggerAddEventPlayerEffectUsed(gt_DLJRHint1, c_playerAny, "SummonsTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRHint2
//--------------------------------------------------------------------------------------------------
bool gt_DLJRHint2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_summoner;
    unitgroup lv_fragments;
    // Variable Initialization
    lv_summoner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_fragments = UnitGroupFilter("AncientArtifactFragment", c_playerAny, UnitInventoryGroup(EventPlayerEffectUsedUnit(c_effectUnitTarget)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2);
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(lv_fragments, c_unitCountAlive) == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(lv_fragments);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_DropandRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(0.0625, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lv_summoner), c_messageAreaSubtitle, StringExternal("Param/Value/55AA764C"));
    gf_CreateItemForUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DemonicSoulPrison", 1);
    SoundPlay(SoundLink("SkeletalTransmutation", -1), PlayerGroupSingle(lv_summoner), 100.0, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DLJRHint2_Init () {
    gt_DLJRHint2 = TriggerCreate("gt_DLJRHint2_Func");
    TriggerAddEventPlayerEffectUsed(gt_DLJRHint2, c_playerAny, "SkeletalFingersTransmuteTrig");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRSummon
//--------------------------------------------------------------------------------------------------
bool gt_DLJRSummon_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_DLJRSpawn(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DLJRSummon_Init () {
    gt_DLJRSummon = TriggerCreate("gt_DLJRSummon_Func");
    TriggerAddEventPlayerEffectUsed(gt_DLJRSummon, c_playerAny, "DemonicSummon");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRFirestorm
//--------------------------------------------------------------------------------------------------
bool gt_DLJRFirestorm_Func (bool testConds, bool runActions) {
    int auto3BDE391C_ae;
    int auto3BDE391C_ai;
    int auto8E26873E_ae;
    int auto8E26873E_ai;
    int auto404EA087_ae;
    int auto404EA087_ai;
    // Variable Declarations
    unit lv_caster;
    int lv_i;
    const int lv_flamesPerBranch = 25;
    const int lv_branches = 5;
    const fixed lv_flameOffset = 0.6;
    const fixed lv_branchingOffset = 40.0;
    int lv_a;
    int lv_b;
    fixed lv_angleOffset;
    unit lv_closestKobold;
    point lv_source;
    point[lv_flamesPerBranch + 1][lv_branches + 1] lv_point;
    point[lv_branches + 1] lv_targetPoint;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_i = UnitGetOwner(lv_caster);
    lv_closestKobold = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_caster), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(lv_caster));
    lv_source = UnitGetPosition(lv_caster);
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(lv_closestKobold)) {
        lv_angleOffset = AngleBetweenPoints(UnitGetPosition(lv_caster), UnitGetPosition(lv_closestKobold));
    }
    else {
    }
    gf_SpellCast(lv_caster, 0.0);
    UnitBehaviorAdd(lv_caster, "JaryxFirestormCast", lv_caster, 1);
    CatalogFieldValueSet(c_gameCatalogBehavior, "FirestormContinuousSound", "Duration", UnitGetOwner(lv_caster), FixedToString(8.5, 1));
    UnitBehaviorAdd(lv_caster, "FirestormContinuousSound", lv_caster, 1);
    auto3BDE391C_ae = lv_branches;
    auto3BDE391C_ai = 1;
    lv_a = 1;
    for ( ; ( (auto3BDE391C_ai >= 0 && lv_a <= auto3BDE391C_ae) || (auto3BDE391C_ai <= 0 && lv_a >= auto3BDE391C_ae) ) ; lv_a += auto3BDE391C_ai ) {
        lv_targetPoint[lv_a] = PointWithOffsetPolar(lv_source, 16.0, (lv_angleOffset + (lv_a * (360.0 / lv_branches))));
        lv_point[1][lv_a] = PointWithOffsetPolar(lv_source, 1.5, (AngleBetweenPoints(lv_source, lv_targetPoint[lv_a]) + RandomFixed((0.0 - lv_branchingOffset), lv_branchingOffset)));
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "FirestormPersistent", lv_point[1][lv_a]);
    }
    auto8E26873E_ae = lv_flamesPerBranch;
    auto8E26873E_ai = 1;
    lv_a = 2;
    for ( ; ( (auto8E26873E_ai >= 0 && lv_a <= auto8E26873E_ae) || (auto8E26873E_ai <= 0 && lv_a >= auto8E26873E_ae) ) ; lv_a += auto8E26873E_ai ) {
        auto404EA087_ae = lv_branches;
        auto404EA087_ai = 1;
        lv_b = 1;
        for ( ; ( (auto404EA087_ai >= 0 && lv_b <= auto404EA087_ae) || (auto404EA087_ai <= 0 && lv_b >= auto404EA087_ae) ) ; lv_b += auto404EA087_ai ) {
            lv_point[lv_a][lv_b] = PointWithOffsetPolar(lv_point[(lv_a - 1)][lv_b], lv_flameOffset, ((AngleBetweenPoints(lv_source, lv_targetPoint[lv_b]) + RandomFixed((0.0 - (lv_branchingOffset / 2.0)), (lv_branchingOffset / 2.0))) + RandomFixed((0.0 - lv_branchingOffset), lv_branchingOffset)));
            lv_point[lv_a][lv_b] = PointWithOffsetPolar(lv_point[(lv_a - 1)][lv_b], lv_flameOffset, (AngleBetweenPoints(lv_source, lv_targetPoint[lv_b]) + RandomFixed((0.0 - lv_branchingOffset), lv_branchingOffset)));
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "FirestormPersistent", lv_point[lv_a][lv_b]);
        }
        Wait(0.1875, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DLJRFirestorm_Init () {
    gt_DLJRFirestorm = TriggerCreate("gt_DLJRFirestorm_Func");
    TriggerAddEventPlayerEffectUsed(gt_DLJRFirestorm, c_playerAny, "FirestormTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRRocks
//--------------------------------------------------------------------------------------------------
bool gt_DLJRRocks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fallDuration;
    // Variable Initialization
    lv_fallDuration = RandomFixed(7.0, 14.0);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitCreate(1, "MoltenSphere", 0, 15, RegionRandomPoint(RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 12.0)), libNtve_gf_RandomAngle());
    UnitSetHeight(UnitLastCreated(), 20.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 0.0, lv_fallDuration);
    CatalogFieldValueSet(c_gameCatalogBehavior, "MoltenSphereTimed", "Duration", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString(lv_fallDuration, 1));
    UnitBehaviorAdd(UnitLastCreated(), "MoltenSphereTimed", UnitLastCreated(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DLJRRocks_Init () {
    gt_DLJRRocks = TriggerCreate("gt_DLJRRocks_Func");
    TriggerAddEventPlayerEffectUsed(gt_DLJRRocks, c_playerAny, "MoltenSphereTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRMinions
//--------------------------------------------------------------------------------------------------
bool gt_DLJRMinions_Func (bool testConds, bool runActions) {
    int auto552C95FE_ae;
    int auto552C95FE_ai;
    // Variable Declarations
    int lv_a;
    unitgroup lv_kobolds;
    int lv_minionCount;
    point lv_p;
    unit lv_u;
    // Variable Initialization
    lv_kobolds = UnitGroup("Kobold", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_minionCount = (RandomInt(2, 3) + UnitGroupCount(lv_kobolds, c_unitCountAlive));
    // Actions
    if (!runActions) {
        return true;
    }
    auto552C95FE_ae = lv_minionCount;
    auto552C95FE_ai = 1;
    lv_a = 1;
    for ( ; ( (auto552C95FE_ai >= 0 && lv_a <= auto552C95FE_ae) || (auto552C95FE_ai <= 0 && lv_a >= auto552C95FE_ae) ) ; lv_a += auto552C95FE_ai ) {
        lv_p = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 6.0));
        lv_u = UnitGroupClosestToPoint(lv_kobolds, lv_p);
        UnitCreate(1, "InfernalMinion", 0, 15, lv_p, libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_u), c_orderQueueReplace);
        UnitGroupRemove(lv_kobolds, lv_u);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DLJRMinions_Init () {
    gt_DLJRMinions = TriggerCreate("gt_DLJRMinions_Func");
    TriggerAddEventPlayerEffectUsed(gt_DLJRMinions, c_playerAny, "SummonMinions");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRTether
//--------------------------------------------------------------------------------------------------
bool gt_DLJRTether_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Tether", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DLJRTether_Init () {
    gt_DLJRTether = TriggerCreate("gt_DLJRTether_Func");
    TriggerAddEventPlayerEffectUsed(gt_DLJRTether, c_playerAny, "TetherTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DLJRDemonicGrowth
//--------------------------------------------------------------------------------------------------
bool gt_DLJRDemonicGrowth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_stacks;
    fixed lv_scale;
    const fixed lv_duration = 0.25;
    // Variable Initialization
    lv_stacks = IntToFixed(UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DemonicGrowth"));
    lv_scale = (1.0 + (lv_stacks * 0.02));
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), libNtve_gf_SetScale(lv_scale, lv_scale, lv_scale, lv_duration));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DLJRDemonicGrowth_Init () {
    gt_DLJRDemonicGrowth = TriggerCreate("gt_DLJRDemonicGrowth_Func");
    TriggerAddEventPlayerEffectUsed(gt_DLJRDemonicGrowth, c_playerAny, "DemonicGrowthApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RABHint
//--------------------------------------------------------------------------------------------------
bool gt_RABHint_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/53989F88"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RABHint_Init () {
    gt_RABHint = TriggerCreate("gt_RABHint_Func");
    TriggerAddEventUnitBehaviorChange(gt_RABHint, null, "UnlimitedPower", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RABSummoningStart
//--------------------------------------------------------------------------------------------------
bool gt_RABSummoningStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_spellCost;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MysteriousArcaneRitual", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_i));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventUnit(), lv_spellCost);
    UnitBehaviorAdd(EventUnit(), "MysteriousArcaneRitual", EventUnit(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RABSummoningStart_Init () {
    gt_RABSummoningStart = TriggerCreate("gt_RABSummoningStart_Func");
    TriggerAddEventUnitAbility(gt_RABSummoningStart, null, AbilityCommand("MysteriousArcaneRitual", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RABSummoningCancel
//--------------------------------------------------------------------------------------------------
bool gt_RABSummoningCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(EventUnit()), "Channel");
    UnitAbilityReset(EventUnit(), AbilityCommand("MysteriousArcaneRitual", 0), c_spendLocationAbility);
    UnitBehaviorRemove(EventUnit(), "MysteriousArcaneRitual", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RABSummoningCancel_Init () {
    gt_RABSummoningCancel = TriggerCreate("gt_RABSummoningCancel_Func");
    TriggerAddEventUnitAbility(gt_RABSummoningCancel, null, AbilityCommand("MysteriousArcaneRitual", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RABSummoningFinish
//--------------------------------------------------------------------------------------------------
bool gt_RABSummoningFinish_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(EventUnit()), "Channel");
    gf_RABSpawn(UnitGetPosition(EventUnit()), UnitGetOwner(EventUnit()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RABSummoningFinish_Init () {
    gt_RABSummoningFinish = TriggerCreate("gt_RABSummoningFinish_Func");
    TriggerAddEventUnitAbility(gt_RABSummoningFinish, null, AbilityCommand("MysteriousArcaneRitual", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ArcaneEruptionStart
//--------------------------------------------------------------------------------------------------
bool gt_ArcaneEruptionStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_energyCost;
    // Variable Initialization
    lv_energyCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "ArcaneEruption", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventUnit())));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventUnit(), lv_energyCost);
    UnitSetCustomValue(EventUnit(), 0, 1.0);
    UnitBehaviorAdd(EventUnit(), "ArcaneEruptionTimer", EventUnit(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ArcaneEruptionStart_Init () {
    gt_ArcaneEruptionStart = TriggerCreate("gt_ArcaneEruptionStart_Func");
    TriggerAddEventUnitAbility(gt_ArcaneEruptionStart, null, AbilityCommand("ArcaneEruption", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ArcaneEruptionTrigger
//--------------------------------------------------------------------------------------------------
bool gt_ArcaneEruptionTrigger_Func (bool testConds, bool runActions) {
    int auto4E48BBBF_ae;
    int auto4E48BBBF_ai;
    // Variable Declarations
    unit lv_boss;
    point lv_p;
    const int lv_c = 5;
    int lv_phase;
    const fixed lv_offset = 1.75;
    int lv_a;
    point lv_k;
    region lv_deadzone;
    // Variable Initialization
    lv_boss = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_p = UnitGetPosition(lv_boss);
    lv_phase = FixedToInt(UnitGetCustomValue(lv_boss, 0));
    lv_deadzone = RegionCircle(lv_p, ((lv_phase * lv_offset) + (lv_offset / 2.0)));
    // Actions
    if (!runActions) {
        return true;
    }
    RegionAddCircle(lv_deadzone, false, lv_p, ((lv_phase * lv_offset) - (lv_offset / 2.0)));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_deadzone, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "UnstableAnomaly") && (UnitGetType(UnitGroupLoopCurrent()) != "TheWoundedWizard")) {
            UnitCreateEffectUnit(lv_boss, "SpellAbsorbCheckArcaneEruption", UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    auto4E48BBBF_ae = (lv_c * lv_phase);
    auto4E48BBBF_ai = 1;
    lv_a = 1;
    for ( ; ( (auto4E48BBBF_ai >= 0 && lv_a <= auto4E48BBBF_ae) || (auto4E48BBBF_ai <= 0 && lv_a >= auto4E48BBBF_ae) ) ; lv_a += auto4E48BBBF_ai ) {
        lv_k = PointWithOffsetPolar(lv_p, (lv_phase * lv_offset), (lv_a * (360.0 / (lv_c * lv_phase))));
        libNtve_gf_CreateExplosionAtPoint(1, 1, lv_k);
    }
    UnitSetCustomValue(lv_boss, 0, (lv_phase + 1.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ArcaneEruptionTrigger_Init () {
    gt_ArcaneEruptionTrigger = TriggerCreate("gt_ArcaneEruptionTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_ArcaneEruptionTrigger, c_playerAny, "ArcaneEruptionTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AnnihilateTrigger
//--------------------------------------------------------------------------------------------------
bool gt_AnnihilateTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_distance = 12;
    unit lv_boss;
    unit lv_target;
    point lv_k;
    // Variable Initialization
    lv_boss = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(lv_boss))) {
            return false;
        }
        if (!(gf_UnitExists(lv_target))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitCreateEffectPoint(lv_boss, "AnnihilateLaunch", libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_boss), lv_distance, UnitGetPosition(lv_target)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AnnihilateTrigger_Init () {
    gt_AnnihilateTrigger = TriggerCreate("gt_AnnihilateTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_AnnihilateTrigger, c_playerAny, "AnnihilateTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LightningCloudWander
//--------------------------------------------------------------------------------------------------
bool gt_LightningCloudWander_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cloud;
    unit lv_boss;
    point lv_p;
    // Variable Initialization
    lv_cloud = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_boss = UnitGroupClosestToPoint(UnitGroup("RagingArcaneBeast", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_cloud));
    lv_p = UnitGetPosition(lv_boss);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(lv_cloud, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_cloud), 4.0, RegionRandomPoint(RegionCircle(UnitGetPosition(lv_boss), 16.0)))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LightningCloudWander_Init () {
    gt_LightningCloudWander = TriggerCreate("gt_LightningCloudWander_Func");
    TriggerAddEventPlayerEffectUsed(gt_LightningCloudWander, c_playerAny, "LightningCloudWander");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnstableAnomalySpawner
//--------------------------------------------------------------------------------------------------
bool gt_UnstableAnomalySpawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boss;
    unitgroup lv_hostileKobolds;
    unitgroup lv_unstableAnomalies;
    const fixed lv_energyCost = 5.0;
    // Variable Initialization
    lv_boss = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_hostileKobolds = UnitGroup("Kobold", c_playerAny, RegionCircle(UnitGetPosition(lv_boss), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_unstableAnomalies = UnitGroup("UnstableAnomaly", c_playerAny, RegionCircle(UnitGetPosition(lv_boss), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(lv_boss, c_unitPropEnergy, c_unitPropCurrent) >= lv_energyCost))) {
            return false;
        }
        if (!((UnitGroupCount(lv_hostileKobolds, c_unitCountAlive) > UnitGroupCount(lv_unstableAnomalies, c_unitCountAlive)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPropertyFixed(lv_boss, c_unitPropEnergy, (UnitGetPropertyFixed(lv_boss, c_unitPropEnergy, c_unitPropCurrent) - lv_energyCost));
    UnitCreate(1, "UnstableAnomaly", c_unitCreateIgnorePlacement, 15, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lv_boss), 8.0)), libNtve_gf_RandomAngle());
    UnitSetHeight(UnitLastCreated(), 0.25, 0.0);
    UnitSetCustomValue(UnitLastCreated(), 0, 0.5);
    UnitGroupLoopBegin(lv_hostileKobolds);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, UnitGetOwner(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnstableAnomalySpawner_Init () {
    gt_UnstableAnomalySpawner = TriggerCreate("gt_UnstableAnomalySpawner_Func");
    TriggerAddEventPlayerEffectUsed(gt_UnstableAnomalySpawner, c_playerAny, "UnstableAnomalySpawner");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnstableAnomalyDescent
//--------------------------------------------------------------------------------------------------
bool gt_UnstableAnomalyDescent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_interval = 0.25;
    const fixed lv_deltaZ = 0.005;
    const fixed lv_maxHeight = 8.0;
    unit lv_anomaly;
    fixed lv_currentHeight;
    fixed lv_verticalForce;
    point lv_p;
    // Variable Initialization
    lv_anomaly = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_currentHeight = UnitGetHeight(lv_anomaly);
    lv_verticalForce = UnitGetCustomValue(lv_anomaly, 0);
    lv_p = UnitGetPosition(lv_anomaly);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((lv_currentHeight <= 0.0)) {
        UnitSetHeight(lv_anomaly, 0.5, 0.0);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_anomaly), 12.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "RagingArcaneBeast") && (UnitGetType(UnitGroupLoopCurrent()) != "UnstableAnomaly") && (UnitGetType(UnitGroupLoopCurrent()) != "TheWoundedWizard")) {
                UnitCreateEffectUnit(lv_anomaly, "UnstableAnomalySet", UnitGroupLoopCurrent());
                VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(UnitGetPosition(lv_anomaly), 2.0), 2.0, false);
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UnitCreateEffectUnit(lv_anomaly, "UnstableAnomalySet", lv_anomaly);
        UnitKill(lv_anomaly);
    }
    else {
        if (((lv_verticalForce - lv_deltaZ) > -0.2)) {
            lv_verticalForce -= lv_deltaZ;
        }
        else {
        }
        if ((lv_currentHeight >= 8.0) && (lv_verticalForce > 0.0)) {
            lv_verticalForce /= 2.0;
        }
        else {
        }
        UnitSetHeight(lv_anomaly, (lv_currentHeight + lv_verticalForce), lv_interval);
        UnitSetCustomValue(lv_anomaly, 0, lv_verticalForce);
        libNtve_gf_SendActorMessageToUnit(lv_anomaly, libNtve_gf_SetTintColor(Color(100.0, ((lv_currentHeight / (lv_maxHeight * 2.0)) * 100.0), 0.0), 1.0, lv_interval));
        if ((lv_currentHeight <= gv_uAMeleeHeight)) {
            UnitBehaviorAdd(lv_anomaly, "Nearground", lv_anomaly, 1);
        }
        else {
            UnitBehaviorRemove(lv_anomaly, "Nearground", 1);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnstableAnomalyDescent_Init () {
    gt_UnstableAnomalyDescent = TriggerCreate("gt_UnstableAnomalyDescent_Func");
    TriggerAddEventPlayerEffectUsed(gt_UnstableAnomalyDescent, c_playerAny, "UnstableAnomaly");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RABKill
//--------------------------------------------------------------------------------------------------
bool gt_RABKill_Func (bool testConds, bool runActions) {
    int auto7CC7A07C_val;
    // Variable Declarations
    int lv_r;
    // Variable Initialization
    lv_r = RandomInt(1, 5);
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_rABKillTimer) == 0.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TimerStart(gv_rABKillTimer, 10.0, false, c_timeGame);
    auto7CC7A07C_val = lv_r;
    if (auto7CC7A07C_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F17FFBF2"));
        SoundPlay(SoundLink("RagingArcaneBeastKill1", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto7CC7A07C_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CBBAFF3E"));
        SoundPlay(SoundLink("RagingArcaneBeastKill2", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto7CC7A07C_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5707E8EF"));
        SoundPlay(SoundLink("RagingArcaneBeastKill3", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto7CC7A07C_val == 4) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1E88ACDB"));
        SoundPlay(SoundLink("RagingArcaneBeastKill4", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto7CC7A07C_val == 5) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/768D5FF4"));
        SoundPlay(SoundLink("RagingArcaneBeastKill5", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RABKill_Init () {
    gt_RABKill = TriggerCreate("gt_RABKill_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShowSkillWindow
//--------------------------------------------------------------------------------------------------
bool gt_ShowSkillWindow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_skillButton))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DialogIsVisible(gv_skillWindowBig, EventPlayer()) == false)) {
        DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(EventPlayer()), false);
        gf_UpdateSkillWindow(EventPlayer());
        DialogSetVisible(gv_skillWindowBig, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogSetVisible(gv_skillWindowBig, PlayerGroupSingle(EventPlayer()), false);
        if ((gv_skillPointsPlayer[EventPlayer()] > 0)) {
            DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowSkillWindow_Init () {
    gt_ShowSkillWindow = TriggerCreate("gt_ShowSkillWindow_Func");
    TriggerAddEventDialogControl(gt_ShowSkillWindow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LevelUp
//--------------------------------------------------------------------------------------------------
bool gt_LevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_levelGained;
    int lv_a;
    fixed lv_temp;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_levelGained = UnitLevel(EventUnit());
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitHasBehavior(EventUnit(), "RecentlyResurrected") == false)) {
        if ((StringSub(gv_perks[lv_i], 35, 35) == "1") && (lv_levelGained == 10)) {
            gv_skillPointsPlayer[UnitGetOwner(EventUnit())] += 8;
        }
        else {
            gv_skillPointsPlayer[UnitGetOwner(EventUnit())] += 5;
        }
        gf_UpdateSkillButton(lv_i);
        gf_InGameHint("level", lv_i);
        UnitCreateEffectUnit(EventUnit(), "LevelUp", EventUnit());
        if ((gv_playerData[lv_i].lv_isAI == true)) {
            gf_AISpendSkillPoints(lv_i);
        }
        else {
        }
    }
    else {
    }
    gf_UpdateSkillWindow(lv_i);
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i, FixedToString((lv_temp + 1.0), 0));
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lv_i));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lv_i, FixedToString((lv_temp + 1.0), 0));
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lv_i));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lv_i, FixedToString((lv_temp + 1.0), 0));
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lv_i));
    CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lv_i, FixedToString((lv_temp + 1.0), 0));
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lv_i));
    CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lv_i, FixedToString((lv_temp + 1.0), 0));
    gf_UpdateStatsAll(lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LevelUp_Init () {
    gt_LevelUp = TriggerCreate("gt_LevelUp_Func");
    TriggerAddEventUnitGainLevel(gt_LevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpendSkillPoint
//--------------------------------------------------------------------------------------------------
bool gt_SpendSkillPoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_skillPointsPlayer[EventPlayer()] > 0))) {
            return false;
        }
        if (!(((DialogControlGetDialog(EventDialogControl()) == gv_skillWindowBig) || (DialogControlGetDialog(EventDialogControl()) == gv_minimalistSkillDialog)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((EventDialogControl() == gv_bTNSkillIncrease[1]) || (EventDialogControl() == gv_minimalistSkillDialogItem[1]))) {
        gf_IncreaseSkillType(EventPlayer(), 1, 1);
    }
    else if (((EventDialogControl() == gv_bTNSkillIncrease[2]) || (EventDialogControl() == gv_minimalistSkillDialogItem[2]))) {
        gf_IncreaseSkillType(EventPlayer(), 2, 1);
    }
    else if (((EventDialogControl() == gv_bTNSkillIncrease[3]) || (EventDialogControl() == gv_minimalistSkillDialogItem[3]))) {
        gf_IncreaseSkillType(EventPlayer(), 3, 1);
    }
    else if (((EventDialogControl() == gv_bTNSkillIncrease[4]) || (EventDialogControl() == gv_minimalistSkillDialogItem[4]))) {
        gf_IncreaseSkillType(EventPlayer(), 4, 1);
    }
    else if (((EventDialogControl() == gv_bTNSkillIncrease[5]) || (EventDialogControl() == gv_minimalistSkillDialogItem[5]))) {
        gf_IncreaseSkillType(EventPlayer(), 5, 1);
    }
    gf_UpdateSkillButton(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpendSkillPoint_Init () {
    gt_SpendSkillPoint = TriggerCreate("gt_SpendSkillPoint_Func");
    TriggerAddEventDialogControl(gt_SpendSkillPoint, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ArtisanRepair
//--------------------------------------------------------------------------------------------------
bool gt_ArtisanRepair_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Advancedtag(EventPlayerEffectUsedUnit(c_effectUnitTarget), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), StringExternal("Param/Value/89FDCDD6"), 2.0, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ArtisanRepair_Init () {
    gt_ArtisanRepair = TriggerCreate("gt_ArtisanRepair_Func");
    TriggerAddEventPlayerEffectUsed(gt_ArtisanRepair, c_playerAny, "ArtisanshipRepairTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DetectSmoke
//--------------------------------------------------------------------------------------------------
bool gt_DetectSmoke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_radius;
    unitgroup lv_campfires;
    bool lv_found;
    // Variable Initialization
    lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "AttributeBonus[Hover]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    lv_campfires = UnitGroup("CampfireLit", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((gv_dayNight == 1))) {
            return false;
        }
        if (!((UnitGroupCount(lv_campfires, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_campfires = UnitGroupFilterAlliance(lv_campfires, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAllianceEnemy, 0);
    UnitGroupLoopBegin(lv_campfires);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == false)) {
            lv_found = true;
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(UnitGroupLoopCurrent()), false)), 5.0, 270.0);
            PingSetScale(PingLastCreated(), 0.5);
        }
        else {
        }
        VisRevealArea(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 2.0), 3.0, false);
    }
    UnitGroupLoopEnd();
    if ((lv_found == true)) {
        gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/507F1BC6"), 2.0, 24);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetectSmoke_Init () {
    gt_DetectSmoke = TriggerCreate("gt_DetectSmoke_Func");
    TriggerAddEventPlayerEffectUsed(gt_DetectSmoke, c_playerAny, "SmokeDetectionTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DetectGold
//--------------------------------------------------------------------------------------------------
bool gt_DetectGold_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_radius;
    unitgroup lv_goldDeposits;
    bool lv_found;
    // Variable Initialization
    lv_radius = 25.0;
    lv_goldDeposits = UnitGroup("GoldDeposit", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(lv_goldDeposits, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(lv_goldDeposits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == false)) {
            lv_found = true;
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), Color(97.25, 68.63, 2.75), 2.0, 270.0);
            PingSetScale(PingLastCreated(), 0.5);
        }
        else {
        }
        VisRevealArea(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 2.0), 3.0, false);
    }
    UnitGroupLoopEnd();
    if ((lv_found == true)) {
        gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/AB905187"), 2.0, 24);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetectGold_Init () {
    gt_DetectGold = TriggerCreate("gt_DetectGold_Func");
    TriggerAddEventPlayerEffectUsed(gt_DetectGold, c_playerAny, "GoldScoutTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DetectWolvesBear
//--------------------------------------------------------------------------------------------------
bool gt_DetectWolvesBears_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    const fixed lv_radius = 25.0;
    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAddUnitGroup(gv_animalVisionGroup[lv_player], UnitGroup("Bear", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_animalVisionGroup[lv_player], UnitGroup("FrostBear", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_animalVisionGroup[lv_player], UnitGroup("Dog", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_animalVisionGroup[lv_player], UnitGroup("Lyote", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(gv_animalVisionGroup[lv_player]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), lv_player) == false) && (gv_veilofDarknessActive[lv_player] == false)) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, lv_player);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_player), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), Color(25.10, 50.20, 50.20), 2.0, 270.0);
            PingSetScale(PingLastCreated(), 0.5);
        }
        else {
            if (((DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(UnitGroupLoopCurrent())) > 25.0) || (gv_veilofDarknessActive[lv_player] == true))) {
                libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, lv_player);
                UnitGroupRemove(gv_animalVisionGroup[lv_player], UnitGroupLoopCurrent());
            }
            else {
            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetectWolvesBears_Init () {
    gt_DetectWolvesBears = TriggerCreate("gt_DetectWolvesBears_Func");
    TriggerAddEventPlayerEffectUsed(gt_DetectWolvesBears, c_playerAny, "AnimalScoutTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Salvage
//--------------------------------------------------------------------------------------------------
bool gt_Salvage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    point lv_point;
    // Variable Initialization
    lv_type = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_point = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal("Param/Value/9434CCE7"), 2.0, 24);
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "KillWithDamage", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    gf_CreateSalvageResources(lv_type, lv_point);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Salvage_Init () {
    gt_Salvage = TriggerCreate("gt_Salvage_Func");
    TriggerAddEventPlayerEffectUsed(gt_Salvage, c_playerAny, "SalvageStructure");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AdrenalineRushTimer
//--------------------------------------------------------------------------------------------------
bool gt_AdrenalineRushTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_BoostAdrenalineRush(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "Kobold", -1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AdrenalineRushTimer_Init () {
    gt_AdrenalineRushTimer = TriggerCreate("gt_AdrenalineRushTimer_Func");
    TriggerAddEventPlayerEffectUsed(gt_AdrenalineRushTimer, c_playerAny, "AdrenalineRushTimer");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AdrenalineRushOn
//--------------------------------------------------------------------------------------------------
bool gt_AdrenalineRushOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorRemove(EventUnit(), "Frostbite", 1);
    UnitBehaviorRemove(EventUnit(), "FrostbitePositive", 1);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("Run", 0)), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AdrenalineRushOn_Init () {
    gt_AdrenalineRushOn = TriggerCreate("gt_AdrenalineRushOn_Func");
    TriggerAddEventUnitBehaviorChange(gt_AdrenalineRushOn, null, "AdrenalineRush", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnNaturesGrace
//--------------------------------------------------------------------------------------------------
bool gt_LearnNaturesGrace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_learnedSpellsString[lv_i], 1, 1) == "0")) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= 20)) {
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 20);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/3D9EE9D5"), 3.0, 24);
                    gf_LearnSpell(1, lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnNaturesGrace_Init () {
    gt_LearnNaturesGrace = TriggerCreate("gt_LearnNaturesGrace_Func");
    TriggerAddEventUnitAbility(gt_LearnNaturesGrace, null, AbilityCommand("LearnNaturesGrace", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnMineralTap
//--------------------------------------------------------------------------------------------------
bool gt_LearnMineralTap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_learnedSpellsString[lv_i], 2, 2) == "0")) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= 20)) {
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 20);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/A2F22A0A"), 3.0, 24);
                    gf_LearnSpell(2, lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnMineralTap_Init () {
    gt_LearnMineralTap = TriggerCreate("gt_LearnMineralTap_Func");
    TriggerAddEventUnitAbility(gt_LearnMineralTap, null, AbilityCommand("LearnMineralTap", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnClairvoyance
//--------------------------------------------------------------------------------------------------
bool gt_LearnClairvoyance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_learnedSpellsString[lv_i], 3, 3) == "0")) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= 30)) {
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 30);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/508A7927"), 3.0, 24);
                    gf_LearnSpell(3, lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnClairvoyance_Init () {
    gt_LearnClairvoyance = TriggerCreate("gt_LearnClairvoyance_Func");
    TriggerAddEventUnitAbility(gt_LearnClairvoyance, null, AbilityCommand("LearnClairvoyance", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnFrostArmor
//--------------------------------------------------------------------------------------------------
bool gt_LearnFrostArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_learnedSpellsString[lv_i], 4, 4) == "0")) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= 40)) {
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 40);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/220B7A50"), 3.0, 24);
                    gf_LearnSpell(4, lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFrostArmor_Init () {
    gt_LearnFrostArmor = TriggerCreate("gt_LearnFrostArmor_Func");
    TriggerAddEventUnitAbility(gt_LearnFrostArmor, null, AbilityCommand("LearnFrostArmor", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnSiphonLife
//--------------------------------------------------------------------------------------------------
bool gt_LearnSiphonLife_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_learnedSpellsString[lv_i], 5, 5) == "0")) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= 50)) {
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 50);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/77F99D29"), 3.0, 24);
                    gf_LearnSpell(5, lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnSiphonLife_Init () {
    gt_LearnSiphonLife = TriggerCreate("gt_LearnSiphonLife_Func");
    TriggerAddEventUnitAbility(gt_LearnSiphonLife, null, AbilityCommand("LearnSiphonLife", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnAffliction
//--------------------------------------------------------------------------------------------------
bool gt_LearnAffliction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 60;
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_learnedSpellsString[lv_i], 6, 6) == "0")) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/1A542137"), 3.0, 24);
                    gf_LearnSpell(6, lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnAffliction_Init () {
    gt_LearnAffliction = TriggerCreate("gt_LearnAffliction_Func");
    TriggerAddEventUnitAbility(gt_LearnAffliction, null, AbilityCommand("LearnAffliction", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnShadowCloak
//--------------------------------------------------------------------------------------------------
bool gt_LearnShadowCloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 70;
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_learnedSpellsString[lv_i], 7, 7) == "0")) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) >= 1)) {
                        PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                        SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_shadowstone, 1));
                        gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/95E16F8B"), 3.0, 24);
                        gf_LearnSpell(7, lv_i);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnShadowCloak_Init () {
    gt_LearnShadowCloak = TriggerCreate("gt_LearnShadowCloak_Func");
    TriggerAddEventUnitAbility(gt_LearnShadowCloak, null, AbilityCommand("LearnShadowCloak", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnGuardianSpirit
//--------------------------------------------------------------------------------------------------
bool gt_LearnGuardianSpirit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_radiants;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_radiants = UnitGroupFilter("RadiantGem", c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_learnedSpellsString[lv_i], 8, 8) == "0")) {
                if ((UnitGroupCount(lv_radiants, c_unitCountAlive) == 2)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_radiants);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= 100)) {
                    lv_thru = true;
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 100);
                }
                if ((lv_thru == true)) {
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/C1C8DF94"), 3.0, 24);
                    gf_LearnSpell(8, lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnGuardianSpirit_Init () {
    gt_LearnGuardianSpirit = TriggerCreate("gt_LearnGuardianSpirit_Func");
    TriggerAddEventUnitAbility(gt_LearnGuardianSpirit, null, AbilityCommand("LearnGuardianSpirit", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NaturesGrace
//--------------------------------------------------------------------------------------------------
bool gt_NaturesGrace_Func (bool testConds, bool runActions) {
    int autoF8F6B406_ae;
    int autoF8F6B406_ai;
    int auto0CB82B79_ae;
    int auto0CB82B79_ai;
    // Variable Declarations
    int lv_a;
    unit lv_target;
    unit lv_caster;
    fixed lv_missinglife;
    fixed lv_treeRestore;
    fixed lv_bushRestore;
    fixed lv_cost;
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_missinglife = (100.0 - UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent));
    lv_treeRestore = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "NaturesGraceStats", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    lv_bushRestore = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "NaturesGraceStats", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    lv_cost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "NaturesGrace", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    lv_bushRestore = Round(lv_bushRestore);
    gf_SpellCast(lv_caster, lv_cost);
    if ((UnitGetType(lv_target) == "MapleTree")) {
        if ((lv_treeRestore > lv_missinglife)) {
            lv_treeRestore = lv_missinglife;
        }
        else {
        }
        UnitSetPropertyFixed(lv_target, c_unitPropLifePercent, (UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) + lv_treeRestore));
        if ((gv_skillForestry[UnitGetOwner(lv_caster)] >= 25)) {
            gf_HealUnit(lv_caster, lv_caster, (UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) * (lv_treeRestore * 0.01)), true);
        }
        else {
        }
        if ((UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) >= (UnitGetCustomValue(lv_target, 0) * 100.0))) {
            UnitSetCustomValue(lv_target, 0, (UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) * 0.01));
            UnitSetCustomValue(lv_target, 1, (UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) * 0.01));
            UnitSetCustomValue(lv_target, 2, (UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) * 0.01));
            libNtve_gf_SendActorMessageToUnit(lv_target, libNtve_gf_SetScale(UnitGetCustomValue(lv_target, 0), UnitGetCustomValue(lv_target, 1), UnitGetCustomValue(lv_target, 2), 0.0));
        }
        else {
        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GrowingTreeRemove", lv_target);
    }
    else if ((UnitGetType(lv_target) == "BerryBush")) {
        autoF8F6B406_ae = FixedToInt(lv_bushRestore);
        autoF8F6B406_ai = 1;
        lv_a = 1;
        for ( ; ( (autoF8F6B406_ai >= 0 && lv_a <= autoF8F6B406_ae) || (autoF8F6B406_ai <= 0 && lv_a >= autoF8F6B406_ae) ) ; lv_a += autoF8F6B406_ai ) {
            UnitCreate(1, "Berry", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_target), RandomFixed(0.3, 0.6), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), RandomFixed(0.6, 1.0), 0.0);
            UnitSetCustomValue(lv_target, 0, (UnitGetCustomValue(lv_target, 0) + 1.0));
        }
        gf_UpdateResourceTooltip(lv_target);
    }
    else if ((UnitGetType(lv_target) == "CulinaryHerbBush")) {
        auto0CB82B79_ae = FixedToInt(lv_bushRestore);
        auto0CB82B79_ai = 1;
        lv_a = 1;
        for ( ; ( (auto0CB82B79_ai >= 0 && lv_a <= auto0CB82B79_ae) || (auto0CB82B79_ai <= 0 && lv_a >= auto0CB82B79_ae) ) ; lv_a += auto0CB82B79_ai ) {
            UnitCreate(1, "CulinaryHerb", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_target), RandomFixed(0.4, 0.5), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), RandomFixed(0.6, 1.6), 0.0);
            UnitSetCustomValue(lv_target, 0, (UnitGetCustomValue(lv_target, 0) + 1.0));
        }
        gf_UpdateResourceTooltip(lv_target);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NaturesGrace_Init () {
    gt_NaturesGrace = TriggerCreate("gt_NaturesGrace_Func");
    TriggerAddEventPlayerEffectUsed(gt_NaturesGrace, c_playerAny, "NaturesGraceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MineralTap
//--------------------------------------------------------------------------------------------------
bool gt_MineralTap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_spellCost;
    // Variable Initialization
    lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MineralTap", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MineralTap_Init () {
    gt_MineralTap = TriggerCreate("gt_MineralTap_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralTap, c_playerAny, "MineralTapApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Clairvoyance
//--------------------------------------------------------------------------------------------------
bool gt_Clairvoyance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_spellCost;
    // Variable Initialization
    lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "Clairvoyance", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Clairvoyance_Init () {
    gt_Clairvoyance = TriggerCreate("gt_Clairvoyance_Func");
    TriggerAddEventPlayerEffectUsed(gt_Clairvoyance, c_playerAny, "ClairvoyancePersistent");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FrostArmorCast
//--------------------------------------------------------------------------------------------------
bool gt_FrostArmorCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_spellCost;
    // Variable Initialization
    lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "FrostArmor", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FrostArmorCast_Init () {
    gt_FrostArmorCast = TriggerCreate("gt_FrostArmorCast_Func");
    TriggerAddEventPlayerEffectUsed(gt_FrostArmorCast, c_playerAny, "FrostArmorApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FrostArmorExtend
//--------------------------------------------------------------------------------------------------
bool gt_FrostArmorExtend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_frostArmoredUnit;
    fixed lv_duration;
    // Variable Initialization
    lv_frostArmoredUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_duration = UnitBehaviorDuration(lv_frostArmoredUnit, "FrostArmor");
    // Conditions
    if (testConds) {
        if (!((lv_duration < 30.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorSetDurationRemaining(lv_frostArmoredUnit, "FrostArmor", (UnitBehaviorDuration(lv_frostArmoredUnit, "FrostArmor") + 1.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FrostArmorExtend_Init () {
    gt_FrostArmorExtend = TriggerCreate("gt_FrostArmorExtend_Func");
    TriggerAddEventPlayerEffectUsed(gt_FrostArmorExtend, c_playerAny, "FrostArmorDamage");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SiphonLifeInitial
//--------------------------------------------------------------------------------------------------
bool gt_SiphonLifeInitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_spellCost;
    // Variable Initialization
    lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "SiphonLife", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SiphonLifeInitial_Init () {
    gt_SiphonLifeInitial = TriggerCreate("gt_SiphonLifeInitial_Func");
    TriggerAddEventPlayerEffectUsed(gt_SiphonLifeInitial, c_playerAny, "SiphonLifeApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SiphonLife
//--------------------------------------------------------------------------------------------------
bool gt_SiphonLifeTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_stealFullAmount;
    // Variable Initialization
    lv_stealFullAmount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SiphonLifeStats", "Amount", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    UnitDamage(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SiphonLifeDummyDamage", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_stealFullAmount);
    gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_stealFullAmount, true);
    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_hunger += (lv_stealFullAmount * 0.5);
    if ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NecromancersNecklace") == true) && (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), "FrostBarrier") == false)) {
        gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_warmth += (lv_stealFullAmount * 0.5);
    }
    else {
    }
    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "Kobold")) {
        gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_hunger -= (lv_stealFullAmount * 0.5);
        if ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NecromancersNecklace") == true)) {
            gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_warmth -= (lv_stealFullAmount * 0.5);
        }
        else {
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SiphonLifeTrigger_Init () {
    gt_SiphonLifeTrigger = TriggerCreate("gt_SiphonLifeTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_SiphonLifeTrigger, c_playerAny, "SiphonLifeTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AfflictionInitial
//--------------------------------------------------------------------------------------------------
bool gt_AfflictionInitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_spellCost;
    // Variable Initialization
    lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "Affliction", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AfflictionInitial_Init () {
    gt_AfflictionInitial = TriggerCreate("gt_AfflictionInitial_Func");
    TriggerAddEventPlayerEffectUsed(gt_AfflictionInitial, c_playerAny, "AfflictionApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AfflictionDrain
//--------------------------------------------------------------------------------------------------
bool gt_AfflictionDrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    // Variable Initialization
    lv_amount = EventUnitDamageAmount();
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_playerData[UnitGetOwner(EventUnit())].lv_stamina -= (0.1 * lv_amount);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AfflictionDrain_Init () {
    gt_AfflictionDrain = TriggerCreate("gt_AfflictionDrain_Func");
    TriggerAddEventUnitDamaged(gt_AfflictionDrain, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, "AfflictionDamage");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShadowCloakInitial
//--------------------------------------------------------------------------------------------------
bool gt_ShadowCloakInitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_spellCost;
    // Variable Initialization
    lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "ShadowCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShadowCloakInitial_Init () {
    gt_ShadowCloakInitial = TriggerCreate("gt_ShadowCloakInitial_Func");
    TriggerAddEventPlayerEffectUsed(gt_ShadowCloakInitial, c_playerAny, "ShadowCloakStopAttack");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShadowCloakEnd
//--------------------------------------------------------------------------------------------------
bool gt_ShadowCloakEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    CatalogFieldValueSet(c_gameCatalogAbil, "ShadowCloak", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventUnit()), FixedToString(2.5, 0));
    UnitAbilitySpend(EventUnit(), AbilityCommand("ShadowCloak", 0), c_spendLocationAbility);
    CatalogFieldValueSet(c_gameCatalogAbil, "ShadowCloak", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventUnit()), FixedToString(0.25, 2));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShadowCloakEnd_Init () {
    gt_ShadowCloakEnd = TriggerCreate("gt_ShadowCloakEnd_Func");
    TriggerAddEventUnitAbility(gt_ShadowCloakEnd, null, AbilityCommand("ShadowCloak", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GuardianSpiritInitial
//--------------------------------------------------------------------------------------------------
bool gt_GuardianSpiritInitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cost;
    // Variable Initialization
    lv_cost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "GuardianSpirit", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_cost);
    gf_GuardianSpiritLoop(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardianSpiritInitial_Init () {
    gt_GuardianSpiritInitial = TriggerCreate("gt_GuardianSpiritInitial_Func");
    TriggerAddEventPlayerEffectUsed(gt_GuardianSpiritInitial, c_playerAny, "GuardianSpiritApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GuardianSpiritTrigger
//--------------------------------------------------------------------------------------------------
bool gt_GuardianSpiritTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_regenC;
    fixed lv_regen;
    // Variable Initialization
    lv_regenC = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GuardianSpiritStats", "Amount", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    lv_regen = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GuardianSpiritStats", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    lv_regen = (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropLifeMax, c_unitPropCurrent) * (lv_regen * 0.01));
    gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitCaster), (lv_regen + lv_regenC), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardianSpiritTrigger_Init () {
    gt_GuardianSpiritTrigger = TriggerCreate("gt_GuardianSpiritTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_GuardianSpiritTrigger, c_playerAny, "GuardianSpiritTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GuardianSpiritLingeringTrigger
//--------------------------------------------------------------------------------------------------
bool gt_GuardianSpiritLingeringTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_heal;
    // Variable Initialization
    lv_heal = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GuardianSpiritStats", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    lv_heal *= 0.08;
    gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_heal, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardianSpiritLingeringTrigger_Init () {
    gt_GuardianSpiritLingeringTrigger = TriggerCreate("gt_GuardianSpiritLingeringTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_GuardianSpiritLingeringTrigger, c_playerAny, "GuardianSpiritLingeringHeal");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WhirlwindRotate
//--------------------------------------------------------------------------------------------------
bool gt_WhirlwindRotate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster), (UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster)) + (360.0 / 4.0)), 0.0625);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WhirlwindRotate_Init () {
    gt_WhirlwindRotate = TriggerCreate("gt_WhirlwindRotate_Func");
    TriggerAddEventPlayerEffectUsed(gt_WhirlwindRotate, c_playerAny, "WhirlwindRotate");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpellAbsorb
//--------------------------------------------------------------------------------------------------
bool gt_SpellAbsorb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blocker;
    unit lv_attacker;
    int lv_i;
    // Variable Initialization
    lv_blocker = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_i = UnitGetOwner(lv_blocker);
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Advancedtag(lv_blocker, UnitGetOwner(lv_blocker), StringExternal("Param/Value/84ECB4CB"), 2.0, 24);
    gf_Advancedtag(lv_blocker, UnitGetOwner(lv_attacker), StringExternal("Param/Value/3ABF98D0"), 2.0, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpellAbsorb_Init () {
    gt_SpellAbsorb = TriggerCreate("gt_SpellAbsorb_Func");
    TriggerAddEventPlayerEffectUsed(gt_SpellAbsorb, c_playerAny, "SpellAbsorbSet");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InitializeDayTimer
//--------------------------------------------------------------------------------------------------
bool gt_InitializeDayTimerDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(230, 50, c_anchorBottomLeft, 5, 300, true);
    gv_dayTimerDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    gv_dayTimerProgress = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 20, 15);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 190, 20);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializeDayTimerDialog_Init () {
    gt_InitializeDayTimerDialog = TriggerCreate("gt_InitializeDayTimerDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LanternTrigger
//--------------------------------------------------------------------------------------------------
bool gt_LanternTrigger_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_dayNight == 2) && (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "LanternLight") == false)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "LanternLightApply", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    else if (((gv_dayNight == 1) || (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Lantern") == false)) && (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "LanternLight") == true)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "LanternLightRemove", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LanternTrigger_Init () {
    gt_LanternTrigger = TriggerCreate("gt_LanternTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_LanternTrigger, c_playerAny, "LanternTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WolfsbanePassive
//--------------------------------------------------------------------------------------------------
bool gt_WolfsbanePassive_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_dayNight == 2) && (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "WolfsbanePassive") == false) && (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "WolfsbanePassiveStronger") == false)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "WolfsbaneApply", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    else if (((gv_dayNight == 1) || (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Wolfsbane") == false)) && ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "WolfsbanePassive") == true) || (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "WolfsbanePassiveStronger") == true))) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "WolfsbaneRemoveSet", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WolfsbanePassive_Init () {
    gt_WolfsbanePassive = TriggerCreate("gt_WolfsbanePassive_Func");
    TriggerAddEventPlayerEffectUsed(gt_WolfsbanePassive, c_playerAny, "WolfsbaneTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CoiffureCareCounter
//--------------------------------------------------------------------------------------------------
bool gt_CoiffureCareCounter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_gameStats.lv_rainAvoided += 1;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CoiffureCareCounter_Init () {
    gt_CoiffureCareCounter = TriggerCreate("gt_CoiffureCareCounter_Func");
    TriggerAddEventPlayerEffectUsed(gt_CoiffureCareCounter, c_playerAny, "CoiffureCareCounter");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StagEvasion
//--------------------------------------------------------------------------------------------------
bool gt_StagEvasion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stag;
    unitgroup lv_hostiles;
    fixed lv_alarmRadius;
    point lv_p;
    // Variable Initialization
    lv_stag = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_hostiles = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_stag), gv_stagAlarmRadius), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_alarmRadius = gv_stagAlarmRadius;
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(lv_hostiles);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Sheep") || (UnitGetType(UnitGroupLoopCurrent()) == "Pheasant") || (UnitGetType(UnitGroupLoopCurrent()) == "Stag"))) {
            UnitGroupRemove(lv_hostiles, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((UnitHasBehavior(lv_stag, "StagInjuredAlert") == false)) {
        UnitGroupLoopBegin(lv_hostiles);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_alarmRadius -= (gv_skillForaging[UnitGetOwner(UnitGroupLoopCurrent())] / 5.0);
            if (((UnitHasBehavior(UnitGroupLoopCurrent(), "Running") == false) || (UnitHasBehavior(UnitGroupLoopCurrent(), "Stationary") == true))) {
                lv_alarmRadius -= 4.0;
            }
            else {
            }
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Beast") == true)) {
                lv_alarmRadius -= 8.0;
            }
            else {
            }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_stag), UnitGetPosition(UnitGroupLoopCurrent())) > libNtve_gf_ArithmeticRealClamp(lv_alarmRadius, 4.0, 9.0)) && (UnitGetType(UnitGroupLoopCurrent()) != "MurlocSlave") && (UnitGetType(UnitGroupLoopCurrent()) != "Ghoul")) {
                UnitGroupRemove(lv_hostiles, UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((UnitGroupCount(lv_hostiles, c_unitCountAlive) > 0)) {
        UnitBehaviorAdd(lv_stag, "StagSprint", lv_stag, 1);
        lv_p = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_stag), -22.0, UnitGroupCenterOfGroup(lv_hostiles));
        lv_p = gf_RandomPathablePoint(RegionCircle(lv_p, 8.0));
        if (gf_PathableMaximum(lv_stag, lv_p, 32)) {
        }
        else {
            if ((((UnitGetCustomValue(lv_stag, 0) == 0.0) && (UnitGetCustomValue(lv_stag, 1) == 0.0)) || (DistanceBetweenPoints(UnitGetPosition(lv_stag), Point(UnitGetCustomValue(lv_stag, 0), UnitGetCustomValue(lv_stag, 1))) <= 4.0))) {
                lv_p = gf_RandomPathablePoint(RegionPlayableMap());
            }
            else {
                lv_p = Point(UnitGetCustomValue(lv_stag, 0), UnitGetCustomValue(lv_stag, 1));
            }
            UnitBehaviorAdd(lv_stag, "StagBlindDash", lv_stag, 1);
        }
        UnitIssueOrder(lv_stag, OrderTargetingPoint(AbilityCommand("move", 0), lv_p), c_orderQueueReplace);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StagEvasion_Init () {
    gt_StagEvasion = TriggerCreate("gt_StagEvasion_Func");
    TriggerAddEventPlayerEffectUsed(gt_StagEvasion, c_playerAny, "StagEvasionTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GainResource
//--------------------------------------------------------------------------------------------------
bool gt_GainResource_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "Kobold")) {
        gv_aIData[UnitGetOwner(EventUnit())].lv_focalNode = null;
        gf_UpdateResourceReservesSingle(EventUnit(), EventUnitInventoryItem(), false);
    }
    else if ((UnitGetType(EventUnit()) == "StorageOutpost")) {
        gf_UpdateOutpostVisual(EventUnit());
    }
    else if ((UnitGetType(EventUnit()) == "PackBeaver") && (UnitHasBehavior(EventUnit(), "BeaverScavenger") == true) && gf_UnitExists(gv_teamData[gv_playerData[UnitGetOwner(EventUnit())].lv_team].lv_watchTower)) {
        UnitBehaviorRemove(EventUnit(), "BeaverScavenger", 1);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("GiveAllItemsToTarget", 0), gv_teamData[gv_playerData[UnitGetOwner(EventUnit())].lv_team].lv_watchTower), c_orderQueueReplace);
        UnitBehaviorAdd(EventUnit(), "BeaverCargo", EventUnit(), 1);
        UnitSetInfoText(EventUnit(), StringExternal("Param/Value/0461DF37"), UnitTypeGetName(UnitGetType(UnitGroupUnit(UnitInventoryGroup(EventUnit()), 1))), StringExternal("Param/Value/D8E2116B"));
    }
    if ((UnitGetType(EventUnitInventoryItem()) == "GoldPurse")) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(UnitGetCustomValue(EventUnitInventoryItem(), 0)));
        gv_playerData[UnitGetOwner(EventUnit())].lv_gameStats.lv_goldEarned += FixedToInt(UnitGetCustomValue(EventUnitInventoryItem(), 0));
        SoundPlayOnUnit(SoundLink("GoldPickup", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
        gf_Quicktag(EventUnit(), (StringExternal("Param/Value/6137EF46") + (FixedToText(UnitGetCustomValue(EventUnitInventoryItem(), 0), 0) + StringExternal("Param/Value/BB77D3D5"))), 2.0, 24);
        gf_DropandRemove(EventUnitInventoryItem());
    }
    else {
    }
    if ((gv_tutorial == true)) {
        if (((UnitGetType(EventUnitInventoryItem()) == "IronOre") || (UnitGetType(EventUnitInventoryItem()) == "Shadowstone"))) {
            TriggerExecute(gt_TutorialPart55, true, false);
        }
        else {
        }
        if ((UnitGetType(EventUnitInventoryItem()) == "Stone")) {
            TriggerExecute(gt_TutorialPart6, true, false);
        }
        else {
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GainResource_Init () {
    gt_GainResource = TriggerCreate("gt_GainResource_Func");
    TriggerAddEventUnitInventoryChange(gt_GainResource, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LoseResource
//--------------------------------------------------------------------------------------------------
bool gt_LoseResource_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "Kobold")) {
        gf_UpdateResourceReservesSingle(EventUnit(), EventUnitInventoryItem(), true);
    }
    else if ((UnitGetType(EventUnit()) == "StorageOutpost")) {
        gf_UpdateOutpostVisual(EventUnit());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoseResource_Init () {
    gt_LoseResource = TriggerCreate("gt_LoseResource_Func");
    TriggerAddEventUnitInventoryChange(gt_LoseResource, null, c_unitInventoryChangeLoses, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TreeLoot
//--------------------------------------------------------------------------------------------------
bool gt_TreeLoot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_warmthandFatigueGain;
    fixed lv_autogrowChance;
    fixed lv_heal;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MapleTree") || (UnitGetType(EventUnit()) == "ElderTree")))) {
            return false;
        }
        if (!(((UnitGetCustomValue(EventUnit(), 0) == 0.0) || (UnitGetCustomValue(EventUnit(), 0) >= 1.0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "ElderTree")) {
        gf_AddExperience(EventUnitDamageSourceUnit(), 75.0);
        UnitCreate(1, "InfusedLumber", 0, 0, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
        UnitCreate(1, "Lumber", 0, 0, PointWithOffset(UnitGetPosition(EventUnit()), RandomFixed(-0.25, 0.25), RandomFixed(-0.25, 0.25)), libNtve_gf_RandomAngle());
        UnitCreate(1, "Lumber", 0, 0, PointWithOffset(UnitGetPosition(EventUnit()), RandomFixed(-0.25, 0.25), RandomFixed(-0.25, 0.25)), libNtve_gf_RandomAngle());
        UnitCreate(1, "Lumber", 0, 0, PointWithOffset(UnitGetPosition(EventUnit()), RandomFixed(-0.25, 0.25), RandomFixed(-0.25, 0.25)), libNtve_gf_RandomAngle());
    }
    else {
        gf_AddExperience(EventUnitDamageSourceUnit(), 20.0);
        UnitCreate(1, "Lumber", 0, 0, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
    }
    if ((UnitGetType(EventUnitDamageSourceUnit()) == "Kobold")) {
        gv_playerData[UnitGetOwner(EventUnitDamageSourceUnit())].lv_gameStats.lv_treesFelled += 1;
        lv_warmthandFatigueGain = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "AttributeBonus[Biological]", UnitGetOwner(EventUnitDamageSourceUnit())));
        if ((lv_warmthandFatigueGain > 0.0)) {
            if (((UnitHasBehavior(EventUnitDamageSourceUnit(), "FrostBarrier") == true) || (UnitHasBehavior(EventUnitDamageSourceUnit(), "FrostArmor") == true))) {
                gv_playerData[UnitGetOwner(EventUnitDamageSourceUnit())].lv_stamina += lv_warmthandFatigueGain;
                TextExpressionSetToken("Param/Expression/ED2887A5", "A", StringExternal("Param/Value/13F10214"));
                TextExpressionSetToken("Param/Expression/ED2887A5", "B", FixedToText(lv_warmthandFatigueGain, 0));
                TextExpressionSetToken("Param/Expression/ED2887A5", "C", StringExternal("Param/Value/B6A2A256"));
                gf_Quicktag(EventUnitDamageSourceUnit(), TextExpressionAssemble("Param/Expression/ED2887A5"), 2.0, 24);
            }
            else {
                gv_playerData[UnitGetOwner(EventUnitDamageSourceUnit())].lv_warmth += lv_warmthandFatigueGain;
                gv_playerData[UnitGetOwner(EventUnitDamageSourceUnit())].lv_stamina += lv_warmthandFatigueGain;
                TextExpressionSetToken("Param/Expression/A9D518A1", "D", StringExternal("Param/Value/50ED146A"));
                TextExpressionSetToken("Param/Expression/A9D518A1", "E", FixedToText(lv_warmthandFatigueGain, 0));
                TextExpressionSetToken("Param/Expression/A9D518A1", "A", StringExternal("Param/Value/C982DBB0"));
                TextExpressionSetToken("Param/Expression/A9D518A1", "B", FixedToText(lv_warmthandFatigueGain, 0));
                TextExpressionSetToken("Param/Expression/A9D518A1", "C", StringExternal("Param/Value/C6546BC6"));
                gf_Quicktag(EventUnitDamageSourceUnit(), TextExpressionAssemble("Param/Expression/A9D518A1"), 2.0, 24);
            }
        }
        else {
        }
        lv_autogrowChance = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "AutogrowStat", "Amount", UnitGetOwner(EventUnitDamageSourceUnit())));
        if ((((UnitHasBehavior(EventUnitDamageSourceUnit(), "GrandForestersFavoured") == true) && (libNtve_gf_RandomPercent() < lv_autogrowChance)) || ((gv_skillForestry[UnitGetOwner(EventUnitDamageSourceUnit())] >= 15) && (libNtve_gf_RandomPercent() < 30.0)))) {
            UnitCreateEffectPoint(EventUnitDamageSourceUnit(), "PlantTree", UnitGetPosition(EventUnit()));
        }
        else {
        }
    }
    else {
    }
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true) && (UnitHasBehavior(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "GrandForestersFavoured") == true)) {
            VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(UnitGetPosition(EventUnit()), 3.0), 3.0, false);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TreeLoot_Init () {
    gt_TreeLoot = TriggerCreate("gt_TreeLoot_Func");
    TriggerAddEventUnitDamaged(gt_TreeLoot, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WildBearAI
//--------------------------------------------------------------------------------------------------
bool WildBearAI_Periodic(bool cond, bool actions){
    unit animal = EventUnitCreatedUnit();
    int owner = UnitGetOwner(animal);
    string type = UnitGetType(animal);
    point lPoint;
    point cPoint;
    point rPoint;
    fixed dist;
    fixed fac;
    int resetLeash = 0;
    
    if (owner == 15){
        if (type == "Bear" || type == "WhiteBear"){
            lPoint = UnitGetPosition(animal);
            while (gf_UnitExists(animal)){
                if (!UnitHasBehavior(animal, "BeastLeash")){
                    cPoint = UnitGetPosition(animal);
                    dist = DistanceBetweenPoints(cPoint, lPoint);
                    if (dist > 9.){
                        fac = AngleBetweenPoints(cPoint, lPoint);
                        UnitBehaviorAdd(animal, "BeastLeash", animal, 7);
                        rPoint = PointWithOffsetPolar(cPoint, RandomFixed(.35*dist, .75*dist), fac);
                        UnitIssueOrder(animal, OrderTargetingPoint(AbilityCommand("move", 0), rPoint), c_orderQueueReplace);
                        lPoint = rPoint;
                    }
                    else {
                        resetLeash +=1;
                
                        if (resetLeash > 3){
                            resetLeash = 0;
                            lPoint = cPoint;
                        }
                    }
                }
                Wait(3., c_timeGame);
            }
        }
    }
    return true;
}
void WildBearAI_Init(){
    TriggerAddEventUnitCreated(TriggerCreate("WildBearAI_Periodic"), null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateGold2
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGold_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UpdateGold(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateGold_Init () {
    gt_UpdateGold = TriggerCreate("gt_UpdateGold_Func");
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_UpdateGold, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BushGrowTrigger
//--------------------------------------------------------------------------------------------------
bool gt_BushGrowTrigger_Func (bool testConds, bool runActions) {
    string autoD70EE206_val;
    // Variable Declarations
    unit lv_bush;
    // Variable Initialization
    lv_bush = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetCustomValue(lv_bush, 1) > 0.0)) {
        UnitSetCustomValue(lv_bush, 0, (UnitGetCustomValue(lv_bush, 0) + 1.0));
        UnitSetCustomValue(lv_bush, 1, (UnitGetCustomValue(lv_bush, 1) - 1.0));
        autoD70EE206_val = UnitGetType(lv_bush);
        if (autoD70EE206_val == "BerryBush") {
            UnitCreate(1, "Berry", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_bush), RandomFixed(0.3, 0.6), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), RandomFixed(0.9, 1.1), 0.0);
        }
        else if (autoD70EE206_val == "CulinaryHerbBush") {
            UnitCreate(1, "CulinaryHerb", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_bush), RandomFixed(0.3, 0.4), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), RandomFixed(0.5, 1.5), 0.0);
        }
        else {
        }
        gf_UpdateResourceTooltip(lv_bush);
        gf_Alltag(lv_bush, StringExternal("Param/Value/7EC77AD6"), 2.0, 24);
        if ((UnitGetCustomValue(lv_bush, 1) > 0.0)) {
            UnitBehaviorAdd(lv_bush, "BushRegrowth", lv_bush, 1);
        }
        else {
        }
    }
    else {
        UnitBehaviorRemove(lv_bush, "BushRegrowth", 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BushGrowTrigger_Init () {
    gt_BushGrowTrigger = TriggerCreate("gt_BushGrowTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_BushGrowTrigger, c_playerAny, "BushRegrowthTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StopGatheringImmediately
//--------------------------------------------------------------------------------------------------
bool gt_StopGatheringImmediately_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior(EventUnit(), "MiningStoneSmart") == true) || (UnitHasBehavior(EventUnit(), "MiningGoldSmart") == true) || (UnitHasBehavior(EventUnit(), "PickingBerriesSmart") == true) || (UnitHasBehavior(EventUnit(), "PickingHerbsSmart") == true) || (UnitHasBehavior(EventUnit(), "UnlockingChestSmart") == true)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_GatherStop(EventUnit());
    UnitSetFacing(EventUnit(), (UnitGetFacing(EventUnit()) + 1.0), 0.0);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimClear Mining");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimClear Spell");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimClear Attack");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StopGatheringImmediately_Init () {
    gt_StopGatheringImmediately = TriggerCreate("gt_StopGatheringImmediately_Func");
    TriggerAddEventUnitOrder(gt_StopGatheringImmediately, null, AbilityCommand("stop", 0));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GatherStart
//--------------------------------------------------------------------------------------------------
bool gt_GatherStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gatherer;
    unit lv_node;
    bool lv_thru;
    // Variable Initialization
    lv_gatherer = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_node = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(lv_node) == "StoneDeposit") && (UnitHasBehavior(lv_gatherer, "MiningStoneSmart") == false)) {
        UnitBehaviorAdd(lv_gatherer, "MiningStoneSmart", lv_node, 1);
        gf_Quicktag(lv_gatherer, StringExternal("Param/Value/7815E8F9"), 2.0, 24);
        lv_thru = true;
    }
    else if ((UnitGetType(lv_node) == "GoldDeposit") && (UnitHasBehavior(lv_gatherer, "MiningGoldSmart") == false)) {
        UnitBehaviorAdd(lv_gatherer, "MiningGoldSmart", lv_node, 1);
        gf_Quicktag(lv_gatherer, StringExternal("Param/Value/30EE3D18"), 2.0, 24);
        lv_thru = true;
    }
    else if ((UnitGetType(lv_node) == "BerryBush") && (UnitHasBehavior(lv_gatherer, "PickingBerriesSmart") == false)) {
        UnitBehaviorAdd(lv_gatherer, "PickingBerriesSmart", lv_node, 1);
        gf_Quicktag(lv_gatherer, StringExternal("Param/Value/E3650CE0"), 2.0, 24);
        lv_thru = true;
    }
    else if ((UnitGetType(lv_node) == "CulinaryHerbBush") && (UnitHasBehavior(lv_gatherer, "PickingHerbsSmart") == false)) {
        UnitBehaviorAdd(lv_gatherer, "PickingHerbsSmart", lv_node, 1);
        gf_Quicktag(lv_gatherer, StringExternal("Param/Value/18189E78"), 2.0, 24);
        lv_thru = true;
    }
    else if ((UnitGetType(lv_node) == "TreasureChest") && (UnitHasBehavior(lv_gatherer, "UnlockingChestSmart") == false)) {
        UnitBehaviorAdd(lv_gatherer, "UnlockingChestSmart", lv_node, 1);
        gf_Quicktag(lv_gatherer, StringExternal("Param/Value/FEEBDC4B"), 3.0, 24);
        lv_thru = true;
    }
    if ((lv_thru == true)) {
        UnitIssueOrder(lv_gatherer, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetCustomValue(lv_node, 3, IntToFixed(0));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GatherStart_Init () {
    gt_GatherStart = TriggerCreate("gt_GatherStart_Func");
    TriggerAddEventPlayerEffectUsed(gt_GatherStart, c_playerAny, "GatheringResourcesStart");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GatherProgress
//--------------------------------------------------------------------------------------------------
bool gt_GatherProgress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gatherer;
    unit lv_node;
    int lv_type;
    int lv_cap;
    int lv_cV;
    // Variable Initialization
    lv_gatherer = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_node = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_type = gf_GatherType(lv_gatherer);
    lv_cap = gf_GatherCap(lv_gatherer, lv_node, lv_type);
    lv_cV = FixedToInt(UnitGetCustomValue(lv_gatherer, 0));
    // Actions
    if (!runActions) {
        return true;
    }
    if ((lv_node != null) && (UnitHasBehavior(lv_gatherer, "Stationary") == true) && (UnitHasBehavior(lv_gatherer, "Unconscious") == false) && (UnitHasBehavior(lv_gatherer, "SleepingBag") == false) && (AngleBetweenPoints(UnitGetPosition(lv_gatherer), UnitGetPosition(lv_node)) == UnitGetFacing(lv_gatherer))) {
        gf_GatherAnimation(lv_gatherer, lv_cV, lv_type, lv_cap);
        if ((UnitGetCustomValue(lv_gatherer, 1) >= 7.0)) {
            UnitSetCustomValue(lv_gatherer, 1, 0.0);
        }
        else {
            UnitSetCustomValue(lv_gatherer, 1, (UnitGetCustomValue(lv_gatherer, 1) + 1.0));
        }
        if ((lv_cV >= lv_cap)) {
            gf_GatherResult(lv_gatherer, lv_node, lv_type);
            UnitSetCustomValue(lv_gatherer, 0, IntToFixed(0));
        }
        else {
            UnitSetCustomValue(lv_gatherer, 0, IntToFixed((lv_cV + 1)));
        }
    }
    else {
        gf_GatherStop(lv_gatherer);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GatherProgress_Init () {
    gt_GatherProgress = TriggerCreate("gt_GatherProgress_Func");
    TriggerAddEventPlayerEffectUsed(gt_GatherProgress, c_playerAny, "GatheringResourcesProgress");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PlantTree
//--------------------------------------------------------------------------------------------------
bool gt_PlantTree_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    // Variable Initialization
    lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    // Actions
    if (!runActions) {
        return true;
    }
    gv_playerData[lv_owner].lv_gameStats.lv_treesPlanted += 1;
    gf_AddExperience(EventPlayerEffectUsedUnit(c_effectUnitCaster), 10.0);
    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0, 0.15);
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1, 0.15);
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2, 0.15);
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 3, IntToFixed(lv_owner));
    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), libNtve_gf_SetScale(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2), 0.0));
    if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != 0)) {
        UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0, false);
    }
    else {
    }
    if ((gv_skillForestry[lv_owner] >= 25)) {
        UnitBehaviorAdd(gv_playerData[lv_owner].lv_kobold, "ForestConnection", gv_playerData[lv_owner].lv_kobold, 1);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlantTree_Init () {
    gt_PlantTree = TriggerCreate("gt_PlantTree_Func");
    TriggerAddEventPlayerEffectUsed(gt_PlantTree, c_playerAny, "GrowingTreeSet");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GrowTree
//--------------------------------------------------------------------------------------------------
bool gt_GrowTree_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_growthPerSecond;
    fixed lv_estimatedGrowthIntervalsLeft;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(EventPlayerEffectUsedUnit(c_effectUnitCaster))) {
        if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) != 100.0)) {
            lv_growthPerSecond = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GrowingTreeModify", "VitalArray[Life].Change[0]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
            if ((lv_growthPerSecond != 0.0)) {
                lv_estimatedGrowthIntervalsLeft = ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, c_unitPropCurrent)) / lv_growthPerSecond);
                if ((lv_estimatedGrowthIntervalsLeft != 0.0)) {
                    if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) >= (100.0 * UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0)))) {
                        UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0, (UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0) + ((1.0 - UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0)) / lv_estimatedGrowthIntervalsLeft)));
                        UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1, (UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1) + ((1.0 - UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1)) / lv_estimatedGrowthIntervalsLeft)));
                        UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2, (UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2) + ((1.0 - UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2)) / lv_estimatedGrowthIntervalsLeft)));
                        libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), libNtve_gf_SetScale(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2), 5.0));
                    }
                    else {
                    }
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
    else {
        UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrowTree_Init () {
    gt_GrowTree = TriggerCreate("gt_GrowTree_Func");
    TriggerAddEventPlayerEffectUsed(gt_GrowTree, c_playerAny, "GrowingTreeSetPeriodic");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FinishTree
//--------------------------------------------------------------------------------------------------
bool gt_FinishTree_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tree;
    int lv_i;
    int lv_t;
    // Variable Initialization
    lv_tree = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_i = FixedToInt(UnitGetCustomValue(lv_tree, 3));
    lv_t = gv_playerData[lv_i].lv_team;
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(lv_tree, 0, 1.0);
    UnitSetCustomValue(lv_tree, 1, 1.0);
    UnitSetCustomValue(lv_tree, 2, 1.0);
    if (gf_UnitExists(gv_playerData[lv_i].lv_kobold)) {
        gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
        if ((gv_skillForestry[lv_i] >= 25)) {
            UnitBehaviorAdd(gv_playerData[lv_i].lv_kobold, "ForestConnectionEnergy", gv_playerData[lv_i].lv_kobold, 1);
        }
        else {
        }
    }
    else {
    }
    if ((gv_questIndexActive == 4) && (lv_i != 0) && (lv_i != 15)) {
        gv_grownTreesTeam[lv_t] += 1;
        if ((gv_grownTreesTeam[lv_t] > gv_grownTreesTeam[gv_grownTreesLeadingTeam])) {
            gv_grownTreesLeadingTeam = lv_t;
        }
        else {
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FinishTree_Init () {
    gt_FinishTree = TriggerCreate("gt_FinishTree_Func");
    TriggerAddEventPlayerEffectUsed(gt_FinishTree, c_playerAny, "GrowingTreeRemove");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LightTorch
//--------------------------------------------------------------------------------------------------
bool gt_LightTorch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            UnitAbilityEnable(EventUnit(), "LightTorch", false);
            gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/CC7D7F41"), 2.0, 24);
            gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, "Torch", 1);
            if ((gv_tutorial == true)) {
                TriggerExecute(gt_TutorialPart13, true, false);
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LightTorch_Init () {
    gt_LightTorch = TriggerCreate("gt_LightTorch_Func");
    TriggerAddEventUnitAbility(gt_LightTorch, null, AbilityCommand("LightTorch", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TorchFade
//--------------------------------------------------------------------------------------------------
bool gt_TorchFade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_DropandRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TorchFade_Init () {
    gt_TorchFade = TriggerCreate("gt_TorchFade_Func");
    TriggerAddEventPlayerEffectUsed(gt_TorchFade, c_playerAny, "TorchTimedLifeTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FireWardTrigger
//--------------------------------------------------------------------------------------------------
bool gt_FireWardTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scarecrow;
    unit lv_animal;
    // Variable Initialization
    lv_scarecrow = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_animal = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_animal), RandomFixed(2.0, 5.0), (AngleBetweenPoints(UnitGetPosition(lv_scarecrow), UnitGetPosition(lv_animal)) + RandomFixed(-25.0, 25.0)))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FireWardTrigger_Init () {
    gt_FireWardTrigger = TriggerCreate("gt_FireWardTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_FireWardTrigger, c_playerAny, "FireWardTrigger");
    TriggerAddEventPlayerEffectUsed(gt_FireWardTrigger, c_playerAny, "FrightenWolvesAndBears");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildingSpawned
//--------------------------------------------------------------------------------------------------
bool gt_BuildingSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(lv_unit) == "Tent")) {
        gf_BuildTent(lv_unit);
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/4C346FC0"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/1ED03F8F"));
    }
    else if ((UnitGetType(lv_unit) == "CampfireLit")) {
        if ((UnitHasBehavior(lv_unit, "CampfireSpecialRequirement") == false)) {
            gf_BuildCampfire(lv_unit);
        }
        else {
        }
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/33584294"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/6C5D14D2"));
    }
    else if ((UnitGetType(lv_unit) == "Campfire")) {
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/42D872C9"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/31FD175A"));
    }
    else if ((UnitGetType(lv_unit) == "Farm")) {
        gf_BuildFarm(lv_unit);
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/D8D6DB7E"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/6F9904F1"));
    }
    else if ((UnitGetType(lv_unit) == "Workbench")) {
        gf_BuildWorkbench(lv_unit);
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/AC8DACCB"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/1DA559F0"));
    }
    else if ((UnitGetType(lv_unit) == "Smithy")) {
        gf_BuildSmithy(lv_unit);
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/38F34B63"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/CA784FC1"));
    }
    else if ((UnitGetType(lv_unit) == "Tavern")) {
        gf_BuildTavern(lv_unit);
        gf_TavernSpawn(lv_unit);
    }
    else if ((UnitGetType(lv_unit) == "StorageOutpost")) {
        gf_BuildOutpost(lv_unit);
        gf_UpdateOutpostVisual(lv_unit);
    }
    else if ((UnitGetType(lv_unit) == "SpikeTrap")) {
        gf_BuildSpikeTrap(lv_unit);
        TextExpressionSetToken("Param/Expression/87824D16", "A", gf_GetPlayerName(UnitGetOwner(lv_unit), 0));
        TextExpressionSetToken("Param/Expression/87824D16", "B", StringExternal("Param/Value/E75C755D"));
        TextExpressionSetToken("Param/Expression/87824D16", "C", IntToText(3));
        TextExpressionSetToken("Param/Expression/87824D16", "D", StringExternal("Param/Value/32FFFCB4"));
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/8AC1EBCD"), TextExpressionAssemble("Param/Expression/87824D16"), StringExternal("Param/Value/C77C63B7"));
    }
    else if ((UnitGetType(lv_unit) == "HuntersLodge")) {
        gf_BuildLodge(lv_unit);
        gf_HuntersLodgeSpawn(lv_unit);
    }
    else if ((UnitGetType(lv_unit) == "Palisade")) {
        gf_BuildPalisade(lv_unit);
    }
    else if ((UnitGetType(lv_unit) == "LorenorStatue")) {
        gf_BuildMonument(lv_unit);
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/DCFAF046"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/33FB3FB2"));
    }
    else if ((UnitGetType(lv_unit) == "AutomatedDefenseTurret")) {
        gf_BuildADT(lv_unit);
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/003026CA"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/5412A87E"));
    }
    else if ((UnitGetType(lv_unit) == "Fortress")) {
        gf_BuildWatchTower(lv_unit);
        UnitSetInfoText(lv_unit, StringExternal("Param/Value/60818C49"), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal("Param/Value/95E98650"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuildingSpawned_Init () {
    gt_BuildingSpawned = TriggerCreate("gt_BuildingSpawned_Func");
    TriggerAddEventPlayerEffectUsed(gt_BuildingSpawned, c_playerAny, "UpdateBuildingTooltip");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ConstructionStart
//--------------------------------------------------------------------------------------------------
bool gt_ConstructionStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/8F52C2B6"), false);
    UnitBehaviorAdd(EventUnit(), "Constructing", EventUnit(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ConstructionStart_Init () {
    gt_ConstructionStart = TriggerCreate("gt_ConstructionStart_Func");
    TriggerAddEventUnitConstructProgress(gt_ConstructionStart, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(gt_ConstructionStart, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ConstructionStop
//--------------------------------------------------------------------------------------------------
bool gt_ConstructionStop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/215C7D83"), false);
    UnitBehaviorRemove(gv_playerData[UnitGetOwner(EventUnitProgressUnit())].lv_kobold, "Constructing", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ConstructionStop_Init () {
    gt_ConstructionStop = TriggerCreate("gt_ConstructionStop_Func");
    TriggerAddEventUnitConstructProgress(gt_ConstructionStop, null, c_unitProgressStageCancel);
    TriggerAddEventUnitConstructProgress(gt_ConstructionStop, null, c_unitProgressStagePause);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuildingFinish
//--------------------------------------------------------------------------------------------------
bool gt_BuildingFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    // Actions
    if (!runActions) {
        return true;
    }
    gv_playerData[lv_i].lv_gameStats.lv_buildingsCreated += 1;
    if ((UnitGetType(EventUnitProgressUnit()) == "Palisade")) {
        gf_StaminaOnCraft(EventUnit());
        gf_AddExperience(EventUnit(), 10.0);
        if (gf_RewardCatIndexActive(lv_i, 3, 5)) {
            UnitBehaviorAdd(EventUnitProgressUnit(), "PalisadeCandle", EventUnitProgressUnit(), 1);
        }
        else {
        }
        gf_PalisadeMutability(EventUnitProgressUnit(), UnitGroupEmpty(), 1);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "AutomatedDefenseTurret")) {
        gf_StaminaOnCraft(EventUnit());
        gf_AddExperience(EventUnit(), 25.0);
        UnitSetCustomValue(EventUnitProgressUnit(), 0, IntToFixed(lv_i));
        UnitSetCustomValue(EventUnitProgressUnit(), 1, 5.0);
        UnitSetCustomValue(EventUnitProgressUnit(), 2, IntToFixed(gv_aDTIndex[lv_i]));
        UnitSetCustomValue(EventUnitProgressUnit(), 3, 5.0);
        gf_ADTUpdateAmmo(EventUnitProgressUnit());
        UnitBehaviorAdd(EventUnitProgressUnit(), "FullAmmo", EventUnitProgressUnit(), 1);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "Fortress")) {
        gf_StaminaOnCraft(EventUnit());
        gf_AddExperience(EventUnit(), 500.0);
        UnitBehaviorRemove(EventUnitProgressUnit(), "WatchTowerConstruction", 1);
        gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTower = EventUnitProgressUnit();
        gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder = 0;
        UnitSetCustomValue(EventUnitProgressUnit(), 1, 20.0);
        UnitBehaviorAdd(EventUnitProgressUnit(), "WatchTowerFullAmmo", EventUnitProgressUnit(), 1);
        gf_WTUpdateTooltip(EventUnitProgressUnit());
        UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Fortress", "", "", lv_i, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != EventUnitProgressUnit())) {
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "KillWithDamage", UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopBegin(gv_teamData[gv_playerData[lv_i].lv_team].lv_members);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold)) {
                UnitBehaviorRemove(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, "CanBuildWatchTower", 1);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/FFA4F132")));
        if ((gv_activeTeams == 2)) {
            TextExpressionSetToken("Param/Expression/D2C5DE96", "A", TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            TextExpressionSetToken("Param/Expression/D2C5DE96", "B", StringExternal("Param/Value/49DCE854"));
            TextExpressionSetToken("Param/Expression/D2C5DE96", "C", gf_GetTribeTextOfPlayer(lv_i));
            TextExpressionSetToken("Param/Expression/D2C5DE96", "D", StringExternal("Param/Value/49D69BFF"));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupEnemy, lv_i), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D2C5DE96"));
        }
        else {
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupEnemy, lv_i), c_messageAreaSubtitle, StringExternal("Param/Value/5C52EEF7"));
        }
        SoundPlay(SoundLink("WatchTowerWhat", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_WatchTowerTimerStart, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuildingFinish_Init () {
    gt_BuildingFinish = TriggerCreate("gt_BuildingFinish_Func");
    TriggerAddEventUnitConstructProgress(gt_BuildingFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StructureDeath
//--------------------------------------------------------------------------------------------------
bool gt_StructureDeath_Func (bool testConds, bool runActions) {
    string autoD68E5C8F_val;
    // Variable Declarations
    fixed lv_angle;
    unit lv_destroyer;
    unit lv_structure;
    string lv_type;
    fixed lv_xP;
    // Variable Initialization
    lv_destroyer = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_structure = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_type = UnitGetType(lv_structure);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetState(lv_structure, c_unitStateIgnoreTerrainZ, true);
    UnitSetState(lv_structure, c_unitStateTooltipable, false);
    UnitSetState(lv_structure, c_unitStateCursorable, false);
    UnitSetState(lv_structure, c_unitStateStatusBar, false);
    UnitSetState(lv_structure, c_unitStateRadarable, false);
    UnitSetHeight(lv_structure, WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)), 0.0);
    autoD68E5C8F_val = lv_type;
    if (autoD68E5C8F_val == "Fortress") {
        lv_xP = 1000.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 5.0), 10.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustMassive", UnitGetPosition(lv_structure));
        UnitCreateEffectPoint(lv_structure, "StructureDeathSoundMassivePersistent", UnitGetPosition(lv_structure));
        UnitCreateEffectPoint(lv_structure, "WatchTowerDeathSound", UnitGetPosition(lv_structure));
        gf_DropAllItems(lv_structure);
        if ((UnitHasBehavior(lv_structure, "WatchTowerConstruction") == false) && (lv_structure == gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lv_structure))].lv_watchTower)) {
            TextExpressionSetToken("Param/Expression/491757B4", "B", gf_GetTribeTextOfTeam(gf_GetTeamOfPlayer(UnitGetOwner(lv_structure))));
            TextExpressionSetToken("Param/Expression/491757B4", "C", StringExternal("Param/Value/C4BFC4D1"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/491757B4"));
            SoundPlay(SoundLink("UI_TerranMissionFailed", 0), PlayerGroupAll(), 100.0, 0.0);
            gf_WatchTowerDefeatTeam(gf_GetTeamOfPlayer(UnitGetOwner(lv_structure)));
        }
        else {
        }
    }
    else if (autoD68E5C8F_val == "LorenorStatue") {
        lv_xP = 100.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.5), 3.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustLarge", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "HuntersLodge") {
        lv_xP = 100.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.0), 3.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustLarge", UnitGetPosition(lv_structure));
        UnitBehaviorRemove(lv_structure, "AntlersStack", 100);
        UnitBehaviorRemove(lv_structure, "BoneTalismanStack", 100);
        UnitBehaviorRemove(lv_structure, "TrollNoseBoneStack", 100);
        UnitBehaviorRemove(lv_structure, "WhiteBearToothStack", 100);
    }
    else if (autoD68E5C8F_val == "Tavern") {
        lv_xP = 75.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 4.0), 3.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustLarge", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "Tent") {
        lv_xP = 50.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 3.5), 3.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustLarge", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "StorageOutpost") {
        lv_xP = 100.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 3.0), 3.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustLarge", UnitGetPosition(lv_structure));
        UnitCreateEffectPoint(lv_structure, "ShooBirds", UnitGetPosition(lv_structure));
        gf_DropAllItems(lv_structure);
    }
    else if (autoD68E5C8F_val == "Smithy") {
        lv_xP = 50.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 1.25), 2.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustMedium", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "Farm") {
        lv_xP = 50.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 1.8), 2.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustMedium", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "Trebuchet") {
        lv_xP = 50.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.5), 2.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustMedium", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "AutomatedDefenseTurret") {
        lv_xP = 50.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.5), 2.0);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustMedium", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "Workbench") {
        lv_xP = 50.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 0.75), 1.5);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustSmall", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "Palisade") {
        lv_xP = 25.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 1.5), 1.5);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustSmall", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "PalisadeGateClosed") {
        lv_xP = 25.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.0), 1.5);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustSmall", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "PalisadeGateOpen") {
        lv_xP = 25.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.0), 1.5);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustSmall", UnitGetPosition(lv_structure));
    }
    else if (autoD68E5C8F_val == "Campfire") {
        lv_xP = 25.0;
        UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 1.25), 1.5);
        UnitCreateEffectPoint(lv_structure, "StructureDeathDustSmall", UnitGetPosition(lv_structure));
    }
    else {
    }
    if ((UnitGetOwner(lv_destroyer) != UnitGetOwner(lv_structure))) {
        gf_AddExperience(lv_destroyer, lv_xP);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StructureDeath_Init () {
    gt_StructureDeath = TriggerCreate("gt_StructureDeath_Func");
    TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, "StructureDeathAnimationSmallApply");
    TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, "StructureDeathAnimationMediumApply");
    TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, "StructureDeathAnimationLargeApply");
    TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, "StructureDeathAnimationMassiveApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: KoboldBuildFacing
//--------------------------------------------------------------------------------------------------
bool gt_KoboldBuildFacing_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(0.125, c_timeGame);
    UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster), AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))), 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_KoboldBuildFacing_Init () {
    gt_KoboldBuildFacing = TriggerCreate("gt_KoboldBuildFacing_Func");
    TriggerAddEventPlayerEffectUsed(gt_KoboldBuildFacing, c_playerAny, "KoboldTestBuildFacing");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpringSpikeTrap
//--------------------------------------------------------------------------------------------------
bool gt_SpringSpikeTrap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trap;
    unit lv_target;
    int lv_charges;
    fixed lv_height;
    // Variable Initialization
    lv_trap = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_charges = UnitBehaviorCount(lv_trap, "SpikeTrapCharges");
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetInfoText(lv_trap, StringExternal("Param/Value/40A34C46"), (gf_GetPlayerName(UnitGetOwner(lv_trap), 0) + gf_SpikeTrapSuffix(lv_charges)), StringExternal("Param/Value/BFA7AACE"));
    gv_playerData[UnitGetOwner(lv_trap)].lv_gameStats.lv_trapsTriggered += 1;
    gf_AddExperience(lv_trap, 2.0);
    if ((UnitFilterMatch(lv_target, UnitGetOwner(lv_target), UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
        gf_Upyougo(lv_target, 0.45);
    }
    else {
        gf_Upyougo(lv_target, 0.65);
    }
    lv_height = 1.5;
    libNtve_gf_SendActorMessageToUnit(lv_trap, libNtve_gf_SetHeight(lv_height));
    if ((gv_skillArtisanship[UnitGetOwner(lv_trap)] >= 20)) {
        UnitBehaviorAdd(lv_target, "ArmorShredSpikeTrap", lv_trap, 1);
        UnitBehaviorAdd(lv_target, "SlowSpikeTrap", lv_trap, 1);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    while ((lv_height > 0.0)) {
        lv_height -= 0.1;
        libNtve_gf_SendActorMessageToUnit(lv_trap, libNtve_gf_SetHeight(lv_height));
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(lv_trap, libNtve_gf_SetHeight(0.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpringSpikeTrap_Init () {
    gt_SpringSpikeTrap = TriggerCreate("gt_SpringSpikeTrap_Func");
    TriggerAddEventPlayerEffectUsed(gt_SpringSpikeTrap, c_playerAny, "SpikeTrapDamage");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpikeTrapDepleted
//--------------------------------------------------------------------------------------------------
bool gt_SpikeTrapDepleted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpikeTrapDepleted_Init () {
    gt_SpikeTrapDepleted = TriggerCreate("gt_SpikeTrapDepleted_Func");
    TriggerAddEventPlayerEffectUsed(gt_SpikeTrapDepleted, c_playerAny, "SpikeTrapApplyDull");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SharpenSpike
//--------------------------------------------------------------------------------------------------
bool gt_SharpenSpike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1)) {
            if ((UnitBehaviorCount(EventUnit(), "SpikeTrapCharges") < 3)) {
                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_stone, 1));
                gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
                UnitCreateEffectUnit(EventUnit(), "SpikeTrapSharpen", EventUnit());
                UnitSetCustomValue(EventUnit(), 0, 1.0);
                TextExpressionSetToken("Param/Expression/9EABA2C5", "A", gf_GetPlayerName(UnitGetOwner(EventUnit()), 0));
                TextExpressionSetToken("Param/Expression/9EABA2C5", "B", StringExternal("Param/Value/ADA8273D"));
                TextExpressionSetToken("Param/Expression/9EABA2C5", "C", IntToText(3));
                TextExpressionSetToken("Param/Expression/9EABA2C5", "D", StringExternal("Param/Value/3E48DF61"));
                UnitSetInfoText(EventUnit(), StringExternal("Param/Value/3D83489C"), TextExpressionAssemble("Param/Expression/9EABA2C5"), StringExternal("Param/Value/1E370A55"));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SharpenSpike_Init () {
    gt_SharpenSpike = TriggerCreate("gt_SharpenSpike_Func");
    TriggerAddEventUnitAbility(gt_SharpenSpike, null, AbilityCommand("Sharpen", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpikeTrapPadding
//--------------------------------------------------------------------------------------------------
bool gt_SpikeTrapPadding_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) >= 1)) {
            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_wool, 1));
            gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
            UnitAbilityEnable(EventUnit(), "WoolPadding", false);
            UnitBehaviorAdd(EventUnit(), "WoolPadding", EventUnit(), 1);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpikeTrapPadding_Init () {
    gt_SpikeTrapPadding = TriggerCreate("gt_SpikeTrapPadding_Func");
    TriggerAddEventUnitAbility(gt_SpikeTrapPadding, null, AbilityCommand("WoolPadding", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LightCampfire
//--------------------------------------------------------------------------------------------------
bool gt_LightCampfire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lumber, 1));
            gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
            UnitCreateEffectUnit(EventUnit(), "LightCampfireSet", EventUnit());
            SoundPlayOnUnit(SoundLink("CampfireRefresh", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LightCampfire_Init () {
    gt_LightCampfire = TriggerCreate("gt_LightCampfire_Func");
    TriggerAddEventUnitAbility(gt_LightCampfire, null, AbilityCommand("LightCampfire", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LightCampfireSelect
//--------------------------------------------------------------------------------------------------
bool gt_LightCampfireSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitClearSelection(lv_i);
    UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_i, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LightCampfireSelect_Init () {
    gt_LightCampfireSelect = TriggerCreate("gt_LightCampfireSelect_Func");
    TriggerAddEventPlayerEffectUsed(gt_LightCampfireSelect, c_playerAny, "LightCampfireSelect");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnitSelected
//--------------------------------------------------------------------------------------------------
bool gt_UnitSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) != EventPlayer()))) {
            return false;
        }
        if (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius))) {
            return false;
        }
        if (!((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", EventPlayer(), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), gv_interactRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "Campfire")) {
        UnitSetOwner(EventUnit(), EventPlayer(), false);
        UnitSetInfoText(EventUnit(), StringExternal("Param/Value/4F7FBFD1"), gf_GetPlayerName(EventPlayer(), 0), StringExternal("Param/Value/90B989A5"));
        gf_Quicktag(EventUnit(), StringExternal("Param/Value/5703B049"), 2.0, 24);
    }
    else if ((UnitGetType(EventUnit()) == "LorenorStatue") && (UnitGetOwner(EventUnit()) == 0)) {
        UnitSetOwner(EventUnit(), EventPlayer(), false);
        UnitSetInfoText(EventUnit(), StringExternal("Param/Value/C0C94206"), gf_GetPlayerName(EventPlayer(), 0), StringExternal("Param/Value/FCE89BBD"));
        gf_Quicktag(EventUnit(), StringExternal("Param/Value/FC7A1BA9"), 3.0, 24);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitSelected_Init () {
    gt_UnitSelected = TriggerCreate("gt_UnitSelected_Func");
    TriggerAddEventUnitSelected(gt_UnitSelected, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RefreshCampfire2
//--------------------------------------------------------------------------------------------------
bool gt_RefreshCampfire_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RefreshCampfire(EventUnit(), EventPlayer(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RefreshCampfire_Init () {
    gt_RefreshCampfire = TriggerCreate("gt_RefreshCampfire_Func");
    TriggerAddEventUnitAbility(gt_RefreshCampfire, null, AbilityCommand("RefreshCampfire", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RefershCampfireExpert
//--------------------------------------------------------------------------------------------------
bool gt_RefreshCampfireExpert_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RefreshCampfire(EventUnit(), EventPlayer(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RefreshCampfireExpert_Init () {
    gt_RefreshCampfireExpert = TriggerCreate("gt_RefreshCampfireExpert_Func");
    TriggerAddEventUnitAbility(gt_RefreshCampfireExpert, null, AbilityCommand("RefreshCampfireExpert", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ADTLaunch
//--------------------------------------------------------------------------------------------------
bool gt_ADTLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_turret;
    // Variable Initialization
    lv_turret = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(lv_turret, 1, (UnitGetCustomValue(lv_turret, 1) - 1.0));
    UnitBehaviorRemove(lv_turret, "FullAmmo", 1);
    gf_ADTUpdateAmmo(lv_turret);
    if ((UnitGetCustomValue(lv_turret, 1) == 0.0)) {
        gf_Alltag(null, StringExternal("Param/Value/464A45DA"), 2.0, 28);
        UnitBehaviorAdd(lv_turret, "TurretOutOfAmmo", lv_turret, 1);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ADTLaunch_Init () {
    gt_ADTLaunch = TriggerCreate("gt_ADTLaunch_Func");
    TriggerAddEventPlayerEffectUsed(gt_ADTLaunch, c_playerAny, "AutomatedDefenseTurretLM");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ADTRefill
//--------------------------------------------------------------------------------------------------
bool gt_ADTRefil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_refillamount;
    fixed lv_maxammo;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_maxammo = UnitGetCustomValue(EventUnit(), 3);
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_ironOre, 1));
            lv_refillamount = libNtve_gf_ArithmeticRealClamp((lv_maxammo - UnitGetCustomValue(EventUnit(), 1)), 0.0, 5.0);
            UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + lv_refillamount));
            UnitBehaviorRemove(EventUnit(), "TurretOutOfAmmo", 1);
            TextExpressionSetToken("Param/Expression/1949A52A", "A", StringExternal("Param/Value/A7A0ADB8"));
            TextExpressionSetToken("Param/Expression/1949A52A", "B", FixedToText(lv_refillamount, 0));
            TextExpressionSetToken("Param/Expression/1949A52A", "C", StringExternal("Param/Value/30E5DF7D"));
            gf_Advancedtag(EventUnit(), lv_i, TextExpressionAssemble("Param/Expression/1949A52A"), 3.0, 28);
            SoundPlayOnUnit(SoundLink("CraftingStart", -1), PlayerGroupSingle(lv_i), EventUnit(), 0.0, 100.0, 0.0);
            if ((UnitGetCustomValue(EventUnit(), 1) == lv_maxammo)) {
                UnitBehaviorAdd(EventUnit(), "FullAmmo", EventUnit(), 1);
            }
            else {
            }
            gf_ADTUpdateAmmo(EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ADTRefil_Init () {
    gt_ADTRefil = TriggerCreate("gt_ADTRefil_Func");
    TriggerAddEventUnitAbility(gt_ADTRefil, null, AbilityCommand("RefillAmmunition", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PalisadeGateCreate
//--------------------------------------------------------------------------------------------------
bool gt_PalisadeGateCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_c;
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) >= 1)) {
            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lumber, 1));
            libNtve_gf_ReplaceUnit(EventUnit(), "PalisadeGateOpen", 1);
            if ((DistanceBetweenPoints(UnitGetPosition(gv_playerData[lv_i].lv_kobold), UnitGetPosition(EventUnit())) > DistanceBetweenPoints(UnitGetPosition(gv_playerData[lv_i].lv_kobold), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.25, UnitGetFacing(EventUnit()))))) {
                UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, 1.0);
            }
            else {
                UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, 0.0);
            }
            SoundPlayOnUnit(SoundLink("CraftingStart", -1), PlayerGroupSingle(lv_i), libNtve_gf_LastReplacedUnit(), 0.0, 100.0, 0.0);
            gf_AddExperience(libNtve_gf_LastReplacedUnit(), 20.0);
            gf_PalisadeMutability(libNtve_gf_LastReplacedUnit(), UnitGroupEmpty(), 1);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PalisadeGateCreate_Init () {
    gt_PalisadeGateCreate = TriggerCreate("gt_PalisadeGateCreate_Func");
    TriggerAddEventUnitAbility(gt_PalisadeGateCreate, null, AbilityCommand("CreatePalisadeGate", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FastFood
//--------------------------------------------------------------------------------------------------
bool gt_FastFood_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_food;
    unit lv_thisbeeating;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_food = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "KoboldCanEat") == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_food = UnitInventoryGroup(EventUnit());
    if ((UnitGroupCount(UnitGroupFilter("WaterScorpion", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("WaterScorpion", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(UnitGroupFilter("SmokedLambSirloin", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("SmokedLambSirloin", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_beerPhez, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_beerPhez, 1);
    }
    else if ((UnitGroupCount(UnitGroupFilter("RoastedPheasantWithBerrySauce", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("RoastedPheasantWithBerrySauce", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(UnitGroupFilter("AlbinoCavefish", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("AlbinoCavefish", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(UnitGroupFilter("StagStew", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("StagStew", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lambFeast, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lambFeast, 1);
    }
    else if ((UnitGroupCount(UnitGroupFilter("SlipperyEel", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("SlipperyEel", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfEntrecote, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_wolfEntrecote, 1);
    }
    else if ((UnitGroupCount(UnitGroupFilter("GiantSunfish", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("GiantSunfish", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(UnitGroupFilter("HighlandGuppy", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("HighlandGuppy", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_roastedLamb, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_roastedLamb, 1);
    }
    else if ((UnitGroupCount(UnitGroupFilter("RawStagMeat", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("RawStagMeat", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(UnitGroupFilter("ForestTrout", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("ForestTrout", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfSteak, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_wolfSteak, 1);
    }
    else if ((UnitGroupCount(UnitGroupFilter("FireAmmonite", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("FireAmmonite", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(UnitGroupFilter("JewelDanio", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("JewelDanio", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(UnitGroupFilter("BlindRainfish", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("BlindRainfish", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_beer, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_beer, 1);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, 1);
    }
    else if ((UnitGroupCount(UnitGroupFilter("StripedLurker", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter("StripedLurker", c_playerAny, lv_food, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_rawPheasant, 1);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawWolf, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_rawWolf, 1);
    }
    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawLamb, c_unitCountAlive) > 0)) {
        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_rawLamb, 1);
    }
    if ((lv_thisbeeating == null)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/9DAE2012"));
    }
    else {
        gf_EatFood(EventUnit(), lv_thisbeeating, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FastFood_Init () {
    gt_FastFood = TriggerCreate("gt_FastFood_Func");
    TriggerAddEventUnitAbility(gt_FastFood, null, AbilityCommand("Eatasnack", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RoastedLamb
//--------------------------------------------------------------------------------------------------
bool gt_RoastedLamb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawLamb, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 1)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "RoastedLamb", 5.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RoastedLamb_Init () {
    gt_RoastedLamb = TriggerCreate("gt_RoastedLamb_Func");
    TriggerAddEventUnitAbility(gt_RoastedLamb, null, AbilityCommand("CookingRoastedLamb", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpicedLambFeast
//--------------------------------------------------------------------------------------------------
bool gt_SpicedLambFeast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawLamb, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "SpicedLambFeast", 10.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpicedLambFeast_Init () {
    gt_SpicedLambFeast = TriggerCreate("gt_SpicedLambFeast_Func");
    TriggerAddEventUnitAbility(gt_SpicedLambFeast, null, AbilityCommand("CookingSpicedLambFeast", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmokedLambSirloin
//--------------------------------------------------------------------------------------------------
bool gt_SmokedLambSirloin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawLamb, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "SmokedLambSirloin", 25.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmokedLambSirloin_Init () {
    gt_SmokedLambSirloin = TriggerCreate("gt_SmokedLambSirloin_Func");
    TriggerAddEventUnitAbility(gt_SmokedLambSirloin, null, AbilityCommand("CookingSmokedLambSirloin", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RoastedPheasant
//--------------------------------------------------------------------------------------------------
bool gt_RoastedPheasant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawPheasant, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_handfulofBerries, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "RoastedPheasantWithBerrySauce", 8.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RoastedPheasant_Init () {
    gt_RoastedPheasant = TriggerCreate("gt_RoastedPheasant_Func");
    TriggerAddEventUnitAbility(gt_RoastedPheasant, null, AbilityCommand("CookingRoastedPheasantWithBlueberrySauce", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BeerBraisedPheasant
//--------------------------------------------------------------------------------------------------
bool gt_BeerBraisedPheasant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawPheasant, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_beer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "BeerBraisedPheasant", 18.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BeerBraisedPheasant_Init () {
    gt_BeerBraisedPheasant = TriggerCreate("gt_BeerBraisedPheasant_Func");
    TriggerAddEventUnitAbility(gt_BeerBraisedPheasant, null, AbilityCommand("CookingBeerBraisedPheasant", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WolfSteak
//--------------------------------------------------------------------------------------------------
bool gt_WolfSteak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawWolf, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 1)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "WolfSteak", 6.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WolfSteak_Init () {
    gt_WolfSteak = TriggerCreate("gt_WolfSteak_Func");
    TriggerAddEventUnitAbility(gt_WolfSteak, null, AbilityCommand("CookingWolfSteak", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GrilledWolfEntrecote
//--------------------------------------------------------------------------------------------------
bool gt_GrilledWolfEntrecote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawWolf, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "GrilledWolfEntrecote", 12.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrilledWolfEntrecote_Init () {
    gt_GrilledWolfEntrecote = TriggerCreate("gt_GrilledWolfEntrecote_Func");
    TriggerAddEventUnitAbility(gt_GrilledWolfEntrecote, null, AbilityCommand("CookingGrilledWolfEntrecote", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StagStew
//--------------------------------------------------------------------------------------------------
bool gt_StagStew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawStag, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_handfulofBerries, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "StagStew", 30.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StagStew_Init () {
    gt_StagStew = TriggerCreate("gt_StagStew_Func");
    TriggerAddEventUnitAbility(gt_StagStew, null, AbilityCommand("CookingStagStew", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CleansingDraught
//--------------------------------------------------------------------------------------------------
bool gt_CleansingDraught_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    lv_bank = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gf_GetCookingNode(EventUnit())) && (gf_UnitIsBusy(EventUnit()) == false)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sageberries, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
            UnitGroupLoopBegin(lv_bank);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_DropandRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_Cooking(EventUnit(), "CleansingDraught", 10.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CleansingDraught_Init () {
    gt_CleansingDraught = TriggerCreate("gt_CleansingDraught_Func");
    TriggerAddEventUnitAbility(gt_CleansingDraught, null, AbilityCommand("CookingCleansingDraught", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WellFedEnduranceInit
//--------------------------------------------------------------------------------------------------
bool gt_WellFedEnduranceInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 5.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WellFedEnduranceInit_Init () {
    gt_WellFedEnduranceInit = TriggerCreate("gt_WellFedEnduranceInit_Func");
    TriggerAddEventPlayerEffectUsed(gt_WellFedEnduranceInit, c_playerAny, "WellFedEnduranceInitial");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WellFedEnduranceExp
//--------------------------------------------------------------------------------------------------
bool gt_WellFedEnduranceExp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 5.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WellFedEnduranceExp_Init () {
    gt_WellFedEnduranceExp = TriggerCreate("gt_WellFedEnduranceExp_Func");
    TriggerAddEventPlayerEffectUsed(gt_WellFedEnduranceExp, c_playerAny, "WellFedEnduranceExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WellFedStrengthInit
//--------------------------------------------------------------------------------------------------
bool gt_WellFedStrengthInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 5.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WellFedStrengthInit_Init () {
    gt_WellFedStrengthInit = TriggerCreate("gt_WellFedStrengthInit_Func");
    TriggerAddEventPlayerEffectUsed(gt_WellFedStrengthInit, c_playerAny, "WellFedStrengthInitial");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WellFedStrengthExp
//--------------------------------------------------------------------------------------------------
bool gt_WellFedStrengthExp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 5.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WellFedStrengthExp_Init () {
    gt_WellFedStrengthExp = TriggerCreate("gt_WellFedStrengthExp_Func");
    TriggerAddEventPlayerEffectUsed(gt_WellFedStrengthExp, c_playerAny, "WellFedStrengthExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WellFedDexInit
//--------------------------------------------------------------------------------------------------
bool gt_WellFedDexInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 5.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WellFedDexInit_Init () {
    gt_WellFedDexInit = TriggerCreate("gt_WellFedDexInit_Func");
    TriggerAddEventPlayerEffectUsed(gt_WellFedDexInit, c_playerAny, "WellFedDexInitial");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WellFedDexExp
//--------------------------------------------------------------------------------------------------
bool gt_WellFedDexExp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 5.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WellFedDexExp_Init () {
    gt_WellFedDexExp = TriggerCreate("gt_WellFedDexExp_Func");
    TriggerAddEventPlayerEffectUsed(gt_WellFedDexExp, c_playerAny, "WellFedDexExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WellFedBeerInit
//--------------------------------------------------------------------------------------------------
bool gt_WellFedBeerInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 2.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WellFedBeerInit_Init () {
    gt_WellFedBeerInit = TriggerCreate("gt_WellFedBeerInit_Func");
    TriggerAddEventPlayerEffectUsed(gt_WellFedBeerInit, c_playerAny, "WellFedBeerInitial");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WellFedBeerExp
//--------------------------------------------------------------------------------------------------
bool gt_WellFedBeerExp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 2.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WellFedBeerExp_Init () {
    gt_WellFedBeerExp = TriggerCreate("gt_WellFedBeerExp_Func");
    TriggerAddEventPlayerEffectUsed(gt_WellFedBeerExp, c_playerAny, "WellFedBeerExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnlivingStrengthInit
//--------------------------------------------------------------------------------------------------
bool gt_UnlivingStrengthInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 10.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnlivingStrengthInit_Init () {
    gt_UnlivingStrengthInit = TriggerCreate("gt_UnlivingStrengthInit_Func");
    TriggerAddEventPlayerEffectUsed(gt_UnlivingStrengthInit, c_playerAny, "UnlivingStrengthInitial");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnlivingStrengthExp
//--------------------------------------------------------------------------------------------------
bool gt_UnlivingStrengthExp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 10.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnlivingStrengthExp_Init () {
    gt_UnlivingStrengthExp = TriggerCreate("gt_UnlivingStrengthExp_Func");
    TriggerAddEventPlayerEffectUsed(gt_UnlivingStrengthExp, c_playerAny, "UnlivingStrengthExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HappyChefInit
//--------------------------------------------------------------------------------------------------
bool gt_HappyChefInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 5.0), 0));
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 25.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    gf_UpdateCooking(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HappyChefInit_Init () {
    gt_HappyChefInit = TriggerCreate("gt_HappyChefInit_Func");
    TriggerAddEventPlayerEffectUsed(gt_HappyChefInit, c_playerAny, "CookingExpertiseIIIInitial");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HappyChefExp
//--------------------------------------------------------------------------------------------------
bool gt_HappyChefExp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_temp;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 5.0), 0));
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    CatalogFieldValueSet(c_gameCatalogEffect, "CheffingStats", "AttributeBonus[Biological]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 25.0), 0));
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    gf_UpdateCooking(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HappyChefExp_Init () {
    gt_HappyChefExp = TriggerCreate("gt_HappyChefExp_Func");
    TriggerAddEventPlayerEffectUsed(gt_HappyChefExp, c_playerAny, "CookingExpertiseIIIFinal");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchWarmWoolTunic
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchWarmWoolTunic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "WarmWoolTunic", 12.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchWarmWoolTunic_Init () {
    gt_WorkbenchWarmWoolTunic = TriggerCreate("gt_WorkbenchWarmWoolTunic_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchWarmWoolTunic, null, AbilityCommand("CraftWarmWoolTunic", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchLeatherCoat
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchLeatherCoat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 5)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "LeatherCoat", 24.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchLeatherCoat_Init () {
    gt_WorkbenchLeatherCoat = TriggerCreate("gt_WorkbenchLeatherCoat_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchLeatherCoat, null, AbilityCommand("CraftLeatherCoat", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchSturdyWoodenStick
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchSturdyWoodenStick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    if ((gv_tutorial == true)) {
                        gf_ShowTutorialText(37);
                    }
                    else {
                    }
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "SturdyWoodenStick", 18.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchSturdyWoodenStick_Init () {
    gt_WorkbenchSturdyWoodenStick = TriggerCreate("gt_WorkbenchSturdyWoodenStick_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchSturdyWoodenStick, null, AbilityCommand("CraftSturdyWoodenStick", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchMysticsTribalShield
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchMysticsTribalShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 5)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "MysticsTribalShield", 25.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchMysticsTribalShield_Init () {
    gt_WorkbenchMysticsTribalShield = TriggerCreate("gt_WorkbenchMysticsTribalShield_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchMysticsTribalShield, null, AbilityCommand("CraftMysticsTribalShield", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchLantern
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchLantern_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "Lantern", 20.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchLantern_Init () {
    gt_WorkbenchLantern = TriggerCreate("gt_WorkbenchLantern_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchLantern, null, AbilityCommand("CraftLantern", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchBlunderbuss
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchBlunderbuss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 5)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "RoughBlunderbuss", 24.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchBlunderbuss_Init () {
    gt_WorkbenchBlunderbuss = TriggerCreate("gt_WorkbenchBlunderbuss_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchBlunderbuss, null, AbilityCommand("CraftRoughBlunderbuss", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchVengefulMurlocSkull
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchVengefulMurlocSkull_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 15)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkulls, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "VengefulMurlocSkull", 18.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchVengefulMurlocSkull_Init () {
    gt_WorkbenchVengefulMurlocSkull = TriggerCreate("gt_WorkbenchVengefulMurlocSkull_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchVengefulMurlocSkull, null, AbilityCommand("CraftVengefulMurlocSkull", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchElderWand
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchElderWand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 15)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "ElderWand", 38.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchElderWand_Init () {
    gt_WorkbenchElderWand = TriggerCreate("gt_WorkbenchElderWand_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchElderWand, null, AbilityCommand("CraftElderWand", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchEnigmaticStaff
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchEnigmaticStaff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 10)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "EnigmaticStaff", 32.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchEnigmaticStaff_Init () {
    gt_WorkbenchEnigmaticStaff = TriggerCreate("gt_WorkbenchEnigmaticStaff_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchEnigmaticStaff, null, AbilityCommand("CraftEnigmaticStaff", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchHuntsmansJacket
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchHuntsmansJacket_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 5)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "HuntsmansJacket", 24.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchHuntsmansJacket_Init () {
    gt_WorkbenchHuntsmansJacket = TriggerCreate("gt_WorkbenchHuntsmansJacket_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchHuntsmansJacket, null, AbilityCommand("CraftHuntsmansJacket", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchVenomousArbalest
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchVenomousArbalest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 25)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 7)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "VenomousArbalest", 60.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchVenomousArbalest_Init () {
    gt_WorkbenchVenomousArbalest = TriggerCreate("gt_WorkbenchVenomousArbalest_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchVenomousArbalest, null, AbilityCommand("CraftVenomousArbalest", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchBearShamansShroud
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchBearShamansShroud_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 15)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sageberries, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "BearShamansShroud", 45.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchBearShamansShroud_Init () {
    gt_WorkbenchBearShamansShroud = TriggerCreate("gt_WorkbenchBearShamansShroud_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchBearShamansShroud, null, AbilityCommand("CraftBearShamansShroud", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchLightLeatherShield
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchLightLeatherShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "LightLeatherShield", 13.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchLightLeatherShield_Init () {
    gt_WorkbenchLightLeatherShield = TriggerCreate("gt_WorkbenchLightLeatherShield_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchLightLeatherShield, null, AbilityCommand("CraftLightLeatherShield", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchCelestialOrb
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchCelestialOrb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 5)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "CelestialOrb", 25.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchCelestialOrb_Init () {
    gt_WorkbenchCelestialOrb = TriggerCreate("gt_WorkbenchCelestialOrb_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchCelestialOrb, null, AbilityCommand("CraftCelestialOrb", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchWarlocksVestments
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchWarlocksVestments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 10)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawLamb, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawStag, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sageberries, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 8)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "WarlocksVestments", 35.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchWarlocksVestments_Init () {
    gt_WorkbenchWarlocksVestments = TriggerCreate("gt_WorkbenchWarlocksVestments_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchWarlocksVestments, null, AbilityCommand("CraftWarlocksVestments", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchHighRangersChainmail
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchHighRangersChainmail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 20)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_huntsmansJackets, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "MasterRangersMaille", 50.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchHighRangersChainmail_Init () {
    gt_WorkbenchHighRangersChainmail = TriggerCreate("gt_WorkbenchHighRangersChainmail_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchHighRangersChainmail, null, AbilityCommand("CraftMasterRangersMaille", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchGravesingersClaw
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchGravesingersClaw_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 20)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "GravesingersClaw", 44.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchGravesingersClaw_Init () {
    gt_WorkbenchGravesingersClaw = TriggerCreate("gt_WorkbenchGravesingersClaw_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchGravesingersClaw, null, AbilityCommand("CraftGravesingersClaw", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchRepeatingCrossbow
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchRepeatingCrossbow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 20)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_antlers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 6)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "RepeatingCrossbow", 40.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchRepeatingCrossbow_Init () {
    gt_WorkbenchRepeatingCrossbow = TriggerCreate("gt_WorkbenchRepeatingCrossbow_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchRepeatingCrossbow, null, AbilityCommand("CraftRepeatingCrossbow", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchStormwizardsRobes
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchStormwizardsRobes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 25)) {
                if (((gv_raining || gv_winter) == true)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "StormwizardsRobes", 57.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_rainOrWinter);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchStormwizardsRobes_Init () {
    gt_WorkbenchStormwizardsRobes = TriggerCreate("gt_WorkbenchStormwizardsRobes_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchStormwizardsRobes, null, AbilityCommand("CraftStormwizardsRobes", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchTrebuchet
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchTrebuchet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "TrebuchetPacked", 20.0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchTrebuchet_Init () {
    gt_WorkbenchTrebuchet = TriggerCreate("gt_WorkbenchTrebuchet_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchTrebuchet, null, AbilityCommand("CraftTrebuchet", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WorkbenchIronbarkArmor
//--------------------------------------------------------------------------------------------------
bool gt_WorkbenchIronbarkArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 15)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "IronbarkArmor", 45.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WorkbenchIronbarkArmor_Init () {
    gt_WorkbenchIronbarkArmor = TriggerCreate("gt_WorkbenchIronbarkArmor_Func");
    TriggerAddEventUnitAbility(gt_WorkbenchIronbarkArmor, null, AbilityCommand("CraftIronbarkArmor", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyHeavyIronBreastplate
//--------------------------------------------------------------------------------------------------
bool gt_SmithyHeavyIronBreastplate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 15)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "HeavyIronBreastplate", 30.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyHeavyIronBreastplate_Init () {
    gt_SmithyHeavyIronBreastplate = TriggerCreate("gt_SmithyHeavyIronBreastplate_Func");
    TriggerAddEventUnitAbility(gt_SmithyHeavyIronBreastplate, null, AbilityCommand("ForgeHeavyIronBreastplate", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithySharpIronPickaxe
//--------------------------------------------------------------------------------------------------
bool gt_SmithySharpIronPickaxe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "SharpIronPickaxe", 26.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithySharpIronPickaxe_Init () {
    gt_SmithySharpIronPickaxe = TriggerCreate("gt_SmithySharpIronPickaxe_Func");
    TriggerAddEventUnitAbility(gt_SmithySharpIronPickaxe, null, AbilityCommand("ForgeSharpIronPickaxe", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyGleamingSpear
//--------------------------------------------------------------------------------------------------
bool gt_SmithyGleamingSpear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 5)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "GoldenPolearm", 28.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyGleamingSpear_Init () {
    gt_SmithyGleamingSpear = TriggerCreate("gt_SmithyGleamingSpear_Func");
    TriggerAddEventUnitAbility(gt_SmithyGleamingSpear, null, AbilityCommand("ForgeGoldenPolearm", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyBattleAxe
//--------------------------------------------------------------------------------------------------
bool gt_SmithyBattleAxe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 10)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "BerserkersBattleAxe", 30.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyBattleAxe_Init () {
    gt_SmithyBattleAxe = TriggerCreate("gt_SmithyBattleAxe_Func");
    TriggerAddEventUnitAbility(gt_SmithyBattleAxe, null, AbilityCommand("ForgeBerserkersBattleAxe", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyIronBandedBuckler
//--------------------------------------------------------------------------------------------------
bool gt_SmithyIronBandedBuckler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 5)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "IronBandedBuckler", 15.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyIronBandedBuckler_Init () {
    gt_SmithyIronBandedBuckler = TriggerCreate("gt_SmithyIronBandedBuckler_Func");
    TriggerAddEventUnitAbility(gt_SmithyIronBandedBuckler, null, AbilityCommand("ForgeIronBandedBuckler", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyHeavyTowerShield
//--------------------------------------------------------------------------------------------------
bool gt_SmithyHeavyTowerShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 15)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "HeavyTowerShield", 30.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyHeavyTowerShield_Init () {
    gt_SmithyHeavyTowerShield = TriggerCreate("gt_SmithyHeavyTowerShield_Func");
    TriggerAddEventUnitAbility(gt_SmithyHeavyTowerShield, null, AbilityCommand("ForgeHeavyTowerShield", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyWolfsbane
//--------------------------------------------------------------------------------------------------
bool gt_SmithyWolfsbane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0) && (gv_wolfsbanePlayer == lv_i)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 8));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 12)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "Wolfsbane", 33.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyWolfsbane_Init () {
    gt_SmithyWolfsbane = TriggerCreate("gt_SmithyWolfsbane_Func");
    TriggerAddEventUnitAbility(gt_SmithyWolfsbane, null, AbilityCommand("ForgeWolfsbane", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyDreadplateArmor
//--------------------------------------------------------------------------------------------------
bool gt_SmithyDreadplateArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 25)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 8)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "DreadplateArmor", 60.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyDreadplateArmor_Init () {
    gt_SmithyDreadplateArmor = TriggerCreate("gt_SmithyDreadplateArmor_Func");
    TriggerAddEventUnitAbility(gt_SmithyDreadplateArmor, null, AbilityCommand("ForgeDreadplateArmor", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyIronStuddedVest
//--------------------------------------------------------------------------------------------------
bool gt_SmithyIronStuddedVest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 10)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter("WarmWoolTunic", c_playerAny, UnitInventoryGroup(gv_playerData[lv_i].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "IronStuddedVest", 20.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyIronStuddedVest_Init () {
    gt_SmithyIronStuddedVest = TriggerCreate("gt_SmithyIronStuddedVest_Func");
    TriggerAddEventUnitAbility(gt_SmithyIronStuddedVest, null, AbilityCommand("ForgeIronStuddedVest", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyIronShovel
//--------------------------------------------------------------------------------------------------
bool gt_SmithyIronShovel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "IronShovel", 5.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyIronShovel_Init () {
    gt_SmithyIronShovel = TriggerCreate("gt_SmithyIronShovel_Func");
    TriggerAddEventUnitAbility(gt_SmithyIronShovel, null, AbilityCommand("ForgeIronShovel", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyOutlandishHeartpiercer
//--------------------------------------------------------------------------------------------------
bool gt_SmithyOutlandishHeartpiercer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 25)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_whiteBearFangs, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 6)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "OutlandishHeartpiercer", 60.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyOutlandishHeartpiercer_Init () {
    gt_SmithyOutlandishHeartpiercer = TriggerCreate("gt_SmithyOutlandishHeartpiercer_Func");
    TriggerAddEventUnitAbility(gt_SmithyOutlandishHeartpiercer, null, AbilityCommand("ForgeOutlandishHeartpiercer", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyGoldenHauberk
//--------------------------------------------------------------------------------------------------
bool gt_SmithyGoldenHauberk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 20)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "GoldenHauberk", 40.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyGoldenHauberk_Init () {
    gt_SmithyGoldenHauberk = TriggerCreate("gt_SmithyGoldenHauberk_Func");
    TriggerAddEventUnitAbility(gt_SmithyGoldenHauberk, null, AbilityCommand("ForgeGoldenHauberk", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyJudgementGavel
//--------------------------------------------------------------------------------------------------
bool gt_SmithyJudgmentGavel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 15)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "JudgmentGavel", 40.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyJudgmentGavel_Init () {
    gt_SmithyJudgmentGavel = TriggerCreate("gt_SmithyJudgmentGavel_Func");
    TriggerAddEventUnitAbility(gt_SmithyJudgmentGavel, null, AbilityCommand("ForgeJudgmentGavel", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyViciousJavelin
//--------------------------------------------------------------------------------------------------
bool gt_SmithyViciousJavelin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 10)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sturdyWoodenSticks, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "ViciousJavelin", 25.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyViciousJavelin_Init () {
    gt_SmithyViciousJavelin = TriggerCreate("gt_SmithyViciousJavelin_Func");
    TriggerAddEventUnitAbility(gt_SmithyViciousJavelin, null, AbilityCommand("ForgeViciousJavelin", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyDemonward
//--------------------------------------------------------------------------------------------------
bool gt_SmithyDemonward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 20)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkulls, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "Demonward", 40.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyDemonward_Init () {
    gt_SmithyDemonward = TriggerCreate("gt_SmithyDemonward_Func");
    TriggerAddEventUnitAbility(gt_SmithyDemonward, null, AbilityCommand("ForgeDemonward", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyLiquidatorSpellblade
//--------------------------------------------------------------------------------------------------
bool gt_SmithyLiquidatorSpellblade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    unitgroup lv_bankSecondary;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    lv_bankSecondary = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 25)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_antlers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bankSecondary, gf_UnitsInUnitGroupWithBuff(UnitGroupFilter("Nightwisp", c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), "SynergyPassive"));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4) && (UnitGroupCount(lv_bankSecondary, c_unitCountAlive) > 0)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UnitKill(UnitGroupRandomUnit(lv_bankSecondary, c_unitCountAlive));
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "LiquidatorSpellblade", 60.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyLiquidatorSpellblade_Init () {
    gt_SmithyLiquidatorSpellblade = TriggerCreate("gt_SmithyLiquidatorSpellblade_Func");
    TriggerAddEventUnitAbility(gt_SmithyLiquidatorSpellblade, null, AbilityCommand("ForgeLiquidatorSpellblade", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SmithyTwinThrowingAxes
//--------------------------------------------------------------------------------------------------
bool gt_SmithyTwinThrowingAxes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 20)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_berserkersBattleAxes, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "TwinThrowingAxes", 30.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SmithyTwinThrowingAxes_Init () {
    gt_SmithyTwinThrowingAxes = TriggerCreate("gt_SmithyTwinThrowingAxes_Func");
    TriggerAddEventUnitAbility(gt_SmithyTwinThrowingAxes, null, AbilityCommand("ForgeTwinThrowingAxes", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HuntersLodgeObedienceRod
//--------------------------------------------------------------------------------------------------
bool gt_HuntersLodgeObedienceRod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 1)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "ObedienceRod", 15.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HuntersLodgeObedienceRod_Init () {
    gt_HuntersLodgeObedienceRod = TriggerCreate("gt_HuntersLodgeObedienceRod_Func");
    TriggerAddEventUnitAbility(gt_HuntersLodgeObedienceRod, null, AbilityCommand("CraftObedienceRod", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HuntersLodgeSleepingBag
//--------------------------------------------------------------------------------------------------
bool gt_HuntersLodgeSleepingBag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 1)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "SleepingBag", 10.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HuntersLodgeSleepingBag_Init () {
    gt_HuntersLodgeSleepingBag = TriggerCreate("gt_HuntersLodgeSleepingBag_Func");
    TriggerAddEventUnitAbility(gt_HuntersLodgeSleepingBag, null, AbilityCommand("CraftSleepingBag", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HuntersLodgeFishingRod
//--------------------------------------------------------------------------------------------------
bool gt_HuntersLodgeFishingRod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
            if ((gv_skillArtisanship[lv_i] >= 0)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), "FishingRod", 15.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HuntersLodgeFishingRod_Init () {
    gt_HuntersLodgeFishingRod = TriggerCreate("gt_HuntersLodgeFishingRod_Func");
    TriggerAddEventUnitAbility(gt_HuntersLodgeFishingRod, null, AbilityCommand("CraftFishingRod", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TamedAITrigger
//--------------------------------------------------------------------------------------------------
bool gt_TamedAITrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_animal;
    unit lv_master;
    int lv_i;
    bool lv_onthesamepage;
    fixed lv_leashrange;
    fixed lv_engageEnemyLimit;
    fixed lv_engageDirewolfLimit;
    unitgroup lv_enemies;
    unitgroup lv_direwolves;
    point lv_point;
    unit lv_u;
    // Variable Initialization
    lv_animal = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_master = UnitBehaviorEffectUnit(lv_animal, "Tamed", c_effectUnitCaster, 0);
    lv_i = UnitGetOwner(lv_master);
    lv_onthesamepage = gf_UnitFacingGeneralDirection(lv_master, lv_animal);
    lv_leashrange = 4.0;
    lv_engageEnemyLimit = 25.0;
    lv_engageDirewolfLimit = 50.0;
    lv_enemies = gf_GetNearbyEnemiesNoStructures(lv_animal);
    lv_direwolves = gf_GetNearbyDirewolves(lv_animal);
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(lv_master)) {
        if (((lv_onthesamepage == true) || ((UnitHasBehavior(lv_animal, "NaturalTenacity") == true) && ((UnitOrder(lv_animal, 0) != Order(AbilityCommand("move", 2))) || (UnitHasBehavior(lv_animal, "PetDodging") == true)) && (UnitHasBehavior(lv_master, "Annihilate") == false) && (UnitHasBehavior(lv_master, "EmpoweredLightning") == false)))) {
            if ((UnitHasBehavior(lv_animal, "TigerRage") == true)) {
                lv_leashrange = 17.0;
            }
            else {
                lv_leashrange = 12.0;
            }
        }
        else {
        }
        lv_leashrange *= (0.5 + ((UnitGetPropertyFixed(lv_animal, c_unitPropLifePercent, c_unitPropCurrent) * 0.5) * 0.01));
        if ((StringSub(gv_taughtPetsString[lv_i], 1, 1) == "1")) {
            UnitCreateEffectUnit(lv_animal, "ThickHideOOCRegen", lv_animal);
        }
        else {
        }
        if ((UnitHasBehavior(lv_animal, "DiggingTruffles") == false)) {
            if ((UnitHasBehavior(lv_animal, "NaturalTenacity") == true) && gf_AIDodgeBossAbilities(lv_animal)) {
            }
            else {
                if ((UnitOrder(lv_animal, 0) != Order(AbilityCommand("move", 2))) && (UnitGroupCount(lv_enemies, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lv_animal, c_unitPropLifePercent, c_unitPropCurrent) > lv_engageEnemyLimit) && (DistanceBetweenPoints(UnitGetPosition(lv_master), UnitGetPosition(lv_animal)) <= lv_leashrange)) {
                    UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGroupCenterOfGroup(lv_enemies)), c_orderQueueReplace);
                }
                else {
                    if ((gv_questIndexActive == 9) && (libNtve_gf_UnitInRegion(lv_animal, gv_noTrufflesEre) == false) && (UnitHasBehavior(lv_animal, "DiggingTruffles") == false) && ((UnitGetType(lv_animal) == "Dog") || (UnitGetType(lv_animal) == "Lyote"))) {
                        gf_Quicktag(lv_animal, StringExternal("Param/Value/3537BACC"), 2.0, 24);
                        UnitCreateEffectUnit(lv_animal, "DiggingTruffles", lv_animal);
                        RegionAddCircle(gv_noTrufflesEre, true, UnitGetPosition(lv_animal), RandomFixed(4.0, 6.0));
                    }
                    else {
                        if ((UnitOrder(lv_animal, 0) != Order(AbilityCommand("move", 2))) && (UnitGroupCount(lv_direwolves, c_unitCountAlive) > 0) && ((UnitGetPropertyFixed(lv_animal, c_unitPropLifePercent, c_unitPropCurrent) > lv_engageDirewolfLimit) || (UnitHasBehavior(lv_master, "LazyCozyKobold") == false)) && (DistanceBetweenPoints(UnitGetPosition(lv_master), UnitGetPosition(lv_animal)) <= lv_leashrange)) {
                            UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGroupCenterOfGroup(lv_direwolves)), c_orderQueueReplace);
                        }
                        else {
                            if ((UnitOrder(lv_animal, 0) != Order(AbilityCommand("move", 2))) && ((DistanceBetweenPoints(UnitGetPosition(lv_animal), UnitGetPosition(lv_master)) >= 4.0) || (UnitHasBehavior(lv_master, "Stationary") == false))) {
                                if ((UnitGroupUnit(gv_pets[lv_i], 1) == lv_animal)) {
                                    lv_point = PointWithOffsetPolar(UnitGetPosition(lv_master), RandomFixed(1.5, 2.0), (UnitGetFacing(lv_master) - RandomFixed(70.0, 90.0)));
                                }
                                else if ((UnitGroupUnit(gv_pets[lv_i], 2) == lv_animal)) {
                                    lv_point = PointWithOffsetPolar(UnitGetPosition(lv_master), RandomFixed(1.5, 2.0), (UnitGetFacing(lv_master) + RandomFixed(70.0, 90.0)));
                                }
                                else if ((UnitGroupUnit(gv_pets[lv_i], 3) == lv_animal)) {
                                    lv_point = PointWithOffsetPolar(UnitGetPosition(lv_master), RandomFixed(1.5, 2.0), (UnitGetFacing(lv_master) + RandomFixed(170.0, 190.0)));
                                }
                                else if (true) {
                                    lv_point = PointWithOffsetPolar(UnitGetPosition(lv_master), RandomFixed(2.5, 3.0), (UnitGetFacing(lv_master) + RandomFixed(120.0, 240.0)));
                                }
                                if ((DistanceBetweenPoints(UnitGetPosition(lv_animal), lv_point) > 1.0)) {
                                    UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
                                }
                                else {
                                }
                            }
                            else {
                            }
                        }
                    }
                }
            }
        }
        else {
        }
    }
    else {
        if ((gv_playerData[UnitGetOwner(lv_animal)].lv_reincarnation == true) && gf_UnitExists(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lv_animal))].lv_watchTower)) {
            UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lv_animal))].lv_watchTower)), c_orderQueueReplace);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TamedAITrigger_Init () {
    gt_TamedAITrigger = TriggerCreate("gt_TamedAITrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_TamedAITrigger, c_playerAny, "TamedAITrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TamedApply
//--------------------------------------------------------------------------------------------------
bool gt_TamedApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_master;
    unit lv_animal;
    int lv_i;
    // Variable Initialization
    lv_master = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_animal = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_i = UnitGetOwner(lv_master);
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(lv_animal))) {
            return false;
        }
        if (!(((UnitGetType(gf_KoboldMainHand(lv_master)) == "ObedienceRod") || ((UnitGetType(gf_KoboldMainHand(lv_master)) == null) && (UnitGetType(gf_KoboldArmor(lv_master)) == "MasterRangersMaille"))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) < StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lv_i)))) {
        if ((UnitGetType(gf_KoboldMainHand(lv_master)) == "ObedienceRod")) {
            gf_DropandRemove(gf_KoboldMainHand(lv_master));
        }
        else {
        }
        gf_AddExperience(lv_master, 50.0);
        gf_TameAnimal(lv_master, lv_animal);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_tameError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TamedApply_Init () {
    gt_TamedApply = TriggerCreate("gt_TamedApply_Func");
    TriggerAddEventPlayerEffectUsed(gt_TamedApply, c_playerAny, "TamedSet");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnThickHide
//--------------------------------------------------------------------------------------------------
bool gt_LearnThickHide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_t;
    int lv_c;
    bool lv_thru;
    unitgroup lv_pelts;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 30;
    lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_taughtPetsString[lv_i], 1, 1) == "0")) {
                if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 1)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_pelts);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                if ((lv_thru == true)) {
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/A7F42BAF"), 3.0, 24);
                    gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], "1", 1, 1);
                    UnitGroupLoopBegin(UnitGroup("HuntersLodge", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    TechTreeUpgradeAddLevel(lv_i, "PetUpgradeThickHide", 1);
                    lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Heroic]", lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Heroic]", lv_i, FixedToString((lv_t + 1.0), 2));
                    lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Hover]", lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Hover]", lv_i, FixedToString((lv_t + 2.0), 2));
                    gf_UpdatePetStats(lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnThickHide_Init () {
    gt_LearnThickHide = TriggerCreate("gt_LearnThickHide_Func");
    TriggerAddEventUnitAbility(gt_LearnThickHide, null, AbilityCommand("ThickHide", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnNaturalTenacity
//--------------------------------------------------------------------------------------------------
bool gt_LearnNaturalTenacity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_t;
    int lv_c;
    bool lv_thru;
    unitgroup lv_pelts;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 30;
    lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_taughtPetsString[lv_i], 5, 5) == "0")) {
                if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 1)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_pelts);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                if ((lv_thru == true)) {
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/C114FC6D"), 3.0, 24);
                    gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], "1", 5, 5);
                    UnitGroupLoopBegin(UnitGroup("HuntersLodge", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(gv_pets[lv_i]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_ApplyPetBehaviors(UnitGroupLoopCurrent(), gv_playerData[lv_i].lv_kobold);
                    }
                    UnitGroupLoopEnd();
                    TechTreeUpgradeAddLevel(lv_i, "PetUpgradeNaturalTenacity", 1);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnNaturalTenacity_Init () {
    gt_LearnNaturalTenacity = TriggerCreate("gt_LearnNaturalTenacity_Func");
    TriggerAddEventUnitAbility(gt_LearnNaturalTenacity, null, AbilityCommand("NaturalTenacity", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnViciousness
//--------------------------------------------------------------------------------------------------
bool gt_LearnViciousness_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_t;
    int lv_c;
    bool lv_thru;
    unitgroup lv_pelts;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 60;
    lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2);
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_taughtPetsString[lv_i], 6, 6) == "0")) {
                if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 2)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_pelts);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                if ((lv_thru == true)) {
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/53E068F1"), 3.0, 24);
                    gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], "1", 6, 6);
                    UnitGroupLoopBegin(UnitGroup("HuntersLodge", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    TechTreeUpgradeAddLevel(lv_i, "PetUpgradeViciousness", 1);
                    lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Light]", lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Light]", lv_i, FixedToString((lv_t + 25.0), 0));
                    gf_UpdatePetStats(lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnViciousness_Init () {
    gt_LearnViciousness = TriggerCreate("gt_LearnViciousness_Func");
    TriggerAddEventUnitAbility(gt_LearnViciousness, null, AbilityCommand("Viciousness", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnInspirationalMaster
//--------------------------------------------------------------------------------------------------
bool gt_LearnInspirationalMaster_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_t;
    int lv_c;
    bool lv_thru;
    unitgroup lv_pelts;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 60;
    lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2);
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_taughtPetsString[lv_i], 2, 2) == "0")) {
                if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 2)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_pelts);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                if ((lv_thru == true)) {
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/F54F2812"), 3.0, 24);
                    gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], "1", 2, 2);
                    UnitGroupLoopBegin(UnitGroup("HuntersLodge", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    TechTreeUpgradeAddLevel(lv_i, "PetUpgradeInspirationalMaster", 1);
                    lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lv_i, FixedToString((lv_t + 0.1), 2));
                    lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Biological]", lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Biological]", lv_i, FixedToString((lv_t + 1.0), 2));
                    gf_UpdatePetStats(lv_i);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnInspirationalMaster_Init () {
    gt_LearnInspirationalMaster = TriggerCreate("gt_LearnInspirationalMaster_Func");
    TriggerAddEventUnitAbility(gt_LearnInspirationalMaster, null, AbilityCommand("InspirationalMaster", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnPredatoryKnowledge
//--------------------------------------------------------------------------------------------------
bool gt_LearnPredatoryKnowledge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_t;
    int lv_c;
    bool lv_thru;
    unitgroup lv_pelts;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 60;
    lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2);
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_taughtPetsString[lv_i], 4, 4) == "0")) {
                if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 2)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_pelts);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                if ((lv_thru == true)) {
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/773A1387"), 3.0, 24);
                    gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], "1", 4, 4);
                    UnitGroupLoopBegin(UnitGroup("HuntersLodge", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(gv_pets[lv_i]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_ApplyPetBehaviors(UnitGroupLoopCurrent(), gv_playerData[lv_i].lv_kobold);
                    }
                    UnitGroupLoopEnd();
                    TechTreeUpgradeAddLevel(lv_i, "PetUpgradePredatoryKnowledge", 1);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnPredatoryKnowledge_Init () {
    gt_LearnPredatoryKnowledge = TriggerCreate("gt_LearnPredatoryKnowledge_Func");
    TriggerAddEventUnitAbility(gt_LearnPredatoryKnowledge, null, AbilityCommand("PredatoryKnowledge", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LearnCompanionship
//--------------------------------------------------------------------------------------------------
bool gt_LearnCompanionship_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_t;
    int lv_c;
    bool lv_thru;
    unitgroup lv_pelts;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 90;
    lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3);
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((StringSub(gv_taughtPetsString[lv_i], 3, 3) == "0")) {
                if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 3)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_pelts);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                if ((lv_thru == true)) {
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/4474782E"), 3.0, 24);
                    gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], "1", 3, 3);
                    UnitGroupLoopBegin(UnitGroup("HuntersLodge", lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    TechTreeUpgradeAddLevel(lv_i, "PetUpgradeCompanionship", 1);
                    lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "Amount", lv_i, FixedToString((lv_t + 1.0), 0));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnCompanionship_Init () {
    gt_LearnCompanionship = TriggerCreate("gt_LearnCompanionship_Func");
    TriggerAddEventUnitAbility(gt_LearnCompanionship, null, AbilityCommand("Companionship", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PredatoryKnowledge
//--------------------------------------------------------------------------------------------------
bool gt_PredatoryKnowledge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_i;
    // Variable Initialization
    lv_type = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    // Actions
    if (!runActions) {
        return true;
    }
    if (((lv_type == "Dog") || (lv_type == "Lyote")) && (gv_predatoryKnowledgeStacks[1][lv_i] < 10)) {
        gv_predatoryKnowledgeStacks[1][lv_i] += 1;
        gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal("Param/Value/419A9534"), 2.0, 24);
    }
    else if (((lv_type == "Bear") || (lv_type == "FrostBear")) && (gv_predatoryKnowledgeStacks[2][lv_i] < 10)) {
        gv_predatoryKnowledgeStacks[2][lv_i] += 1;
        gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal("Param/Value/90A25AA3"), 2.0, 24);
    }
    else if ((lv_type == "Nightwisp") && (gv_predatoryKnowledgeStacks[3][lv_i] < 10)) {
        gv_predatoryKnowledgeStacks[3][lv_i] += 1;
        gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal("Param/Value/3051A876"), 2.0, 24);
    }
    gf_UpdatePetStats(lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PredatoryKnowledge_Init () {
    gt_PredatoryKnowledge = TriggerCreate("gt_PredatoryKnowledge_Func");
    TriggerAddEventPlayerEffectUsed(gt_PredatoryKnowledge, c_playerAny, "PredatoryKnowledge1min");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WhiteBearFangCollect
//--------------------------------------------------------------------------------------------------
bool gt_WhiteBearFangCollect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lodgeOwner;
    int lv_collector;
    fixed lv_t;
    // Variable Initialization
    lv_lodgeOwner = UnitGetOwner(EventUnit());
    lv_collector = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_collector].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_collector].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_collector].lv_kobold)) <= gv_interactRadius)) {
            if ((UnitGroupCount(gv_playerData[lv_collector].lv_resources.lv_whiteBearFangs, c_unitCountAlive) >= 1)) {
                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_collector].lv_resources.lv_whiteBearFangs, 1));
                if ((lv_collector == lv_lodgeOwner)) {
                    gf_Advancedtag(EventUnit(), lv_collector, StringExternal("Param/Value/B7064B88"), 2.0, 24);
                }
                else {
                    gf_Advancedtag(EventUnit(), lv_collector, StringExternal("Param/Value/E3179ED6"), 2.0, 24);
                }
                SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_collector), gv_playerData[lv_collector].lv_kobold, 0.0, 100.0, 0.0);
                UnitBehaviorAdd(EventUnit(), "WhiteBearToothStack", gv_playerData[lv_lodgeOwner].lv_kobold, 1);
                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lv_lodgeOwner));
                CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lv_lodgeOwner, FixedToString((lv_t + 0.02), 2));
                gf_UpdatePetStats(lv_lodgeOwner);
                gf_HuntersLodgeSpawn(EventUnit());
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_trophiesError);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WhiteBearFangCollect_Init () {
    gt_WhiteBearFangCollect = TriggerCreate("gt_WhiteBearFangCollect_Func");
    TriggerAddEventUnitAbility(gt_WhiteBearFangCollect, null, AbilityCommand("CollectTrophyWhiteBearFang", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WhiteBearFangExpire
//--------------------------------------------------------------------------------------------------
bool gt_WhiteBearFangExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_temp;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CreateLoot("WhiteBearFang", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 2.0, true, 100, 0);
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lv_i));
    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Armored]", lv_i, FixedToString((lv_temp - 0.02), 2));
    gf_UpdatePetStats(lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WhiteBearFangExpire_Init () {
    gt_WhiteBearFangExpire = TriggerCreate("gt_WhiteBearFangExpire_Func");
    TriggerAddEventPlayerEffectUsed(gt_WhiteBearFangExpire, c_playerAny, "WhiteBearFangExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BoneTalismanCollect
//--------------------------------------------------------------------------------------------------
bool gt_BoneTalismanCollect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lodgeOwner;
    int lv_collector;
    fixed lv_t;
    // Variable Initialization
    lv_lodgeOwner = UnitGetOwner(EventUnit());
    lv_collector = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_collector].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_collector].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_collector].lv_kobold)) <= gv_interactRadius)) {
            if ((UnitGroupCount(gv_playerData[lv_collector].lv_resources.lv_boneTalismans, c_unitCountAlive) >= 1)) {
                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_collector].lv_resources.lv_boneTalismans, 1));
                if ((lv_collector == lv_lodgeOwner)) {
                    gf_Advancedtag(EventUnit(), lv_collector, StringExternal("Param/Value/7B624272"), 2.0, 24);
                }
                else {
                    gf_Advancedtag(EventUnit(), lv_collector, StringExternal("Param/Value/AF3EC12D"), 2.0, 24);
                }
                SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_collector), gv_playerData[lv_collector].lv_kobold, 0.0, 100.0, 0.0);
                UnitBehaviorAdd(EventUnit(), "BoneTalismanStack", gv_playerData[lv_lodgeOwner].lv_kobold, 1);
                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Biological]", lv_lodgeOwner));
                CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Biological]", lv_lodgeOwner, FixedToString((lv_t + 0.2), 2));
                gf_UpdatePetStats(lv_lodgeOwner);
                gf_HuntersLodgeSpawn(EventUnit());
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_trophiesError);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BoneTalismanCollect_Init () {
    gt_BoneTalismanCollect = TriggerCreate("gt_BoneTalismanCollect_Func");
    TriggerAddEventUnitAbility(gt_BoneTalismanCollect, null, AbilityCommand("CollectTrophyBoneTalisman", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BoneTalismanExpire
//--------------------------------------------------------------------------------------------------
bool gt_BoneTalismanExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_temp;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CreateLoot("BoneTalisman", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 2.0, true, 100, 0);
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Biological]", lv_i));
    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Biological]", lv_i, FixedToString((lv_temp - 0.2), 2));
    gf_UpdatePetStats(lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BoneTalismanExpire_Init () {
    gt_BoneTalismanExpire = TriggerCreate("gt_BoneTalismanExpire_Func");
    TriggerAddEventPlayerEffectUsed(gt_BoneTalismanExpire, c_playerAny, "BoneTalismanExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TrollNoseBoneCollect
//--------------------------------------------------------------------------------------------------
bool gt_TrollNoseBoneCollect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lodgeOwner;
    int lv_collector;
    fixed lv_t;
    // Variable Initialization
    lv_lodgeOwner = UnitGetOwner(EventUnit());
    lv_collector = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_collector].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_collector].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_collector].lv_kobold)) <= gv_interactRadius)) {
            if ((UnitGroupCount(gv_playerData[lv_collector].lv_resources.lv_trollNoseBones, c_unitCountAlive) >= 1)) {
                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_collector].lv_resources.lv_trollNoseBones, 1));
                if ((lv_collector == lv_lodgeOwner)) {
                    gf_Advancedtag(EventUnit(), lv_collector, StringExternal("Param/Value/92671A8C"), 2.0, 24);
                }
                else {
                    gf_Advancedtag(EventUnit(), lv_collector, StringExternal("Param/Value/8E0DA5B8"), 2.0, 24);
                }
                SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_collector), gv_playerData[lv_collector].lv_kobold, 0.0, 100.0, 0.0);
                UnitBehaviorAdd(EventUnit(), "TrollNoseBoneStack", gv_playerData[lv_lodgeOwner].lv_kobold, 1);
                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Light]", lv_lodgeOwner));
                CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Light]", lv_lodgeOwner, FixedToString((lv_t + 10.0), 2));
                gf_UpdatePetStats(lv_lodgeOwner);
                gf_HuntersLodgeSpawn(EventUnit());
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_trophiesError);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrollNoseBoneCollect_Init () {
    gt_TrollNoseBoneCollect = TriggerCreate("gt_TrollNoseBoneCollect_Func");
    TriggerAddEventUnitAbility(gt_TrollNoseBoneCollect, null, AbilityCommand("CollectTrophyTrollNoseBone", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TrollNoseBoneExpire
//--------------------------------------------------------------------------------------------------
bool gt_TrollNoseBoneExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_temp;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CreateLoot("TrollNoseBone", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 2.0, true, 100, 0);
    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Light]", lv_i));
    CatalogFieldValueSet(c_gameCatalogEffect, "PetStats", "AttributeBonus[Light]", lv_i, FixedToString((lv_temp - 10.0), 2));
    gf_UpdatePetStats(lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrollNoseBoneExpire_Init () {
    gt_TrollNoseBoneExpire = TriggerCreate("gt_TrollNoseBoneExpire_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrollNoseBoneExpire, c_playerAny, "TrollNoseBoneExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AntlersCollect
//--------------------------------------------------------------------------------------------------
bool gt_AntlersCollect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lodgeOwner;
    int lv_collector;
    fixed lv_t;
    // Variable Initialization
    lv_lodgeOwner = UnitGetOwner(EventUnit());
    lv_collector = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_collector].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_collector].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_collector].lv_kobold)) <= gv_interactRadius)) {
            if ((UnitGroupCount(gv_playerData[lv_collector].lv_resources.lv_antlers, c_unitCountAlive) >= 1)) {
                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_collector].lv_resources.lv_antlers, 1));
                if ((lv_collector == lv_lodgeOwner)) {
                    gf_Advancedtag(EventUnit(), lv_collector, StringExternal("Param/Value/7977C4F5"), 2.0, 24);
                }
                else {
                    gf_Advancedtag(EventUnit(), lv_collector, StringExternal("Param/Value/39F38F20"), 2.0, 24);
                }
                SoundPlayOnUnit(SoundLink("LeatherSpend", -1), PlayerGroupSingle(lv_collector), gv_playerData[lv_collector].lv_kobold, 0.0, 100.0, 0.0);
                UnitBehaviorAdd(EventUnit(), "AntlersStack", gv_playerData[lv_lodgeOwner].lv_kobold, 1);
                gv_antlerStacks[lv_lodgeOwner] += 1;
                gf_UpdatePetStats(lv_lodgeOwner);
                gf_HuntersLodgeSpawn(EventUnit());
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_trophiesError);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AntlersCollect_Init () {
    gt_AntlersCollect = TriggerCreate("gt_AntlersCollect_Func");
    TriggerAddEventUnitAbility(gt_AntlersCollect, null, AbilityCommand("CollectTrophyAntlers", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AntlersExpire
//--------------------------------------------------------------------------------------------------
bool gt_AntlersExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_temp;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CreateLoot("Antlers", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 2.0, true, 100, 0);
    gv_antlerStacks[lv_i] -= 1;
    gf_UpdatePetStats(lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AntlersExpire_Init () {
    gt_AntlersExpire = TriggerCreate("gt_AntlersExpire_Func");
    TriggerAddEventPlayerEffectUsed(gt_AntlersExpire, c_playerAny, "AntlersExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UpdateStatsTrigger
//--------------------------------------------------------------------------------------------------
bool gt_UpdateStatsTrigger_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "Kobold"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateStatsTrigger_Init () {
    gt_UpdateStatsTrigger = TriggerCreate("gt_UpdateStatsTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_UpdateStatsTrigger, c_playerAny, "UpdateCombatStats");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuffMainStat
//--------------------------------------------------------------------------------------------------
bool gt_BuffMainStat_Func (bool testConds, bool runActions) {
    string auto9ADB2F72_val;
    // Variable Declarations
    unit lv_unit;
    int lv_i;
    fixed lv_strength;
    fixed lv_deltaStrength;
    fixed lv_dex;
    fixed lv_deltaDexterity;
    fixed lv_endurance;
    fixed lv_deltaEndurance;
    fixed lv_intelligence;
    fixed lv_deltaIntelligence;
    fixed lv_willpower;
    fixed lv_deltaWillpower;
    // Variable Initialization
    lv_unit = EventUnit();
    lv_i = UnitGetOwner(lv_unit);
    lv_strength = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i));
    lv_dex = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lv_i));
    lv_endurance = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lv_i));
    lv_intelligence = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lv_i));
    lv_willpower = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lv_i));
    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "Kobold"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto9ADB2F72_val = EventUnitBehavior();
    if (auto9ADB2F72_val == "MasterRangersMailleStrDex") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
            lv_deltaStrength = 2.0;
            lv_deltaDexterity = 2.0;
        }
        else {
            lv_deltaStrength = -2.0;
            lv_deltaDexterity = -2.0;
        }
    }
    else if (auto9ADB2F72_val == "MasterRangersMailleStrEnd") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
            lv_deltaStrength = 2.0;
            lv_deltaEndurance = 2.0;
        }
        else {
            lv_deltaStrength = -2.0;
            lv_deltaEndurance = -2.0;
        }
    }
    else if (auto9ADB2F72_val == "MasterRangersMailleIntWil") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
            lv_deltaIntelligence = 2.0;
            lv_deltaWillpower = 2.0;
        }
        else {
            lv_deltaIntelligence = -2.0;
            lv_deltaWillpower = -2.0;
        }
    }
    else if (auto9ADB2F72_val == "Candle") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
            lv_deltaStrength = 2.0;
            lv_deltaDexterity = 2.0;
            lv_deltaEndurance = 2.0;
            lv_deltaIntelligence = 2.0;
            lv_deltaWillpower = 2.0;
        }
        else {
            lv_deltaStrength = -2.0;
            lv_deltaDexterity = -2.0;
            lv_deltaEndurance = -2.0;
            lv_deltaIntelligence = -2.0;
            lv_deltaWillpower = -2.0;
        }
    }
    else if (auto9ADB2F72_val == "WarHorn") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
            lv_deltaStrength = 5.0;
            lv_deltaDexterity = 5.0;
            lv_deltaEndurance = 5.0;
            lv_deltaIntelligence = 5.0;
            lv_deltaWillpower = 5.0;
        }
        else {
            lv_deltaStrength = -5.0;
            lv_deltaDexterity = -5.0;
            lv_deltaEndurance = -5.0;
            lv_deltaIntelligence = -5.0;
            lv_deltaWillpower = -5.0;
        }
    }
    else if (auto9ADB2F72_val == "IronbarkArmorTreeStack") {
        CatalogFieldValueSet(c_gameCatalogEffect, "IronbarkArmorStrengthBonus", "Amount", lv_i, FixedToString((UnitBehaviorCount(lv_unit, "IronbarkArmorTreeStack") + (3.0 * UnitBehaviorCount(lv_unit, "IronbarkArmorElderTreeStack"))), 0));
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
            lv_deltaStrength = 1.0;
        }
        else {
            lv_deltaStrength = -1.0;
        }
    }
    else if (auto9ADB2F72_val == "IronbarkArmorElderTreeStack") {
        CatalogFieldValueSet(c_gameCatalogEffect, "IronbarkArmorStrengthBonus", "Amount", lv_i, FixedToString((UnitBehaviorCount(lv_unit, "IronbarkArmorTreeStack") + (3.0 * UnitBehaviorCount(lv_unit, "IronbarkArmorElderTreeStack"))), 0));
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
            lv_deltaStrength = 3.0;
        }
        else {
            lv_deltaStrength = -3.0;
        }
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i, FixedToString((lv_strength + lv_deltaStrength), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Biological]", lv_i, FixedToString((lv_dex + lv_deltaDexterity), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Heroic]", lv_i, FixedToString((lv_endurance + lv_deltaEndurance), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Armored]", lv_i, FixedToString((lv_intelligence + lv_deltaIntelligence), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lv_i, FixedToString((lv_willpower + lv_deltaWillpower), 0));
    gf_UpdateStatsAll(lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuffMainStat_Init () {
    gt_BuffMainStat = TriggerCreate("gt_BuffMainStat_Func");
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "MasterRangersMailleStrDex", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "MasterRangersMailleStrDex", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "MasterRangersMailleStrEnd", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "MasterRangersMailleStrEnd", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "MasterRangersMailleIntWil", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "MasterRangersMailleIntWil", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "Candle", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "Candle", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "WarHorn", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "WarHorn", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "IronbarkArmorTreeStack", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "IronbarkArmorTreeStack", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "IronbarkArmorElderTreeStack", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, "IronbarkArmorElderTreeStack", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TemporaryBuffs
//--------------------------------------------------------------------------------------------------
bool gt_TemporaryBuffs_Func (bool testConds, bool runActions) {
    string autoAC9E4E7D_val;
    // Variable Declarations
    unit lv_unit;
    unit lv_source;
    int lv_i;
    fixed lv_unitArmor;
    fixed lv_unitSight;
    fixed lv_deltaArmor;
    fixed lv_deltaSight;
    fixed lv_frostArmorPower;
    fixed lv_t;
    // Variable Initialization
    lv_unit = EventUnit();
    lv_source = UnitBehaviorEffectUnit(lv_unit, EventUnitBehavior(), c_effectUnitCaster, 0);
    lv_i = UnitGetOwner(lv_unit);
    lv_unitArmor = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "LifeArmor", lv_i));
    lv_unitSight = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Kobold", "Sight", lv_i));
    lv_frostArmorPower = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FrostArmorDamage", "AttributeBonus[Robotic]", lv_i));
    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "Kobold"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/A68E225B"), false);
    autoAC9E4E7D_val = EventUnitBehavior();
    if (autoAC9E4E7D_val == "ChefsInspiration") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
            lv_deltaArmor = 5.0;
        }
        else {
            lv_deltaArmor = -5.0;
        }
    }
    else if (autoAC9E4E7D_val == "FrostArmor") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
            lv_deltaArmor = lv_frostArmorPower;
            gv_frostArmorBonus[lv_i] = lv_deltaArmor;
        }
        else {
            lv_deltaArmor = (-1.0 * gv_frostArmorBonus[lv_i]);
            gv_frostArmorBonus[lv_i] = 0.0;
        }
    }
    else if (autoAC9E4E7D_val == "HolyArmor") {
        lv_t = libNtve_gf_ArithmeticRealClamp((UnitGetPropertyFixed(lv_source, c_unitPropLifeMax, c_unitPropCurrent) * 0.015), 0.0, 15.0);
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
            lv_deltaArmor = lv_t;
            UnitSetCustomValue(lv_unit, 3, lv_deltaArmor);
        }
        else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeRefresh)) {
            lv_deltaArmor = (lv_t - UnitGetCustomValue(lv_unit, 3));
            UnitSetCustomValue(lv_unit, 3, (UnitGetCustomValue(lv_unit, 3) + lv_deltaArmor));
        }
        else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
            lv_deltaArmor = (-1.0 * UnitGetCustomValue(lv_unit, 3));
            UnitSetCustomValue(lv_unit, 3, 0.0);
        }
    }
    else if (autoAC9E4E7D_val == "MiningExpertise") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
            lv_deltaArmor = 2.0;
        }
        else {
            lv_deltaArmor = -2.0;
        }
    }
    else if (autoAC9E4E7D_val == "AlbinoCavefish") {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
            lv_deltaArmor = 8.0;
            lv_deltaSight = -2.0;
        }
        else {
            lv_deltaArmor = -8.0;
            lv_deltaSight = 2.0;
        }
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "Kobold", "LifeArmor", lv_i, FixedToString((lv_unitArmor + lv_deltaArmor), 1));
    gf_ModifyUnitSight("Kobold", lv_i, lv_deltaSight);
    gf_UpdatePetStats(lv_i);
    TriggerDebugOutput(1, StringExternal("Param/Value/F4A25B9D"), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TemporaryBuffs_Init () {
    gt_TemporaryBuffs = TriggerCreate("gt_TemporaryBuffs_Func");
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "FrostArmor", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "FrostArmor", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "ChefsInspiration", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "ChefsInspiration", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "HolyArmor", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "HolyArmor", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "HolyArmor", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "MiningExpertise", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "MiningExpertise", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "AlbinoCavefish", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, "AlbinoCavefish", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TriggeredAttackEffects
//--------------------------------------------------------------------------------------------------
bool gt_TriggeredAttackEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;
    unit lv_target;
    int lv_i;
    fixed lv_r;
    // Variable Initialization
    lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_i = UnitGetOwner(lv_attacker);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(gf_KoboldMainHand(lv_attacker)) == "JudgmentGavel")) {
        UnitDamage(lv_attacker, "MagicalDamageDummy", lv_target, libNtve_gf_ArithmeticRealClamp((UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) * 0.03), 0.0, 30.0));
        UnitBehaviorAdd(lv_attacker, "HolyArmor", lv_target, 1);
    }
    else {
    }
    if ((UnitGetType(gf_KoboldArmor(lv_attacker)) == "SpellbreakerArmor") && (UnitHasBehavior(lv_target, "Spellbroken") == true)) {
        UnitCreateEffectUnit(lv_attacker, "SpellbreakerImpact", lv_target);
        UnitDamage(lv_attacker, "MagicalDamageDummy", lv_target, (2.0 * StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Wit", "AttributeBonus[Biological]", lv_i))));
        gf_HealUnit(lv_attacker, lv_attacker, (UnitGetPropertyFixed(lv_attacker, c_unitPropLifeMax, c_unitPropCurrent) * 0.1), true);
        UnitSetPropertyFixed(lv_attacker, c_unitPropEnergy, (UnitGetPropertyFixed(lv_attacker, c_unitPropEnergy, c_unitPropCurrent) + (UnitGetPropertyFixed(lv_attacker, c_unitPropEnergyMax, c_unitPropCurrent) * 0.1)));
        UnitBehaviorRemove(lv_target, "Spellbroken", 1);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TriggeredAttackEffects_Init () {
    gt_TriggeredAttackEffects = TriggerCreate("gt_TriggeredAttackEffects_Func");
    TriggerAddEventPlayerEffectUsed(gt_TriggeredAttackEffects, c_playerAny, "TriggeredAttackEffects");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DamageTrigger
//--------------------------------------------------------------------------------------------------
bool gt_DamageTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_assistedDmg;
    // Variable Initialization
    lv_assistedDmg = ((EventUnitDamageEffect() == "MeleeDamageDummyNoText") || (EventUnitDamageEffect() == "RangedDamageDummyNoText"));
    // Conditions
    if (testConds) {
        if (!((lv_assistedDmg == false))) {
            return false;
        }
        if (!((EventUnitDamageEffect() != "KillWithDamage"))) {
            return false;
        }
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }
        if (!((EventUnit() != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_noDamage = false;
    gv_damageTaken = EventUnitDamageAmount();
    gv_damageRaw = EventUnitDamageAbsorbed();
    gf_BlunderbussShotgun(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageEffect());
    gf_PailsadeRangedProtection(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageEffect());
    gf_Forestry20Heal(EventUnitDamageSourceUnit(), EventUnit(), gv_damageTaken, EventUnitDamageEffect());
    gf_WoundedFlash(EventUnit(), gv_damageTaken);
    gf_UnstableAnomalyAscent(EventUnit(), gv_damageTaken);
    gf_DamageText(EventUnitDamageSourceUnit(), EventUnit(), gv_damageTaken, (gv_damageRaw - gv_damageTaken), EventUnitDamageEffect());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DamageTrigger_Init () {
    gt_DamageTrigger = TriggerCreate("gt_DamageTrigger_Func");
    TriggerAddEventUnitDamaged(gt_DamageTrigger, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemSets
//--------------------------------------------------------------------------------------------------
bool gt_ItemSets_Func (bool testConds, bool runActions) {
    string set = EventUnitBehavior();
    unit lv_unit = EventUnit();
    int lv_i = UnitGetOwner(lv_unit);
    fixed lv_t;
    bool activate = EventUnitBehaviorChange() == c_unitBehaviorChangeActivate;
    color txtColor = Color(100, 0,0);
    string setName = "Set bonus lost: ";
    if(activate){
        txtColor = Color(0, 100, 0);
        setName = "Set bonus acquired: ";
    }
    if (set == "SetHeavyIron") {
        setName += "Heavy Iron";
        lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i));
        if (activate) {
            CatalogFieldValueSet(c_gameCatalogButton, "HeavyIronBreastplate", "Tooltip", lv_i, "This heavy plate provides excellent protection against most kinds of dangers. Combined with a heavy tower shield you will become nigh invincible!<n/><s val=\"TechDescription\">+14 Endurance<n/><c val=\"FFFF80\">Passive:</c> Increases armor by +6.</n></n><c val=\"00FF00\">Set bonus: +3 Strength, +8% Attack speed.</c>");
            CatalogFieldValueSet(c_gameCatalogButton, "HeavyTowerShield", "Tooltip", lv_i, "Provides excellent protection against those pesky archers and makes you feel reinvigorated every time the shield protects you from a projectile.<n/><s val=\"TechDescription\">+8 Endurance<n/><c val=\"FFFF80\">Passive:</c> Increases armor by +5.<n/><c val=\"FFFF80\">Passive:</c> Ranged attacks against you deal <d ref=\"1-Behavior,HeavyTowerShield,DamageResponse.ModifyFraction * 100\" precision=\"2\"/>% less damage and restore +1 stamina.</s></n></n><c val=\"00FF00\">Set bonus: +3 Strength, +8% Attack speed.</c>");
            CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i, FixedToString((lv_t + 3.0), 0));
        }
        else {
            CatalogFieldValueSet(c_gameCatalogButton, "HeavyIronBreastplate", "Tooltip", lv_i, "This heavy plate provides excellent protection against most kinds of dangers. Combined with a heavy tower shield you will become nigh invincible!<n/><s val=\"TechDescription\">+14 Endurance<n/><c val=\"FFFF80\">Passive:</c> Increases armor by +6.</n></n><c val=\"C0C0C0\">Set bonus: +3 Strength, +8% Attack speed.</n>(Requires Heavy Tower Shield)</c>");
            CatalogFieldValueSet(c_gameCatalogButton, "HeavyTowerShield", "Tooltip", lv_i, "Provides excellent protection against those pesky archers and makes you feel reinvigorated every time the shield protects you from a projectile.<n/><s val=\"TechDescription\">+8 Endurance<n/><c val=\"FFFF80\">Passive:</c> Increases armor by +5.<n/><c val=\"FFFF80\">Passive:</c> Ranged attacks against you deal <d ref=\"1-Behavior,HeavyTowerShield,DamageResponse.ModifyFraction * 100\" precision=\"2\"/>% less damage and restore +1 stamina.</s></n></n><c val=\"C0C0C0\">Set bonus: +3 Strength, +8% Attack speed.</n>(Requires Heavy Iron Breastplate)</c>");
            CatalogFieldValueSet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i, FixedToString((lv_t - 3.0), 0));
        }
    }
    else if(set == "SetRepeater"){
        setName += "Repeater";
        if (activate) {
            CatalogFieldValueSet(c_gameCatalogButton, "RepeatingCrossbow", "Tooltip", lv_i, "An engineering masterpiece. Miniaturized split chambers allows for several bolts to be fired in rapid succession, at the cost of some firepower and reload speed however.</n><s val=\"TechDescription\">+3 Strength</n>+3 Dexterity</n><c val=\"FFFF80\">Passive:</c> Increases your attack range to 4.5.</n><c val=\"FFFF80\">Passive:</c> Fires 2 additional bolts at enemies near the target, but your attacks only deal 50% damage and your base attack speed is reduced.</s></n></n><c val=\"00FF00\">Set bonus: <d ref=\"Effect,RepeaterStats,Amount\"/>% Chance to fire 1 extra bolt.</n>Each point in Foraging adds 1.2%</n>Each point in Forestry adds .6%");
            CatalogFieldValueSet(c_gameCatalogButton, "BearShamansShroud", "Tooltip", lv_i, "The ancient kobold shamans lived in harmony with all the beasts in the forest. Together they protected their realm against all kinds of evil being for hundreds of years.<n/><s val=\"TechDescription\">+4 Endurance<n/>+5 Intelligence<n/>+5 Willpower (+<d ref=\"Effect,BearShamanWillpower,Amount\"/>)<n/><c val=\"FFFF80\">Passive:</c> Increases armor by +3.</n><c val=\"FFFF80\">Passive:</c> Bear pets gain +2 armor.</n><c val=\"FFFF80\">Passive:</c> Gain additional Willpower equal to 10% of your attack damage.</s></n></n><c val=\"00FF00\">Set bonus: <d ref=\"Effect,RepeaterStats,Amount\"/>% Chance to fire 1 extra bolt.</n>Each point in Foraging adds 1.2%</n>Each point in Forestry adds .6%");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogButton, "RepeatingCrossbow", "Tooltip", lv_i, "An engineering masterpiece. Miniaturized split chambers allows for several bolts to be fired in rapid succession, at the cost of some firepower and reload speed however.</n><s val=\"TechDescription\">+3 Strength</n>+3 Dexterity</n><c val=\"FFFF80\">Passive:</c> Increases your attack range to 4.5.</n><c val=\"FFFF80\">Passive:</c> Fires 2 additional bolts at enemies near the target, but your attacks only deal 50% damage and your base attack speed is reduced.</s></n></n><c val=\"C0C0C0\">Set bonus: <d ref=\"Effect,RepeaterStats,Amount\"/>% Chance to fire 1 extra bolt.</n>Each point in Foraging adds 1.2%</n>Each point in Forestry adds .6%</n>(Requires Bear Shaman's Shroud)</c>");
            CatalogFieldValueSet(c_gameCatalogButton, "BearShamansShroud", "Tooltip", lv_i, "The ancient kobold shamans lived in harmony with all the beasts in the forest. Together they protected their realm against all kinds of evil being for hundreds of years.<n/><s val=\"TechDescription\">+4 Endurance<n/>+5 Intelligence<n/>+5 Willpower (+<d ref=\"Effect,BearShamanWillpower,Amount\"/>)<n/><c val=\"FFFF80\">Passive:</c> Increases armor by +3.</n><c val=\"FFFF80\">Passive:</c> Bear pets gain +2 armor.</n><c val=\"FFFF80\">Passive:</c> Gain additional Willpower equal to 10% of your attack damage.</s></n></n><c val=\"C0C0C0\">Set bonus: <d ref=\"Effect,RepeaterStats,Amount\"/>% Chance to fire 1 extra bolt.</n>Each point in Foraging adds 1.2%</n>Each point in Forestry adds .6%</n>(Requires Repeating Crossbow)</c>");
        }
    }
    gf_Quicktag(lv_unit, TextWithColor(StringToText(setName), txtColor), 2.0, 24);
    gf_UpdateStatsAll(lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ItemSets_Init () {
    gt_ItemSets = TriggerCreate("gt_ItemSets_Func");
    TriggerAddEventUnitBehaviorChange(gt_ItemSets, null, "SetHeavyIron", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_ItemSets, null, "SetHeavyIron", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_ItemSets, null, "SetRepeater", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_ItemSets, null, "SetRepeater", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ItemDynamicTooltip
//--------------------------------------------------------------------------------------------------
bool ItemDynamicTooltip_Periodic(bool cond, bool actions){
    fixed foraging;
    fixed mining;
    fixed forestry;
    fixed cooking;
    fixed artisan;
    int i = 0;
    for(;i<10; i+=1){
        if (PlayerStatus(i) == c_playerStatusActive){
            foraging = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForagingStats", "Amount", i));
            mining = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ExcavatingStats", "Amount", i));
            forestry = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ForestingStats", "Amount", i));
            cooking = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CheffingStats", "Amount", i));
            artisan = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ArtisanshipStats", "Amount", i));
            // Repeater Set
            CatalogFieldValueSet(c_gameCatalogEffect, "RepeaterStats", "Amount", i, FixedToString(10 + (forestry*.6 + foraging*1.2),0));
        }
    }
    return true;
}
void ItemDynamicTooltip_Init(){
    TriggerAddEventTimePeriodic(TriggerCreate("ItemDynamicTooltip_Periodic"), 1.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GenericUseItem
//--------------------------------------------------------------------------------------------------
bool gt_GenericUseItem_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "Kobold") && ((UnitGetType(EventUnitInventoryItem()) == "RawLamb") || (UnitGetType(EventUnitInventoryItem()) == "RawWolfMeat") || (UnitGetType(EventUnitInventoryItem()) == "RawPheasant") || (UnitGetType(EventUnitInventoryItem()) == "RawStagMeat") || (UnitGetType(EventUnitInventoryItem()) == "RoastedLamb") || (UnitGetType(EventUnitInventoryItem()) == "WolfSteak") || (UnitGetType(EventUnitInventoryItem()) == "RoastedPheasantWithBerrySauce") || (UnitGetType(EventUnitInventoryItem()) == "SpicedLambFeast") || (UnitGetType(EventUnitInventoryItem()) == "GrilledWolfEntrecote") || (UnitGetType(EventUnitInventoryItem()) == "BeerBraisedPheasant") || (UnitGetType(EventUnitInventoryItem()) == "SmokedLambSirloin") || (UnitGetType(EventUnitInventoryItem()) == "StagStew") || (UnitGetType(EventUnitInventoryItem()) == "GiantSunfish") || (UnitGetType(EventUnitInventoryItem()) == "SlipperyEel") || (UnitGetType(EventUnitInventoryItem()) == "ToxicFrog") || (UnitGetType(EventUnitInventoryItem()) == "ForestTrout") || (UnitGetType(EventUnitInventoryItem()) == "HighlandGuppy") || (UnitGetType(EventUnitInventoryItem()) == "AlbinoCavefish") || (UnitGetType(EventUnitInventoryItem()) == "StripedLurker") || (UnitGetType(EventUnitInventoryItem()) == "JewelDanio") || (UnitGetType(EventUnitInventoryItem()) == "WaterScorpion") || (UnitGetType(EventUnitInventoryItem()) == "FireAmmonite") || (UnitGetType(EventUnitInventoryItem()) == "BlindRainfish") || (UnitGetType(EventUnitInventoryItem()) == "TigerGourami") || (UnitGetType(EventUnitInventoryItem()) == "MurlocTreat") || (UnitGetType(EventUnitInventoryItem()) == "HandfulofBerries") || (UnitGetType(EventUnitInventoryItem()) == "Beer") || (UnitGetType(EventUnitInventoryItem()) == "Sageberry"))) {
        gf_EatFood(EventUnit(), EventUnitInventoryItem(), true);
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "Nightcrawler")) {
        gf_ItemNightcrawler(EventUnit(), EventUnitInventoryItem(), true);
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "LumberParts")) {
        gf_ItemLumberParts(EventUnit(), EventUnitInventoryItem());
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "CleansingDraught")) {
        gf_ItemCleansingPotion(EventUnit(), EventUnitInventoryItem(), true);
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "BearPelt")) {
        gf_ItemBearPeltSplit(EventUnit(), EventUnitInventoryItem(), true);
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "ReapersHand")) {
        gf_ItemRaiseDead(EventUnit(), EventUnitInventoryItem(), true);
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "IronShovel")) {
        gf_ItemShovelDig(EventUnit(), EventUnitInventoryItem(), true);
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "MurlocDoomhammer")) {
        gf_ItemMurlocDoomhammer(EventUnit(), EventUnitInventoryItem());
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "GoldenHauberk")) {
        gf_ItemGoldenHauberk(EventUnit(), EventUnitInventoryItem());
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "Demonward")) {
        gf_ItemDemonward(EventUnit(), EventUnitInventoryItem());
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "OrbofDarkness")) {
        gf_ItemOrbofDarkness(EventUnit(), EventUnitInventoryItem(), true);
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "LiquidatorSpellblade")) {
        gf_ItemLiquidatorSpellblade(EventUnit());
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "ViciousJavelin")) {
        gf_ItemJavelin(EventUnit());
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "KoboldFireworks")) {
        gf_ItemFireworks(EventUnit(), EventUnitInventoryItem());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GenericUseItem_Init () {
    gt_GenericUseItem = TriggerCreate("gt_GenericUseItem_Func");
    TriggerAddEventUnitInventoryChange(gt_GenericUseItem, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipmentGain
//--------------------------------------------------------------------------------------------------
bool gt_EquipmentGain_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
        if (!((UnitInventoryContainer(EventUnitInventoryItem()) != gv_backpackSlot))) {
            return false;
        }
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextExpressionSetToken("Param/Expression/699539F1", "A", StringExternal("Param/Value/B702D98B"));
    TextExpressionSetToken("Param/Expression/699539F1", "B", UnitTypeGetName(UnitGetType(EventUnitInventoryItem())));
    TextExpressionSetToken("Param/Expression/699539F1", "C", StringExternal("Param/Value/F923D8E9"));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/699539F1"), false);
    gf_EquipmentChange(UnitGetOwner(EventUnit()), EventUnitInventoryItem(), false, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EquipmentGain_Init () {
    gt_EquipmentGain = TriggerCreate("gt_EquipmentGain_Func");
    TriggerAddEventUnitInventoryChange(gt_EquipmentGain, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipmentMoveIn
//--------------------------------------------------------------------------------------------------
bool gt_EquipmentMoveIn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
        if (!((UnitInventoryContainer(EventUnitInventoryItem()) != gv_backpackSlot))) {
            return false;
        }
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextExpressionSetToken("Param/Expression/820E5BBB", "A", StringExternal("Param/Value/E92BA087"));
    TextExpressionSetToken("Param/Expression/820E5BBB", "B", UnitTypeGetName(UnitGetType(EventUnitInventoryItem())));
    TextExpressionSetToken("Param/Expression/820E5BBB", "C", StringExternal("Param/Value/7DD19647"));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/820E5BBB"), false);
    gf_EquipmentChange(UnitGetOwner(EventUnit()), EventUnitInventoryItem(), false, 2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EquipmentMoveIn_Init () {
    gt_EquipmentMoveIn = TriggerCreate("gt_EquipmentMoveIn_Func");
    TriggerAddEventUnitInventoryChange(gt_EquipmentMoveIn, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipmentMoveOut
//--------------------------------------------------------------------------------------------------
bool gt_EquipmentMoveOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(EventUnit());
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
        if (!((EventUnitInventoryItemContainer() != gv_backpackSlot))) {
            return false;
        }
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextExpressionSetToken("Param/Expression/4478EC45", "A", StringExternal("Param/Value/2F2176E3"));
    TextExpressionSetToken("Param/Expression/4478EC45", "B", UnitTypeGetName(UnitGetType(EventUnitInventoryItem())));
    TextExpressionSetToken("Param/Expression/4478EC45", "C", StringExternal("Param/Value/A01473A4"));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/4478EC45"), false);
    gf_EquipmentChange(UnitGetOwner(EventUnit()), EventUnitInventoryItem(), true, 3);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EquipmentMoveOut_Init () {
    gt_EquipmentMoveOut = TriggerCreate("gt_EquipmentMoveOut_Func");
    TriggerAddEventUnitInventoryChange(gt_EquipmentMoveOut, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipmentLose
//--------------------------------------------------------------------------------------------------
bool gt_EquipmentLose_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
        if (!((EventUnitInventoryItemContainer() != gv_backpackSlot))) {
            return false;
        }
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextExpressionSetToken("Param/Expression/1F19A392", "A", StringExternal("Param/Value/1392725B"));
    TextExpressionSetToken("Param/Expression/1F19A392", "B", UnitTypeGetName(UnitGetType(EventUnitInventoryItem())));
    TextExpressionSetToken("Param/Expression/1F19A392", "C", StringExternal("Param/Value/B7B1B99A"));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/1F19A392"), false);
    gf_EquipmentChange(UnitGetOwner(EventUnit()), EventUnitInventoryItem(), true, 4);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EquipmentLose_Init () {
    gt_EquipmentLose = TriggerCreate("gt_EquipmentLose_Func");
    TriggerAddEventUnitInventoryChange(gt_EquipmentLose, null, c_unitInventoryChangeLoses, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RepeatingCrossbow
//--------------------------------------------------------------------------------------------------
const string c_repeatingCrossbowBonus = "<c val=\"80,80,125\">Extra bolt!</c>";
bool RepeatingCrossbow_OnEffect(bool cond, bool actions){
    unit cast = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    unit targ = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    int cPlayer = UnitGetOwner(cast);
    fixed chance = .1 + .006 * gv_skillForestry[cPlayer] + .012 * gv_skillForaging[cPlayer];
    string effect = "RepeatingCrossbowPersistent";
    if (RandomFixed(0,1) <= chance && UnitHasBehavior(cast, "SetRepeater")){
        effect = "RepeatingCrossbowPersistentSetBonus";
        gf_Quicktag(cast, StringToText(c_repeatingCrossbowBonus), 2.5, 15);
    }
    
    UnitCreateEffectUnit(cast, effect, targ);
    return true;
}
void RepeatingCrossbow_Init(){
    TriggerAddEventPlayerEffectUsed(TriggerCreate("RepeatingCrossbow_OnEffect"), c_playerAny, "RepeatingCrossbowSet");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ScutumJoy
//--------------------------------------------------------------------------------------------------
bool gt_ScutumJoy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    // Conditions
    if (testConds) {
        if (!((gv_scutumExclaimed[lv_i] == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_scutumExclaimed[lv_i] = true;
    TextExpressionSetToken("Param/Expression/1D6E9D4B", "A", gf_GetPlayerName(lv_i, 0));
    TextExpressionSetToken("Param/Expression/1D6E9D4B", "B", StringExternal("Param/Value/ED1BAF35"));
    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble("Param/Expression/1D6E9D4B"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/9E4C6762")));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ScutumJoy_Init () {
    gt_ScutumJoy = TriggerCreate("gt_ScutumJoy_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScutumJoy, c_playerAny, "SpikedShadowstoneScutumExclamation");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SleepingBag
//--------------------------------------------------------------------------------------------------
bool gt_SleepingBag_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AnimPlay Sleep Death");
    Wait(1.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AnimSetPaused Sleep");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SleepingBag_Init () {
    gt_SleepingBag = TriggerCreate("gt_SleepingBag_Func");
    TriggerAddEventPlayerEffectUsed(gt_SleepingBag, c_playerAny, "SleepingBagDelayApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BlunderbussCounter
//--------------------------------------------------------------------------------------------------
bool gt_BlunderbussCounter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_gameStats.lv_boomstickTime += 1;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BlunderbussCounter_Init () {
    gt_BlunderbussCounter = TriggerCreate("gt_BlunderbussCounter_Func");
    TriggerAddEventPlayerEffectUsed(gt_BlunderbussCounter, c_playerAny, "BlunderbussTimeCounter");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WandProcDmg
//--------------------------------------------------------------------------------------------------
bool gt_WandProcDmg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_energyBurn;
    fixed lv_damage;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_energyBurn = (0.04 * UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergyMax, c_unitPropCurrent));
    lv_damage = (2.5 * libNtve_gf_ArithmeticRealClamp(UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, c_unitPropCurrent), 0.0, lv_energyBurn));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, c_unitPropCurrent) - lv_energyBurn));
    UnitDamage(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ElderWandBonusDamage", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_damage);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WandProcDmg_Init () {
    gt_WandProcDmg = TriggerCreate("gt_WandProcDmg_Func");
    TriggerAddEventPlayerEffectUsed(gt_WandProcDmg, c_playerAny, "ElderWandTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReapersHandCombine
//--------------------------------------------------------------------------------------------------
bool gt_ReapersHandCombine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_inventory = UnitInventoryGroup(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    // Actions
    if (!runActions) {
        return true;
    }
    lv_inventory = UnitGroupFilter("SkeletalFinger", c_playerAny, lv_inventory, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) >= 3)) {
        lv_inventory = UnitGroupFilter("SkeletalFinger", c_playerAny, lv_inventory, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3);
        UnitGroupLoopBegin(lv_inventory);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_CreateItemForUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ReapersHand", 1);
        SoundPlay(SoundLink("SkeletalTransmutation", -1), PlayerGroupSingle(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))), 100.0, 0.0);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReapersHandCombine_Init () {
    gt_ReapersHandCombine = TriggerCreate("gt_ReapersHandCombine_Func");
    TriggerAddEventPlayerEffectUsed(gt_ReapersHandCombine, c_playerAny, "SkeletalFingersTransmuteTrig");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HeavyTowerShieldTrg
//--------------------------------------------------------------------------------------------------
bool gt_HeavyTowerShieldTrg_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_stamina += 1.0;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeavyTowerShieldTrg_Init () {
    gt_HeavyTowerShieldTrg = TriggerCreate("gt_HeavyTowerShieldTrg_Func");
    TriggerAddEventPlayerEffectUsed(gt_HeavyTowerShieldTrg, c_playerAny, "HeavyTowerShieldTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FearTrigger
//--------------------------------------------------------------------------------------------------
bool gt_FearTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;
    point lv_sourcePoint;
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = UnitBehaviorEffectUnit(lv_target, "Fear", c_effectUnitCaster, 0);
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(lv_caster))) {
            return false;
        }
        if (!(gf_UnitExists(lv_target))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_sourcePoint = UnitGetPosition(lv_caster);
    if ((lv_sourcePoint == null)) {
        lv_sourcePoint = PointWithOffsetPolar(UnitGetPosition(lv_target), 1.0, libNtve_gf_RandomAngle());
    }
    else {
    }
    UnitIssueOrder(lv_target, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_target), RandomFixed(1.0, 1.5), (AngleBetweenPoints(lv_sourcePoint, UnitGetPosition(lv_target)) + RandomFixed(-50.0, 50.0)))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FearTrigger_Init () {
    gt_FearTrigger = TriggerCreate("gt_FearTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_FearTrigger, c_playerAny, "FearTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BloodthristryGreed
//--------------------------------------------------------------------------------------------------
bool gt_BloodthirstyGreed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "", "", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 1);
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BloodthirstyGreed_Init () {
    gt_BloodthirstyGreed = TriggerCreate("gt_BloodthirstyGreed_Func");
    TriggerAddEventPlayerEffectUsed(gt_BloodthirstyGreed, c_playerAny, "BloodthirstyPirateGreed");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ScrollofTransmutation
//--------------------------------------------------------------------------------------------------
bool gt_ScrollofTransmutation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_t;
    point lv_p;
    fixed lv_a;
    int lv_o;
    int lv_petOwner;
    int lv_stacks;
    // Variable Initialization
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetPosition(lv_t);
    lv_a = UnitGetFacing(lv_t);
    lv_o = UnitGetOwner(lv_t);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(lv_t) == "StoneDeposit")) {
        UnitRemove(lv_t);
        UnitCreate(1, "GoldDeposit", c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
        UnitSetCustomValue(UnitLastCreated(), 0, RandomInt(80, 120));
        gf_UpdateResourceTooltip(UnitLastCreated());
    }
    else if ((UnitGetType(lv_t) == "MapleTree")) {
        UnitRemove(lv_t);
        UnitCreate(1, "ElderTree", c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
        UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
    }
    else if ((UnitGetType(lv_t) == "BerryBush")) {
        UnitRemove(lv_t);
        UnitGroupLoopBegin(UnitGroup("Berry", c_playerAny, RegionCircle(lv_p, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitCreate(1, "CulinaryHerbBush", c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
        gf_SpawnHerbs(UnitLastCreated());
    }
    else if ((UnitGetType(lv_t) == "Bear")) {
        if ((UnitHasBehavior(lv_t, "Tamed") == true)) {
            lv_petOwner = UnitGetOwner(lv_t);
        }
        else {
        }
        lv_stacks = UnitBehaviorCount(lv_t, "PredatoryStrength");
        gf_SetScaledStats("FrostBear", lv_o);
        UnitRemove(lv_t);
        UnitCreate(1, "FrostBear", c_unitCreateIgnorePlacement, lv_o, lv_p, lv_a);
        UnitBehaviorAdd(UnitLastCreated(), "PredatoryStrength", UnitLastCreated(), lv_stacks);
        if ((lv_petOwner != 0)) {
            UnitCreateEffectUnit(gv_playerData[lv_o].lv_kobold, "TamedApply", UnitLastCreated());
            UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/1C61D891"), gf_GetPlayerName(lv_o, 0), StringExternal("Param/Value/DE60C76A"));
            UnitGroupAdd(gv_pets[lv_o], UnitLastCreated());
            gf_UpdatePetStats(lv_o);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ScrollofTransmutation_Init () {
    gt_ScrollofTransmutation = TriggerCreate("gt_ScrollofTransmutation_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScrollofTransmutation, c_playerAny, "ScrollofTransmutation");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocSkullFragments
//--------------------------------------------------------------------------------------------------
bool gt_MurlocSkullFragments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fragments;
    // Variable Initialization
    lv_fragments = UnitGroupFilter("MurlocSkullFragment", c_playerAny, UnitInventoryGroup(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(lv_fragments, c_unitCountAlive) == 3)) {
        UnitGroupLoopBegin(lv_fragments);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_DropandRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_CreateItemForUnit(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "MurlocSkull", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)))), c_messageAreaError, StringExternal("Param/Value/B41E2EA7"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocSkullFragments_Init () {
    gt_MurlocSkullFragments = TriggerCreate("gt_MurlocSkullFragments_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocSkullFragments, c_playerAny, "MurlocSkullFragments");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FellFramesTrigger
//--------------------------------------------------------------------------------------------------
bool gt_FelFlamesTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_stealValue = 3.0;
    unit lv_caster;
    unit lv_target;
    fixed lv_intensity;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_intensity = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FelFireTorchIntensity", "Amount", UnitGetOwner(lv_caster)));
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(lv_target) == "Kobold")) {
        gv_playerData[UnitGetOwner(lv_target)].lv_warmth -= lv_stealValue;
    }
    else {
    }
    if ((lv_intensity >= 35.0)) {
        UnitBehaviorAdd(lv_target, "FelFlames", lv_caster, 1);
    }
    else {
    }
    gf_ModifyTorchIntensity(UnitGetOwner(lv_caster), lv_stealValue);
    UnitBehaviorAdd(lv_caster, "FelFireTorchGracePeriod", lv_caster, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FelFlamesTrigger_Init () {
    gt_FelFlamesTrigger = TriggerCreate("gt_FelFlamesTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_FelFlamesTrigger, c_playerAny, "FelFlamesTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BloodcleaverDamage
//--------------------------------------------------------------------------------------------------
bool gt_BloodcleaverDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    fixed lv_powerFactor;
    fixed lv_targetDamage;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_powerFactor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "BloodcleaverStats", "Amount", UnitGetOwner(lv_caster)));
    lv_targetDamage = (lv_powerFactor * (0.04 * UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent)));
    // Actions
    if (!runActions) {
        return true;
    }
    UnitDamage(lv_caster, "BloodcleaverDamageDummy", lv_caster, ((UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent) * 0.01) * lv_powerFactor));
    UnitDamage(lv_caster, "BloodcleaverDamageDummy", lv_target, lv_targetDamage);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BloodcleaverDamage_Init () {
    gt_BloodcleaverDamage = TriggerCreate("gt_BloodcleaverDamage_Func");
    TriggerAddEventPlayerEffectUsed(gt_BloodcleaverDamage, c_playerAny, "BloodcleaverTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BloodcleaverDrain
//--------------------------------------------------------------------------------------------------
bool gt_BloodcleaverDrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    fixed lv_powerFactor;
    fixed lv_heals;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_powerFactor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "BloodcleaverStats", "Amount", UnitGetOwner(lv_caster)));
    lv_heals = (UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) * (0.2 * lv_powerFactor));
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(lv_caster, "BloodcleaverHaste", lv_caster, 1);
    lv_heals = libNtve_gf_ArithmeticRealClamp(lv_heals, 0.0, 200.0);
    if ((lv_heals >= 1)) {
        gf_HealUnit(lv_caster, lv_caster, lv_heals, true);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BloodcleaverDrain_Init () {
    gt_BloodcleaverDrain = TriggerCreate("gt_BloodcleaverDrain_Func");
    TriggerAddEventPlayerEffectUsed(gt_BloodcleaverDrain, c_playerAny, "BloodcleaverDrain");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FrostNeedleTransform
//--------------------------------------------------------------------------------------------------
bool gt_FrostNeedleTransform_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "FrostNeedle"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_DropandRemove(EventUnitInventoryItem());
    gf_CreateItemForUnit(EventUnit(), "FrostBarrier", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FrostNeedleTransform_Init () {
    gt_FrostNeedleTransform = TriggerCreate("gt_FrostNeedleTransform_Func");
    TriggerAddEventUnitInventoryChange(gt_FrostNeedleTransform, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FrostBarrierTransform
//--------------------------------------------------------------------------------------------------
bool gt_FrostBarrierTransform_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "FrostBarrier"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_DropandRemove(EventUnitInventoryItem());
    gf_CreateItemForUnit(EventUnit(), "FrostNeedle", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FrostBarrierTransform_Init () {
    gt_FrostBarrierTransform = TriggerCreate("gt_FrostBarrierTransform_Func");
    TriggerAddEventUnitInventoryChange(gt_FrostBarrierTransform, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ScutumBlock
//--------------------------------------------------------------------------------------------------
bool gt_ScutumBlock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blocker;
    unit lv_attacker;
    int lv_i;
    fixed lv_damage;
    // Variable Initialization
    lv_blocker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_i = UnitGetOwner(lv_blocker);
    lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Advancedtag(lv_blocker, UnitGetOwner(lv_blocker), StringExternal("Param/Value/32F4C75C"), 2.0, 24);
    gf_Advancedtag(lv_blocker, UnitGetOwner(lv_attacker), StringExternal("Param/Value/4DFFF1B3"), 2.0, 24);
    if ((DistanceBetweenPoints(UnitGetPosition(lv_blocker), UnitGetPosition(lv_attacker)) <= gv_meleeRange)) {
        UnitDamage(lv_blocker, "MeleeDamageDummy", lv_attacker, lv_damage);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ScutumBlock_Init () {
    gt_ScutumBlock = TriggerCreate("gt_ScutumBlock_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScutumBlock, c_playerAny, "SpikedShadowstoneScutumBlockerRemove");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BucklerBlock
//--------------------------------------------------------------------------------------------------
bool gt_BucklerBlock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blocker;
    unit lv_attacker;
    int lv_i;
    fixed lv_damage;
    // Variable Initialization
    lv_blocker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_i = UnitGetOwner(lv_blocker);
    lv_damage = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Physique", "AttributeBonus[Armored]", lv_i)) * 0.5);
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Advancedtag(lv_blocker, UnitGetOwner(lv_blocker), StringExternal("Param/Value/3F3B73B0"), 2.0, 24);
    gf_Advancedtag(lv_blocker, UnitGetOwner(lv_attacker), StringExternal("Param/Value/3D29D8D7"), 2.0, 24);
    if ((DistanceBetweenPoints(UnitGetPosition(lv_blocker), UnitGetPosition(lv_attacker)) <= gv_meleeRange)) {
        UnitDamage(lv_blocker, "MeleeDamageDummy", lv_attacker, lv_damage);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BucklerBlock_Init () {
    gt_BucklerBlock = TriggerCreate("gt_BucklerBlock_Func");
    TriggerAddEventPlayerEffectUsed(gt_BucklerBlock, c_playerAny, "IronBandedBucklerBlockerRemove");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GoldenHauberkHeal
//--------------------------------------------------------------------------------------------------
bool gt_GoldenHauberkHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_haels;
    // Variable Initialization
    lv_haels = (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent) * (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StatsGoldenHauberkHeal", "Amount", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)))) * 0.01));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_haels, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GoldenHauberkHeal_Init () {
    gt_GoldenHauberkHeal = TriggerCreate("gt_GoldenHauberkHeal_Func");
    TriggerAddEventPlayerEffectUsed(gt_GoldenHauberkHeal, c_playerAny, "GoldenHauberkHealTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LightLeatherShieldTrigger
//--------------------------------------------------------------------------------------------------
bool gt_LightLeatherShieldTrigger_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_stamina -= 5.0;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LightLeatherShieldTrigger_Init () {
    gt_LightLeatherShieldTrigger = TriggerCreate("gt_LightLeatherShieldTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_LightLeatherShieldTrigger, c_playerAny, "LightLeatherShieldTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CelestialOrbHeal
//--------------------------------------------------------------------------------------------------
bool gt_CelestialOrbHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    // Variable Initialization
    lv_amount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CelestialOrbHealAmount", "Amount", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CelestialOrbCooldown", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_amount, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CelestialOrbHeal_Init () {
    gt_CelestialOrbHeal = TriggerCreate("gt_CelestialOrbHeal_Func");
    TriggerAddEventPlayerEffectUsed(gt_CelestialOrbHeal, c_playerAny, "CelestialOrbHeal");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: JavelinDummyCooldown
//--------------------------------------------------------------------------------------------------
bool gt_JavelinDummyCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitAbilitySpend(lv_caster, AbilityCommand("JavelinCooldown", 0), c_spendLocationPlayer);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_JavelinDummyCooldown_Init () {
    gt_JavelinDummyCooldown = TriggerCreate("gt_JavelinDummyCooldown_Func");
    TriggerAddEventPlayerEffectUsed(gt_JavelinDummyCooldown, c_playerAny, "ViciousJavelinLM");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LiquidatorSpellblade
//--------------------------------------------------------------------------------------------------
bool gt_LiquidatorSpellblade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_CreateModelAtPoint("LiquidatorSpellbladeLaunch", UnitGetPosition(lv_caster));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((AngleBetweenPoints(UnitGetPosition(lv_caster), UnitGetPosition(lv_target)) + 90.0)));
    UnitSetPosition(lv_caster, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_target), (UnitGetPropertyFixed(lv_caster, c_unitPropRadius, c_unitPropCurrent) + UnitGetPropertyFixed(lv_target, c_unitPropRadius, c_unitPropCurrent)), UnitGetPosition(lv_caster)), false);
    libNtve_gf_CreateModelAtPoint("LiquidatorSpellbladeImpact", UnitGetPosition(lv_caster));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((AngleBetweenPoints(UnitGetPosition(lv_target), UnitGetPosition(lv_caster)) + 90.0)));
    UnitAbilitySpend(lv_caster, AbilityCommand("LiquidatorSpellbladeCooldown", 0), c_spendLocationPlayer);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LiquidatorSpellblade_Init () {
    gt_LiquidatorSpellblade = TriggerCreate("gt_LiquidatorSpellblade_Func");
    TriggerAddEventPlayerEffectUsed(gt_LiquidatorSpellblade, c_playerAny, "LiquidatorSpellbladeTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GravesingerGhoulSpawn
//--------------------------------------------------------------------------------------------------
bool gt_GravesingerGhoulSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    // Actions
    if (!runActions) {
        return true;
    }
    gf_SetScaledStats("Ghoul", lv_i);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GravesingerGhoulSpawn_Init () {
    gt_GravesingerGhoulSpawn = TriggerCreate("gt_GravesingerGhoulSpawn_Func");
    TriggerAddEventPlayerEffectUsed(gt_GravesingerGhoulSpawn, c_playerAny, "SummonGhoul");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocketOn
//--------------------------------------------------------------------------------------------------
bool gt_MurlocketOn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(gv_playerData[UnitGetOwner(EventUnit())].lv_murlocSlaves);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "MurlocRebelSpirit", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocketOn_Init () {
    gt_MurlocketOn = TriggerCreate("gt_MurlocketOn_Func");
    TriggerAddEventUnitBehaviorChange(gt_MurlocketOn, null, "TheMurlocket", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocketOff
//--------------------------------------------------------------------------------------------------
bool gt_MurlocketOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(gv_playerData[UnitGetOwner(EventUnit())].lv_murlocSlaves);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "MurlocRebelSpirit", 1);
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocketOff_Init () {
    gt_MurlocketOff = TriggerCreate("gt_MurlocketOff_Func");
    TriggerAddEventUnitBehaviorChange(gt_MurlocketOff, null, "TheMurlocket", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TwinThrowingAxesFrenzy
//--------------------------------------------------------------------------------------------------
bool gt_TwinThrowingAxesFrenzy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;
    unit lv_target;
    int lv_i;
    // Variable Initialization
    lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_i = UnitGetOwner(lv_attacker);
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(gv_playerData[lv_i].lv_twinThrowingAxesFocus)) {
        if ((gv_playerData[lv_i].lv_twinThrowingAxesFocus == lv_target)) {
            UnitBehaviorAdd(lv_attacker, "ThrowingFrenzy", lv_attacker, 1);
        }
        else {
            gv_playerData[lv_i].lv_twinThrowingAxesFocus = lv_target;
            UnitBehaviorRemove(lv_attacker, "ThrowingFrenzy", 5);
        }
    }
    else {
        gv_playerData[lv_i].lv_twinThrowingAxesFocus = lv_target;
        UnitBehaviorAdd(lv_attacker, "ThrowingFrenzy", lv_attacker, 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TwinThrowingAxesFrenzy_Init () {
    gt_TwinThrowingAxesFrenzy = TriggerCreate("gt_TwinThrowingAxesFrenzy_Func");
    TriggerAddEventPlayerEffectUsed(gt_TwinThrowingAxesFrenzy, c_playerAny, "TwinThrowingAxesLaunchLeft");
    TriggerAddEventPlayerEffectUsed(gt_TwinThrowingAxesFrenzy, c_playerAny, "TwinThrowingAxesLaunchRight");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupFishData
//--------------------------------------------------------------------------------------------------
bool gt_SetupFishData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_fishRegion[1] = gv_regionFishMarSara001;
    RegionAddRegion(gv_fishRegion[1], gv_regionFishMarSara001);
    gv_fishRegionEleveation[1] = 2.0;
    gv_fishRegion[2] = gv_regionFishBelShir001;
    RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir002);
    RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir003);
    RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir004);
    RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir005);
    RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir006);
    RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir007);
    RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir008);
    gv_fishRegionEleveation[2] = 6.0;
    gv_fishRegion[3] = gv_regionFishShakuras001;
    RegionAddRegion(gv_fishRegion[3], gv_regionFishShakuras002);
    RegionAddRegion(gv_fishRegion[3], gv_regionFishShakuras003);
    gv_fishRegionEleveation[3] = 6.0;
    gv_fishRegion[4] = gv_regionFishSouthlands2001;
    RegionAddRegion(gv_fishRegion[4], gv_regionFishSouthlands2002);
    gv_fishRegionEleveation[4] = 7.65;
    gv_fishRegion[5] = gv_regionFishSouthlands3001;
    RegionAddRegion(gv_fishRegion[5], gv_regionFishSouthlands3002);
    gv_fishRegionEleveation[5] = 11.5;
    gv_fishRegion[6] = gv_regionFishZhakulDas001;
    RegionAddRegion(gv_fishRegion[6], gv_regionFishZhakulDas002);
    gv_fishRegionEleveation[6] = 11.0;
    gv_fishReward[1] = "GiantSunfish";
    gv_fishReward[2] = "SlipperyEel";
    gv_fishReward[3] = "ToxicFrog";
    gv_fishReward[4] = "ForestTrout";
    gv_fishReward[5] = "HighlandGuppy";
    gv_fishReward[6] = "AlbinoCavefish";
    gv_fishReward[7] = "StripedLurker";
    gv_fishReward[8] = "JewelDanio";
    gv_fishReward[9] = "WaterScorpion";
    gv_fishReward[10] = "FireAmmonite";
    gv_fishReward[11] = "BlindRainfish";
    gv_fishReward[12] = "TigerGourami";
    gv_fishReward[13] = "MurlocTreat";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupFishData_Init () {
    gt_SetupFishData = TriggerCreate("gt_SetupFishData_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FishingRodUse
//--------------------------------------------------------------------------------------------------
bool gt_FishingRodUse_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_FishingStart(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)))) {
            return false;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FishingRodUse_Init () {
    gt_FishingRodUse = TriggerCreate("gt_FishingRodUse_Func");
    TriggerAddEventPlayerEffectUsed(gt_FishingRodUse, c_playerAny, "FishingRodSet");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FishingTargetBob
//--------------------------------------------------------------------------------------------------
bool gt_FishingTargetBob_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fishingTarget;
    fixed lv_targetH;
    // Variable Initialization
    lv_fishingTarget = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetH = UnitGetHeight(lv_fishingTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetCustomValue(lv_fishingTarget, 0) == 0.0)) {
        UnitSetCustomValue(lv_fishingTarget, 0, 1.0);
        UnitSetHeight(lv_fishingTarget, (lv_targetH - 0.05), 1.0);
    }
    else {
        UnitSetCustomValue(lv_fishingTarget, 0, 0.0);
        UnitSetHeight(lv_fishingTarget, (lv_targetH + 0.05), 1.0);
    }
    UnitSetFacing(lv_fishingTarget, (UnitGetFacing(lv_fishingTarget) + 15.0), 1.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FishingTargetBob_Init () {
    gt_FishingTargetBob = TriggerCreate("gt_FishingTargetBob_Func");
    TriggerAddEventPlayerEffectUsed(gt_FishingTargetBob, c_playerAny, "FishingTargetBob");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FishingSuccess
//--------------------------------------------------------------------------------------------------
bool gt_FishingSuccess_Func (bool testConds, bool runActions) {
    int auto04DBA9BC_ae;
    int auto04DBA9BC_ai;
    // Variable Declarations
    int lv_a;
    int lv_e;
    int lv_t;
    int lv_c;
    unit lv_fisherman;
    string lv_reward;
    // Variable Initialization
    lv_fisherman = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    // Conditions
    if (testConds) {
        if (!((lv_fisherman != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_e = BoolToInt((UnitHasBehavior(lv_fisherman, "EpicFishingRod") && (RandomInt(1, 4) == 1)));
    auto04DBA9BC_ae = (lv_e + 1);
    auto04DBA9BC_ai = 1;
    lv_a = 1;
    for ( ; ( (auto04DBA9BC_ai >= 0 && lv_a <= auto04DBA9BC_ae) || (auto04DBA9BC_ai <= 0 && lv_a >= auto04DBA9BC_ae) ) ; lv_a += auto04DBA9BC_ai ) {
        lv_reward = gf_GetFishReward(lv_fisherman);
        gf_CreateItemForUnit(lv_fisherman, lv_reward, 1);
        TextExpressionSetToken("Param/Expression/41E116C5", "A", StringExternal("Param/Value/4906400E"));
        TextExpressionSetToken("Param/Expression/41E116C5", "B", UnitTypeGetName(lv_reward));
        gf_Quicktag(lv_fisherman, TextExpressionAssemble("Param/Expression/41E116C5"), 3.0, 22);
        gv_playerData[UnitGetOwner(lv_fisherman)].lv_fishCaught += 1;
    }
    if ((gv_playerData[UnitGetOwner(lv_fisherman)].lv_fishCaught >= 30) && (gv_gameDuration <= 600.0)) {
        gf_UnlockRequirement(UnitGetOwner(lv_fisherman), 1, 23);
    }
    else {
    }
    if ((UnitGetType(lv_fisherman) == "Kobold")) {
        gf_AddExperience(lv_fisherman, 100.0);
    }
    else {
    }
    if ((gv_questIndexActive == 16)) {
        lv_t = gf_GetTeamOfPlayer(UnitGetOwner(lv_fisherman));
        lv_c = FixedToInt(UnitGetCustomValue(lv_fisherman, 7));
        if ((lv_t != 0) && (lv_c != 0) && (gv_expeditionProgress[lv_t][lv_c] == false)) {
            gv_expeditionProgress[lv_t][lv_c] = true;
            PingSetColor(gv_expeditionPing[lv_t][lv_c], Color(0.00, 100.00, 0.00));
            gv_expeditionProgressCount[lv_t] += 1;
            if ((gv_expeditionProgressCount[lv_t] > gv_expeditionProgressCount[gv_expeditionLeadingTeam])) {
                gv_expeditionLeadingTeam = lv_t;
            }
            else {
            }
            gf_Quicktag(lv_fisherman, StringExternal("Param/Value/FF0C8F63"), 3.0, 24);
            PlayerModifyPropertyInt(UnitGetOwner(lv_fisherman), c_playerPropMinerals, c_playerPropOperAdd, 50);
            gf_ExpeditionProgress(lv_t);
        }
        else {
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FishingSuccess_Init () {
    gt_FishingSuccess = TriggerCreate("gt_FishingSuccess_Func");
    TriggerAddEventPlayerEffectUsed(gt_FishingSuccess, c_playerAny, "FishingSuccess");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BirdScoutFindOutpost
//--------------------------------------------------------------------------------------------------
bool gt_BirdScoutFindOutpost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bird;
    unit lv_outpost;
    // Variable Initialization
    lv_bird = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_outpost = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(lv_bird))) {
            return false;
        }
        if (!(gf_UnitExists(lv_outpost))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_BirdScoutLand(lv_bird, lv_outpost);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BirdScoutFindOutpost_Init () {
    gt_BirdScoutFindOutpost = TriggerCreate("gt_BirdScoutFindOutpost_Func");
    TriggerAddEventPlayerEffectUsed(gt_BirdScoutFindOutpost, 0, "BirdLookingForNestFound");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BirdScoutTameBird
//--------------------------------------------------------------------------------------------------
bool gt_BirdScoutTameBird_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    unit lv_bird;
    // Variable Initialization
    lv_bird = UnitBehaviorEffectUnit(EventUnit(), "OutpostGotBird", c_effectUnitCaster, 0);
    // Actions
    if (!runActions) {
        return true;
    }
    gf_AddExperience(EventUnit(), 20.0);
    gv_playerData[UnitGetOwner(EventUnit())].lv_gameStats.lv_birdsScouts += 1;
    UnitSetOwner(lv_bird, UnitGetOwner(EventUnit()), false);
    UnitBehaviorAdd(lv_bird, "BirdScouting", lv_bird, 1);
    UnitBehaviorRemove(EventUnit(), "OutpostGotBird", 1);
    UnitBehaviorRemove(lv_bird, "BirdNesting", 1);
    UnitIssueOrder(lv_bird, OrderTargetingPoint(AbilityCommand("move", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    gf_BirdScoutTakeOff(lv_bird, EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BirdScoutTameBird_Init () {
    gt_BirdScoutTameBird = TriggerCreate("gt_BirdScoutTameBird_Func");
    TriggerAddEventUnitAbility(gt_BirdScoutTameBird, null, AbilityCommand("TameBird", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BirdScoutLockOn
//--------------------------------------------------------------------------------------------------
bool gt_BirdScoutLockOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitStateFidget, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BirdScoutLockOn_Init () {
    gt_BirdScoutLockOn = TriggerCreate("gt_BirdScoutLockOn_Func");
    TriggerAddEventPlayerEffectUsed(gt_BirdScoutLockOn, c_playerAny, "BirdScoutFind");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BirdScoutStalk
//--------------------------------------------------------------------------------------------------
bool gt_BirdScoutStalk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_stalker;
    point lv_p;
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_stalker = UnitBehaviorEffectUnit(lv_target, "Stalked", c_effectUnitCaster, 0);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitHasBehavior(lv_stalker, "BirdScouting") == true) && (UnitHasBehavior(lv_target, "Stalked") == true)) {
        lv_p = PointWithOffsetPolar(UnitGetPosition(lv_target), (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Bird", "Sight", UnitGetOwner(lv_stalker))) - ((BoolToInt(!(gv_b_Day)) * 2.0) + RandomFixed(0.0, 2.0))), (AngleBetweenPoints(UnitGetPosition(lv_target), UnitGetPosition(lv_stalker)) + RandomFixed(-90.0, 90.0)));
        UnitIssueOrder(lv_stalker, OrderTargetingPoint(AbilityCommand("move", 0), lv_p), c_orderQueueReplace);
    }
    else {
        UnitBehaviorRemove(lv_stalker, "BirdScouting", 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BirdScoutStalk_Init () {
    gt_BirdScoutStalk = TriggerCreate("gt_BirdScoutStalk_Func");
    TriggerAddEventPlayerEffectUsed(gt_BirdScoutStalk, c_playerAny, "StalkedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BirdScoutExpire
//--------------------------------------------------------------------------------------------------
bool gt_BirdScoutExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(lv_target, "BirdLookingForNest", lv_target, 1);
    UnitSetOwner(lv_target, 0, false);
    UnitSetState(lv_target, c_unitStateFidget, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BirdScoutExpire_Init () {
    gt_BirdScoutExpire = TriggerCreate("gt_BirdScoutExpire_Func");
    TriggerAddEventPlayerEffectUsed(gt_BirdScoutExpire, c_playerAny, "BirdServiceExpire");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BirdScoutShooBirds
//--------------------------------------------------------------------------------------------------
bool gt_BirdScoutShooBirds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bird;
    unit lv_outpost;
    // Variable Initialization
    lv_bird = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_outpost = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorRemove(lv_bird, "BirdNesting", 1);
    UnitBehaviorAdd(lv_bird, "BirdLookingForNest", lv_bird, 1);
    gf_BirdScoutTakeOff(lv_bird, lv_outpost);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BirdScoutShooBirds_Init () {
    gt_BirdScoutShooBirds = TriggerCreate("gt_BirdScoutShooBirds_Func");
    TriggerAddEventPlayerEffectUsed(gt_BirdScoutShooBirds, c_playerAny, "ShooBirdsTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StorageMove
//--------------------------------------------------------------------------------------------------
bool gt_StorageMove_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "StorageOutpost"))) {
            return false;
        }
        if (!(gf_UnitExists(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UpdateShipmentAvailability(EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StorageMove_Init () {
    gt_StorageMove = TriggerCreate("gt_StorageMove_Func");
    TriggerAddEventUnitInventoryChange(gt_StorageMove, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellLumber
//--------------------------------------------------------------------------------------------------
bool gt_SellLumber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_type = "Lumber";
    lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_inventory, c_unitCountAlive) > 0)) {
            gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellLumber_Init () {
    gt_SellLumber = TriggerCreate("gt_SellLumber_Func");
    TriggerAddEventUnitAbility(gt_SellLumber, null, AbilityCommand("SellLumber", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellStone
//--------------------------------------------------------------------------------------------------
bool gt_SellStone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_type = "Stone";
    lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_inventory, c_unitCountAlive) > 0)) {
            gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellStone_Init () {
    gt_SellStone = TriggerCreate("gt_SellStone_Func");
    TriggerAddEventUnitAbility(gt_SellStone, null, AbilityCommand("SellStone", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellWool
//--------------------------------------------------------------------------------------------------
bool gt_SellWool_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_type = "Wool";
    lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_inventory, c_unitCountAlive) > 0)) {
            gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellWool_Init () {
    gt_SellWool = TriggerCreate("gt_SellWool_Func");
    TriggerAddEventUnitAbility(gt_SellWool, null, AbilityCommand("SellWool", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellLeather
//--------------------------------------------------------------------------------------------------
bool gt_SellLeather_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_type = "Leather";
    lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_inventory, c_unitCountAlive) > 0)) {
            gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellLeather_Init () {
    gt_SellLeather = TriggerCreate("gt_SellLeather_Func");
    TriggerAddEventUnitAbility(gt_SellLeather, null, AbilityCommand("SellLeather", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellIronOre
//--------------------------------------------------------------------------------------------------
bool gt_SellIronOre_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_type = "IronOre";
    lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_inventory, c_unitCountAlive) > 0)) {
            gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellIronOre_Init () {
    gt_SellIronOre = TriggerCreate("gt_SellIronOre_Func");
    TriggerAddEventUnitAbility(gt_SellIronOre, null, AbilityCommand("SellIronOre", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellShadowstone
//--------------------------------------------------------------------------------------------------
bool gt_SellShadowstone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_type = "Shadowstone";
    lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_inventory, c_unitCountAlive) > 0)) {
            gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellShadowstone_Init () {
    gt_SellShadowstone = TriggerCreate("gt_SellShadowstone_Func");
    TriggerAddEventUnitAbility(gt_SellShadowstone, null, AbilityCommand("SellShadowstone", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellInfusedLumber
//--------------------------------------------------------------------------------------------------
bool gt_SellInfusedLumber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_type = "InfusedLumber";
    lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_inventory, c_unitCountAlive) > 0)) {
            gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellInfusedLumber_Init () {
    gt_SellInfusedLumber = TriggerCreate("gt_SellInfusedLumber_Func");
    TriggerAddEventUnitAbility(gt_SellInfusedLumber, null, AbilityCommand("SellInfusedLumber", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SellRadiantGem
//--------------------------------------------------------------------------------------------------
bool gt_SellRadiantGem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_inventory;
    // Variable Initialization
    lv_type = "RadiantGem";
    lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Unconscious") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_inventory, c_unitCountAlive) > 0)) {
            gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellRadiantGem_Init () {
    gt_SellRadiantGem = TriggerCreate("gt_SellRadiantGem_Func");
    TriggerAddEventUnitAbility(gt_SellRadiantGem, null, AbilityCommand("SellRadiantGem", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyLumber
//--------------------------------------------------------------------------------------------------
bool gt_BuyLumber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    lv_type = "Lumber";
    lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LumberBuyPrice", "Amount", EventPlayer()));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
            if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, "Lumber")) {
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyLumber_Init () {
    gt_BuyLumber = TriggerCreate("gt_BuyLumber_Func");
    TriggerAddEventUnitAbility(gt_BuyLumber, null, AbilityCommand("BuyLumber", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyStone
//--------------------------------------------------------------------------------------------------
bool gt_BuyStone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    lv_type = "Stone";
    lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "StoneBuyPrice", "Amount", EventPlayer()));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
            if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, "Stone")) {
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyStone_Init () {
    gt_BuyStone = TriggerCreate("gt_BuyStone_Func");
    TriggerAddEventUnitAbility(gt_BuyStone, null, AbilityCommand("BuyStone", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyWool
//--------------------------------------------------------------------------------------------------
bool gt_BuyWool_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    lv_type = "Wool";
    lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "WoolBuyPrice", "Amount", EventPlayer()));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
            if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, "Wool")) {
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyWool_Init () {
    gt_BuyWool = TriggerCreate("gt_BuyWool_Func");
    TriggerAddEventUnitAbility(gt_BuyWool, null, AbilityCommand("BuyWool", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyLeather
//--------------------------------------------------------------------------------------------------
bool gt_BuyLeather_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    lv_type = "Leather";
    lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "LeatherBuyPrice", "Amount", EventPlayer()));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
            if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, "Leather")) {
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyLeather_Init () {
    gt_BuyLeather = TriggerCreate("gt_BuyLeather_Func");
    TriggerAddEventUnitAbility(gt_BuyLeather, null, AbilityCommand("BuyLeather", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyIronOre
//--------------------------------------------------------------------------------------------------
bool gt_BuyIronOre_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    lv_type = "IronOre";
    lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "IronOreBuyPrice", "Amount", EventPlayer()));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
            if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, "IronOre")) {
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyIronOre_Init () {
    gt_BuyIronOre = TriggerCreate("gt_BuyIronOre_Func");
    TriggerAddEventUnitAbility(gt_BuyIronOre, null, AbilityCommand("BuyIronOre", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyShadowstone
//--------------------------------------------------------------------------------------------------
bool gt_BuyShadowstone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    lv_type = "Shadowstone";
    lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "ShadowstoneBuyPrice", "Amount", EventPlayer()));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
            if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, "Shadowstone")) {
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyShadowstone_Init () {
    gt_BuyShadowstone = TriggerCreate("gt_BuyShadowstone_Func");
    TriggerAddEventUnitAbility(gt_BuyShadowstone, null, AbilityCommand("BuyShadowstone", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyInfusedLumber
//--------------------------------------------------------------------------------------------------
bool gt_BuyInfusedLumber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    lv_type = "InfusedLumber";
    lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "InfusedLumberBuyPrice", "Amount", EventPlayer()));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
            if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, "InfusedLumber")) {
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyInfusedLumber_Init () {
    gt_BuyInfusedLumber = TriggerCreate("gt_BuyInfusedLumber_Func");
    TriggerAddEventUnitAbility(gt_BuyInfusedLumber, null, AbilityCommand("BuyInfusedLumber", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyRadiantGem
//--------------------------------------------------------------------------------------------------
bool gt_BuyRadiantGem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_amount;
    // Variable Initialization
    lv_type = "RadiantGem";
    lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "RadiantGemBuyPrice", "Amount", EventPlayer()));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
            if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, "RadiantGem")) {
            }
            else {
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyRadiantGem_Init () {
    gt_BuyRadiantGem = TriggerCreate("gt_BuyRadiantGem_Func");
    TriggerAddEventUnitAbility(gt_BuyRadiantGem, null, AbilityCommand("BuyRadiantGem", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LockOutpost
//--------------------------------------------------------------------------------------------------
bool gt_LockOutpost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(EventUnit(), 1, 1.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LockOutpost_Init () {
    gt_LockOutpost = TriggerCreate("gt_LockOutpost_Func");
    TriggerAddEventUnitBehaviorChange(gt_LockOutpost, null, "Locked", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnlockOutpost
//--------------------------------------------------------------------------------------------------
bool gt_UnlockOutpost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(EventUnit(), 1, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnlockOutpost_Init () {
    gt_UnlockOutpost = TriggerCreate("gt_UnlockOutpost_Func");
    TriggerAddEventUnitBehaviorChange(gt_UnlockOutpost, null, "Locked", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: StorageHutCaravanStart
//--------------------------------------------------------------------------------------------------
bool gt_StorageHutCaravanStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_inventory;
    unit lv_horsieShipment;
    string lv_shipmentType;
    // Variable Initialization
    lv_inventory = UnitInventoryGroup(EventUnit());
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(lv_inventory);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
            lv_horsieShipment = UnitGroupLoopCurrent();
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    lv_shipmentType = UnitGetType(lv_horsieShipment);
    if (((UnitGetType(lv_horsieShipment) == "CrabShipment"))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/B175DF93"));
    }
    else {
        if (gf_UnitExists(lv_horsieShipment)) {
            gf_DropandRemove(lv_horsieShipment);
            gf_SendBeaver(EventUnit(), EventUnitTargetPoint(), null, lv_shipmentType, EventPlayer());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/E2C7FA6F"));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StorageHutCaravanStart_Init () {
    gt_StorageHutCaravanStart = TriggerCreate("gt_StorageHutCaravanStart_Func");
    TriggerAddEventUnitAbility(gt_StorageHutCaravanStart, null, AbilityCommand("SendPackBeaver", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ShipmentArrived
//--------------------------------------------------------------------------------------------------
bool gt_ShipmentArrived_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPosition(UnitInventoryItem(EventUnit(), 1), UnitGetPosition(EventUnit()), false);
    UnitRemove(EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShipmentArrived_Init () {
    gt_ShipmentArrived = TriggerCreate("gt_ShipmentArrived_Func");
    TriggerAddEventUnitAbility(gt_ShipmentArrived, null, AbilityCommand("ShipmentArrived", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DomesticatedSheep
//--------------------------------------------------------------------------------------------------
bool gt_DomesticatedSheep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 5;
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
            UnitAbilityEnable(EventUnit(), "DomesticatedSheep", false);
            UnitBehaviorAdd(EventUnit(), "DomesticFarm", EventUnit(), 1);
            gf_Advancedtag(EventUnit(), lv_i, StringExternal("Param/Value/DBC4858D"), 4.0, 24);
            SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DomesticatedSheep_Init () {
    gt_DomesticatedSheep = TriggerCreate("gt_DomesticatedSheep_Func");
    TriggerAddEventUnitAbility(gt_DomesticatedSheep, null, AbilityCommand("DomesticatedSheep", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SheepLeash
//--------------------------------------------------------------------------------------------------
bool gt_SheepLeash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_farm;
    unit lv_sheep;
    // Variable Initialization
    lv_farm = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_sheep = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(lv_farm)) {
        UnitIssueOrder(lv_sheep, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_farm)), c_orderQueueReplace);
    }
    else {
        UnitBehaviorRemove(lv_sheep, "SheepLeash", 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SheepLeash_Init () {
    gt_SheepLeash = TriggerCreate("gt_SheepLeash_Func");
    TriggerAddEventPlayerEffectUsed(gt_SheepLeash, c_playerAny, "SheepLeashTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FarmSpawn
//--------------------------------------------------------------------------------------------------
bool gt_FarmSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyFarms;
    unitgroup lv_nearbySheep;
    // Variable Initialization
    lv_nearbyFarms = UnitGroup("Farm", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_nearbySheep = UnitGroup("Sheep", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Conditions
    if (testConds) {
        if (!(((UnitGroupCount(lv_nearbyFarms, c_unitCountAlive) * 3) > UnitGroupCount(lv_nearbySheep, c_unitCountAlive)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_AddExperience(gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_kobold, 2.0);
    UnitCreate(1, "Sheep", 0, 0, PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1.0, 225.0), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "SheepLeash", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_gameStats.lv_sheepBred += 1;
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/DE2C67E2"), 2.0, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FarmSpawn_Init () {
    gt_FarmSpawn = TriggerCreate("gt_FarmSpawn_Func");
    TriggerAddEventPlayerEffectUsed(gt_FarmSpawn, c_playerAny, "FarmSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FowlBait
//--------------------------------------------------------------------------------------------------
bool gt_FowlBait_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) >= 1)) {
            gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, 1));
            UnitBehaviorAdd(EventUnit(), "FowlBait", EventUnit(), 1);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FowlBait_Init () {
    gt_FowlBait = TriggerCreate("gt_FowlBait_Func");
    TriggerAddEventUnitAbility(gt_FowlBait, null, AbilityCommand("PheasantBait", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FowlMove
//--------------------------------------------------------------------------------------------------
bool gt_FowlMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fowl;
    unit lv_farm;
    // Variable Initialization
    lv_fowl = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_farm = UnitBehaviorEffectUnit(lv_fowl, "BaitedFowl", c_effectUnitCaster, 0);
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(lv_farm)) {
        if ((UnitHasBehavior(lv_farm, "FowlBait") == true) && (DistanceBetweenPoints(UnitGetPosition(lv_farm), UnitGetPosition(lv_fowl)) > 5.0)) {
            UnitIssueOrder(lv_fowl, OrderTargetingUnit(AbilityCommand("move", 0), lv_farm), c_orderQueueReplace);
            UnitBehaviorAdd(lv_fowl, "FowlStopDelay", lv_fowl, 1);
        }
        else {
        }
    }
    else {
        UnitBehaviorRemove(lv_fowl, "BaitedFowl", 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FowlMove_Init () {
    gt_FowlMove = TriggerCreate("gt_FowlMove_Func");
    TriggerAddEventPlayerEffectUsed(gt_FowlMove, c_playerAny, "FowlBaitTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuySpellBook
//--------------------------------------------------------------------------------------------------
bool gt_BuySpellBook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true) && ((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= 10)) {
                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/D4E85C49"), 2.0, 24);
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 10);
                gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, "SpellBook", 1);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuySpellBook_Init () {
    gt_BuySpellBook = TriggerCreate("gt_BuySpellBook_Func");
    TriggerAddEventUnitAbility(gt_BuySpellBook, null, AbilityCommand("BuySpellBook", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyScrollofTransmutation
//--------------------------------------------------------------------------------------------------
bool gt_BuyScrollofTransmutation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 100;
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true) && ((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/A1D15AA9"), 2.0, 24);
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, "ScrollofTransmutation", 1);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyScrollofTransmutation_Init () {
    gt_BuyScrollofTransmutation = TriggerCreate("gt_BuyScrollofTransmutation_Func");
    TriggerAddEventUnitAbility(gt_BuyScrollofTransmutation, null, AbilityCommand("BuyScrollofTransmutation", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyBeer
//--------------------------------------------------------------------------------------------------
bool gt_BuyBeer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "BeerCost", "Amount", UnitGetOwner(EventUnit())));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/1A6016A1"), 2.0, 24);
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, "Beer", 1);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyBeer_Init () {
    gt_BuyBeer = TriggerCreate("gt_BuyBeer_Func");
    TriggerAddEventUnitAbility(gt_BuyBeer, null, AbilityCommand("BuyBeer", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyRoastedLamb
//--------------------------------------------------------------------------------------------------
bool gt_BuyRoastedLamb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "RoastedLambCost", "Amount", UnitGetOwner(EventUnit())));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/E91AE0C7"), 2.0, 24);
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, "RoastedLamb", 1);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyRoastedLamb_Init () {
    gt_BuyRoastedLamb = TriggerCreate("gt_BuyRoastedLamb_Func");
    TriggerAddEventUnitAbility(gt_BuyRoastedLamb, null, AbilityCommand("BuyRoastedLamb", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyGossip
//--------------------------------------------------------------------------------------------------
bool gt_BuyGossip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "Unconscious") == false)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= 1)) {
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 1);
                gf_Gossip(lv_i, true);
                gf_AddExperience(gv_playerData[lv_i].lv_kobold, 1.0);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyGossip_Init () {
    gt_BuyGossip = TriggerCreate("gt_BuyGossip_Func");
    TriggerAddEventUnitAbility(gt_BuyGossip, null, AbilityCommand("Gossip", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HireMurlocSlave
//--------------------------------------------------------------------------------------------------
bool gt_HireMurlocSlave_Func (bool testConds, bool runActions) {
    int autoAB086206_val;
    // Variable Declarations
    int lv_i;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "MurlocSlaveCost", "Amount", lv_i));
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/AFFD16A6"), 2.0, 24);
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                UnitCreate(1, "MurlocSlave", 0, lv_i, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, 310.0), 270.0);
                UnitGroupAdd(gv_playerData[lv_i].lv_murlocSlaves, UnitLastCreated());
                UnitControlGroupAddUnit(lv_i, 8, UnitLastCreated());
                UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/94A4B816"), gf_GetPlayerName(UnitGetOwner(UnitLastCreated()), 0), StringExternal("Param/Value/FDE585C2"));
                if ((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "TheMurlocket") == true)) {
                    UnitBehaviorAdd(UnitLastCreated(), "MurlocRebelSpirit", UnitLastCreated(), 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 3, 4)) {
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_TextureSelectByID("MurlocOrange"));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_murlocSlaves, c_unitCountAlive) >= 50)) {
                    gf_UnlockRequirement(lv_i, 3, 4);
                }
                else {
                }
                if ((gv_playerData[lv_i].lv_isAI == true)) {
                    if (gv_aIData[lv_i].lv_cycleSlaveJob >= 3) {
                        gv_aIData[lv_i].lv_cycleSlaveJob = 1;
                    }
                    else {
                        gv_aIData[lv_i].lv_cycleSlaveJob = gv_aIData[lv_i].lv_cycleSlaveJob + 1;
                    }
                    autoAB086206_val = gv_aIData[lv_i].lv_cycleSlaveJob;
                    if (autoAB086206_val == 1) {
                        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("MurlocOrderMineGold", 0)), c_orderQueueReplace);
                    }
                    else if (autoAB086206_val == 2) {
                        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("MurlocOrderMineStone", 0)), c_orderQueueReplace);
                    }
                    else if (autoAB086206_val == 3) {
                        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("MurlocOrderGatherLumber", 0)), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                else {
                }
                gv_playerData[lv_i].lv_gameStats.lv_murlocsHired += 1;
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HireMurlocSlave_Init () {
    gt_HireMurlocSlave = TriggerCreate("gt_HireMurlocSlave_Func");
    TriggerAddEventUnitAbility(gt_HireMurlocSlave, null, AbilityCommand("HireMurlocSlave", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: EquipMurloc
//--------------------------------------------------------------------------------------------------
bool gt_EquipMurloc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_t;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 10;
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
        PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
        UnitBehaviorAdd(EventUnit(), "MurlocEquipment", EventUnit(), 1);
        UnitAbilityEnable(EventUnit(), "EquipMurloc", false);
        gf_Quicktag(EventUnit(), StringExternal("Param/Value/69A8820F"), 2.0, 24);
        SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EquipMurloc_Init () {
    gt_EquipMurloc = TriggerCreate("gt_EquipMurloc_Func");
    TriggerAddEventUnitAbility(gt_EquipMurloc, null, AbilityCommand("EquipMurloc", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BuyNightwisp
//--------------------------------------------------------------------------------------------------
bool gt_BuyNightwisp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = 45;
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true) && ((UnitHasBehavior(EventUnit(), "TavernWizard") == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, "KoboldBotNormal") == true))) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                if ((UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) < StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "PetStats", "Amount", lv_i)))) {
                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal("Param/Value/8106470E"), 2.0, 24);
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    UnitCreate(1, "Nightwisp", 0, lv_i, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, 310.0), 270.0);
                    UnitCreateEffectUnit(gv_playerData[lv_i].lv_kobold, "TamedApply", UnitLastCreated());
                    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/D1CD62B3"), gf_GetPlayerName(UnitGetOwner(UnitLastCreated()), 0), StringExternal("Param/Value/2B335C42"));
                    UnitGroupAdd(gv_pets[lv_i], UnitLastCreated());
                    gf_AcquirePet(lv_i, UnitGetType(UnitLastCreated()));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_tameError);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BuyNightwisp_Init () {
    gt_BuyNightwisp = TriggerCreate("gt_BuyNightwisp_Func");
    TriggerAddEventUnitAbility(gt_BuyNightwisp, null, AbilityCommand("PurchaseNightwisp", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Synergy
//--------------------------------------------------------------------------------------------------
bool gt_Synergy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!((gv_playerData[lv_i].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, "KoboldBackpack", true) == true)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) >= 1)) {
            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_radiantGem, 1));
            UnitAbilityEnable(EventUnit(), "Synergy", false);
            UnitBehaviorAdd(EventUnit(), "SynergyPassive", EventUnit(), 1);
            UnitSetCustomValue(EventUnit(), 0, 1.0);
            UnitCreateEffectUnit(gv_playerData[lv_i].lv_kobold, "SynergyImpact", gv_playerData[lv_i].lv_kobold);
            UnitCreateEffectUnit(gv_playerData[lv_i].lv_kobold, "SynergyBeam", EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Synergy_Init () {
    gt_Synergy = TriggerCreate("gt_Synergy_Func");
    TriggerAddEventUnitAbility(gt_Synergy, null, AbilityCommand("Synergy", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TrebuchetLoadStone
//--------------------------------------------------------------------------------------------------
bool gt_TrebuchetLoadStone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = EventPlayer();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) >= 1)) {
            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_stone, 1));
            gf_Advancedtag(EventUnit(), lv_i, StringExternal("Param/Value/629033C2"), 2.0, 24);
            UnitBehaviorAdd(EventUnit(), "TrebuchetLoadedStone", EventUnit(), 1);
            UnitBehaviorAdd(EventUnit(), "TrebuchetLoadedAddonStone", EventUnit(), 1);
            SoundPlayOnUnit(SoundLink("CraftingStart", -1), PlayerGroupSingle(lv_i), EventUnit(), 0.0, 100.0, 0.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrebuchetLoadStone_Init () {
    gt_TrebuchetLoadStone = TriggerCreate("gt_TrebuchetLoadStone_Func");
    TriggerAddEventUnitAbility(gt_TrebuchetLoadStone, null, AbilityCommand("TrebuchetLoadStone", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PackTrebuchet
//--------------------------------------------------------------------------------------------------
bool gt_PackTrebuchet_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ReplaceUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TrebuchetPacked", 3);
    UnitSetOwner(libNtve_gf_LastReplacedUnit(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PackTrebuchet_Init () {
    gt_PackTrebuchet = TriggerCreate("gt_PackTrebuchet_Func");
    TriggerAddEventPlayerEffectUsed(gt_PackTrebuchet, c_playerAny, "PackTrebuchet");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTStructuralReinforcement
//--------------------------------------------------------------------------------------------------
bool gt_WTStructuralReinforcement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/8F2930FD"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerStructuralReinforcement = true;
                UnitBehaviorAdd(EventUnit(), "WatchTowerStructuralReinforcement", EventUnit(), 1);
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                gf_UpdateBuildingStats(lv_i);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTStructuralReinforcement_Init () {
    gt_WTStructuralReinforcement = TriggerCreate("gt_WTStructuralReinforcement_Func");
    TriggerAddEventUnitAbility(gt_WTStructuralReinforcement, null, AbilityCommand("StructuralReinforcement", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTInfirmary
//--------------------------------------------------------------------------------------------------
bool gt_WTInfirmary_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 6)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/CB176B83"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                UnitBehaviorAdd(EventUnit(), "WatchTowerInfirmary", EventUnit(), 1);
                gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerInfirmary = true;
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                PlayerGroupLoopBegin(gv_teamData[gv_playerData[lv_i].lv_team].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold)) {
                        gf_UpdateStatsAll(PlayerGroupLoopCurrent());
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTInfirmary_Init () {
    gt_WTInfirmary = TriggerCreate("gt_WTInfirmary_Func");
    TriggerAddEventUnitAbility(gt_WTInfirmary, null, AbilityCommand("Infirmary", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTBarracks
//--------------------------------------------------------------------------------------------------
bool gt_WTBarracks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 6)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/29ED28CD"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerBarracks = true;
                PlayerGroupLoopBegin(gv_teamData[gv_playerData[lv_i].lv_team].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CatalogFieldValueSet(c_gameCatalogAbil, "WatchTowerGarrison", "TotalCargoSpace", PlayerGroupLoopCurrent(), IntToString(4));
                }
                PlayerGroupLoopEnd();
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTBarracks_Init () {
    gt_WTBarracks = TriggerCreate("gt_WTBarracks_Func");
    TriggerAddEventUnitAbility(gt_WTBarracks, null, AbilityCommand("WatchTowerBarracks", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTStorage
//--------------------------------------------------------------------------------------------------
bool gt_WTStorage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/4248AA76"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                UnitBehaviorAdd(EventUnit(), "WatchTowerStorage", EventUnit(), 1);
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerStorage = true;
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTStorage_Init () {
    gt_WTStorage = TriggerCreate("gt_WTStorage_Func");
    TriggerAddEventUnitAbility(gt_WTStorage, null, AbilityCommand("Storage", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTCanteen
//--------------------------------------------------------------------------------------------------
bool gt_WTCanteen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gv_skillCooking[lv_i] >= 15)) {
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 8)) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else {
                }
                if ((lv_thru == true)) {
                    gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/853C7E13"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                    UnitBehaviorAdd(EventUnit(), "WatchTowerCanteen", EventUnit(), 1);
                    UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                    gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerCanteen = true;
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTCanteen_Init () {
    gt_WTCanteen = TriggerCreate("gt_WTCanteen_Func");
    TriggerAddEventUnitAbility(gt_WTCanteen, null, AbilityCommand("Canteen", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTLookout
//--------------------------------------------------------------------------------------------------
bool gt_WTLookout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/C548E5FA"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                UnitBehaviorAdd(EventUnit(), "WatchTowerLookout", EventUnit(), 1);
                gf_ModifyUnitSight(UnitGetType(EventUnit()), lv_i, 4.0);
                CatalogFieldValueSet(c_gameCatalogEffect, "GroundskeeperSearch", "AreaArray[" + IntToString(0) + "].Radius", UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogUnit, "Fortress", "Sight", UnitGetOwner(EventUnit())));
                CatalogFieldValueSet(c_gameCatalogEffect, "InfirmarySearch", "AreaArray[" + IntToString(0) + "].Radius", UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogUnit, "Fortress", "Sight", UnitGetOwner(EventUnit())));
                CatalogFieldValueSet(c_gameCatalogEffect, "WarHornSearch", "AreaArray[" + IntToString(0) + "].Radius", UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogUnit, "Fortress", "Sight", UnitGetOwner(EventUnit())));
                CatalogFieldValueSet(c_gameCatalogEffect, "MunitionsSquadBonusAmmoSearch", "AreaArray[" + IntToString(0) + "].Radius", UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogUnit, "Fortress", "Sight", UnitGetOwner(EventUnit())));
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                if ((gv_b_Day == false)) {
                    UnitBehaviorAdd(EventUnit(), "WatchTowerNightLight", EventUnit(), 1);
                }
                else {
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTLookout_Init () {
    gt_WTLookout = TriggerCreate("gt_WTLookout_Func");
    TriggerAddEventUnitAbility(gt_WTLookout, null, AbilityCommand("Lookout", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTBallista
//--------------------------------------------------------------------------------------------------
bool gt_WTBallista_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 6));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 6));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 4));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 16)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/4184A2F3"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                UnitBehaviorAdd(EventUnit(), "WatchTowerBallista", EventUnit(), 1);
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTBallista_Init () {
    gt_WTBallista = TriggerCreate("gt_WTBallista_Func");
    TriggerAddEventUnitAbility(gt_WTBallista, null, AbilityCommand("Ballista", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTGroundskeeper
//--------------------------------------------------------------------------------------------------
bool gt_WTGroundskeeper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/0243368B"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                UnitBehaviorAdd(EventUnit(), "WatchTowerGroundskeeper", EventUnit(), 1);
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTGroundskeeper_Init () {
    gt_WTGroundskeeper = TriggerCreate("gt_WTGroundskeeper_Func");
    TriggerAddEventUnitAbility(gt_WTGroundskeeper, null, AbilityCommand("Groundskeeper", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTGroundskeeperTrap
//--------------------------------------------------------------------------------------------------
bool gt_WTGroundskeeperTrap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_watchTower;
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    fixed lv_radius;
    point lv_p;
    // Variable Initialization
    lv_watchTower = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_i = UnitGetOwner(lv_watchTower);
    lv_a = UnitGroupEmpty();
    lv_radius = (UnitGetPropertyFixed(lv_watchTower, c_unitPropRadius, c_unitPropCurrent) + 8.0);
    // Actions
    if (!runActions) {
        return true;
    }
    lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpikeTrap", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_watchTower), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0);
    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_watchTower));
    if (gf_UnitExists(lv_b)) {
        UnitCreateEffectUnit(lv_b, "SpikeTrapSharpen", lv_b);
        UnitSetCustomValue(lv_b, 0, 1.0);
        TextExpressionSetToken("Param/Expression/E8BB2240", "A", gf_GetPlayerName(UnitGetOwner(lv_b), 0));
        TextExpressionSetToken("Param/Expression/E8BB2240", "B", StringExternal("Param/Value/58A34302"));
        TextExpressionSetToken("Param/Expression/E8BB2240", "C", IntToText(3));
        TextExpressionSetToken("Param/Expression/E8BB2240", "D", StringExternal("Param/Value/802E6C69"));
        UnitSetInfoText(lv_b, StringExternal("Param/Value/EB7C75ED"), TextExpressionAssemble("Param/Expression/E8BB2240"), StringExternal("Param/Value/6591A834"));
    }
    else {
        if ((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpikeTrap", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_watchTower), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 1.0), c_unitCountAlive) < 10)) {
            lv_p = gf_GetBuildLocation2x2(RegionCircle(UnitGetPosition(lv_watchTower), lv_radius));
            if ((lv_p != null)) {
                UnitCreate(1, "SpikeTrap", 0, lv_i, lv_p, libNtve_gf_RandomAngle());
                UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
                TextExpressionSetToken("Param/Expression/09FF5EC0", "A", gf_GetPlayerName(UnitGetOwner(UnitLastCreated()), 0));
                TextExpressionSetToken("Param/Expression/09FF5EC0", "B", StringExternal("Param/Value/588DEDE9"));
                TextExpressionSetToken("Param/Expression/09FF5EC0", "C", IntToText(3));
                TextExpressionSetToken("Param/Expression/09FF5EC0", "D", StringExternal("Param/Value/9C794E3A"));
                UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/78650D04"), TextExpressionAssemble("Param/Expression/09FF5EC0"), StringExternal("Param/Value/260C903D"));
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTGroundskeeperTrap_Init () {
    gt_WTGroundskeeperTrap = TriggerCreate("gt_WTGroundskeeperTrap_Func");
    TriggerAddEventPlayerEffectUsed(gt_WTGroundskeeperTrap, c_playerAny, "GroundskeeperSpikeTrapPlace");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTRefillAmmo
//--------------------------------------------------------------------------------------------------
bool gt_WTRefillAmmo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_refillamount;
    fixed lv_maxammo;
    unitgroup lv_storedIron;
    bool lv_success;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_maxammo = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "WatchTowerAmmoMax", "Amount", UnitGetOwner(EventUnit())));
    lv_storedIron = UnitGroupFilter("IronOre", c_playerAny, UnitInventoryGroup(EventUnit()), UnitFilter(0, 0, 0, 0), 1);
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((UnitGroupCount(lv_storedIron, c_unitCountAlive) >= 1)) {
            gf_DropandRemove(UnitGroupUnit(lv_storedIron, 1));
            lv_success = true;
        }
        else {
            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) >= 1)) {
                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_ironOre, 1));
                lv_success = true;
            }
            else {
            }
        }
        if ((lv_success == true)) {
            lv_refillamount = libNtve_gf_ArithmeticRealClamp((lv_maxammo - UnitGetCustomValue(EventUnit(), 1)), 0.0, 10.0);
            UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + lv_refillamount));
            UnitBehaviorRemove(EventUnit(), "WatchTowerNoAmmo", 1);
            TextExpressionSetToken("Param/Expression/09D03745", "A", StringExternal("Param/Value/C7634A9F"));
            TextExpressionSetToken("Param/Expression/09D03745", "B", FixedToText(lv_refillamount, 0));
            TextExpressionSetToken("Param/Expression/09D03745", "C", StringExternal("Param/Value/9BFA6065"));
            gf_Advancedtag(EventUnit(), lv_i, TextExpressionAssemble("Param/Expression/09D03745"), 3.0, 28);
            SoundPlayOnUnit(SoundLink("CraftingStart", -1), PlayerGroupSingle(lv_i), EventUnit(), 0.0, 100.0, 0.0);
            if ((UnitGetCustomValue(EventUnit(), 1) == lv_maxammo)) {
                UnitBehaviorAdd(EventUnit(), "WatchTowerFullAmmo", EventUnit(), 1);
            }
            else {
            }
            gf_WTUpdateTooltip(EventUnit());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTRefillAmmo_Init () {
    gt_WTRefillAmmo = TriggerCreate("gt_WTRefillAmmo_Func");
    TriggerAddEventUnitAbility(gt_WTRefillAmmo, null, AbilityCommand("WatchTowerRefillAmmunition", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTUseAmmo
//--------------------------------------------------------------------------------------------------
bool gt_WTUseAmmo_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1, (UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1) - 1.0));
    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "WatchTowerFullAmmo", 1);
    gf_WTUpdateTooltip(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if ((UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1) == 0.0)) {
        gf_Alltag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/505A1C38"), 2.0, 28);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "WatchTowerNoAmmo", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTUseAmmo_Init () {
    gt_WTUseAmmo = TriggerCreate("gt_WTUseAmmo_Func");
    TriggerAddEventPlayerEffectUsed(gt_WTUseAmmo, c_playerAny, "WatchTowerLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTMurlocMilitia
//--------------------------------------------------------------------------------------------------
bool gt_WTMurlocMilitia_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
            lv_thru = true;
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
            SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
        }
        else {
        }
        if ((lv_thru == true)) {
            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/CBDE3419"), Color(0.00, 100.00, 0.00)), 4.0, 32);
            UnitBehaviorAdd(EventUnit(), "WatchTowerMurlocMilitia", EventUnit(), 1);
            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTMurlocMilitia_Init () {
    gt_WTMurlocMilitia = TriggerCreate("gt_WTMurlocMilitia_Func");
    TriggerAddEventUnitAbility(gt_WTMurlocMilitia, null, AbilityCommand("WatchTowerMurlocMilitia", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTMurlocMilitiaIntel
//--------------------------------------------------------------------------------------------------
bool gt_WTMurlocMilitiaIntel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_b;
    unit lv_murlocMilitia;
    unit lv_watchTower;
    // Variable Initialization
    lv_murlocMilitia = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_watchTower = gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lv_murlocMilitia))].lv_watchTower;
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(lv_watchTower))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitHasBehavior(lv_murlocMilitia, "MurlocMilitiaJavelin") == true)) {
        lv_b = UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lv_watchTower), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_watchTower), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Fortress", "Sight", UnitGetOwner(lv_watchTower)))), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(lv_watchTower));
        if (gf_UnitExists(lv_b)) {
            UnitIssueOrder(lv_murlocMilitia, OrderTargetingUnit(AbilityCommand("attack", 0), lv_b), c_orderQueueReplace);
        }
        else {
        }
    }
    else {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_murlocMilitia), UnitGetPosition(lv_watchTower)) <= (UnitGetPropertyFixed(lv_watchTower, c_unitPropRadius, c_unitPropCurrent) + 1.0))) {
            UnitBehaviorAdd(lv_murlocMilitia, "MurlocMilitiaJavelin", lv_murlocMilitia, 1);
        }
        else {
            UnitIssueOrder(lv_murlocMilitia, OrderTargetingUnit(AbilityCommand("move", 0), lv_watchTower), c_orderQueueReplace);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTMurlocMilitiaIntel_Init () {
    gt_WTMurlocMilitiaIntel = TriggerCreate("gt_WTMurlocMilitiaIntel_Func");
    TriggerAddEventPlayerEffectUsed(gt_WTMurlocMilitiaIntel, c_playerAny, "MurlocMilitiaIntelligenceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTCallToArms
//--------------------------------------------------------------------------------------------------
bool gt_WTCalltoArms_Func (bool testConds, bool runActions) {
    int autoEBCE9047_ae;
    int autoEBCE9047_ai;
    // Variable Declarations
    const int lv_militiaNumber = 3;
    int lv_a;
    point lv_p;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    SoundPlayAtPoint(SoundLink("MurlocChieftainEnrage", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    gf_SetScaledStats("MurlocMilitia", UnitGetOwner(EventUnit()));
    autoEBCE9047_ae = lv_militiaNumber;
    autoEBCE9047_ai = 1;
    lv_a = 1;
    for ( ; ( (autoEBCE9047_ai >= 0 && lv_a <= autoEBCE9047_ae) || (autoEBCE9047_ai <= 0 && lv_a >= autoEBCE9047_ae) ) ; lv_a += autoEBCE9047_ai ) {
        lv_p = PointWithOffsetPolar(UnitGetPosition(EventUnit()), UnitGetPropertyFixed(EventUnit(), c_unitPropRadius, c_unitPropCurrent), (60.0 + (lv_a * (360.0 / lv_militiaNumber))));
        UnitCreate(1, "MurlocMilitia", 0, UnitGetOwner(EventUnit()), lv_p, AngleBetweenPoints(UnitGetPosition(EventUnit()), lv_p));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTCalltoArms_Init () {
    gt_WTCalltoArms = TriggerCreate("gt_WTCalltoArms_Func");
    TriggerAddEventUnitAbility(gt_WTCalltoArms, null, AbilityCommand("CalltoArms", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTWarHorn
//--------------------------------------------------------------------------------------------------
bool gt_WTWarHorn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/8F1D22D3"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                UnitBehaviorAdd(EventUnit(), "WatchTowerWarHorn", EventUnit(), 1);
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTWarHorn_Init () {
    gt_WTWarHorn = TriggerCreate("gt_WTWarHorn_Func");
    TriggerAddEventUnitAbility(gt_WTWarHorn, null, AbilityCommand("WatchTowerWarHorn", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTTunnelerCrew
//--------------------------------------------------------------------------------------------------
bool gt_WTTunnelerCrew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gv_skillMining[lv_i] >= 15)) {
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sharpIronPickaxe, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 2));
            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else {
                }
                if ((lv_thru == true)) {
                    gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/FD1538F4"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                    UnitBehaviorAdd(EventUnit(), "WatchTowerTunnelerCrew", EventUnit(), 1);
                    UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTTunnelerCrew_Init () {
    gt_WTTunnelerCrew = TriggerCreate("gt_WTTunnelerCrew_Func");
    TriggerAddEventUnitAbility(gt_WTTunnelerCrew, null, AbilityCommand("TunnelerCrew", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTTunnelerCrewProduce
//--------------------------------------------------------------------------------------------------
bool gt_WTTunnelerCrewProduce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_b;
    unit lv_fortress;
    string lv_type;
    // Variable Initialization
    lv_fortress = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_type = gf_ProduceStone(lv_fortress);
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitCanGetItem(lv_fortress, lv_type)) {
        gf_CreateItemForUnit(lv_fortress, lv_type, 1);
        TextExpressionSetToken("Param/Expression/6C6C7B35", "A", StringExternal("Param/Value/BDC2DABF"));
        TextExpressionSetToken("Param/Expression/6C6C7B35", "B", UnitTypeGetName(lv_type));
        TextExpressionSetToken("Param/Expression/6C6C7B35", "C", StringExternal("Param/Value/DD0C6AF0"));
        gf_Quicktag(lv_fortress, TextExpressionAssemble("Param/Expression/6C6C7B35"), 3.0, 24);
    }
    else {
        lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("StorageOutpost", "", "", UnitGetOwner(lv_fortress), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), UnitGetPosition(lv_fortress));
        if (gf_UnitExists(lv_b) && (UnitHasBehavior(lv_fortress, "BeaverPen") == true)) {
            gf_SendBeaver(lv_fortress, UnitGetPosition(lv_b), lv_b, lv_type, UnitGetOwner(lv_fortress));
        }
        else {
            UnitCreate(1, lv_type, 0, 0, PointWithOffsetPolar(UnitGetPosition(lv_fortress), 3.0, RandomFixed(240.0, 300.0)), libNtve_gf_RandomAngle());
            TextExpressionSetToken("Param/Expression/4EE6A418", "A", StringExternal("Param/Value/FE467808"));
            TextExpressionSetToken("Param/Expression/4EE6A418", "B", UnitTypeGetName(lv_type));
            TextExpressionSetToken("Param/Expression/4EE6A418", "C", StringExternal("Param/Value/5A3A8597"));
            gf_Quicktag(lv_fortress, TextExpressionAssemble("Param/Expression/4EE6A418"), 3.0, 24);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTTunnelerCrewProduce_Init () {
    gt_WTTunnelerCrewProduce = TriggerCreate("gt_WTTunnelerCrewProduce_Func");
    TriggerAddEventPlayerEffectUsed(gt_WTTunnelerCrewProduce, c_playerAny, "WatchTowerTunnelerCrewApply");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTArmory
//--------------------------------------------------------------------------------------------------
bool gt_WTArmory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gv_skillArtisanship[lv_i] >= 15)) {
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 15)) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else {
                }
                if ((lv_thru == true)) {
                    gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/F8E12A36"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                    UnitBehaviorAdd(EventUnit(), "WatchTowerArmory", EventUnit(), 1);
                    UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                    gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArmory = true;
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTArmory_Init () {
    gt_WTArmory = TriggerCreate("gt_WTArmory_Func");
    TriggerAddEventUnitAbility(gt_WTArmory, null, AbilityCommand("WatchTowerArmory", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTArcaneSanctum
//--------------------------------------------------------------------------------------------------
bool gt_WTArcaneSanctum_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gv_skillArtisanship[lv_i] >= 15)) {
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 3));
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 8)) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else {
                }
                if ((lv_thru == true)) {
                    gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/BB16D92C"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                    UnitBehaviorAdd(EventUnit(), "WatchTowerArcaneSanctum", EventUnit(), 1);
                    UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                    gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArcaneSanctum = true;
                    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Tavern", "", "", lv_i, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitBehaviorAdd(UnitGroupLoopCurrent(), "TavernWizard", UnitGroupLoopCurrent(), 1);
                    }
                    UnitGroupLoopEnd();
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTArcaneSanctum_Init () {
    gt_WTArcaneSanctum = TriggerCreate("gt_WTArcaneSanctum_Func");
    TriggerAddEventUnitAbility(gt_WTArcaneSanctum, null, AbilityCommand("ArcaneSanctum", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTBeaverPen
//--------------------------------------------------------------------------------------------------
bool gt_WTBeaverPen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        if ((gv_skillForaging[lv_i] >= 15)) {
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                    lv_thru = true;
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else {
                }
                if ((lv_thru == true)) {
                    gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/A28DB6C3"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                    UnitBehaviorAdd(EventUnit(), "BeaverPen", EventUnit(), 1);
                    UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                    gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerBeaverPen = true;
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTBeaverPen_Init () {
    gt_WTBeaverPen = TriggerCreate("gt_WTBeaverPen_Func");
    TriggerAddEventUnitAbility(gt_WTBeaverPen, null, AbilityCommand("BeaverPen", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTMunitionsSquad
//--------------------------------------------------------------------------------------------------
bool gt_WTMunitionsSquad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    unitgroup lv_bank;
    bool lv_thru;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "SmartPriority", lv_i));
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) <= gv_interactRadius)) {
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 5));
        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) >= lv_c)) {
                lv_thru = true;
                UnitGroupLoopBegin(lv_bank);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                SoundPlayOnUnit(SoundLink("GoldSpend", -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
            }
            else {
            }
            if ((lv_thru == true)) {
                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal("Param/Value/5B735D70"), Color(0.00, 100.00, 0.00)), 4.0, 32);
                UnitBehaviorAdd(EventUnit(), "WatchTowerMunitionsSquad", EventUnit(), 1);
                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                CatalogFieldValueSet(c_gameCatalogEffect, "WatchTowerAmmoMax", "Amount", UnitGetOwner(EventUnit()), FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "WatchTowerAmmoMax", "Amount", UnitGetOwner(EventUnit()))) + 10.0), 0));
                UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + 10.0));
                UnitBehaviorRemove(EventUnit(), "WatchTowerNoAmmo", 1);
                gf_WTUpdateTooltip(EventUnit());
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTMunitionsSquad_Init () {
    gt_WTMunitionsSquad = TriggerCreate("gt_WTMunitionsSquad_Func");
    TriggerAddEventUnitAbility(gt_WTMunitionsSquad, null, AbilityCommand("MunitionsSquad", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTMunitionsSquadADT
//--------------------------------------------------------------------------------------------------
bool gt_WTMunitionsSquadADTs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + 5.0));
    UnitSetCustomValue(EventUnit(), 3, (UnitGetCustomValue(EventUnit(), 3) + 5.0));
    UnitBehaviorRemove(EventUnit(), "TurretOutOfAmmo", 1);
    gf_ADTUpdateAmmo(EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTMunitionsSquadADTs_Init () {
    gt_WTMunitionsSquadADTs = TriggerCreate("gt_WTMunitionsSquadADTs_Func");
    TriggerAddEventUnitBehaviorChange(gt_WTMunitionsSquadADTs, null, "MunitionsSquadBonusAmmo", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTAttackedAlert
//--------------------------------------------------------------------------------------------------
bool gt_WTAttackedAlert_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIAlertUnit("WatchTowerAttacked", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), StringExternal("Param/Value/DEE36565"), null, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTAttackedAlert_Init () {
    gt_WTAttackedAlert = TriggerCreate("gt_WTAttackedAlert_Func");
    TriggerAddEventPlayerEffectUsed(gt_WTAttackedAlert, c_playerAny, "WatchTowerAttackAlert");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTDamagedAlert
//--------------------------------------------------------------------------------------------------
bool gt_WTDamagedAlert_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIAlertUnit("WatchTowerDamaged", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), StringExternal("Param/Value/BFB111C6"), null, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTDamagedAlert_Init () {
    gt_WTDamagedAlert = TriggerCreate("gt_WTDamagedAlert_Func");
    TriggerAddEventPlayerEffectUsed(gt_WTDamagedAlert, c_playerAny, "WatchTowerDamagedAlert");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WTUnloadAutoSelect
//--------------------------------------------------------------------------------------------------
bool gt_WTUnloadAutoSelect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Fortress"))) {
            return false;
        }
        if (!((UnitGetType(EventUnitCargo()) == "Kobold"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitClearSelection(UnitGetOwner(EventUnitCargo()));
    UnitSelect(EventUnitCargo(), UnitGetOwner(EventUnitCargo()), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WTUnloadAutoSelect_Init () {
    gt_WTUnloadAutoSelect = TriggerCreate("gt_WTUnloadAutoSelect_Func");
    TriggerAddEventUnitCargo(gt_WTUnloadAutoSelect, null, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WatchTowerTimerStart
//--------------------------------------------------------------------------------------------------
bool gt_WatchTowerTimerStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((TimerGetElapsed(gv_watchTowerTimer) > 0.0) && gf_AllLivingTeamsHaveWT()) {
        TimerPause(gv_watchTowerTimer, true);
        TimerPause(gv_watchTowerTimerUpdate, true);
        ObjectiveDestroy(gv_watchTowerObjective);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C69A4947"));
    }
    else {
        if ((TimerGetElapsed(gv_watchTowerTimer) == 0.0) && (gf_AllLivingTeamsHaveWT() == false)) {
            gv_watchTowerObjectiveText = StringExternal("Param/Value/E7DA3DB1");
            TimerStart(gv_watchTowerTimer, 300.0, false, c_timeGame);
            ObjectiveCreate(gv_watchTowerObjectiveText, StringExternal("Param/Value/69AE86DE"), c_objectiveStateActive, true);
            gv_watchTowerObjective = ObjectiveLastCreated();
            TimerStart(gv_watchTowerTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "KoboldMusicTower", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WatchTowerTimerStart_Init () {
    gt_WatchTowerTimerStart = TriggerCreate("gt_WatchTowerTimerStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WatchTowerTimerLoop
//--------------------------------------------------------------------------------------------------
bool gt_WatchTowerTimerLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_remainingTime;
    text lv_timerAddon;
    // Variable Initialization
    lv_remainingTime = TimerGetRemaining(gv_watchTowerTimer);
    // Conditions
    if (testConds) {
        if (!((lv_remainingTime > 0.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((lv_remainingTime >= 30.0)) {
        TextExpressionSetToken("Param/Expression/8B88A4A7", "A", StringExternal("Param/Value/687319E1"));
        TextExpressionSetToken("Param/Expression/8B88A4A7", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(lv_remainingTime)));
        TextExpressionSetToken("Param/Expression/8B88A4A7", "C", StringExternal("Param/Value/F9B4394D"));
        lv_timerAddon = TextExpressionAssemble("Param/Expression/8B88A4A7");
    }
    else {
        TextExpressionSetToken("Param/Expression/98F70F86", "A", StringExternal("Param/Value/F1AEF1F4"));
        TextExpressionSetToken("Param/Expression/98F70F86", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(lv_remainingTime)));
        TextExpressionSetToken("Param/Expression/98F70F86", "C", StringExternal("Param/Value/7049E9E7"));
        lv_timerAddon = TextExpressionAssemble("Param/Expression/98F70F86");
    }
    if (((TimerGetRemaining(gv_questTimer) >= 1) && (TimerGetRemaining(gv_questTimer) <= 5))) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/81EA46E9", "A", gv_watchTowerObjectiveText);
    TextExpressionSetToken("Param/Expression/81EA46E9", "B", lv_timerAddon);
    ObjectiveSetName(gv_watchTowerObjective, TextExpressionAssemble("Param/Expression/81EA46E9"));
    TimerStart(gv_watchTowerTimerUpdate, 1.0, false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WatchTowerTimerLoop_Init () {
    gt_WatchTowerTimerLoop = TriggerCreate("gt_WatchTowerTimerLoop_Func");
    TriggerAddEventTimer(gt_WatchTowerTimerLoop, gv_watchTowerTimerUpdate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: WatchTowerTimerExpire
//--------------------------------------------------------------------------------------------------
bool gt_WatchTowerTimerExpire_Func (bool testConds, bool runActions) {
    int autoE9CC7FD7_ae;
    int autoE9CC7FD7_ai;
    // Variable Declarations
    int lv_a;
    unitgroup lv_watchTowers;
    fixed lv_timerExtension;
    // Variable Initialization
    lv_watchTowers = UnitGroup("Fortress", c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(lv_watchTowers, c_unitCountAlive) > 0) && (gv_watchTowerTimerExtendable == true)) {
        gv_watchTowerTimerExtendable = false;
        lv_timerExtension = gf_LeastConstructionProgress(lv_watchTowers, 30.0);
        TimerStart(gv_watchTowerTimer, lv_timerExtension, false, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1EB34B69"));
        SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        ObjectiveDestroy(gv_watchTowerObjective);
        TimerPause(gv_watchTowerTimerUpdate, true);
        SoundPlay(SoundLink("UI_TerranMissionFailed", 0), PlayerGroupAll(), 100.0, 0.0);
        autoE9CC7FD7_ae = gv_activeTeams;
        autoE9CC7FD7_ai = 1;
        lv_a = 1;
        for ( ; ( (autoE9CC7FD7_ai >= 0 && lv_a <= autoE9CC7FD7_ae) || (autoE9CC7FD7_ai <= 0 && lv_a >= autoE9CC7FD7_ae) ) ; lv_a += autoE9CC7FD7_ai ) {
            if ((gf_UnitExists(gv_teamData[lv_a].lv_watchTower) == false)) {
                TextExpressionSetToken("Param/Expression/700366F4", "B", gf_GetTribeTextOfTeam(lv_a));
                TextExpressionSetToken("Param/Expression/700366F4", "C", StringExternal("Param/Value/E4EF46C6"));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/700366F4"));
                gf_WatchTowerDefeatTeam(lv_a);
            }
            else {
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WatchTowerTimerExpire_Init () {
    gt_WatchTowerTimerExpire = TriggerCreate("gt_WatchTowerTimerExpire_Func");
    TriggerAddEventTimer(gt_WatchTowerTimerExpire, gv_watchTowerTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FortressShareVision
//--------------------------------------------------------------------------------------------------
bool gt_FortressShareVision_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Fortress"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ShareVisionofUnit(EventUnit(), true, UnitGetOwner(EventUnitCargo()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FortressShareVision_Init () {
    gt_FortressShareVision = TriggerCreate("gt_FortressShareVision_Func");
    TriggerAddEventUnitCargo(gt_FortressShareVision, null, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FortressUnshareVision
//--------------------------------------------------------------------------------------------------
bool gt_FortressUnshareVision_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Fortress"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ShareVisionofUnit(EventUnit(), false, UnitGetOwner(EventUnitCargo()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FortressUnshareVision_Init () {
    gt_FortressUnshareVision = TriggerCreate("gt_FortressUnshareVision_Func");
    TriggerAddEventUnitCargo(gt_FortressUnshareVision, null, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: FortressBeaverScavengerTrigger
//--------------------------------------------------------------------------------------------------
bool gt_FortressBeaverScavengerTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bestitem;
    int lv_bestitemlevel;
    // Variable Initialization
    lv_bestitemlevel = -1;
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 12.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), 0) > lv_bestitemlevel)) {
            lv_bestitem = UnitGroupLoopCurrent();
            lv_bestitemlevel = gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), 0);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if (gf_UnitExists(lv_bestitem)) {
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingUnit(null, lv_bestitem), c_orderQueueReplace);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FortressBeaverScavengerTrigger_Init () {
    gt_FortressBeaverScavengerTrigger = TriggerCreate("gt_FortressBeaverScavengerTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_FortressBeaverScavengerTrigger, c_playerAny, "BeaverScavengerTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AnyUnitDies
//--------------------------------------------------------------------------------------------------
bool gt_AnyUnitDies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "Kobold")) {
        gf_KoboldDeath(UnitGetPosition(EventUnit()), EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Sheep")) {
        gf_SheepDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Dog")) {
        gf_WolfDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Lyote")) {
        gf_DirewolfDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if (((UnitGetType(EventUnit()) == "Bear") || (UnitGetType(EventUnit()) == "FrostBear"))) {
        gf_BearDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Nightwisp")) {
        gf_NightwispDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Pheasant")) {
        gf_PheasantDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Stag")) {
        gf_StagDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "MurlocSlave")) {
        gf_MurlocDeath(EventUnit());
    }
    else if ((UnitGetType(EventUnit()) == "MurlocChieftain")) {
        gf_ChiefDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "DemonLordJaryx")) {
        gf_DLJRDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Zulrogg")) {
        gf_WarlordDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "FrostWitch")) {
        gf_FrostWitchDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "CampfireLit")) {
        gf_CampfireDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Ghoul")) {
        gf_GhoulDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "TombGuardian") && (gv_questIndexActive == 15)) {
        gf_DeathTombGuardian(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "Monstrosity") && (gv_questIndexActive == 7)) {
        gf_DeathMonstrosity(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "UndeadSavage")) {
        gf_UndeadSavageDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "VeilGuardian")) {
        gf_VeilGuardianDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((EventUnit() == gv_exile)) {
        TriggerExecute(gt_ExileAttackVictory, true, false);
    }
    else if ((UnitGetType(EventUnit()) == "RagingArcaneBeast")) {
        gf_RABDeath(EventUnit(), libNtve_gf_KillingUnit());
    }
    else if ((UnitGetType(EventUnit()) == "TheWoundedWizard")) {
        TriggerExecute(gt_WizardExpire, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AnyUnitDies_Init () {
    gt_AnyUnitDies = TriggerCreate("gt_AnyUnitDies_Func");
    TriggerAddEventUnitDied(gt_AnyUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InteractRezShrine
//--------------------------------------------------------------------------------------------------
bool gt_InteractRezShrine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_deadPlayers;
    // Variable Initialization
    lv_deadPlayers = PlayerGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_gameMode == 1))) {
            return false;
        }
        if (!(((UnitGetType(EventUnit()) == "ResurrectionShrine") || (UnitGetType(EventUnit()) == "ResurrectionShrineSouth")))) {
            return false;
        }
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
        if (!((DialogIsVisible(gv_rezzDialog, EventPlayer()) == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) <= gv_interactRadius)) {
        PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(EventPlayer())].lv_members);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (((gv_playerData[PlayerGroupLoopCurrent()].lv_kobold == null) || (UnitIsAlive(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) == false))) {
                PlayerGroupAdd(lv_deadPlayers, PlayerGroupLoopCurrent());
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        if ((PlayerGroupCount(lv_deadPlayers) > 0)) {
            gv_selectedShrine[EventPlayer()] = EventUnit();
            gf_UpdateRezShrine(EventPlayer());
            DialogSetVisible(gv_rezzDialog, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InteractRezShrine_Init () {
    gt_InteractRezShrine = TriggerCreate("gt_InteractRezShrine_Func");
    TriggerAddEventUnitSelected(gt_InteractRezShrine, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DeselectRezShrine
//--------------------------------------------------------------------------------------------------
bool gt_DeselectRezShrine_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "ResurrectionShrine") || (UnitGetType(EventUnit()) == "ResurrectionShrineSouth")))) {
            return false;
        }
        if (!((DialogIsVisible(gv_rezzDialog, EventPlayer()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogSetVisible(gv_rezzDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DeselectRezShrine_Init () {
    gt_DeselectRezShrine = TriggerCreate("gt_DeselectRezShrine_Func");
    TriggerAddEventUnitSelected(gt_DeselectRezShrine, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ClickRezzBTN
//--------------------------------------------------------------------------------------------------
bool gt_ClickRezzBTN_Func (bool testConds, bool runActions) {
    int auto305566B9_ae;
    int auto305566B9_ai;
    // Variable Declarations
    int lv_i;
    unitgroup lv_bank;
    int lv_a;
    int lv_clickedIndex;
    // Variable Initialization
    lv_i = EventPlayer();
    lv_bank = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_rezzDialog))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto305566B9_ae = 4;
    auto305566B9_ai = 1;
    lv_a = 1;
    for ( ; ( (auto305566B9_ai >= 0 && lv_a <= auto305566B9_ae) || (auto305566B9_ai <= 0 && lv_a >= auto305566B9_ae) ) ; lv_a += auto305566B9_ai ) {
        if ((EventDialogControl() == gv_rezzDialogBTN[lv_a])) {
            lv_clickedIndex = lv_a;
        }
        else {
        }
    }
    if ((gv_dead[gv_rezzBTNTargetPlayer[lv_clickedIndex][lv_i]] == true) && (gv_beingResurrected[gv_rezzBTNTargetPlayer[lv_clickedIndex][lv_i]] == false)) {
        if ((DistanceBetweenPoints(UnitGetPosition(gv_playerData[lv_i].lv_kobold), UnitGetPosition(gv_selectedShrine[lv_i])) <= gv_interactRadius)) {
            if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1));
                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_bank);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    DialogSetVisible(gv_rezzDialog, PlayerGroupSingle(lv_i), false);
                    UnitCreateEffectUnit(gv_playerData[lv_i].lv_kobold, "ResurrectingApply", gv_playerData[lv_i].lv_kobold);
                    gf_Resurrecting(gv_playerData[lv_i].lv_kobold, gv_selectedShrine[EventPlayer()], gv_rezzBTNTargetPlayer[lv_clickedIndex][EventPlayer()], 15.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ClickRezzBTN_Init () {
    gt_ClickRezzBTN = TriggerCreate("gt_ClickRezzBTN_Func");
    TriggerAddEventDialogControl(gt_ClickRezzBTN, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish001
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish001_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[1]);
    gf_ReincarnatePlayerFinish(1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish001_Init () {
    gt_ReincarnatePlayerFinish001 = TriggerCreate("gt_ReincarnatePlayerFinish001_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish001, gv_reincarnationTimer[1]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish002
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish002_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[2]);
    gf_ReincarnatePlayerFinish(2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish002_Init () {
    gt_ReincarnatePlayerFinish002 = TriggerCreate("gt_ReincarnatePlayerFinish002_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish002, gv_reincarnationTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish003
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish003_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[3]);
    gf_ReincarnatePlayerFinish(3);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish003_Init () {
    gt_ReincarnatePlayerFinish003 = TriggerCreate("gt_ReincarnatePlayerFinish003_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish003, gv_reincarnationTimer[3]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish004
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish004_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[4]);
    gf_ReincarnatePlayerFinish(4);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish004_Init () {
    gt_ReincarnatePlayerFinish004 = TriggerCreate("gt_ReincarnatePlayerFinish004_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish004, gv_reincarnationTimer[4]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish005
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish005_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[5]);
    gf_ReincarnatePlayerFinish(5);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish005_Init () {
    gt_ReincarnatePlayerFinish005 = TriggerCreate("gt_ReincarnatePlayerFinish005_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish005, gv_reincarnationTimer[5]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish006
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish006_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[6]);
    gf_ReincarnatePlayerFinish(6);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish006_Init () {
    gt_ReincarnatePlayerFinish006 = TriggerCreate("gt_ReincarnatePlayerFinish006_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish006, gv_reincarnationTimer[6]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish007
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish007_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[7]);
    gf_ReincarnatePlayerFinish(7);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish007_Init () {
    gt_ReincarnatePlayerFinish007 = TriggerCreate("gt_ReincarnatePlayerFinish007_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish007, gv_reincarnationTimer[7]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish008
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish008_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[8]);
    gf_ReincarnatePlayerFinish(8);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish008_Init () {
    gt_ReincarnatePlayerFinish008 = TriggerCreate("gt_ReincarnatePlayerFinish008_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish008, gv_reincarnationTimer[8]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish009
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish009_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[9]);
    gf_ReincarnatePlayerFinish(9);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish009_Init () {
    gt_ReincarnatePlayerFinish009 = TriggerCreate("gt_ReincarnatePlayerFinish009_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish009, gv_reincarnationTimer[9]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish010
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish010_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[10]);
    gf_ReincarnatePlayerFinish(10);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish010_Init () {
    gt_ReincarnatePlayerFinish010 = TriggerCreate("gt_ReincarnatePlayerFinish010_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish010, gv_reincarnationTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish011
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish011_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[11]);
    gf_ReincarnatePlayerFinish(11);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish011_Init () {
    gt_ReincarnatePlayerFinish011 = TriggerCreate("gt_ReincarnatePlayerFinish011_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish011, gv_reincarnationTimer[11]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish012
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish012_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[12]);
    gf_ReincarnatePlayerFinish(12);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish012_Init () {
    gt_ReincarnatePlayerFinish012 = TriggerCreate("gt_ReincarnatePlayerFinish012_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish012, gv_reincarnationTimer[12]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish013
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish013_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[13]);
    gf_ReincarnatePlayerFinish(13);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish013_Init () {
    gt_ReincarnatePlayerFinish013 = TriggerCreate("gt_ReincarnatePlayerFinish013_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish013, gv_reincarnationTimer[13]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish014
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish014_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[14]);
    gf_ReincarnatePlayerFinish(14);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish014_Init () {
    gt_ReincarnatePlayerFinish014 = TriggerCreate("gt_ReincarnatePlayerFinish014_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish014, gv_reincarnationTimer[14]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ReincarnatePlayerFinish015
//--------------------------------------------------------------------------------------------------
bool gt_ReincarnatePlayerFinish015_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_reincarnationTimerWindow[15]);
    gf_ReincarnatePlayerFinish(15);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReincarnatePlayerFinish015_Init () {
    gt_ReincarnatePlayerFinish015 = TriggerCreate("gt_ReincarnatePlayerFinish015_Func");
    TriggerAddEventTimer(gt_ReincarnatePlayerFinish015, gv_reincarnationTimer[15]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ObservationRequest
//--------------------------------------------------------------------------------------------------
bool gt_ObservationRequest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_observeRequestBtn))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogSetVisible(gv_observeRequest, PlayerGroupSingle(EventPlayer()), false);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_allDead == false) && (gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_watchTowerDefeat == false)) {
            if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                DialogSetVisible(gv_observeAnswer[EventPlayer()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
            }
            else {
                if ((PlayerGroupLoopCurrent() != 0) && (PlayerGroupLoopCurrent() != 15)) {
                    libNtve_gf_SetAllianceOneWay(PlayerGroupLoopCurrent(), EventPlayer(), 6);
                }
                else {
                }
            }
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObservationRequest_Init () {
    gt_ObservationRequest = TriggerCreate("gt_ObservationRequest_Func");
    TriggerAddEventDialogControl(gt_ObservationRequest, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ObservationAnswer
//--------------------------------------------------------------------------------------------------
bool gt_ObservationAnswer_Func (bool testConds, bool runActions) {
    int autoC67B6720_ae;
    int autoC67B6720_ai;
    // Variable Declarations
    int lv_a;
    bool lv_something;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    autoC67B6720_ae = gv_players;
    autoC67B6720_ai = 1;
    lv_a = 1;
    for ( ; ( (autoC67B6720_ai >= 0 && lv_a <= autoC67B6720_ae) || (autoC67B6720_ai <= 0 && lv_a >= autoC67B6720_ae) ) ; lv_a += autoC67B6720_ai ) {
        if ((EventDialogControl() == gv_observeAnswerBtnYes[lv_a])) {
            lv_something = true;
            libNtve_gf_SetAllianceOneWay(EventPlayer(), lv_a, 6);
        }
        else {
        }
        if ((EventDialogControl() == gv_observeAnswerBtnNo[lv_a])) {
            lv_something = true;
        }
        else {
        }
    }
    if ((lv_something == true)) {
        DialogSetVisible(DialogControlGetDialog(EventDialogControl()), PlayerGroupSingle(EventPlayer()), false);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObservationAnswer_Init () {
    gt_ObservationAnswer = TriggerCreate("gt_ObservationAnswer_Func");
    TriggerAddEventDialogControl(gt_ObservationAnswer, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PlayerLeaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_tutorial == false)) {
        if ((gv_gameStarted == true) && (gv_gameOver == false)) {
            if ((gv_banksInitialized == true) && (gv_bankSynced[EventPlayer()] == true)) {
                gv_acclosses[EventPlayer()] += 1;
                if ((gv_rated == true) && (gv_validRatedGame == true)) {
                    gf_UpdatePlayerRating(EventPlayer(), 0);
                }
                else {
                }
                gf_ModifyMatchHistory(EventPlayer(), "D");
                gf_SaveResources(EventPlayer());
            }
            else {
            }
            if ((gf_LastTeamStanding() != -1)) {
                gf_Endgame(false, false);
            }
            else if ((gv_activeTeams == 1) && gf_AllDeadOnTeam(gf_GetTeamOfPlayer(EventPlayer()), false)) {
                gf_Endgame(false, true);
            }
            else if (true) {
                gv_playerData[EventPlayer()].lv_isAI = true;
                UnitSetCustomValue(gv_playerData[EventPlayer()].lv_kobold, 5, 1.0);
                gf_AICustomization(EventPlayer());
                if ((gv_playerData[EventPlayer()].lv_alive == true)) {
                    UnitBehaviorAdd(gv_playerData[EventPlayer()].lv_kobold, "KoboldBotInitialDelay", gv_playerData[EventPlayer()].lv_kobold, 1);
                    TextExpressionSetToken("Param/Expression/784232F7", "A", PlayerName(EventPlayer()));
                    TextExpressionSetToken("Param/Expression/784232F7", "B", StringExternal("Param/Value/1D66AD48"));
                    TextExpressionSetToken("Param/Expression/F55BB0D8", "A", TextWithColor(TextExpressionAssemble("Param/Expression/784232F7"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
                    TextExpressionSetToken("Param/Expression/F55BB0D8", "B", StringExternal("Param/Value/1E811A68"));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/F55BB0D8"));
                    gf_DropAllItems(gv_playerData[EventPlayer()].lv_kobold);
                    gf_AISpendSkillPoints(EventPlayer());
                }
                else {
                }
            }
        }
        else {
            if ((gv_gameOver == true) && (gf_GetTeamOfPlayer(EventPlayer()) == gv_winningTeam)) {
                GameOver(EventPlayer(), c_gameOverVictory, false, true);
            }
            else {
            }
        }
    }
    else {
        GameOver(EventPlayer(), c_gameOverVictory, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DTConfigShow
//--------------------------------------------------------------------------------------------------
bool gt_DTConfigShow_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((DialogIsVisible(gv_dTConfigWindow, EventPlayer()) == false)) {
        if ((gv_dTDamageDoneOn[EventPlayer()] == true)) {
            libNtve_gf_SetDialogItemChecked(gv_dTCheckbox[1], true, PlayerGroupSingle(EventPlayer()));
        }
        else {
        }
        if ((gv_dTDamageTakenOn[EventPlayer()] == true)) {
            libNtve_gf_SetDialogItemChecked(gv_dTCheckbox[2], true, PlayerGroupSingle(EventPlayer()));
        }
        else {
        }
        libNtve_gf_SetDialogItemCurrentValue(gv_dTScaleSlider, gv_dTScaleValue[EventPlayer()], PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemCurrentValue(gv_dTDurationSlider, gv_dTDurationValue[EventPlayer()], PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_dTConfigWindow, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DTConfigShow_Init () {
    gt_DTConfigShow = TriggerCreate("gt_DTConfigShow_Func");
    TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, "-dt", true);
    TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, "-damagetext", true);
    TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, "-dtconfig", true);
    TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, "-dton", true);
    TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, "-dtoff", true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DTConfigSetup
//--------------------------------------------------------------------------------------------------
bool gt_DTConfigSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(650, 250, c_anchorCenter, 0, -125, true);
    gv_dTConfigWindow = DialogLastCreated();
    DialogSetVisible(gv_dTConfigWindow, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemCheckBox(gv_dTConfigWindow, 50, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/71EB1DE9"), false);
    gv_dTCheckbox[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_dTConfigWindow, 50, 50, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/344B41F7"), false);
    gv_dTCheckbox[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dTConfigWindow, 250, 50, c_anchorTopLeft, 100, 65, StringExternal("Param/Value/A6640A11"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_dTConfigWindow, 250, 50, c_anchorTopLeft, 100, 115, StringExternal("Param/Value/4262AB6D"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_dTConfigWindow, 275, 50, c_anchorTopRight, 25, 65, StringExternal("Param/Value/948A24F7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dTScaleText = DialogControlLastCreated();
    DialogControlCreate(gv_dTConfigWindow, c_triggerControlTypeSlider);
    gv_dTScaleSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 1.5, PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.75, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 50, 75);
    libNtve_gf_CreateDialogItemLabel(gv_dTConfigWindow, 275, 50, c_anchorTopRight, 25, 140, StringExternal("Param/Value/21DD75E2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dTDurationText = DialogControlLastCreated();
    DialogControlCreate(gv_dTConfigWindow, c_triggerControlTypeSlider);
    gv_dTDurationSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 1.5, PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.75, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 50, 150);
    libNtve_gf_CreateDialogItemButton(gv_dTConfigWindow, 250, 45, c_anchorBottomLeft, 50, 50, StringExternal("Param/Value/152B7C17"), StringExternal("Param/Value/E2ECDD6B"), "");
    gv_dTClose = DialogControlLastCreated();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DTConfigSetup_Init () {
    gt_DTConfigSetup = TriggerCreate("gt_DTConfigSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DTSliderChange
//--------------------------------------------------------------------------------------------------
bool gt_DTSliderChange_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventDialogControl() == gv_dTScaleSlider)) {
        if ((AbsF((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) - 1.0)) <= 0.005)) {
            TextExpressionSetToken("Param/Expression/F5CC08D8", "A", StringExternal("Param/Value/CBD5DBA5"));
            TextExpressionSetToken("Param/Expression/F5CC08D8", "B", FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 2));
            TextExpressionSetToken("Param/Expression/F5CC08D8", "C", StringExternal("Param/Value/0D972C1D"));
            libNtve_gf_SetDialogItemText(gv_dTScaleText, TextExpressionAssemble("Param/Expression/F5CC08D8"), PlayerGroupSingle(EventPlayer()));
        }
        else {
            TextExpressionSetToken("Param/Expression/BCC8566F", "A", StringExternal("Param/Value/8AB0ABEA"));
            TextExpressionSetToken("Param/Expression/BCC8566F", "B", FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 2));
            libNtve_gf_SetDialogItemText(gv_dTScaleText, TextExpressionAssemble("Param/Expression/BCC8566F"), PlayerGroupSingle(EventPlayer()));
        }
    }
    else if ((EventDialogControl() == gv_dTDurationSlider)) {
        if ((AbsF((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) - 1.0)) <= 0.005)) {
            TextExpressionSetToken("Param/Expression/FCE8E1F7", "A", StringExternal("Param/Value/59D007AE"));
            TextExpressionSetToken("Param/Expression/FCE8E1F7", "B", FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 2));
            TextExpressionSetToken("Param/Expression/FCE8E1F7", "C", StringExternal("Param/Value/A8538B25"));
            libNtve_gf_SetDialogItemText(gv_dTDurationText, TextExpressionAssemble("Param/Expression/FCE8E1F7"), PlayerGroupSingle(EventPlayer()));
        }
        else {
            TextExpressionSetToken("Param/Expression/D5B4EE3F", "A", StringExternal("Param/Value/25DAB760"));
            TextExpressionSetToken("Param/Expression/D5B4EE3F", "B", FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 2));
            libNtve_gf_SetDialogItemText(gv_dTDurationText, TextExpressionAssemble("Param/Expression/D5B4EE3F"), PlayerGroupSingle(EventPlayer()));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DTSliderChange_Init () {
    gt_DTSliderChange = TriggerCreate("gt_DTSliderChange_Func");
    TriggerAddEventDialogControl(gt_DTSliderChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DTSaveClose
//--------------------------------------------------------------------------------------------------
bool gt_DTSaveClose_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_dTClose))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogSetVisible(gv_dTConfigWindow, PlayerGroupSingle(EventPlayer()), false);
    if ((libNtve_gf_DialogItemIsChecked(gv_dTCheckbox[1], EventPlayer()) == true)) {
        gv_dTDamageDoneOn[EventPlayer()] = true;
    }
    else {
        gv_dTDamageDoneOn[EventPlayer()] = false;
    }
    if ((libNtve_gf_DialogItemIsChecked(gv_dTCheckbox[2], EventPlayer()) == true)) {
        gv_dTDamageTakenOn[EventPlayer()] = true;
    }
    else {
        gv_dTDamageTakenOn[EventPlayer()] = false;
    }
    gv_dTScaleValue[EventPlayer()] = libNtve_gf_DialogItemValue(gv_dTScaleSlider, EventPlayer());
    gv_dTDurationValue[EventPlayer()] = libNtve_gf_DialogItemValue(gv_dTDurationSlider, EventPlayer());
    BankLoad("nostrobskalufs", EventPlayer());
    BankValueSetFromFlag(BankLastCreated(), "Settings", "DamageTextEnabled", gv_dTDamageDoneOn[EventPlayer()]);
    BankValueSetFromFlag(BankLastCreated(), "Settings", "DamageText2Enabled", gv_dTDamageTakenOn[EventPlayer()]);
    BankValueSetFromFixed(BankLastCreated(), "Settings", "DamageTextScale", gv_dTScaleValue[EventPlayer()]);
    BankValueSetFromFixed(BankLastCreated(), "Settings", "DamageTextDuration", gv_dTDurationValue[EventPlayer()]);
    BankSave(BankLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DTSaveClose_Init () {
    gt_DTSaveClose = TriggerCreate("gt_DTSaveClose_Func");
    TriggerAddEventDialogControl(gt_DTSaveClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HuntKobolds
//--------------------------------------------------------------------------------------------------
bool gt_HuntKobolds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hunter;
    unitgroup lv_targets;
    unitgroup lv_nearbyTargets;
    // Variable Initialization
    lv_hunter = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targets = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "Fortress", "", UnitGetOwner(lv_hunter), c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_nearbyTargets = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(lv_targets, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_nearbyTargets = UnitGroupFilterRegion(lv_targets, RegionCircle(UnitGetPosition(lv_hunter), 16.0), 0);
    if (((UnitGetType(lv_hunter) == "RagingArcaneBeast") || (UnitGetType(lv_hunter) == "DemonLordJaryx"))) {
        UnitIssueOrder(lv_hunter, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_targets, UnitGetPosition(lv_hunter)))), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(lv_nearbyTargets, c_unitCountAlive) > 0) && ((UnitGetType(lv_hunter) == "MurlocChieftain") || (UnitGetType(lv_hunter) == "Zulrogg") || (UnitGetType(lv_hunter) == "FrostWitch"))) {
        UnitIssueOrder(lv_hunter, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyTargets, UnitGetPosition(lv_hunter)))), c_orderQueueReplace);
    }
    else if (((UnitGetType(lv_hunter) == "Dog") || (UnitGetType(lv_hunter) == "Lyote") || (UnitGetType(lv_hunter) == "Ghoul") || (UnitGetType(lv_hunter) == "InfernalMinion") || (UnitGetType(lv_hunter) == "UndeadSavage"))) {
        UnitIssueOrder(lv_hunter, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lv_targets, c_unitCountAlive))), c_orderQueueReplace);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HuntKobolds_Init () {
    gt_HuntKobolds = TriggerCreate("gt_HuntKobolds_Func");
    TriggerAddEventPlayerEffectUsed(gt_HuntKobolds, c_playerAny, "HuntKoboldsTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CowardlyArcher
//--------------------------------------------------------------------------------------------------
bool gt_CowardlyArcher_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_cooldown;
    unitgroup lv_enemies;
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cooldown = gf_AttackCooldown(lv_unit);
    lv_enemies = UnitGroupAlliance(UnitGetOwner(lv_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_unit), (UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropCurrent) + 2.0)), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    // Conditions
    if (testConds) {
        if (!((lv_cooldown >= 0.5))) {
            return false;
        }
        if (!((UnitGroupCount(lv_enemies, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_unit), (lv_cooldown * UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropCurrent)), AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lv_unit)))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CowardlyArcher_Init () {
    gt_CowardlyArcher = TriggerCreate("gt_CowardlyArcher_Func");
    TriggerAddEventPlayerEffectUsed(gt_CowardlyArcher, c_playerAny, "CowardlyArcherTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupAIChatStrings
//--------------------------------------------------------------------------------------------------
bool gt_SetupAIChatStrings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aIRetreatString[1] = "Retreat!";
    gv_aIRetreatString[2] = "Fall back!";
    gv_aIRetreatString[3] = "Time for a tactical withdrawl.";
    gv_aIRetreatString[4] = "We're being overwhelmed!";
    gv_aIRetreatString[5] = "We are outmatched!";
    gv_aIRetreatString[6] = "They are too strong!";
    gv_aIRetreatString[7] = "We must regroup at a safer location!";
    gv_aIRetreatString[8] = "I have underestimated the enemy. Flee!";
    gv_aIReviveString[1] = "I'm on my way to a resurrection shrine!";
    gv_aIReviveString[2] = "Hold on, I'm heading to a resurrection shrine.";
    gv_aIReviveString[3] = "Just a moment, I'm going to revive someone.";
    gv_aIQuestKillString[1] = "Let's rid the forest of that foul beast!";
    gv_aIQuestKillString[2] = "That monster will not take our candles!";
    gv_aIQuestKillString[3] = "That opponent over there must have wonderful treasure!";
    gv_aIQuestKillString[4] = "What a monstrous creature!";
    gv_aIQuestKillString[5] = "We must defend the forest against the invader.";
    gv_aIQuestKillString[6] = "A mighty foe!";
    gv_aIQuestKillString[7] = "Glory awaits!";
    gv_aIQuestLootString[1] = "I smell... loot?";
    gv_aIQuestLootString[2] = "Treasure!";
    gv_aIQuestLootString[3] = "Hands off! I saw it first.";
    gv_aIQuestLootString[4] = "Oooh, shinies!";
    gv_aIQuestLootString[5] = "It's looting time!";
    gv_aIQuestLootString[6] = "Don't let our enemies get their hands on the treasure!";
    gv_aIQuestString[1] = "Let's do this!";
    gv_aIQuestString[2] = "Let's go complete the quest.";
    gv_aIQuestString[3] = "I will bring honor to our tribe!";
    gv_aIQuestString[4] = "We'll beat the enemy tribe to it!";
    gv_aIQuestString[5] = "To arms!";
    gv_aIQuestString[6] = "They no take candle!";
    gv_aIQuestString[7] = "We should prevent the enemy from completing this task.";
    gv_aIQuestGladiatorString[1] = "I am the strongest member of our tribe! I will go.";
    gv_aIQuestGladiatorString[2] = "I believe I can defeat anyone from the other tribe.";
    gv_aIQuestGladiatorString[3] = "Wish me luck... I think I'll need it.";
    gv_aIQuestDeadnightString[1] = "I have a bad feeling about this.";
    gv_aIQuestDeadnightString[2] = "What in the name of the candle is going on?";
    gv_aIQuestDeadnightString[3] = "Wait... what is happening?";
    gv_aIQuestDeadnightString[4] = "Oh no!";
    gv_aISpellString[1] = "I have learned a new spell.";
    gv_aISpellString[2] = "I'm on my way to becoming a powerful shaman!";
    gv_aISpellString[3] = "This wizard just taught me a new trick. I can't wait to try it out.";
    gv_aISpellString[4] = "I know some new magicks! My enemies will tremble.";
    gv_aISpellString[5] = "These wizards sure know some fancy stuff!";
    gv_aITrapsString[1] = "I'm putting down some spike traps over here.";
    gv_aITrapsString[2] = "Preparing some traps here, remember to lure the enemy into them if they attack.";
    gv_aITrapsString[3] = "Our enemies are in for a spiky surprise if they come by this way!";
    gv_aITauntString[1] = "Hah! Your tribe is weak!";
    gv_aITauntString[2] = "We will rule this forest!";
    gv_aITauntString[3] = "I took your fallen comrade's candle, how do you like that?";
    gv_aITauntString[4] = "You're pathetic!";
    gv_aITauntString[5] = "I didn't even break a sweat.";
    gv_aITauntString[6] = "Leave this forest while you still can!";
    gv_aITauntString[7] = "You cannot hide from us!";
    gv_aITauntString[8] = "Run away you cowards!";
    gv_aIMonumentString[1] = "We must not let them finish the monument!";
    gv_aIMonumentString[2] = "Attack them, now!";
    gv_aIMonumentString[3] = "Let's go burn down their camp!";
    gv_aIMonumentString[4] = "The time to strike is now!";
    gv_aIMonumentBuildString[1] = "I will gather some resources and build the monument!";
    gv_aIMonumentBuildString[2] = "Help me gather some resources and I will construct a monument in honor of Barnet!";
    gv_aIExileString[1] = "Time to kill the king!";
    gv_aIExileString[2] = "Let us go end this fallen monarch's miserable life.";
    gv_aIExileString[3] = "We should earn the favor of the new king by hunting down his predecessor!";
    gv_aIExileString[4] = "How the mighty have fallen. Let's go end this!";
    gv_aIPirateString[1] = "Diggy diggy hole.";
    gv_aIPirateString[2] = "I'm a kobold and I'm digging a hole!";
    gv_aIPirateString[3] = "Where is the treasure!";
    gv_aIPirateString[4] = "I know it's around here somewhere.";
    gv_aIPirateString[5] = "Help me find the treasure!";
    gv_aIPetString[1] = "Time to go hunting!";
    gv_aIPetString[2] = "I'm going to tame some pets.";
    gv_aIPetString[3] = "I'm making an obedience rod!";
    gv_aIChefQuestString[1] = "I'm a good chef, and I will try to satisfy the gastronomist!";
    gv_aIChefQuestString[2] = "I will attempt to make the food that he wants.";
    gv_aIEnemySighted[1] = "I have engaged the enemy.";
    gv_aIEnemySighted[2] = "Enemies!";
    gv_aIEnemySighted[3] = "I have found our rivals.";
    gv_aIEnemySighted[4] = "Today is a good day to die!";
    gv_aIEnemySighted[5] = "Let's fight!";
    gv_aIEnemySighted[6] = "Over here!";
    gv_aIEnemySighted[7] = "I will take their candle!";
    gv_aIEnemySighted[8] = "Join me in battle!";
    gv_aIEnemySighted[9] = "To arms!";
    gv_aIEnemySighted[10] = "Kill them!";
    gv_aIWatchTowerBuilder[1] = "I will build a Watch Tower for us.";
    gv_aIWatchTowerBuilder[2] = "I'm gathering resources for a Watch Tower. Please assist me.";
    gv_aIWatchTowerBuilder[3] = "We should build a Watch Tower.";
    gv_aIFishingString[1] = "Let's go on a fishing expedition!";
    gv_aIFishingString[2] = "I'm going to see if I can catch some fish.";
    gv_aIFishingString[3] = "Let's see what fish we can find.";
    gv_aIFishingString[4] = "I'm making a fishing rod.";
    gv_aIFishingString[5] = "Flee you fool fish, for here comes ferocious I to catch you all!";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupAIChatStrings_Init () {
    gt_SetupAIChatStrings = TriggerCreate("gt_SetupAIChatStrings_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIMainThread
//--------------------------------------------------------------------------------------------------
bool gt_AIMainThread_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kobold;
    int lv_i;
    point lv_p;
    unitgroup lv_g;
    // Variable Initialization
    lv_kobold = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_i = UnitGetOwner(lv_kobold);
    lv_g = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aIData[lv_i].lv_logicInProgress = true;
    if (gv_aIData[lv_i].lv_cycle >= 100) {
        gv_aIData[lv_i].lv_cycle = 1;
    }
    else {
        gv_aIData[lv_i].lv_cycle = gv_aIData[lv_i].lv_cycle + 1;
    }
    TextExpressionSetToken("Param/Expression/A5EA6E2A", "A", StringExternal("Param/Value/2AAD3141"));
    TextExpressionSetToken("Param/Expression/A5EA6E2A", "B", IntToText(gv_aIData[lv_i].lv_cycle));
    TextExpressionSetToken("Param/Expression/A5EA6E2A", "C", StringExternal("Param/Value/EE43454B"));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/A5EA6E2A"), false);
    if ((ModI(gv_aIData[lv_i].lv_cycle, 10) == 0)) {
        gf_AIExcessItems(lv_kobold);
    }
    else {
    }
    gf_AIRunWalk(lv_kobold);
    if (gf_AIEquipment(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/040EEAE7"), false);
    }
    else if (gf_AIRetreat(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/C76FBA48"), false);
    }
    else if (gf_AIQuestingImperative(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/469D9840"), false);
    }
    else if (gf_AICombat(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/D0AB2416"), false);
    }
    else if (gf_AITakeABreath(lv_kobold)) {
    }
    else if (gf_AIEarlyExploring(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/49EAF99F"), false);
    }
    else if (gf_AIFood(lv_kobold, false, gv_playerData[lv_i].lv_hunger, false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/A3BE3602"), false);
    }
    else if (gf_AIStamina(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/7618E936"), false);
    }
    else if (gf_AICampfire(lv_kobold, gv_playerData[lv_i].lv_warmth, null, false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/65127227"), false);
    }
    else if (gf_AIQuestingHighPriority(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/B1F9840E"), false);
    }
    else if (gf_AIResurrect(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/C423D109"), false);
    }
    else if (gf_AIHelpAlly(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/F757DA57"), false);
    }
    else if (gf_AIWolves(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/C64A49F4"), false);
    }
    else if (gf_AITradeSellStore(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/CDA0E5FF"), false);
    }
    else if (gf_AIMurlocs(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/FC243E38"), false);
    }
    else if (gf_AITavern(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/57A6D80F"), false);
    }
    else if (gf_AIWatchTower(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/1B69EDE4"), false);
    }
    else if (gf_AIADT(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/725BCBCD"), false);
    }
    else if (gf_AISmithy(lv_kobold, gv_aIData[lv_i].lv_smithyDesire)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/5DE7B309"), false);
    }
    else if (gf_AIWorkbench(lv_kobold, gv_aIData[lv_i].lv_benchDesire)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/550BECE0"), false);
    }
    else if (gf_AIHuntersLodge(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/F8CCD237"), false);
    }
    else if (gf_AITrees(lv_kobold, 1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/53608861"), false);
    }
    else if (gf_AIStone(lv_kobold, 1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/F40C68F3"), false);
    }
    else if (gf_AIPhez(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/ECE395E7"), false);
    }
    else if (gf_AISheep(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/E2255BC5"), false);
    }
    else if (gf_AIRepairFortress(lv_kobold)) {
    }
    else if (gf_AIHerbs(lv_kobold, 1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/4F3A39BE"), false);
    }
    else if (gf_AIStags(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/42507937"), false);
    }
    else if (gf_AIQuestingNormal(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/A391879D"), false);
    }
    else if (gf_AITrees(lv_kobold, 2)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/E9E0C8BD"), false);
    }
    else if (gf_AIStone(lv_kobold, 2)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/55685202"), false);
    }
    else if (gf_AIStone(lv_kobold, 3)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/E61D1DB0"), false);
    }
    else if (gf_AIHerbs(lv_kobold, 2)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/9FCF16CB"), false);
    }
    else if (gf_AIBerries(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/71055701"), false);
    }
    else if (gf_AINightwisp(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/113E61F4"), false);
    }
    else if (gf_AIStorageCleaning(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/1F98C27C"), false);
    }
    else if (gf_AIGold(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/6276CF00"), false);
    }
    else if (gf_AITraps(lv_kobold)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/64C0307D"), false);
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/21A3E8BC"), false);
        if ((gv_aIData[lv_i].lv_weightedPOI != null)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_kobold), gv_aIData[lv_i].lv_weightedPOI) <= 6.0) && gf_PathableMaximum(lv_kobold, gv_aIData[lv_i].lv_weightedPOI, 60)) {
                gv_aIData[lv_i].lv_weightedPOI = null;
            }
            else {
                UnitIssueOrder(lv_kobold, OrderTargetingPoint(AbilityCommand("move", 0), gv_aIData[lv_i].lv_weightedPOI), c_orderQueueReplace);
            }
        }
        else {
            lv_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Kobold", "Fortress", "", lv_i, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_g, c_unitCountAlive) > 0)) {
                lv_p = PointWithOffsetPolar(UnitGetPosition(lv_kobold), 32.0, (AngleBetweenPoints(UnitGetPosition(lv_kobold), UnitGetPosition(UnitGroupRandomUnit(lv_g, c_unitCountAlive))) + RandomFixed(-45.0, 45.0)));
            }
            else {
                lv_p = RegionRandomPoint(RegionPlayableMap());
            }
            if ((UnitGroupCount(lv_g, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lv_kobold, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0) && gf_AICanCastSpell(lv_kobold, AbilityCommand("Clairvoyance", 0))) {
                UnitIssueOrder(lv_kobold, OrderTargetingPoint(AbilityCommand("Clairvoyance", 0), RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(lv_g), 64.0))), c_orderQueueReplace);
            }
            else {
                if (gf_PathableMaximum(lv_kobold, lv_p, 500)) {
                    UnitIssueOrder(lv_kobold, OrderTargetingPoint(AbilityCommand("move", 0), lv_p), c_orderQueueReplace);
                    gv_aIData[lv_i].lv_weightedPOI = lv_p;
                }
                else {
                }
            }
        }
    }
    gv_aIData[lv_i].lv_logicInProgress = false;
    TriggerDebugOutput(1, StringExternal("Param/Value/10E0D061"), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIMainThread_Init () {
    gt_AIMainThread = TriggerCreate("gt_AIMainThread_Func");
    TriggerAddEventPlayerEffectUsed(gt_AIMainThread, c_playerAny, "KoboldBotTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIHelperEnemyStart
//--------------------------------------------------------------------------------------------------
bool gt_AIHelperEnemyStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAdd(gv_aIData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_enemies, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIHelperEnemyStart_Init () {
    gt_AIHelperEnemyStart = TriggerCreate("gt_AIHelperEnemyStart_Func");
    TriggerAddEventPlayerEffectUsed(gt_AIHelperEnemyStart, c_playerAny, "AIHelperEnemyInitial");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIHelperEnemyEnd
//--------------------------------------------------------------------------------------------------
bool gt_AIHelperEnemyEnd_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(EventPlayerEffectUsedUnit(c_effectUnitCaster)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupRemove(gv_aIData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_enemies, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIHelperEnemyEnd_Init () {
    gt_AIHelperEnemyEnd = TriggerCreate("gt_AIHelperEnemyEnd_Func");
    TriggerAddEventPlayerEffectUsed(gt_AIHelperEnemyEnd, c_playerAny, "AIHelperEnemyTriggerEnd");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIRecentCombatExpire
//--------------------------------------------------------------------------------------------------
bool gt_AIRecentCombatExpire_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(EventUnit(), gv_aIStatusIndex, IntToFixed(0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIRecentCombatExpire_Init () {
    gt_AIRecentCombatExpire = TriggerCreate("gt_AIRecentCombatExpire_Func");
    TriggerAddEventUnitBehaviorChange(gt_AIRecentCombatExpire, null, "AIRecentCombat", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AIBuildPlacement
//--------------------------------------------------------------------------------------------------
bool gt_AIBuildPlacement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "KoboldBotNormal") == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/AD09E1CC"), false);
    TimerStart(gv_aIData[UnitGetOwner(EventUnit())].lv_buildPlacement, 2.0, false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIBuildPlacement_Init () {
    gt_AIBuildPlacement = TriggerCreate("gt_AIBuildPlacement_Func");
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 1), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 0), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 2), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 3), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 4), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 5), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 7), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 8), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 6), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 14), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 9), c_abilBuildStageApproach, false);
    TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand("KoboldTestBuild", 16), c_abilBuildStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AISelectionDisable
//--------------------------------------------------------------------------------------------------
bool gt_AISelectionDisable_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((EventPlayer() != UnitGetOwner(EventUnit())))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "KoboldBotNormal") == true))) {
            return false;
        }
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), EventPlayer(), 0) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAdd(gv_aISelected2[EventPlayer()], EventUnit());
    if ((UnitHasBehavior(EventUnit(), "ToggleAI") == false)) {
        UnitBehaviorAdd(EventUnit(), "ToggleAI", EventUnit(), 1);
        gf_Advancedtag(EventUnit(), EventPlayer(), StringExternal("Param/Value/99962DFE"), 3.0, 24);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AISelectionDisable_Init () {
    gt_AISelectionDisable = TriggerCreate("gt_AISelectionDisable_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AISelectionEnable
//--------------------------------------------------------------------------------------------------
bool gt_AISelectionEnable_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((EventPlayer() != UnitGetOwner(EventUnit())))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "KoboldBotNormal") == true))) {
            return false;
        }
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), EventPlayer(), 0) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupRemove(gv_aISelected2[EventPlayer()], EventUnit());
    if ((UnitHasBehavior(EventUnit(), "ToggleAI") == true) && (gf_OthersSelectingUnit(EventUnit(), EventPlayer()) == false)) {
        UnitBehaviorRemove(EventUnit(), "ToggleAI", 1);
        gf_Advancedtag(EventUnit(), EventPlayer(), StringExternal("Param/Value/D5A03610"), 3.0, 24);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AISelectionEnable_Init () {
    gt_AISelectionEnable = TriggerCreate("gt_AISelectionEnable_Func");
    TriggerAddEventUnitSelected(gt_AISelectionEnable, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NonAIinCombatStart
//--------------------------------------------------------------------------------------------------
bool gt_NonAIinCombatStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_aIStatusIndex, IntToFixed(2));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NonAIinCombatStart_Init () {
    gt_NonAIinCombatStart = TriggerCreate("gt_NonAIinCombatStart_Func");
    TriggerAddEventPlayerEffectUsed(gt_NonAIinCombatStart, c_playerAny, "AICombatTriggerStart");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NonAIinCombatEnd
//--------------------------------------------------------------------------------------------------
bool gt_NonAIinCombatEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_aIStatusIndex, IntToFixed(0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NonAIinCombatEnd_Init () {
    gt_NonAIinCombatEnd = TriggerCreate("gt_NonAIinCombatEnd_Func");
    TriggerAddEventPlayerEffectUsed(gt_NonAIinCombatEnd, c_playerAny, "AICombatTriggerEnd");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocSlaveEnd
//--------------------------------------------------------------------------------------------------
bool gt_MurlocSlaveEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_DropAllItems(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocSlaveEnd_Init () {
    gt_MurlocSlaveEnd = TriggerCreate("gt_MurlocSlaveEnd_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocSlaveEnd, c_playerAny, "MurlocContractTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocAction
//--------------------------------------------------------------------------------------------------
bool gt_MurlocAction_Func (bool testConds, bool runActions) {
    int auto7B8F5ED2_val;
    // Variable Declarations
    unit lv_murloc;
    int lv_i;
    unitgroup lv_a;
    unit lv_b;
    unit lv_u;
    point lv_c;
    int lv_index;
    int lv_integerG;
    point lv_dropoffLoc;
    unit lv_fNode;
    // Variable Initialization
    lv_murloc = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_i = UnitGetOwner(lv_murloc);
    lv_a = UnitGroupEmpty();
    lv_fNode = gf_GetMurlocFocalNode(lv_murloc);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_murloc, "Cooking") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CampfireLit", "", "", lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_murloc), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
    if ((gv_playerData[lv_i].lv_isAI == true) && (gv_b_Day == false) && (UnitGroupCount(UnitGroup("Lyote", 15, RegionCircle(UnitGetPosition(lv_murloc), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_murloc), "Sight", lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && gf_UnitExists(lv_b)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_murloc), UnitGetPosition(lv_b)) <= 4.0)) {
            UnitIssueOrder(lv_murloc, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_murloc, OrderTargetingUnit(AbilityCommand("move", 0), lv_b), c_orderQueueReplace);
        }
    }
    else {
        lv_a = UnitInventoryGroup(lv_murloc);
        if ((UnitHasBehavior(lv_murloc, "MurlocChef") == true)) {
            UnitGroupLoopBegin(lv_a);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitGetType(UnitGroupLoopCurrent()) != "RawLamb") && (UnitGetType(UnitGroupLoopCurrent()) != "RawWolfMeat")) {
                }
                else {
                    UnitGroupRemove(lv_a, UnitGroupLoopCurrent());
                }
            }
            UnitGroupLoopEnd();
        }
        else {
        }
        if (((UnitGroupCount(lv_a, c_unitCountAlive) >= 4) || ((UnitGroupCount(lv_a, c_unitCountAlive) >= 1) && (gv_playerData[lv_i].lv_isAI == true) && (UnitHasBehavior(lv_murloc, "MurlocContract") == true) && (UnitBehaviorDuration(lv_murloc, "MurlocContract") <= ((IntToFixed(AIPathingCostUnit(lv_murloc, gf_GetDropoffLocation(lv_murloc), c_ignoreEnemyBuildings)) / 1.5) + 5.0))))) {
            if ((gv_playerData[lv_i].lv_isAI == true) && (UnitHasBehavior(lv_murloc, "MurlocReturnItems") == false)) {
                lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("StorageOutpost", lv_i, RegionCircle(UnitGetPosition(lv_murloc), 64.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                if (gf_UnitExists(lv_b)) {
                    UnitSetCustomValue(lv_murloc, 2, 2.0);
                    UnitSetCustomValue(lv_murloc, 3, PointGetX(UnitGetPosition(lv_b)));
                    UnitSetCustomValue(lv_murloc, 4, PointGetY(UnitGetPosition(lv_b)));
                }
                else {
                }
            }
            else {
            }
            UnitBehaviorAdd(lv_murloc, "MurlocReturnItems", lv_murloc, 1);
        }
        else {
            UnitBehaviorRemove(lv_murloc, "MurlocReturnItems", 1);
        }
        lv_a = UnitGroupEmpty();
        if (((UnitHasBehavior(lv_murloc, "MurlocReturnItems") == true) || (UnitHasBehavior(lv_murloc, "MurlocForcedReturn") == true))) {
            lv_dropoffLoc = gf_GetDropoffLocation(lv_murloc);
            if ((lv_dropoffLoc != null)) {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_murloc), lv_dropoffLoc) <= 2.5)) {
                    lv_a = UnitGroup("StorageOutpost", lv_i, RegionCircle(lv_dropoffLoc, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, lv_dropoffLoc);
                    if (gf_UnitExists(lv_b) && (UnitGetCustomValue(lv_murloc, 2) == 2.0) && (UnitGetCustomValue(lv_b, 0) == 0.0)) {
                        UnitGroupLoopBegin(UnitInventoryGroup(lv_murloc));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(UnitGetPosition(lv_b), RandomFixed(1.3, 1.6), (AngleBetweenPoints(UnitGetPosition(lv_b), UnitGetPosition(lv_murloc)) + RandomFixed(-60.0, 60.0))), false);
                            UnitIssueOrder(lv_b, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueAddToEnd);
                        }
                        UnitGroupLoopEnd();
                        UnitBehaviorRemove(lv_murloc, "MurlocReturnItems", 1);
                        UnitBehaviorRemove(lv_murloc, "MurlocForcedReturn", 1);
                    }
                    else {
                        gf_DropAllItems(lv_murloc);
                        UnitBehaviorRemove(lv_murloc, "MurlocReturnItems", 1);
                        UnitBehaviorRemove(lv_murloc, "MurlocForcedReturn", 1);
                    }
                }
                else {
                    UnitIssueOrder(lv_murloc, OrderTargetingPoint(AbilityCommand("move", 0), lv_dropoffLoc), c_orderQueueReplace);
                }
            }
            else {
                gf_Quicktag(lv_murloc, StringExternal("Param/Value/E1809747"), 2.0, 24);
            }
        }
        else if ((UnitHasBehavior(lv_murloc, "MurlocFetchLumber") == true)) {
            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Lumber", "InfusedLumber", "", c_playerAny, c_unitAllianceAny, RegionCircle(UnitGetPosition(lv_murloc), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_a = gf_UnitsInUnitGroupWithBuff(lv_a, "FreshLumber");
            lv_u = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
            if (gf_UnitExists(lv_u) && gf_Allowedtopickup(lv_murloc, lv_u)) {
                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_u), c_orderQueueReplace);
            }
            else {
                if (gf_UnitExists(lv_fNode) && ((UnitGetType(lv_fNode) == "MapleTree") || (UnitGetType(lv_fNode) == "ElderTree"))) {
                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(AbilityCommand("attack", 0), lv_fNode), c_orderQueueReplace);
                }
                else {
                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("MapleTree", "ElderTree", "", c_playerAny, c_unitAllianceAny, RegionCircle(UnitGetPosition(lv_murloc), (32.0 + (BoolToInt(gv_playerData[lv_i].lv_isAI) * 32.0))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_a = gf_UnitsInUnitGroupWithoutBuff(lv_a, "GrowingTree");
                    lv_u = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                    if (gf_UnitExists(lv_u)) {
                        UnitIssueOrder(lv_murloc, OrderTargetingUnit(AbilityCommand("attack", 0), lv_u), c_orderQueueReplace);
                        gf_SetMurlocFocalNode(lv_murloc, lv_u);
                    }
                    else {
                        gf_Quicktag(lv_murloc, StringExternal("Param/Value/75216AAA"), 2.0, 24);
                    }
                }
            }
        }
        else if ((UnitHasBehavior(lv_murloc, "MurlocFetchStone") == true)) {
            if (gf_UnitExists(lv_fNode) && (UnitGetType(lv_fNode) == "Stone") && (UnitGetCustomValue(lv_fNode, 0) > 1)) {
                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_fNode), c_orderQueueReplace);
            }
            else {
                lv_a = UnitGroup("StoneDeposit", c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), (32.0 + (BoolToInt(gv_playerData[lv_i].lv_isAI) * 32.0))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupRemoveUnitGroup(lv_a, libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 1.0));
                lv_u = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                if (gf_UnitExists(lv_u)) {
                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_u), c_orderQueueReplace);
                    gf_SetMurlocFocalNode(lv_murloc, lv_u);
                }
                else {
                    gf_Quicktag(lv_murloc, StringExternal("Param/Value/8168A55E"), 2.0, 24);
                    if ((gv_playerData[lv_i].lv_isAI == true)) {
                        UnitIssueOrder(lv_murloc, Order(AbilityCommand("MurlocOrderGatherLumber", 0)), c_orderQueueReplace);
                    }
                    else {
                    }
                }
            }
        }
        else if ((UnitHasBehavior(lv_murloc, "MurlocFetchGold") == true)) {
            if (gf_UnitExists(lv_fNode) && (UnitGetType(lv_fNode) == "GoldDeposit")) {
                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_fNode), c_orderQueueReplace);
            }
            else {
                lv_a = UnitGroup("GoldDeposit", c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), (16.0 + (BoolToInt(gv_playerData[lv_i].lv_isAI) * 48.0))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_u = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                if ((UnitGroupCount(lv_a, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_u), c_orderQueueReplace);
                    gf_SetMurlocFocalNode(lv_murloc, lv_u);
                }
                else {
                    gf_Quicktag(lv_murloc, StringExternal("Param/Value/B4299F96"), 2.0, 24);
                    if ((gv_playerData[lv_i].lv_isAI == true)) {
                        auto7B8F5ED2_val = RandomInt(1, 2);
                        if (auto7B8F5ED2_val == 1) {
                            UnitIssueOrder(lv_murloc, Order(AbilityCommand("MurlocOrderGatherLumber", 0)), c_orderQueueReplace);
                        }
                        else if (auto7B8F5ED2_val == 2) {
                            UnitIssueOrder(lv_murloc, Order(AbilityCommand("MurlocOrderMineStone", 0)), c_orderQueueReplace);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
            }
        }
        else if ((UnitHasBehavior(lv_murloc, "MurlocFetchBerries") == true)) {
            if (gf_UnitExists(lv_fNode) && (UnitGetType(lv_fNode) == "BerryBush") && (UnitGetCustomValue(lv_fNode, 0) > 1)) {
                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_fNode), c_orderQueueReplace);
            }
            else {
                lv_a = UnitGroup("BerryBush", c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupRemoveUnitGroup(lv_a, libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 1.0));
                if ((UnitGroupCount(lv_a, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                }
                else {
                    gf_Quicktag(lv_murloc, StringExternal("Param/Value/AEC0354E"), 1.5, 24);
                }
            }
        }
        else if ((UnitHasBehavior(lv_murloc, "MurlocFetchHerbs") == true)) {
            if (gf_UnitExists(lv_fNode) && (UnitGetType(lv_fNode) == "CulinaryHerbBush") && (UnitGetCustomValue(lv_fNode, 0) > 1)) {
                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_fNode), c_orderQueueReplace);
            }
            else {
                lv_a = UnitGroup("CulinaryHerbBush", c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupRemoveUnitGroup(lv_a, libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 1.0));
                if ((UnitGroupCount(lv_a, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                }
                else {
                    gf_Quicktag(lv_murloc, StringExternal("Param/Value/3F97D47D"), 1.5, 24);
                }
            }
        }
        else if ((UnitHasBehavior(lv_murloc, "MurlocChef") == true)) {
            UnitGroupAddUnitGroup(lv_a, UnitGroupFilter("RawLamb", c_playerAny, UnitInventoryGroup(lv_murloc), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
            UnitGroupAddUnitGroup(lv_a, UnitGroupFilter("RawWolfMeat", c_playerAny, UnitInventoryGroup(lv_murloc), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
            if ((UnitGroupCount(lv_a, c_unitCountAlive) > 0)) {
                if ((UnitHasBehavior(lv_murloc, "Heat") == true) && (gf_UnitIsBusy(lv_murloc) == false)) {
                    lv_b = UnitGroupRandomUnit(UnitGroupFilter("RawLamb", c_playerAny, UnitInventoryGroup(lv_murloc), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                    if ((lv_b != null)) {
                        UnitRemove(lv_b);
                        gf_Cooking(lv_murloc, "RoastedLamb", 5.0);
                    }
                    else {
                        lv_b = UnitGroupRandomUnit(UnitGroupFilter("RawWolfMeat", c_playerAny, UnitInventoryGroup(lv_murloc), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                        if ((lv_b != null)) {
                            UnitRemove(lv_b);
                            gf_Cooking(lv_murloc, "WolfSteak", 6.0);
                        }
                        else {
                        }
                    }
                }
                else {
                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CampfireLit", "", "", UnitGetOwner(lv_murloc), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((UnitGroupCount(lv_a, c_unitCountAlive) > 0)) {
                        UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                    }
                    else {
                        gf_Quicktag(lv_murloc, StringExternal("Param/Value/B951E92D"), 1.5, 24);
                    }
                }
            }
            else {
                lv_a = UnitGroupEmpty();
                UnitGroupAddUnitGroup(lv_a, UnitGroup("RawLamb", c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_a, UnitGroup("RawWolfMeat", c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                if ((UnitGroupCount(lv_a, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                }
                else {
                    lv_a = UnitGroup("Sheep", c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((UnitGroupCount(lv_a, c_unitCountAlive) > 0)) {
                        UnitIssueOrder(lv_murloc, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                    }
                    else {
                        gf_Quicktag(lv_murloc, StringExternal("Param/Value/8019E3F3"), 1.5, 24);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocAction_Init () {
    gt_MurlocAction = TriggerCreate("gt_MurlocAction_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocAction, c_playerAny, "MurlocActionTrigger");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderStop
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderStop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/8778C219"), 2.0, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderStop_Init () {
    gt_MurlocOrderStop = TriggerCreate("gt_MurlocOrderStop_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderStop, c_playerAny, "MurlocOrderStop");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderDrop
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderDrop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_DropAllItems(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/D6E8F81A"), 2.0, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderDrop_Init () {
    gt_MurlocOrderDrop = TriggerCreate("gt_MurlocOrderDrop_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderDrop, c_playerAny, "MurlocOrderDrop");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderReturn
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderReturn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MurlocForcedReturn", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/FE0CAB37"), 2.0, 24);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderReturn_Init () {
    gt_MurlocOrderReturn = TriggerCreate("gt_MurlocOrderReturn_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderReturn, c_playerAny, "MurlocOrderReturn");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderMineStone
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderMineStone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/AE8E6EE3"), 2.0, 24);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MurlocFetchStone", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderMineStone_Init () {
    gt_MurlocOrderMineStone = TriggerCreate("gt_MurlocOrderMineStone_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderMineStone, c_playerAny, "MurlocOrderMineStone");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderMineGold
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderMineGold_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/BFA2EB51"), 2.0, 24);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MurlocFetchGold", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderMineGold_Init () {
    gt_MurlocOrderMineGold = TriggerCreate("gt_MurlocOrderMineGold_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderMineGold, c_playerAny, "MurlocOrderMineGold");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderGatherLumber
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderGatherLumber_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/27BE95C1"), 2.0, 24);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MurlocFetchLumber", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderGatherLumber_Init () {
    gt_MurlocOrderGatherLumber = TriggerCreate("gt_MurlocOrderGatherLumber_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderGatherLumber, c_playerAny, "MurlocOrderGatherLumber");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderPickBerries
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderPickBerries_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/75203EFA"), 2.0, 24);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MurlocFetchBerries", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderPickBerries_Init () {
    gt_MurlocOrderPickBerries = TriggerCreate("gt_MurlocOrderPickBerries_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderPickBerries, c_playerAny, "MurlocOrderPickBerries");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderPickHerbs
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderPickHerbs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/ED5B24A8"), 2.0, 24);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MurlocFetchHerbs", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderPickHerbs_Init () {
    gt_MurlocOrderPickHerbs = TriggerCreate("gt_MurlocOrderPickHerbs_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderPickHerbs, c_playerAny, "MurlocOrderPickHerbs");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocOrderChef
//--------------------------------------------------------------------------------------------------
bool gt_MurlocOrderChef_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/4CA35177"), 2.0, 24);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MurlocChef", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocOrderChef_Init () {
    gt_MurlocOrderChef = TriggerCreate("gt_MurlocOrderChef_Func");
    TriggerAddEventPlayerEffectUsed(gt_MurlocOrderChef, c_playerAny, "MurlocOrderChef");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MurlocDropoffPoint
//--------------------------------------------------------------------------------------------------
bool gt_MurlocDropoffPoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_murloc;
    // Variable Initialization
    lv_murloc = EventUnit();
    // Actions
    if (!runActions) {
        return true;
    }
    if (gf_UnitExists(EventUnitTargetUnit())) {
        if ((UnitGetType(EventUnitTargetUnit()) == "Kobold")) {
            UnitSetCustomValue(lv_murloc, 2, 0.0);
            UnitSetCustomValue(lv_murloc, 3, 0.0);
            UnitSetCustomValue(lv_murloc, 4, 0.0);
            gf_Quicktag(lv_murloc, StringExternal("Param/Value/33BA7EF7"), 3.0, 24);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "StorageOutpost")) {
            UnitSetCustomValue(lv_murloc, 2, 2.0);
            UnitSetCustomValue(lv_murloc, 3, PointGetX(UnitGetPosition(EventUnitTargetUnit())));
            UnitSetCustomValue(lv_murloc, 4, PointGetY(UnitGetPosition(EventUnitTargetUnit())));
            gf_Quicktag(lv_murloc, StringExternal("Param/Value/1BDFCA39"), 3.0, 24);
        }
    }
    else {
        UnitSetCustomValue(lv_murloc, 2, 1.0);
        UnitSetCustomValue(lv_murloc, 3, PointGetX(EventUnitTargetPoint()));
        UnitSetCustomValue(lv_murloc, 4, PointGetY(EventUnitTargetPoint()));
        gf_Quicktag(lv_murloc, StringExternal("Param/Value/669D8517"), 3.0, 24);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MurlocDropoffPoint_Init () {
    gt_MurlocDropoffPoint = TriggerCreate("gt_MurlocDropoffPoint_Func");
    TriggerAddEventUnitAbility(gt_MurlocDropoffPoint, null, AbilityCommand("MurlocDropoffPoint", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupTutorial1
//--------------------------------------------------------------------------------------------------
bool gt_SetupTutorial1_Func (bool testConds, bool runActions) {
    int autoAEC96220_ae;
    int autoAEC96220_ai;
    // Variable Declarations
    int lv_a;
    text lv_tutorialPrefix;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_tutorialPrefix = StringExternal("Param/Value/77399EBC");
    gv_tutorialText[1] = StringExternal("Param/Value/24C4A6A4");
    gv_tutorialText[2] = StringExternal("Param/Value/64C4FB0D");
    gv_tutorialText[3] = StringExternal("Param/Value/721DE85E");
    gv_tutorialText[4] = StringExternal("Param/Value/3298AFCD");
    gv_tutorialText[5] = StringExternal("Param/Value/DFE78479");
    gv_tutorialText[6] = StringExternal("Param/Value/ECCCF6EC");
    gv_tutorialText[7] = StringExternal("Param/Value/7E3A890B");
    gv_tutorialText[8] = StringExternal("Param/Value/41E8971F");
    gv_tutorialText[9] = StringExternal("Param/Value/4EC789C3");
    gv_tutorialText[10] = StringExternal("Param/Value/D7EABA7E");
    gv_tutorialText[11] = StringExternal("Param/Value/5D32BDE3");
    gv_tutorialText[12] = StringExternal("Param/Value/E9AC39DB");
    gv_tutorialText[13] = StringExternal("Param/Value/49597113");
    gv_tutorialText[14] = StringExternal("Param/Value/9AF6BF43");
    gv_tutorialText[15] = StringExternal("Param/Value/F23D5124");
    gv_tutorialText[16] = StringExternal("Param/Value/DBE55A47");
    gv_tutorialText[17] = StringExternal("Param/Value/DD512F22");
    gv_tutorialText[18] = StringExternal("Param/Value/0D555093");
    gv_tutorialText[19] = StringExternal("Param/Value/D4B4C9A8");
    gv_tutorialText[20] = StringExternal("Param/Value/5DB59A19");
    gv_tutorialText[21] = StringExternal("Param/Value/E0B05E0B");
    gv_tutorialText[22] = StringExternal("Param/Value/2DC56FA0");
    TextExpressionSetToken("Param/Expression/A9EF70DE", "A", StringExternal("Param/Value/3F885B00"));
    TextExpressionSetToken("Param/Expression/A9EF70DE", "B", PlayerName(1));
    TextExpressionSetToken("Param/Expression/A9EF70DE", "C", StringExternal("Param/Value/59B0793E"));
    gv_tutorialText[23] = TextExpressionAssemble("Param/Expression/A9EF70DE");
    gv_tutorialText[24] = StringExternal("Param/Value/8EB0FEAB");
    gv_tutorialText[25] = StringExternal("Param/Value/17ED9FC3");
    gv_tutorialText[26] = StringExternal("Param/Value/013EB403");
    gv_tutorialText[27] = StringExternal("Param/Value/3A9333F5");
    gv_tutorialText[28] = StringExternal("Param/Value/A1F796D9");
    gv_tutorialText[29] = StringExternal("Param/Value/A4CC2435");
    gv_tutorialText[30] = StringExternal("Param/Value/6CF8C0FF");
    gv_tutorialText[31] = StringExternal("Param/Value/42A1B7E8");
    gv_tutorialText[32] = StringExternal("Param/Value/A3CED425");
    gv_tutorialText[33] = StringExternal("Param/Value/00B7333D");
    gv_tutorialText[34] = StringExternal("Param/Value/D4EECF21");
    gv_tutorialText[35] = StringExternal("Param/Value/1753A93E");
    gv_tutorialText[36] = StringExternal("Param/Value/BE4984DB");
    gv_tutorialText[37] = StringExternal("Param/Value/A3875A3D");
    gv_tutorialText[38] = StringExternal("Param/Value/C803837D");
    gv_tutorialText[39] = StringExternal("Param/Value/FE8B1458");
    gv_tutorialText[40] = StringExternal("Param/Value/B23DB080");
    gv_tutorialText[41] = StringExternal("Param/Value/F1091026");
    autoAEC96220_ae = gv_tutorialTexts;
    autoAEC96220_ai = 1;
    lv_a = 1;
    for ( ; ( (autoAEC96220_ai >= 0 && lv_a <= autoAEC96220_ae) || (autoAEC96220_ai <= 0 && lv_a >= autoAEC96220_ae) ) ; lv_a += autoAEC96220_ai ) {
        TextExpressionSetToken("Param/Expression/B8D1BA16", "B", lv_tutorialPrefix);
        TextExpressionSetToken("Param/Expression/B8D1BA16", "A", gv_tutorialText[lv_a]);
        gv_tutorialText[lv_a] = TextExpressionAssemble("Param/Expression/B8D1BA16");
    }
    libNtve_gf_ShowHideUnit(UnitFromId(79), false);
    libNtve_gf_ShowHideUnit(UnitFromId(127), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1421), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1574), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1573), false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "MapleTree")) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupTutorial1_Init () {
    gt_SetupTutorial1 = TriggerCreate("gt_SetupTutorial1_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SetupTutorial2
//--------------------------------------------------------------------------------------------------
bool gt_SetupTutorial2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 1), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 2), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 4), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 3), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 7), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 6), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 5), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 8), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 15), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 14), false);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "CookingRoastedLamb", false);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "CookingWolfSteak", false);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "CookingRoastedPheasantWithBlueberrySauce", false);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "CookingSpicedLambFeast", false);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "CookingGrilledWolfEntrecote", false);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "CookingBeerBraisedPheasant", false);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "Run", false);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "PlantTree", false);
    TechTreeAbilityAllow(1, AbilityCommand("LightTorch", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("DouseFire", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("RefreshCampfire", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("RefreshCampfireExpert", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("DomesticatedSheep", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("PheasantBait", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftWarmWoolTunic", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftLightLeatherShield", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftLantern", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftHuntsmansJacket", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftElderWand", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftEnigmaticStaff", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftLeatherCoat", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftMysticsTribalShield", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftRoughBlunderbuss", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftVengefulMurlocSkull", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftBearShamansShroud", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftVenomousArbalest", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftCelestialOrb", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftWarlocksVestments", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftMasterRangersMaille", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftGravesingersClaw", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftRepeatingCrossbow", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftStormwizardsRobes", 0), false);
    libNtve_gf_SendActorMessageToUnit(gv_playerData[1].lv_kobold, "AnimGroupApply Alternate");
    libNtve_gf_SendActorMessageToUnit(gv_playerData[1].lv_kobold, "SetWalkAnimMoveSpeed 1");
    CatalogFieldValueSet(c_gameCatalogUnit, "CampfireLit", "LifeRegenRate", 1, IntToString(0));
    gv_dayDuration = 60.0;
    gv_nightDuration = 40.0;
    DialogSetVisible(gv_skillWindowSmall, PlayerGroupSingle(1), false);
    DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(1), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/978CC978"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupTutorial2_Init () {
    gt_SetupTutorial2 = TriggerCreate("gt_SetupTutorial2_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart1
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_pauseNextDusk = true;
    gf_ShowTutorialText(1);
    Wait(4.0, c_timeGame);
    gf_ShowTutorialText(2);
    Wait(6.0, c_timeGame);
    gf_ShowTutorialText(3);
    Wait(7.0, c_timeGame);
    gf_ShowTutorialText(4);
    UnitInventoryCreate(gv_playerData[1].lv_kobold, "Lumber");
    UnitInventoryCreate(gv_playerData[1].lv_kobold, "Stone");
    Wait(10.0, c_timeGame);
    gf_ShowTutorialText(5);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 1), true);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("KoboldTestBuild", 1), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart1_Init () {
    gt_TutorialPart1 = TriggerCreate("gt_TutorialPart1_Func");
    TriggerAddEventTimeElapsed(gt_TutorialPart1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart2
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 1), false);
    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("ConstructCampfire", 0), false);
    gf_ShowTutorialText(6);
    Wait(10.0, c_timeGame);
    gf_ShowTutorialText(7);
    UnitInventoryCreate(gv_playerData[1].lv_kobold, "RawLamb");
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "CookingRoastedLamb", true);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("CookingRoastedLamb", 0), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart2_Init () {
    gt_TutorialPart2 = TriggerCreate("gt_TutorialPart2_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart3
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("CookingRoastedLamb", 0), false);
    gf_ShowTutorialText(8);
    Wait(5.0, c_timeGame);
    gf_ShowTutorialText(9);
    Wait(12.0, c_timeGame);
    gf_ShowTutorialText(10);
    UnitInventoryCreate(gv_playerData[1].lv_kobold, "Lumber");
    UnitInventoryCreate(gv_playerData[1].lv_kobold, "Wool");
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("KoboldTestBuild", 0), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart3_Init () {
    gt_TutorialPart3 = TriggerCreate("gt_TutorialPart3_Func");
    TriggerAddEventUnitAbility(gt_TutorialPart3, null, AbilityCommand("CookingRoastedLamb", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart4
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 0), false);
    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("KoboldTestBuild", 0), false);
    gf_ShowTutorialText(11);
    Wait(6.0, c_timeGame);
    gf_ShowTutorialText(12);
    Wait(7.0, c_timeGame);
    gf_ShowTutorialText(13);
    libNtve_gf_ShowHideUnit(UnitFromId(79), true);
    libNtve_gf_ShowHideUnit(UnitFromId(127), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1421), true);
    UnitBehaviorAdd(UnitFromId(79), "Strobe", UnitFromId(79), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart4_Init () {
    gt_TutorialPart4 = TriggerCreate("gt_TutorialPart4_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart5
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ShowTutorialText(14);
    libNtve_gf_ShowHideUnit(UnitFromId(1574), true);
    UnitSetCustomValue(UnitFromId(1574), 0, 5.0);
    libNtve_gf_ShowHideUnit(UnitFromId(1573), true);
    UnitSetCustomValue(UnitFromId(1573), 0, 5.0);
    UnitBehaviorAdd(UnitFromId(1574), "Strobe", UnitFromId(1574), 1);
    TriggerEnable(gt_TutorialPart6, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart5_Init () {
    gt_TutorialPart5 = TriggerCreate("gt_TutorialPart5_Func");
    TriggerAddEventUnitDied(gt_TutorialPart5, UnitRefFromUnit(UnitFromId(79)));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart5.5
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart55_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ShowTutorialText(15);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart55_Init () {
    gt_TutorialPart55 = TriggerCreate("gt_TutorialPart55_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart6
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TutorialPart55, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ShowTutorialText(16);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 2), true);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("KoboldTestBuild", 2), true);
    UnitBehaviorRemove(UnitFromId(1574), "Strobe", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart6_Init () {
    gt_TutorialPart6 = TriggerCreate("gt_TutorialPart6_Func");
    TriggerEnable(gt_TutorialPart6, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart7
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart7_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_pauseNextDusk = false;
    gv_pauseNextDawn = true;
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 2), false);
    UnitCreate(1, "Sheep", 0, 0, PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.0, 270.0), libNtve_gf_RandomAngle());
    UnitCreate(1, "Sheep", 0, 0, PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.0, 270.0), libNtve_gf_RandomAngle());
    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("KoboldTestBuild", 2), false);
    gf_ShowTutorialText(17);
    Wait(8.0, c_timeGame);
    gf_ShowTutorialText(18);
    Wait(5.0, c_timeGame);
    gf_ShowTutorialText(19);
    Wait(9.0, c_timeGame);
    gf_ShowTutorialText(20);
    Wait(20.0, c_timeGame);
    UnitCreate(1, "Lyote", 0, 15, PointFromId(422), libNtve_gf_RandomAngle());
    Wait(2.0, c_timeGame);
    gf_ShowTutorialText(21);
    Wait(10.0, c_timeGame);
    gf_ShowTutorialText(22);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart7_Init () {
    gt_TutorialPart7 = TriggerCreate("gt_TutorialPart7_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart8
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart8_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_pauseNextDawn = false;
    gv_pauseNextDusk = true;
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ShowTutorialText(23);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart8_Init () {
    gt_TutorialPart8 = TriggerCreate("gt_TutorialPart8_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart9
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart9_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ShowTutorialText(24);
    Wait(9.0, c_timeGame);
    gf_ShowTutorialText(25);
    Wait(10.0, c_timeGame);
    gf_ShowTutorialText(26);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 3), true);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("KoboldTestBuild", 3), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart9_Init () {
    gt_TutorialPart9 = TriggerCreate("gt_TutorialPart9_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart10
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart10_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("KoboldTestBuild", 3), false);
    TechTreeAbilityAllow(1, AbilityCommand("KoboldTestBuild", 3), false);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("CraftSturdyWoodenStick", 0), true);
    gf_ShowTutorialText(27);
    Wait(9.0, c_timeGame);
    gf_ShowTutorialText(28);
    UnitAbilityEnable(gv_playerData[1].lv_kobold, "Run", true);
    Wait(9.0, c_timeGame);
    gf_ShowTutorialText(29);
    Wait(9.0, c_timeGame);
    gf_ShowTutorialText(30);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart10_Init () {
    gt_TutorialPart10 = TriggerCreate("gt_TutorialPart10_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart11
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart11_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ShowTutorialText(31);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("CraftSturdyWoodenStick", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftSturdyWoodenStick", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftWarmWoolTunic", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("CraftWarmWoolTunic", 0), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart11_Init () {
    gt_TutorialPart11 = TriggerCreate("gt_TutorialPart11_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart12
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart12_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_pauseNextDusk = false;
    gv_pauseNextDawn = true;
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ShowTutorialText(32);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("CraftWarmWoolTunic", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("CraftWarmWoolTunic", 0), false);
    Wait(10.0, c_timeGame);
    gf_ShowTutorialText(33);
    Wait(12.0, c_timeGame);
    gf_ShowTutorialText(34);
    Wait(10.0, c_timeGame);
    gf_ShowTutorialText(35);
    TechTreeAbilityAllow(1, AbilityCommand("LightTorch", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("LightTorch", 0), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart12_Init () {
    gt_TutorialPart12 = TriggerCreate("gt_TutorialPart12_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TutorialPart13
//--------------------------------------------------------------------------------------------------
bool gt_TutorialPart13_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_pauseNextDawn = false;
    gv_pauseNextDusk = true;
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ShowTutorialText(36);
    Wait(15.0, c_timeGame);
    gv_gameOver = true;
    gv_winningTeam = 1;
    TriggerEnable(gt_TheBigPeriod, false);
    UnitPauseAll(true);
    SoundtrackPlay(PlayerGroupSingle(1), c_soundtrackCategoryMusic, "KoboldMusicVictory", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/5163E47D"));
    gv_hints[1] = StringReplace(gv_hints[1], "1", 16, 16);
    BankLoad("nostrobskalufs", 1);
    BankValueSetFromString(BankLastCreated(), "stats", "IU8eR7g", gv_hints[1]);
    BankSave(BankLastCreated());
    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    DialogSetVisible(gv_perkWindow, PlayerGroupAll(), true);
    gf_UpdatePerkWindow(EventPlayer());
    gf_ShowTutorialText(38);
    Wait(14.0, c_timeGame);
    gf_ShowTutorialText(39);
    Wait(12.0, c_timeGame);
    gf_ShowTutorialText(40);
    Wait(10.0, c_timeGame);
    gf_ShowTutorialText(41);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TutorialPart13_Init () {
    gt_TutorialPart13 = TriggerCreate("gt_TutorialPart13_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InGameHintsOff
//--------------------------------------------------------------------------------------------------
bool gt_InGameHintsOff_Func (bool testConds, bool runActions) {
    int autoDB2711A8_ae;
    int autoDB2711A8_ai;
    // Variable Declarations
    int lv_a;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A89B67C2"));
    autoDB2711A8_ae = gv_inGameHintsAmount;
    autoDB2711A8_ai = 1;
    lv_a = 1;
    for ( ; ( (autoDB2711A8_ai >= 0 && lv_a <= autoDB2711A8_ae) || (autoDB2711A8_ai <= 0 && lv_a >= autoDB2711A8_ae) ) ; lv_a += autoDB2711A8_ai ) {
        gv_hints[EventPlayer()] = StringReplace(gv_hints[EventPlayer()], "1", lv_a, lv_a);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InGameHintsOff_Init () {
    gt_InGameHintsOff = TriggerCreate("gt_InGameHintsOff_Func");
    TriggerAddEventChatMessage(gt_InGameHintsOff, c_playerAny, "-hintsoff", true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: InGameHintsSelection
//--------------------------------------------------------------------------------------------------
bool gt_InGameHintsSelection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tutorial == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "StoneDeposit")) {
        gf_InGameHint("stone", EventPlayer());
    }
    else if ((UnitGetType(EventUnit()) == "MapleTree")) {
        gf_InGameHint("tree", EventPlayer());
    }
    else if (((UnitGetType(EventUnit()) == "ResurrectionShrineSouth") || (UnitGetType(EventUnit()) == "ResurrectionShrine"))) {
        gf_InGameHint("rezz", EventPlayer());
    }
    else if ((UnitGetType(EventUnit()) == "GoldDeposit")) {
        gf_InGameHint("gold", EventPlayer());
    }
    else if (((UnitGetType(EventUnit()) == "Bear") || (UnitGetType(EventUnit()) == "FrostBear"))) {
        gf_InGameHint("bear", EventPlayer());
    }
    else if ((UnitGetType(EventUnit()) == "Smithy")) {
        gf_InGameHint("smithy", EventPlayer());
    }
    else if ((UnitGetType(EventUnit()) == "BerryBush")) {
        gf_InGameHint("berry", EventPlayer());
    }
    else if ((UnitGetType(EventUnit()) == "CulinaryHerbBush")) {
        gf_InGameHint("herb", EventPlayer());
    }
    else if ((UnitGetType(EventUnit()) == "HuntersLodge")) {
        gf_InGameHint("hunter", EventPlayer());
    }
    else if ((UnitGetType(EventUnit()) == "StorageOutpost")) {
        gf_InGameHint("outpost", EventPlayer());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InGameHintsSelection_Init () {
    gt_InGameHintsSelection = TriggerCreate("gt_InGameHintsSelection_Func");
    TriggerAddEventUnitSelected(gt_InGameHintsSelection, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Nudge
//--------------------------------------------------------------------------------------------------
bool gt_Nudge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, "Nudgable") == true)) {
        lv_p = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold), 8.0));
        UnitSetPosition(gv_playerData[EventPlayer()].lv_kobold, lv_p, false);
        UnitGroupLoopBegin(gv_pets[EventPlayer()]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), lv_p, false);
        }
        UnitGroupLoopEnd();
        UnitBehaviorRemove(gv_playerData[EventPlayer()].lv_kobold, "Nudgable", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/318B4945"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Nudge_Init () {
    gt_Nudge = TriggerCreate("gt_Nudge_Func");
    TriggerAddEventChatMessage(gt_Nudge, c_playerAny, "-nudge", true);
    TriggerAddEventChatMessage(gt_Nudge, c_playerAny, "-stuck", true);
    TriggerAddEventChatMessage(gt_Nudge, c_playerAny, "-unstuck", true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AFKafk
//--------------------------------------------------------------------------------------------------
bool gt_AFKafk_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_aFKUsed[EventPlayer()] == false))) {
            return false;
        }
        if (!(gf_UnitExists(gv_playerData[EventPlayer()].lv_kobold))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/190BE739"));
    gv_aFKUsed[EventPlayer()] = true;
    UnitCreateEffectUnit(gv_playerData[EventPlayer()].lv_kobold, "AFKApply", gv_playerData[EventPlayer()].lv_kobold);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AFKafk_Init () {
    gt_AFKafk = TriggerCreate("gt_AFKafk_Func");
    TriggerAddEventChatMessage(gt_AFKafk, c_playerAny, "-afk", true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ahPlayerBoost
//--------------------------------------------------------------------------------------------------
bool gt_ah_PlayerList_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_admin[EventPlayer()] == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/DAEBEF31"));
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TextExpressionSetToken("Param/Expression/31400223", "A", IntToText(PlayerGroupLoopCurrent()));
        TextExpressionSetToken("Param/Expression/31400223", "B", StringExternal("Param/Value/3740DCEA"));
        TextExpressionSetToken("Param/Expression/31400223", "C", PlayerName(PlayerGroupLoopCurrent()));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/31400223"));
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/A92C4233"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ah_PlayerList_Init () {
    gt_ah_PlayerList = TriggerCreate("gt_ah_PlayerList_Func");
    TriggerAddEventChatMessage(gt_ah_PlayerList, c_playerAny, "-pl", true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ahLevelBoost
//--------------------------------------------------------------------------------------------------
bool gt_ah_LevelBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    const int lv_xp = 5000;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_admin[EventPlayer()] == true))) {
            return false;
        }
        if (!((StringLength(EventChatMessage(false)) == 5))) {
            return false;
        }
        if (!(((StringToFixed(StringSub(EventChatMessage(false), 4, 5)) >= 1) && (StringToFixed(StringSub(EventChatMessage(false), 4, 5)) <= gv_players)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_index = StringToInt(StringSub(EventChatMessage(false), 4, 5));
    gv_accxp[lv_index] = lv_xp;
    TextExpressionSetToken("Param/Expression/E70B43AF", "A", StringExternal("Param/Value/D25F5351"));
    TextExpressionSetToken("Param/Expression/E70B43AF", "B", IntToText(lv_xp));
    TextExpressionSetToken("Param/Expression/E70B43AF", "C", StringExternal("Param/Value/BF9B4F7E"));
    TextExpressionSetToken("Param/Expression/E70B43AF", "D", PlayerName(lv_index));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/E70B43AF"));
    TextExpressionSetToken("Param/Expression/4D61776E", "A", StringExternal("Param/Value/411BEBCD"));
    TextExpressionSetToken("Param/Expression/4D61776E", "B", IntToText(lv_xp));
    TextExpressionSetToken("Param/Expression/4D61776E", "C", StringExternal("Param/Value/57245239"));
    UIDisplayMessage(PlayerGroupSingle(lv_index), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/4D61776E"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ah_LevelBoost_Init () {
    gt_ah_LevelBoost = TriggerCreate("gt_ah_LevelBoost_Func");
    TriggerAddEventChatMessage(gt_ah_LevelBoost, c_playerAny, "-lb", false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ahConquestPoints
//--------------------------------------------------------------------------------------------------
bool gt_ah_ConquestPoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    const int lv_cp = 10000;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_admin[EventPlayer()] == true))) {
            return false;
        }
        if (!((StringLength(EventChatMessage(false)) == 5))) {
            return false;
        }
        if (!(((StringToFixed(StringSub(EventChatMessage(false), 4, 5)) >= 1) && (StringToFixed(StringSub(EventChatMessage(false), 4, 5)) <= gv_players)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_index = StringToInt(StringSub(EventChatMessage(false), 4, 5));
    gv_conqpoints[lv_index] += lv_cp;
    TextExpressionSetToken("Param/Expression/04E31FE6", "A", StringExternal("Param/Value/DC867253"));
    TextExpressionSetToken("Param/Expression/04E31FE6", "B", IntToText(lv_cp));
    TextExpressionSetToken("Param/Expression/04E31FE6", "C", StringExternal("Param/Value/7EB28F30"));
    TextExpressionSetToken("Param/Expression/04E31FE6", "D", PlayerName(lv_index));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/04E31FE6"));
    TextExpressionSetToken("Param/Expression/9D0CA8BB", "A", StringExternal("Param/Value/C7DD3DC1"));
    TextExpressionSetToken("Param/Expression/9D0CA8BB", "B", IntToText(lv_cp));
    TextExpressionSetToken("Param/Expression/9D0CA8BB", "C", StringExternal("Param/Value/6D1F57C9"));
    UIDisplayMessage(PlayerGroupSingle(lv_index), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/9D0CA8BB"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ah_ConquestPoints_Init () {
    gt_ah_ConquestPoints = TriggerCreate("gt_ah_ConquestPoints_Func");
    TriggerAddEventChatMessage(gt_ah_ConquestPoints, c_playerAny, "-cp", false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: GiveAllItemsToTarget
//--------------------------------------------------------------------------------------------------
bool gt_GiveAllItemsToTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_carrier;
    unit lv_target;
    unitgroup lv_items;
    // Variable Initialization
    lv_carrier = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_items = UnitInventoryGroup(lv_carrier);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(lv_items);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lv_carrier), false);
        if (gf_UnitExists(lv_target) && gf_UnitCanGetItem(lv_target, UnitGetType(UnitGroupLoopCurrent()))) {
            UnitIssueOrder(lv_target, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueAddToFront);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitRemove(lv_carrier);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GiveAllItemsToTarget_Init () {
    gt_GiveAllItemsToTarget = TriggerCreate("gt_GiveAllItemsToTarget_Func");
    TriggerAddEventPlayerEffectUsed(gt_GiveAllItemsToTarget, c_playerAny, "GiveAllItemsToTarget");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RemoveRecentlyDamaged
//--------------------------------------------------------------------------------------------------
bool gt_RemoveRecentlyDamaged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }
        if (!((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        UnitGroupRemove(gv_recentlyDamaged[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RemoveRecentlyDamaged_Init () {
    gt_RemoveRecentlyDamaged = TriggerCreate("gt_RemoveRecentlyDamaged_Func");
    TriggerAddEventPlayerEffectUsed(gt_RemoveRecentlyDamaged, c_playerAny, "RecentlyDamaged");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: TextTagQueueTrigger
//--------------------------------------------------------------------------------------------------
bool gt_TextTagQueueTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);
    // Conditions
    if (testConds) {
        if (!(gf_UnitExists(lv_unit))) {
            return false;
        }
        if (!(((lv_player >= 0) && (lv_player <= gv_players)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_tTExists[gf_TextTagNextIndex(lv_player, gv_tTCurrentIndex[lv_player])][lv_player] == true)) {
        if ((lv_unit == gv_tTUnit[gf_TextTagNextIndex(lv_player, gv_tTCurrentIndex[lv_player])][lv_player])) {
            gf_TextTag(lv_player, true);
        }
        else {
        }
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TextTagQueueTrigger_Init () {
    gt_TextTagQueueTrigger = TriggerCreate("gt_TextTagQueueTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_TextTagQueueTrigger, c_playerAny, "TextTagged");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AnyUnitSelected
//--------------------------------------------------------------------------------------------------
bool gt_AnyUnitSelected_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventUnit() == gv_playerData[EventPlayer()].lv_kobold)) {
        UnitInventoryContainerOpen(PlayerGroupAll(), EventUnit(), gv_backpackSlot, true);
    }
    else if ((UnitGetType(EventUnit()) == "MurlocSlave") && (UnitGetOwner(EventUnit()) == EventPlayer())) {
        UnitInventoryContainerOpen(PlayerGroupAll(), EventUnit(), 1, true);
    }
    else if ((UnitGetType(EventUnit()) == "StorageOutpost") && ((UnitGetOwner(EventUnit()) == EventPlayer()) || ((libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(EventUnit()), 1) == true) && (UnitHasBehavior(EventUnit(), "Locked") == false)))) {
        UnitInventoryContainerOpen(PlayerGroupAll(), EventUnit(), 2, true);
    }
    else if ((UnitGetType(EventUnit()) == "Fortress") && (libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(EventUnit()), 1) == true) && (gv_teamData[gv_playerData[UnitGetOwner(EventUnit())].lv_team].lv_watchTowerStorage == true)) {
        UnitInventoryContainerOpen(PlayerGroupAll(), EventUnit(), 1, true);
    }
    else if ((UnitGetType(EventUnit()) == "Tavern") && (libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(EventUnit()), 1) == true) && (gv_piratesBeerHint[EventPlayer()] == false) && (gv_questIndexActive == 11)) {
        gv_piratesBeerHint[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (TextWithColor(StringExternal("Param/Value/974758A1"), Color(74.90, 69.02, 58.43)) + StringExternal("Param/Value/D2296C26")));
    }
    TriggerExecute(gt_AISelectionDisable, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AnyUnitSelected_Init () {
    gt_AnyUnitSelected = TriggerCreate("gt_AnyUnitSelected_Func");
    TriggerAddEventUnitSelected(gt_AnyUnitSelected, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Memory
//--------------------------------------------------------------------------------------------------
bool gt_Memory_Func (bool testConds, bool runActions) {
    int owner = UnitGetOwner(EventUnit());
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kobold"))) {
            return false;
        }
        if (!((gv_memory[UnitGetOwner(EventUnit())] == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_memory[owner] = true;
    TextTagCreate(StringExternal("Param/Value/4EAB8906"), 24, PointFromId(2887), 3.0, true, false, PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 15.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 5.0);
    TextTagCreate(StringExternal("DOCSTR_QancakesMemory"), 24, gv_memoryQancakesPoint, 3.0, true, false, PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 15.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 5.0);
    Wait(20., c_timeGame);
    gv_memory[owner] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Memory_Init () {
    gt_Memory = TriggerCreate("gt_Memory_Func");
    TriggerAddEventUnitRegion(gt_Memory, null, gv_regionMemory, true);
    gv_memoryQancakesActor = libNtve_gf_CreateActorAtPoint("Qancakes", gv_memoryQancakesPoint);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: PreCheat
//--------------------------------------------------------------------------------------------------
const string cheatDetectedMessage = "<c val=\"04ADFF\">Single Player: </c>" + 
        "<c val=\"A6D69A\">I told you not to cheat, no achievements or stats for you.</c>";
bool PreCheat_Message(bool cond, bool actions){
    UIDisplayMessage(PlayerGroupAll(), 1, StringToText("<c val=\"04ADFF\">Single Player: </c>" + 
            "<c val=\"A6D69A\">A cheat item has been added to your inventory. If you cheat, achievements and stats will be disabled for the game.</c>"));
    gf_CreateItemForUnit(gv_playerData[1].lv_kobold, "CheatItem", 1);
    return true;
}
void Cheated(){
    if (gv_cheated){
        return;
    }
    UIDisplayMessage(PlayerGroupAll(), 1, StringToText(cheatDetectedMessage));
    gv_cheated = true;
}
void PreCheat_Init(){
    if (gv_singlePlayer){
        TriggerAddEventTimeElapsed(TriggerCreate("PreCheat_Message"), 1.0, c_timeGame);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Item
//--------------------------------------------------------------------------------------------------
bool Cheat_Item(bool cond, bool actions){
    string msg = EventChatMessage(false);
    string item = StringWord(msg, 2);
    int count = StringToInt(StringWord(msg, 3));
    if (count > 0){
        Cheated();
        if (count > 20){
            count = 20;
        }
        gf_CreateItemForUnit(gv_playerData[EventPlayer()].lv_kobold, item, count);
    }
    return true;
}
void CheatItem_Init(){
    if (gv_singlePlayer){
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Item"), c_playerAny, "-item ", false);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Status
//--------------------------------------------------------------------------------------------------
bool Cheat_Restore(bool cond, bool actions){
    int p = EventPlayer();
    Cheated();
    gv_playerData[p].lv_warmth = 100.;
    gv_playerData[p].lv_stamina = 100.;
    gv_playerData[p].lv_hunger = 100.;
    UnitSetPropertyFixed(gv_playerData[p].lv_kobold, c_unitPropLife, 10000);
    UnitSetPropertyFixed(gv_playerData[p].lv_kobold, c_unitPropEnergy, 10000);
    return true;
}
bool Cheat_Status(bool cond, bool actions){
    int p = EventPlayer();
    string chat = EventChatMessage(false);
    string status = StringWord(chat, 1);
    fixed amt = StringToFixed(StringWord(chat, 2));
    Cheated();
    if (status == "-warmth"){
        gv_playerData[p].lv_warmth = amt;
    }
    else if(status == "-hunger"){       
        gv_playerData[p].lv_hunger = amt;
    }
    else {
        gv_playerData[p].lv_stamina = amt;
    }
    return true;
}
bool Cheat_Gold(bool cond, bool actions){
    string chat = EventChatMessage(false);
    int gold = StringToInt(StringWord(chat, 2));
    Cheated();
    PlayerModifyPropertyInt (EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, gold);
    return true;
}
void CheatStatus_Init(){
    if (gv_singlePlayer){
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Restore"), c_playerAny, "-restore", true);
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Status"), c_playerAny, "-warmth ", false);
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Status"), c_playerAny, "-hunger ", false);
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Status"), c_playerAny, "-stamina ", false);
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Gold"), c_playerAny, "-gold ", false);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DayNight
//--------------------------------------------------------------------------------------------------
bool Cheat_DayNight(bool cond, bool actions){
    string lightSet;
    Cheated();
    if (EventChatMessage(true) == "-day"){
        gv_dayNightCycle = gv_dayDuration+gv_nightDuration;
        lightSet = "Haven";
    }
    else {
        gv_dayNightCycle = gv_dayDuration;
        lightSet = "MeinhoffCampaignNight";
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_TravelingWizards(PlayerGroupLoopCurrent(), false);
        }
        PlayerGroupLoopEnd();
    }
    gf_NewLightset (lightSet, 0.0, false, -1);
    return true;
}
void CheatDayNight_Init(){
    if (gv_singlePlayer){
        TriggerAddEventChatMessage(TriggerCreate("Cheat_DayNight"), c_playerAny, "-day", true);
        TriggerAddEventChatMessage(TriggerCreate("Cheat_DayNight"), c_playerAny, "-night", true);    
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Spell
//--------------------------------------------------------------------------------------------------
bool Cheat_Spell(bool cond, bool actions){
    int i = 1;
    int p = EventPlayer();
    Cheated();
    for(; i<9; i+=1){
        gf_LearnSpell(i, p);
    }
    return true;
}
void CheatSpell_Init(){
    if (gv_singlePlayer){
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Spell"), c_playerAny, "-spells", true);   
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Level
//--------------------------------------------------------------------------------------------------
fixed[10] expLevel;
bool[15] expUpdating;
bool Cheat_Level(bool cond, bool actions){
    string msg = EventChatMessage(false);
    int i = StringToInt(StringWord(msg, 2));
    int p = EventPlayer();
    int c;
    unit kobold = gv_playerData[p].lv_kobold;
    if (gf_UnitExists(kobold) && i > 0 && i <= 10 && !expUpdating[p]){ 
        Cheated();
        expUpdating[p] = true;
        for (c = UnitLevel(kobold); c<= i; c+=1){    
            UnitSetPropertyFixed(kobold, c_unitPropXP, expLevel[c-1]);  
            Wait(.1, c_timeGame);
        }
        expUpdating[p] = false;
    }
    return true;
}
void CheatLevel_Init(){
    int i;
    if (gv_singlePlayer){
        for(;i<15; i+=1){
            if (i < 10){
                if (i == 0){
                    expLevel[i] = 0;
                }
                else {
                    expLevel[i] = expLevel[i-1] + 170 + 110*i;
                }
            }
            expUpdating[i] = false;
        }
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Level"), c_playerAny, "-level ", false);   
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Quest
//--------------------------------------------------------------------------------------------------
bool questCheating = false;
bool Cheat_Quest(bool cond, bool actions){
    string chat = EventChatMessage(false);
    int i;
    string quest = StringWord(chat, 1);
    bool start = quest != "-questEnd";
    if(!questCheating){
        Cheated();
        questCheating = true;
        if (quest == "-quest"){
            i = StringToInt(StringWord(chat, 2));
            if(i > 0 && i <= gv_questAmount){
            }
        }
        else if(quest == "-questRandom"){
            i = RandomInt(1, gv_questAmount);
        }
        if(gv_questActive){
            TimerPause(gv_questTimer, true);
            TimerStart(gv_questTimer, 0, false, c_timeGame);
            if (gv_questIndexActive == 10){
                gv_winterCounter = 0;
            }
            else if(gv_questIndexActive == 7){
                gv_deadnightPhase = 3;
                gv_dayNightCycle = gv_dayDuration+gv_nightDuration;
                gf_NewLightset ("Haven", 0.0, false, -1);
            }
            else if(gv_questIndexActive == 15){
                TimerPause(gv_veilofDarknessTimer, true);
                TimerStart(gv_veilofDarknessTimer, .0, false, c_timeGame);
            }
        }
        Wait(.5, c_timeGame);
        if (start){
            TimerPause(gv_questDelayTimer, true);
            
            if ( i== 10){
                gv_rainCounter = 0;
            }
            gv_questCompleted[i] = false;
            gf_InitializeQuest(i);
            if( i == 7){
                gf_DeadnightinitPhase2(0.);
                gv_dayNightCycle = gv_dayDuration;
            }
        }
        questCheating = false;
    }
    return true;
}
void CheatQuest_Init(){
    if (gv_singlePlayer){
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Quest"), c_playerAny, "-quest ", false); 
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Quest"), c_playerAny, "-questRandom", true); 
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Quest"), c_playerAny, "-questEnd", true);  
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Unit
//--------------------------------------------------------------------------------------------------
bool Cheat_Unit(bool cond, bool actions){
    string msg = EventChatMessage(false);
    int p = StringToInt(StringWord(msg, 2));
    string type = StringWord(msg, 3);
    int c = StringToInt(StringWord(msg, 4));
    int player = EventPlayer();
    if (p >= 0 && p <= 15){
        if (c > 0){
            if (c > 20){
                c = 20;
            }
            Cheated();
            UnitCreate(c, type, 0, p, UnitGetPosition(gv_playerData[player].lv_kobold), 0);
        }
    }
    return true;
}
void Cheat_Init(){
    if (gv_singlePlayer){
        TriggerAddEventChatMessage(TriggerCreate("Cheat_Unit"), c_playerAny, "-unit ", false);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    InitGlobals();
    KoboldSkin_Init();
    TemporaryBank_Init();
    MurlocSkin_Init();
    gt_PreInitialization_Init();
    gt_Initialization_Init();
    gt_FadeIn_Init();
    gt_InitializeText_Init();
    gt_InitializeDialogs_Init();
    gt_InitializeEnvironment_Init();
    gt_InitializeAddon_Init();
    gt_StartHint_Init();
    gt_StartPatch_Init();
    gt_TheBigPeriod_Init();
    gt_InitializeTeams_Init();
    gt_StaminaWake_Init();
    gt_SyncBanks_Init();
    gt_LoadBank_Init();
    gt_InitializePerks_Init();
    gt_InitializePerkImages_Init();
    gt_InitializePerkTooltips_Init();
    gt_ShowPerkWindow_Init();
    gt_SelectPerk_Init();
    gt_GoodHostSpawn_Init();
    gt_SetupPGSWindow_Init();
    gt_ShowPGSWindow_Init();
    gt_SetupRewardData_Init();
    gt_SetupRewardsDialog_Init();
    gt_RewardsDialogInteract_Init();
    gt_AfflictionTrigger_Init();
    gt_AristocratFail_Init();
    gt_HunterRequirement_Init();
    gt_CollectorRequirement_Init();
    gt_SlavemasterRequirement_Init();
    gt_SpecialRewardsList_Init();
    gt_ReprimandedListInfo_Init();
    gt_QuestTimer_Init();
    gt_QuestTimerUpdate_Init();
    gt_ChiefExpire_Init();
    gt_ChiefCharge_Init();
    gt_ChiefEnrage_Init();
    gt_ChiefDerage_Init();
    gt_TreasureExpire_Init();
    gt_Retrieved_Init();
    gt_RetrieveExpire_Init ();
    gt_PlantEnd_Init();
    gt_PlantUpdateBuff_Init();
    gt_FeastExpire_Init();
    gt_FeastTutelageOn_Init();
    gt_FeastTutelageOff_Init();
    gt_GladiatorEndPhase1_Init();
    gt_GladiatorCrowd_Init();
    gt_GladiatorFind_Init();
    gt_EnterArena_Init();
    gt_LeaveArena_Init();
    gt_BlinkStalker_Init();
    gt_WarlordExpire_Init();
    gt_WarlordBlades_Init();
    gt_TrollGroundSpikesStart_Init ();
    gt_TrollGroundSpikesSeek_Init();
    gt_TrollGroundSpikesSpring_Init();
    gt_TrollGroundSpikesSink_Init();
    gt_TrollGroundSpikesKnock_Init();
    gt_TruffleFind_Init();
    gt_TruffleEnd_Init();
    gt_LightsOut_Init();
    gt_PermafrostStart_Init();
    gt_PermafrostDrain_Init();
    gt_PiratesExpire_Init();
    gt_WizardExpire_Init();
    gt_BuilderExpire_Init();
    gt_BuilderFinish_Init();
    gt_ExileDefendVictory_Init();
    gt_ExileAttackVictory_Init();
    gt_ExileTransfer_Init();
    gt_VeilExpire_Init();
    gt_VeilSpawnGuardian_Init();
    gt_VeilShrineInvestigate_Init();
    gt_VeilShrinePreview_Init();
    gt_VeilEnergizedStart_Init();
    gt_VeilEnergizedEnd_Init();
    gt_VeilShrineExpire_Init();
    gt_VeilEndPrematurely_Init();
    gt_VeilofDarknessCont_Init();
    gt_VeilofDarknessEnd_Init();
    gt_ExpeditionData_Init();
    gt_ExpeditionExpire_Init();
    gt_DLJRHint1_Init();
    gt_DLJRHint2_Init();
    gt_DLJRSummon_Init();
    gt_DLJRFirestorm_Init();
    gt_DLJRRocks_Init();
    gt_DLJRMinions_Init();
    gt_DLJRTether_Init();
    gt_DLJRDemonicGrowth_Init();
    gt_RABHint_Init();
    gt_RABSummoningStart_Init();
    gt_RABSummoningCancel_Init();
    gt_RABSummoningFinish_Init();
    gt_ArcaneEruptionStart_Init();
    gt_ArcaneEruptionTrigger_Init();
    gt_AnnihilateTrigger_Init();
    gt_LightningCloudWander_Init();
    gt_UnstableAnomalySpawner_Init();
    gt_UnstableAnomalyDescent_Init();
    gt_RABKill_Init();
    gt_ShowSkillWindow_Init();
    gt_LevelUp_Init();
    gt_SpendSkillPoint_Init();
    gt_ArtisanRepair_Init();
    gt_DetectSmoke_Init();
    gt_DetectGold_Init();
    gt_DetectWolvesBears_Init();
    gt_Salvage_Init();
    gt_AdrenalineRushTimer_Init();
    gt_AdrenalineRushOn_Init();
    gt_LearnNaturesGrace_Init();
    gt_LearnMineralTap_Init();
    gt_LearnClairvoyance_Init();
    gt_LearnFrostArmor_Init();
    gt_LearnSiphonLife_Init();
    gt_LearnAffliction_Init();
    gt_LearnShadowCloak_Init();
    gt_LearnGuardianSpirit_Init();
    gt_NaturesGrace_Init();
    gt_MineralTap_Init();
    gt_Clairvoyance_Init();
    gt_FrostArmorCast_Init();
    gt_FrostArmorExtend_Init();
    gt_SiphonLifeInitial_Init();
    gt_SiphonLifeTrigger_Init();
    gt_AfflictionInitial_Init();
    gt_AfflictionDrain_Init();
    gt_ShadowCloakInitial_Init();
    gt_ShadowCloakEnd_Init();
    gt_GuardianSpiritInitial_Init();
    gt_GuardianSpiritTrigger_Init();
    gt_GuardianSpiritLingeringTrigger_Init();
    gt_WhirlwindRotate_Init();
    gt_SpellAbsorb_Init();
    gt_InitializeDayTimerDialog_Init();
    gt_LanternTrigger_Init();
    gt_WolfsbanePassive_Init();
    gt_CoiffureCareCounter_Init();
    gt_StagEvasion_Init();
    gt_GainResource_Init();
    gt_LoseResource_Init();
    gt_TreeLoot_Init();
    WildBearAI_Init();
    gt_UpdateGold_Init();
    gt_BushGrowTrigger_Init();
    gt_StopGatheringImmediately_Init();
    gt_GatherStart_Init();
    gt_GatherProgress_Init();
    gt_PlantTree_Init();
    gt_GrowTree_Init();
    gt_FinishTree_Init();
    gt_LightTorch_Init();
    gt_TorchFade_Init();
    gt_FireWardTrigger_Init();
    gt_BuildingSpawned_Init();
    gt_ConstructionStart_Init();
    gt_ConstructionStop_Init();
    gt_BuildingFinish_Init();
    gt_StructureDeath_Init();
    gt_KoboldBuildFacing_Init();
    gt_SpringSpikeTrap_Init();
    gt_SpikeTrapDepleted_Init();
    gt_SharpenSpike_Init();
    gt_SpikeTrapPadding_Init();
    gt_LightCampfire_Init();
    gt_LightCampfireSelect_Init();
    gt_UnitSelected_Init();
    gt_RefreshCampfire_Init();
    gt_RefreshCampfireExpert_Init();
    gt_ADTLaunch_Init();
    gt_ADTRefil_Init();
    gt_PalisadeGateCreate_Init();
    gt_FastFood_Init();
    gt_RoastedLamb_Init();
    gt_SpicedLambFeast_Init();
    gt_SmokedLambSirloin_Init();
    gt_RoastedPheasant_Init();
    gt_BeerBraisedPheasant_Init();
    gt_WolfSteak_Init();
    gt_GrilledWolfEntrecote_Init();
    gt_StagStew_Init();
    gt_CleansingDraught_Init();
    gt_WellFedEnduranceInit_Init();
    gt_WellFedEnduranceExp_Init();
    gt_WellFedStrengthInit_Init();
    gt_WellFedStrengthExp_Init();
    gt_WellFedDexInit_Init();
    gt_WellFedDexExp_Init();
    gt_WellFedBeerInit_Init();
    gt_WellFedBeerExp_Init();
    gt_UnlivingStrengthInit_Init();
    gt_UnlivingStrengthExp_Init();
    gt_HappyChefInit_Init();
    gt_HappyChefExp_Init();
    gt_WorkbenchWarmWoolTunic_Init();
    gt_WorkbenchLeatherCoat_Init();
    gt_WorkbenchSturdyWoodenStick_Init();
    gt_WorkbenchMysticsTribalShield_Init();
    gt_WorkbenchLantern_Init();
    gt_WorkbenchBlunderbuss_Init();
    gt_WorkbenchVengefulMurlocSkull_Init();
    gt_WorkbenchElderWand_Init();
    gt_WorkbenchEnigmaticStaff_Init();
    gt_WorkbenchHuntsmansJacket_Init();
    gt_WorkbenchVenomousArbalest_Init();
    gt_WorkbenchBearShamansShroud_Init();
    gt_WorkbenchLightLeatherShield_Init();
    gt_WorkbenchCelestialOrb_Init();
    gt_WorkbenchWarlocksVestments_Init();
    gt_WorkbenchHighRangersChainmail_Init();
    gt_WorkbenchGravesingersClaw_Init();
    gt_WorkbenchRepeatingCrossbow_Init();
    gt_WorkbenchStormwizardsRobes_Init();
    gt_WorkbenchTrebuchet_Init();
    gt_WorkbenchIronbarkArmor_Init();
    gt_SmithyHeavyIronBreastplate_Init();
    gt_SmithySharpIronPickaxe_Init();
    gt_SmithyGleamingSpear_Init();
    gt_SmithyBattleAxe_Init();
    gt_SmithyIronBandedBuckler_Init();
    gt_SmithyHeavyTowerShield_Init();
    gt_SmithyWolfsbane_Init();
    gt_SmithyDreadplateArmor_Init();
    gt_SmithyIronStuddedVest_Init();
    gt_SmithyIronShovel_Init();
    gt_SmithyOutlandishHeartpiercer_Init();
    gt_SmithyGoldenHauberk_Init();
    gt_SmithyJudgmentGavel_Init();
    gt_SmithyViciousJavelin_Init();
    gt_SmithyDemonward_Init();
    gt_SmithyLiquidatorSpellblade_Init();
    gt_SmithyTwinThrowingAxes_Init();
    gt_HuntersLodgeObedienceRod_Init();
    gt_HuntersLodgeSleepingBag_Init();
    gt_HuntersLodgeFishingRod_Init();
    gt_TamedAITrigger_Init();
    gt_TamedApply_Init();
    gt_LearnThickHide_Init();
    gt_LearnNaturalTenacity_Init();
    gt_LearnViciousness_Init();
    gt_LearnInspirationalMaster_Init();
    gt_LearnPredatoryKnowledge_Init();
    gt_LearnCompanionship_Init();
    gt_PredatoryKnowledge_Init();
    gt_WhiteBearFangCollect_Init();
    gt_WhiteBearFangExpire_Init();
    gt_BoneTalismanCollect_Init();
    gt_BoneTalismanExpire_Init();
    gt_TrollNoseBoneCollect_Init();
    gt_TrollNoseBoneExpire_Init();
    gt_AntlersCollect_Init();
    gt_AntlersExpire_Init();
    gt_UpdateStatsTrigger_Init();
    gt_BuffMainStat_Init ();
    gt_TemporaryBuffs_Init();
    gt_TriggeredAttackEffects_Init();
    gt_DamageTrigger_Init();
    gt_ItemSets_Init();
    ItemDynamicTooltip_Init();
    gt_GenericUseItem_Init();
    gt_EquipmentGain_Init();
    gt_EquipmentMoveIn_Init();
    gt_EquipmentMoveOut_Init();
    gt_EquipmentLose_Init();
    RepeatingCrossbow_Init();
    gt_ScutumJoy_Init();
    gt_SleepingBag_Init();
    gt_BlunderbussCounter_Init();
    gt_WandProcDmg_Init();
    gt_ReapersHandCombine_Init();
    gt_HeavyTowerShieldTrg_Init();
    gt_FearTrigger_Init();
    gt_BloodthirstyGreed_Init();
    gt_ScrollofTransmutation_Init();
    gt_MurlocSkullFragments_Init();
    gt_FelFlamesTrigger_Init();
    gt_BloodcleaverDamage_Init();
    gt_BloodcleaverDrain_Init();
    gt_FrostNeedleTransform_Init();
    gt_FrostBarrierTransform_Init();
    gt_ScutumBlock_Init();
    gt_BucklerBlock_Init();
    gt_GoldenHauberkHeal_Init();
    gt_LightLeatherShieldTrigger_Init();
    gt_CelestialOrbHeal_Init();
    gt_LiquidatorSpellblade_Init();
    gt_GravesingerGhoulSpawn_Init();
    gt_MurlocketOn_Init();
    gt_MurlocketOff_Init();
    gt_TwinThrowingAxesFrenzy_Init();
    gt_SetupFishData_Init();
    gt_FishingRodUse_Init();
    gt_FishingTargetBob_Init();
    gt_FishingSuccess_Init();
    gt_BirdScoutFindOutpost_Init();
    gt_BirdScoutTameBird_Init();
    gt_BirdScoutLockOn_Init();
    gt_BirdScoutStalk_Init();
    gt_BirdScoutExpire_Init();
    gt_BirdScoutShooBirds_Init();
    gt_StorageMove_Init();
    gt_SellLumber_Init();
    gt_SellStone_Init();
    gt_SellWool_Init();
    gt_SellLeather_Init();
    gt_SellIronOre_Init();
    gt_SellShadowstone_Init();
    gt_SellInfusedLumber_Init();
    gt_SellRadiantGem_Init();
    gt_BuyLumber_Init();
    gt_BuyStone_Init();
    gt_BuyWool_Init();
    gt_BuyLeather_Init();
    gt_BuyIronOre_Init();
    gt_BuyShadowstone_Init();
    gt_BuyInfusedLumber_Init();
    gt_BuyRadiantGem_Init();
    gt_LockOutpost_Init();
    gt_UnlockOutpost_Init();
    gt_StorageHutCaravanStart_Init();
    gt_ShipmentArrived_Init();
    gt_DomesticatedSheep_Init();
    gt_SheepLeash_Init();
    gt_FarmSpawn_Init();
    gt_FowlBait_Init();
    gt_FowlMove_Init();
    gt_BuySpellBook_Init();
    gt_BuyScrollofTransmutation_Init();
    gt_BuyBeer_Init();
    gt_BuyRoastedLamb_Init();
    gt_BuyGossip_Init();
    gt_HireMurlocSlave_Init();
    gt_EquipMurloc_Init();
    gt_BuyNightwisp_Init();
    gt_Synergy_Init();
    gt_TrebuchetLoadStone_Init();
    gt_PackTrebuchet_Init();
    gt_WTStructuralReinforcement_Init();
    gt_WTInfirmary_Init();
    gt_WTBarracks_Init();
    gt_WTStorage_Init();
    gt_WTCanteen_Init();
    gt_WTLookout_Init();
    gt_WTBallista_Init();
    gt_WTGroundskeeper_Init();
    gt_WTGroundskeeperTrap_Init();
    gt_WTRefillAmmo_Init();
    gt_WTUseAmmo_Init();
    gt_WTMurlocMilitia_Init();
    gt_WTMurlocMilitiaIntel_Init();
    gt_WTCalltoArms_Init();
    gt_WTWarHorn_Init();
    gt_WTTunnelerCrew_Init();
    gt_WTTunnelerCrewProduce_Init();
    gt_WTArmory_Init();
    gt_WTArcaneSanctum_Init();
    gt_WTBeaverPen_Init();
    gt_WTMunitionsSquad_Init();
    gt_WTMunitionsSquadADTs_Init();
    gt_WTAttackedAlert_Init();
    gt_WTDamagedAlert_Init();
    gt_WTUnloadAutoSelect_Init();
    gt_WatchTowerTimerStart_Init();
    gt_WatchTowerTimerLoop_Init();
    gt_WatchTowerTimerExpire_Init();
    gt_FortressShareVision_Init();
    gt_FortressUnshareVision_Init();
    gt_FortressBeaverScavengerTrigger_Init();
    gt_AnyUnitDies_Init();
    gt_InteractRezShrine_Init();
    gt_DeselectRezShrine_Init();
    gt_ClickRezzBTN_Init();
    gt_ReincarnatePlayerFinish001_Init();
    gt_ReincarnatePlayerFinish002_Init();
    gt_ReincarnatePlayerFinish003_Init();
    gt_ReincarnatePlayerFinish004_Init();
    gt_ReincarnatePlayerFinish005_Init();
    gt_ReincarnatePlayerFinish006_Init();
    gt_ReincarnatePlayerFinish007_Init();
    gt_ReincarnatePlayerFinish008_Init();
    gt_ReincarnatePlayerFinish009_Init();
    gt_ReincarnatePlayerFinish010_Init();
    gt_ReincarnatePlayerFinish011_Init();
    gt_ReincarnatePlayerFinish012_Init();
    gt_ReincarnatePlayerFinish013_Init();
    gt_ReincarnatePlayerFinish014_Init();
    gt_ReincarnatePlayerFinish015_Init();
    gt_ObservationRequest_Init();
    gt_ObservationAnswer_Init();
    gt_PlayerLeaves_Init();
    gt_DTConfigShow_Init();
    gt_DTConfigSetup_Init();
    gt_DTSliderChange_Init();
    gt_DTSaveClose_Init();
    gt_HuntKobolds_Init();
    gt_CowardlyArcher_Init();
    gt_SetupAIChatStrings_Init();
    gt_AIMainThread_Init();
    gt_AIHelperEnemyStart_Init();
    gt_AIHelperEnemyEnd_Init();
    gt_AIRecentCombatExpire_Init();
    gt_AIBuildPlacement_Init();
    gt_AISelectionDisable_Init();
    gt_AISelectionEnable_Init();
    gt_NonAIinCombatStart_Init();
    gt_NonAIinCombatEnd_Init();
    gt_MurlocSlaveEnd_Init();
    gt_MurlocAction_Init();
    gt_MurlocOrderStop_Init();
    gt_MurlocOrderDrop_Init();
    gt_MurlocOrderReturn_Init();
    gt_MurlocOrderMineStone_Init();
    gt_MurlocOrderMineGold_Init();
    gt_MurlocOrderGatherLumber_Init();
    gt_MurlocOrderPickBerries_Init();
    gt_MurlocOrderPickHerbs_Init();
    gt_MurlocOrderChef_Init();
    gt_MurlocDropoffPoint_Init();
    gt_SetupTutorial1_Init();
    gt_SetupTutorial2_Init();
    gt_TutorialPart1_Init();
    gt_TutorialPart2_Init();
    gt_TutorialPart3_Init();
    gt_TutorialPart4_Init();
    gt_TutorialPart5_Init();
    gt_TutorialPart55_Init();
    gt_TutorialPart6_Init();
    gt_TutorialPart7_Init();
    gt_TutorialPart8_Init();
    gt_TutorialPart9_Init();
    gt_TutorialPart10_Init();
    gt_TutorialPart11_Init();
    gt_TutorialPart12_Init();
    gt_TutorialPart13_Init();
    gt_InGameHintsOff_Init();
    gt_InGameHintsSelection_Init();
    gt_Nudge_Init();
    gt_AFKafk_Init();
    gt_ah_PlayerList_Init();
    gt_ah_LevelBoost_Init();
    gt_ah_ConquestPoints_Init();
    gt_GiveAllItemsToTarget_Init();
    gt_RemoveRecentlyDamaged_Init();
    gt_TextTagQueueTrigger_Init();
    gt_AnyUnitSelected_Init();
    gt_Memory_Init();
    PreCheat_Init();
    CheatItem_Init();
    CheatStatus_Init();
    CheatDayNight_Init();
    CheatSpell_Init();
    CheatLevel_Init();
    CheatQuest_Init();
    Cheat_Init();
}

//--------------------------------------------------------------------------------------------------
// Trigger: BankPreload
//--------------------------------------------------------------------------------------------------
bool gt_BankPreload_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BankPreload_Init () {
    gt_BankPreload = TriggerCreate("gt_BankPreload_Func");
    TriggerAddEventMapInit(gt_BankPreload);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_BankPreload_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitCustomScript();
    InitTriggers();
}
