<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="Category" Id="EDAF996B"/>
        <Item Type="Category" Id="C003DBA8"/>
        <Item Type="Category" Id="ADBA1467"/>
        <Item Type="Category" Id="53011D4C"/>
    </Root>
    <Element Type="Category" Id="EDAF996B">
        <Item Type="CustomScript" Id="BAFFED01"/>
        <Item Type="CustomScript" Id="CB74B705"/>
        <Item Type="CustomScript" Id="328C2DDB"/>
        <Item Type="CustomScript" Id="2A7C4C34"/>
        <Item Type="CustomScript" Id="41EB1480"/>
        <Item Type="CustomScript" Id="B0AC4376"/>
        <Item Type="CustomScript" Id="F5292B3B"/>
    </Element>
    <Element Type="CustomScript" Id="BAFFED01">
        <ScriptCode>
            include &quot;TriggerLibs/NativeLib&quot;
            include &quot;TriggerLibs/SwarmLib&quot;
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CB74B705">
        <ScriptCode>
            const fixed gv_interactRadius = 6.0;
            const fixed gv_interactRadiusBonus = 1.0;
            const int gv_startingGold = 25;
            const int gv_players = 15;
            const int gv_maxTeams = 14;
            const fixed gv_gameVersion = 1.34;
            const fixed gv_periodInterval = 0.5;
            const fixed gv_musicVolume = 100.0;
            const int gv_autobalanceTeams = 2;
            const int gv_tribeNamesCount = 86;
            const int gv_teamColorCount = 15;
            const int gv_pGFAmount = 19;
            const int gv_maxWeapLevel = 100;
            const int gv_rewardLevelRequirement = 5;
            const int gv_rewardTypes = 3;
            const int gv_rewardCategories = 3;
            const int gv_rewardItems = 28;
            const int gv_trolzl12 = 12;
            const int gv_reprimandedMax = 100;
            const bool gv_winterHolidays = false;
            const int gv_questAmount = 16;
            const fixed gv_questTimerUpdateDelay = 2.25;
            const int gv_challengers = 2;
            const int gv_arenaSpectators = 9;
            const fixed gv_monstrosityLeashRadius = 32.0;
            const int gv_winterDriftCap = 500;
            const int gv_veilShrineMax = 3;
            const int gv_expeditionAreas = 5;
            const fixed gv_expeditionRadius = 14.0;
            const fixed gv_uAMeleeHeight = 2.75;
            const int gv_fMCap = 3;
            const fixed gv_transitionTime = 20.0;
            const fixed gv_dayFogDensity = 0.03;
            const fixed gv_nightFogDensity = 0.15;
            const fixed gv_fogDensityTransitionTime = 20.0;
            const int gv_weatherSize = 13;
            const fixed gv_stagAlarmRadius = 9.0;
            const int gv_trollz = 8;
            const int gv_aDTMax = 100;
            const int gv_armorPrecision = 1;
            const fixed gv_meleeRange = 2.0;
            const int gv_mainHandSlot = 1;
            const int gv_offhandSlot = 2;
            const int gv_armorSlot = 3;
            const int gv_backpackSlot = 4;
            const fixed gv_positiveArmorFactor = 0.03;
            const fixed gv_gravesingerHealFactor = 0.3;
            const int gv_fishRegions = 6;
            const int gv_fishRewards = 13;
            const fixed gv_fishTime = 30.0;
            const fixed gv_birdScoutXOffset = -0.05;
            const fixed gv_birdScoutYOffset = 0.0;
            const fixed gv_birdScoutZOffset = 3.2;
            const int gv_gossipAmount = 10;
            const int gv_tTQueueSize = 20;
            const int gv_aIRetreatStringAmount = 8;
            const int gv_aIReviveStringAmount = 3;
            const int gv_aIQuestKillStringAmount = 7;
            const int gv_aIQuestLootStringAmount = 6;
            const int gv_aIQuestStringAmount = 7;
            const int gv_aIQuestGladiatorStringAmount = 3;
            const int gv_aIQuestDeadnightStringAmount = 4;
            const int gv_aISpellStringAmount = 5;
            const int gv_aITrapsStringAmount = 3;
            const int gv_aITauntStringAmount = 8;
            const int gv_aIMonumentStringAmount = 4;
            const int gv_aIMonumentBuildStringAmount = 2;
            const int gv_aIExileStringAmount = 4;
            const int gv_aIPirateStringAmount = 5;
            const int gv_aIPetStringAmount = 3;
            const int gv_aIChefQuestStringAmount = 2;
            const int gv_aIEnemySightedAmount = 10;
            const int gv_aIWatchTowerBuilderAmount = 3;
            const int gv_aIFishingStringAmount = 5;
            const bool gv_aIFFATestingOverride = false;
            const fixed gv_errorEstimationFactor = 0.65;
            const int gv_numberofnames = 80;
            const int gv_aIStatusIndex = 4;
            const int gv_tutorialTexts = 41;
            const int gv_inGameHintsAmount = 40;
            const int gv_maxEquipmentCount = 56;
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="328C2DDB">
        <ScriptCode>
            struct gs_Resources {
                unitgroup lv_lumber;
                unitgroup lv_lumberParts;
                unitgroup lv_stone;
                unitgroup lv_wool;
                unitgroup lv_leather;
                unitgroup lv_ironOre;
                unitgroup lv_shadowstone;
                unitgroup lv_infusedLumber;
                unitgroup lv_radiantGem;
                unitgroup lv_spicyHerbs;
                unitgroup lv_sunflowers;
                unitgroup lv_sageberries;
                unitgroup lv_handfulofBerries;
                unitgroup lv_beer;
                unitgroup lv_bearPelts;
                unitgroup lv_rawLamb;
                unitgroup lv_rawWolf;
                unitgroup lv_rawPheasant;
                unitgroup lv_murlocSkulls;
                unitgroup lv_murlocSkullFragments;
                unitgroup lv_whiteBearFangs;
                unitgroup lv_boneTalismans;
                unitgroup lv_sturdyWoodenSticks;
                unitgroup lv_trollNoseBones;
                unitgroup lv_food;
                unitgroup lv_foodRaw;
                unitgroup lv_foodCooked;
                unitgroup lv_consumables;
                unitgroup lv_obedRods;
                unitgroup lv_fishingRods;
                unitgroup lv_beerPhez;
                unitgroup lv_wolfEntrecote;
                unitgroup lv_lambFeast;
                unitgroup lv_huntsmansJackets;
                unitgroup lv_warmWoolTunics;
                unitgroup lv_antlers;
                unitgroup lv_rawStag;
                unitgroup lv_candles;
                unitgroup lv_lanterns;
                unitgroup lv_skeletalFingers;
                unitgroup lv_reapersHands;
                unitgroup lv_berserkersBattleAxes;
                unitgroup lv_roastedLamb;
                unitgroup lv_wolfSteak;
                unitgroup lv_sharpIronPickaxe;
            };
            struct gs_Stats {
                fixed lv_sightRadius;
                fixed lv_baseDamage;
                fixed lv_baseArmor;
                fixed lv_maximumLife;
                fixed lv_maximumEnergy;
            };
            struct gs_GameStats {
                int lv_wolvesKilled;
                int lv_drunkardsBribed;
                int lv_mealsCooked;
                int lv_itemsCrafted;
                int lv_playerKills;
                int lv_spellsCast;
                int lv_goldEarned;
                int lv_treesPlanted;
                int lv_treesFelled;
                int lv_storedItems;
                int lv_trapsTriggered;
                int lv_boomstickTime;
                int lv_timesResurrected;
                int lv_murlocsHired;
                int lv_rainAvoided;
                int lv_buildingsCreated;
                int lv_nodesDiscovered;
                int lv_birdsScouts;
                int lv_petsTamed;
                int lv_sheepBred;
                int lv_berriesPicked;
            };
            struct gs_PlayerData {
                int lv_team;
                gs_Resources lv_resources;
                unitgroup lv_equippedMainHandG;
                unitgroup lv_equippedOffhandG;
                unitgroup lv_equippedArmorG;
                int lv_backpackSize;
                unit lv_kobold;
                gs_Stats lv_stats;
                gs_GameStats lv_gameStats;
                fixed lv_warmth;
                fixed lv_hunger;
                fixed lv_stamina;
                timer lv_runSpeedPerkCooldown;
                bool lv_gathering;
                bool lv_hasMainSpell;
                bool lv_hasAllSpells;
                unitgroup lv_murlocSlaves;
                bool lv_alive;
                bool lv_isAI;
                bool lv_reincarnation;
                unit lv_reincarnationBuilding;
                fixed lv_warmthStaminaPenaltyFactor;
                fixed lv_hungerRegenPenaltyFactor;
                int lv_fishCaught;
                bool lv_showDeathMessage;
                unit lv_monsterStalker;
                unit lv_twinThrowingAxesFocus;
            };
            struct gs_TeamData {
                text lv_name;
                color lv_color;
                int lv_rating;
                playergroup lv_members;
                point lv_startingLocation;
                bool lv_allDead;
                unit lv_watchTower;
                bool lv_watchTowerStructuralReinforcement;
                bool lv_watchTowerInfirmary;
                bool lv_watchTowerBarracks;
                bool lv_watchTowerStorage;
                bool lv_watchTowerCanteen;
                bool lv_watchTowerArmory;
                bool lv_watchTowerArcaneSanctum;
                bool lv_watchTowerBeaverPen;
                int lv_aIWatchTowerBuilder;
                bool lv_watchTowerDefeat;
                int lv_koboldsAlive;
                int lv_koboldsTotal;
                string lv_aICustomization;
            };
            struct gs_ErrorMessage {
                text lv_outOfRange;
                text lv_notEnoughGold;
                text lv_notEnoughResources;
                text lv_itemEquipReq;
                text lv_trophiesError;
                text lv_notEnoughIngredients;
                text lv_busyError;
                text lv_tameError;
                text lv_skillReq;
                text lv_alreadyHaveUpgrade;
                text lv_alreadyHaveSchematic;
                text lv_spellAlreadyLearned;
                text lv_dead;
                text lv_rainOrWinter;
            };
            struct gs_reward {
                int lv_type;
                text lv_title;
                int lv_titleStyle;
                text lv_tooltip;
                int lv_cost;
                int lv_requirementIndex;
                text lv_requirementText;
            };
            struct gs_AISupply {
                int lv_leather;
                int lv_leatherBonus;
                int lv_wool;
                int lv_shadowstone;
                int lv_lumber;
                int lv_stone;
                int lv_spicyHerbs;
                int lv_radiantGems;
                int lv_ironOre;
                int lv_sunflowers;
                int lv_food;
                int lv_infusedLumber;
                int lv_bearPelt;
                int lv_candles;
                int lv_antlers;
                int lv_sturdyWoodenSticks;
                int lv_warmWoolTunics;
                int lv_murlocSlaves;
                int lv_murlocSkulls;
                int lv_sageberry;
                int lv_lanterns;
            };
            struct gs_AIData {
                bool lv_logicInProgress;
                text lv_name;
                point lv_weightedPOI;
                string lv_customization;
                gs_AISupply lv_supply;
                unitgroup lv_tradeItems;
                unit lv_focalNode;
                timer lv_tamingTime;
                timer lv_fishingTime;
                timer lv_focusedRetreatTimer;
                timer lv_buildPlacement;
                fixed lv_tradeRoamRadius;
                fixed lv_sightRange;
                timer lv_shadowCloakMinimum;
                int lv_richLimit;
                timer lv_supplyUpdateFrequency;
                int lv_cycle;
                string lv_smithyDesire;
                string lv_benchDesire;
                timer lv_lumberjackTimer;
                timer lv_explorerTimer;
                fixed lv_explorerAngle;
                int lv_aIBuildIndex;
                int lv_cycleSlaveJob;
                int lv_lastCombatState;
                fixed lv_difficultyRating;
                unitgroup lv_enemies;
            };
            struct gs_ItemTypeData {
                string lv_name;
                int lv_level;
                string lv_class;
            };
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2A7C4C34">
        <ScriptCode>
            point gv_center;
            gs_Resources gv_resources;
            gs_Stats gv_stats;
            gs_GameStats gv_gameStats;
            gs_PlayerData[gv_players + 1] gv_playerData;
            gs_TeamData[gv_maxTeams + 1] gv_teamData;
            gs_ErrorMessage gv_errorMessage;
            bool gv_singlePlayer;
            bool gv_cheated;
            bool gv_tutorial;
            bool gv_rated;
            bool gv_validRatedGame;
            fixed[gv_players + 1] gv_lastGameVersion;
            int gv_gameMode;
            fixed gv_dayNightCycle;
            int gv_periodCycle;
            int gv_averagePlayerLevel;
            int gv_activeTeams;
            playergroup[gv_maxTeams + 1] gv_team;
            point[gv_maxTeams + 1] gv_teamStartLocation;
            int gv_teamName;
            int gv_tribeNamesTaken;
            string[gv_tribeNamesCount + 1] gv_tribeNamePool;
            int gv_teamColorTaken;
            color[gv_teamColorCount + 1] gv_teamColorPool;
            point[gv_maxTeams + 1] gv_multiTeamStart;
            int gv_statusDialog;
            int gv_warmthItem;
            int gv_hungerItem;
            int gv_fatigueItem;
            bool[gv_players + 1] gv_woundedFlashActive;
            int gv_woundedFlash;
            int gv_woundedFlashImage;
            fixed gv_gameDuration;
            int[gv_players + 1] gv_accxp;
            int[gv_players + 1] gv_acclvl;
            int[gv_players + 1] gv_accwins;
            int[gv_players + 1] gv_acclosses;
            int[gv_players + 1] gv_accpp;
            int[gv_players + 1] gv_kobkills;
            int[gv_players + 1] gv_kobdeaths;
            int[gv_players + 1] gv_ratingvalue;
            int[gv_players + 1] gv_ratinggames;
            string[gv_players + 1] gv_perks;
            string[gv_players + 1] gv_hints;
            string[gv_players + 1] gv_matchhistory;
            bool[gv_players + 1] gv_rezhintshown;
            int[gv_players + 1] gv_conqpoints;
            int[gv_players + 1] gv_gladSpree;
            int[gv_players + 1] gv_rewReq;
            bool[gv_players + 1] gv_bankSynced;
            int gv_perkDialogSmall;
            int gv_perkDialogSmallBTN;
            int gv_perkWindow;
            int[5][11] gv_perkButton;
            int[5][11] gv_perkImage;
            int[5][11] gv_perkMarker;
            int[5] gv_perkTierLabel;
            int gv_perkTitle;
            int gv_perkReset;
            int[gv_players + 1] gv_perkPointsSpent;
            string[5][11] gv_perkImageFile;
            text[5][11] gv_perkTooltip;
            text[gv_pGFAmount + 1] gv_postgameFeatText;
            text[gv_pGFAmount + 1] gv_postgameFeatTooltip;
            bool[gv_pGFAmount + 1] gv_postgameFeatValid;
            bool[gv_pGFAmount + 1][gv_players + 1] gv_postgameFeatShown;
            int gv_pGSMultiMainWindow;
            int[gv_maxTeams + 1] gv_pGSMultiTeamLabel;
            int[gv_maxTeams + 1] gv_pGSMultiPlayerLabel;
            int gv_pGSWindowSmall;
            int gv_pGSWindowSmallBTN;
            int gv_pGSWindowLarge;
            int[3] gv_pGSWinLossLabel;
            int[11] gv_pGSPlayerLabelT1;
            int[11] gv_pGSWinLabelT1;
            int[11] gv_pGSLossLabelT1;
            int[11] gv_pGSPlayerLabelT2;
            int[11] gv_pGSWinLabelT2;
            int[11] gv_pGSLossLabelT2;
            int[gv_maxWeapLevel + 1][gv_players + 1] gv_favouriteWeaponRating;
            gs_reward[101] gv_reward;
            int gv_rewardindex;
            int[gv_players + 1][gv_rewardCategories + 1][gv_rewardItems + 1] gv_rewardState;
            text[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardTitle;
            int[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardCost;
            text[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardTooltip;
            text[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardReq;
            bool[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardReqExists;
            bool[gv_rewardTypes + 1][gv_rewardItems + 1] gv_rewardHideIfReqIncomplete;
            int gv_rewardsOpenerDialog;
            int gv_rewardsOpenerItem;
            int gv_rewardsMainWindow;
            int[gv_rewardItems + 1] gv_rewardButton;
            int gv_conqpointsLabel;
            int[gv_rewardCategories + 1] gv_rewardsCatBTN;
            int[gv_players + 1] gv_rewardsCatSelect;
            int[gv_rewardItems + 1] gv_rewardsTitleStyle;
            bool[gv_players + 1] gv_wizardVisitEveryNight;
            string[gv_players + 1] gv_slayer;
            timer[gv_players + 1] gv_destroyerTimer;
            bool[gv_players + 1] gv_destroyerStarted;
            int[gv_players + 1] gv_destroyerProgress;
            int[gv_players + 1] gv_alliesResurrected;
            bool[gv_players + 1] gv_vanquisherEnabled;
            bool[gv_players + 1] gv_aristocrat;
            string[gv_players + 1] gv_gossipTypeListened;
            bool gv_championGame;
            timer gv_kingslayerTimer;
            string[gv_players + 1] gv_handle;
            bool[gv_players + 1] gv_reprimanded;
            string[gv_reprimandedMax + 1] gv_reprimandedList;
            int gv_reprimandIndex;
            int[gv_questAmount + 1] gv_questPool;
            int gv_questsCycled;
            timer gv_questDelayTimer;
            timer gv_questTimer;
            bool gv_questActive;
            int gv_questIndexActive;
            bool[gv_questAmount + 1] gv_questCompleted;
            text gv_questText;
            fixed gv_questInitialDelay;
            int gv_questObjective;
            timer gv_questTimerUpdate;
            timer gv_questTextDelay;
            unit gv_murlocChief;
            int gv_chiefPing;
            unitgroup gv_treasureChests;
            unit[21] gv_treasureChest;
            int[21] gv_treasurePing;
            unit gv_shipment;
            int gv_shipmentPing;
            unit gv_merchant;
            int gv_merchantPing;
            int[gv_maxTeams + 1] gv_grownTreesTeam;
            int gv_grownTreesLeadingTeam;
            unit gv_feastChef;
            int gv_feastChefPing;
            bool[gv_maxTeams + 1] gv_lambSirloinEnabled;
            bool[gv_maxTeams + 1][4] gv_feastCooked;
            unit[gv_challengers + 1] gv_zoneChecker;
            int[gv_challengers + 1] gv_zonePing;
            unit[gv_challengers + 1] gv_challenger;
            int gv_gladiatorPhase;
            point[gv_challengers + 1] gv_gladiatorStart;
            point[gv_challengers + 1] gv_returnPoint;
            revealer[gv_players + 1] gv_arenaRevealer;
            point[gv_arenaSpectators + 1] gv_arenaSpectator;
            string gv_previousSpectators;
            int gv_deadnightPhase;
            int gv_ghoulExtra;
            unit gv_warlord;
            int gv_warlordPing;
            int[gv_maxTeams + 1] gv_trufflesFound;
            region gv_noTrufflesEre;
            int[gv_players + 1] gv_truffleSkillBonus;
            int gv_truffleLeadingTeam;
            bool[gv_players + 1] gv_winterFrozen;
            fixed[gv_players + 1] gv_coldResistance;
            int gv_bearsKilled;
            int gv_witchSpawnReq;
            bool gv_witchSummoned;
            unit gv_frostWitch;
            int gv_frostWitchPing;
            bool gv_winterProlongable;
            bool gv_winter;
            bool gv_winterSoon;
            fixed gv_winterCounter;
            fixed gv_winterDelayCounter;
            bool gv_winterJustStarted;
            actor[gv_weatherSize + 1][gv_weatherSize + 1] gv_winterEmitter;
            int gv_winterDriftCounter;
            actor[gv_winterDriftCap + 1] gv_winterDrift;
            int gv_winterDriftCleanup;
            point gv_piratesTreasureLocation;
            bool[gv_players + 1] gv_piratesBeerHint;
            unit gv_wizard;
            int gv_wizardPing;
            bool gv_extensionAllowed;
            unit gv_exile;
            int gv_attackers;
            int gv_defenders;
            int gv_exilePing;
            int gv_exileRewardPing;
            unit[gv_veilShrineMax + 1] gv_veilShrine;
            unit[gv_veilShrineMax + 1][7] gv_veilShrinePad;
            int gv_veilShrineCount;
            int[gv_veilShrineMax + 1] gv_veilShrinePing;
            string[gv_veilShrineMax + 1] gv_veilShrineSequence;
            timer gv_veilGuardianTimer;
            revealer gv_darkness;
            bool[gv_maxTeams + 1] gv_veilofDarknessActive;
            timer gv_veilofDarknessTimer;
            point[gv_expeditionAreas + 1][4] gv_expeditionPoint;
            bool[gv_maxTeams + 1][gv_expeditionAreas + 1] gv_expeditionProgress;
            int[gv_maxTeams + 1] gv_expeditionProgressCount;
            point[gv_expeditionAreas + 1] gv_expeditionActivePoint;
            revealer[gv_players + 1][gv_expeditionAreas + 1] gv_expeditionRevealer;
            int[gv_maxTeams + 1][gv_expeditionAreas + 1] gv_expeditionPing;
            unit[gv_expeditionAreas + 1] gv_expeditionRing;
            int gv_expeditionLeadingTeam;
            bool[gv_players + 1] gv_dLJRHintShown;
            timer gv_rABKillTimer;
            int gv_minimalistSkillDialog;
            int[6] gv_minimalistSkillDialogItem;
            int gv_skillButton;
            int gv_skillWindowBig;
            int gv_skillWindowSmall;
            int[6] gv_bTNSkillIncrease;
            int[7] gv_skillLabel;
            int[gv_players + 1] gv_skillForestry;
            int[gv_players + 1] gv_skillMining;
            int[gv_players + 1] gv_skillCooking;
            int[gv_players + 1] gv_skillForaging;
            int[gv_players + 1] gv_skillArtisanship;
            int[gv_players + 1] gv_skillPointsPlayer;
            unitgroup[gv_players + 1] gv_animalVisionGroup;
            string[gv_players + 1] gv_learnedSpellsString;
            fixed[gv_players + 1] gv_frostArmorDrainBuffer;
            bool[gv_players + 1] gv_frostArmorDrainCycle;
            fixed[gv_players + 1] gv_frostArmorBonus;
            fixed gv_dayDuration;
            fixed gv_nightDuration;
            int gv_dayNight;
            bool gv_b_Day;
            int gv_day;
            int gv_wolfsbanePlayer;
            int gv_dayTimerDialog;
            int gv_dayTimerProgress;
            actor[gv_weatherSize + 1][gv_weatherSize + 1] gv_rainEmitter;
            bool gv_rainJustStarted;
            fixed gv_rainDelayCounter;
            fixed gv_rainCounter;
            int[gv_players + 1] gv_rainAmbience;
            bool gv_rainingSoon;
            bool gv_raining;
            bool gv_lightsetTransition;
            string[gv_rewardTypes + 1][gv_players + 1] gv_requirementString;
            int gv_goldQuota;
            int gv_birdQuota;
            unitgroup[gv_maxTeams + 1] gv_discoveredBushesTeam;
            unitgroup[gv_maxTeams + 1] gv_discoveredDepositsTeam;
            int gv_stoneQuota;
            int gv_elderTreeQuota;
            int gv_direWolfQuota;
            int gv_undeadQuota;
            int gv_wolfQuota;
            int gv_blueJunglefowlQuota;
            int gv_sheepQuota;
            int gv_bearQuota;
            int gv_frostBearQuota;
            int gv_stagQuota;
            int gv_nightcrawlerQuota;
            int gv_treeQuota;
            unitgroup gv_wildSheep;
            int[gv_players + 1] gv_aDTIndex;
            int[gv_players + 1] gv_aDTCapPlayer;
            fixed gv_damageTaken;
            fixed gv_damageRaw;
            bool gv_noDamage;
            unit gv_lastCreatedItem;
            bool[gv_players + 1] gv_scutumExclaimed;
            int[gv_players + 1] gv_bearWilllpowerBonus;
            region[gv_fishRegions + 1] gv_fishRegion;
            fixed[gv_fishRegions + 1] gv_fishRegionEleveation;
            string[gv_fishRewards + 1] gv_fishReward;
            int[gv_gossipAmount + 1][gv_players + 1] gv_gossipPool;
            int[gv_players + 1] gv_gossipListened;
            timer gv_watchTowerTimer;
            timer gv_watchTowerTimerUpdate;
            bool gv_watchTowerTimerExtendable;
            int gv_watchTowerObjective;
            text gv_watchTowerObjectiveText;
            unitgroup[gv_players + 1] gv_pets;
            string[gv_players + 1] gv_taughtPetsString;
            int[4][gv_players + 1] gv_predatoryKnowledgeStacks;
            int[gv_players + 1] gv_antlerStacks;
            int gv_observeRequest;
            int gv_observeRequestBtn;
            int[gv_players + 1] gv_observeAnswer;
            int[gv_players + 1] gv_observeAnswerBtnYes;
            int[gv_players + 1] gv_observeAnswerBtnNo;
            int gv_rezzDialog;
            int gv_rezzDialogTitle;
            int[5] gv_rezzDialogBTN;
            int[5][gv_players + 1] gv_rezzBTNTargetPlayer;
            unit[gv_players + 1] gv_selectedShrine;
            bool[gv_players + 1] gv_beingResurrected;
            fixed[gv_players + 1] gv_savedXP;
            int[gv_players + 1] gv_reincarnatePing;
            timer[gv_players + 1] gv_reincarnationTimer;
            int[gv_players + 1] gv_reincarnationTimerWindow;
            int gv_winningTeam;
            int gv_losingTeam;
            playergroup gv_winningPlayers;
            playergroup gv_losingPlayers;
            bool[gv_players + 1] gv_dead;
            bool gv_gameOver;
            bool gv_gameStarted;
            bool gv_banksInitialized;
            unitgroup[gv_players + 1] gv_recentlyDamaged;
            string[gv_players + 1] gv_dTAngles;
            string[gv_players + 1] gv_dTAngles2;
            int gv_dTConfigWindow;
            int gv_dTScaleSlider;
            int gv_dTScaleText;
            fixed[gv_players + 1] gv_dTScaleValue;
            int gv_dTDurationSlider;
            int gv_dTDurationText;
            fixed[gv_players + 1] gv_dTDurationValue;
            int[3] gv_dTCheckbox;
            int gv_dTClose;
            bool[gv_players + 1] gv_dTDamageDoneOn;
            bool[gv_players + 1] gv_dTDamageTakenOn;
            int[gv_players + 1] gv_tTCycle;
            int[gv_players + 1] gv_tTCurrentIndex;
            int[gv_tTQueueSize + 1][gv_players + 1] gv_tTSize;
            fixed[gv_tTQueueSize + 1][gv_players + 1] gv_tTDuration;
            unit[gv_tTQueueSize + 1][gv_players + 1] gv_tTUnit;
            int[gv_tTQueueSize + 1][gv_players + 1] gv_tTPlayer;
            text[gv_tTQueueSize + 1][gv_players + 1] gv_tTText;
            bool[gv_tTQueueSize + 1][gv_players + 1] gv_tTExists;
            timer[gv_players + 1] gv_textTagTimer;
            bool[gv_players + 1] gv_memory;
            actor gv_memoryQancakesActor;
            point gv_memoryQancakesPoint;
            int[gv_players + 1] gv_backpackSize;
            string[gv_aIRetreatStringAmount + 1] gv_aIRetreatString;
            string[gv_aIReviveStringAmount + 1] gv_aIReviveString;
            string[gv_aIQuestKillStringAmount + 1] gv_aIQuestKillString;
            string[gv_aIQuestLootStringAmount + 1] gv_aIQuestLootString;
            string[gv_aIQuestStringAmount + 1] gv_aIQuestString;
            string[gv_aIQuestGladiatorStringAmount + 1] gv_aIQuestGladiatorString;
            string[gv_aIQuestDeadnightStringAmount + 1] gv_aIQuestDeadnightString;
            string[gv_aISpellStringAmount + 1] gv_aISpellString;
            string[gv_aITrapsStringAmount + 1] gv_aITrapsString;
            string[gv_aITauntStringAmount + 1] gv_aITauntString;
            string[gv_aIMonumentStringAmount + 1] gv_aIMonumentString;
            string[gv_aIMonumentBuildStringAmount + 1] gv_aIMonumentBuildString;
            string[gv_aIExileStringAmount + 1] gv_aIExileString;
            string[gv_aIPirateStringAmount + 1] gv_aIPirateString;
            string[gv_aIPetStringAmount + 1] gv_aIPetString;
            string[gv_aIChefQuestStringAmount + 1] gv_aIChefQuestString;
            string[gv_aIEnemySightedAmount + 1] gv_aIEnemySighted;
            string[gv_aIWatchTowerBuilderAmount + 1] gv_aIWatchTowerBuilder;
            string[gv_aIFishingStringAmount + 1] gv_aIFishingString;
            unit[gv_players + 1] gv_aISelected;
            unitgroup[gv_players + 1] gv_aISelected2;
            int gv_namestaken;
            string[gv_numberofnames + 1] gv_aINamePool;
            point[gv_maxTeams + 1] gv_aIPirateSearchT;
            point[gv_players + 1] gv_aIPirateSearchP;
            gs_AISupply gv_aISupply;
            gs_AIData[gv_players + 1] gv_aIData;
            int[gv_maxTeams + 1] gv_aIMonumentBuilder;
            text[gv_tutorialTexts + 1] gv_tutorialText;
            bool gv_pauseNextDusk;
            bool gv_pauseNextDawn;
            text gv_transcript;
            point[gv_players + 1] gv_unstuckPoint;
            int[gv_players + 1] gv_unstuckRating;
            bool[gv_players + 1] gv_aFKUsed;
            bool[gv_players + 1] gv_admin;
            region gv_region001;
            region gv_regionArena;
            region gv_region002;
            region gv_regionMemory;
            region gv_regionFishMarSara001;
            region gv_regionFishMarSara002;
            region gv_regionFishBelShir001;
            region gv_regionFishBelShir002;
            region gv_regionFishShakuras001;
            region gv_regionFishSouthlands3001;
            region gv_regionFishSouthlands3002;
            region gv_regionFishSouthlands2001;
            region gv_regionFishSouthlands2002;
            region gv_regionFishBelShir003;
            region gv_regionFishShakuras002;
            region gv_regionFishBelShir004;
            region gv_regionFishBelShir005;
            region gv_regionFishBelShir006;
            region gv_regionFishBelShir007;
            region gv_regionFishBelShir008;
            region gv_regionFishShakuras003;
            region gv_regionFishZhakulDas001;
            region gv_regionFishZhakulDas002;
            region gv_regionArenaThrowArea;
            region gv_regionFishChar001;
            region gv_regionFishChar002;
            region gv_regionFishChar003;
            gs_ItemTypeData[gv_maxEquipmentCount] gv_equipmentData;
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="41EB1480">
        <ScriptCode>
            void InitGlobals () {
                int init_i;
                int init_j;
                int init_k;
                int i;
                int tc = 0;
                gv_center = PointFromId(2850);
                for(i=0;i&lt;15; i+=1){
                    if(PlayerStatus(i) == c_playerStatusActive &amp;&amp; PlayerType(i) == c_playerTypeUser){
                        tc +=1;
                    }
                }
                gv_singlePlayer = tc == 1;
                gv_cheated = false;
                gv_resources.lv_lumber = UnitGroupEmpty();
                gv_resources.lv_lumberParts = UnitGroupEmpty();
                gv_resources.lv_stone = UnitGroupEmpty();
                gv_resources.lv_wool = UnitGroupEmpty();
                gv_resources.lv_leather = UnitGroupEmpty();
                gv_resources.lv_ironOre = UnitGroupEmpty();
                gv_resources.lv_shadowstone = UnitGroupEmpty();
                gv_resources.lv_infusedLumber = UnitGroupEmpty();
                gv_resources.lv_radiantGem = UnitGroupEmpty();
                gv_resources.lv_spicyHerbs = UnitGroupEmpty();
                gv_resources.lv_sunflowers = UnitGroupEmpty();
                gv_resources.lv_sageberries = UnitGroupEmpty();
                gv_resources.lv_handfulofBerries = UnitGroupEmpty();
                gv_resources.lv_beer = UnitGroupEmpty();
                gv_resources.lv_bearPelts = UnitGroupEmpty();
                gv_resources.lv_rawLamb = UnitGroupEmpty();
                gv_resources.lv_rawWolf = UnitGroupEmpty();
                gv_resources.lv_rawPheasant = UnitGroupEmpty();
                gv_resources.lv_murlocSkulls = UnitGroupEmpty();
                gv_resources.lv_murlocSkullFragments = UnitGroupEmpty();
                gv_resources.lv_whiteBearFangs = UnitGroupEmpty();
                gv_resources.lv_boneTalismans = UnitGroupEmpty();
                gv_resources.lv_sturdyWoodenSticks = UnitGroupEmpty();
                gv_resources.lv_trollNoseBones = UnitGroupEmpty();
                gv_resources.lv_food = UnitGroupEmpty();
                gv_resources.lv_foodRaw = UnitGroupEmpty();
                gv_resources.lv_foodCooked = UnitGroupEmpty();
                gv_resources.lv_consumables = UnitGroupEmpty();
                gv_resources.lv_obedRods = UnitGroupEmpty();
                gv_resources.lv_fishingRods = UnitGroupEmpty();
                gv_resources.lv_beerPhez = UnitGroupEmpty();
                gv_resources.lv_wolfEntrecote = UnitGroupEmpty();
                gv_resources.lv_lambFeast = UnitGroupEmpty();
                gv_resources.lv_huntsmansJackets = UnitGroupEmpty();
                gv_resources.lv_warmWoolTunics = UnitGroupEmpty();
                gv_resources.lv_antlers = UnitGroupEmpty();
                gv_resources.lv_rawStag = UnitGroupEmpty();
                gv_resources.lv_candles = UnitGroupEmpty();
                gv_resources.lv_lanterns = UnitGroupEmpty();
                gv_resources.lv_skeletalFingers = UnitGroupEmpty();
                gv_resources.lv_reapersHands = UnitGroupEmpty();
                gv_resources.lv_berserkersBattleAxes = UnitGroupEmpty();
                gv_resources.lv_roastedLamb = UnitGroupEmpty();
                gv_resources.lv_wolfSteak = UnitGroupEmpty();
                gv_resources.lv_sharpIronPickaxe = UnitGroupEmpty();
                gv_stats.lv_sightRadius = 12.0;
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_playerData[init_i].lv_resources.lv_lumber = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_lumberParts = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_stone = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_wool = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_leather = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_ironOre = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_shadowstone = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_infusedLumber = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_radiantGem = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_spicyHerbs = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_sunflowers = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_sageberries = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_handfulofBerries = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_beer = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_bearPelts = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_rawLamb = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_rawWolf = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_rawPheasant = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_murlocSkulls = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_murlocSkullFragments = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_whiteBearFangs = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_boneTalismans = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_sturdyWoodenSticks = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_trollNoseBones = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_food = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_foodRaw = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_foodCooked = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_consumables = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_obedRods = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_fishingRods = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_beerPhez = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_wolfEntrecote = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_lambFeast = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_huntsmansJackets = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_warmWoolTunics = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_antlers = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_rawStag = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_candles = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_lanterns = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_skeletalFingers = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_reapersHands = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_berserkersBattleAxes = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_roastedLamb = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_wolfSteak = UnitGroupEmpty();
                    gv_playerData[init_i].lv_resources.lv_sharpIronPickaxe = UnitGroupEmpty();
                    gv_playerData[init_i].lv_equippedMainHandG = UnitGroupEmpty();
                    gv_playerData[init_i].lv_equippedOffhandG = UnitGroupEmpty();
                    gv_playerData[init_i].lv_equippedArmorG = UnitGroupEmpty();
                    gv_playerData[init_i].lv_backpackSize = 20;
                    gv_playerData[init_i].lv_stats.lv_sightRadius = 12.0;
                    gv_playerData[init_i].lv_warmth = 100.0;
                    gv_playerData[init_i].lv_hunger = 100.0;
                    gv_playerData[init_i].lv_stamina = 100.0;
                    gv_playerData[init_i].lv_runSpeedPerkCooldown = TimerCreate();
                    gv_playerData[init_i].lv_murlocSlaves = UnitGroupEmpty();
                    gv_playerData[init_i].lv_warmthStaminaPenaltyFactor = 1.0;
                    gv_playerData[init_i].lv_hungerRegenPenaltyFactor = 1.0;
                    gv_playerData[init_i].lv_showDeathMessage = true;
                }
                for (init_i = 0; init_i &lt;= gv_maxTeams; init_i += 1) {
                    gv_teamData[init_i].lv_color = Color(0,0,0);
                    gv_teamData[init_i].lv_members = PlayerGroupEmpty();
                    gv_teamData[init_i].lv_aICustomization = &quot;000000000000&quot;;
                }
                gv_errorMessage.lv_outOfRange = StringExternal(&quot;Param/Value/CAA4C983&quot;);
                gv_errorMessage.lv_notEnoughGold = StringExternal(&quot;Param/Value/2FA628B6&quot;);
                gv_errorMessage.lv_notEnoughResources = StringExternal(&quot;Param/Value/DC626005&quot;);
                gv_errorMessage.lv_itemEquipReq = StringExternal(&quot;Param/Value/F55CC1C8&quot;);
                gv_errorMessage.lv_trophiesError = StringExternal(&quot;Param/Value/7C192360&quot;);
                gv_errorMessage.lv_notEnoughIngredients = StringExternal(&quot;Param/Value/E0C47581&quot;);
                gv_errorMessage.lv_busyError = StringExternal(&quot;Param/Value/2B2595A9&quot;);
                gv_errorMessage.lv_tameError = StringExternal(&quot;Param/Value/FA59CA97&quot;);
                gv_errorMessage.lv_skillReq = StringExternal(&quot;Param/Value/C4C92798&quot;);
                gv_errorMessage.lv_alreadyHaveUpgrade = StringExternal(&quot;Param/Value/E68D6629&quot;);
                gv_errorMessage.lv_alreadyHaveSchematic = StringExternal(&quot;Param/Value/D4CE7498&quot;);
                gv_errorMessage.lv_spellAlreadyLearned = StringExternal(&quot;Param/Value/402B2D6F&quot;);
                gv_errorMessage.lv_dead = StringExternal(&quot;Param/Value/86870EF1&quot;);
                gv_errorMessage.lv_rainOrWinter = StringExternal(&quot;Param/Value/FCBBE202&quot;);
                for (init_i = 0; init_i &lt;= gv_maxTeams; init_i += 1) {
                    gv_team[init_i] = PlayerGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= gv_tribeNamesCount; init_i += 1) {
                    gv_tribeNamePool[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_teamColorCount; init_i += 1) {
                    gv_teamColorPool[init_i] = Color(0,0,0);
                }
                gv_statusDialog = c_invalidDialogId;
                gv_warmthItem = c_invalidDialogControlId;
                gv_hungerItem = c_invalidDialogControlId;
                gv_fatigueItem = c_invalidDialogControlId;
                gv_woundedFlash = c_invalidDialogId;
                gv_woundedFlashImage = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_perks[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_hints[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_matchhistory[init_i] = &quot;&quot;;
                }
                gv_perkDialogSmall = c_invalidDialogId;
                gv_perkDialogSmallBTN = c_invalidDialogControlId;
                gv_perkWindow = c_invalidDialogId;
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 10; init_j += 1) {
                        gv_perkButton[init_i][init_j] = c_invalidDialogControlId;
                    }
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 10; init_j += 1) {
                        gv_perkImage[init_i][init_j] = c_invalidDialogControlId;
                    }
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 10; init_j += 1) {
                        gv_perkMarker[init_i][init_j] = c_invalidDialogControlId;
                    }
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_perkTierLabel[init_i] = c_invalidDialogControlId;
                }
                gv_perkTitle = c_invalidDialogControlId;
                gv_perkReset = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= gv_pGFAmount; init_i += 1) {
                    gv_postgameFeatValid[init_i] = true;
                }
                gv_pGSMultiMainWindow = c_invalidDialogId;
                for (init_i = 0; init_i &lt;= gv_maxTeams; init_i += 1) {
                    gv_pGSMultiTeamLabel[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= gv_maxTeams; init_i += 1) {
                    gv_pGSMultiPlayerLabel[init_i] = c_invalidDialogControlId;
                }
                gv_pGSWindowSmall = c_invalidDialogId;
                gv_pGSWindowSmallBTN = c_invalidDialogControlId;
                gv_pGSWindowLarge = c_invalidDialogId;
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_pGSWinLossLabel[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_pGSPlayerLabelT1[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_pGSWinLabelT1[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_pGSLossLabelT1[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_pGSPlayerLabelT2[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_pGSWinLabelT2[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_pGSLossLabelT2[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    for (init_j = 0; init_j &lt;= gv_rewardCategories; init_j += 1) {
                        for (init_k = 0; init_k &lt;= gv_rewardItems; init_k += 1) {
                            gv_rewardState[init_i][init_j][init_k] = 1;
                        }
                    }
                }
                for (init_i = 0; init_i &lt;= gv_rewardTypes; init_i += 1) {
                    for (init_j = 0; init_j &lt;= gv_rewardItems; init_j += 1) {
                        gv_rewardCost[init_i][init_j] = -1;
                    }
                }
                gv_rewardsOpenerDialog = c_invalidDialogId;
                gv_rewardsOpenerItem = c_invalidDialogControlId;
                gv_rewardsMainWindow = c_invalidDialogId;
                for (init_i = 0; init_i &lt;= gv_rewardItems; init_i += 1) {
                    gv_rewardButton[init_i] = c_invalidDialogControlId;
                }
                gv_conqpointsLabel = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= gv_rewardCategories; init_i += 1) {
                    gv_rewardsCatBTN[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_rewardsCatSelect[init_i] = 1;
                }
                for (init_i = 0; init_i &lt;= gv_rewardItems; init_i += 1) {
                    gv_rewardsTitleStyle[init_i] = 1;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_wizardVisitEveryNight[init_i] = true;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_slayer[init_i] = &quot;0000&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_destroyerTimer[init_i] = TimerCreate();
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_aristocrat[init_i] = true;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_gossipTypeListened[init_i] = &quot;0000000000&quot;;
                }
                gv_kingslayerTimer = TimerCreate();
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_handle[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_reprimandedMax; init_i += 1) {
                    gv_reprimandedList[init_i] = &quot;&quot;;
                }
                gv_reprimandIndex = 1;
                gv_questDelayTimer = TimerCreate();
                gv_questTimer = TimerCreate();
                gv_questInitialDelay = RandomFixed(360.0, 480.0);
                gv_questObjective = c_invalidObjectiveId;
                gv_questTimerUpdate = TimerCreate();
                gv_questTextDelay = TimerCreate();
                gv_chiefPing = c_invalidPingId;
                gv_treasureChests = UnitGroupEmpty();
                for (init_i = 0; init_i &lt;= 20; init_i += 1) {
                    gv_treasurePing[init_i] = c_invalidPingId;
                }
                gv_shipmentPing = c_invalidPingId;
                gv_merchantPing = c_invalidPingId;
                gv_feastChefPing = c_invalidPingId;
                for (init_i = 0; init_i &lt;= gv_challengers; init_i += 1) {
                    gv_zonePing[init_i] = c_invalidPingId;
                }
                gv_previousSpectators = &quot;&quot;;
                gv_warlordPing = c_invalidPingId;
                gv_frostWitchPing = c_invalidPingId;
                gv_wizardPing = c_invalidPingId;
                gv_exilePing = c_invalidPingId;
                gv_exileRewardPing = c_invalidPingId;
                for (init_i = 0; init_i &lt;= gv_veilShrineMax; init_i += 1) {
                    gv_veilShrinePing[init_i] = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= gv_veilShrineMax; init_i += 1) {
                    gv_veilShrineSequence[init_i] = &quot;&quot;;
                }
                gv_veilGuardianTimer = TimerCreate();
                gv_veilofDarknessTimer = TimerCreate();
                for (init_i = 0; init_i &lt;= gv_maxTeams; init_i += 1) {
                    for (init_j = 0; init_j &lt;= gv_expeditionAreas; init_j += 1) {
                        gv_expeditionPing[init_i][init_j] = c_invalidPingId;
                    }
                }
                gv_rABKillTimer = TimerCreate();
                gv_minimalistSkillDialog = c_invalidDialogId;
                for (init_i = 0; init_i &lt;= 5; init_i += 1) {
                    gv_minimalistSkillDialogItem[init_i] = c_invalidDialogControlId;
                }
                gv_skillButton = c_invalidDialogControlId;
                gv_skillWindowBig = c_invalidDialogId;
                gv_skillWindowSmall = c_invalidDialogId;
                for (init_i = 0; init_i &lt;= 5; init_i += 1) {
                    gv_bTNSkillIncrease[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 6; init_i += 1) {
                    gv_skillLabel[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_skillPointsPlayer[init_i] = 5;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_animalVisionGroup[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_learnedSpellsString[init_i] = &quot;00000000&quot;;
                }
                gv_dayDuration = 140.0;
                gv_nightDuration = 80.0;
                gv_dayNight = 1;
                gv_b_Day = true;
                gv_day = 1;
                gv_dayTimerDialog = c_invalidDialogId;
                gv_dayTimerProgress = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= gv_rewardTypes; init_i += 1) {
                    for (init_j = 0; init_j &lt;= gv_players; init_j += 1) {
                        gv_requirementString[init_i][init_j] = &quot;&quot;;
                    }
                }
                for (init_i = 0; init_i &lt;= gv_maxTeams; init_i += 1) {
                    gv_discoveredBushesTeam[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= gv_maxTeams; init_i += 1) {
                    gv_discoveredDepositsTeam[init_i] = UnitGroupEmpty();
                }
                gv_treeQuota = 300;
                gv_wildSheep = UnitGroupEmpty();
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_aDTCapPlayer[init_i] = 1;
                }
                gv_watchTowerTimer = TimerCreate();
                gv_watchTowerTimerUpdate = TimerCreate();
                gv_watchTowerTimerExtendable = true;
                gv_watchTowerObjective = c_invalidObjectiveId;
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_pets[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_taughtPetsString[init_i] = &quot;000000&quot;;
                }
                gv_observeRequest = c_invalidDialogId;
                gv_observeRequestBtn = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_observeAnswer[init_i] = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_observeAnswerBtnYes[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_observeAnswerBtnNo[init_i] = c_invalidDialogControlId;
                }
                gv_rezzDialog = c_invalidDialogId;
                gv_rezzDialogTitle = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_rezzDialogBTN[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_reincarnatePing[init_i] = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_reincarnationTimer[init_i] = TimerCreate();
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_reincarnationTimerWindow[init_i] = c_timerWindowNone;
                }
                gv_winningPlayers = PlayerGroupEmpty();
                gv_losingPlayers = PlayerGroupEmpty();
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_recentlyDamaged[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_dTAngles[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_dTAngles2[init_i] = &quot;&quot;;
                }
                gv_dTConfigWindow = c_invalidDialogId;
                gv_dTScaleSlider = c_invalidDialogControlId;
                gv_dTScaleText = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_dTScaleValue[init_i] = 1.0;
                }
                gv_dTDurationSlider = c_invalidDialogControlId;
                gv_dTDurationText = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_dTDurationValue[init_i] = 1.0;
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_dTCheckbox[init_i] = c_invalidDialogControlId;
                }
                gv_dTClose = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_textTagTimer[init_i] = TimerCreate();
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_backpackSize[init_i] = 20;
                }
                for (init_i = 0; init_i &lt;= gv_aIRetreatStringAmount; init_i += 1) {
                    gv_aIRetreatString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIReviveStringAmount; init_i += 1) {
                    gv_aIReviveString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIQuestKillStringAmount; init_i += 1) {
                    gv_aIQuestKillString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIQuestLootStringAmount; init_i += 1) {
                    gv_aIQuestLootString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIQuestStringAmount; init_i += 1) {
                    gv_aIQuestString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIQuestGladiatorStringAmount; init_i += 1) {
                    gv_aIQuestGladiatorString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIQuestDeadnightStringAmount; init_i += 1) {
                    gv_aIQuestDeadnightString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aISpellStringAmount; init_i += 1) {
                    gv_aISpellString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aITrapsStringAmount; init_i += 1) {
                    gv_aITrapsString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aITauntStringAmount; init_i += 1) {
                    gv_aITauntString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIMonumentStringAmount; init_i += 1) {
                    gv_aIMonumentString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIMonumentBuildStringAmount; init_i += 1) {
                    gv_aIMonumentBuildString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIExileStringAmount; init_i += 1) {
                    gv_aIExileString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIPirateStringAmount; init_i += 1) {
                    gv_aIPirateString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIPetStringAmount; init_i += 1) {
                    gv_aIPetString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIChefQuestStringAmount; init_i += 1) {
                    gv_aIChefQuestString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIEnemySightedAmount; init_i += 1) {
                    gv_aIEnemySighted[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIWatchTowerBuilderAmount; init_i += 1) {
                    gv_aIWatchTowerBuilder[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_aIFishingStringAmount; init_i += 1) {
                    gv_aIFishingString[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_aISelected2[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= gv_numberofnames; init_i += 1) {
                    gv_aINamePool[init_i] = &quot;&quot;;
                }
                gv_aISupply.lv_leather = 2;
                gv_aISupply.lv_wool = 2;
                gv_aISupply.lv_shadowstone = 2;
                gv_aISupply.lv_lumber = 2;
                gv_aISupply.lv_stone = 2;
                gv_aISupply.lv_spicyHerbs = 2;
                gv_aISupply.lv_radiantGems = 2;
                gv_aISupply.lv_ironOre = 2;
                gv_aISupply.lv_sunflowers = 2;
                gv_aISupply.lv_food = 3;
                gv_aISupply.lv_bearPelt = 1;
                gv_aISupply.lv_candles = 2;
                gv_aISupply.lv_lanterns = 1;
                for (init_i = 0; init_i &lt;= gv_players; init_i += 1) {
                    gv_aIData[init_i].lv_customization = &quot;0000000000&quot;;
                    gv_aIData[init_i].lv_supply.lv_leather = 2;
                    gv_aIData[init_i].lv_supply.lv_wool = 2;
                    gv_aIData[init_i].lv_supply.lv_shadowstone = 2;
                    gv_aIData[init_i].lv_supply.lv_lumber = 2;
                    gv_aIData[init_i].lv_supply.lv_stone = 2;
                    gv_aIData[init_i].lv_supply.lv_spicyHerbs = 2;
                    gv_aIData[init_i].lv_supply.lv_radiantGems = 2;
                    gv_aIData[init_i].lv_supply.lv_ironOre = 2;
                    gv_aIData[init_i].lv_supply.lv_sunflowers = 2;
                    gv_aIData[init_i].lv_supply.lv_food = 3;
                    gv_aIData[init_i].lv_supply.lv_bearPelt = 1;
                    gv_aIData[init_i].lv_supply.lv_candles = 2;
                    gv_aIData[init_i].lv_supply.lv_lanterns = 1;
                    gv_aIData[init_i].lv_tradeItems = UnitGroupEmpty();
                    gv_aIData[init_i].lv_tamingTime = TimerCreate();
                    gv_aIData[init_i].lv_fishingTime = TimerCreate();
                    gv_aIData[init_i].lv_focusedRetreatTimer = TimerCreate();
                    gv_aIData[init_i].lv_buildPlacement = TimerCreate();
                    gv_aIData[init_i].lv_tradeRoamRadius = 48.0;
                    gv_aIData[init_i].lv_shadowCloakMinimum = TimerCreate();
                    gv_aIData[init_i].lv_richLimit = 300;
                    gv_aIData[init_i].lv_supplyUpdateFrequency = TimerCreate();
                    gv_aIData[init_i].lv_lumberjackTimer = TimerCreate();
                    gv_aIData[init_i].lv_explorerTimer = TimerCreate();
                    gv_aIData[init_i].lv_difficultyRating = 100.0;
                    gv_aIData[init_i].lv_enemies = UnitGroupEmpty();
                }
                gv_transcript = StringExternal(&quot;Param/Value/22E3C5D0&quot;);
                gv_equipmentData[0].lv_name = &quot;BearShamansShroud&quot;;
                gv_equipmentData[1].lv_name = &quot;BerserkersBattleAxe&quot;;
                gv_equipmentData[2].lv_name = &quot;Bloodcleaver&quot;;
                gv_equipmentData[3].lv_name = &quot;BloodthirstyPirateHat&quot;;
                gv_equipmentData[4].lv_name = &quot;CelestialOrb&quot;;
                gv_equipmentData[5].lv_name = &quot;CommonArmor&quot;;
                gv_equipmentData[6].lv_name = &quot;CommonBuckler&quot;;
                gv_equipmentData[7].lv_name = &quot;CommonSword&quot;;
                gv_equipmentData[8].lv_name = &quot;ConjurersCharm&quot;;
                gv_equipmentData[9].lv_name = &quot;CrabShipment&quot;;
                gv_equipmentData[10].lv_name = &quot;CravensFishSticker&quot;;
                gv_equipmentData[11].lv_name = &quot;Demonward&quot;;
                gv_equipmentData[12].lv_name = &quot;DreadplateArmor&quot;;
                gv_equipmentData[13].lv_name = &quot;DullPickaxe&quot;;
                gv_equipmentData[14].lv_name = &quot;ElderWand&quot;;
                gv_equipmentData[15].lv_name = &quot;EnigmaticStaff&quot;;
                gv_equipmentData[16].lv_name = &quot;EpicFishingRod&quot;;
                gv_equipmentData[17].lv_name = &quot;FelFireTorch&quot;;
                gv_equipmentData[18].lv_name = &quot;FishingRod&quot;;
                gv_equipmentData[19].lv_name = &quot;FrostBarrier&quot;;
                gv_equipmentData[20].lv_name = &quot;FrostNeedle&quot;;
                gv_equipmentData[21].lv_name = &quot;GarishGladiatorsGarb&quot;;
                gv_equipmentData[22].lv_name = &quot;GoldenHauberk&quot;;
                gv_equipmentData[23].lv_name = &quot;GoldenPolearm&quot;;
                gv_equipmentData[24].lv_name = &quot;GravesingersClaw&quot;;
                gv_equipmentData[25].lv_name = &quot;HeavyIronBreastplate&quot;;
                gv_equipmentData[26].lv_name = &quot;HeavyTowerShield&quot;;
                gv_equipmentData[27].lv_name = &quot;HuntsmansJacket&quot;;
                gv_equipmentData[28].lv_name = &quot;IronBandedBuckler&quot;;
                gv_equipmentData[29].lv_name = &quot;IronStuddedVest&quot;;
                gv_equipmentData[30].lv_name = &quot;IronbarkArmor&quot;;
                gv_equipmentData[31].lv_name = &quot;JudgmentGavel&quot;;
                gv_equipmentData[32].lv_name = &quot;Lantern&quot;;
                gv_equipmentData[33].lv_name = &quot;LeatherCoat&quot;;
                gv_equipmentData[34].lv_name = &quot;LightLeatherShield&quot;;
                gv_equipmentData[35].lv_name = &quot;LiquidatorSpellblade&quot;;
                gv_equipmentData[36].lv_name = &quot;MagnificentChefsHat&quot;;
                gv_equipmentData[37].lv_name = &quot;MasterRangersMaille&quot;;
                gv_equipmentData[38].lv_name = &quot;MurlocDoomhammer&quot;;
                gv_equipmentData[39].lv_name = &quot;MysticsTribalShield&quot;;
                gv_equipmentData[40].lv_name = &quot;NecromancersNecklace&quot;;
                gv_equipmentData[41].lv_name = &quot;ObedienceRod&quot;;
                gv_equipmentData[42].lv_name = &quot;OutlandishHeartpiercer&quot;;
                gv_equipmentData[43].lv_name = &quot;RepeatingCrossbow&quot;;
                gv_equipmentData[44].lv_name = &quot;RoughBlunderbuss&quot;;
                gv_equipmentData[45].lv_name = &quot;SharpIronPickaxe&quot;;
                gv_equipmentData[46].lv_name = &quot;SpellbreakerArmor&quot;;
                gv_equipmentData[47].lv_name = &quot;SpikedShadowstoneScutum&quot;;
                gv_equipmentData[48].lv_name = &quot;StormwizardsRobes&quot;;
                gv_equipmentData[49].lv_name = &quot;SturdyWoodenStick&quot;;
                gv_equipmentData[40].lv_name = &quot;TheMurlocket&quot;;
                gv_equipmentData[41].lv_name = &quot;Torch&quot;;
                gv_equipmentData[42].lv_name = &quot;TrebuchetPacked&quot;;
                gv_equipmentData[43].lv_name = &quot;TwinThrowingAxes&quot;;
                gv_equipmentData[44].lv_name = &quot;VengefulMurlocSkull&quot;;
                gv_equipmentData[45].lv_name = &quot;VenomousArbalest&quot;;
                gv_equipmentData[46].lv_name = &quot;ViciousJavelin&quot;;
                gv_equipmentData[47].lv_name = &quot;ViciouslySharpArmblade&quot;;
                gv_equipmentData[48].lv_name = &quot;WarmWoolTunic&quot;;
                gv_equipmentData[49].lv_name = &quot;Wolfsbane&quot;;
                gv_memoryQancakesPoint = PointFromId(4242);
                gv_region001 = RegionFromId(1);  //2
                gv_regionArena = RegionFromId(2); //3
                gv_region002 = RegionFromId(3); //4
                gv_regionMemory = RegionFromId(4); //5
                gv_regionFishMarSara001 = RegionFromId(5); //
                gv_regionFishMarSara002 = RegionFromId(6); //
                gv_regionFishBelShir001 = RegionFromId(7); //
                gv_regionFishBelShir002 = RegionFromId(8); //
                gv_regionFishShakuras001 = RegionFromId(9); //
                gv_regionFishSouthlands3001 = RegionFromId(10); //
                gv_regionFishSouthlands3002 = RegionFromId(11); //
                gv_regionFishSouthlands2001 = RegionFromId(12); //
                gv_regionFishSouthlands2002 = RegionFromId(13); //
                gv_regionFishBelShir003 = RegionFromId(14); //
                gv_regionFishShakuras002 = RegionFromId(15); //
                gv_regionFishBelShir004 = RegionFromId(16); //
                gv_regionFishBelShir005 = RegionFromId(17); //
                gv_regionFishBelShir006 = RegionFromId(18); //
                gv_regionFishBelShir007 = RegionFromId(19); //
                gv_regionFishBelShir008 = RegionFromId(20); //
                gv_regionFishShakuras003 = RegionFromId(21); //
                gv_regionFishZhakulDas001 = RegionFromId(22); //
                gv_regionFishZhakulDas002 = RegionFromId(23); //
                gv_regionArenaThrowArea = RegionFromId(24); //
                gv_regionFishChar001 = RegionFromId(25); //
                gv_regionFishChar002 = RegionFromId(26); //
                gv_regionFishChar003 = RegionFromId(27); //
            }
        </ScriptCode>
        <InitFunc>InitGlobals</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B0AC4376">
        <ScriptCode>
            void gf_SwapResourceNodes ();
            bool gf_DayNightCyclePaused ();
            void gf_SetKoboldDefault (int lp_player);
            void gf_SetupStartingItems (unit lp_unit, bool lp_resurrected);
            void gf_SetupStartingSpells (unit lp_unit);
            void gf_SetupPerkBonusi (unit lp_unit, bool lp_resurrected);
            void gf_ApplyKoboldBehaviors (unit lp_unit);
            point gf_GetTeamStart (int lp_player);
            text gf_GetPlayerName (int lp_player, int lp_includeTitle);
            int gf_AveragePlayerLevel (playergroup lp_group);
            string gf_ScrambleString (string lp_string);
            int gf_GetTeamOfPlayer (int lp_player);
            text gf_GetTribeTextOfPlayer (int lp_player);
            text gf_GetTribeTextOfTeam (int lp_team);
            void gf_KoboldHealthStatus (unit lp_kobold);
            void gf_ModifyKoboldHealthStatus (fixed lp_deltaWarmth, fixed lp_deltaHunger, fixed lp_deltaStamina, int lp_player);
            void gf_UpdateHealthStatDialog (int lp_player);
            void gf_UpdateHighlightTooltip (int lp_player);
            fixed gf_WarmthDrainFactorGeneric (unit lp_unit);
            fixed gf_HungerDrainFactorGeneric (unit lp_unit);
            fixed gf_StaminaDrainFactorGeneric (unit lp_unit);
            fixed gf_StaminaDrainFactorMining (unit lp_unit);
            fixed gf_StaminaRegenFactorGeneric (unit lp_unit);
            void gf_StaminaFaint (unit lp_unit);
            void gf_WoundedFlash (unit lp_unit, fixed lp_damageTaken);
            bool gf_BankChecksOut (string lp_entry, string lp_section, int lp_index);
            int gf_DecryptInt (string lp_string, int lp_key, int lp_flood);
            string gf_EncryptInt (int lp_integer, int lp_key, int lp_flood);
            int gf_LoadAccountLevel (int lp_player, bank lp_bank);
            int gf_LoadAccountXP (int lp_player, bank lp_bank);
            int gf_LoadAccountWins (int lp_player, bank lp_bank);
            int gf_LoadAccountLosses (int lp_player, bank lp_bank);
            int gf_LoadKoboldKills (int lp_player, bank lp_bank);
            int gf_LoadKoboldDeaths (int lp_player, bank lp_bank);
            void gf_LoadRewards (int lp_player, bank lp_bank);
            void gf_LoadDamageText (int lp_player, bank lp_bank);
            void gf_UpdatePerkWindow (int lp_player);
            int gf_GetPointsSpentInTiersBelow (int lp_player, int lp_tier);
            int gf_GetPointsSpentInTier (int lp_player, int lp_tier);
            void gf_Banker (int lp_player);
            void gf_SetupPostgameFeats ();
            void gf_RunPostgameFeats (int lp_plater);
            int gf_GetFeatTextIndex (int lp_player);
            void gf_InvalidationCheck (int lp_player, int lp_integer);
            int gf_FeatPlayerKills (playergroup lp_playerGroup);
            int gf_FeatSpellsCast (playergroup lp_playerGroup);
            int gf_FeatGoldEarned (playergroup lp_playerGroup);
            int gf_FeatTreesPlanted ();
            int gf_FeatMostStored (playergroup lp_playerGroup);
            int gf_FeatTrappedEnemies (playergroup lp_playerGroup);
            int gf_FeatBoomstickTime (playergroup lp_playerGroup);
            int gf_FeatHelpfulTribe (playergroup lp_playerGroup);
            int gf_FeatFriendsLikeThese (playergroup lp_playerGroup);
            int gf_FeatCoiffureCare (playergroup lp_playerGroup);
            int gf_FeatArchitect (playergroup lp_playerGroup);
            int gf_FeatSensible (playergroup lp_playerGroup);
            int gf_FeatUnbirdened (playergroup lp_playerGroup);
            int gf_FeatBeastmaster (playergroup lp_playerGroup);
            void gf_UpdatePGSWindow (int lp_player);
            text gf_RatingAffix (int lp_player, int lp_b);
            color gf_GetPGSLabelColor (int lp_index, int lp_player);
            int gf_GetFavWeapIndex (int lp_player);
            text gf_GetItemNameFromLevel (int lp_level);
            text gf_GetWLText (int lp_player);
            text gf_GetKDText (int lp_player);
            text gf_GetMatchHistoryText (int lp_player);
            void gf_createreward (int lp_type, text lp_title, int lp_titleStyle, text lp_tooltip, int lp_cost, int lp_requirementIndex, text lp_requirementText);
            bool gf_RewardCatIndexActive (int lp_player, int lp_category, int lp_index);
            int gf_GetUnlockedVariable (int lp_integer);
            int gf_GetUnlockedStatus (int lp_integer);
            bool gf_RewardButtonClicked (int lp_button);
            int gf_GetRewardButtonIndex (int lp_button);
            void gf_ShowRewardsDialog (int lp_player);
            void gf_UpdateRewardsDialog (int lp_player);
            void gf_CategoryText (int lp_player);
            void gf_HideAllRewButtons (int lp_player);
            text gf_RewardsOpenerText (int lp_player);
            text gf_RewardCostText (int lp_player, int lp_a);
            text gf_RewardTooltipText (int lp_player, int lp_a);
            text gf_RewardReqText (int lp_player, int lp_a);
            text gf_TitleFormat (int lp_player, int lp_a);
            void gf_SaveRewards (int lp_i);
            void gf_SetRewardState (int lp_player, int lp_integerString, int lp_category, int lp_index);
            string gf_GetRewardState (int lp_player, int lp_category, int lp_index);
            void gf_DeactivateConflictingRewards (int lp_player, int lp_category, int lp_index);
            bool gf_ValidReward (string lp_entry, string lp_section, int lp_index);
            string gf_GetRandom12String ();
            int gf_GetActiveTitleIndex (int lp_player);
            bool gf_RequirementCompleted (int lp_player, int lp_category, int lp_index);
            void gf_BankSaveEncryptedString (string lp_key, string lp_section, string lp_value, int lp_player);
            string gf_BankLoadEncryptedString (string lp_key, string lp_section, int lp_player);
            bool gf_StringEncryptionCheck (string lp_string);
            int gf_CalculateEncryptMod (string lp_string, int lp_modulo);
            void gf_UnlockRequirement (int lp_player, int lp_category, int lp_index);
            void gf_RequirementAchieved (text lp_text, soundlink lp_sound, int lp_category, int lp_index, int lp_player);
            void gf_EndgameRequirementsCheck (int lp_player);
            void gf_CheckSeasonalRequirements (int lp_player);
            void gf_SlayerProgress (int lp_player, unit lp_boss);
            void gf_VanquisherStart (int lp_player);
            void gf_AllSpellsLearnedCheck (int lp_player);
            bool gf_ChampionGame ();
            void gf_AddSpecialReward (string lp_handle, string lp_reward, text lp_comment);
            int gf_PlayerWithHandle (string lp_handle);
            void gf_ReprimandPlayer (string lp_handle, text lp_info);
            bool gf_ReprimandedPlayer (int lp_player);
            bool gf_RatingKeyValid (string lp_entry, string lp_section, int lp_index);
            int gf_LoadRatingValue (int lp_player, bank lp_bank);
            int gf_LoadRatingGames (int lp_player, bank lp_bank);
            void gf_UpdatePlayerRating (int lp_player, int lp_winLoss);
            int gf_GetKValue (int lp_player);
            bool gf_ValidRatedGame ();
            void gf_SaveSB3 (int lp_i);
            void gf_InitializeQuest (int lp_questIndex);
            fixed gf_GetNextQuestDelay ();
            void gf_QuestFinishEvents (playergroup lp_questWinners, playergroup lp_questLosers);
            point gf_GetBossSpawnLocation ();
            void gf_ChiefInit ();
            void gf_ChiefDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_TreasureInit ();
            void gf_TreasureSpawnLoot (point lp_p);
            void gf_TreasureEndPrem ();
            void gf_RetrievalInit ();
            void gf_RetrieveRewards (point lp_location);
            void gf_PlantInit ();
            void gf_FeastInit ();
            void gf_FeastCriteria (unit lp_cooker, string lp_foodType);
            text gf_FeastProgressText ();
            void gf_GladiatorInit ();
            void gf_GladiatorEndPhase2 (unit lp_dyingUnit, unit lp_killingUnit);
            text gf_GetTeamChallengerName (int lp_teamIndex);
            unit gf_RemainingDuelist ();
            bool gf_IsGladiator (unit lp_unit);
            text gf_ArenaCheer ();
            void gf_DeadnightinitPhase1 ();
            void gf_DeadnightinitPhase2 (fixed lp_transitionTime);
            void gf_DeadnightinitPhase3 ();
            void gf_SpawnMonstrosity ();
            point gf_BlinkLocation (unit lp_unit);
            point gf_StealthPointInRegion (region lp_region, int lp_player);
            void gf_MonstrosityAcquireTarget (unit lp_unit);
            void gf_WarlordInit ();
            void gf_WarlordDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_TruffleInit ();
            void gf_WinterInitialize ();
            void gf_WinterLoop ();
            void gf_FrostWitchSpawn (unit lp_spawner, point lp_location);
            void gf_FrostWitchDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_LightsOutImpact (point lp_point);
            void gf_PiratesInit ();
            void gf_PiratesFound (unit lp_digger);
            void gf_PiratesDirection (unit lp_unit);
            void gf_WizardInit ();
            void gf_WizardHealed (unit lp_healedUnit, unit lp_healingUnit);
            void gf_BuilderInit ();
            void gf_ExileInit ();
            unit gf_GetStrongestOnTeam (int lp_team);
            void gf_ExileLoot (point lp_location);
            void gf_VeilInit ();
            void gf_VeilShrineSetup (point lp_point);
            string gf_VeilShrineSequence ();
            point gf_RandomOpenArea (int lp_size, region lp_region);
            void gf_VeilShrineFail (unit lp_shrine);
            void gf_VeilLoot (point lp_point);
            void gf_VeilofDarkness (fixed lp_duration, int lp_castingTeam);
            void gf_ExpeditionInit ();
            void gf_ExpeditionProgress (int lp_team);
            text gf_ExpeditionProgressText ();
            void gf_DLJRSpawn (point lp_point);
            void gf_DLJRDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_RABSpawn (point lp_point, int lp_summoningPlayer);
            void gf_UnstableAnomalyAscent (unit lp_unit, fixed lp_damage);
            void gf_RABDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_UpdateSkillButton (int lp_player);
            void gf_UpdateSkillWindow (int lp_player);
            void gf_AddExperience (unit lp_unit, fixed lp_amount);
            void gf_IncreaseSkillType (int lp_player, int lp_type, int lp_amount);
            text gf_GetExpertiseText (int lp_skill, int lp_player);
            void gf_UpdateForestry (int lp_player);
            void gf_UpdateMining (int lp_player);
            void gf_UpdateCooking (int lp_player);
            void gf_UpdateForaging (int lp_player);
            void gf_UpdateArtisanship (int lp_player);
            void gf_CreateSalvageResources (string lp_type, point lp_point);
            void gf_StaminaOnCraft (unit lp_unit);
            void gf_Forestry20Heal (unit lp_source, unit lp_target, fixed lp_damageAmount, string lp_dmgEffect);
            void gf_BoostAdrenalineRush (int lp_player, string lp_minerType, int lp_amount);
            void gf_LearnSpell (int lp_spellIndex, int lp_player);
            void gf_UpdateSpellValues (fixed lp_spellPower, fixed lp_dmg, int lp_player);
            void gf_UpdateSpellCosts (int lp_player);
            void gf_SpellCast (unit lp_caster, fixed lp_cost);
            void gf_LeatherCoatHeal (unit lp_caster, fixed lp_cost);
            void gf_SpellbreakerHaste (unit lp_caster);
            void gf_NightwispSynergy (unit lp_caster);
            void gf_SpellbreakerTrigger (unit lp_unit);
            void gf_HealUnit (unit lp_target, unit lp_source, fixed lp_amount, bool lp_showText);
            void gf_GuardianSpiritLoop (unit lp_unit);
            unit gf_NearbySacrificeTarget (unit lp_unit);
            void gf_DayNightCycle ();
            void gf_UpdateDayTimer (fixed lp_cycle);
            void gf_TravelingWizards (int lp_player, bool lp_guaranteed);
            void gf_MorningHappened ();
            void gf_NightHappened ();
            void gf_UpdateWolfsbanePlayer (int lp_player);
            void gf_SetFogOpacity (fixed lp_opacityOriginal, fixed lp_opacityTarget, fixed lp_fadeDuration);
            void gf_RainInitialize (fixed lp_wait, fixed lp_duration, fixed lp_chance);
            void gf_RainLoop ();
            void gf_NewLightset (string lp_lightset, fixed lp_duration, bool lp_waitforit, int lp_timeofday);
            point gf_RandomPathablePoint (region lp_region);
            point gf_RandomPathablePointSansVision (region lp_region);
            bool gf_PointVisibleToAnyone (point lp_point);
            string gf_GetRandom8String ();
            void gf_UpdateResourceReservesSingle (unit lp_unit, unit lp_item, bool lp_negative);
            void gf_UpdateResourceReserversCond (int lp_player, unit lp_item, bool lp_negative);
            void gf_AddRemoveUnitFromUnitGroup (unit lp_unit, unitgroup lp_unitGroup, bool lp_negative);
            void gf_MiningExpertiseIII (unit lp_unit);
            void gf_ClearResourceReserves (int lp_player);
            void gf_UpdateResourceTooltip (unit lp_unit);
            void gf_SaveResources (int lp_i);
            void gf_UpdateGold (int lp_player);
            void gf_DiscoverDeposits ();
            void gf_DiscoverBushes ();
            void gf_SpawnBerries (unit lp_bush);
            void gf_SpawnHerbs (unit lp_bush);
            void gf_SpawnResources ();
            void gf_GatherStop (unit lp_unit);
            int gf_GatherType (unit lp_unit);
            int gf_GatherCap (unit lp_unit, unit lp_node, int lp_type);
            void gf_GatherResult (unit lp_unit, unit lp_node, int lp_type);
            void gf_GatherAnimation (unit lp_unit, int lp_cV, int lp_type, int lp_cap);
            fixed gf_Nonkoboldgatherrate (unit lp_unit);
            string gf_ProduceStone (unit lp_unit);
            string gf_ProduceGold (unit lp_unit, bool lp_depleted);
            string gf_ProduceBerries (unit lp_unit);
            string gf_ProduceHerb (unit lp_unit);
            void gf_UpdateBuildingStats (int lp_player);
            void gf_BuildTent (unit lp_building);
            void gf_BuildCampfire (unit lp_building);
            void gf_BuildFarm (unit lp_building);
            void gf_BuildWorkbench (unit lp_building);
            void gf_BuildSmithy (unit lp_building);
            void gf_BuildTavern (unit lp_building);
            void gf_BuildOutpost (unit lp_building);
            void gf_BuildSpikeTrap (unit lp_building);
            void gf_BuildLodge (unit lp_building);
            void gf_BuildMonument (unit lp_building);
            void gf_BuildPalisade (unit lp_building);
            void gf_BuildADT (unit lp_building);
            void gf_BuildWatchTower (unit lp_building);
            fixed gf_LeastConstructionProgress (unitgroup lp_buildings, fixed lp_buildTime);
            text gf_SpikeTrapSuffix (int lp_charges);
            void gf_RefreshCampfire (unit lp_unit, int lp_player, bool lp_expert);
            void gf_ADTUpdateAmmo (unit lp_unit);
            void gf_PalisadeMutability (unit lp_unit, unitgroup lp_exclude, int lp_layer);
            void gf_Cooking (unit lp_unit, string lp_mealType, fixed lp_preparationTime);
            unit gf_GetCookingNode (unit lp_kobold);
            text gf_GetCookingTypeText (string lp_unitType);
            void gf_EatFood (unit lp_unit, unit lp_item, bool lp_consume);
            void gf_ActivateFoodCooldown (unit lp_unit, fixed lp_duration);
            void gf_RemoveAilments (unit lp_unit);
            void gf_Crafting (unit lp_craftsman, unit lp_station, string lp_itemType, fixed lp_craftingTime);
            void gf_UpdateStatsAll (int lp_player);
            fixed gf_CalcAttackspeed (int lp_player);
            fixed gf_CalcAttackRange (int lp_player);
            fixed gf_CalcMovespeed (int lp_player);
            fixed gf_BaseWeaponSpeed (int lp_player);
            bool gf_RangedWeapon (unit lp_unit);
            void gf_BlunderbussShotgun (unit lp_attacker, unit lp_target, string lp_effect);
            void gf_PailsadeRangedProtection (unit lp_attacker, unit lp_target, string lp_effect);
            bool gf_RangedAttack (string lp_effect);
            bool gf_NormalAttack (string lp_effect);
            fixed gf_AttackCooldown (unit lp_unit);
            void gf_ModifyUnitSight (string lp_unit, int lp_player, fixed lp_real);
            int gf_GetItemLevel (string lp_type, int lp_player);
            bool gf_UnitCanGetItem (unit lp_unit, string lp_type);
            void gf_CreateItemForUnit (unit lp_unit, string lp_itemType, int lp_amount);
            void gf_CreateLoot (string lp_itemType, point lp_origin, fixed lp_randomOffset, bool lp_fountainEffect, int lp_dropChance, int lp_goldAmountoptional);
            void gf_CreateCoinPurse (int lp_value, point lp_point);
            void gf_EquipmentChange (int lp_player, unit lp_item, bool lp_negative, int lp_actionIndex);
            void gf_EquipMainHands (int lp_player, string lp_itemType, bool lp_negative);
            void gf_EquipOffhands (int lp_player, string lp_itemType, bool lp_negative);
            void gf_EquipArmors (int lp_player, string lp_itemType, bool lp_negative);
            unit gf_KoboldMainHand (unit lp_kobold);
            unit gf_KoboldOffhand (unit lp_kobold);
            unit gf_KoboldArmor (unit lp_kobold);
            fixed gf_ReversalFactor (bool lp_booly);
            void gf_MetalArmor (unit lp_unit, fixed lp_r);
            void gf_GladiatorsStrength (int lp_player);
            void gf_NightlyBeerCasks ();
            void gf_SpawnScrollofTransmutation (point lp_a, fixed lp_b);
            void gf_ModifyTorchIntensity (int lp_player, fixed lp_amount);
            void gf_ItemCleansingPotion (unit lp_unit, unit lp_item, bool lp_itemUsed);
            void gf_ItemMurlocDoomhammer (unit lp_unit, unit lp_item);
            void gf_ItemGoldenHauberk (unit lp_unit, unit lp_item);
            void gf_ItemShovelDig (unit lp_unit, unit lp_item, bool lp_itemUsed);
            void gf_ItemBearPeltSplit (unit lp_unit, unit lp_item, bool lp_consume);
            void gf_ItemRaiseDead (unit lp_unit, unit lp_item, bool lp_consume);
            void gf_ItemDraughtofDecay (unit lp_unit, unit lp_item, bool lp_consume);
            void gf_ItemDemonward (unit lp_unit, unit lp_item);
            void gf_ItemOrbofDarkness (unit lp_unit, unit lp_item, bool lp_consume);
            void gf_ItemJavelin (unit lp_unit);
            void gf_ItemLiquidatorSpellblade (unit lp_unit);
            void gf_ItemNightcrawler (unit lp_unit, unit lp_item, bool lp_consume);
            void gf_ItemLumberParts (unit lp_unit, unit lp_item);
            void gf_ItemFireworks (unit lp_unit, unit lp_item);
            bool gf_FishingStart (unit lp_unit, point lp_target);
            int gf_FishRegionAtPoint (point lp_point);
            string gf_GetFishReward (unit lp_bobber);
            fixed gf_FishingSpeedModifier (unit lp_unit);
            void gf_BirdScoutLand (unit lp_bird, unit lp_outpost);
            void gf_BirdScoutTakeOff (unit lp_bird, unit lp_outpost);
            void gf_UpdateOutpostVisual (unit lp_hut);
            void gf_UpdateShipmentAvailability (unit lp_unit);
            int gf_GetNumberOfItemsInOutpost (unit lp_outpost);
            void gf_SellResource (unit lp_item, int lp_seller, unit lp_outpost);
            bool gf_BuyResource (unit lp_buyer, string lp_type);
            int gf_GetTradeIncrement (string lp_type);
            int gf_GetSellPrice (string lp_type, int lp_player);
            int gf_GetBuyPrice (string lp_type, int lp_player);
            bool gf_TypeIsTradeGood (string lp_type);
            void gf_UpdateSellPrice (string lp_unitType, fixed lp_amount, int lp_tier);
            void gf_UpdateBuyPrice (string lp_unitType, fixed lp_amount, int lp_tier);
            void gf_NormalizePrices (int lp_player);
            void gf_SendBeaver (unit lp_sourceUnit, point lp_targetPoint, unit lp_targetUnit, string lp_shipmentType, int lp_sendingPlayer);
            void gf_AutofillShipmentSlot (unit lp_outpost, int lp_sendingPlayer, string lp_sendItemType);
            void gf_DropandRemove (unit lp_unit);
            void gf_DropandPickup (unit lp_carrier, unit lp_item);
            void gf_TavernSpawn (unit lp_unit);
            void gf_Gossip (int lp_player, bool lp_bribed);
            bool gf_OutOfGossip (int lp_player);
            int gf_GossipMostGold (playergroup lp_playerGroup);
            int gf_GossipMostWolfKills ();
            int gf_GossipMostBribes (playergroup lp_playerGroup);
            int gf_GossipMostBerries (playergroup lp_playerGroup);
            int gf_GossipMostTreesFelled (playergroup lp_playerGroup);
            int gf_GossipMostSheepsBred (playergroup lp_playerGroup);
            int gf_GossipMostMealsCooked (playergroup lp_playerGroup);
            int gf_GossipMostExp (playergroup lp_playerGroup);
            int gf_GossipMostCrafts (playergroup lp_playerGroup);
            int gf_GossipMostPetTLI (playergroup lp_playerGroup);
            fixed gf_GetPetTLI (int lp_player);
            void gf_UpdateWatchTowerGoldCost (int lp_player);
            void gf_CanteenFood (unit lp_watchTower, unit lp_kobold);
            void gf_WTUpdateTooltip (unit lp_unit);
            void gf_SendBeaverScavenger (int lp_player, point lp_point);
            bool gf_AllLivingTeamsHaveWT ();
            void gf_WatchTowerDefeatTeam (int lp_team);
            void gf_HuntersLodgeSpawn (unit lp_unit);
            int gf_NumberofTrophies (unit lp_unit);
            bool gf_UnitFacingGeneralDirection (unit lp_source, unit lp_target);
            void gf_UpdatePetStats (int lp_player);
            void gf_TameAnimal (unit lp_master, unit lp_animal);
            void gf_ApplyPetBehaviors (unit lp_animal, unit lp_master);
            void gf_AcquirePet (int lp_player, string lp_type);
            void gf_LosePet (unit lp_pet);
            void gf_KoboldDeath (point lp_location, unit lp_dyingUnit, unit lp_killingUnit);
            void gf_SheepDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_WolfDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_DirewolfDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_BearDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_PheasantDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_MurlocDeath (unit lp_dyingUnit);
            void gf_GhoulDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_VeilGuardianDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_UndeadSavageDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_DeathTombGuardian (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_DeathMonstrosity (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_CampfireDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_NightwispDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_StagDeath (unit lp_dyingUnit, unit lp_killingUnit);
            void gf_PostDeathHint (int lp_player, fixed lp_delay);
            void gf_UpdateRezShrine (int lp_player);
            void gf_Resurrecting (unit lp_rezzer, unit lp_shrine, int lp_player, fixed lp_rezzTimes);
            void gf_ResurrectPlayer (int lp_player, unit lp_shrine);
            void gf_SkillBonusesPostMortem (int lp_player);
            void gf_ReincarnatePlayerStart (int lp_player, fixed lp_time);
            void gf_ReincarnatePlayerFinish (int lp_player);
            point gf_DynamicResLocation (int lp_player);
            void gf_Endgame (bool lp_ignoreConditions, bool lp_soloTeamGame);
            bool gf_AllDeadOnTeam (int lp_team, bool lp_messages);
            unitgroup gf_LivingKoboldsOnTeam (int lp_team);
            void gf_EndgameStats (playergroup lp_winningPlayers, playergroup lp_losingPlayers);
            void gf_Turnoffstuff ();
            void gf_ModifyMatchHistory (int lp_player, string lp_char);
            int gf_LastTeamStanding ();
            void gf_DamageText (unit lp_source, unit lp_target, fixed lp_damageAmount, fixed lp_absorbed, string lp_effect);
            int gf_RoundIntegertoEven (int lp_int);
            text gf_DTSuffix (fixed lp_absorbed, text lp_text, bool lp_fatal);
            color gf_GetDamageColor (string lp_effect);
            fixed gf_GetDTDamageDoneAngle (int lp_player);
            fixed gf_GetDTDamageTakenAngle (int lp_player);
            void gf_Quicktag (unit lp_unit, text lp_text, fixed lp_totalDuration, int lp_fontSize);
            void gf_Advancedtag (unit lp_unit, int lp_player, text lp_text, fixed lp_totalDuration, int lp_fontSize);
            void gf_Alltag (unit lp_unit, text lp_text, fixed lp_totalDuration, int lp_fontSize);
            void gf_TextTag (int lp_player, bool lp_queued);
            int gf_TextTagNextIndex (int lp_player, int lp_currentIndex);
            void gf_TextTagIndexWipe (int lp_player, int lp_index);
            void gf_Upyougo (unit lp_unit, fixed lp_force);
            void gf_Charge (unit lp_unit, point lp_target, fixed lp_force);
            void gf_SetScaledStats (string lp_unitType, int lp_player);
            fixed gf_AverageRemainingTeamSize ();
            point gf_WeightedCenterofKobolds ();
            bool gf_UnitIsBusy (unit lp_unit);
            bool gf_UnitExists (unit lp_unit);
            void gf_ResumeSituationalMusic (int lp_player);
            void gf_AITaunt (unit lp_unit);
            void gf_AIDeadnightChat (unit lp_unit);
            void gf_SetupAI (unit lp_unit);
            bool gf_AIEquipment (unit lp_kobold);
            void gf_AIRunWalk (unit lp_kobold);
            bool gf_AIRetreat (unit lp_kobold);
            bool gf_AICombat (unit lp_kobold);
            bool gf_AIQuickwarmth (unit lp_kobold);
            bool gf_AIQuicktree (unit lp_kobold);
            bool gf_AIQuickstone (unit lp_kobold);
            bool gf_AIQuickammo (unit lp_kobold, bool lp_proximityCheck);
            point gf_SmartRetreatPoint (unit lp_kobold, fixed lp_angle);
            unit gf_GetEnemyTarget (unit lp_attacker, unitgroup lp_group);
            fixed gf_MinimumRetreatLife (unit lp_unit);
            bool gf_AIDodgeBossAbilities (unit lp_unit);
            point gf_PointWithoutUnitType (unit lp_origin, fixed lp_radius, string lp_type, fixed lp_typeRadius);
            void gf_DodgeMurlocCharge (unit lp_dodger);
            fixed gf_GroupStamina (unitgroup lp_group);
            bool gf_AIHelpAlly (unit lp_kobold);
            bool gf_AIRepairFortress (unit lp_kobold);
            bool gf_AITakeABreath (unit lp_kobold);
            bool gf_AIEarlyExploring (unit lp_kobold);
            bool gf_AILootFish (unit lp_kobold);
            bool gf_AILootFood (unit lp_kobold);
            bool gf_AILootQuestGear (unit lp_kobold);
            bool gf_AITreasureChests (unit lp_kobold);
            bool gf_AIQuestingImperative (unit lp_kobold);
            bool gf_AIQuestingHighPriority (unit lp_kobold);
            bool gf_AIQuestingNormal (unit lp_kobold);
            bool gf_AIQuestGastronomist (unit lp_kobold);
            bool gf_AIQuestFishing (unit lp_kobold);
            int gf_ClosestFishableExpeditionPoint (unit lp_kobold);
            point gf_FishablePointInRegion (unit lp_unit, region lp_reg);
            bool gf_AICampfire (unit lp_kobold, fixed lp_warmth, unit lp_shrine, bool lp_toCook);
            bool gf_AIFood (unit lp_kobold, bool lp_stock, fixed lp_hunger, bool lp_whileWarming);
            bool gf_AIFoodSnack (unit lp_kobold);
            bool gf_AIStamina (unit lp_kobold);
            bool gf_AITradeSellStore (unit lp_kobold);
            bool gf_AITradeBuyWithdraw (unit lp_kobold, string lp_type, int lp_limit, bool lp_ignoreRichRequirement, bool lp_withdrawToSell, fixed lp_radius);
            void gf_AIBirdScout (int lp_player, unit lp_outpost);
            bool gf_AIBuildStructure (unit lp_kobold, abilcmd lp_order, string lp_nearStructureType);
            point gf_GetBuildLocation2x2 (region lp_region);
            point gf_GetBuildLocation3x3 (region lp_region);
            point gf_GetBuildLocation4x4 (region lp_region);
            bool gf_StructurePathable2x2 (point lp_point);
            bool gf_StructurePathable3x3 (point lp_point);
            bool gf_StructurePathable4x4 (point lp_point);
            string gf_WantedItemType (unit lp_kobold, string lp_craftingStation);
            bool gf_HasMaterialsFor (unit lp_builder, string lp_unitType);
            bool gf_AIWatchTower (unit lp_kobold);
            bool gf_AISmithy (unit lp_kobold, string lp_wantedItem);
            bool gf_AIWorkbench (unit lp_kobold, string lp_wantedItem);
            bool gf_AISheep (unit lp_kobold);
            bool gf_AIPhez (unit lp_kobold);
            bool gf_AITrees (unit lp_kobold, int lp_priority);
            bool gf_AIStone (unit lp_kobold, int lp_priority);
            bool gf_AIGold (unit lp_kobold);
            bool gf_AIWolves (unit lp_kobold);
            bool gf_AIResurrect (unit lp_kobold);
            bool gf_AIBerries (unit lp_kobold);
            bool gf_AIHerbs (unit lp_kobold, int lp_priority);
            bool gf_AIStags (unit lp_kobold);
            bool gf_AINightwisp (unit lp_kobold);
            bool gf_AIMurlocs (unit lp_kobold);
            bool gf_AITraps (unit lp_kobold);
            bool gf_AIADT (unit lp_kobold);
            bool gf_FindPickupItem (unit lp_unit, string lp_type);
            void gf_UpdateSupplies (int lp_player);
            bool gf_WantRawLamb (unit lp_unit);
            bool gf_WantRawWolf (unit lp_unit);
            bool gf_WantRawBird (unit lp_unit);
            bool gf_WantRawStag (unit lp_unit);
            bool gf_AIGatherCandles (unit lp_kobold);
            bool gf_PathableMaximum (unit lp_unit, point lp_point, int lp_maximum);
            bool gf_AIStorageCleaning (unit lp_kobold);
            region gf_WeightedInterestRegion (unit lp_kobold, fixed lp_radius);
            bool gf_AITavern (unit lp_kobold);
            void gf_AITavernInteract (unit lp_kobold, unit lp_tavern, int lp_desiredService);
            int gf_AITavernWishlist (int lp_player);
            bool gf_AIHuntersLodge (unit lp_kobold);
            void gf_AIHuntardLodgeInteract (unit lp_kobold, unit lp_huntersLodge, int lp_desiredService);
            int gf_AIHuntersLodgeWishlist (int lp_player);
            unitgroup gf_UnitsInUnitGroupWithoutBuff (unitgroup lp_group, string lp_buff);
            unitgroup gf_UnitsInUnitGroupWithBuff (unitgroup lp_group, string lp_buff);
            unitgroup gf_UnitsInUnitGroupWithLife (unitgroup lp_group, fixed lp_life);
            unitgroup gf_GetEnemiesNearPoint (point lp_point, int lp_player, fixed lp_radius, bool lp_visible);
            unitgroup gf_GetAlliesNearPoint (point lp_point, int lp_player, fixed lp_radius);
            unitgroup gf_GetNearbyEnemiesNoStructures (unit lp_unit);
            unitgroup gf_GetNearbyDirewolves (unit lp_unit);
            unit gf_GetClosestResurrectionShrine (unit lp_unit, bool lp_allowNearbyEnemies);
            int gf_GetRandomDeadPlayerOnTeam (int lp_team);
            fixed gf_EvaluateThreat (unit lp_unit);
            bool gf_AIBringItemToUnit (unit lp_kobold, unit lp_item, unit lp_target);
            bool gf_AICanCastSpell (unit lp_kobold, abilcmd lp_ability);
            bool gf_Allowedtopickup (unit lp_kobold, unit lp_item);
            bool gf_StrongerThanDirewolves (unit lp_unit);
            bool gf_StrongestOnTeam (unit lp_unit);
            void gf_PlayerUseUnitAbility (int lp_player, unit lp_unit, abilcmd lp_ability);
            bool gf_OthersSelectingUnit (unit lp_unit, int lp_player);
            void gf_AIExcessItems (unit lp_kobold);
            int gf_GetExcessLimit (unit lp_unit);
            void gf_AISpendSkillPoints (int lp_player);
            int gf_GetInteger15 (int lp_exception1, int lp_exception2, int lp_exception3, int lp_exception4);
            void gf_AICustomization (int lp_player);
            void gf_SetAIName (int lp_player);
            bool gf_AIDiggyHole (unit lp_kobold);
            string gf_AIPerks (int lp_player, int lp_points);
            void gf_AllAIsShareControlwithAllies ();
            point gf_GetDropoffLocation (unit lp_murloc);
            unit gf_GetMurlocFocalNode (unit lp_murloc);
            void gf_SetMurlocFocalNode (unit lp_murloc, unit lp_node);
            void gf_MurlocResetOrders (unit lp_unit);
            void gf_DropAllItems (unit lp_unit);
            void gf_DropItems (unit lp_unit, unitgroup lp_items);
            void gf_ShowTutorialText (int lp_index);
            void gf_InGameHint (string lp_hint, int lp_player);
            void gf_UnstuckNudge (unit lp_kobold);
            void gf_AdminSetup (int lp_player);
            void gf_ModifyKoboldStats(unit kobold, int statType, fixed amt, int operType);
            void gf_ModifyKoboldSkills(unit kobold, int skillType, int amt, int operType); 
            void gf_MurlocSkin(unit murloc, int skinType);
            void gf_KoboldSkin(unit kobold, int skinType);
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F5292B3B">
        <ScriptCode>
            trigger gt_PreInitialization;
            trigger gt_Initialization;
            trigger gt_FadeIn;
            trigger gt_InitializeText;
            trigger gt_InitializeDialogs;
            trigger gt_InitializeEnvironment;
            trigger gt_InitializeAddon;
            trigger gt_StartHint;
            trigger gt_StartPatch;
            trigger gt_TheBigPeriod;
            trigger gt_InitializeTeams;
            trigger gt_StaminaWake;
            trigger gt_SyncBanks;
            trigger gt_LoadBank;
            trigger gt_InitializePerks;
            trigger gt_InitializePerkImages;
            trigger gt_InitializePerkTooltips;
            trigger gt_ShowPerkWindow;
            trigger gt_SelectPerk;
            trigger gt_GoodHostSpawn;
            trigger gt_SetupPGSWindow;
            trigger gt_ShowPGSWindow;
            trigger gt_SetupRewardData;
            trigger gt_SetupRewardsDialog;
            trigger gt_RewardsDialogInteract;
            trigger gt_AfflictionTrigger;
            trigger gt_AristocratFail;
            trigger gt_HunterRequirement;
            trigger gt_CollectorRequirement;
            trigger gt_SlavemasterRequirement;
            trigger gt_SpecialRewardsList;
            trigger gt_ReprimandedListInfo;
            trigger gt_QuestTimer;
            trigger gt_QuestTimerUpdate;
            trigger gt_ChiefExpire;
            trigger gt_ChiefCharge;
            trigger gt_ChiefEnrage;
            trigger gt_ChiefDerage;
            trigger gt_TreasureExpire;
            trigger gt_Retrieved;
            trigger gt_RetrieveExpire;
            trigger gt_PlantEnd;
            trigger gt_PlantUpdateBuff;
            trigger gt_FeastExpire;
            trigger gt_FeastTutelageOn;
            trigger gt_FeastTutelageOff;
            trigger gt_GladiatorEndPhase1;
            trigger gt_GladiatorCrowd;
            trigger gt_GladiatorFind;
            trigger gt_EnterArena;
            trigger gt_LeaveArena;
            trigger gt_BlinkStalker;
            trigger gt_WarlordExpire;
            trigger gt_WarlordBlades;
            trigger gt_TrollGroundSpikesStart;
            trigger gt_TrollGroundSpikesSeek;
            trigger gt_TrollGroundSpikesSpring;
            trigger gt_TrollGroundSpikesSink;
            trigger gt_TrollGroundSpikesKnock;
            trigger gt_TruffleFind;
            trigger gt_TruffleEnd;
            trigger gt_LightsOut;
            trigger gt_PermafrostStart;
            trigger gt_PermafrostDrain;
            trigger gt_PiratesExpire;
            trigger gt_WizardExpire;
            trigger gt_BuilderExpire;
            trigger gt_BuilderFinish;
            trigger gt_ExileDefendVictory;
            trigger gt_ExileAttackVictory;
            trigger gt_ExileTransfer;
            trigger gt_VeilExpire;
            trigger gt_VeilSpawnGuardian;
            trigger gt_VeilShrineInvestigate;
            trigger gt_VeilShrinePreview;
            trigger gt_VeilEnergizedStart;
            trigger gt_VeilEnergizedEnd;
            trigger gt_VeilShrineExpire;
            trigger gt_VeilEndPrematurely;
            trigger gt_VeilofDarknessCont;
            trigger gt_VeilofDarknessEnd;
            trigger gt_ExpeditionData;
            trigger gt_ExpeditionExpire;
            trigger gt_DLJRHint1;
            trigger gt_DLJRHint2;
            trigger gt_DLJRSummon;
            trigger gt_DLJRFirestorm;
            trigger gt_DLJRRocks;
            trigger gt_DLJRMinions;
            trigger gt_DLJRTether;
            trigger gt_DLJRDemonicGrowth;
            trigger gt_RABHint;
            trigger gt_RABSummoningStart;
            trigger gt_RABSummoningCancel;
            trigger gt_RABSummoningFinish;
            trigger gt_ArcaneEruptionStart;
            trigger gt_ArcaneEruptionTrigger;
            trigger gt_AnnihilateTrigger;
            trigger gt_LightningCloudWander;
            trigger gt_UnstableAnomalySpawner;
            trigger gt_UnstableAnomalyDescent;
            trigger gt_RABKill;
            trigger gt_ShowSkillWindow;
            trigger gt_LevelUp;
            trigger gt_SpendSkillPoint;
            trigger gt_ArtisanRepair;
            trigger gt_DetectSmoke;
            trigger gt_DetectGold;
            trigger gt_DetectWolvesBears;
            trigger gt_Salvage;
            trigger gt_AdrenalineRushTimer;
            trigger gt_AdrenalineRushOn;
            trigger gt_LearnNaturesGrace;
            trigger gt_LearnMineralTap;
            trigger gt_LearnClairvoyance;
            trigger gt_LearnFrostArmor;
            trigger gt_LearnSiphonLife;
            trigger gt_LearnAffliction;
            trigger gt_LearnShadowCloak;
            trigger gt_LearnGuardianSpirit;
            trigger gt_NaturesGrace;
            trigger gt_MineralTap;
            trigger gt_Clairvoyance;
            trigger gt_FrostArmorCast;
            trigger gt_FrostArmorExtend;
            trigger gt_SiphonLifeInitial;
            trigger gt_SiphonLifeTrigger;
            trigger gt_AfflictionInitial;
            trigger gt_AfflictionDrain;
            trigger gt_ShadowCloakInitial;
            trigger gt_ShadowCloakEnd;
            trigger gt_GuardianSpiritInitial;
            trigger gt_GuardianSpiritTrigger;
            trigger gt_GuardianSpiritLingeringTrigger;
            trigger gt_WhirlwindRotate;
            trigger gt_SpellAbsorb;
            trigger gt_InitializeDayTimerDialog;
            trigger gt_LanternTrigger;
            trigger gt_WolfsbanePassive;
            trigger gt_CoiffureCareCounter;
            trigger gt_StagEvasion;
            trigger gt_GainResource;
            trigger gt_LoseResource;
            trigger gt_TreeLoot;
            trigger gt_UpdateGold;
            trigger gt_BushGrowTrigger;
            trigger gt_StopGatheringImmediately;
            trigger gt_GatherStart;
            trigger gt_GatherProgress;
            trigger gt_BuildingSpawned;
            trigger gt_ConstructionStart;
            trigger gt_ConstructionStop;
            trigger gt_BuildingFinish;
            trigger gt_StructureDeath;
            trigger gt_KoboldBuildFacing;
            trigger gt_SpringSpikeTrap;
            trigger gt_SpikeTrapDepleted;
            trigger gt_SharpenSpike;
            trigger gt_SpikeTrapPadding;
            trigger gt_PlantTree;
            trigger gt_GrowTree;
            trigger gt_FinishTree;
            trigger gt_LightCampfire;
            trigger gt_LightCampfireSelect;
            trigger gt_UnitSelected;
            trigger gt_RefreshCampfire;
            trigger gt_RefreshCampfireExpert;
            trigger gt_ADTLaunch;
            trigger gt_ADTRefil;
            trigger gt_PalisadeGateCreate;
            trigger gt_FastFood;
            trigger gt_RoastedLamb;
            trigger gt_SpicedLambFeast;
            trigger gt_SmokedLambSirloin;
            trigger gt_RoastedPheasant;
            trigger gt_BeerBraisedPheasant;
            trigger gt_WolfSteak;
            trigger gt_GrilledWolfEntrecote;
            trigger gt_StagStew;
            trigger gt_CleansingDraught;
            trigger gt_WellFedEnduranceInit;
            trigger gt_WellFedEnduranceExp;
            trigger gt_WellFedStrengthInit;
            trigger gt_WellFedStrengthExp;
            trigger gt_WellFedDexInit;
            trigger gt_WellFedDexExp;
            trigger gt_WellFedBeerInit;
            trigger gt_WellFedBeerExp;
            trigger gt_UnlivingStrengthInit;
            trigger gt_UnlivingStrengthExp;
            trigger gt_HappyChefInit;
            trigger gt_HappyChefExp;
            trigger gt_WorkbenchWarmWoolTunic;
            trigger gt_WorkbenchLeatherCoat;
            trigger gt_WorkbenchSturdyWoodenStick;
            trigger gt_WorkbenchMysticsTribalShield;
            trigger gt_WorkbenchLantern;
            trigger gt_WorkbenchBlunderbuss;
            trigger gt_WorkbenchVengefulMurlocSkull;
            trigger gt_WorkbenchElderWand;
            trigger gt_WorkbenchEnigmaticStaff;
            trigger gt_WorkbenchHuntsmansJacket;
            trigger gt_WorkbenchVenomousArbalest;
            trigger gt_WorkbenchBearShamansShroud;
            trigger gt_WorkbenchLightLeatherShield;
            trigger gt_WorkbenchCelestialOrb;
            trigger gt_WorkbenchWarlocksVestments;
            trigger gt_WorkbenchHighRangersChainmail;
            trigger gt_WorkbenchGravesingersClaw;
            trigger gt_WorkbenchRepeatingCrossbow;
            trigger gt_WorkbenchStormwizardsRobes;
            trigger gt_WorkbenchTrebuchet;
            trigger gt_WorkbenchIronbarkArmor;
            trigger gt_SmithyHeavyIronBreastplate;
            trigger gt_SmithySharpIronPickaxe;
            trigger gt_SmithyGleamingSpear;
            trigger gt_SmithyBattleAxe;
            trigger gt_SmithyIronBandedBuckler;
            trigger gt_SmithyHeavyTowerShield;
            trigger gt_SmithyWolfsbane;
            trigger gt_SmithyDreadplateArmor;
            trigger gt_SmithyIronStuddedVest;
            trigger gt_SmithyIronShovel;
            trigger gt_SmithyOutlandishHeartpiercer;
            trigger gt_SmithyGoldenHauberk;
            trigger gt_SmithyJudgmentGavel;
            trigger gt_SmithyViciousJavelin;
            trigger gt_SmithyDemonward;
            trigger gt_SmithyLiquidatorSpellblade;
            trigger gt_SmithyTwinThrowingAxes;
            trigger gt_HuntersLodgeObedienceRod;
            trigger gt_HuntersLodgeSleepingBag;
            trigger gt_HuntersLodgeFishingRod;
            trigger gt_UpdateStatsTrigger;
            trigger gt_BuffMainStat;
            trigger gt_TemporaryBuffs;
            trigger gt_ItemSets;
            trigger gt_TriggeredAttackEffects;
            trigger gt_DamageTrigger;
            trigger gt_GenericUseItem;
            trigger gt_EquipmentGain;
            trigger gt_EquipmentMoveIn;
            trigger gt_EquipmentMoveOut;
            trigger gt_EquipmentLose;
            trigger gt_ScutumJoy;
            trigger gt_SleepingBag;
            trigger gt_BlunderbussCounter;
            trigger gt_WandProcDmg;
            trigger gt_ReapersHandCombine;
            trigger gt_HeavyTowerShieldTrg;
            trigger gt_FearTrigger;
            trigger gt_BloodthirstyGreed;
            trigger gt_ScrollofTransmutation;
            trigger gt_MurlocSkullFragments;
            trigger gt_FelFlamesTrigger;
            trigger gt_BloodcleaverDamage;
            trigger gt_BloodcleaverDrain;
            trigger gt_FrostNeedleTransform;
            trigger gt_FrostBarrierTransform;
            trigger gt_ScutumBlock;
            trigger gt_BucklerBlock;
            trigger gt_GoldenHauberkHeal;
            trigger gt_LightLeatherShieldTrigger;
            trigger gt_CelestialOrbHeal;
            trigger gt_JavelinDummyCooldown;
            trigger gt_LiquidatorSpellblade;
            trigger gt_GravesingerGhoulSpawn;
            trigger gt_MurlocketOn;
            trigger gt_MurlocketOff;
            trigger gt_TwinThrowingAxesFrenzy;
            trigger gt_SetupFishData;
            trigger gt_FishingRodUse;
            trigger gt_FishingTargetBob;
            trigger gt_FishingSuccess;
            trigger gt_BirdScoutFindOutpost;
            trigger gt_BirdScoutTameBird;
            trigger gt_BirdScoutLockOn;
            trigger gt_BirdScoutStalk;
            trigger gt_BirdScoutExpire;
            trigger gt_BirdScoutShooBirds;
            trigger gt_StorageMove;
            trigger gt_SellLumber;
            trigger gt_SellStone;
            trigger gt_SellWool;
            trigger gt_SellLeather;
            trigger gt_SellIronOre;
            trigger gt_SellShadowstone;
            trigger gt_SellInfusedLumber;
            trigger gt_SellRadiantGem;
            trigger gt_BuyLumber;
            trigger gt_BuyStone;
            trigger gt_BuyWool;
            trigger gt_BuyLeather;
            trigger gt_BuyIronOre;
            trigger gt_BuyShadowstone;
            trigger gt_BuyInfusedLumber;
            trigger gt_BuyRadiantGem;
            trigger gt_LockOutpost;
            trigger gt_UnlockOutpost;
            trigger gt_StorageHutCaravanStart;
            trigger gt_ShipmentArrived;
            trigger gt_DomesticatedSheep;
            trigger gt_SheepLeash;
            trigger gt_FarmSpawn;
            trigger gt_FowlBait;
            trigger gt_FowlMove;
            trigger gt_BuySpellBook;
            trigger gt_BuyScrollofTransmutation;
            trigger gt_BuyBeer;
            trigger gt_BuyRoastedLamb;
            trigger gt_BuyGossip;
            trigger gt_HireMurlocSlave;
            trigger gt_EquipMurloc;
            trigger gt_BuyNightwisp;
            trigger gt_Synergy;
            trigger gt_TrebuchetLoadStone;
            trigger gt_PackTrebuchet;
            trigger gt_WTStructuralReinforcement;
            trigger gt_WTInfirmary;
            trigger gt_WTBarracks;
            trigger gt_WTStorage;
            trigger gt_WTCanteen;
            trigger gt_WTLookout;
            trigger gt_WTBallista;
            trigger gt_WTGroundskeeper;
            trigger gt_WTGroundskeeperTrap;
            trigger gt_WTRefillAmmo;
            trigger gt_WTUseAmmo;
            trigger gt_WTMurlocMilitia;
            trigger gt_WTMurlocMilitiaIntel;
            trigger gt_WTCalltoArms;
            trigger gt_WTWarHorn;
            trigger gt_WTTunnelerCrew;
            trigger gt_WTTunnelerCrewProduce;
            trigger gt_WTArmory;
            trigger gt_WTArcaneSanctum;
            trigger gt_WTBeaverPen;
            trigger gt_WTMunitionsSquad;
            trigger gt_WTMunitionsSquadADTs;
            trigger gt_WTAttackedAlert;
            trigger gt_WTDamagedAlert;
            trigger gt_WTUnloadAutoSelect;
            trigger gt_WatchTowerTimerStart;
            trigger gt_WatchTowerTimerLoop;
            trigger gt_WatchTowerTimerExpire;
            trigger gt_FortressShareVision;
            trigger gt_FortressUnshareVision;
            trigger gt_FortressBeaverScavengerTrigger;
            trigger gt_GiveAllItemsToTarget;
            trigger gt_TamedAITrigger;
            trigger gt_TamedApply;
            trigger gt_LearnThickHide;
            trigger gt_LearnNaturalTenacity;
            trigger gt_LearnViciousness;
            trigger gt_LearnInspirationalMaster;
            trigger gt_LearnPredatoryKnowledge;
            trigger gt_LearnCompanionship;
            trigger gt_PredatoryKnowledge;
            trigger gt_WhiteBearFangCollect;
            trigger gt_WhiteBearFangExpire;
            trigger gt_BoneTalismanCollect;
            trigger gt_BoneTalismanExpire;
            trigger gt_TrollNoseBoneCollect;
            trigger gt_TrollNoseBoneExpire;
            trigger gt_AntlersCollect;
            trigger gt_AntlersExpire;
            trigger gt_AnyUnitDies;
            trigger gt_ObservationRequest;
            trigger gt_ObservationAnswer;
            trigger gt_InteractRezShrine;
            trigger gt_DeselectRezShrine;
            trigger gt_ClickRezzBTN;
            trigger gt_ReincarnatePlayerFinish001;
            trigger gt_ReincarnatePlayerFinish002;
            trigger gt_ReincarnatePlayerFinish003;
            trigger gt_ReincarnatePlayerFinish004;
            trigger gt_ReincarnatePlayerFinish005;
            trigger gt_ReincarnatePlayerFinish006;
            trigger gt_ReincarnatePlayerFinish007;
            trigger gt_ReincarnatePlayerFinish008;
            trigger gt_ReincarnatePlayerFinish009;
            trigger gt_ReincarnatePlayerFinish010;
            trigger gt_ReincarnatePlayerFinish011;
            trigger gt_ReincarnatePlayerFinish012;
            trigger gt_ReincarnatePlayerFinish013;
            trigger gt_ReincarnatePlayerFinish014;
            trigger gt_ReincarnatePlayerFinish015;
            trigger gt_PlayerLeaves;
            trigger gt_RemoveRecentlyDamaged;
            trigger gt_DTConfigShow;
            trigger gt_DTConfigSetup;
            trigger gt_DTSliderChange;
            trigger gt_DTSaveClose;
            trigger gt_TextTagQueueTrigger;
            trigger gt_Memory;
            trigger gt_FireWardTrigger;
            trigger gt_HuntKobolds;
            trigger gt_LightTorch;
            trigger gt_TorchFade;
            trigger gt_CowardlyArcher;
            trigger gt_AnyUnitSelected;
            trigger gt_SetupAIChatStrings;
            trigger gt_AIMainThread;
            trigger gt_AIHelperEnemyStart;
            trigger gt_AIHelperEnemyEnd;
            trigger gt_AIRecentCombatExpire;
            trigger gt_AIBuildPlacement;
            trigger gt_AISelectionDisable;
            trigger gt_AISelectionEnable;
            trigger gt_NonAIinCombatStart;
            trigger gt_NonAIinCombatEnd;
            trigger gt_MurlocSlaveEnd;
            trigger gt_MurlocAction;
            trigger gt_MurlocOrderStop;
            trigger gt_MurlocOrderDrop;
            trigger gt_MurlocOrderReturn;
            trigger gt_MurlocOrderMineStone;
            trigger gt_MurlocOrderMineGold;
            trigger gt_MurlocOrderGatherLumber;
            trigger gt_MurlocOrderPickBerries;
            trigger gt_MurlocOrderPickHerbs;
            trigger gt_MurlocOrderChef;
            trigger gt_MurlocDropoffPoint;
            trigger gt_SetupTutorial1;
            trigger gt_SetupTutorial2;
            trigger gt_TutorialPart1;
            trigger gt_TutorialPart2;
            trigger gt_TutorialPart3;
            trigger gt_TutorialPart4;
            trigger gt_TutorialPart5;
            trigger gt_TutorialPart55;
            trigger gt_TutorialPart6;
            trigger gt_TutorialPart7;
            trigger gt_TutorialPart8;
            trigger gt_TutorialPart9;
            trigger gt_TutorialPart10;
            trigger gt_TutorialPart11;
            trigger gt_TutorialPart12;
            trigger gt_TutorialPart13;
            trigger gt_InGameHintsOff;
            trigger gt_InGameHintsSelection;
            trigger gt_Nudge;
            trigger gt_AFKafk;
            trigger gt_ah_PlayerList;
            trigger gt_ah_LevelBoost;
            trigger gt_ah_ConquestPoints;
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="C003DBA8">
        <Item Type="Category" Id="4E320F21"/>
        <Item Type="Category" Id="A3E44692"/>
        <Item Type="Category" Id="CFEF9348"/>
        <Item Type="Category" Id="38ADF337"/>
        <Item Type="Category" Id="2E293C1A"/>
        <Item Type="Category" Id="CD0BDBE8"/>
        <Item Type="Category" Id="EAD088F3"/>
        <Item Type="Category" Id="93B8FA4A"/>
        <Item Type="Category" Id="715109FF"/>
        <Item Type="Category" Id="7DCBC655"/>
        <Item Type="Category" Id="32F05AC1"/>
        <Item Type="Category" Id="204F004F"/>
        <Item Type="Category" Id="09AF6F38"/>
        <Item Type="Category" Id="72EE1C4C"/>
        <Item Type="Category" Id="C56B2ECA"/>
        <Item Type="Category" Id="F9D614E8"/>
        <Item Type="Category" Id="7F1BE74C"/>
        <Item Type="Category" Id="9205A157"/>
        <Item Type="Category" Id="871B2FDC"/>
        <Item Type="Category" Id="3635DB28"/>
        <Item Type="Category" Id="7BF315FF"/>
        <Item Type="Category" Id="E477B158"/>
        <Item Type="Category" Id="B266D895"/>
        <Item Type="Category" Id="0CAE117E"/>
        <Item Type="Category" Id="6B7AE7C5"/>
        <Item Type="Category" Id="5621422B"/>
        <Item Type="Category" Id="A9822A37"/>
    </Element>
    <Element Type="Category" Id="4E320F21">
        <Item Type="CustomScript" Id="E466050B"/>
        <Item Type="CustomScript" Id="5704BFD7"/>
        <Item Type="CustomScript" Id="1EF0622E"/>
        <Item Type="CustomScript" Id="300E0E71"/>
    </Element>
    <Element Type="CustomScript" Id="E466050B">
        <ScriptCode>
            void gf_SetupPerkBonusi (unit lp_unit, bool lp_resurrected) {
                // Variable Declarations
                int lv_i;
                fixed lv_temp;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((lp_resurrected == false) &amp;&amp; (StringSub(gv_perks[lv_i], 1, 1) == &quot;1&quot;)) {
                    gv_skillPointsPlayer[lv_i] += 2;
                }
                else {
                }
                if ((lp_resurrected == false) &amp;&amp; (StringSub(gv_perks[lv_i], 5, 5) == &quot;1&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BeerCost&quot;, &quot;Amount&quot;, lv_i, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;BeerCost&quot;, &quot;Amount&quot;, lv_i)) - 1.0), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RoastedLambCost&quot;, &quot;Amount&quot;, lv_i, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;RoastedLambCost&quot;, &quot;Amount&quot;, lv_i)) - 1.0), 0));
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 8, 8) == &quot;1&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lv_i, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lv_i)) + 1.0), 0));
                }
                else {
                }
                if ((lp_resurrected == false) &amp;&amp; (StringSub(gv_perks[lv_i], 12, 12) == &quot;1&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MurlocSlaveCost&quot;, &quot;Amount&quot;, lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MurlocSlaveCost&quot;, &quot;Amount&quot;, lv_i, FixedToString((lv_temp - 5.0), 0));
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 16, 16) == &quot;1&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_temp + 1.0), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString((lv_temp + 1.0), 0));
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 17, 17) == &quot;1&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString((lv_temp + 2.0), 0));
                }
                else {
                }
                if ((lp_resurrected == false) &amp;&amp; (StringSub(gv_perks[lv_i], 18, 18) == &quot;1&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TorchStats&quot;, &quot;Amount&quot;, lv_i, FixedToString(150.0, 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TorchStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString(3.0, 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TorchStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString(3.0, 0));
                }
                else {
                }
                if ((lp_resurrected == false) &amp;&amp; (StringSub(gv_perks[lv_i], 29, 29) == &quot;1&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_temp + 0.04), 2));
                }
                else {
                }
                gf_ApplyKoboldBehaviors(lp_unit);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5704BFD7">
        <ScriptCode>
            void gf_SetupStartingSpells (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((StringSub(gv_perks[lv_i], 32, 32) == &quot;0&quot;) &amp;&amp; (StringSub(gv_learnedSpellsString[lv_i], 1, 1) == &quot;0&quot;)) {
                    UnitAbilityEnable(lp_unit, &quot;NaturesGrace&quot;, false);
                }
                else {
                    gf_LearnSpell(1, lv_i);
                }
                if ((StringSub(gv_perks[lv_i], 33, 33) == &quot;0&quot;) &amp;&amp; (StringSub(gv_learnedSpellsString[lv_i], 2, 2) == &quot;0&quot;)) {
                    UnitAbilityEnable(lp_unit, &quot;MineralTap&quot;, false);
                }
                else {
                    gf_LearnSpell(2, lv_i);
                }
                if ((StringSub(gv_learnedSpellsString[lv_i], 3, 3) == &quot;0&quot;)) {
                    UnitAbilityEnable(lp_unit, &quot;Clairvoyance&quot;, false);
                }
                else {
                    gf_LearnSpell(3, lv_i);
                }
                if ((StringSub(gv_learnedSpellsString[lv_i], 4, 4) == &quot;0&quot;)) {
                    UnitAbilityEnable(lp_unit, &quot;FrostArmor&quot;, false);
                }
                else {
                    gf_LearnSpell(4, lv_i);
                }
                if ((StringSub(gv_learnedSpellsString[lv_i], 5, 5) == &quot;0&quot;)) {
                    UnitAbilityEnable(lp_unit, &quot;SiphonLife&quot;, false);
                }
                else {
                    gf_LearnSpell(5, lv_i);
                }
                if ((StringSub(gv_learnedSpellsString[lv_i], 6, 6) == &quot;0&quot;)) {
                    UnitAbilityEnable(lp_unit, &quot;Affliction&quot;, false);
                }
                else {
                    gf_LearnSpell(6, lv_i);
                }
                if ((StringSub(gv_learnedSpellsString[lv_i], 7, 7) == &quot;0&quot;)) {
                    UnitAbilityEnable(lp_unit, &quot;ShadowCloak&quot;, false);
                }
                else {
                    gf_LearnSpell(7, lv_i);
                }
                if ((StringSub(gv_learnedSpellsString[lv_i], 8, 8) == &quot;0&quot;)) {
                    UnitAbilityEnable(lp_unit, &quot;GuardianSpirit&quot;, false);
                }
                else {
                    gf_LearnSpell(8, lv_i);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1EF0622E">
        <ScriptCode>
            void gf_SetupStartingItems (unit lp_unit, bool lp_resurrected) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((gv_tutorial == false)) {
                    if ((StringSub(gv_perks[lv_i], 13, 13) == &quot;1&quot;)) {
                        gf_CreateItemForUnit(lp_unit, &quot;SpellBook&quot;, 1);
                    }
                    else {
                    }
                    gf_CreateItemForUnit(lp_unit, &quot;Lumber&quot;, (1 + BoolToInt((StringSub(gv_perks[lv_i], 11, 11) == &quot;1&quot;))));
                    gf_CreateItemForUnit(lp_unit, &quot;Stone&quot;, 1);
                    if ((StringSub(gv_perks[lv_i], 22, 22) == &quot;1&quot;)) {
                        gf_CreateItemForUnit(lp_unit, &quot;IronOre&quot;, 1);
                    }
                    else {
                    }
                    if ((StringSub(gv_perks[lv_i], 23, 23) == &quot;1&quot;)) {
                        gf_CreateItemForUnit(lp_unit, &quot;Leather&quot;, 1);
                    }
                    else {
                    }
                    if ((StringSub(gv_perks[lv_i], 15, 15) == &quot;1&quot;)) {
                        gf_CreateItemForUnit(lp_unit, &quot;Wool&quot;, 1);
                    }
                    else {
                    }
                    gf_CreateItemForUnit(lp_unit, &quot;RawLamb&quot;, 1);
                    if ((StringSub(gv_perks[lv_i], 31, 31) == &quot;1&quot;)) {
                        gf_CreateItemForUnit(lp_unit, &quot;HandfulofBerries&quot;, 2);
                        gf_CreateItemForUnit(lp_unit, &quot;SpicyHerbs&quot;, 1);
                    }
                    else {
                    }
                    if ((StringSub(gv_perks[lv_i], 21, 21) == &quot;1&quot;) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArmory == false)) {
                        gf_CreateItemForUnit(lp_unit, &quot;DullPickaxe&quot;, 1);
                    }
                    else {
                    }
                    if ((lp_resurrected == false) &amp;&amp; (gv_activeTeams &gt; 2) &amp;&amp; (gv_gameMode == 1)) {
                        gf_CreateItemForUnit(lp_unit, &quot;Candle&quot;, 1);
                    }
                    else {
                    }
                    if ((gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArmory == true)) {
                        gf_CreateItemForUnit(lp_unit, &quot;CommonSword&quot;, 1);
                        gf_CreateItemForUnit(lp_unit, &quot;CommonBuckler&quot;, 1);
                        gf_CreateItemForUnit(lp_unit, &quot;CommonArmor&quot;, 1);
                    }
                    else {
                    }
                    UnitInventoryContainerOpen(PlayerGroupSingle(lv_i), lp_unit, gv_backpackSlot, true);
                    if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &lt; gv_startingGold)) {
                        PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSetTo, gv_startingGold);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="300E0E71">
        <ScriptCode>
            void gf_SetKoboldDefault (int lp_player) {
                // Implementation
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(20.0, 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString(18.0, 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString(25.0, 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(20.0, 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString(18.0, 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(0.0, 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;Sight&quot;, lp_player, FixedToString(12.0, 0));
                gv_playerData[lp_player].lv_stats.lv_sightRadius = 12.0;
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;GladiatorsStrength&quot;, &quot;Amount&quot;, lp_player, FixedToString(0.0, 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Psionic]&quot;, lp_player, FixedToString(0.0, 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;LeechFraction[Energy]&quot;, lp_player, FixedToString(0.0, 2));
                gv_playerData[lp_player].lv_equippedMainHandG = UnitGroupEmpty();
                gv_playerData[lp_player].lv_equippedOffhandG = UnitGroupEmpty();
                gv_playerData[lp_player].lv_equippedArmorG = UnitGroupEmpty();
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="A3E44692">
        <Item Type="CustomScript" Id="0310AB11"/>
        <Item Type="CustomScript" Id="DB2F6B8D"/>
        <Item Type="CustomScript" Id="BF45E630"/>
        <Item Type="CustomScript" Id="5D00BFE5"/>
        <Item Type="CustomScript" Id="34ED8C59"/>
        <Item Type="CustomScript" Id="97088A7C"/>
        <Item Type="CustomScript" Id="1FEC0BAA"/>
        <Item Type="CustomScript" Id="FCF2BD58"/>
        <Item Type="CustomScript" Id="DBF21478"/>
        <Item Type="CustomScript" Id="2E244691"/>
        <Item Type="CustomScript" Id="968FB691"/>
    </Element>
    <Element Type="CustomScript" Id="0310AB11">
        <ScriptCode>
            void gf_KoboldHealthStatus (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                fixed lv_warmthDrainFactorGeneric;
                fixed lv_hungerDrainFactorGeneric;
                fixed lv_staminaDrainFactorGeneric;
                fixed lv_staminaDrainFactorMining;
                fixed lv_staminaRegenFactorGeneric;
                fixed lv_deltaWarmth;
                fixed lv_deltaHunger;
                fixed lv_staminaPLUS;
                fixed lv_staminaMINUS;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_warmthDrainFactorGeneric = gf_WarmthDrainFactorGeneric(lp_kobold);
                lv_hungerDrainFactorGeneric = gf_HungerDrainFactorGeneric(lp_kobold);
                lv_staminaDrainFactorGeneric = gf_StaminaDrainFactorGeneric(lp_kobold);
                lv_staminaDrainFactorMining = gf_StaminaDrainFactorMining(lp_kobold);
                lv_staminaRegenFactorGeneric = gf_StaminaRegenFactorGeneric(lp_kobold);
                // Implementation
                if ((UnitHasBehavior(lp_kobold, &quot;FrostArmor&quot;) == true)) {
                    lv_deltaWarmth -= (1.0 * gv_periodInterval);
                }
                else {
                    if ((UnitHasBehavior(lp_kobold, &quot;FrostBeamSilence&quot;) == true)) {
                        lv_deltaWarmth -= ((5.0 * lv_warmthDrainFactorGeneric) * gv_periodInterval);
                    }
                    else {
                    }
                    if ((UnitHasBehavior(lp_kobold, &quot;Snow&quot;) == true)) {
                        lv_deltaWarmth -= ((1.5 * lv_warmthDrainFactorGeneric) * gv_periodInterval);
                    }
                    else {
                    }
                    if ((UnitHasBehavior(lp_kobold, &quot;Rain&quot;) == true)) {
                        lv_deltaWarmth -= ((1.0 * lv_warmthDrainFactorGeneric) * gv_periodInterval);
                    }
                    else {
                    }
                    if (((UnitHasBehavior(lp_kobold, &quot;MiningStoneSmart&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;MiningGoldSmart&quot;) == true)) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;FrostBarrier&quot;) == false)) {
                        lv_deltaWarmth += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lv_i)) * gv_periodInterval);
                    }
                    else {
                    }
                    if ((gv_dayNight == 1) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;FrostBarrier&quot;) == false)) {
                        lv_deltaWarmth += (0.4 * gv_periodInterval);
                    }
                    else {
                    }
                    if (((UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true) || ((UnitHasBehavior(lp_kobold, &quot;WatchTowerGarrisonCargoBuff&quot;) == true) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerCanteen == true))) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;FrostBarrier&quot;) == false)) {
                        lv_deltaWarmth += (2.0 * gv_periodInterval);
                    }
                    else {
                        if ((gv_dayNight == 2)) {
                            lv_deltaWarmth -= ((3.0 * lv_warmthDrainFactorGeneric) * gv_periodInterval);
                        }
                        else {
                        }
                    }
                }
                lv_deltaHunger -= ((0.45 * lv_hungerDrainFactorGeneric) * gv_periodInterval);
                if ((UnitHasBehavior(lp_kobold, &quot;UnlivingStrength&quot;) == true)) {
                    lv_deltaHunger -= (1.0 * gv_periodInterval);
                }
                else {
                }
                if ((UnitHasBehavior(lp_kobold, &quot;WatchTowerGarrisonCargoBuff&quot;) == true) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerBarracks == true)) {
                    lv_staminaPLUS += (1.0 * gv_periodInterval);
                }
                else {
                }
                if ((UnitHasBehavior(lp_kobold, &quot;Resting&quot;) == true)) {
                    lv_staminaPLUS += (1.0 * gv_periodInterval);
                }
                else {
                }
                if ((UnitHasBehavior(lp_kobold, &quot;Stationary&quot;) == true)) {
                    lv_staminaPLUS += (1.0 * gv_periodInterval);
                }
                else {
                }
                if (((UnitHasBehavior(lp_kobold, &quot;Running&quot;) == false) || (UnitHasBehavior(lp_kobold, &quot;Stationary&quot;) == true))) {
                    lv_staminaPLUS += (0.5 * gv_periodInterval);
                }
                else {
                }
                if ((UnitHasBehavior(lp_kobold, &quot;Unconscious&quot;) == true)) {
                    lv_staminaPLUS += (0.75 * gv_periodInterval);
                }
                if ((UnitHasBehavior(lp_kobold, &quot;SleepingBag&quot;) == true)) {
                    lv_staminaPLUS += (1.5 * gv_periodInterval);
                }
                if ((StringSub(gv_perks[lv_i], 34, 34) == &quot;1&quot;) &amp;&amp; ((UnitHasBehavior(lp_kobold, &quot;PickingBerriesSmart&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;PickingHerbsSmart&quot;) == true))) {
                    lv_staminaPLUS += (1.0 * gv_periodInterval);
                }
                else {
                }
                lv_staminaPLUS *= lv_staminaRegenFactorGeneric;
                if ((UnitHasBehavior(lp_kobold, &quot;MiningStoneSmart&quot;) == true)) {
                    lv_staminaMINUS -= ((5.0 * lv_staminaDrainFactorMining) * gv_periodInterval);
                }
                else {
                }
                if ((UnitHasBehavior(lp_kobold, &quot;MiningGoldSmart&quot;) == true)) {
                    lv_staminaMINUS -= ((5.0 * lv_staminaDrainFactorMining) * gv_periodInterval);
                }
                else {
                }
                if ((UnitHasBehavior(lp_kobold, &quot;AdrenalineRush&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Running&quot;) == true) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Stationary&quot;) == false)) {
                    if ((StringSub(gv_perks[lv_i], 30, 30) == &quot;1&quot;)) {
                        lv_staminaMINUS -= ((2.75 * 0.95) * gv_periodInterval);
                    }
                    else {
                        lv_staminaMINUS -= (2.75 * gv_periodInterval);
                    }
                }
                else {
                }
                lv_staminaMINUS *= lv_staminaDrainFactorGeneric;
                gf_ModifyKoboldHealthStatus(lv_deltaWarmth, lv_deltaHunger, (lv_staminaPLUS + lv_staminaMINUS), lv_i);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DB2F6B8D">
        <ScriptCode>
            void gf_ModifyKoboldHealthStatus (fixed lp_deltaWarmth, fixed lp_deltaHunger, fixed lp_deltaStamina, int lp_player) {
                // Variable Declarations
                fixed lv_previousHungerLifeRegenFactor;
                int lv_a;
                // Variable Initialization
                lv_previousHungerLifeRegenFactor = gv_playerData[lp_player].lv_hungerRegenPenaltyFactor;
                // Implementation
                gv_playerData[lp_player].lv_warmth += lp_deltaWarmth;
                gv_playerData[lp_player].lv_hunger += lp_deltaHunger;
                gv_playerData[lp_player].lv_stamina += lp_deltaStamina;
                if ((gv_playerData[lp_player].lv_warmth &gt; 100.0)) {
                    gv_playerData[lp_player].lv_warmth = 100.0;
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_warmth &lt;= 0.0)) {
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Frostbite&quot;) == false) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;FrostbitePositive&quot;) == false) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;AdrenalineRush&quot;) == false)) {
                        UIAlertUnit(&quot;Freezing&quot;, lp_player, StringExternal(&quot;Param/Value/B072225E&quot;), null, gv_playerData[lp_player].lv_kobold);
                    }
                    else {
                    }
                    if ((gv_questIndexActive == 10) &amp;&amp; (gv_winterFrozen[lp_player] == false)) {
                        gv_winterFrozen[lp_player] = true;
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4BDCA5CD&quot;));
                        SoundPlay(SoundLink(&quot;Alert_UniObjectiveFailed&quot;, -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                    }
                    else {
                    }
                    gv_playerData[lp_player].lv_warmth = 0.0;
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;AdrenalineRush&quot;) == false)) {
                        if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;FrostBarrier&quot;) == true)) {
                            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;FrostbitePositive&quot;, gv_playerData[lp_player].lv_kobold, 1);
                            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;Frostbite&quot;, 1);
                        }
                        else {
                            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Frostbite&quot;, gv_playerData[lp_player].lv_kobold, 1);
                            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;FrostbitePositive&quot;, 1);
                        }
                    }
                    else {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;Frostbite&quot;, 1);
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;FrostbitePositive&quot;, 1);
                    }
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_warmth == 0)) {
                    gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.0;
                }
                else if (((gv_playerData[lp_player].lv_warmth &gt;= 0.0) &amp;&amp; (gv_playerData[lp_player].lv_warmth &lt;= 25.0))) {
                    gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.12;
                }
                else if (((gv_playerData[lp_player].lv_warmth &gt;= 25.0) &amp;&amp; (gv_playerData[lp_player].lv_warmth &lt;= 50.0))) {
                    gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.08;
                }
                else if (((gv_playerData[lp_player].lv_warmth &gt;= 50.0) &amp;&amp; (gv_playerData[lp_player].lv_warmth &lt;= 75.0))) {
                    gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.04;
                }
                else if (((gv_playerData[lp_player].lv_warmth &gt;= 75.0) &amp;&amp; (gv_playerData[lp_player].lv_warmth &lt;= 100.0))) {
                    gv_playerData[lp_player].lv_warmthStaminaPenaltyFactor = 1.0;
                }
                if ((gv_playerData[lp_player].lv_warmth &gt; 0.0)) {
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Frostbite&quot;) == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;Frostbite&quot;, 1);
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;FrostbitePositive&quot;) == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;FrostbitePositive&quot;, 1);
                    }
                    else {
                    }
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_hunger &gt; 100.0)) {
                    gv_playerData[lp_player].lv_hunger = 100.0;
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_hunger &lt;= 0.0)) {
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Starving&quot;) == false)) {
                        UIAlertUnit(&quot;Starving&quot;, lp_player, StringExternal(&quot;Param/Value/77744856&quot;), null, gv_playerData[lp_player].lv_kobold);
                    }
                    else {
                    }
                    gv_playerData[lp_player].lv_hunger = 0.0;
                    UnitCreateEffectUnit(gv_playerData[lp_player].lv_kobold, &quot;StarvingApply&quot;, gv_playerData[lp_player].lv_kobold);
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_hunger == 0)) {
                    gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 0.0;
                }
                else if (((gv_playerData[lp_player].lv_hunger &gt;= 0.0) &amp;&amp; (gv_playerData[lp_player].lv_hunger &lt;= 25.0))) {
                    gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 0.25;
                }
                else if (((gv_playerData[lp_player].lv_hunger &gt;= 25.0) &amp;&amp; (gv_playerData[lp_player].lv_hunger &lt;= 50.0))) {
                    gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 0.5;
                }
                else if (((gv_playerData[lp_player].lv_hunger &gt;= 50.0) &amp;&amp; (gv_playerData[lp_player].lv_hunger &lt;= 75.0))) {
                    gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 0.75;
                }
                else if (((gv_playerData[lp_player].lv_hunger &gt;= 75.0) &amp;&amp; (gv_playerData[lp_player].lv_hunger &lt;= 100.0))) {
                    gv_playerData[lp_player].lv_hungerRegenPenaltyFactor = 1.0;
                }
                if ((lv_previousHungerLifeRegenFactor != gv_playerData[lp_player].lv_hungerRegenPenaltyFactor)) {
                    gf_UpdateStatsAll(lp_player);
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_hunger &gt; 0.0) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Starving&quot;) == true)) {
                    UnitCreateEffectUnit(gv_playerData[lp_player].lv_kobold, &quot;StarvingRemove&quot;, gv_playerData[lp_player].lv_kobold);
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_stamina &gt; 100.0)) {
                    gv_playerData[lp_player].lv_stamina = 100.0;
                }
                else {
                }
                if ((StringSub(gv_perks[lp_player], 36, 36) == &quot;1&quot;) &amp;&amp; (TimerGetRemaining(gv_playerData[lp_player].lv_runSpeedPerkCooldown) == 0.0)) {
                    if ((gv_playerData[lp_player].lv_stamina &gt;= 50.0) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;EnergyReserves&quot;) == false)) {
                        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;EnergyReserves&quot;, gv_playerData[lp_player].lv_kobold, 1);
                        TimerStart(gv_playerData[lp_player].lv_runSpeedPerkCooldown, 3.0, false, c_timeGame);
                    }
                    else {
                    }
                    if ((gv_playerData[lp_player].lv_stamina &lt; 50.0) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;EnergyReserves&quot;) == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;EnergyReserves&quot;, 1);
                        TimerStart(gv_playerData[lp_player].lv_runSpeedPerkCooldown, 3.0, false, c_timeGame);
                    }
                    else {
                    }
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_stamina &lt; 0.0)) {
                    gv_playerData[lp_player].lv_stamina = 0.0;
                    gf_StaminaFaint(gv_playerData[lp_player].lv_kobold);
                }
                else {
                }
                gf_UpdateHealthStatDialog(lp_player);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BF45E630">
        <ScriptCode>
            void gf_UpdateHealthStatDialog (int lp_player) {
                // Variable Declarations
                int lv_max;
                int lv_medium;
                int lv_low;
                int lv_min;
                text lv_warmthText;
                text lv_hungerText;
                text lv_fatigueText;
                // Variable Initialization
                lv_max = 100;
                lv_medium = 50;
                lv_low = 20;
                lv_warmthText = StringExternal(&quot;Param/Value/32155A4F&quot;);
                lv_hungerText = StringExternal(&quot;Param/Value/B61EF5F3&quot;);
                lv_fatigueText = StringExternal(&quot;Param/Value/E2B4E0C1&quot;);
                // Implementation
                if (((gv_playerData[lp_player].lv_warmth &gt;= lv_medium) &amp;&amp; (gv_playerData[lp_player].lv_warmth &lt;= lv_max))) {
                    lv_warmthText = (StringExternal(&quot;Param/Value/8517C6FE&quot;) + (FixedToText(gv_playerData[lp_player].lv_warmth, 0) + (StringExternal(&quot;Param/Value/CE312DF4&quot;) + StringExternal(&quot;Param/Value/539EE947&quot;))));
                }
                else if (((gv_playerData[lp_player].lv_warmth &gt;= lv_low) &amp;&amp; (gv_playerData[lp_player].lv_warmth &lt;= lv_medium))) {
                    lv_warmthText = (StringExternal(&quot;Param/Value/A78B4CB6&quot;) + (FixedToText(gv_playerData[lp_player].lv_warmth, 0) + (StringExternal(&quot;Param/Value/A5C46DDE&quot;) + StringExternal(&quot;Param/Value/304A1287&quot;))));
                }
                else if (((gv_playerData[lp_player].lv_warmth &gt;= lv_min) &amp;&amp; (gv_playerData[lp_player].lv_warmth &lt;= lv_low))) {
                    lv_warmthText = (StringExternal(&quot;Param/Value/94D74A80&quot;) + (FixedToText(gv_playerData[lp_player].lv_warmth, 0) + (StringExternal(&quot;Param/Value/A80337E9&quot;) + StringExternal(&quot;Param/Value/2A48BDC6&quot;))));
                    gf_InGameHint(&quot;warmth&quot;, lp_player);
                }
                if (((gv_playerData[lp_player].lv_hunger &gt;= lv_medium) &amp;&amp; (gv_playerData[lp_player].lv_hunger &lt;= lv_max))) {
                    lv_hungerText = (StringExternal(&quot;Param/Value/0FCF918B&quot;) + (FixedToText(gv_playerData[lp_player].lv_hunger, 0) + (StringExternal(&quot;Param/Value/2C12FE75&quot;) + StringExternal(&quot;Param/Value/8A44AFE4&quot;))));
                }
                else if (((gv_playerData[lp_player].lv_hunger &gt;= lv_low) &amp;&amp; (gv_playerData[lp_player].lv_hunger &lt;= lv_medium))) {
                    lv_hungerText = (StringExternal(&quot;Param/Value/2157F7C0&quot;) + (FixedToText(gv_playerData[lp_player].lv_hunger, 0) + (StringExternal(&quot;Param/Value/0AC4663D&quot;) + StringExternal(&quot;Param/Value/3448D7AC&quot;))));
                }
                else if (((gv_playerData[lp_player].lv_hunger &gt;= lv_min) &amp;&amp; (gv_playerData[lp_player].lv_hunger &lt;= lv_low))) {
                    lv_hungerText = (StringExternal(&quot;Param/Value/146C074E&quot;) + (FixedToText(gv_playerData[lp_player].lv_hunger, 0) + (StringExternal(&quot;Param/Value/712DEF82&quot;) + StringExternal(&quot;Param/Value/E945F03F&quot;))));
                    gf_InGameHint(&quot;hunger&quot;, lp_player);
                }
                if (((gv_playerData[lp_player].lv_stamina &gt;= lv_medium) &amp;&amp; (gv_playerData[lp_player].lv_stamina &lt;= lv_max))) {
                    TextExpressionSetToken(&quot;Param/Expression/410F8232&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/7DB620A4&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/410F8232&quot;, &quot;B&quot;, FixedToText(gv_playerData[lp_player].lv_stamina, 0));
                    TextExpressionSetToken(&quot;Param/Expression/410F8232&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/A9E2DA8D&quot;));
                    lv_fatigueText = TextExpressionAssemble(&quot;Param/Expression/410F8232&quot;);
                }
                else if (((gv_playerData[lp_player].lv_stamina &gt;= lv_low) &amp;&amp; (gv_playerData[lp_player].lv_stamina &lt;= lv_medium))) {
                    TextExpressionSetToken(&quot;Param/Expression/627A4F90&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/84540269&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/627A4F90&quot;, &quot;B&quot;, FixedToText(gv_playerData[lp_player].lv_stamina, 0));
                    TextExpressionSetToken(&quot;Param/Expression/627A4F90&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/F0415A66&quot;));
                    lv_fatigueText = TextExpressionAssemble(&quot;Param/Expression/627A4F90&quot;);
                }
                else if (((gv_playerData[lp_player].lv_stamina &gt;= lv_min) &amp;&amp; (gv_playerData[lp_player].lv_stamina &lt;= lv_low))) {
                    TextExpressionSetToken(&quot;Param/Expression/5B5BDBF4&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/B95EE08D&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/5B5BDBF4&quot;, &quot;B&quot;, FixedToText(gv_playerData[lp_player].lv_stamina, 0));
                    TextExpressionSetToken(&quot;Param/Expression/5B5BDBF4&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/F36883AA&quot;));
                    lv_fatigueText = TextExpressionAssemble(&quot;Param/Expression/5B5BDBF4&quot;);
                    gf_InGameHint(&quot;stamina&quot;, lp_player);
                }
                libNtve_gf_SetDialogItemText(gv_warmthItem, lv_warmthText, PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_hungerItem, lv_hungerText, PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_fatigueItem, lv_fatigueText, PlayerGroupSingle(lp_player));
                gf_UpdateHighlightTooltip(lp_player);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5D00BFE5">
        <ScriptCode>
            void gf_UpdateHighlightTooltip (int lp_player) {
                // Implementation
                TextExpressionSetToken(&quot;Param/Expression/A745288B&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/0A2DAFA6&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A745288B&quot;, &quot;B&quot;, FixedToText(gv_playerData[lp_player].lv_warmth, 0));
                TextExpressionSetToken(&quot;Param/Expression/A745288B&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/010D8153&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A745288B&quot;, &quot;D&quot;, FixedToText(gv_playerData[lp_player].lv_hunger, 0));
                TextExpressionSetToken(&quot;Param/Expression/A745288B&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/2C691C2B&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A745288B&quot;, &quot;F&quot;, FixedToText(gv_playerData[lp_player].lv_stamina, 0));
                TextExpressionSetToken(&quot;Param/Expression/A745288B&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/F1A422F6&quot;));
                UnitSetInfoText(gv_playerData[lp_player].lv_kobold, StringExternal(&quot;Param/Value/D89EB65A&quot;), (((gf_GetTribeTextOfTeam(gv_playerData[lp_player].lv_team) + StringExternal(&quot;Param/Value/1DC9F70C&quot;)) + TextWithColor(gf_GetPlayerName(lp_player, 1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)))) + TextExpressionAssemble(&quot;Param/Expression/A745288B&quot;)), StringExternal(&quot;Param/Value/50CEC91C&quot;));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="34ED8C59">
        <ScriptCode>
            fixed gf_WarmthDrainFactorGeneric (unit lp_unit) {
                // Variable Declarations
                fixed lv_warmthMod;
                // Variable Initialization
                lv_warmthMod = 1.0;
                // Implementation
                lv_warmthMod *= (1.0 - gv_coldResistance[UnitGetOwner(lp_unit)]);
                if ((UnitHasBehavior(lp_unit, &quot;WarmWoolTunic&quot;) == true)) {
                    lv_warmthMod = (lv_warmthMod * 0.8);
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, &quot;IronStuddedVest&quot;) == true)) {
                    lv_warmthMod = (lv_warmthMod * 0.65);
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, &quot;Torch&quot;) == true)) {
                    lv_warmthMod = (lv_warmthMod * 0.5);
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, &quot;LanternLight&quot;) == true)) {
                    lv_warmthMod = (lv_warmthMod * 0.5);
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, &quot;FelFireTorch&quot;) == true)) {
                    lv_warmthMod = (lv_warmthMod * (1.0 - ((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;FelFireTorchIntensity&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit))) * 0.8) * 0.01)));
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, &quot;GiantSunfish&quot;) == true)) {
                    lv_warmthMod = (lv_warmthMod * 0.5);
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, &quot;KoboldBotNormal&quot;) == true) &amp;&amp; (gv_questIndexActive == 7) &amp;&amp; (gv_deadnightPhase == 3)) {
                    lv_warmthMod *= 0.5;
                }
                else {
                }
                return lv_warmthMod;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="97088A7C">
        <ScriptCode>
            fixed gf_HungerDrainFactorGeneric (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                fixed lv_hungerMod;
                fixed lv_hungerLossReduction;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_hungerMod = 1.0;
                lv_hungerLossReduction = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(lp_unit)));
                // Implementation
                lv_hungerLossReduction /= 3.0;
                lv_hungerLossReduction *= 2.0;
                lv_hungerMod = (lv_hungerMod * (1.0 - (lv_hungerLossReduction / 100.0)));
                if ((UnitHasBehavior(lp_unit, &quot;KoboldBotNormal&quot;) == true)) {
                    lv_hungerMod *= 0.8;
                }
                else {
                }
                lv_hungerMod *= (1.0 - (libNtve_gf_ArithmeticRealClamp((40.0 - (gv_acclvl[lv_i] * 2)), 0.0, 40.0) / 100.0));
                if ((UnitHasBehavior(lp_unit, &quot;FishingRod&quot;) == true)) {
                    lv_hungerMod *= 0.5;
                }
                else {
                }
                if ((((UnitHasBehavior(lp_unit, &quot;Cooking&quot;) == true) &amp;&amp; (gv_skillCooking[UnitGetOwner(lp_unit)] &gt;= 15)) || (UnitHasBehavior(lp_unit, &quot;CookingExpertiseI&quot;) == true))) {
                    lv_hungerMod = 0.0;
                }
                else {
                }
                return lv_hungerMod;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1FEC0BAA">
        <ScriptCode>
            fixed gf_StaminaDrainFactorGeneric (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                fixed lv_enduranceBonus;
                fixed lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_enduranceBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, UnitGetOwner(lp_unit)));
                lv_value = 1.0;
                // Implementation
                lv_enduranceBonus = ((lv_enduranceBonus * 0.0125) / (1.0 + (lv_enduranceBonus * 0.0125)));
                lv_value *= (1.0 - lv_enduranceBonus);
                if ((UnitHasBehavior(lp_unit, &quot;MurlocInvigoration&quot;) == true)) {
                    lv_value *= 0.9;
                }
                else {
                }
                if ((gv_skillMining[lv_i] &gt;= 25) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;MiningExpertise&quot;) == true)) {
                    lv_value *= 0.9;
                }
                else {
                }
                if ((gv_playerData[lv_i].lv_isAI == true)) {
                    lv_value *= (1.0 - (gv_aIData[lv_i].lv_difficultyRating * 0.0015));
                }
                else {
                }
                lv_value *= gv_playerData[lv_i].lv_warmthStaminaPenaltyFactor;
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FCF2BD58">
        <ScriptCode>
            fixed gf_StaminaDrainFactorMining (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                fixed lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_value = 1.0;
                // Implementation
                if ((gv_skillMining[lv_i] &gt;= 15)) {
                    lv_value *= 0.8;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DBF21478">
        <ScriptCode>
            fixed gf_StaminaRegenFactorGeneric (unit lp_unit) {
                // Variable Declarations
                fixed lv_fatigueMod;
                fixed lv_enduranceRegenBonus;
                // Variable Initialization
                lv_fatigueMod = 1.0;
                lv_enduranceRegenBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(lp_unit)));
                // Implementation
                lv_fatigueMod += (lv_enduranceRegenBonus * 0.01);
                return lv_fatigueMod;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2E244691">
        <ScriptCode>
            trigger auto_gf_StaminaFaint_Trigger = null;
            unit auto_gf_StaminaFaint_lp_unit;
            void gf_StaminaFaint (unit lp_unit) {
                auto_gf_StaminaFaint_lp_unit = lp_unit;
                if (auto_gf_StaminaFaint_Trigger == null) {
                    auto_gf_StaminaFaint_Trigger = TriggerCreate(&quot;auto_gf_StaminaFaint_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_StaminaFaint_Trigger, false, false);
            }
            bool auto_gf_StaminaFaint_TriggerFunc (bool testConds, bool runActions) {
                unit lp_unit = auto_gf_StaminaFaint_lp_unit;
                int autoA108C845_val;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                autoA108C845_val = RandomInt(1, 3);
                if (autoA108C845_val == 1) {
                    TextExpressionSetToken(&quot;Param/Expression/B412BD1A&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken(&quot;Param/Expression/B412BD1A&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/865A4020&quot;));
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble(&quot;Param/Expression/B412BD1A&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal(&quot;Param/Value/066764CD&quot;)));
                }
                else if (autoA108C845_val == 2) {
                    TextExpressionSetToken(&quot;Param/Expression/24398594&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken(&quot;Param/Expression/24398594&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/3D865365&quot;));
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble(&quot;Param/Expression/24398594&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal(&quot;Param/Value/17B677ED&quot;)));
                }
                else if (autoA108C845_val == 3) {
                    TextExpressionSetToken(&quot;Param/Expression/E21BBC4B&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken(&quot;Param/Expression/E21BBC4B&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/211241E1&quot;));
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble(&quot;Param/Expression/E21BBC4B&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal(&quot;Param/Value/4A04AD75&quot;)));
                }
                else {
                }
                UnitIssueOrder(lp_unit, Order(AbilityCommand(&quot;KoboldTestBuild&quot;, 30)), c_orderQueueReplace);
                gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/3B2C9FA3&quot;), 2.0, 24);
                UnitSetFacing(lp_unit, (UnitGetFacing(lp_unit) + 1.0), 0.0);
                if ((StringSub(gv_perks[UnitGetOwner(lp_unit)], 6, 6) == &quot;1&quot;)) {
                    UnitCreateEffectUnit(lp_unit, &quot;UnconsciousApply2&quot;, lp_unit);
                }
                else {
                    UnitCreateEffectUnit(lp_unit, &quot;UnconsciousApply&quot;, lp_unit);
                }
                libNtve_gf_SendActorMessageToUnit(lp_unit, &quot;AnimPlay {derp death} Death&quot;);
                CameraPan(UnitGetOwner(lp_unit), UnitGetPosition(lp_unit), 0.5, -1, 10, true);
                Wait(1.0, c_timeGame);
                libNtve_gf_SendActorMessageToUnit(lp_unit, &quot;AnimSetPaused {derp death}&quot;);
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="968FB691">
        <ScriptCode>
            trigger auto_gf_WoundedFlash_Trigger = null;
            unit auto_gf_WoundedFlash_lp_unit;
            fixed auto_gf_WoundedFlash_lp_damageTaken;
            void gf_WoundedFlash (unit lp_unit, fixed lp_damageTaken) {
                auto_gf_WoundedFlash_lp_unit = lp_unit;
                auto_gf_WoundedFlash_lp_damageTaken = lp_damageTaken;
                if (auto_gf_WoundedFlash_Trigger == null) {
                    auto_gf_WoundedFlash_Trigger = TriggerCreate(&quot;auto_gf_WoundedFlash_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_WoundedFlash_Trigger, false, false);
            }
            bool auto_gf_WoundedFlash_TriggerFunc (bool testConds, bool runActions) {
                unit lp_unit = auto_gf_WoundedFlash_lp_unit;
                fixed lp_damageTaken = auto_gf_WoundedFlash_lp_damageTaken;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 30.0) &amp;&amp; (gv_woundedFlashActive[lv_i] == false)) {
                    gv_woundedFlashActive[lv_i] = true;
                    DialogControlFadeTransparency(gv_woundedFlashImage, PlayerGroupSingle(lv_i), 0.25, (100.0 - lp_damageTaken));
                    Wait(0.25, c_timeGame);
                    DialogControlFadeTransparency(gv_woundedFlashImage, PlayerGroupSingle(lv_i), 0.625, 100.0);
                    gv_woundedFlashActive[lv_i] = false;
                }
                else {
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="CFEF9348">
        <Item Type="CustomScript" Id="0CA4AFE9"/>
        <Item Type="CustomScript" Id="07E10BAE"/>
        <Item Type="CustomScript" Id="566DD431"/>
        <Item Type="CustomScript" Id="DDBE73F4"/>
        <Item Type="CustomScript" Id="BDD7ADAB"/>
        <Item Type="CustomScript" Id="56B96A1A"/>
    </Element>
    <Element Type="CustomScript" Id="0CA4AFE9">
        <ScriptCode>
            void gf_ApplyKoboldBehaviors (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                fixed lv_temp;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                UnitBehaviorAdd(lp_unit, &quot;ADTAllowedStacks&quot;, lp_unit, 1);
                UnitBehaviorAdd(lp_unit, &quot;UnlimitedPower&quot;, lp_unit, 1);
                UnitBehaviorAdd(lp_unit, &quot;SetHeavyIron&quot;, lp_unit, 1);
                if (gf_RewardCatIndexActive(lv_i, 2, 1)) {
                    UnitBehaviorAdd(lp_unit, &quot;SunHat&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 2)) {
                    UnitBehaviorAdd(lp_unit, &quot;DevoutCap&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 3)) {
                    UnitBehaviorAdd(lp_unit, &quot;Fez&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 4)) {
                    UnitBehaviorAdd(lp_unit, &quot;MonkHeadwear&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 5)) {
                    UnitBehaviorAdd(lp_unit, &quot;TopHat&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 6)) {
                    UnitBehaviorAdd(lp_unit, &quot;AdmiralHat&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 7)) {
                    UnitBehaviorAdd(lp_unit, &quot;Sombrero&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 8)) {
                    UnitBehaviorAdd(lp_unit, &quot;WizardsHat&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 9)) {
                    UnitBehaviorAdd(lp_unit, &quot;FlowerBoquet&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gf_RewardCatIndexActive(lv_i, 2, 27) || ((gv_playerData[UnitGetOwner(lp_unit)].lv_isAI == true) &amp;&amp; (gv_winterHolidays == true)))) {
                    UnitBehaviorAdd(lp_unit, &quot;WinterHat&quot;, lp_unit, 1);
                }
                else {
                }
                if (gf_RewardCatIndexActive(lv_i, 2, 28)) {
                    UnitBehaviorAdd(lp_unit, &quot;FieryCrown&quot;, lp_unit, 1);
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 2, 2) == &quot;1&quot;)) {
                    UnitBehaviorAdd(lp_unit, &quot;AnimalHandler&quot;, lp_unit, 1);
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 10, 10) == &quot;1&quot;)) {
                    UnitBehaviorAdd(lp_unit, &quot;Survivalist&quot;, lp_unit, 1);
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 16, 16) == &quot;1&quot;)) {
                    UnitBehaviorAdd(lp_unit, &quot;CombatTraining&quot;, lp_unit, 1);
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 17, 17) == &quot;1&quot;)) {
                    UnitBehaviorAdd(lp_unit, &quot;Mysticism&quot;, lp_unit, 1);
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 18, 18) == &quot;1&quot;)) {
                    UnitBehaviorAdd(lp_unit, &quot;Lightbringer&quot;, lp_unit, 1);
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 28, 28) == &quot;1&quot;)) {
                    UnitBehaviorAdd(lp_unit, &quot;Superstition&quot;, lp_unit, 1);
                }
                else {
                }
                if ((StringSub(gv_perks[lv_i], 40, 40) == &quot;1&quot;)) {
                    UnitBehaviorAdd(lp_unit, &quot;CampfireExpert&quot;, lp_unit, 1);
                }
                else {
                }
                UnitBehaviorAdd(lp_unit, &quot;KoboldCanEat&quot;, lp_unit, 1);
                if ((ModI(gv_playerData[lv_i].lv_team, 2) == 0)) {
                    UnitBehaviorAdd(lp_unit, &quot;SouthernTribeUniform&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_lambSirloinEnabled[gv_playerData[lv_i].lv_team] == true)) {
                    UnitBehaviorAdd(lp_unit, &quot;SmokedLambSirloinReq&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_raining == true)) {
                    UnitBehaviorAdd(lp_unit, &quot;Raining&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_winter == true)) {
                    UnitBehaviorAdd(lp_unit, &quot;Snowing&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_questIndexActive == 7) &amp;&amp; (gv_deadnightPhase == 3)) {
                    UnitBehaviorAdd(lp_unit, &quot;DeadnightActive&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_questIndexActive == 11)) {
                    UnitBehaviorAdd(lp_unit, &quot;ShovelKnowledge&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_questIndexActive == 13)) {
                    UnitBehaviorAdd(lp_unit, &quot;BarnetsMonument&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_gameMode == 2) &amp;&amp; (gf_UnitExists(gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTower) == false)) {
                    UnitBehaviorAdd(lp_unit, &quot;CanBuildWatchTower&quot;, lp_unit, 1);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="07E10BAE">
        <ScriptCode>
            void gf_SwapResourceNodes () {
                int autoE9A14EF4_ae;
                int autoE9A14EF4_ai;
                int autoAA046177_ae;
                int autoAA046177_ai;
                int auto38AA923D_ae;
                int auto38AA923D_ai;
                // Variable Declarations
                int lv_a;
                unitgroup lv_allKobolds;
                unitgroup lv_allNodes;
                unitgroup lv_northRessNodes;
                unitgroup lv_southRessNodes;
                unit lv_pick;
                point lv_p;
                // Variable Initialization
                lv_allKobolds = UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_allNodes = UnitGroupEmpty();
                lv_northRessNodes = UnitGroupEmpty();
                lv_southRessNodes = UnitGroupEmpty();
                // Implementation
                lv_allNodes = UnitGroup(&quot;BerryBush&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_northRessNodes = UnitGroup(&quot;BerryBush&quot;, c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(2745)), 24.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_southRessNodes = UnitGroup(&quot;BerryBush&quot;, c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(2316)), 24.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_allNodes, c_unitCountAlive) &gt; 20)) {
                    autoE9A14EF4_ae = 20;
                    autoE9A14EF4_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoE9A14EF4_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE9A14EF4_ae) || (autoE9A14EF4_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE9A14EF4_ae) ) ; lv_a += autoE9A14EF4_ai ) {
                        lv_pick = null;
                        while ((lv_pick == null)) {
                            if ((UnitGroupCount(lv_northRessNodes, c_unitCountAlive) &gt; 0)) {
                                lv_pick = UnitGroupRandomUnit(lv_northRessNodes, c_unitCountAlive);
                                UnitGroupClear(lv_northRessNodes);
                            }
                            else if ((UnitGroupCount(lv_southRessNodes, c_unitCountAlive) &gt; 0)) {
                                lv_pick = UnitGroupRandomUnit(lv_southRessNodes, c_unitCountAlive);
                                UnitGroupClear(lv_southRessNodes);
                            }
                            else if (true) {
                                lv_pick = UnitGroupRandomUnit(lv_allNodes, c_unitCountAlive);
                            }
                            if ((UnitGroupCount(UnitGroupFilterRegion(lv_allKobolds, RegionCircle(UnitGetPosition(lv_pick), 24.0), 0), c_unitCountAlive) == 0)) {
                            }
                            else {
                                lv_pick = null;
                            }
                        }
                        lv_p = UnitGetPosition(lv_pick);
                        UnitRemove(lv_pick);
                        UnitCreate(1, &quot;CulinaryHerbBush&quot;, c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
                    }
                }
                else {
                }
                UnitGroupLoopBegin(UnitGroup(&quot;BerryBush&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_SpawnBerries(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;CulinaryHerbBush&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_SpawnHerbs(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                lv_allNodes = UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_northRessNodes = UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(2745)), 24.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_southRessNodes = UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(2316)), 24.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_allNodes, c_unitCountAlive) &gt; 20)) {
                    autoAA046177_ae = 20;
                    autoAA046177_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoAA046177_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoAA046177_ae) || (autoAA046177_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoAA046177_ae) ) ; lv_a += autoAA046177_ai ) {
                        lv_pick = null;
                        while ((lv_pick == null)) {
                            if ((UnitGroupCount(lv_northRessNodes, c_unitCountAlive) &gt; 0)) {
                                lv_pick = UnitGroupRandomUnit(lv_northRessNodes, c_unitCountAlive);
                                UnitGroupClear(lv_northRessNodes);
                            }
                            else if ((UnitGroupCount(lv_southRessNodes, c_unitCountAlive) &gt; 0)) {
                                lv_pick = UnitGroupRandomUnit(lv_southRessNodes, c_unitCountAlive);
                                UnitGroupClear(lv_southRessNodes);
                            }
                            else if (true) {
                                lv_pick = UnitGroupRandomUnit(lv_allNodes, c_unitCountAlive);
                            }
                            if ((UnitGroupCount(UnitGroupFilterRegion(lv_allKobolds, RegionCircle(UnitGetPosition(lv_pick), 24.0), 0), c_unitCountAlive) == 0)) {
                            }
                            else {
                                lv_pick = null;
                            }
                        }
                        lv_p = UnitGetPosition(lv_pick);
                        UnitRemove(lv_pick);
                        UnitCreate(1, &quot;GoldDeposit&quot;, c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
                    }
                }
                else {
                }
                lv_allNodes = UnitGroup(&quot;MapleTree&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                UnitGroupLoopBegin(lv_allNodes);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 1.0);
                }
                UnitGroupLoopEnd();
                if ((UnitGroupCount(lv_allNodes, c_unitCountAlive) &gt; gv_elderTreeQuota)) {
                    auto38AA923D_ae = gv_elderTreeQuota;
                    auto38AA923D_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto38AA923D_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto38AA923D_ae) || (auto38AA923D_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto38AA923D_ae) ) ; lv_a += auto38AA923D_ai ) {
                        lv_pick = null;
                        while ((lv_pick == null)) {
                            lv_pick = UnitGroupRandomUnit(lv_allNodes, c_unitCountAlive);
                            if ((UnitGroupCount(UnitGroupFilterRegion(lv_allKobolds, RegionCircle(UnitGetPosition(lv_pick), 24.0), 0), c_unitCountAlive) == 0)) {
                            }
                            else {
                                lv_pick = null;
                            }
                        }
                        lv_p = UnitGetPosition(lv_pick);
                        UnitRemove(lv_pick);
                        UnitCreate(1, &quot;ElderTree&quot;, c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
                        UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
                    }
                }
                else {
                }
                UnitGroupLoopBegin(UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 0, RandomInt(5, 10));
                    gf_UpdateResourceTooltip(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;GoldDeposit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 0, RandomInt(80, 120));
                    gf_UpdateResourceTooltip(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="566DD431">
        <ScriptCode>
            void gf_ModifyUnitSight (string lp_unit, int lp_player, fixed lp_real) {
                // Implementation
                CatalogFieldValueSet(c_gameCatalogUnit, lp_unit, &quot;Sight&quot;, lp_player, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, &quot;Sight&quot;, lp_player)) + lp_real), 0));
                if ((lp_unit == &quot;Kobold&quot;)) {
                    gv_playerData[lp_player].lv_stats.lv_sightRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, &quot;Sight&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;IronbarkArmorSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, lp_player, FixedToString(gv_playerData[lp_player].lv_stats.lv_sightRadius, 0));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DDBE73F4">
        <ScriptCode>
            void gf_DropAllItems (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if (gf_UnitExists(lp_unit)) {
                    UnitGroupLoopBegin(UnitInventoryGroup(lp_unit));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetType(lp_unit) != &quot;Kobold&quot;) || ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (UnitInventoryContainer(UnitGroupLoopCurrent()) == gv_backpackSlot)))) {
                            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lp_unit), false);
                            UnitCreateEffectPoint(UnitGroupLoopCurrent(), &quot;LootFountainEffect&quot;, PointWithOffsetPolar(UnitGetPosition(lp_unit), RandomFixed(0.5, 1.0), libNtve_gf_RandomAngle()));
                            UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    UnitGroupLoopEnd();
                    if ((gv_playerData[lv_i].lv_isAI == true) &amp;&amp; (UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                        gv_aIData[lv_i].lv_weightedPOI = UnitGetPosition(lp_unit);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BDD7ADAB">
        <ScriptCode>
            void gf_DropItems (unit lp_unit, unitgroup lp_items) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if (gf_UnitExists(lp_unit)) {
                    UnitGroupLoopBegin(lp_items);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetType(lp_unit) != &quot;Kobold&quot;) || ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (UnitInventoryContainer(UnitGroupLoopCurrent()) == gv_backpackSlot)))) {
                            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffset(UnitGetPosition(lp_unit), RandomFixed(-0.5, 0.5), RandomFixed(-0.5, 0.5)), false);
                            UnitCreateEffectPoint(UnitGroupLoopCurrent(), &quot;LootFountainEffect&quot;, PointWithOffsetPolar(UnitGetPosition(lp_unit), RandomFixed(0.5, 1.0), libNtve_gf_RandomAngle()));
                            UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    UnitGroupLoopEnd();
                    if ((gv_playerData[lv_i].lv_isAI == true) &amp;&amp; (UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                        gv_aIData[lv_i].lv_weightedPOI = UnitGetPosition(lp_unit);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="56B96A1A">
        <ScriptCode>
            void gf_KoboldSkin(unit kobold, int skinType){
                actor act = libNtve_gf_MainActorofUnit(kobold);
                string skin = &quot;KoboldNormal&quot;;
                if (skinType == 2){
                    skin = &quot;KoboldSnow&quot;;
                }
                ActorSend(act, &quot;TextureSelectById &quot; + skin);
            }
            bool KoboldSkin_Cheat(bool cond, bool actions){
                int p = EventPlayer();
                if (gv_admin[p]){
                    gf_KoboldSkin(gv_playerData[p].lv_kobold, StringToInt(StringWord(EventChatMessage(false), 2)));
                }
                return true;
            }
            void KoboldSkin_Init(){
                TriggerAddEventChatMessage(TriggerCreate(&quot;KoboldSkin_Cheat&quot;), c_playerAny, &quot;-KoboldSkin &quot;, false);
            }
        </ScriptCode>
        <InitFunc>KoboldSkin_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="38ADF337">
        <Item Type="CustomScript" Id="8ACD19A3"/>
        <Item Type="CustomScript" Id="81CBC7E8"/>
        <Item Type="CustomScript" Id="57FDCD3E"/>
        <Item Type="CustomScript" Id="5A5754C8"/>
        <Item Type="CustomScript" Id="D116A91B"/>
        <Item Type="CustomScript" Id="6FBAE5A9"/>
        <Item Type="CustomScript" Id="9DB23323"/>
        <Item Type="CustomScript" Id="E47B36C8"/>
        <Item Type="CustomScript" Id="A6740C09"/>
        <Item Type="CustomScript" Id="F11BB442"/>
        <Item Type="CustomScript" Id="787D8540"/>
        <Item Type="CustomScript" Id="EB40E6F4"/>
        <Item Type="CustomScript" Id="48CBAE1C"/>
        <Item Type="CustomScript" Id="B6D6BEF0"/>
        <Item Type="CustomScript" Id="8BAC7464"/>
        <Item Type="CustomScript" Id="523C223B"/>
        <Item Type="CustomScript" Id="CDEE9A00"/>
        <Item Type="CustomScript" Id="E4AD56E7"/>
        <Item Type="CustomScript" Id="7ACD901D"/>
        <Item Type="CustomScript" Id="E0413079"/>
        <Item Type="CustomScript" Id="9FB07DA3"/>
        <Item Type="CustomScript" Id="C7DCBC94"/>
        <Item Type="CustomScript" Id="6398CA63"/>
        <Item Type="CustomScript" Id="C5FA7CF7"/>
        <Item Type="CustomScript" Id="D9345E57"/>
        <Item Type="CustomScript" Id="97D3675F"/>
    </Element>
    <Element Type="CustomScript" Id="8ACD19A3">
        <ScriptCode>
            void gf_UpdateSkillButton (int lp_player) {
                // Implementation
                if ((gv_gameOver == false)) {
                    if ((gv_skillPointsPlayer[lp_player] &gt; 0)) {
                        TextExpressionSetToken(&quot;Param/Expression/0FACC3FA&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3A59197E&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/0FACC3FA&quot;, &quot;B&quot;, IntToText(gv_skillPointsPlayer[lp_player]));
                        TextExpressionSetToken(&quot;Param/Expression/0FACC3FA&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/B1B848B9&quot;));
                        libNtve_gf_SetDialogItemText(gv_skillButton, TextExpressionAssemble(&quot;Param/Expression/0FACC3FA&quot;), PlayerGroupSingle(lp_player));
                        if ((DialogIsVisible(gv_skillWindowBig, lp_player) == false)) {
                            DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(lp_player), true);
                        }
                        else {
                        }
                    }
                    else {
                        libNtve_gf_SetDialogItemText(gv_skillButton, StringExternal(&quot;Param/Value/0D13E96C&quot;), PlayerGroupSingle(lp_player));
                        DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(lp_player), false);
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="81CBC7E8">
        <ScriptCode>
            void gf_UpdateSkillWindow (int lp_player) {
                int autoF8EE57C5_ae;
                int autoF8EE57C5_ai;
                int auto1AD108EF_ae;
                int auto1AD108EF_ai;
                // Variable Declarations
                int lv_b;
                // Variable Initialization
                // Implementation
                libNtve_gf_SetDialogItemText(gv_skillLabel[1], (StringExternal(&quot;Param/Value/375F7FAA&quot;) + IntToText(gv_skillForestry[lp_player])), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_skillLabel[2], (StringExternal(&quot;Param/Value/4300D996&quot;) + IntToText(gv_skillMining[lp_player])), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_skillLabel[3], (StringExternal(&quot;Param/Value/8F1CF3AF&quot;) + IntToText(gv_skillCooking[lp_player])), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_skillLabel[4], (StringExternal(&quot;Param/Value/634C65D2&quot;) + IntToText(gv_skillForaging[lp_player])), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_skillLabel[5], (StringExternal(&quot;Param/Value/A17189F4&quot;) + IntToText(gv_skillArtisanship[lp_player])), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_skillLabel[6], (StringExternal(&quot;Param/Value/010E75A8&quot;) + (IntToText(gv_skillPointsPlayer[lp_player]) + StringExternal(&quot;Param/Value/06AF4156&quot;))), PlayerGroupSingle(lp_player));
                TextExpressionSetToken(&quot;Param/Expression/94C28898&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/37BBFC9F&quot;));
                TextExpressionSetToken(&quot;Param/Expression/94C28898&quot;, &quot;B&quot;, IntToText(gv_skillForestry[lp_player]));
                libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[1], TextExpressionAssemble(&quot;Param/Expression/94C28898&quot;), PlayerGroupSingle(lp_player));
                TextExpressionSetToken(&quot;Param/Expression/EEC254F8&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/52E8316C&quot;));
                TextExpressionSetToken(&quot;Param/Expression/EEC254F8&quot;, &quot;B&quot;, IntToText(gv_skillMining[lp_player]));
                libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[2], TextExpressionAssemble(&quot;Param/Expression/EEC254F8&quot;), PlayerGroupSingle(lp_player));
                TextExpressionSetToken(&quot;Param/Expression/D446B686&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/1739D5B0&quot;));
                TextExpressionSetToken(&quot;Param/Expression/D446B686&quot;, &quot;B&quot;, IntToText(gv_skillCooking[lp_player]));
                libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[3], TextExpressionAssemble(&quot;Param/Expression/D446B686&quot;), PlayerGroupSingle(lp_player));
                TextExpressionSetToken(&quot;Param/Expression/D4E80416&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/C3F0247B&quot;));
                TextExpressionSetToken(&quot;Param/Expression/D4E80416&quot;, &quot;B&quot;, IntToText(gv_skillForaging[lp_player]));
                libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[4], TextExpressionAssemble(&quot;Param/Expression/D4E80416&quot;), PlayerGroupSingle(lp_player));
                TextExpressionSetToken(&quot;Param/Expression/AD0A18D2&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/1E44D025&quot;));
                TextExpressionSetToken(&quot;Param/Expression/AD0A18D2&quot;, &quot;B&quot;, IntToText(gv_skillArtisanship[lp_player]));
                libNtve_gf_SetDialogItemTooltip(gv_minimalistSkillDialogItem[5], TextExpressionAssemble(&quot;Param/Expression/AD0A18D2&quot;), PlayerGroupSingle(lp_player));
                if ((gv_skillPointsPlayer[lp_player] &gt; 0)) {
                    auto1AD108EF_ae = 5;
                    auto1AD108EF_ai = 1;
                    lv_b = 1;
                    for ( ; ( (auto1AD108EF_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto1AD108EF_ae) || (auto1AD108EF_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto1AD108EF_ae) ) ; lv_b += auto1AD108EF_ai ) {
                        DialogControlSetVisible(gv_bTNSkillIncrease[lv_b], PlayerGroupSingle(lp_player), true);
                    }
                }
                else {
                    autoF8EE57C5_ae = 5;
                    autoF8EE57C5_ai = 1;
                    lv_b = 1;
                    for ( ; ( (autoF8EE57C5_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoF8EE57C5_ae) || (autoF8EE57C5_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoF8EE57C5_ae) ) ; lv_b += autoF8EE57C5_ai ) {
                        DialogControlSetVisible(gv_bTNSkillIncrease[lv_b], PlayerGroupSingle(lp_player), false);
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="57FDCD3E">
        <ScriptCode>
            void gf_AddExperience (unit lp_unit, fixed lp_amount) {
                // Variable Declarations
                int lv_i;
                fixed lv_globalModifier;
                fixed lv_intelligenceModifier;
                fixed lv_amount;
                unit lv_learner;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_globalModifier = 1.0;
                lv_intelligenceModifier = 1.0;
                lv_amount = lp_amount;
                lv_learner = lp_unit;
                // Implementation
                if ((gv_tutorial == false) &amp;&amp; ((lv_i &gt;= 0) &amp;&amp; (lv_i &lt;= gv_players))) {
                    lv_intelligenceModifier = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    if ((gv_playerData[lv_i].lv_alive == true) &amp;&amp; (UnitLevel(gv_playerData[lv_i].lv_kobold) &lt; 10) &amp;&amp; (UnitGetType(lp_unit) != &quot;MurlocSlave&quot;)) {
                        lv_learner = gv_playerData[lv_i].lv_kobold;
                        lv_intelligenceModifier /= 100.0;
                        lv_intelligenceModifier += 1.0;
                        if ((StringSub(gv_perks[UnitGetOwner(lv_learner)], 19, 19) == &quot;1&quot;)) {
                            lv_intelligenceModifier *= 1.05;
                        }
                        else {
                        }
                        lv_amount *= lv_globalModifier;
                        lv_amount *= lv_intelligenceModifier;
                        lv_amount = Round(lv_amount);
                        UnitSetPropertyFixed(lv_learner, c_unitPropXP, (UnitGetPropertyFixed(lv_learner, c_unitPropXP, c_unitPropCurrent) + lv_amount));
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5A5754C8">
        <ScriptCode>
            void gf_IncreaseSkillType (int lp_player, int lp_type, int lp_amount) {
                int auto724D1CF8_ae;
                int auto724D1CF8_ai;
                int autoED42FBC1_val;
                // Variable Declarations
                const fixed lv_f1 = 0.01;
                const fixed lv_a1 = 0.01;
                int lv_a;
                fixed lv_x;
                int lv_y;
                // Variable Initialization
                lv_y = gv_skillForestry[lp_player];
                // Implementation
                auto724D1CF8_ae = lp_amount;
                auto724D1CF8_ai = 1;
                lv_a = 1;
                for ( ; ( (auto724D1CF8_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto724D1CF8_ae) || (auto724D1CF8_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto724D1CF8_ae) ) ; lv_a += auto724D1CF8_ai ) {
                    autoED42FBC1_val = lp_type;
                    if (autoED42FBC1_val == 1) {
                        gv_skillForestry[lp_player] += 1;
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;Amount&quot;, lp_player, FixedToString(gv_skillForestry[lp_player], 0));
                        gv_skillPointsPlayer[lp_player] -= 1;
                        gf_UpdateSkillWindow(lp_player);
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + 1.5), 1));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((((gv_skillForestry[lp_player] * lv_f1) / (1.0 + (gv_skillForestry[lp_player] * lv_f1))) * 100.0), 2));
                        if ((ModI(gv_skillForestry[lp_player], 5) == 0)) {
                            CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player)) + 1.0), 0));
                        }
                        else {
                        }
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, FixedToString(((gv_skillForestry[lp_player] / (gv_skillForestry[lp_player] + 20.0)) * 150.0), 1));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString((180.0 - lv_x), 1));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((90.0 - (lv_x / 2.0)), 1));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player, FixedToString((lv_x + 1.0), 0));
                        gf_UpdateForestry(lp_player);
                        gf_UpdateStatsAll(lp_player);
                    }
                    else if (autoED42FBC1_val == 2) {
                        gv_skillMining[lp_player] += 1;
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;Amount&quot;, lp_player, FixedToString(gv_skillMining[lp_player], 0));
                        gv_skillPointsPlayer[lp_player] -= 1;
                        gf_UpdateSkillWindow(lp_player);
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + 1.5), 1));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                        if ((ModI(gv_skillMining[lp_player], 4) == 0)) {
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + 1.0), 0));
                        }
                        else {
                        }
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, FixedToString((lv_x + 0.1), 1));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString((lv_x + 1.0), 0));
                        gf_UpdateMining(lp_player);
                        gf_UpdateStatsAll(lp_player);
                    }
                    else if (autoED42FBC1_val == 3) {
                        gv_skillCooking[lp_player] += 1;
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;Amount&quot;, lp_player, FixedToString(gv_skillCooking[lp_player], 0));
                        gv_skillPointsPlayer[lp_player] -= 1;
                        gf_UpdateSkillWindow(lp_player);
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + 2.0), 0));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + 1.5), 1));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player, FixedToString((lv_x + 2.0), 0));
                        gf_UpdateCooking(lp_player);
                    }
                    else if (autoED42FBC1_val == 4) {
                        gv_skillForaging[lp_player] += 1;
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;Amount&quot;, lp_player, FixedToString(gv_skillForaging[lp_player], 0));
                        gv_skillPointsPlayer[lp_player] -= 1;
                        gf_UpdateSkillWindow(lp_player);
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + 1.0), 0));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + 4.0), 0));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                        if ((ModI(gv_skillForaging[lp_player], 3) == 0)) {
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + 1.0), 0));
                        }
                        else {
                        }
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, FixedToString((lv_x + 4.0), 0));
                        gf_UpdateForaging(lp_player);
                        gf_UpdateStatsAll(lp_player);
                    }
                    else if (autoED42FBC1_val == 5) {
                        gv_skillArtisanship[lp_player] += 1;
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;Amount&quot;, lp_player, FixedToString(gv_skillArtisanship[lp_player], 0));
                        gv_skillPointsPlayer[lp_player] -= 1;
                        gf_UpdateSkillWindow(lp_player);
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + 0.3), 1));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((((gv_skillArtisanship[lp_player] * lv_a1) / (1.0 + (gv_skillArtisanship[lp_player] * lv_a1))) * 100.0), 2));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + 1.5), 1));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, FixedToString((lv_x + 1.0), 0));
                        lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                        if ((ModI(gv_skillArtisanship[lp_player], 5) == 0)) {
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString((lv_x + 1.0), 0));
                        }
                        else {
                        }
                        gf_UpdateArtisanship(lp_player);
                    }
                    else {
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D116A91B">
        <ScriptCode>
            text gf_GetExpertiseText (int lp_skill, int lp_player) {
                int auto5A8004D9_val;
                // Variable Declarations
                text lv_value;
                text lv_expertiseRank1;
                text lv_expertiseRank2;
                text lv_expertiseRank3;
                // Variable Initialization
                // Implementation
                auto5A8004D9_val = lp_skill;
                if (auto5A8004D9_val == 1) {
                    if (((gv_skillForestry[lp_player] &gt;= 5) &amp;&amp; (gv_skillForestry[lp_player] &lt;= 14))) {
                        lv_value = StringExternal(&quot;Param/Value/66A53CD1&quot;);
                    }
                    else if (((gv_skillForestry[lp_player] &gt;= 15) &amp;&amp; (gv_skillForestry[lp_player] &lt;= 19))) {
                        lv_value = StringExternal(&quot;Param/Value/4851C723&quot;);
                    }
                    else if (((gv_skillForestry[lp_player] &gt;= 20) &amp;&amp; (gv_skillForestry[lp_player] &lt;= 24))) {
                        lv_value = StringExternal(&quot;Param/Value/077CAAD1&quot;);
                    }
                    else if ((gv_skillForestry[lp_player] &gt;= 25)) {
                        lv_value = StringExternal(&quot;Param/Value/78CB5079&quot;);
                    }
                }
                else if (auto5A8004D9_val == 2) {
                    if (((gv_skillMining[lp_player] &gt;= 5) &amp;&amp; (gv_skillMining[lp_player] &lt;= 14))) {
                        lv_value = StringExternal(&quot;Param/Value/C6ED2140&quot;);
                    }
                    else if (((gv_skillMining[lp_player] &gt;= 15) &amp;&amp; (gv_skillMining[lp_player] &lt;= 19))) {
                        lv_value = StringExternal(&quot;Param/Value/60751BCD&quot;);
                    }
                    else if (((gv_skillMining[lp_player] &gt;= 20) &amp;&amp; (gv_skillMining[lp_player] &lt;= 24))) {
                        lv_value = StringExternal(&quot;Param/Value/946167D7&quot;);
                    }
                    else if ((gv_skillMining[lp_player] &gt;= 25)) {
                        lv_value = StringExternal(&quot;Param/Value/A6357DF0&quot;);
                    }
                }
                else if (auto5A8004D9_val == 3) {
                    if (((gv_skillCooking[lp_player] &gt;= 5) &amp;&amp; (gv_skillCooking[lp_player] &lt;= 14))) {
                        lv_value = StringExternal(&quot;Param/Value/DFC3A243&quot;);
                    }
                    else if (((gv_skillCooking[lp_player] &gt;= 15) &amp;&amp; (gv_skillCooking[lp_player] &lt;= 19))) {
                        lv_value = StringExternal(&quot;Param/Value/B4188995&quot;);
                    }
                    else if (((gv_skillCooking[lp_player] &gt;= 20) &amp;&amp; (gv_skillCooking[lp_player] &lt;= 24))) {
                        lv_value = StringExternal(&quot;Param/Value/6A8403A1&quot;);
                    }
                    else if ((gv_skillCooking[lp_player] &gt;= 25)) {
                        lv_value = StringExternal(&quot;Param/Value/959DEDB4&quot;);
                    }
                }
                else if (auto5A8004D9_val == 4) {
                    if (((gv_skillForaging[lp_player] &gt;= 5) &amp;&amp; (gv_skillForaging[lp_player] &lt;= 14))) {
                        lv_value = StringExternal(&quot;Param/Value/A253C2C4&quot;);
                    }
                    else if (((gv_skillForaging[lp_player] &gt;= 15) &amp;&amp; (gv_skillForaging[lp_player] &lt;= 19))) {
                        lv_value = StringExternal(&quot;Param/Value/25C090F1&quot;);
                    }
                    else if (((gv_skillForaging[lp_player] &gt;= 20) &amp;&amp; (gv_skillForaging[lp_player] &lt;= 24))) {
                        lv_value = StringExternal(&quot;Param/Value/4E6B963F&quot;);
                    }
                    else if ((gv_skillForaging[lp_player] &gt;= 25)) {
                        lv_value = StringExternal(&quot;Param/Value/9AD30E0A&quot;);
                    }
                }
                else if (auto5A8004D9_val == 5) {
                    if (((gv_skillArtisanship[lp_player] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 14))) {
                        lv_value = StringExternal(&quot;Param/Value/58BD4F65&quot;);
                    }
                    else if (((gv_skillArtisanship[lp_player] &gt;= 15) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 19))) {
                        lv_value = StringExternal(&quot;Param/Value/79D52420&quot;);
                    }
                    else if (((gv_skillArtisanship[lp_player] &gt;= 20) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 24))) {
                        lv_value = StringExternal(&quot;Param/Value/1C4C952A&quot;);
                    }
                    else if ((gv_skillArtisanship[lp_player] &gt;= 25)) {
                        lv_value = StringExternal(&quot;Param/Value/40E95854&quot;);
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6FBAE5A9">
        <ScriptCode>
            void gf_UpdateForestry (int lp_player) {
                // Variable Declarations
                fixed lv_x;
                text lv_skillText;
                fixed lv_a1;
                fixed lv_a2;
                fixed lv_a3;
                fixed lv_a4;
                fixed lv_a5;
                int lv_a6;
                fixed lv_treeLife;
                fixed lv_treeGrowthDurationTotal;
                fixed lv_plantTreeCDR;
                // Variable Initialization
                lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                lv_a2 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                lv_a4 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                lv_a5 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player));
                lv_a6 = (gv_skillForestry[lp_player] / 5);
                lv_treeLife = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;MapleTree&quot;, &quot;LifeMax&quot;, 0));
                lv_treeGrowthDurationTotal = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                lv_plantTreeCDR = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                // Implementation
                lv_x = ((lv_treeLife - 15.0) / lv_treeGrowthDurationTotal);
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;GrowingTreeModify&quot;, &quot;VitalArray[&quot; + IntToString(0) + &quot;].Change&quot;, lp_player, FixedToString(lv_x, 2));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;PlantTree&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.TimeUse&quot;, lp_player, FixedToString((90.0 - lv_plantTreeCDR), 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;AutogrowStat&quot;, &quot;Amount&quot;, lp_player, FixedToString((50.0 + (lv_a1 * 1.25)), 0));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/D97174DE&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;B&quot;, FixedToText(lv_a1, 1));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/CAC7E9FF&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;E&quot;, FixedToText(lv_a5, 0));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;L&quot;, StringExternal(&quot;Param/Value/B3E46B78&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;F&quot;, FixedToText(lv_a2, 1));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/8BE9FC05&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;H&quot;, FixedToText(lv_a3, 0));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;I&quot;, StringExternal(&quot;Param/Value/EF308AE1&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;J&quot;, FixedToText(lv_a4, 0));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;K&quot;, StringExternal(&quot;Param/Value/08191322&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;M&quot;, FixedToText(lv_a6, 0));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;N&quot;, StringExternal(&quot;Param/Value/0941102C&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E0379E2F&quot;, &quot;D&quot;, gf_GetExpertiseText(1, lp_player));
                lv_skillText = TextExpressionAssemble(&quot;Param/Expression/E0379E2F&quot;);
                libNtve_gf_SetDialogItemTooltip(gv_skillLabel[1], lv_skillText, PlayerGroupSingle(lp_player));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9DB23323">
        <ScriptCode>
            void gf_UpdateMining (int lp_player) {
                // Variable Declarations
                text lv_skillText;
                fixed lv_a1;
                fixed lv_a3;
                fixed lv_a4;
                fixed lv_a5;
                // Variable Initialization
                lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                lv_a4 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                lv_a5 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                // Implementation
                if ((gv_skillMining[lp_player] &gt;= 15) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Mining15&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Mining15&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillMining[lp_player] &gt;= 20) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Mining20&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Mining20&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillMining[lp_player] &gt;= 25) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;GoldScout&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;GoldScout&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillMining[lp_player] &gt;= 25) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;MiningExpertise&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;MiningExpertise&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/B7DD37C9&quot;));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;B&quot;, FixedToText(lv_a1, 1));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/E81AE2A1&quot;));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;F&quot;, FixedToText(lv_a3, 0));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/CCFC9744&quot;));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;H&quot;, FixedToText(lv_a4, 1));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;I&quot;, StringExternal(&quot;Param/Value/4C30E8CA&quot;));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;J&quot;, FixedToText(lv_a5, 0));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;K&quot;, StringExternal(&quot;Param/Value/F7356612&quot;));
                TextExpressionSetToken(&quot;Param/Expression/401E679A&quot;, &quot;D&quot;, gf_GetExpertiseText(2, lp_player));
                lv_skillText = TextExpressionAssemble(&quot;Param/Expression/401E679A&quot;);
                libNtve_gf_SetDialogItemTooltip(gv_skillLabel[2], lv_skillText, PlayerGroupSingle(lp_player));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E47B36C8">
        <ScriptCode>
            void gf_UpdateCooking (int lp_player) {
                // Variable Declarations
                text lv_skillText;
                fixed lv_a1;
                fixed lv_a2;
                fixed lv_a3;
                fixed lv_bonusCoefficient;
                // Variable Initialization
                lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                lv_a2 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player));
                lv_bonusCoefficient = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                // Implementation
                lv_bonusCoefficient /= 100.0;
                lv_bonusCoefficient += 1.0;
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player, FixedToString((80.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player, FixedToString((28.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Psionic]&quot;, lp_player, FixedToString((130.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Robotic]&quot;, lp_player, FixedToString((120.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString((34.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((24.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((48.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((66.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, FixedToString((25.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString((70.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((15.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, FixedToString((100.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player, FixedToString((40.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsGiantSunfish&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((60.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsGiantSunfish&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsSlipperyEel&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((75.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsSlipperyEel&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsForestTrout&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsForestTrout&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((50.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsForestTrout&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((35.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsHighlandGuppy&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((60.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsHighlandGuppy&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsAlbinoCavefish&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((100.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsAlbinoCavefish&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((80.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsStripedLurker&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsStripedLurker&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((30.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsJewelDanio&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((40.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsJewelDanio&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((60.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsWaterScorpion&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((450.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsWaterScorpion&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((100.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFireAmmonite&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((45.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFireAmmonite&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((20.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFireAmmonite&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((60.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsBlindRainfish&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((35.0 * lv_bonusCoefficient), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsBlindRainfish&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((10.0 * lv_bonusCoefficient), 1));
                if ((gv_skillCooking[lp_player] &gt;= 5) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Cooking5&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Cooking5&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillCooking[lp_player] &gt;= 10) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Cooking10&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Cooking10&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillCooking[lp_player] &gt;= 15) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Cooking15&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Cooking15&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillCooking[lp_player] &gt;= 20) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Cooking20&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Cooking20&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                TextExpressionSetToken(&quot;Param/Expression/1C69C74D&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/8DF06B3F&quot;));
                TextExpressionSetToken(&quot;Param/Expression/1C69C74D&quot;, &quot;B&quot;, FixedToText(lv_a1, 0));
                TextExpressionSetToken(&quot;Param/Expression/1C69C74D&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/95BE6973&quot;));
                TextExpressionSetToken(&quot;Param/Expression/1C69C74D&quot;, &quot;F&quot;, FixedToText(lv_a2, 1));
                TextExpressionSetToken(&quot;Param/Expression/1C69C74D&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/6E4F2BB6&quot;));
                TextExpressionSetToken(&quot;Param/Expression/1C69C74D&quot;, &quot;H&quot;, FixedToText(lv_a3, 0));
                TextExpressionSetToken(&quot;Param/Expression/1C69C74D&quot;, &quot;I&quot;, StringExternal(&quot;Param/Value/154BC074&quot;));
                TextExpressionSetToken(&quot;Param/Expression/1C69C74D&quot;, &quot;J&quot;, gf_GetExpertiseText(3, lp_player));
                lv_skillText = TextExpressionAssemble(&quot;Param/Expression/1C69C74D&quot;);
                libNtve_gf_SetDialogItemTooltip(gv_skillLabel[3], lv_skillText, PlayerGroupSingle(lp_player));
                gf_UpdateBuildingStats(lp_player);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A6740C09">
        <ScriptCode>
            void gf_UpdateForaging (int lp_player) {
                // Variable Declarations
                text lv_skillText;
                fixed lv_a1;
                fixed lv_a2;
                fixed lv_a3;
                fixed lv_a4;
                fixed lv_a5;
                // Variable Initialization
                lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                lv_a2 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                lv_a4 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                lv_a5 = gv_skillForaging[lp_player];
                // Implementation
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;TamedSet&quot;, &quot;Chance&quot;, lp_player, FixedToString((libNtve_gf_ArithmeticIntClamp((15 + (gv_skillForaging[lp_player] * 2)), 15, 100) / 100.0), 2));
                if ((gv_skillForaging[lp_player] &gt; 0) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;SmokeDetection&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;SmokeDetection&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillForaging[lp_player] &gt;= 15)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Bird&quot;, &quot;Sight&quot;, lp_player, FixedToString(15.0, 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BirdScoutSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, lp_player, FixedToString(15.0, 0));
                }
                else {
                }
                if ((gv_skillForaging[lp_player] &gt;= 20) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;AnimalScout&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;AnimalScout&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillForaging[lp_player] &gt;= 5) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Foraging5&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Foraging5&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillForaging[lp_player] == 25) &amp;&amp; (gv_b_Day == false)) {
                    gf_ModifyUnitSight(&quot;Kobold&quot;, lp_player, 2.0);
                }
                else {
                }
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/FF949783&quot;));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;B&quot;, FixedToText(lv_a1, 0));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/415FC300&quot;));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;F&quot;, FixedToText(lv_a2, 0));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/E411AF1F&quot;));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;M&quot;, FixedToText(lv_a5, 0));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;N&quot;, StringExternal(&quot;Param/Value/540FAB23&quot;));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;H&quot;, FixedToText(lv_a3, 0));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;I&quot;, StringExternal(&quot;Param/Value/92AEE458&quot;));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;J&quot;, FixedToText(lv_a4, 0));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;K&quot;, StringExternal(&quot;Param/Value/C376F48F&quot;));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;D&quot;, FixedToText(lv_a5, 0));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/EAD61C5F&quot;));
                TextExpressionSetToken(&quot;Param/Expression/72CD572C&quot;, &quot;L&quot;, gf_GetExpertiseText(4, lp_player));
                lv_skillText = TextExpressionAssemble(&quot;Param/Expression/72CD572C&quot;);
                libNtve_gf_SetDialogItemTooltip(gv_skillLabel[4], lv_skillText, PlayerGroupSingle(lp_player));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F11BB442">
        <ScriptCode>
            void gf_UpdateArtisanship (int lp_player) {
                // Variable Declarations
                int lv_a;
                text lv_skillText;
                fixed lv_a1;
                fixed lv_a2;
                fixed lv_a3;
                fixed lv_a4;
                fixed lv_a5;
                fixed lv_repairPerSec;
                bool lv_updtBtns;
                // Variable Initialization
                lv_a1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                lv_a2 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                lv_a3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                lv_a4 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                lv_a5 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                lv_repairPerSec = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                // Implementation
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;ShelterSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, lp_player, FixedToString((5.0 + (gv_skillArtisanship[lp_player] * 0.1)), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;GoodHostSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, lp_player, FixedToString((5.0 + (gv_skillArtisanship[lp_player] * 0.1)), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArtisanshipRepairTrigger&quot;, &quot;VitalArray[Life].Change[0]&quot;, lp_player, FixedToString((2.0 * lv_repairPerSec), 1));
                gv_aDTCapPlayer[lp_player] = (1 + FixedToInt((gv_skillArtisanship[lp_player] * 0.1)));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;AutomatedDefenseTurretCap&quot;, &quot;Amount&quot;, lp_player, IntToString(gv_aDTCapPlayer[lp_player]));
                if ((gv_aDTCapPlayer[lp_player] &gt; UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;ADTAllowedStacks&quot;))) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;ADTAllowedStacks&quot;, gv_playerData[lp_player].lv_kobold, (gv_aDTCapPlayer[lp_player] - UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;ADTAllowedStacks&quot;)));
                }
                else {
                }
                if ((lv_repairPerSec &gt; 0.0) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ArtisanshipRepairAura&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;ArtisanshipRepairAura&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillArtisanship[lp_player] &gt;= 5) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Artisanship5&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Artisanship5&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillArtisanship[lp_player] &gt;= 10) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Artisanship10&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Artisanship10&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillArtisanship[lp_player] &gt;= 15) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Artisanship15&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Artisanship15&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillArtisanship[lp_player] &gt;= 15) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;SalvageAllowed&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;SalvageAllowed&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillArtisanship[lp_player] &gt;= 20) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Artisanship20&quot;) == false)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Artisanship20&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if ((gv_skillArtisanship[lp_player] &gt;= 25) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Artisanship25&quot;) == false)) {
                    CatalogFieldValueSet(c_gameCatalogAbil, &quot;KoboldTestBuild&quot;, &quot;InfoArray[&quot; + IntToString(14) + &quot;].Time&quot;, lp_player, IntToString(5));
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;Artisanship25&quot;, gv_playerData[lp_player].lv_kobold, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Artisan25LumberCost&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString(1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Artisan25LumberCost&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString(2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Artisan25LumberCost&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString(1));
                    gf_UpdateStatsAll(lp_player);
                }
                else {
                }
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/D0CCE7A4&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;B&quot;, FixedToText(lv_a3, 1));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/264DFA0E&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;F&quot;, FixedToText(lv_a2, 1));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/4E74DE61&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;H&quot;, FixedToText(lv_a1, 1));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;I&quot;, StringExternal(&quot;Param/Value/AD6BFC02&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;J&quot;, FixedToText(lv_a4, 0));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;K&quot;, StringExternal(&quot;Param/Value/650AF4A0&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;E&quot;, FixedToText(lv_a5, 0));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;L&quot;, StringExternal(&quot;Param/Value/7C978806&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;M&quot;, FixedToText((gv_skillArtisanship[lp_player] * 0.1), 1));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;N&quot;, StringExternal(&quot;Param/Value/AB174EA1&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;O&quot;, IntToText((gv_aDTCapPlayer[lp_player] - 1)));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;P&quot;, StringExternal(&quot;Param/Value/ED8261DC&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A7F5CD52&quot;, &quot;D&quot;, gf_GetExpertiseText(5, lp_player));
                lv_skillText = TextExpressionAssemble(&quot;Param/Expression/A7F5CD52&quot;);
                libNtve_gf_SetDialogItemTooltip(gv_skillLabel[5], lv_skillText, PlayerGroupSingle(lp_player));
                gf_UpdateBuildingStats(lp_player);
                if ((gv_playerData[lp_player].lv_isAI == true)) {
                    gf_UpdateSupplies(lp_player);
                    gv_aIData[lp_player].lv_smithyDesire = gf_WantedItemType(gv_playerData[lp_player].lv_kobold, &quot;Smithy&quot;);
                    gv_aIData[lp_player].lv_benchDesire = gf_WantedItemType(gv_playerData[lp_player].lv_kobold, &quot;Workbench&quot;);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="787D8540">
        <ScriptCode>
            void gf_CreateSalvageResources (string lp_type, point lp_point) {
                // Implementation
                if (((lp_type == &quot;Tent&quot;) || (lp_type == &quot;Workbench&quot;) || (lp_type == &quot;Farm&quot;) || (lp_type == &quot;AutomatedDefenseTurret&quot;))) {
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, lp_point, libNtve_gf_RandomAngle());
                }
                else if (((lp_type == &quot;Smithy&quot;) || (lp_type == &quot;Campfire&quot;))) {
                    UnitCreate(1, &quot;Stone&quot;, 0, 0, lp_point, libNtve_gf_RandomAngle());
                }
                else if ((lp_type == &quot;HuntersLodge&quot;)) {
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
                    UnitCreate(1, &quot;Leather&quot;, 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
                }
                else if ((lp_type == &quot;StorageOutpost&quot;)) {
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
                }
                else if ((lp_type == &quot;Tavern&quot;)) {
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
                    UnitCreate(1, &quot;Stone&quot;, 0, 0, PointWithOffset(lp_point, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EB40E6F4">
        <ScriptCode>
            void gf_StaminaOnCraft (unit lp_unit) {
                // Variable Declarations
                fixed lv_staminaRestored;
                // Variable Initialization
                // Implementation
                if (gf_UnitExists(lp_unit)) {
                    lv_staminaRestored = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(lp_unit)));
                    if ((lv_staminaRestored &gt; 0.0)) {
                        gv_playerData[UnitGetOwner(lp_unit)].lv_stamina += lv_staminaRestored;
                        TextExpressionSetToken(&quot;Param/Expression/9433D5DE&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/1D6CFCB3&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/9433D5DE&quot;, &quot;B&quot;, FixedToText(lv_staminaRestored, 0));
                        TextExpressionSetToken(&quot;Param/Expression/9433D5DE&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/BC67CC12&quot;));
                        gf_Quicktag(lp_unit, TextExpressionAssemble(&quot;Param/Expression/9433D5DE&quot;), 2.0, 24);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="48CBAE1C">
        <ScriptCode>
            void gf_Forestry20Heal (unit lp_source, unit lp_target, fixed lp_damageAmount, string lp_dmgEffect) {
                // Variable Declarations
                int lv_i;
                fixed lv_healAmount;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_source);
                // Implementation
                if ((UnitGetType(lp_source) == &quot;Kobold&quot;) &amp;&amp; gf_NormalAttack(lp_dmgEffect)) {
                    if ((gv_skillForestry[lv_i] &gt;= 20) &amp;&amp; (UnitGetPropertyFixed(lp_source, c_unitPropLifePercent, c_unitPropCurrent) &lt; 100.0) &amp;&amp; (UnitGetType(lp_source) == &quot;Kobold&quot;) &amp;&amp; ((UnitTypeTestAttribute(UnitGetType(lp_target), c_unitAttributeArmored) == true) || (UnitTypeTestAttribute(UnitGetType(lp_target), c_unitAttributeStructure) == true))) {
                        lv_healAmount = (lp_damageAmount * 0.2);
                        gf_HealUnit(lp_source, lp_source, lv_healAmount, true);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B6D6BEF0">
        <ScriptCode>
            void gf_BoostAdrenalineRush (int lp_player, string lp_minerType, int lp_amount) {
                // Variable Declarations
                int lv_g;
                // Variable Initialization
                lv_g = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;AdrenalineRushCounter&quot;, &quot;Amount&quot;, lp_player));
                // Implementation
                if ((gv_playerData[lp_player].lv_alive == true) &amp;&amp; (gv_skillMining[lp_player] &gt;= 20) &amp;&amp; (lp_minerType == &quot;Kobold&quot;)) {
                    lv_g = libNtve_gf_ArithmeticIntClamp((lv_g + lp_amount), 0, gv_skillMining[lp_player]);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;AdrenalineRushCounter&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_g));
                    if ((lv_g &gt; 0)) {
                        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;AdrenalineRushReady&quot;, gv_playerData[lp_player].lv_kobold, 1);
                    }
                    else {
                        UnitIssueOrder(gv_playerData[lp_player].lv_kobold, Order(AbilityCommand(&quot;AdrenalineRush&quot;, 1)), c_orderQueueReplace);
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;AdrenalineRushReady&quot;, 1);
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8BAC7464">
        <ScriptCode>
            void gf_LearnSpell (int lp_spellIndex, int lp_player) {
                int autoA55668AA_val;
                // Implementation
                autoA55668AA_val = lp_spellIndex;
                if (autoA55668AA_val == 1) {
                    UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, &quot;NaturesGrace&quot;, true);
                    TechTreeUpgradeAddLevel(lp_player, &quot;SpellNaturesGrace&quot;, 1);
                }
                else if (autoA55668AA_val == 2) {
                    UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, &quot;MineralTap&quot;, true);
                    TechTreeUpgradeAddLevel(lp_player, &quot;SpellMineralTap&quot;, 1);
                }
                else if (autoA55668AA_val == 3) {
                    UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, &quot;Clairvoyance&quot;, true);
                    TechTreeUpgradeAddLevel(lp_player, &quot;SpellClairvoyance&quot;, 1);
                }
                else if (autoA55668AA_val == 4) {
                    UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, &quot;FrostArmor&quot;, true);
                    gv_playerData[lp_player].lv_hasMainSpell = true;
                    TechTreeUpgradeAddLevel(lp_player, &quot;SpellFrostArmor&quot;, 1);
                }
                else if (autoA55668AA_val == 5) {
                    UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, &quot;SiphonLife&quot;, true);
                    gv_playerData[lp_player].lv_hasMainSpell = true;
                    TechTreeUpgradeAddLevel(lp_player, &quot;SpellSiphonLife&quot;, 1);
                }
                else if (autoA55668AA_val == 6) {
                    UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, &quot;Affliction&quot;, true);
                    gv_playerData[lp_player].lv_hasMainSpell = true;
                    TechTreeUpgradeAddLevel(lp_player, &quot;SpellAffliction&quot;, 1);
                }
                else if (autoA55668AA_val == 7) {
                    UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, &quot;ShadowCloak&quot;, true);
                    gv_playerData[lp_player].lv_hasMainSpell = true;
                    TechTreeUpgradeAddLevel(lp_player, &quot;SpellShadowCloak&quot;, 1);
                }
                else if (autoA55668AA_val == 8) {
                    UnitAbilityEnable(gv_playerData[lp_player].lv_kobold, &quot;GuardianSpirit&quot;, true);
                    gv_playerData[lp_player].lv_hasMainSpell = true;
                    TechTreeUpgradeAddLevel(lp_player, &quot;SpellGuardianSpirit&quot;, 1);
                }
                else {
                }
                gv_learnedSpellsString[lp_player] = StringReplace(gv_learnedSpellsString[lp_player], &quot;1&quot;, lp_spellIndex, lp_spellIndex);
                gf_AllSpellsLearnedCheck(lp_player);
                UnitGroupLoopBegin(UnitGroup(&quot;Tavern&quot;, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_TavernSpawn(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="523C223B">
        <ScriptCode>
            void gf_UpdateSpellValues (fixed lp_spellPower, fixed lp_dmg, int lp_player) {
                // Variable Declarations
                fixed lv_a;
                fixed lv_baseSP;
                fixed lv_spellDamageModifier;
                fixed lv_shadowCloakModifier;
                fixed lv_spellDurationModifier;
                fixed lv_healingFactor;
                // Variable Initialization
                lv_a = lp_spellPower;
                lv_baseSP = 18.0;
                lv_spellDamageModifier = lp_dmg;
                lv_shadowCloakModifier = 1.0;
                lv_spellDurationModifier = 1.0;
                lv_healingFactor = 1.0;
                // Implementation
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ConjurersCharm&quot;) == true)) {
                    lv_shadowCloakModifier = 0.5;
                }
                else {
                }
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;NaturesGraceStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_a * 2.0), 2));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;NaturesGraceStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_a / 10.0), 2));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;MineralTapStats&quot;, &quot;Amount&quot;, lp_player, FixedToString((5.0 + ((lv_a - lv_baseSP) * 2.0)), 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;ClairvoyancePersistent&quot;, &quot;RevealRadius&quot;, lp_player, FixedToString((12.0 + ((lv_a - lv_baseSP) * 0.4)), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostArmorDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((3.0 + ((lv_a - lv_baseSP) * 0.67)) * lv_spellDamageModifier), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostArmorDamage&quot;, &quot;AttributeBonus[Robotic]&quot;, lp_player, FixedToString((1.0 + ((lv_a - lv_baseSP) * 0.4)), 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;SiphonLifeStats&quot;, &quot;Amount&quot;, lp_player, FixedToString(((14.0 + ((lv_a - lv_baseSP) * 0.8)) * lv_spellDamageModifier), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;AfflictionDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((5.0 + ((lv_a - lv_baseSP) * 0.4)) * lv_spellDamageModifier), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;ShadowCloakDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((30.0 + ((lv_a - lv_baseSP) * 3.0))*lv_spellDamageModifier*lv_shadowCloakModifier), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;GuardianSpiritStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString(((100.0 + ((lv_a - lv_baseSP) * 6.0)) * lv_healingFactor), 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;GuardianSpiritStats&quot;, &quot;Amount&quot;, lp_player, FixedToString(((1.0 + ((lv_a - lv_baseSP) * 0.125)) * lv_healingFactor), 3));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;VengefulMurlocSkullDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((2.0 + ((lv_a - lv_baseSP) * 0.8)), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CelestialOrbHealAmount&quot;, &quot;Amount&quot;, lp_player, FixedToString(((5.0 + ((lv_a - lv_baseSP) * 1.0)) * lv_healingFactor), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsGoldenHauberkHeal&quot;, &quot;Amount&quot;, lp_player, FixedToString((20.0 * lv_healingFactor), 1));
                if (((gv_raining || gv_winter) == true)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StormwizardsRobesDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((lv_a * 0.75) * 1.5), 1));
                }
                else {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StormwizardsRobesDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((lv_a * 0.75) * 1.0), 1));
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;LeatherCoat&quot;) == true)) {
                    lv_spellDurationModifier += 0.2;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;HighlandGuppy&quot;) == true)) {
                    lv_spellDurationModifier += 0.2;
                }
                else {
                }
                lv_spellDurationModifier = libNtve_gf_ArithmeticRealClamp(lv_spellDurationModifier, 0.1, 2.0);
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;MineralTap&quot;, &quot;Duration&quot;, lp_player, FixedToString((30.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;ClairvoyancePersistent&quot;, &quot;ExpireDelay&quot;, lp_player, FixedToString((5.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;Clairvoyance&quot;, &quot;Duration&quot;, lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;ClairvoyanceNecromancerBonus&quot;, &quot;Duration&quot;, lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;FrostArmor&quot;, &quot;Duration&quot;, lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;FrostArmorDrain&quot;, &quot;Duration&quot;, lp_player, FixedToString((5.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;SiphonLife&quot;, &quot;Duration&quot;, lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;Affliction&quot;, &quot;Duration&quot;, lp_player, FixedToString((12.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;AfflictionArmorShred&quot;, &quot;Duration&quot;, lp_player, FixedToString((12.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;GuardianSpirit&quot;, &quot;Duration&quot;, lp_player, FixedToString((20.0 * lv_spellDurationModifier), 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;GuardianSpiritLingering&quot;, &quot;Duration&quot;, lp_player, FixedToString((10.0 * lv_spellDurationModifier), 1));
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;NecromancersNecklace&quot;) == true)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;AfflictionSearch&quot;, &quot;MaxCount&quot;, lp_player, FixedToString(2.0, 0));
                }
                else {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;AfflictionSearch&quot;, &quot;MaxCount&quot;, lp_player, FixedToString(1.0, 0));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CDEE9A00">
        <ScriptCode>
            void gf_UpdateSpellCosts (int lp_player) {
                // Variable Declarations
                fixed lv_energyFlatModifier;
                fixed lv_energyPercentageModifier;
                fixed lv_lifeFlatModifier;
                fixed lv_lifePercentageModifier;
                fixed lv_warlockSpecialMod;
                fixed lv_x;
                // Variable Initialization
                lv_energyPercentageModifier = 1.0;
                lv_warlockSpecialMod = 1.0;
                // Implementation
                if ((StringSub(gv_perks[lp_player], 20, 20) == &quot;1&quot;)) {
                    lv_energyPercentageModifier -= 0.05;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;MysticsTribalShield&quot;) == true)) {
                    lv_energyPercentageModifier -= 0.1;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WarlocksVestments&quot;) == true)) {
                    lv_warlockSpecialMod -= 0.25;
                    lv_lifePercentageModifier += 0.25;
                }
                else {
                }
                lv_x = ((50.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
                lv_x = ((50.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;MineralTap&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;MineralTap&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
                lv_x = ((60.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Clairvoyance&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Clairvoyance&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
                lv_x = ((60.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;FrostArmor&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;FrostArmor&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
                lv_x = ((70.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;SiphonLife&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;SiphonLife&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
                lv_x = ((80.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Affliction&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Affliction&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
                lv_x = ((60.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;ShadowCloak&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;ShadowCloak&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
                lv_x = ((90.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;GuardianSpirit&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;GuardianSpirit&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
                lv_x = ((200.0 - lv_energyFlatModifier) * lv_energyPercentageModifier);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;MysteriousArcaneRitual&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_warlockSpecialMod), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;MysteriousArcaneRitual&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString((lv_x * lv_lifePercentageModifier), 0));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E4AD56E7">
        <ScriptCode>
            void gf_UpdateStatsAll (int lp_player) {
                // Variable Declarations
                fixed lv_attackDamage;
                fixed lv_attackSpeed;
                fixed lv_armorPenetration;
                fixed lv_attackRange;
                fixed lv_spellDamageModifier;
                fixed lv_damageAnimals;
                fixed lv_damageTrees;
                fixed lv_damageStructures;
                fixed lv_spikeTrapBonusDamage;
                fixed lv_bearWit;
                fixed lv_life;
                fixed lv_lifeFactor;
                fixed lv_lifeRegen;
                fixed lv_energyRegen;
                fixed lv_intelligence;
                fixed lv_willpower;
                fixed lv_storedValue;
                const int lv_damagePrecision = 1;
                // Variable Initialization
                lv_spellDamageModifier = 1.0;
                lv_lifeFactor = 1.0;
                lv_lifeRegen = 1.0;
                // Implementation
                if ((gv_playerData[lp_player].lv_alive == true)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/654EB078&quot;), false);
                    lv_attackDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    lv_damageAnimals = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    lv_damageTrees = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    lv_damageStructures = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player));
                    if ((StringSub(gv_perks[lp_player], 7, 7) == &quot;1&quot;)) {
                        lv_attackDamage += 1.0;
                    }
                    else {
                    }
                    if ((StringSub(gv_perks[lp_player], 26, 26) == &quot;1&quot;)) {
                        lv_attackDamage += (IntToFixed(UnitLevel(gv_playerData[lp_player].lv_kobold)) * 0.2);
                    }
                    else {
                    }
                    lv_attackDamage *= (1.0 + (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player)) * 0.01));
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;EmpoweredLightning&quot;) == true)) {
                        lv_attackDamage *= 1.5;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ObedienceRod&quot;) == true)) {
                        lv_attackDamage *= 0.5;
                        lv_damageAnimals = 0.0;
                        lv_damageStructures *= 0.5;
                        lv_damageTrees *= 0.5;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;RepeatingCrossbow&quot;) == true)) {
                        lv_attackDamage *= 0.5;
                        lv_damageAnimals *= 0.5;
                        lv_damageStructures *= 0.5;
                        lv_damageTrees *= 0.5;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;BerserkersBattleAxe&quot;) == true)) {
                        lv_damageStructures += 8.0;
                        lv_damageTrees += 8.0;
                    }
                    else {
                    }
                    lv_attackDamage = Round(lv_attackDamage);
                    lv_damageAnimals = Round(lv_damageAnimals);
                    lv_damageStructures = Round(lv_damageStructures);
                    lv_damageTrees = Round(lv_damageTrees);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BlunderbussDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BlunderbussDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BlunderbussDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BlunderbussDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamageExplosive&quot;, &quot;Amount&quot;, lp_player, FixedToString((lv_attackDamage * 1.3), lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamageExplosive&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamageExplosive&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamageExplosive&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ElderWandDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ElderWandDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ElderWandDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ElderWandDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;VenomousArbalestDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;VenomousArbalestDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;VenomousArbalestDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;VenomousArbalestDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ViciousJavelinDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((lv_attackDamage * 1.25), lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ViciousJavelinDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ViciousJavelinDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ViciousJavelinDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CelestialOrbDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CelestialOrbDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CelestialOrbDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CelestialOrbDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamageNoProc&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamageNoProc&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamageNoProc&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamageNoProc&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageRight&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageRight&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageRight&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageRight&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageLeft&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageLeft&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageLeft&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageLeft&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBeamDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_attackDamage, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBeamDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(lv_damageAnimals, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBeamDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(lv_damageTrees, lv_damagePrecision));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBeamDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(lv_damageStructures, lv_damagePrecision));
                    if ((StringSub(gv_perks[lp_player], 39, 39) == &quot;1&quot;)) {
                        lv_spikeTrapBonusDamage = 1.1;
                    }
                    else {
                        lv_spikeTrapBonusDamage = 1.0;
                    }
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;SpikeTrapDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((lv_attackDamage * 1.5) * lv_spikeTrapBonusDamage), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;SpikeTrapDamage&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, FixedToString(((lv_attackDamage * 1.5) * lv_spikeTrapBonusDamage), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;VenomousArbalestPoisonDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((lv_attackDamage * 0.5) / 10.0), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;SharpIronPickaxeBleed&quot;, &quot;Amount&quot;, lp_player, FixedToString(((lv_attackDamage * 0.5) / 6.0), 1));
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Artisanship25&quot;) == true)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;AutomatedDefenseTurretDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(Round((35.0 + ((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player)) + StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player))) * 0.2))), lv_damagePrecision));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;WatchTowerDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(Round((35.0 + ((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player)) + StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player))) * 0.2))), lv_damagePrecision));
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ViciouslySharpArmblade&quot;) == true)) {
                        lv_armorPenetration += 50.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;LiquidatorSpellblade&quot;) == true)) {
                        lv_armorPenetration += 100.0;
                    }
                    else {
                    }
                    lv_armorPenetration = libNtve_gf_ArithmeticRealClamp(lv_armorPenetration, 0.0, 100.0);
                    lv_armorPenetration *= 0.01;
                    lv_armorPenetration = (1.0 - lv_armorPenetration);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BlunderbussDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CravensFishStickerDamageExplosive&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ElderWandDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;VenomousArbalestDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ViciousJavelinDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;CelestialOrbDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowDamageNoProc&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageRight&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TwinThrowingAxesDamageLeft&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBeamDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MeleeDamageDummy&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RangedDamageDummy&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString(lv_armorPenetration, 2));
                    lv_attackRange = gf_CalcAttackRange(lp_player);
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;KoboldAttackMeleeBash&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;KoboldAttackMeleeSlash&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;Blunderbuss&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;Wand&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;CravensFishSticker&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;VenomousArbalest&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;CelestialOrb&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;RepeatingCrossbow&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeatingCrossbowSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, lp_player, FixedToString((lv_attackRange * 1.2), 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;TwinThrowingAxesRanged&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;FrostNeedle&quot;, &quot;Range&quot;, lp_player, FixedToString(lv_attackRange, 1));
                    UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;BearShamanWillpowerStack&quot;, 40);
                    lv_bearWit = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_bearWit - IntToFixed(gv_bearWilllpowerBonus[lp_player])), 0));
                    gv_bearWilllpowerBonus[lp_player] = 0;
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;BearShamansShroud&quot;) == true)) {
                        lv_bearWit = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                        gv_bearWilllpowerBonus[lp_player] = FixedToInt(libNtve_gf_ArithmeticRealClamp((lv_attackDamage * 0.1), 0.0, 40.0));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_bearWit + IntToFixed(gv_bearWilllpowerBonus[lp_player])), 0));
                        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;BearShamanWillpowerStack&quot;, gv_playerData[lp_player].lv_kobold, gv_bearWilllpowerBonus[lp_player]);
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;BearShamanWillpower&quot;, &quot;Amount&quot;, lp_player, FixedToString(gv_bearWilllpowerBonus[lp_player], 0));
                    }
                    else {
                    }
                    lv_attackSpeed = gf_CalcAttackspeed(lp_player);
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;KoboldAttackMeleeBash&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;KoboldAttackMeleeSlash&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;Blunderbuss&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;CravensFishSticker&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;Wand&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;VenomousArbalest&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;CelestialOrb&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;RepeatingCrossbow&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;TwinThrowingAxesRanged&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;FrostNeedle&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBeamCreatePersistent&quot;, &quot;PeriodicPeriodArray[&quot; + IntToString(0) + &quot;]&quot;, lp_player, FixedToString(lv_attackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBeamSilence&quot;, &quot;Duration&quot;, lp_player, FixedToString((lv_attackSpeed + 0.0625), 4));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;Speed&quot;, lp_player, FixedToString(gf_CalcMovespeed(lp_player), 2));
                    lv_storedValue = UnitGetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropLife, c_unitPropCurrent);
                    lv_life = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    lv_life *= 10.0;
                    lv_lifeFactor += (gv_skillForaging[lp_player] * 0.01);
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;GarishGladiatorsGarb&quot;) == true)) {
                        lv_lifeFactor += 0.1;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WarlocksVestments&quot;) == true)) {
                        lv_lifeFactor += 0.4;
                    }
                    else {
                    }
                    lv_life *= lv_lifeFactor;
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(lv_life, 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(lv_life, 2));
                    UnitSetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropLife, lv_storedValue);
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ForestConnection&quot;) == true)) {
                        lv_lifeRegen += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GrowingTreeModify&quot;, &quot;VitalArray[&quot; + IntToString(0) + &quot;].Change&quot;, lp_player)) * IntToFixed(UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;ForestConnection&quot;)));
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;TrollFrenzy&quot;) == true)) {
                        lv_lifeRegen += 1.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;CookingExpertiseII&quot;) == true)) {
                        lv_lifeRegen += 1.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;GoodHost&quot;) == true)) {
                        lv_lifeRegen += 1.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;InfirmaryRegen&quot;) == true)) {
                        lv_lifeRegen += 2.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ChefsInspiration&quot;) == true)) {
                        lv_lifeRegen += 3.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WatchTowerGarrisonCargoBuff&quot;) == true) &amp;&amp; (gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerInfirmary == true)) {
                        lv_lifeRegen += 10.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;GravesingersClawDebuff&quot;) == true)) {
                        lv_lifeRegen *= gv_gravesingerHealFactor;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WarlocksVestments&quot;) == true)) {
                        lv_lifeRegen *= 0.0;
                    }
                    else {
                    }
                    lv_lifeRegen *= gv_playerData[lp_player].lv_hungerRegenPenaltyFactor;
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString(lv_lifeRegen, 2));
                    lv_storedValue = UnitGetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropEnergy, c_unitPropCurrent);
                    lv_intelligence = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;EnergyMax&quot;, lp_player, FixedToString((lv_intelligence * 4.0), 2));
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ForestConnectionEnergy&quot;) == true)) {
                        lv_energyRegen += (2.0 * IntToFixed(UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;ForestConnectionEnergy&quot;)));
                    }
                    else {
                    }
                    lv_energyRegen += (lv_intelligence / 20.0);
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ToxicFrog&quot;) == true)) {
                        lv_energyRegen += 10.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;StormwizardsRobes&quot;) == true) &amp;&amp; ((gv_raining == true) || (gv_winter == true))) {
                        lv_energyRegen += 1.0;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;EnergyDrain&quot;) == true)) {
                        lv_energyRegen -= 1.0;
                    }
                    else {
                    }
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;EnergyRegenRate&quot;, lp_player, FixedToString(lv_energyRegen, 2));
                    UnitSetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropEnergy, lv_storedValue);
                    lv_willpower = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;EmpoweredLightning&quot;) == true)) {
                        lv_spellDamageModifier += 1.0;
                    }
                    else {
                    }
                    gf_UpdateSpellValues(lv_willpower, lv_spellDamageModifier, lp_player);
                    gf_UpdatePetStats(lp_player);
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/EAB88F24&quot;), false);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7ACD901D">
        <ScriptCode>
            fixed gf_CalcAttackspeed (int lp_player) {
                // Variable Declarations
                fixed lv_a;
                fixed lv_baseAttackSpeed;
                fixed lv_attacksPerSecond;
                fixed lv_percentBonus;
                fixed lv_value;
                // Variable Initialization
                lv_baseAttackSpeed = gf_BaseWeaponSpeed(lp_player);
                lv_attacksPerSecond = (1.0 / lv_baseAttackSpeed);
                lv_percentBonus = 1.0;
                // Implementation
                lv_percentBonus += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player)) * 0.02);
                if ((StringSub(gv_perks[lp_player], 9, 9) == &quot;1&quot;)) {
                    lv_percentBonus += 0.04;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;SetHeavyIron&quot;) == true)) {
                    lv_percentBonus += 0.08;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;SlipperyEel&quot;) == true)) {
                    lv_percentBonus += 0.08;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;HuntsmansJacket&quot;) == true) &amp;&amp; (gf_RangedWeapon(gv_playerData[lp_player].lv_kobold) == false)) {
                    lv_percentBonus += 0.1;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;TrollFrenzy&quot;) == true)) {
                    lv_percentBonus += 0.15;
                }
                else {
                }
                if ((gv_skillForaging[lp_player] &gt;= 20)) {
                    lv_percentBonus += 0.15;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;BloodcleaverHaste&quot;) == true)) {
                    lv_percentBonus += 0.15;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;GarishGladiatorsGarb&quot;) == true)) {
                    lv_percentBonus += 0.1;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;BerserkersBattleAxe&quot;) == true)) {
                    lv_percentBonus += 0.25;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WolfsbanePassive&quot;) == true)) {
                    lv_percentBonus += 0.3;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;FrostbitePositive&quot;) == true)) {
                    lv_percentBonus += 0.25;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;OutlandishHeartpiercer&quot;) == true)) {
                    lv_percentBonus += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;OutlandishHeartpiercerBonus&quot;, &quot;Amount&quot;, lp_player)) * 0.01);
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;MurlocRage&quot;) == true)) {
                    lv_percentBonus += 0.4;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;EmpoweredLightning&quot;) == true)) {
                    lv_percentBonus += 0.5;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WolfsbanePassiveStronger&quot;) == true)) {
                    lv_percentBonus += 0.6;
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WolfsbaneSpeed&quot;, &quot;Amount&quot;, lp_player, IntToString(60));
                }
                else {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WolfsbaneSpeed&quot;, &quot;Amount&quot;, lp_player, IntToString(30));
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ThrowingFrenzy&quot;) == true)) {
                    lv_percentBonus += (0.25 * UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;ThrowingFrenzy&quot;));
                }
                else {
                }
                lv_attacksPerSecond *= lv_percentBonus;
                lv_value = (1.0 / lv_attacksPerSecond);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E0413079">
        <ScriptCode>
            fixed gf_CalcAttackRange (int lp_player) {
                // Variable Declarations
                fixed lv_baseAttackRange;
                fixed lv_flatBonus;
                fixed lv_percentBonus;
                bool lv_rangedWeapon;
                fixed lv_value;
                // Variable Initialization
                lv_percentBonus = 1.0;
                lv_rangedWeapon = gf_RangedWeapon(gv_playerData[lp_player].lv_kobold);
                // Implementation
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;FrostNeedle&quot;) == true)) {
                    lv_baseAttackRange = 6.0;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;RoughBlunderbuss&quot;) == true)) {
                    lv_baseAttackRange = 4.0;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ElderWand&quot;) == true)) {
                    lv_baseAttackRange = 4.0;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;CravensFishSticker&quot;) == true)) {
                    lv_baseAttackRange = 5.5;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;VenomousArbalest&quot;) == true)) {
                    lv_baseAttackRange = 5.0;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;CelestialOrb&quot;) == true)) {
                    lv_baseAttackRange = 3.5;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;RepeatingCrossbow&quot;) == true)) {
                    lv_baseAttackRange = 4.5;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;TwinThrowingAxes&quot;) == true)) {
                    lv_baseAttackRange = 4.0;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;GoldenPolearm&quot;) == true)) {
                    lv_baseAttackRange = 1.25;
                }
                else if (true) {
                    lv_baseAttackRange = 0.5;
                }
                if ((lv_rangedWeapon == true)) {
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;HuntsmansJacket&quot;) == true)) {
                        lv_flatBonus += 1.0;
                    }
                    else {
                    }
                    if ((StringSub(gv_perks[lp_player], 38, 38) == &quot;1&quot;)) {
                        lv_flatBonus += 0.5;
                    }
                    else {
                    }
                }
                else {
                }
                lv_value = ((lv_baseAttackRange + lv_flatBonus) * lv_percentBonus);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9FB07DA3">
        <ScriptCode>
            fixed gf_CalcMovespeed (int lp_player) {
                // Variable Declarations
                fixed lv_baseMoveSpeed;
                fixed lv_flatBonus;
                fixed lv_percentBonus;
                fixed lv_value;
                // Variable Initialization
                lv_percentBonus = 1.0;
                // Implementation
                if ((UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;Running&quot;) == 1) &amp;&amp; 
                        UnitBehaviorEnabled(gv_playerData[lp_player].lv_kobold, &quot;Running&quot;)) {
                    lv_baseMoveSpeed = 2.5;
                }
                else {
                    lv_baseMoveSpeed = 1.5;
                }
                lv_flatBonus += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player)) * 0.01);
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;EnergyReserves&quot;) == true)) {
                    lv_percentBonus += 0.03;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;BerserkersBattleAxe&quot;) == true)) {
                    lv_percentBonus += 0.05;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WellFedStag&quot;) == true)) {
                    lv_percentBonus += 0.05;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;TrollFrenzy&quot;) == true)) {
                    lv_percentBonus += 0.05;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;BloodcleaverHaste&quot;) == true)) {
                    lv_percentBonus += 0.05;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Inspired&quot;) == true)) {
                    lv_percentBonus += 0.05;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;MurlocRage&quot;) == true)) {
                    lv_percentBonus += 0.1;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;FrostbitePositive&quot;) == true)) {
                    lv_percentBonus += 0.1;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;AdrenalineRush&quot;) == true)) {
                    lv_percentBonus += 0.1;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WolfsbanePassive&quot;) == true)) {
                    lv_percentBonus += 0.2;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ShadowCloak&quot;) == true)) {
                    lv_percentBonus += 0.2;
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ThrowingFrenzy&quot;) == true)) {
                    lv_percentBonus += (0.04 * UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;ThrowingFrenzy&quot;));
                }
                else {
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;WolfsbanePassiveStronger&quot;) == true)) {
                    lv_percentBonus += 0.4;
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WolfsbaneSpeed&quot;, &quot;ArmorReduction&quot;, lp_player, IntToString(40));
                }
                else {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WolfsbaneSpeed&quot;, &quot;ArmorReduction&quot;, lp_player, IntToString(20));
                }
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;SpellbreakerHaste&quot;) == true)) {
                    lv_percentBonus += 0.5;
                }
                else {
                }
                lv_value = ((lv_baseMoveSpeed + lv_flatBonus) * lv_percentBonus);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C7DCBC94">
        <ScriptCode>
            fixed gf_BaseWeaponSpeed (int lp_player) {
                // Variable Declarations
                const fixed lv_baseRanged = 1.85;
                const fixed lv_baseMelee = 1.5;
                fixed lv_value;
                // Variable Initialization
                lv_value = 5.0;
                // Implementation
                if ((gf_RangedWeapon(gv_playerData[lp_player].lv_kobold) == true)) {
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;RepeatingCrossbow&quot;) == true)) {
                        lv_value = 2.6;
                    }
                    else {
                        lv_value = lv_baseRanged;
                    }
                }
                else if (true) {
                    lv_value = lv_baseMelee;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6398CA63">
        <ScriptCode>
            bool gf_RangedWeapon (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                bool lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if (((UnitHasBehavior(lp_unit, &quot;RoughBlunderbuss&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;CravensFishSticker&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;VenomousArbalest&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;ElderWand&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;CelestialOrb&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;RepeatingCrossbow&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;TwinThrowingAxes&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;FrostNeedle&quot;) == true))) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C5FA7CF7">
        <ScriptCode>
            bool gf_RangedAttack (string lp_effect) {
                // Variable Declarations
                bool lv_vale;
                // Variable Initialization
                // Implementation
                if (((lp_effect == &quot;BlunderbussDamage&quot;) || (lp_effect == &quot;ElderWandDamage&quot;) || (lp_effect == &quot;VenomousArbalestDamage&quot;) || (lp_effect == &quot;CravensFishStickerDamage&quot;) || (lp_effect == &quot;CravensFishStickerDamageExplosive&quot;) || (lp_effect == &quot;ViciousJavelinDamage&quot;) || (lp_effect == &quot;CelestialOrbDamage&quot;) || (lp_effect == &quot;RepeatingCrossbowDamage&quot;) || (lp_effect == &quot;RepeatingCrossbowDamageNoProc&quot;) || (lp_effect == &quot;TwinThrowingAxesDamageLeft&quot;) || (lp_effect == &quot;TwinThrowingAxesDamageRight&quot;) || (lp_effect == &quot;FrostBeamDamage&quot;))) {
                    lv_vale = true;
                }
                else {
                }
                return lv_vale;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D9345E57">
        <ScriptCode>
            bool gf_NormalAttack (string lp_effect) {
                // Variable Declarations
                bool lv_vale;
                // Variable Initialization
                // Implementation
                if (((lp_effect == &quot;MeleeDamage&quot;) || (lp_effect == &quot;BlunderbussDamage&quot;) || (lp_effect == &quot;ElderWandDamage&quot;) || (lp_effect == &quot;VenomousArbalestDamage&quot;) || (lp_effect == &quot;CravensFishStickerDamage&quot;) || (lp_effect == &quot;CravensFishStickerDamageExplosive&quot;) || (lp_effect == &quot;ViciousJavelinDamage&quot;) || (lp_effect == &quot;CelestialOrbDamage&quot;) || (lp_effect == &quot;RepeatingCrossbowDamage&quot;) || (lp_effect == &quot;RepeatingCrossbowDamageNoProc&quot;) || (lp_effect == &quot;TwinThrowingAxesDamageLeft&quot;) || (lp_effect == &quot;TwinThrowingAxesDamageRight&quot;) || (lp_effect == &quot;FrostBeamDamage&quot;))) {
                    lv_vale = true;
                }
                else {
                }
                return lv_vale;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="97D3675F">
        <ScriptCode>
            fixed gf_AttackCooldown (unit lp_unit) {
                // Implementation
                return (UnitWeaponPeriodRemaining(lp_unit, 1) * 0.0625);
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="2E293C1A">
        <Item Type="CustomScript" Id="7061A1FE"/>
        <Item Type="CustomScript" Id="BCB7C471"/>
        <Item Type="CustomScript" Id="2F25950D"/>
        <Item Type="CustomScript" Id="24930B40"/>
        <Item Type="CustomScript" Id="911B8E9C"/>
        <Item Type="CustomScript" Id="0878F983"/>
    </Element>
    <Element Type="CustomScript" Id="7061A1FE">
        <ScriptCode>
            point gf_GetTeamStart (int lp_player) {
                // Variable Declarations
                point lv_point;
                // Variable Initialization
                lv_point = gv_center;
                // Implementation
                if ((gv_tutorial == true)) {
                    lv_point = PointFromId(1);
                }
                else {
                    lv_point = gv_teamStartLocation[gv_playerData[lp_player].lv_team];
                }
                return lv_point;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BCB7C471">
        <ScriptCode>
            text gf_GetPlayerName (int lp_player, int lp_includeTitle) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                lv_value = StringExternal(&quot;Param/Value/9403C227&quot;);
                // Implementation
                if (((lp_player &gt;= 0) &amp;&amp; (lp_player &lt;= 15))) {
                    if ((PlayerType(lp_player) != c_playerTypeUser)) {
                        if ((gv_playerData[lp_player].lv_isAI == true)) {
                            lv_value = gv_aIData[lp_player].lv_name;
                        }
                        else {
                            lv_value = StringExternal(&quot;Param/Value/C0CE5055&quot;);
                        }
                    }
                    else {
                        lv_value = PlayerName(lp_player);
                        if ((lp_includeTitle == 0) &amp;&amp; (gf_GetActiveTitleIndex(lp_player) != -1)) {
                            lv_value = gf_TitleFormat(lp_player, gf_GetActiveTitleIndex(lp_player));
                        }
                        else {
                        }
                    }
                }
                else {
                    lv_value = StringExternal(&quot;Param/Value/1AF732C5&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2F25950D">
        <ScriptCode>
            int gf_GetTeamOfPlayer (int lp_player) {
                int auto1E1F9EA1_ae;
                int auto1E1F9EA1_ai;
                // Variable Declarations
                int lv_a;
                int lv_value;
                // Variable Initialization
                // Implementation
                if (((lp_player &gt;= 0) &amp;&amp; (lp_player &lt;= gv_players))) {
                    if ((gv_aIFFATestingOverride == false)) {
                        auto1E1F9EA1_ae = gv_activeTeams;
                        auto1E1F9EA1_ai = 1;
                        lv_a = 1;
                        for ( ; ( (auto1E1F9EA1_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto1E1F9EA1_ae) || (auto1E1F9EA1_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto1E1F9EA1_ae) ) ; lv_a += auto1E1F9EA1_ai ) {
                            if ((PlayerGroupHasPlayer(gv_teamData[lv_a].lv_members, lp_player) == true)) {
                                lv_value = lv_a;
                                lv_a = 100;
                            }
                            else {
                            }
                        }
                    }
                    else {
                        lv_value = lp_player;
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="24930B40">
        <ScriptCode>
            text gf_GetTribeTextOfPlayer (int lp_player) {
                // Variable Declarations
                int lv_team;
                text lv_value;
                // Variable Initialization
                lv_team = gv_playerData[lp_player].lv_team;
                // Implementation
                if (((lv_team &gt;= 1) &amp;&amp; (lv_team &lt;= gv_activeTeams))) {
                    lv_value = TextWithColor(gv_teamData[lv_team].lv_name, gv_teamData[lv_team].lv_color);
                }
                else {
                    lv_value = StringExternal(&quot;Param/Value/372F2B83&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="911B8E9C">
        <ScriptCode>
            text gf_GetTribeTextOfTeam (int lp_team) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                // Implementation
                if (((lp_team &gt;= 1) &amp;&amp; (lp_team &lt;= gv_activeTeams))) {
                    lv_value = TextWithColor(gv_teamData[lp_team].lv_name, gv_teamData[lp_team].lv_color);
                }
                else {
                    lv_value = StringExternal(&quot;Param/Value/48E8C17F&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0878F983">
        <ScriptCode>
            int gf_AveragePlayerLevel (playergroup lp_group) {
                // Variable Declarations
                int lv_a;
                int lv_value;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(lp_group);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) &amp;&amp; (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                        lv_value += gv_acclvl[PlayerGroupLoopCurrent()];
                        lv_a += 1;
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                if ((lv_a != 0)) {
                    lv_value /= lv_a;
                }
                else {
                    lv_value = 20;
                }
                lv_value = libNtve_gf_ArithmeticIntClamp(lv_value, 1, 20);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="CD0BDBE8">
        <Item Type="Trigger" Id="0F7A84E2"/>
        <Item Type="CustomScript" Id="EF97B825"/>
        <Item Type="Comment" Id="CEB3E8B1"/>
        <Item Type="CustomScript" Id="64B6AC26"/>
        <Item Type="CustomScript" Id="386D1FBB"/>
        <Item Type="CustomScript" Id="7EBDB30D"/>
        <Item Type="CustomScript" Id="62507A00"/>
        <Item Type="CustomScript" Id="26DAE941"/>
        <Item Type="CustomScript" Id="3D46C7CE"/>
        <Item Type="CustomScript" Id="E413F08B"/>
        <Item Type="CustomScript" Id="CB02E85E"/>
        <Item Type="CustomScript" Id="23B25801"/>
        <Item Type="CustomScript" Id="7193829A"/>
        <Item Type="CustomScript" Id="26D11E38"/>
        <Item Type="CustomScript" Id="9E38FF71"/>
        <Item Type="CustomScript" Id="5F8D40F8"/>
        <Item Type="CustomScript" Id="5D64D414"/>
        <Item Type="CustomScript" Id="9D61C61B"/>
        <Item Type="CustomScript" Id="4EAB7D82"/>
        <Item Type="CustomScript" Id="5DD98DBC"/>
        <Item Type="CustomScript" Id="B4267328"/>
        <Item Type="CustomScript" Id="41A1F0FD"/>
        <Item Type="CustomScript" Id="2BB19F38"/>
        <Item Type="CustomScript" Id="693B9455"/>
        <Item Type="CustomScript" Id="69FE2CFB"/>
        <Item Type="CustomScript" Id="2579AE70"/>
        <Item Type="CustomScript" Id="CEBCC95E"/>
        <Item Type="CustomScript" Id="14340225"/>
        <Item Type="CustomScript" Id="966709F6"/>
        <Item Type="CustomScript" Id="3462D3F5"/>
        <Item Type="CustomScript" Id="59449BCC"/>
        <Item Type="CustomScript" Id="C8C787FC"/>
        <Item Type="CustomScript" Id="0109C995"/>
        <Item Type="CustomScript" Id="636D9FDE"/>
        <Item Type="CustomScript" Id="328B7620"/>
        <Item Type="CustomScript" Id="8ACF98F2"/>
        <Item Type="CustomScript" Id="F6A45B9D"/>
    </Element>
    <Element Type="Trigger" Id="0F7A84E2">
        <Event Type="FunctionCall" Id="4E686EF4"/>
        <Action Type="FunctionCall" Id="D2909A0B"/>
        <Action Type="FunctionCall" Id="3ED4FBD1"/>
        <Action Type="FunctionCall" Id="856729F7"/>
        <Action Type="FunctionCall" Id="135BA722"/>
        <Action Type="FunctionCall" Id="0149AA8E"/>
        <Action Type="FunctionCall" Id="766768F7"/>
        <Action Type="FunctionCall" Id="A303C3B1"/>
        <Action Type="FunctionCall" Id="CE321653"/>
        <Action Type="FunctionCall" Id="62DF8211"/>
        <Action Type="FunctionCall" Id="79CDDD28"/>
        <Action Type="FunctionCall" Id="1F22408A"/>
        <Action Type="FunctionCall" Id="3B0FCD8A"/>
        <Action Type="FunctionCall" Id="9D742E59"/>
        <Action Type="FunctionCall" Id="16585719"/>
        <Action Type="FunctionCall" Id="8DB7351D"/>
    </Element>
    <Element Type="FunctionCall" Id="4E686EF4">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000120"/>
    </Element>
    <Element Type="FunctionCall" Id="D2909A0B">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="69990F79"/>
        <Parameter Type="Param" Id="BF028B86"/>
    </Element>
    <Element Type="Param" Id="69990F79">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="BF028B86">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>1</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="3ED4FBD1">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="A3ABABF3"/>
        <Parameter Type="Param" Id="C321CB29"/>
    </Element>
    <Element Type="Param" Id="A3ABABF3">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="C321CB29">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>2</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="856729F7">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="746D2D2B"/>
        <Parameter Type="Param" Id="4895F5D8"/>
    </Element>
    <Element Type="Param" Id="746D2D2B">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="4895F5D8">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>3</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="135BA722">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="1129D6D2"/>
        <Parameter Type="Param" Id="4E37476A"/>
    </Element>
    <Element Type="Param" Id="1129D6D2">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="4E37476A">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>4</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="0149AA8E">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="3E9D5D4F"/>
        <Parameter Type="Param" Id="6DC5941F"/>
    </Element>
    <Element Type="Param" Id="3E9D5D4F">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="6DC5941F">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>5</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="766768F7">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="AFC31285"/>
        <Parameter Type="Param" Id="4C021208"/>
    </Element>
    <Element Type="Param" Id="AFC31285">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="4C021208">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>6</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="A303C3B1">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="CB737A5E"/>
        <Parameter Type="Param" Id="CF5BB333"/>
    </Element>
    <Element Type="Param" Id="CB737A5E">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="CF5BB333">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>7</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="CE321653">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="99403473"/>
        <Parameter Type="Param" Id="9D2B356F"/>
    </Element>
    <Element Type="Param" Id="99403473">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="9D2B356F">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>8</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="62DF8211">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="3AA85E99"/>
        <Parameter Type="Param" Id="227C8649"/>
    </Element>
    <Element Type="Param" Id="3AA85E99">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="227C8649">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>9</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="79CDDD28">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="690FB660"/>
        <Parameter Type="Param" Id="5C2C4879"/>
    </Element>
    <Element Type="Param" Id="690FB660">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="5C2C4879">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>10</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="1F22408A">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="B5CA3667"/>
        <Parameter Type="Param" Id="26FB1FFD"/>
    </Element>
    <Element Type="Param" Id="B5CA3667">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="26FB1FFD">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>11</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="3B0FCD8A">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="16FFC97C"/>
        <Parameter Type="Param" Id="5D81B025"/>
    </Element>
    <Element Type="Param" Id="16FFC97C">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="5D81B025">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>12</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="9D742E59">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="F51A455B"/>
        <Parameter Type="Param" Id="4458A85A"/>
    </Element>
    <Element Type="Param" Id="F51A455B">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="4458A85A">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>13</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="16585719">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="099C1A12"/>
        <Parameter Type="Param" Id="CC72E7C7"/>
    </Element>
    <Element Type="Param" Id="099C1A12">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="CC72E7C7">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>14</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="8DB7351D">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="7D278C76"/>
        <Parameter Type="Param" Id="0C67EF53"/>
        <Parameter Type="Param" Id="21A7EC3A"/>
    </Element>
    <Element Type="Param" Id="0C67EF53">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="437A2BAF"/>
        <Value>nostrobskalufs</Value>
        <ValueType Type="string"/>
    </Element>
    <Element Type="Param" Id="21A7EC3A">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B3940B7"/>
        <Value>15</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="CustomScript" Id="EF97B825">
        <ScriptCode>
            void TemporaryBank_Init(){
                int i = 0;
                bank b;
                for(;i&lt;15;i+=1){
                    b = BankLoad(&quot;KoboldBroot&quot;, i);
                    BankSave(b);
                }
            }
        </ScriptCode>
        <InitFunc>TemporaryBank_Init</InitFunc>
    </Element>
    <Element Type="Comment" Id="CEB3E8B1">
        <Comment>
            Comment
        </Comment>
    </Element>
    <Element Type="CustomScript" Id="64B6AC26">
        <ScriptCode>
            string gf_GetRandom8String () {
                int auto0D7BAD48_ae;
                int auto0D7BAD48_ai;
                // Variable Declarations
                int lv_a;
                string lv_value;
                // Variable Initialization
                lv_value = &quot;00000000&quot;;
                // Implementation
                auto0D7BAD48_ae = 8;
                auto0D7BAD48_ai = 1;
                lv_a = 1;
                for ( ; ( (auto0D7BAD48_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto0D7BAD48_ae) || (auto0D7BAD48_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto0D7BAD48_ae) ) ; lv_a += auto0D7BAD48_ai ) {
                    lv_value = StringReplace(lv_value, IntToString(RandomInt(1, 9)), lv_a, lv_a);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="386D1FBB">
        <ScriptCode>
            string gf_GetRandom12String () {
                int auto9343602C_ae;
                int auto9343602C_ai;
                // Variable Declarations
                int lv_a;
                string lv_value;
                // Variable Initialization
                lv_value = &quot;000000000000&quot;;
                // Implementation
                auto9343602C_ae = 12;
                auto9343602C_ai = 1;
                lv_a = 1;
                for ( ; ( (auto9343602C_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto9343602C_ae) || (auto9343602C_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto9343602C_ae) ) ; lv_a += auto9343602C_ai ) {
                    lv_value = StringReplace(lv_value, IntToString(RandomInt(1, 9)), lv_a, lv_a);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7EBDB30D">
        <ScriptCode>
            void gf_BankSaveEncryptedString (string lp_key, string lp_section, string lp_value, int lp_player) {
                // Variable Declarations
                int lv_mod;
                string lv_value;
                // Variable Initialization
                lv_mod = RandomInt(2, 9);
                lv_value = &quot;&quot;;
                // Implementation
                lv_value = (StringSub(lp_value, 1, 28) + IntToString(lv_mod) + IntToString(gf_CalculateEncryptMod(lp_value, lv_mod)) + gf_GetRandom12String());
                BankValueSetFromString(BankLastCreated(), lp_section, lp_key, lv_value);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="62507A00">
        <ScriptCode>
            string gf_BankLoadEncryptedString (string lp_key, string lp_section, int lp_player) {
                // Variable Declarations
                string lv_value;
                bool lv_fail;
                // Variable Initialization
                lv_value = &quot;&quot;;
                lv_fail = true;
                // Implementation
                if ((BankKeyExists(BankLastCreated(), lp_section, lp_key) == true)) {
                    lv_value = BankValueGetAsString(BankLastCreated(), lp_section, lp_key);
                    if (gf_StringEncryptionCheck(lv_value) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_fail = false;
                    }
                    else {
                    }
                }
                else {
                }
                if ((lv_fail == true)) {
                    lv_value = (&quot;1471471471471471471471471471&quot; + &quot;5&quot; + &quot;4&quot; + gf_GetRandom12String());
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="26DAE941">
        <ScriptCode>
            bool gf_StringEncryptionCheck (string lp_string) {
                int autoDEF967ED_ae;
                int autoDEF967ED_ai;
                // Variable Declarations
                int lv_a;
                int lv_sum;
                const int lv_modIndex = 29;
                const int lv_restIndex = 30;
                int lv_mod;
                int lv_rest;
                bool lv_value;
                // Variable Initialization
                lv_mod = StringToInt(StringSub(lp_string, lv_modIndex, lv_modIndex));
                // Implementation
                autoDEF967ED_ae = 28;
                autoDEF967ED_ai = 1;
                lv_a = 1;
                for ( ; ( (autoDEF967ED_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoDEF967ED_ae) || (autoDEF967ED_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoDEF967ED_ae) ) ; lv_a += autoDEF967ED_ai ) {
                    lv_sum += StringToInt(StringSub(lp_string, lv_a, lv_a));
                }
                lv_rest = ModI(lv_sum, lv_mod);
                if ((lv_rest == StringToInt(StringSub(lp_string, lv_restIndex, lv_restIndex)))) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3D46C7CE">
        <ScriptCode>
            int gf_CalculateEncryptMod (string lp_string, int lp_modulo) {
                int autoB780BD16_ae;
                int autoB780BD16_ai;
                // Variable Declarations
                int lv_a;
                int lv_sum;
                int lv_value;
                // Variable Initialization
                // Implementation
                autoB780BD16_ae = 28;
                autoB780BD16_ai = 1;
                lv_a = 1;
                for ( ; ( (autoB780BD16_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoB780BD16_ae) || (autoB780BD16_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoB780BD16_ae) ) ; lv_a += autoB780BD16_ai ) {
                    lv_sum += StringToInt(StringSub(lp_string, lv_a, lv_a));
                }
                lv_value = ModI(lv_sum, lp_modulo);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E413F08B">
        <ScriptCode>
            string gf_ScrambleString (string lp_string) {
                int auto18FA361A_ae;
                int auto18FA361A_ai;
                // Variable Declarations
                int lv_a;
                int lv_r;
                string lv_original;
                string lv_value;
                string lv_store;
                // Variable Initialization
                lv_original = lp_string;
                lv_value = &quot;&quot;;
                lv_store = &quot;&quot;;
                // Implementation
                auto18FA361A_ae = StringLength(lp_string);
                auto18FA361A_ai = 1;
                lv_a = 1;
                for ( ; ( (auto18FA361A_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto18FA361A_ae) || (auto18FA361A_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto18FA361A_ae) ) ; lv_a += auto18FA361A_ai ) {
                    lv_r = RandomInt(1, StringLength(lv_original));
                    lv_value = (lv_value + StringSub(lv_original, lv_r, lv_r));
                    lv_original = StringReplace(lv_original, &quot;&quot;, lv_r, lv_r);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CB02E85E">
        <ScriptCode>
            bool gf_BankChecksOut (string lp_entry, string lp_section, int lp_index) {
                // Variable Declarations
                string lv_daString;
                int lv_key;
                int lv_keyValue;
                int lv_flood;
                int lv_pL;
                int lv_supposedLength;
                bool lv_value;
                // Variable Initialization
                lv_daString = &quot;&quot;;
                // Implementation
                if ((BankKeyExists(BankLastCreated(), lp_section, lp_entry) == true) &amp;&amp; (BankKeyExists(BankLastCreated(), &quot;stats&quot;, &quot;7HuRb8gn&quot;) == true) &amp;&amp; (BankKeyExists(BankLastCreated(), &quot;stats&quot;, &quot;Jyr8GxL&quot;) == true)) {
                    lv_daString = BankValueGetAsString(BankLastCreated(), lp_section, lp_entry);
                    lv_key = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), &quot;stats&quot;, &quot;7HuRb8gn&quot;), ((gv_trollz + 1) - lp_index), ((gv_trollz + 1) - lp_index)));
                    lv_keyValue = StringToInt(StringSub(lv_daString, lv_key, lv_key));
                    lv_flood = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), &quot;stats&quot;, &quot;Jyr8GxL&quot;), lp_index, lp_index));
                    lv_pL = StringLength(IntToString(gf_DecryptInt(lv_daString, lv_key, lv_flood)));
                    lv_supposedLength = (lv_key + ((lv_flood * 3) + (lv_pL * lv_keyValue)));
                    if ((StringLength(lv_daString) == lv_supposedLength)) {
                        lv_value = true;
                    }
                    else {
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="23B25801">
        <ScriptCode>
            int gf_DecryptInt (string lp_string, int lp_key, int lp_flood) {
                int autoA70D1B0F_ae;
                int autoA70D1B0F_ai;
                int auto0957306E_val;
                // Variable Declarations
                int lv_a;
                string lv_value;
                int lv_keyvalue;
                int lv_floodz;
                int lv_b;
                int lv_floodlength;
                int lv_valuespace;
                // Variable Initialization
                lv_value = &quot;&quot;;
                lv_floodlength = (3 * lp_flood);
                lv_valuespace = (StringLength(lp_string) - lv_floodlength);
                // Implementation
                lv_valuespace -= (lp_key + 1);
                autoA70D1B0F_ae = StringLength(lp_string);
                autoA70D1B0F_ai = 1;
                lv_a = 1;
                for ( ; ( (autoA70D1B0F_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoA70D1B0F_ae) || (autoA70D1B0F_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoA70D1B0F_ae) ) ; lv_a += autoA70D1B0F_ai ) {
                    auto0957306E_val = lv_a;
                    if (auto0957306E_val == lp_key) {
                        lv_keyvalue = StringToInt(StringSub(lp_string, lv_a, lv_a));
                        lv_valuespace /= lv_keyvalue;
                    }
                    else if (auto0957306E_val == (lp_key + 1)) {
                        lv_floodz = StringToInt(StringSub(lp_string, lv_a, lv_a));
                    }
                    else if (auto0957306E_val == ((lp_key + 2) + (lv_b * lv_keyvalue))) {
                        lv_b = libNtve_gf_ArithmeticIntClamp((lv_b + 1), 1, lv_valuespace);
                        lv_value = (lv_value + StringSub(lp_string, lv_a, lv_a));
                    }
                    else {
                    }
                }
                return StringToInt(lv_value);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7193829A">
        <ScriptCode>
            string gf_EncryptInt (int lp_integer, int lp_key, int lp_flood) {
                int autoB882E13B_val;
                // Variable Declarations
                string lv_integerString;
                int lv_a;
                string lv_value;
                int lv_keyvalue;
                int lv_b;
                // Variable Initialization
                lv_integerString = IntToString(lp_integer);
                lv_value = &quot;&quot;;
                lv_keyvalue = RandomInt(2, 7);
                // Implementation
                while ((StringLength(lv_value) &lt; ((lp_flood * 3) + (lp_key + (StringLength(lv_integerString) * lv_keyvalue))))) {
                    lv_a += 1;
                    autoB882E13B_val = lv_a;
                    if (autoB882E13B_val == lp_key) {
                        lv_value = (lv_value + IntToString(lv_keyvalue));
                    }
                    else if (autoB882E13B_val == (lp_key + 1)) {
                        lv_value = (lv_value + IntToString(lp_flood));
                    }
                    else if (autoB882E13B_val == ((lp_key + 2) + (lv_b * lv_keyvalue))) {
                        lv_b = libNtve_gf_ArithmeticIntClamp((lv_b + 1), 1, StringLength(lv_integerString));
                        lv_value = (lv_value + StringSub(lv_integerString, lv_b, lv_b));
                    }
                    else {
                        lv_value = (lv_value + IntToString(RandomInt(0, 9)));
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="26D11E38">
        <Disabled/>
        <ScriptCode>
            int gf_LoadAccountLevel (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true) &amp;&amp; (gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;ni6u1rK&quot;, &quot;stats&quot;, 3)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;ni6u1rK&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 2), (gv_trollz - 2))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 3, 3)));
                }
                else {
                    lv_value = 1;
                }
                if ((lv_value &gt; 20)) {
                    lv_value = 20;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9E38FF71">
        <ScriptCode>
            int gf_LoadAccountLevel (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;ni6u1rK&quot;, &quot;stats&quot;, 3)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;ni6u1rK&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 2), (gv_trollz - 2))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 3, 3)));
                }
                else {
                    lv_value = 1;
                }
                if ((lv_value &gt; 20)) {
                    lv_value = 20;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5F8D40F8">
        <Disabled/>
        <ScriptCode>
            int gf_LoadAccountXP (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true) &amp;&amp; (gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;xpJar65&quot;, &quot;stats&quot;, 6)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;xpJar65&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 5), (gv_trollz - 5))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 6, 6)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5D64D414">
        <ScriptCode>
            int gf_LoadAccountXP (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;xpJar65&quot;, &quot;stats&quot;, 6)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;xpJar65&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 5), (gv_trollz - 5))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 6, 6)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9D61C61B">
        <Disabled/>
        <ScriptCode>
            int gf_LoadAccountWins (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true) &amp;&amp; (gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;Y7rGzk0&quot;, &quot;stats&quot;, 1)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Y7rGzk0&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 0), (gv_trollz - 0))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 1, 1)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4EAB7D82">
        <ScriptCode>
            int gf_LoadAccountWins (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;Y7rGzk0&quot;, &quot;stats&quot;, 1)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Y7rGzk0&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 0), (gv_trollz - 0))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 1, 1)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5DD98DBC">
        <Disabled/>
        <ScriptCode>
            int gf_LoadAccountLosses (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true) &amp;&amp; (gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;hhgh3hha&quot;, &quot;stats&quot;, 2)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;hhgh3hha&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 1), (gv_trollz - 1))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 2, 2)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B4267328">
        <ScriptCode>
            int gf_LoadAccountLosses (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;hhgh3hha&quot;, &quot;stats&quot;, 2)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;hhgh3hha&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 1), (gv_trollz - 1))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 2, 2)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="41A1F0FD">
        <Disabled/>
        <ScriptCode>
            int gf_LoadKoboldKills (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true) &amp;&amp; (gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;bJr0nQ2&quot;, &quot;stats&quot;, 4)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;bJr0nQ2&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 3), (gv_trollz - 3))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 4, 4)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2BB19F38">
        <ScriptCode>
            int gf_LoadKoboldKills (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;bJr0nQ2&quot;, &quot;stats&quot;, 4)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;bJr0nQ2&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 3), (gv_trollz - 3))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 4, 4)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="693B9455">
        <Disabled/>
        <ScriptCode>
            int gf_LoadKoboldDeaths (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true) &amp;&amp; (gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;norl0sP&quot;, &quot;stats&quot;, 5)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;norl0sP&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 4), (gv_trollz - 4))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 5, 5)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="69FE2CFB">
        <ScriptCode>
            int gf_LoadKoboldDeaths (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_reprimanded[lp_player] == false) &amp;&amp; gf_BankChecksOut(&quot;norl0sP&quot;, &quot;stats&quot;, 5)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;norl0sP&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 4), (gv_trollz - 4))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 5, 5)));
                }
                else {
                    lv_value = 0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2579AE70">
        <Disabled/>
        <ScriptCode>
            void gf_LoadRewards (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_temp;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true)) {
                    if ((gf_ValidReward(&quot;Yb4aLtz&quot;, &quot;stats&quot;, 1) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Yb4aLtz&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 0), (gv_trolzl12 - 0))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 1, 1)));
                    }
                    else {
                        lv_temp = 4714477;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 1, 1);
                    if ((gf_ValidReward(&quot;J1klbk&quot;, &quot;stats&quot;, 2) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;J1klbk&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 1), (gv_trolzl12 - 1))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 2, 2)));
                    }
                    else {
                        lv_temp = 4714477;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 1, 8);
                    if ((gf_ValidReward(&quot;grtzk61&quot;, &quot;stats&quot;, 3) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;grtzk61&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 2), (gv_trolzl12 - 2))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 3, 3)));
                    }
                    else {
                        lv_temp = 4714477;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 1, 15);
                    if ((gf_ValidReward(&quot;HaL14rk&quot;, &quot;stats&quot;, 4) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;HaL14rk&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 3), (gv_trolzl12 - 3))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 4, 4)));
                    }
                    else {
                        lv_temp = 4714477;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 1, 22);
                    if ((gf_ValidReward(&quot;NepRk9a&quot;, &quot;stats&quot;, 5) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;NepRk9a&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 4), (gv_trolzl12 - 4))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 5, 5)));
                    }
                    else {
                        lv_temp = 1174417;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 2, 1);
                    if ((gf_ValidReward(&quot;Frvz7vl&quot;, &quot;stats&quot;, 6) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Frvz7vl&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 5), (gv_trolzl12 - 5))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 6, 6)));
                    }
                    else {
                        lv_temp = 1174417;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 2, 8);
                    if ((gf_ValidReward(&quot;oO0brtg&quot;, &quot;stats&quot;, 7) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;oO0brtg&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 6), (gv_trolzl12 - 6))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 7, 7)));
                    }
                    else {
                        lv_temp = 1174417;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 2, 15);
                    if ((gf_ValidReward(&quot;yrNyz31&quot;, &quot;stats&quot;, 8) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;yrNyz31&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 7), (gv_trolzl12 - 7))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 8, 8)));
                    }
                    else {
                        lv_temp = 1174417;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 2, 22);
                    if ((gf_ValidReward(&quot;zT5S5mn&quot;, &quot;stats&quot;, 9) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;zT5S5mn&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 8), (gv_trolzl12 - 8))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 9, 9)));
                    }
                    else {
                        lv_temp = 1471471;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 3, 1);
                    if ((gf_ValidReward(&quot;kTrK7xb&quot;, &quot;stats&quot;, 10) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;kTrK7xb&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 9), (gv_trolzl12 - 9))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 10, 10)));
                    }
                    else {
                        lv_temp = 1471471;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 3, 8);
                    if ((gf_ValidReward(&quot;nypR6ex&quot;, &quot;stats&quot;, 11) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;nypR6ex&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 10), (gv_trolzl12 - 10))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 11, 11)));
                    }
                    else {
                        lv_temp = 1471471;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 3, 15);
                    if ((gf_ValidReward(&quot;kxNn88a&quot;, &quot;stats&quot;, 12) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;kxNn88a&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 11), (gv_trolzl12 - 11))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 12, 12)));
                    }
                    else {
                        lv_temp = 1471471;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 3, 22);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CEBCC95E">
        <ScriptCode>
            void gf_LoadRewards (int lp_player, bank lp_bank) {
                // Variable Declarations
                int lv_temp;
                // Variable Initialization
                // Implementation
                if (true) {
                    if ((gf_ValidReward(&quot;Yb4aLtz&quot;, &quot;stats&quot;, 1) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Yb4aLtz&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 0), (gv_trolzl12 - 0))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 1, 1)));
                    }
                    else {
                        lv_temp = 4714477;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 1, 1);
                    if ((gf_ValidReward(&quot;J1klbk&quot;, &quot;stats&quot;, 2) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;J1klbk&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 1), (gv_trolzl12 - 1))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 2, 2)));
                    }
                    else {
                        lv_temp = 4714477;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 1, 8);
                    if ((gf_ValidReward(&quot;grtzk61&quot;, &quot;stats&quot;, 3) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;grtzk61&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 2), (gv_trolzl12 - 2))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 3, 3)));
                    }
                    else {
                        lv_temp = 4714477;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 1, 15);
                    if ((gf_ValidReward(&quot;HaL14rk&quot;, &quot;stats&quot;, 4) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;HaL14rk&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 3), (gv_trolzl12 - 3))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 4, 4)));
                    }
                    else {
                        lv_temp = 4714477;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 1, 22);
                    if ((gf_ValidReward(&quot;NepRk9a&quot;, &quot;stats&quot;, 5) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;NepRk9a&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 4), (gv_trolzl12 - 4))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 5, 5)));
                    }
                    else {
                        lv_temp = 1174417;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 2, 1);
                    if ((gf_ValidReward(&quot;Frvz7vl&quot;, &quot;stats&quot;, 6) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Frvz7vl&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 5), (gv_trolzl12 - 5))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 6, 6)));
                    }
                    else {
                        lv_temp = 1174417;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 2, 8);
                    if ((gf_ValidReward(&quot;oO0brtg&quot;, &quot;stats&quot;, 7) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;oO0brtg&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 6), (gv_trolzl12 - 6))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 7, 7)));
                    }
                    else {
                        lv_temp = 1174417;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 2, 15);
                    if ((gf_ValidReward(&quot;yrNyz31&quot;, &quot;stats&quot;, 8) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;yrNyz31&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 7), (gv_trolzl12 - 7))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 8, 8)));
                    }
                    else {
                        lv_temp = 1174417;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 2, 22);
                    if ((gf_ValidReward(&quot;zT5S5mn&quot;, &quot;stats&quot;, 9) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;zT5S5mn&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 8), (gv_trolzl12 - 8))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 9, 9)));
                    }
                    else {
                        lv_temp = 1471471;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 3, 1);
                    if ((gf_ValidReward(&quot;kTrK7xb&quot;, &quot;stats&quot;, 10) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;kTrK7xb&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 9), (gv_trolzl12 - 9))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 10, 10)));
                    }
                    else {
                        lv_temp = 1471471;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 3, 8);
                    if ((gf_ValidReward(&quot;nypR6ex&quot;, &quot;stats&quot;, 11) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;nypR6ex&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 10), (gv_trolzl12 - 10))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 11, 11)));
                    }
                    else {
                        lv_temp = 1471471;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 3, 15);
                    if ((gf_ValidReward(&quot;kxNn88a&quot;, &quot;stats&quot;, 12) == true) &amp;&amp; (gv_reprimanded[lp_player] == false)) {
                        lv_temp = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;kxNn88a&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;IbRt8q8&quot;), (gv_trolzl12 - 11), (gv_trolzl12 - 11))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;LoBfl21&quot;), 12, 12)));
                    }
                    else {
                        lv_temp = 1471471;
                    }
                    gf_SetRewardState(lp_player, lv_temp, 3, 22);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="14340225">
        <Disabled/>
        <ScriptCode>
            void gf_LoadDamageText (int lp_player, bank lp_bank) {
                // Implementation
                if ((BankKeyExists(lp_bank, &quot;Settings&quot;, &quot;DamageTextEnabled&quot;) == true)) {
                    gv_dTDamageDoneOn[lp_player] = BankValueGetAsFlag(lp_bank, &quot;Settings&quot;, &quot;DamageTextEnabled&quot;);
                }
                else {
                    gv_dTDamageDoneOn[lp_player] = true;
                }
                if ((BankKeyExists(lp_bank, &quot;Settings&quot;, &quot;DamageText2Enabled&quot;) == true)) {
                    gv_dTDamageTakenOn[lp_player] = BankValueGetAsFlag(lp_bank, &quot;Settings&quot;, &quot;DamageText2Enabled&quot;);
                }
                else {
                    gv_dTDamageTakenOn[lp_player] = true;
                }
                if ((BankKeyExists(lp_bank, &quot;Settings&quot;, &quot;DamageTextScale&quot;) == true)) {
                    gv_dTScaleValue[lp_player] = BankValueGetAsFixed(lp_bank, &quot;Settings&quot;, &quot;DamageTextScale&quot;);
                }
                else {
                    gv_dTScaleValue[lp_player] = 1.0;
                }
                if ((BankKeyExists(lp_bank, &quot;Settings&quot;, &quot;DamageTextDuration&quot;) == true)) {
                    gv_dTDurationValue[lp_player] = BankValueGetAsFixed(lp_bank, &quot;Settings&quot;, &quot;DamageTextDuration&quot;);
                }
                else {
                    gv_dTDurationValue[lp_player] = 1.0;
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="966709F6">
        <ScriptCode>
            void gf_LoadDamageText (int lp_player, bank lp_bank) {
                // Implementation
                if ((BankKeyExists(lp_bank, &quot;Settings&quot;, &quot;DamageTextEnabled&quot;) == true)) {
                    gv_dTDamageDoneOn[lp_player] = BankValueGetAsFlag(lp_bank, &quot;Settings&quot;, &quot;DamageTextEnabled&quot;);
                }
                else {
                    gv_dTDamageDoneOn[lp_player] = true;
                }
                if ((BankKeyExists(lp_bank, &quot;Settings&quot;, &quot;DamageText2Enabled&quot;) == true)) {
                    gv_dTDamageTakenOn[lp_player] = BankValueGetAsFlag(lp_bank, &quot;Settings&quot;, &quot;DamageText2Enabled&quot;);
                }
                else {
                    gv_dTDamageTakenOn[lp_player] = true;
                }
                if ((BankKeyExists(lp_bank, &quot;Settings&quot;, &quot;DamageTextScale&quot;) == true)) {
                    gv_dTScaleValue[lp_player] = BankValueGetAsFixed(lp_bank, &quot;Settings&quot;, &quot;DamageTextScale&quot;);
                }
                else {
                    gv_dTScaleValue[lp_player] = 1.0;
                }
                if ((BankKeyExists(lp_bank, &quot;Settings&quot;, &quot;DamageTextDuration&quot;) == true)) {
                    gv_dTDurationValue[lp_player] = BankValueGetAsFixed(lp_bank, &quot;Settings&quot;, &quot;DamageTextDuration&quot;);
                }
                else {
                    gv_dTDurationValue[lp_player] = 1.0;
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3462D3F5">
        <Disabled/>
        <ScriptCode>
            int gf_LoadRatingValue (int lp_player, bank lp_bank) {
                // Variable Declarations
                const int lv_o = 1;
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true) &amp;&amp; (gv_reprimanded[lp_player] == false) &amp;&amp; gf_RatingKeyValid(&quot;hJu5gRo&quot;, &quot;stats&quot;, lv_o)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;hJu5gRo&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;kjU9zLa&quot;), (gv_trolzl12 - (lv_o - 1)), (gv_trolzl12 - (lv_o - 1)))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Makkara&quot;), lv_o, lv_o)));
                }
                else {
                    lv_value = 1200;
                    if ((gv_accwins[lp_player] &gt; 25) &amp;&amp; (gv_accwins[lp_player] &gt; gv_acclosses[lp_player])) {
                        lv_value += libNtve_gf_ArithmeticIntClamp((gv_accwins[lp_player] - gv_acclosses[lp_player]), 0, 300);
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="59449BCC">
        <ScriptCode>
            int gf_LoadRatingValue (int lp_player, bank lp_bank) {
                // Variable Declarations
                const int lv_o = 1;
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_reprimanded[lp_player] == false) &amp;&amp; gf_RatingKeyValid(&quot;hJu5gRo&quot;, &quot;stats&quot;, lv_o)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;hJu5gRo&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;kjU9zLa&quot;), (gv_trolzl12 - (lv_o - 1)), (gv_trolzl12 - (lv_o - 1)))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Makkara&quot;), lv_o, lv_o)));
                }
                else {
                    lv_value = 1200;
                    if ((gv_accwins[lp_player] &gt; 25) &amp;&amp; (gv_accwins[lp_player] &gt; gv_acclosses[lp_player])) {
                        lv_value += libNtve_gf_ArithmeticIntClamp((gv_accwins[lp_player] - gv_acclosses[lp_player]), 0, 300);
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C8C787FC">
        <Disabled/>
        <ScriptCode>
            int gf_LoadRatingGames (int lp_player, bank lp_bank) {
                // Variable Declarations
                const int lv_o = 2;
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((BankVerify(lp_bank) == true) &amp;&amp; (gv_reprimanded[lp_player] == false) &amp;&amp; gf_RatingKeyValid(&quot;Ka0fazH&quot;, &quot;stats&quot;, lv_o)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Ka0fazH&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;kjU9zLa&quot;), (gv_trolzl12 - (lv_o - 1)), (gv_trolzl12 - (lv_o - 1)))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Makkara&quot;), lv_o, lv_o)));
                }
                else {
                    lv_value = 0;
                }
                if ((GameAttributeGameValue(&quot;[bnet:local/0.0/222562]2&quot;) == &quot;0001&quot;)) {
                    lv_value += 1;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0109C995">
        <ScriptCode>
            int gf_LoadRatingGames (int lp_player, bank lp_bank) {
                // Variable Declarations
                const int lv_o = 2;
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_reprimanded[lp_player] == false) &amp;&amp; gf_RatingKeyValid(&quot;Ka0fazH&quot;, &quot;stats&quot;, lv_o)) {
                    lv_value = gf_DecryptInt(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Ka0fazH&quot;), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;kjU9zLa&quot;), (gv_trolzl12 - (lv_o - 1)), (gv_trolzl12 - (lv_o - 1)))), StringToInt(StringSub(BankValueGetAsString(lp_bank, &quot;stats&quot;, &quot;Makkara&quot;), lv_o, lv_o)));
                }
                else {
                    lv_value = 0;
                }
                if ((GameAttributeGameValue(&quot;[bnet:local/0.0/222562]2&quot;) == &quot;0001&quot;)) {
                    lv_value += 1;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="636D9FDE">
        <ScriptCode>
            void gf_UpdatePerkWindow (int lp_player) {
                int autoC2CC8983_ae;
                int autoC2CC8983_ai;
                int auto38A0DA97_ae;
                int auto38A0DA97_ai;
                int auto4BE60796_ae;
                int auto4BE60796_ai;
                int auto270AD014_ae;
                int auto270AD014_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                int lv_tounlock;
                text lv_pointplural;
                text lv_point;
                text lv_points;
                int lv_strIndex;
                // Variable Initialization
                lv_point = StringExternal(&quot;Param/Value/F15D2DC4&quot;);
                lv_points = StringExternal(&quot;Param/Value/2D7AAA47&quot;);
                // Implementation
                autoC2CC8983_ae = 4;
                autoC2CC8983_ai = 1;
                lv_a = 1;
                for ( ; ( (autoC2CC8983_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC2CC8983_ae) || (autoC2CC8983_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC2CC8983_ae) ) ; lv_a += autoC2CC8983_ai ) {
                    if (((gv_perkPointsSpent[lp_player] &lt; ((lv_a - 1) * 5)) || ((lv_a &gt; 1) &amp;&amp; (gf_GetPointsSpentInTier(EventPlayer(), lv_a) &gt; 0) &amp;&amp; (gf_GetPointsSpentInTiersBelow(EventPlayer(), lv_a) &lt; ((lv_a - 1) * 5))))) {
                        auto38A0DA97_ae = 10;
                        auto38A0DA97_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto38A0DA97_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto38A0DA97_ae) || (auto38A0DA97_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto38A0DA97_ae) ) ; lv_b += auto38A0DA97_ai ) {
                            lv_strIndex = (lv_b + ((lv_a - 1) * 10));
                            if ((StringSub(gv_perks[lp_player], lv_strIndex, lv_strIndex) == &quot;1&quot;)) {
                                gv_perkPointsSpent[lp_player] -= 1;
                                gv_accpp[lp_player] += 1;
                                gv_perks[lp_player] = StringReplace(gv_perks[lp_player], &quot;0&quot;, lv_strIndex, lv_strIndex);
                            }
                            else {
                            }
                        }
                        lv_tounlock = (((lv_a - 1) * 5) - gf_GetPointsSpentInTiersBelow(lp_player, lv_a));
                        if ((lv_tounlock != 1)) {
                            lv_pointplural = lv_points;
                        }
                        else {
                            lv_pointplural = lv_point;
                        }
                        libNtve_gf_SetDialogItemText(gv_perkTierLabel[lv_a], (StringExternal(&quot;Param/Value/7AB49BD0&quot;) + (IntToText(lv_a) + StringExternal(&quot;Param/Value/C564962A&quot;))), PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemTooltip(gv_perkTierLabel[lv_a], (StringExternal(&quot;Param/Value/52D5D4C0&quot;) + (IntToText(lv_tounlock) + (StringExternal(&quot;Param/Value/E8716B26&quot;) + (lv_pointplural + StringExternal(&quot;Param/Value/5E15A75D&quot;))))), PlayerGroupSingle(lp_player));
                        auto270AD014_ae = 10;
                        auto270AD014_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto270AD014_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto270AD014_ae) || (auto270AD014_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto270AD014_ae) ) ; lv_b += auto270AD014_ai ) {
                            libNtve_gf_SetDialogItemImage(gv_perkImage[lv_a][lv_b], &quot;Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds&quot;, PlayerGroupSingle(lp_player));
                            libNtve_gf_SetDialogItemTooltip(gv_perkImage[lv_a][lv_b], (StringExternal(&quot;Param/Value/4FA82B16&quot;) + (IntToText(lv_tounlock) + (StringExternal(&quot;Param/Value/D7DFDB40&quot;) + (lv_pointplural + StringExternal(&quot;Param/Value/78FCB22E&quot;))))), PlayerGroupSingle(lp_player));
                            DialogControlSetVisible(gv_perkMarker[lv_a][lv_b], PlayerGroupSingle(lp_player), false);
                            BankLoad(&quot;nostrobskalufs&quot;, lp_player);
                            BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;perks&quot;, gv_perks[lp_player]);
                            BankSave(BankLastCreated());
                        }
                    }
                    else {
                        libNtve_gf_SetDialogItemText(gv_perkTierLabel[lv_a], (StringExternal(&quot;Param/Value/CAF13BB8&quot;) + (IntToText(lv_a) + StringExternal(&quot;Param/Value/EF0683F1&quot;))), PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemTooltip(gv_perkTierLabel[lv_a], StringExternal(&quot;Param/Value/C3098B25&quot;), PlayerGroupSingle(lp_player));
                        auto4BE60796_ae = 10;
                        auto4BE60796_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto4BE60796_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto4BE60796_ae) || (auto4BE60796_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto4BE60796_ae) ) ; lv_b += auto4BE60796_ai ) {
                            libNtve_gf_SetDialogItemImage(gv_perkImage[lv_a][lv_b], gv_perkImageFile[lv_a][lv_b], PlayerGroupSingle(lp_player));
                            libNtve_gf_SetDialogItemTooltip(gv_perkImage[lv_a][lv_b], StringExternal(&quot;Param/Value/2805A7B5&quot;), PlayerGroupSingle(lp_player));
                            libNtve_gf_SetDialogItemTooltip(gv_perkButton[lv_a][lv_b], gv_perkTooltip[lv_a][lv_b], PlayerGroupSingle(lp_player));
                            lv_strIndex = (lv_b + ((lv_a - 1) * 10));
                            if ((StringSub(gv_perks[lp_player], lv_strIndex, lv_strIndex) == &quot;1&quot;)) {
                                DialogControlSetVisible(gv_perkMarker[lv_a][lv_b], PlayerGroupSingle(lp_player), true);
                            }
                            else {
                                DialogControlSetVisible(gv_perkMarker[lv_a][lv_b], PlayerGroupSingle(lp_player), false);
                            }
                        }
                    }
                }
                gv_accpp[lp_player] = (gv_acclvl[lp_player] - gv_perkPointsSpent[lp_player]);
                libNtve_gf_SetDialogItemText(gv_perkTitle, (StringExternal(&quot;Param/Value/3052C849&quot;) + (IntToText(gv_accpp[lp_player]) + StringExternal(&quot;Param/Value/2B6572C2&quot;))), PlayerGroupSingle(lp_player));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="328B7620">
        <ScriptCode>
            int gf_GetPointsSpentInTiersBelow (int lp_player, int lp_tier) {
                int autoB1A7BBC8_ae;
                int autoB1A7BBC8_ai;
                int auto5821D6F3_ae;
                int auto5821D6F3_ai;
                // Variable Declarations
                int lv_f;
                int lv_a;
                int lv_base;
                int lv_b;
                int lv_value;
                // Variable Initialization
                // Implementation
                autoB1A7BBC8_ae = (lp_tier - 1);
                autoB1A7BBC8_ai = 1;
                lv_f = 1;
                for ( ; ( (autoB1A7BBC8_ai &gt;= 0 &amp;&amp; lv_f &lt;= autoB1A7BBC8_ae) || (autoB1A7BBC8_ai &lt;= 0 &amp;&amp; lv_f &gt;= autoB1A7BBC8_ae) ) ; lv_f += autoB1A7BBC8_ai ) {
                    lv_base = ((lv_f - 1) * 10);
                    auto5821D6F3_ae = 10;
                    auto5821D6F3_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto5821D6F3_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto5821D6F3_ae) || (auto5821D6F3_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto5821D6F3_ae) ) ; lv_a += auto5821D6F3_ai ) {
                        lv_b = (lv_base + lv_a);
                        if ((StringSub(gv_perks[lp_player], lv_b, lv_b) == &quot;1&quot;)) {
                            lv_value += 1;
                        }
                        else {
                        }
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8ACF98F2">
        <ScriptCode>
            int gf_GetPointsSpentInTier (int lp_player, int lp_tier) {
                int autoA6C7F1FA_ae;
                int autoA6C7F1FA_ai;
                // Variable Declarations
                int lv_a;
                int lv_base;
                int lv_b;
                int lv_value;
                // Variable Initialization
                lv_base = ((lp_tier - 1) * 10);
                // Implementation
                autoA6C7F1FA_ae = 10;
                autoA6C7F1FA_ai = 1;
                lv_a = 1;
                for ( ; ( (autoA6C7F1FA_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoA6C7F1FA_ae) || (autoA6C7F1FA_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoA6C7F1FA_ae) ) ; lv_a += autoA6C7F1FA_ai ) {
                    lv_b = (lv_base + lv_a);
                    if ((StringSub(gv_perks[lp_player], lv_b, lv_b) == &quot;1&quot;)) {
                        lv_value += 1;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F6A45B9D">
        <ScriptCode>
            void gf_Banker (int lp_player) {
                // Variable Declarations
                int lv_amount;
                // Variable Initialization
                lv_amount = FixedToInt(Round((IntToFixed(PlayerGetPropertyInt(lp_player, c_playerPropMinerals)) * 0.05)));
                // Implementation
                lv_amount += 5;
                if ((StringSub(gv_perks[lp_player], 25, 25) == &quot;1&quot;) &amp;&amp; (lv_amount &gt; 0) &amp;&amp; (gv_playerData[lp_player].lv_alive == true)) {
                    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lv_amount);
                    TextExpressionSetToken(&quot;Param/Expression/2C10AE7C&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/2DAFDF79&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/2C10AE7C&quot;, &quot;B&quot;, IntToText(lv_amount));
                    TextExpressionSetToken(&quot;Param/Expression/2C10AE7C&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/BDADF1C5&quot;));
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/2C10AE7C&quot;));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="EAD088F3">
        <Item Type="CustomScript" Id="B901CF35"/>
        <Item Type="CustomScript" Id="A02A3F2F"/>
        <Item Type="CustomScript" Id="06647473"/>
        <Item Type="CustomScript" Id="617B5B02"/>
        <Item Type="CustomScript" Id="18E8E5F7"/>
        <Item Type="CustomScript" Id="A82891DF"/>
        <Item Type="CustomScript" Id="9B7B6C62"/>
        <Item Type="CustomScript" Id="3DF5840F"/>
        <Item Type="CustomScript" Id="62E9DD57"/>
        <Item Type="CustomScript" Id="961B8154"/>
        <Item Type="CustomScript" Id="EDC1947E"/>
        <Item Type="CustomScript" Id="8BB186D9"/>
        <Item Type="CustomScript" Id="587E6B66"/>
        <Item Type="CustomScript" Id="0DC474E5"/>
        <Item Type="CustomScript" Id="2BA769C2"/>
        <Item Type="CustomScript" Id="CFF337E5"/>
        <Item Type="CustomScript" Id="1428F64F"/>
        <Item Type="CustomScript" Id="91DDDA4C"/>
        <Item Type="CustomScript" Id="89024B8C"/>
        <Item Type="CustomScript" Id="833EC368"/>
        <Item Type="CustomScript" Id="AFCFA5E0"/>
        <Item Type="CustomScript" Id="6B359F8F"/>
        <Item Type="CustomScript" Id="19A0EE87"/>
        <Item Type="CustomScript" Id="89015F44"/>
        <Item Type="CustomScript" Id="8C312B63"/>
        <Item Type="CustomScript" Id="720187D1"/>
        <Item Type="CustomScript" Id="34D05D8F"/>
    </Element>
    <Element Type="CustomScript" Id="B901CF35">
        <ScriptCode>
            void gf_EndgameRequirementsCheck (int lp_player) {
                // Implementation
                if ((gv_wizardVisitEveryNight[lp_player] == true) &amp;&amp; ((gv_dayNight == 2) || (gv_day &gt;= 2))) {
                    gf_UnlockRequirement(lp_player, 1, 10);
                }
                else {
                }
                if ((gv_accwins[lp_player] &gt;= 50)) {
                    gf_UnlockRequirement(lp_player, 1, 12);
                }
                else {
                }
                if ((gv_accwins[lp_player] &gt;= 100)) {
                    gf_UnlockRequirement(lp_player, 1, 13);
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_team == gv_winningTeam) &amp;&amp; (gv_vanquisherEnabled[lp_player] == true) &amp;&amp; (GameGetMissionTime() &gt;= 60.0)) {
                    gf_UnlockRequirement(lp_player, 1, 16);
                }
                else {
                }
                if ((gv_accwins[lp_player] &gt;= 250)) {
                    gf_UnlockRequirement(lp_player, 1, 18);
                }
                else {
                }
                if ((gv_playerData[lp_player].lv_team == gv_winningTeam) &amp;&amp; (gv_aristocrat[lp_player] == true) &amp;&amp; (GameGetMissionTime() &gt;= 60.0)) {
                    gf_UnlockRequirement(lp_player, 2, 5);
                }
                else {
                }
                if ((gv_championGame == true) &amp;&amp; (gv_playerData[lp_player].lv_team == gv_winningTeam)) {
                    gf_UnlockRequirement(lp_player, 1, 19);
                }
                else {
                }
                if ((gv_accwins[lp_player] &gt;= 1000)) {
                    gf_UnlockRequirement(lp_player, 1, 26);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A02A3F2F">
        <ScriptCode>
            void gf_SetupPostgameFeats () {
                // Variable Declarations
                int lv_player;
                // Variable Initialization
                // Implementation
                lv_player = gf_GossipMostWolfKills();
                TextExpressionSetToken(&quot;Param/Expression/4F004F1D&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/D28B6B83&quot;));
                TextExpressionSetToken(&quot;Param/Expression/4F004F1D&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[1] = TextExpressionAssemble(&quot;Param/Expression/4F004F1D&quot;);
                gv_postgameFeatTooltip[1] = StringExternal(&quot;Param/Value/F4B4D49D&quot;);
                lv_player = gf_FeatTreesPlanted();
                TextExpressionSetToken(&quot;Param/Expression/2948CBED&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/5E32FA9D&quot;));
                TextExpressionSetToken(&quot;Param/Expression/2948CBED&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[2] = TextExpressionAssemble(&quot;Param/Expression/2948CBED&quot;);
                gv_postgameFeatTooltip[2] = StringExternal(&quot;Param/Value/219EFE7B&quot;);
                lv_player = gf_GossipMostSheepsBred(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/FB3842DA&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/ED22B3FC&quot;));
                TextExpressionSetToken(&quot;Param/Expression/FB3842DA&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[3] = TextExpressionAssemble(&quot;Param/Expression/FB3842DA&quot;);
                gv_postgameFeatTooltip[3] = StringExternal(&quot;Param/Value/C47D94F1&quot;);
                gf_InvalidationCheck(lv_player, 3);
                lv_player = gf_GossipMostMealsCooked(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/CB6804D9&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/81E12879&quot;));
                TextExpressionSetToken(&quot;Param/Expression/CB6804D9&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[4] = TextExpressionAssemble(&quot;Param/Expression/CB6804D9&quot;);
                gv_postgameFeatTooltip[4] = StringExternal(&quot;Param/Value/FC5FF3AF&quot;);
                lv_player = gf_GossipMostExp(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/1C05B458&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/BFB5BEA4&quot;));
                TextExpressionSetToken(&quot;Param/Expression/1C05B458&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[5] = TextExpressionAssemble(&quot;Param/Expression/1C05B458&quot;);
                gv_postgameFeatTooltip[5] = StringExternal(&quot;Param/Value/CF25FDC6&quot;);
                lv_player = gf_GossipMostBerries(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/C117281D&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/FF5ADD1B&quot;));
                TextExpressionSetToken(&quot;Param/Expression/C117281D&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[6] = TextExpressionAssemble(&quot;Param/Expression/C117281D&quot;);
                gv_postgameFeatTooltip[6] = StringExternal(&quot;Param/Value/E9189848&quot;);
                gf_InvalidationCheck(lv_player, 6);
                lv_player = gf_FeatPlayerKills(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/EE888DC4&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/A564003E&quot;));
                TextExpressionSetToken(&quot;Param/Expression/EE888DC4&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[7] = TextExpressionAssemble(&quot;Param/Expression/EE888DC4&quot;);
                gv_postgameFeatTooltip[7] = StringExternal(&quot;Param/Value/4692FA54&quot;);
                gf_InvalidationCheck(lv_player, 7);
                lv_player = gf_FeatSpellsCast(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/35482FA4&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/0999DE51&quot;));
                TextExpressionSetToken(&quot;Param/Expression/35482FA4&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[8] = TextExpressionAssemble(&quot;Param/Expression/35482FA4&quot;);
                gv_postgameFeatTooltip[8] = StringExternal(&quot;Param/Value/F712D46A&quot;);
                gf_InvalidationCheck(lv_player, 8);
                lv_player = gf_FeatGoldEarned(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/4246043E&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3A766707&quot;));
                TextExpressionSetToken(&quot;Param/Expression/4246043E&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[9] = TextExpressionAssemble(&quot;Param/Expression/4246043E&quot;);
                gv_postgameFeatTooltip[9] = StringExternal(&quot;Param/Value/C6769214&quot;);
                lv_player = gf_FeatMostStored(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/B1A68D44&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/F4C92DDB&quot;));
                TextExpressionSetToken(&quot;Param/Expression/B1A68D44&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[10] = TextExpressionAssemble(&quot;Param/Expression/B1A68D44&quot;);
                gv_postgameFeatTooltip[10] = StringExternal(&quot;Param/Value/F4E3351D&quot;);
                gf_InvalidationCheck(lv_player, 10);
                lv_player = gf_FeatTrappedEnemies(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/FD64276B&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/EBAC4521&quot;));
                TextExpressionSetToken(&quot;Param/Expression/FD64276B&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[11] = TextExpressionAssemble(&quot;Param/Expression/FD64276B&quot;);
                gv_postgameFeatTooltip[11] = StringExternal(&quot;Param/Value/C52D5BEA&quot;);
                gf_InvalidationCheck(lv_player, 11);
                lv_player = gf_FeatBoomstickTime(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/9FB65657&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/9DCCE1A3&quot;));
                TextExpressionSetToken(&quot;Param/Expression/9FB65657&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[12] = TextExpressionAssemble(&quot;Param/Expression/9FB65657&quot;);
                gv_postgameFeatTooltip[12] = StringExternal(&quot;Param/Value/AE9A6F1E&quot;);
                gf_InvalidationCheck(lv_player, 12);
                lv_player = gf_FeatHelpfulTribe(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/64AF68EF&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/C20C4EC8&quot;));
                TextExpressionSetToken(&quot;Param/Expression/64AF68EF&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[13] = TextExpressionAssemble(&quot;Param/Expression/64AF68EF&quot;);
                gv_postgameFeatTooltip[13] = StringExternal(&quot;Param/Value/83B95EDE&quot;);
                gf_InvalidationCheck(lv_player, 13);
                lv_player = gf_FeatFriendsLikeThese(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/A878404A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/FE5A954A&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A878404A&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[14] = TextExpressionAssemble(&quot;Param/Expression/A878404A&quot;);
                gv_postgameFeatTooltip[14] = StringExternal(&quot;Param/Value/062E3DC4&quot;);
                gf_InvalidationCheck(lv_player, 14);
                lv_player = gf_FeatCoiffureCare(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/5475BD80&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/201E8368&quot;));
                TextExpressionSetToken(&quot;Param/Expression/5475BD80&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[15] = TextExpressionAssemble(&quot;Param/Expression/5475BD80&quot;);
                gv_postgameFeatTooltip[15] = StringExternal(&quot;Param/Value/44F41FE6&quot;);
                gf_InvalidationCheck(lv_player, 15);
                lv_player = gf_FeatArchitect(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/36A63DD3&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/14B7A08F&quot;));
                TextExpressionSetToken(&quot;Param/Expression/36A63DD3&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[16] = TextExpressionAssemble(&quot;Param/Expression/36A63DD3&quot;);
                gv_postgameFeatTooltip[16] = StringExternal(&quot;Param/Value/AAE941B0&quot;);
                lv_player = gf_FeatSensible(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/45575710&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/083517C3&quot;));
                TextExpressionSetToken(&quot;Param/Expression/45575710&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[17] = TextExpressionAssemble(&quot;Param/Expression/45575710&quot;);
                gv_postgameFeatTooltip[17] = StringExternal(&quot;Param/Value/27E8B114&quot;);
                gf_InvalidationCheck(lv_player, 17);
                lv_player = gf_FeatUnbirdened(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/7A1CF91F&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/47C13FC8&quot;));
                TextExpressionSetToken(&quot;Param/Expression/7A1CF91F&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[18] = TextExpressionAssemble(&quot;Param/Expression/7A1CF91F&quot;);
                gv_postgameFeatTooltip[18] = StringExternal(&quot;Param/Value/6A6FC983&quot;);
                gf_InvalidationCheck(lv_player, 18);
                lv_player = gf_FeatBeastmaster(PlayerGroupAll());
                TextExpressionSetToken(&quot;Param/Expression/FCFDA4A6&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/F014E972&quot;));
                TextExpressionSetToken(&quot;Param/Expression/FCFDA4A6&quot;, &quot;B&quot;, TextWithColor(gf_GetPlayerName(lv_player, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
                gv_postgameFeatText[19] = TextExpressionAssemble(&quot;Param/Expression/FCFDA4A6&quot;);
                gv_postgameFeatTooltip[19] = StringExternal(&quot;Param/Value/215624DB&quot;);
                gf_InvalidationCheck(lv_player, 19);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="06647473">
        <ScriptCode>
            trigger auto_gf_RunPostgameFeats_Trigger = null;
            int auto_gf_RunPostgameFeats_lp_plater;
            void gf_RunPostgameFeats (int lp_plater) {
                auto_gf_RunPostgameFeats_lp_plater = lp_plater;
                if (auto_gf_RunPostgameFeats_Trigger == null) {
                    auto_gf_RunPostgameFeats_Trigger = TriggerCreate(&quot;auto_gf_RunPostgameFeats_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunPostgameFeats_Trigger, false, false);
            }
            bool auto_gf_RunPostgameFeats_TriggerFunc (bool testConds, bool runActions) {
                int lp_plater = auto_gf_RunPostgameFeats_lp_plater;
                int init_i;
                int auto1C83CBA3_val;
                // Variable Declarations
                int lv_a;
                fixed lv_writeoutduration;
                int[4] lv_showcase;
                int lv_cycle;
                int lv_textoIndex;
                // Variable Initialization
                lv_writeoutduration = 2.0;
                for (init_i = 0; init_i &lt;= 3; init_i += 1) {
                    lv_showcase[init_i] = c_invalidDialogControlId;
                }
                // Implementation
                while (true) {
                    lv_textoIndex = gf_GetFeatTextIndex(lp_plater);
                    if (lv_cycle &gt;= 3) {
                        lv_cycle = 1;
                    }
                    else {
                        lv_cycle = lv_cycle + 1;
                    }
                    auto1C83CBA3_val = lv_cycle;
                    if (auto1C83CBA3_val == 1) {
                        DialogControlDestroy(lv_showcase[lv_cycle]);
                        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorBottomLeft, 50, 35, gv_postgameFeatText[lv_textoIndex], ColorWithAlpha(0,0,0,0), true, lv_writeoutduration);
                        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModLeftSize16&quot;, PlayerGroupSingle(lp_plater));
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_postgameFeatTooltip[lv_textoIndex], PlayerGroupSingle(lp_plater));
                        lv_showcase[lv_cycle] = DialogControlLastCreated();
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_plater), true);
                    }
                    else if (auto1C83CBA3_val == 2) {
                        DialogControlDestroy(lv_showcase[lv_cycle]);
                        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorBottom, 0, 35, gv_postgameFeatText[lv_textoIndex], ColorWithAlpha(0,0,0,0), true, lv_writeoutduration);
                        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModCenterSize16&quot;, PlayerGroupSingle(lp_plater));
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_postgameFeatTooltip[lv_textoIndex], PlayerGroupSingle(lp_plater));
                        lv_showcase[lv_cycle] = DialogControlLastCreated();
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_plater), true);
                    }
                    else if (auto1C83CBA3_val == 3) {
                        DialogControlDestroy(lv_showcase[lv_cycle]);
                        libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorBottomRight, 50, 35, gv_postgameFeatText[lv_textoIndex], ColorWithAlpha(0,0,0,0), true, lv_writeoutduration);
                        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModRightSize16&quot;, PlayerGroupSingle(lp_plater));
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_postgameFeatTooltip[lv_textoIndex], PlayerGroupSingle(lp_plater));
                        lv_showcase[lv_cycle] = DialogControlLastCreated();
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_plater), true);
                    }
                    else {
                    }
                    if ((lv_cycle == 3)) {
                        Wait(6.0, c_timeGame);
                    }
                    else {
                        Wait(2.0, c_timeGame);
                    }
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="617B5B02">
        <ScriptCode>
            int gf_GetFeatTextIndex (int lp_player) {
                int autoEE912F0B_ae;
                int autoEE912F0B_ai;
                int autoC99B69BF_ae;
                int autoC99B69BF_ai;
                // Variable Declarations
                int lv_a;
                int lv_pick;
                bool lv_arewethereyeti;
                int lv_vlur;
                int lv_failsafe;
                bool lv_allshown;
                // Variable Initialization
                lv_allshown = true;
                // Implementation
                while ((lv_arewethereyeti == false)) {
                    autoEE912F0B_ae = gv_pGFAmount;
                    autoEE912F0B_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoEE912F0B_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoEE912F0B_ae) || (autoEE912F0B_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoEE912F0B_ae) ) ; lv_a += autoEE912F0B_ai ) {
                        if ((gv_postgameFeatShown[lv_a][lp_player] == false) &amp;&amp; (gv_postgameFeatValid[lv_a] == true)) {
                            lv_allshown = false;
                        }
                        else {
                        }
                    }
                    if ((lv_allshown == true)) {
                        autoC99B69BF_ae = gv_pGFAmount;
                        autoC99B69BF_ai = 1;
                        lv_a = 1;
                        for ( ; ( (autoC99B69BF_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC99B69BF_ae) || (autoC99B69BF_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC99B69BF_ae) ) ; lv_a += autoC99B69BF_ai ) {
                            gv_postgameFeatShown[lv_a][lp_player] = false;
                        }
                    }
                    else {
                    }
                    lv_failsafe += 1;
                    if ((lv_failsafe &lt; 100)) {
                        lv_pick = RandomInt(1, gv_pGFAmount);
                    }
                    else {
                        if (lv_pick &gt;= gv_pGFAmount) {
                            lv_pick = 1;
                        }
                        else {
                            lv_pick = lv_pick + 1;
                        }
                    }
                    if ((gv_postgameFeatValid[lv_pick] == true) &amp;&amp; (gv_postgameFeatShown[lv_pick][lp_player] == false)) {
                        lv_vlur = lv_pick;
                        lv_arewethereyeti = true;
                        gv_postgameFeatShown[lv_pick][lp_player] = true;
                    }
                    else {
                    }
                }
                return lv_vlur;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="18E8E5F7">
        <ScriptCode>
            void gf_InvalidationCheck (int lp_player, int lp_integer) {
                int autoF71CD504_val;
                // Implementation
                autoF71CD504_val = lp_integer;
                if (autoF71CD504_val == 3) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_sheepBred == 0)) {
                        gv_postgameFeatValid[3] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 6) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_berriesPicked == 0)) {
                        gv_postgameFeatValid[6] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 7) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_playerKills == 0)) {
                        gv_postgameFeatValid[7] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 8) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_spellsCast == 0)) {
                        gv_postgameFeatValid[8] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 10) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_storedItems == 0)) {
                        gv_postgameFeatValid[10] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 11) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_trapsTriggered == 0)) {
                        gv_postgameFeatValid[11] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 12) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_boomstickTime == 0)) {
                        gv_postgameFeatValid[12] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 13) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_timesResurrected == 0)) {
                        gv_postgameFeatValid[13] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 14) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_murlocsHired == 0)) {
                        gv_postgameFeatValid[14] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 15) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_rainAvoided == 0)) {
                        gv_postgameFeatValid[15] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 17) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_nodesDiscovered == 0)) {
                        gv_postgameFeatValid[17] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 18) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_birdsScouts == 0)) {
                        gv_postgameFeatValid[18] = false;
                    }
                    else {
                    }
                }
                else if (autoF71CD504_val == 19) {
                    if ((gv_playerData[lp_player].lv_gameStats.lv_petsTamed == 0)) {
                        gv_postgameFeatValid[19] = false;
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A82891DF">
        <ScriptCode>
            int gf_FeatPlayerKills (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_playerKills &lt; gv_playerData[lv_troll].lv_gameStats.lv_playerKills)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9B7B6C62">
        <ScriptCode>
            int gf_FeatSpellsCast (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_spellsCast &lt; gv_playerData[lv_troll].lv_gameStats.lv_spellsCast)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3DF5840F">
        <ScriptCode>
            int gf_FeatGoldEarned (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_goldEarned &lt; gv_playerData[lv_troll].lv_gameStats.lv_goldEarned)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="62E9DD57">
        <ScriptCode>
            int gf_FeatTreesPlanted () {
                int auto508B1DB8_ae;
                int auto508B1DB8_ai;
                // Variable Declarations
                int lv_a;
                int lv_value;
                // Variable Initialization
                // Implementation
                auto508B1DB8_ae = gv_players;
                auto508B1DB8_ai = 1;
                lv_a = 1;
                for ( ; ( (auto508B1DB8_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto508B1DB8_ae) || (auto508B1DB8_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto508B1DB8_ae) ) ; lv_a += auto508B1DB8_ai ) {
                    if (((gv_playerData[lv_a].lv_gameStats.lv_treesFelled + gv_playerData[lv_a].lv_gameStats.lv_treesPlanted) &gt; (gv_playerData[lv_value].lv_gameStats.lv_treesFelled + gv_playerData[lv_value].lv_gameStats.lv_treesPlanted))) {
                        lv_value = lv_a;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="961B8154">
        <ScriptCode>
            int gf_FeatMostStored (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_storedItems &lt; gv_playerData[lv_troll].lv_gameStats.lv_storedItems)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EDC1947E">
        <ScriptCode>
            int gf_FeatTrappedEnemies (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_trapsTriggered &lt; gv_playerData[lv_troll].lv_gameStats.lv_trapsTriggered)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8BB186D9">
        <ScriptCode>
            int gf_FeatBoomstickTime (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_boomstickTime &lt; gv_playerData[lv_troll].lv_gameStats.lv_boomstickTime)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="587E6B66">
        <ScriptCode>
            int gf_FeatHelpfulTribe (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_timesResurrected &lt; gv_playerData[lv_troll].lv_gameStats.lv_timesResurrected)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0DC474E5">
        <ScriptCode>
            int gf_FeatFriendsLikeThese (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_murlocsHired &lt; gv_playerData[lv_troll].lv_gameStats.lv_murlocsHired)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2BA769C2">
        <ScriptCode>
            int gf_FeatCoiffureCare (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_rainAvoided &lt; gv_playerData[lv_troll].lv_gameStats.lv_rainAvoided)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CFF337E5">
        <ScriptCode>
            int gf_FeatArchitect (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_buildingsCreated &lt; gv_playerData[lv_troll].lv_gameStats.lv_buildingsCreated)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1428F64F">
        <ScriptCode>
            int gf_FeatSensible (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_nodesDiscovered &lt; gv_playerData[lv_troll].lv_gameStats.lv_nodesDiscovered)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="91DDDA4C">
        <ScriptCode>
            int gf_FeatUnbirdened (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_birdsScouts &lt; gv_playerData[lv_troll].lv_gameStats.lv_birdsScouts)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="89024B8C">
        <ScriptCode>
            int gf_FeatBeastmaster (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_petsTamed &lt; gv_playerData[lv_troll].lv_gameStats.lv_petsTamed)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="833EC368">
        <ScriptCode>
            void gf_UpdatePGSWindow (int lp_player) {
                int autoF5A8569B_ae;
                int autoF5A8569B_ai;
                int auto4D098F31_ae;
                int auto4D098F31_ai;
                int auto979F1040_ae;
                int auto979F1040_ai;
                int auto98AC4536_ae;
                int auto98AC4536_ai;
                int auto7088CC47_ae;
                int auto7088CC47_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                int lv_c;
                int lv_i;
                text lv_vIIntegerLabel;
                color lv_labelColor;
                int lv_columnIndex;
                int lv_rowIndex;
                const int lv_rowMaximum = 8;
                int lv_teamSize;
                // Variable Initialization
                lv_vIIntegerLabel = StringExternal(&quot;Param/Value/FAA99A10&quot;);
                lv_labelColor = Color(100.00, 100.00, 100.00);
                // Implementation
                if ((gv_activeTeams == 2)) {
                    if ((gv_winningTeam == 1)) {
                        libNtve_gf_SetDialogItemText(gv_pGSWinLossLabel[1], StringExternal(&quot;Param/Value/31164A14&quot;), PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemText(gv_pGSWinLossLabel[2], StringExternal(&quot;Param/Value/09A797BD&quot;), PlayerGroupSingle(lp_player));
                    }
                    else {
                    }
                    if ((gv_winningTeam == 2)) {
                        libNtve_gf_SetDialogItemText(gv_pGSWinLossLabel[2], StringExternal(&quot;Param/Value/ED683443&quot;), PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemText(gv_pGSWinLossLabel[1], StringExternal(&quot;Param/Value/0F4BD489&quot;), PlayerGroupSingle(lp_player));
                    }
                    else {
                    }
                    autoF5A8569B_ae = 10;
                    autoF5A8569B_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoF5A8569B_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoF5A8569B_ae) || (autoF5A8569B_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoF5A8569B_ae) ) ; lv_a += autoF5A8569B_ai ) {
                        DialogControlSetVisible(gv_pGSPlayerLabelT1[lv_a], PlayerGroupSingle(lp_player), false);
                        DialogControlSetVisible(gv_pGSPlayerLabelT2[lv_a], PlayerGroupSingle(lp_player), false);
                        DialogControlSetVisible(gv_pGSWinLabelT1[lv_a], PlayerGroupSingle(lp_player), false);
                        DialogControlSetVisible(gv_pGSWinLabelT2[lv_a], PlayerGroupSingle(lp_player), false);
                        DialogControlSetVisible(gv_pGSLossLabelT1[lv_a], PlayerGroupSingle(lp_player), false);
                        DialogControlSetVisible(gv_pGSLossLabelT2[lv_a], PlayerGroupSingle(lp_player), false);
                    }
                    lv_b = 0;
                    auto4D098F31_ae = gv_players;
                    auto4D098F31_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto4D098F31_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto4D098F31_ae) || (auto4D098F31_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto4D098F31_ae) ) ; lv_a += auto4D098F31_ai ) {
                        if ((gv_playerData[lv_a].lv_team == 1)) {
                            if ((PlayerType(lv_a) == c_playerTypeUser)) {
                                lv_b += 1;
                                lv_labelColor = gf_GetPGSLabelColor(lv_a, lp_player);
                                TextExpressionSetToken(&quot;Param/Expression/1F31245C&quot;, &quot;A&quot;, gf_GetPlayerName(lv_a, 0));
                                TextExpressionSetToken(&quot;Param/Expression/1F31245C&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/3F834FA5&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/1F31245C&quot;, &quot;C&quot;, IntToText(gv_acclvl[lv_a]));
                                TextExpressionSetToken(&quot;Param/Expression/1F31245C&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/2B2EB0D6&quot;));
                                libNtve_gf_SetDialogItemText(gv_pGSPlayerLabelT1[lv_b], TextWithColor(TextExpressionAssemble(&quot;Param/Expression/1F31245C&quot;), lv_labelColor), PlayerGroupSingle(lp_player));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;E&quot;, TextWithColor(gf_GetPlayerName(lv_a, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_a, false))));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;O&quot;, StringExternal(&quot;Param/Value/3F9DB6BF&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;P&quot;, TextWithColor(IntToText(gv_accwins[lv_a]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;Q&quot;, StringExternal(&quot;Param/Value/A8708B5E&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;R&quot;, TextWithColor(IntToText(gv_acclosses[lv_a]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;S&quot;, StringExternal(&quot;Param/Value/3A3BBA3C&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;T&quot;, TextWithColor(gf_GetWLText(lv_a), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/D908903B&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;B&quot;, TextWithColor(IntToText(gv_kobkills[lv_a]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/CC88D758&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;D&quot;, TextWithColor(IntToText(gv_kobdeaths[lv_a]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;H&quot;, StringExternal(&quot;Param/Value/F596F80B&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;I&quot;, TextWithColor(gf_GetKDText(lv_a), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;J&quot;, StringExternal(&quot;Param/Value/FAC2031C&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;K&quot;, gf_GetMatchHistoryText(lv_a));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;F&quot;, StringExternal(&quot;Param/Value/27BFCEE7&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;G&quot;, TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_a)), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;L&quot;, StringExternal(&quot;Param/Value/C05768F4&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;M&quot;, StringToText(gv_handle[lv_a]));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;N&quot;, StringExternal(&quot;Param/Value/7D9E3F89&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4EA072BC&quot;, &quot;U&quot;, gf_RatingAffix(lv_a, lv_b));
                                libNtve_gf_SetDialogItemTooltip(gv_pGSPlayerLabelT1[lv_b], TextExpressionAssemble(&quot;Param/Expression/4EA072BC&quot;), PlayerGroupSingle(lp_player));
                                libNtve_gf_SetDialogItemText(gv_pGSWinLabelT1[lv_b], TextWithColor(IntToText(gv_accwins[lv_a]), lv_labelColor), PlayerGroupSingle(lp_player));
                                libNtve_gf_SetDialogItemText(gv_pGSLossLabelT1[lv_b], TextWithColor(IntToText(gv_acclosses[lv_a]), lv_labelColor), PlayerGroupSingle(lp_player));
                            }
                            else {
                                if ((PlayerType(lv_a) != c_playerTypeNone)) {
                                    lv_b += 1;
                                    libNtve_gf_SetDialogItemText(gv_pGSPlayerLabelT1[lv_b], gf_GetPlayerName(lv_a, 0), PlayerGroupSingle(lp_player));
                                    TextExpressionSetToken(&quot;Param/Expression/F7C12A3F&quot;, &quot;E&quot;, TextWithColor(gf_GetPlayerName(lv_a, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_a, false))));
                                    TextExpressionSetToken(&quot;Param/Expression/F7C12A3F&quot;, &quot;F&quot;, StringExternal(&quot;Param/Value/A4978789&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/F7C12A3F&quot;, &quot;G&quot;, TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_a)), Color(100.00, 100.00, 100.00)));
                                    libNtve_gf_SetDialogItemTooltip(gv_pGSPlayerLabelT1[lv_b], TextExpressionAssemble(&quot;Param/Expression/F7C12A3F&quot;), PlayerGroupSingle(lp_player));
                                    libNtve_gf_SetDialogItemText(gv_pGSWinLabelT1[lv_b], lv_vIIntegerLabel, PlayerGroupSingle(lp_player));
                                    libNtve_gf_SetDialogItemText(gv_pGSLossLabelT1[lv_b], lv_vIIntegerLabel, PlayerGroupSingle(lp_player));
                                }
                                else {
                                }
                            }
                            DialogControlSetVisible(gv_pGSPlayerLabelT1[lv_b], PlayerGroupSingle(lp_player), true);
                            DialogControlSetVisible(gv_pGSWinLabelT1[lv_b], PlayerGroupSingle(lp_player), true);
                        }
                        else {
                        }
                    }
                    lv_b = 0;
                    auto979F1040_ae = gv_players;
                    auto979F1040_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto979F1040_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto979F1040_ae) || (auto979F1040_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto979F1040_ae) ) ; lv_a += auto979F1040_ai ) {
                        if ((gv_playerData[lv_a].lv_team == 2)) {
                            if ((PlayerType(lv_a) == c_playerTypeUser)) {
                                lv_b += 1;
                                lv_labelColor = gf_GetPGSLabelColor(lv_a, lp_player);
                                TextExpressionSetToken(&quot;Param/Expression/CE2FCD7C&quot;, &quot;A&quot;, gf_GetPlayerName(lv_a, 0));
                                TextExpressionSetToken(&quot;Param/Expression/CE2FCD7C&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/48EFC89A&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CE2FCD7C&quot;, &quot;C&quot;, IntToText(gv_acclvl[lv_a]));
                                TextExpressionSetToken(&quot;Param/Expression/CE2FCD7C&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/D508C692&quot;));
                                libNtve_gf_SetDialogItemText(gv_pGSPlayerLabelT2[lv_b], TextWithColor(TextExpressionAssemble(&quot;Param/Expression/CE2FCD7C&quot;), lv_labelColor), PlayerGroupSingle(lp_player));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;E&quot;, TextWithColor(gf_GetPlayerName(lv_a, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_a, false))));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;O&quot;, StringExternal(&quot;Param/Value/7264C8C3&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;P&quot;, TextWithColor(IntToText(gv_accwins[lv_a]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;Q&quot;, StringExternal(&quot;Param/Value/7C4EC6BC&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;R&quot;, TextWithColor(IntToText(gv_acclosses[lv_a]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;S&quot;, StringExternal(&quot;Param/Value/94E9FA4D&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;T&quot;, TextWithColor(gf_GetWLText(lv_a), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/062FC37D&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;B&quot;, TextWithColor(IntToText(gv_kobkills[lv_a]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/423206CD&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;D&quot;, TextWithColor(IntToText(gv_kobdeaths[lv_a]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;H&quot;, StringExternal(&quot;Param/Value/5FBF8D3E&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;I&quot;, TextWithColor(gf_GetKDText(lv_a), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;J&quot;, StringExternal(&quot;Param/Value/B4D0D96F&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;K&quot;, gf_GetMatchHistoryText(lv_a));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;F&quot;, StringExternal(&quot;Param/Value/9018EC2D&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;G&quot;, TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_a)), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;L&quot;, StringExternal(&quot;Param/Value/5693DD2F&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;M&quot;, StringToText(gv_handle[lv_a]));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;N&quot;, StringExternal(&quot;Param/Value/7B874DC8&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/CDDB619B&quot;, &quot;U&quot;, gf_RatingAffix(lv_a, lv_b));
                                libNtve_gf_SetDialogItemTooltip(gv_pGSPlayerLabelT2[lv_b], TextExpressionAssemble(&quot;Param/Expression/CDDB619B&quot;), PlayerGroupSingle(lp_player));
                                libNtve_gf_SetDialogItemText(gv_pGSWinLabelT2[lv_b], TextWithColor(IntToText(gv_accwins[lv_a]), lv_labelColor), PlayerGroupSingle(lp_player));
                                libNtve_gf_SetDialogItemText(gv_pGSLossLabelT2[lv_b], TextWithColor(IntToText(gv_acclosses[lv_a]), lv_labelColor), PlayerGroupSingle(lp_player));
                            }
                            else {
                                if ((PlayerType(lv_a) != c_playerTypeNone)) {
                                    lv_b += 1;
                                    libNtve_gf_SetDialogItemText(gv_pGSPlayerLabelT2[lv_b], gf_GetPlayerName(lv_a, 0), PlayerGroupSingle(lp_player));
                                    TextExpressionSetToken(&quot;Param/Expression/CBD34081&quot;, &quot;E&quot;, TextWithColor(gf_GetPlayerName(lv_a, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_a, false))));
                                    TextExpressionSetToken(&quot;Param/Expression/CBD34081&quot;, &quot;F&quot;, StringExternal(&quot;Param/Value/00E41E65&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/CBD34081&quot;, &quot;G&quot;, TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_a)), Color(100.00, 100.00, 100.00)));
                                    libNtve_gf_SetDialogItemTooltip(gv_pGSPlayerLabelT2[lv_b], TextExpressionAssemble(&quot;Param/Expression/CBD34081&quot;), PlayerGroupSingle(lp_player));
                                    libNtve_gf_SetDialogItemText(gv_pGSWinLabelT2[lv_b], lv_vIIntegerLabel, PlayerGroupSingle(lp_player));
                                    libNtve_gf_SetDialogItemText(gv_pGSLossLabelT2[lv_b], lv_vIIntegerLabel, PlayerGroupSingle(lp_player));
                                }
                                else {
                                }
                            }
                            DialogControlSetVisible(gv_pGSPlayerLabelT2[lv_b], PlayerGroupSingle(lp_player), true);
                            DialogControlSetVisible(gv_pGSWinLabelT2[lv_b], PlayerGroupSingle(lp_player), true);
                        }
                        else {
                        }
                    }
                }
                else {
                    auto98AC4536_ae = gv_activeTeams;
                    auto98AC4536_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto98AC4536_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto98AC4536_ae) || (auto98AC4536_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto98AC4536_ae) ) ; lv_a += auto98AC4536_ai ) {
                        lv_teamSize = PlayerGroupCount(gv_teamData[lv_a].lv_members);
                        if (((lv_rowIndex + (lv_teamSize + 1)) &gt; lv_rowMaximum) &amp;&amp; ((lv_teamSize + 1) &lt; lv_rowMaximum)) {
                            lv_columnIndex += 1;
                            lv_rowIndex = 0;
                        }
                        else {
                        }
                        DialogControlSetVisible(gv_pGSMultiTeamLabel[lv_a], PlayerGroupSingle(lp_player), true);
                        DialogControlSetPosition(gv_pGSMultiTeamLabel[lv_a], PlayerGroupSingle(lp_player), c_anchorTopLeft, (100 + (lv_columnIndex * 350)), (100 + (lv_rowIndex * 45)));
                        lv_rowIndex += 1;
                        if ((gv_winningPlayers == gv_teamData[lv_a].lv_members)) {
                            TextExpressionSetToken(&quot;Param/Expression/77948A7A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/C610C3FA&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/77948A7A&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lv_a));
                            TextExpressionSetToken(&quot;Param/Expression/77948A7A&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/07E736B0&quot;));
                            libNtve_gf_SetDialogItemText(gv_pGSMultiTeamLabel[lv_a], TextExpressionAssemble(&quot;Param/Expression/77948A7A&quot;), PlayerGroupSingle(lp_player));
                        }
                        else {
                            TextExpressionSetToken(&quot;Param/Expression/A0A664B4&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3ED9812F&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/A0A664B4&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lv_a));
                            TextExpressionSetToken(&quot;Param/Expression/A0A664B4&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/6C62E9CB&quot;));
                            libNtve_gf_SetDialogItemText(gv_pGSMultiTeamLabel[lv_a], TextExpressionAssemble(&quot;Param/Expression/A0A664B4&quot;), PlayerGroupSingle(lp_player));
                        }
                        auto7088CC47_ae = lv_teamSize;
                        auto7088CC47_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto7088CC47_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto7088CC47_ae) || (auto7088CC47_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto7088CC47_ae) ) ; lv_b += auto7088CC47_ai ) {
                            lv_i = PlayerGroupPlayer(gv_teamData[lv_a].lv_members, lv_b);
                            DialogControlSetVisible(gv_pGSMultiPlayerLabel[lv_i], PlayerGroupSingle(lp_player), true);
                            DialogControlSetPosition(gv_pGSMultiPlayerLabel[lv_i], PlayerGroupSingle(lp_player), c_anchorTopLeft, (100 + (lv_columnIndex * 350)), (100 + (lv_rowIndex * 45)));
                            TextExpressionSetToken(&quot;Param/Expression/5B27EC7D&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/347CF6E5&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/5B27EC7D&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/67161835&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/5B27EC7D&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/559C45F2&quot;));
                            libNtve_gf_SetDialogItemText(gv_pGSMultiPlayerLabel[lv_i], (TextExpressionAssemble(&quot;Param/Expression/5B27EC7D&quot;)), PlayerGroupSingle(lp_player));
                            if ((PlayerType(lv_i) == c_playerTypeUser)) {
                                lv_labelColor = gf_GetPGSLabelColor(lv_i, lp_player);
                                TextExpressionSetToken(&quot;Param/Expression/9AB7CFF0&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                                TextExpressionSetToken(&quot;Param/Expression/9AB7CFF0&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/33C0C9B9&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/9AB7CFF0&quot;, &quot;C&quot;, IntToText(gv_acclvl[lv_i]));
                                TextExpressionSetToken(&quot;Param/Expression/9AB7CFF0&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/21900CF1&quot;));
                                libNtve_gf_SetDialogItemText(gv_pGSMultiPlayerLabel[lv_i], TextWithColor(TextExpressionAssemble(&quot;Param/Expression/9AB7CFF0&quot;), lv_labelColor), PlayerGroupSingle(lp_player));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;E&quot;, TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;O&quot;, StringExternal(&quot;Param/Value/0A0E01D8&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;P&quot;, TextWithColor(IntToText(gv_accwins[lv_i]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;Q&quot;, StringExternal(&quot;Param/Value/4894964A&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;R&quot;, TextWithColor(IntToText(gv_acclosses[lv_i]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;S&quot;, StringExternal(&quot;Param/Value/1EA787D6&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;T&quot;, TextWithColor(gf_GetWLText(lv_i), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3D43397A&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;B&quot;, TextWithColor(IntToText(gv_kobkills[lv_i]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/BBD25194&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;D&quot;, TextWithColor(IntToText(gv_kobdeaths[lv_i]), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;H&quot;, StringExternal(&quot;Param/Value/299AAF27&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;I&quot;, TextWithColor(gf_GetKDText(lv_i), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;J&quot;, StringExternal(&quot;Param/Value/E3298523&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;K&quot;, gf_GetMatchHistoryText(lv_i));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;F&quot;, StringExternal(&quot;Param/Value/BA355A76&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;G&quot;, TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_i)), Color(100.00, 100.00, 100.00)));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;L&quot;, StringExternal(&quot;Param/Value/1EF3E86F&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;M&quot;, StringToText(gv_handle[lv_i]));
                                TextExpressionSetToken(&quot;Param/Expression/6B7677F5&quot;, &quot;N&quot;, StringExternal(&quot;Param/Value/76B9127B&quot;));
                                libNtve_gf_SetDialogItemTooltip(gv_pGSMultiPlayerLabel[lv_i], TextExpressionAssemble(&quot;Param/Expression/6B7677F5&quot;), PlayerGroupSingle(lp_player));
                            }
                            else {
                                if ((PlayerType(lv_i) != c_playerTypeNone)) {
                                    libNtve_gf_SetDialogItemText(gv_pGSMultiPlayerLabel[lv_i], gf_GetPlayerName(lv_i, 0), PlayerGroupSingle(lp_player));
                                    TextExpressionSetToken(&quot;Param/Expression/BB71A733&quot;, &quot;E&quot;, TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                    TextExpressionSetToken(&quot;Param/Expression/BB71A733&quot;, &quot;F&quot;, StringExternal(&quot;Param/Value/9480F6F5&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/BB71A733&quot;, &quot;G&quot;, TextWithColor(gf_GetItemNameFromLevel(gf_GetFavWeapIndex(lv_i)), Color(100.00, 100.00, 100.00)));
                                    libNtve_gf_SetDialogItemTooltip(gv_pGSMultiPlayerLabel[lv_i], TextExpressionAssemble(&quot;Param/Expression/BB71A733&quot;), PlayerGroupSingle(lp_player));
                                }
                                else {
                                }
                            }
                            lv_rowIndex += 1;
                            if ((lv_rowIndex &gt;= lv_rowMaximum)) {
                                lv_columnIndex += 1;
                                lv_rowIndex = 0;
                            }
                            else {
                            }
                        }
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="AFCFA5E0">
        <ScriptCode>
            text gf_RatingAffix (int lp_player, int lp_b) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_rated == true) &amp;&amp; (gv_validRatedGame == true) &amp;&amp; (lp_player == lp_b)) {
                    TextExpressionSetToken(&quot;Param/Expression/4FA77522&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/6CA4D7A9&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/4FA77522&quot;, &quot;B&quot;, IntToText(gv_ratingvalue[lp_player]));
                    TextExpressionSetToken(&quot;Param/Expression/4FA77522&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/1ECB0D5D&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/4FA77522&quot;);
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6B359F8F">
        <ScriptCode>
            color gf_GetPGSLabelColor (int lp_index, int lp_player) {
                // Variable Declarations
                color lv_value;
                // Variable Initialization
                lv_value = Color(0,0,0);
                // Implementation
                if ((PlayerStatus(lp_index) == c_playerStatusActive)) {
                    if ((lp_index == lp_player)) {
                        lv_value = Color(254*100/255,138*100/255,14*100/255);
                    }
                    else {
                        lv_value = Color(100.00, 100.00, 100.00);
                    }
                }
                else {
                    lv_value = Color(50.20, 50.20, 50.20);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="19A0EE87">
        <ScriptCode>
            int gf_GetFavWeapIndex (int lp_player) {
                // Variable Declarations
                int lv_max;
                int lv_maxindex;
                int lv_i;
                // Variable Initialization
                // Implementation
                while ((lv_i &lt;= gv_maxWeapLevel)) {
                    if ((gv_favouriteWeaponRating[lv_i][lp_player] &gt; lv_max)) {
                        lv_max = gv_favouriteWeaponRating[lv_i][lp_player];
                        lv_maxindex = lv_i;
                    }
                    else {
                    }
                    lv_i += 1;
                }
                return lv_maxindex;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="89015F44">
        <ScriptCode>
            text gf_GetItemNameFromLevel (int lp_level) {
                // Variable Declarations
                int lv_a;
                string lv_itemTypeID;
                text lv_value;
                // Variable Initialization
                lv_itemTypeID = &quot;&quot;;
                // Implementation
                if (((lp_level &gt;= 0) &amp;&amp; (lp_level &lt;= gv_maxWeapLevel))) {
                    if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;BerserkersBattleAxe&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;BerserkersBattleAxe&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;DullPickaxe&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;DullPickaxe&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;JudgmentGavel&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;JudgmentGavel&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;SturdyWoodenStick&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;SturdyWoodenStick&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;SharpIronPickaxe&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;SharpIronPickaxe&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;GoldenPolearm&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;GoldenPolearm&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;RoughBlunderbuss&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;RoughBlunderbuss&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;CelestialOrb&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;CelestialOrb&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;EnigmaticStaff&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;EnigmaticStaff&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;ElderWand&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;ElderWand&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;RepeatingCrossbow&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;RepeatingCrossbow&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;Wolfsbane&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;Wolfsbane&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;LiquidatorSpellblade&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;LiquidatorSpellblade&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;VenomousArbalest&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;VenomousArbalest&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;MurlocDoomhammer&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;MurlocDoomhammer&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;ViciouslySharpArmblade&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;ViciouslySharpArmblade&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;FrostNeedle&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;FrostNeedle&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;Bloodcleaver&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;Bloodcleaver&quot;);
                    }
                    else if ((lp_level == StringToInt(CatalogFieldValueGet(c_gameCatalogItem, &quot;CravensFishSticker&quot;, &quot;Level&quot;, 0)))) {
                        lv_value = UnitTypeGetName(&quot;CravensFishSticker&quot;);
                    }
                    else if (true) {
                        lv_value = StringExternal(&quot;Param/Value/EB53ADD6&quot;);
                    }
                }
                else {
                    lv_value = StringExternal(&quot;Param/Value/CC56CDDA&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8C312B63">
        <ScriptCode>
            text gf_GetWLText (int lp_player) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_acclosses[lp_player] &gt; 0)) {
                    lv_value = FixedToText((IntToFixed(gv_accwins[lp_player]) / IntToFixed(gv_acclosses[lp_player])), 2);
                }
                else {
                    lv_value = StringExternal(&quot;Param/Value/4EFC1750&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="720187D1">
        <ScriptCode>
            text gf_GetKDText (int lp_player) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_kobdeaths[lp_player] &gt; 0)) {
                    lv_value = FixedToText((IntToFixed(gv_kobkills[lp_player]) / IntToFixed(gv_kobdeaths[lp_player])), 2);
                }
                else {
                    lv_value = StringExternal(&quot;Param/Value/8E7837B0&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="34D05D8F">
        <ScriptCode>
            text gf_GetMatchHistoryText (int lp_player) {
                int auto51D1CAE4_ae;
                int auto51D1CAE4_ai;
                // Variable Declarations
                int lv_maximumLength;
                int lv_a;
                text lv_value;
                // Variable Initialization
                lv_maximumLength = 8;
                lv_value = StringExternal(&quot;Param/Value/1AD6966E&quot;);
                // Implementation
                if ((StringLength(gv_matchhistory[lp_player]) &gt; lv_maximumLength)) {
                    gv_matchhistory[lp_player] = StringReplace(gv_matchhistory[lp_player], &quot;&quot;, 1, (StringLength(gv_matchhistory[0]) - lv_maximumLength));
                }
                else {
                }
                auto51D1CAE4_ae = StringLength(gv_matchhistory[lp_player]);
                auto51D1CAE4_ai = 1;
                lv_a = 1;
                for ( ; ( (auto51D1CAE4_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto51D1CAE4_ae) || (auto51D1CAE4_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto51D1CAE4_ae) ) ; lv_a += auto51D1CAE4_ai ) {
                    if ((StringSub(gv_matchhistory[lp_player], lv_a, lv_a) == &quot;W&quot;)) {
                        lv_value = (lv_value + TextWithColor(StringExternal(&quot;Param/Value/9B278DBD&quot;), Color(0.00, 100.00, 0.00)));
                    }
                    else if ((StringSub(gv_matchhistory[lp_player], lv_a, lv_a) == &quot;L&quot;)) {
                        lv_value = (lv_value + TextWithColor(StringExternal(&quot;Param/Value/B8A59028&quot;), Color(100.00, 0.00, 0.00)));
                    }
                    else if ((StringSub(gv_matchhistory[lp_player], lv_a, lv_a) == &quot;D&quot;)) {
                        lv_value = (lv_value + TextWithColor(StringExternal(&quot;Param/Value/3CE58B77&quot;), Color(50.20, 50.20, 50.20)));
                    }
                }
                lv_value = (lv_value + StringExternal(&quot;Param/Value/556C5C30&quot;));
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="93B8FA4A">
        <Item Type="CustomScript" Id="5DBFB3EB"/>
        <Item Type="CustomScript" Id="98C7BACF"/>
        <Item Type="CustomScript" Id="E5FC5B1D"/>
        <Item Type="CustomScript" Id="4BBFC037"/>
        <Item Type="CustomScript" Id="544EB655"/>
        <Item Type="CustomScript" Id="A7233083"/>
        <Item Type="CustomScript" Id="68C568AD"/>
        <Item Type="CustomScript" Id="A8360035"/>
        <Item Type="CustomScript" Id="C04A5BF7"/>
        <Item Type="CustomScript" Id="36516A8C"/>
        <Item Type="CustomScript" Id="1CA40E12"/>
        <Item Type="CustomScript" Id="289A2477"/>
        <Item Type="CustomScript" Id="D9A75A44"/>
        <Item Type="CustomScript" Id="F8F7E9B8"/>
        <Item Type="CustomScript" Id="12F08333"/>
        <Item Type="CustomScript" Id="72FBB83E"/>
        <Item Type="CustomScript" Id="778340C5"/>
        <Item Type="CustomScript" Id="DB27E89C"/>
        <Item Type="CustomScript" Id="C707660C"/>
        <Item Type="CustomScript" Id="28361E9F"/>
        <Item Type="CustomScript" Id="9637C611"/>
        <Item Type="CustomScript" Id="AA1C6E4E"/>
        <Item Type="CustomScript" Id="A4E21B49"/>
        <Item Type="CustomScript" Id="D74FF4B3"/>
        <Item Type="CustomScript" Id="8E21AC8A"/>
        <Item Type="CustomScript" Id="69EC94DC"/>
        <Item Type="CustomScript" Id="0FBCE66C"/>
        <Item Type="CustomScript" Id="A4F6C927"/>
        <Item Type="CustomScript" Id="B5092127"/>
        <Item Type="CustomScript" Id="A9ED4090"/>
        <Item Type="CustomScript" Id="26E8209C"/>
        <Item Type="CustomScript" Id="473DB0FF"/>
        <Item Type="CustomScript" Id="2671F582"/>
        <Item Type="CustomScript" Id="3357C067"/>
        <Item Type="CustomScript" Id="352824BC"/>
        <Item Type="CustomScript" Id="EF7FF13C"/>
        <Item Type="CustomScript" Id="113E807E"/>
        <Item Type="CustomScript" Id="01844B49"/>
    </Element>
    <Element Type="CustomScript" Id="5DBFB3EB">
        <ScriptCode>
            void gf_CheckSeasonalRequirements (int lp_player) {
                // Implementation
                if ((gv_winterHolidays == true)) {
                    gf_UnlockRequirement(lp_player, 2, 27);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="98C7BACF">
        <ScriptCode>
            int gf_PlayerWithHandle (string lp_handle) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((lp_handle == gv_handle[PlayerGroupLoopCurrent()])) {
                        lv_value = PlayerGroupLoopCurrent();
                        break;
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E5FC5B1D">
        <ScriptCode>
            void gf_ReprimandPlayer (string lp_handle, text lp_info) {
                // Implementation
                gv_reprimandedList[gv_reprimandIndex] = lp_handle;
                gv_reprimandIndex += 1;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4BBFC037">
        <ScriptCode>
            bool gf_ReprimandedPlayer (int lp_player) {
                int autoBE19F746_ae;
                int autoBE19F746_ai;
                // Variable Declarations
                int lv_a;
                bool lv_value;
                // Variable Initialization
                // Implementation
                autoBE19F746_ae = gv_reprimandedMax;
                autoBE19F746_ai = 1;
                lv_a = 1;
                for ( ; ( (autoBE19F746_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoBE19F746_ae) || (autoBE19F746_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoBE19F746_ae) ) ; lv_a += autoBE19F746_ai ) {
                    if ((gv_handle[lp_player] == gv_reprimandedList[lv_a])) {
                        lv_value = true;
                        break;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="544EB655">
        <ScriptCode>
            bool gf_RatingKeyValid (string lp_entry, string lp_section, int lp_index) {
                // Variable Declarations
                string lv_daString;
                int lv_key;
                int lv_keyValue;
                int lv_flood;
                int lv_pL;
                int lv_supposedLength;
                bool lv_value;
                // Variable Initialization
                lv_daString = &quot;&quot;;
                // Implementation
                if ((BankKeyExists(BankLastCreated(), lp_section, lp_entry) == true) &amp;&amp; (BankKeyExists(BankLastCreated(), &quot;stats&quot;, &quot;kjU9zLa&quot;) == true) &amp;&amp; (BankKeyExists(BankLastCreated(), &quot;stats&quot;, &quot;Makkara&quot;) == true)) {
                    lv_daString = BankValueGetAsString(BankLastCreated(), lp_section, lp_entry);
                    lv_key = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), &quot;stats&quot;, &quot;kjU9zLa&quot;), ((gv_trolzl12 + 1) - lp_index), ((gv_trolzl12 + 1) - lp_index)));
                    lv_keyValue = StringToInt(StringSub(lv_daString, lv_key, lv_key));
                    lv_flood = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), &quot;stats&quot;, &quot;Makkara&quot;), lp_index, lp_index));
                    lv_pL = StringLength(IntToString(gf_DecryptInt(lv_daString, lv_key, lv_flood)));
                    lv_supposedLength = (lv_key + ((lv_flood * 3) + (lv_pL * lv_keyValue)));
                    if ((StringLength(lv_daString) == lv_supposedLength)) {
                        lv_value = true;
                    }
                    else {
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A7233083">
        <ScriptCode>
            void gf_UpdatePlayerRating (int lp_player, int lp_winLoss) {
                // Variable Declarations
                int lv_t;
                int lv_ot;
                fixed lv_expectedoutcome;
                int lv_k;
                // Variable Initialization
                lv_t = gv_playerData[lp_player].lv_team;
                lv_ot = lv_t;
                lv_k = gf_GetKValue(lp_player);
                // Implementation
                if (lv_ot &gt;= 2) {
                    lv_ot = 1;
                }
                else {
                    lv_ot = lv_ot + 1;
                }
                lv_expectedoutcome = (1.0 / (1.0 + Pow(10.0, ((gv_teamData[lv_ot].lv_rating - gv_ratingvalue[lp_player]) / 400.0))));
                gv_ratingvalue[lp_player] += FixedToInt(Round((IntToFixed(lv_k) * (IntToFixed(lp_winLoss) - lv_expectedoutcome))));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="68C568AD">
        <ScriptCode>
            int gf_GetKValue (int lp_player) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_ratinggames[lp_player] &lt;= 10)) {
                    lv_value = 60;
                }
                else if (true) {
                    lv_value = 30;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A8360035">
        <ScriptCode>
            bool gf_ValidRatedGame () {
                // Variable Declarations
                int lv_count;
                bool lv_value;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) &amp;&amp; (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                        lv_count += 1;
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                if ((lv_count &gt; 1)) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C04A5BF7">
        <ScriptCode>
            void gf_SaveSB3 (int lp_i) {
                // Variable Declarations
                string lv_keystring;
                string lv_floodstring;
                // Variable Initialization
                lv_keystring = gf_GetRandom12String();
                lv_floodstring = gf_GetRandom12String();
                // Implementation
                BankLoad(&quot;nostrobskalufs&quot;, lp_i);
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;hJu5gRo&quot;, gf_EncryptInt(gv_ratingvalue[lp_i], StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 0), (gv_trolzl12 - 0))), StringToInt(StringSub(lv_floodstring, 1, 1))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;Ka0fazH&quot;, gf_EncryptInt(gv_ratinggames[lp_i], StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 1), (gv_trolzl12 - 1))), StringToInt(StringSub(lv_floodstring, 2, 2))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;kjU9zLa&quot;, lv_keystring);
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;Makkara&quot;, lv_floodstring);
                BankSave(BankLastCreated());
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="36516A8C">
        <ScriptCode>
            void gf_SlayerProgress (int lp_player, unit lp_boss) {
                // Variable Declarations
                int lv_index;
                // Variable Initialization
                // Implementation
                if ((UnitGetType(lp_boss) == &quot;MurlocChieftain&quot;)) {
                    lv_index = 1;
                }
                else if ((UnitGetType(lp_boss) == &quot;Zulrogg&quot;)) {
                    lv_index = 2;
                }
                else if ((UnitGetType(lp_boss) == &quot;DemonLordJaryx&quot;)) {
                    lv_index = 3;
                }
                else if ((UnitGetType(lp_boss) == &quot;FrostWitch&quot;)) {
                    lv_index = 4;
                }
                gv_slayer[lp_player] = StringReplace(gv_slayer[lp_player], &quot;1&quot;, lv_index, lv_index);
                if ((gv_slayer[lp_player] == &quot;1111&quot;)) {
                    gf_UnlockRequirement(lp_player, 1, 14);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1CA40E12">
        <ScriptCode>
            void gf_VanquisherStart (int lp_player) {
                // Implementation
                if ((gv_dead[lp_player] == false) &amp;&amp; (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceAllyExcludeSelf, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 5)) {
                    gv_vanquisherEnabled[lp_player] = true;
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="289A2477">
        <ScriptCode>
            void gf_AllSpellsLearnedCheck (int lp_player) {
                // Variable Declarations
                unit lv_unit;
                // Variable Initialization
                lv_unit = gv_playerData[lp_player].lv_kobold;
                // Implementation
                if ((gv_learnedSpellsString[lp_player] == &quot;11111111&quot;)) {
                    gv_playerData[lp_player].lv_hasAllSpells = true;
                    if ((GameGetMissionTime() &lt;= 600.0)) {
                        gf_UnlockRequirement(lp_player, 2, 8);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D9A75A44">
        <ScriptCode>
            bool gf_ChampionGame () {
                int auto6A6BCB71_ae;
                int auto6A6BCB71_ai;
                // Variable Declarations
                int lv_a;
                bool lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_activeTeams &gt;= 10)) {
                    lv_value = true;
                    auto6A6BCB71_ae = gv_players;
                    auto6A6BCB71_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto6A6BCB71_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto6A6BCB71_ae) || (auto6A6BCB71_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto6A6BCB71_ae) ) ; lv_a += auto6A6BCB71_ai ) {
                        if ((PlayerType(lv_a) == c_playerTypeComputer)) {
                            lv_value = false;
                        }
                        else {
                        }
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F8F7E9B8">
        <ScriptCode>
            void gf_AddSpecialReward (string lp_handle, string lp_reward, text lp_comment) {
                string autoD291169C_val;
                // Variable Declarations
                int lv_player;
                // Variable Initialization
                lv_player = gf_PlayerWithHandle(lp_handle);
                // Implementation
                if ((lv_player != 0)) {
                    autoD291169C_val = lp_reward;
                    if (autoD291169C_val == &quot;tournamentWin0002a&quot;) {
                        gf_UnlockRequirement(lv_player, 1, 27);
                        gf_UnlockRequirement(lv_player, 1, 28);
                        gf_UnlockRequirement(lv_player, 2, 28);
                    }
                    else if (autoD291169C_val == &quot;tournamentWin0002b&quot;) {
                        gf_UnlockRequirement(lv_player, 2, 28);
                    }
                    else if (autoD291169C_val == &quot;tournamentWin0002c&quot;) {
                        gf_UnlockRequirement(lv_player, 1, 27);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="12F08333">
        <ScriptCode>
            void gf_createreward (int lp_type, text lp_title, int lp_titleStyle, text lp_tooltip, int lp_cost, int lp_requirementIndex, text lp_requirementText) {
                // Implementation
                gv_rewardindex += 1;
                gv_reward[gv_rewardindex].lv_cost = lp_cost;
                gv_reward[gv_rewardindex].lv_titleStyle = lp_titleStyle;
                gv_reward[gv_rewardindex].lv_type = lp_type;
                gv_reward[gv_rewardindex].lv_requirementIndex = lp_requirementIndex;
                gv_reward[gv_rewardindex].lv_requirementText = lp_requirementText;
                gv_reward[gv_rewardindex].lv_title = lp_title;
                gv_reward[gv_rewardindex].lv_tooltip = lp_tooltip;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="72FBB83E">
        <ScriptCode>
            bool gf_RewardCatIndexActive (int lp_player, int lp_category, int lp_index) {
                // Variable Declarations
                bool lv_value;
                // Variable Initialization
                // Implementation
                if (((gv_rewardState[lp_player][lp_category][lp_index] == 3) || (gv_rewardState[lp_player][lp_category][lp_index] == 6) || (gv_rewardState[lp_player][lp_category][lp_index] == 9))) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="778340C5">
        <ScriptCode>
            int gf_GetUnlockedVariable (int lp_integer) {
                int autoB1DB700C_val;
                int autoC58D99E8_val;
                int auto1E7C0D1F_val;
                // Variable Declarations
                int lv_random;
                int lv_value;
                // Variable Initialization
                lv_random = RandomInt(1, 3);
                // Implementation
                if ((lp_integer == 1)) {
                    autoB1DB700C_val = lv_random;
                    if (autoB1DB700C_val == 1) {
                        lv_value = 1;
                    }
                    else if (autoB1DB700C_val == 2) {
                        lv_value = 4;
                    }
                    else if (autoB1DB700C_val == 3) {
                        lv_value = 7;
                    }
                    else {
                    }
                }
                else if ((lp_integer == 2)) {
                    autoC58D99E8_val = lv_random;
                    if (autoC58D99E8_val == 1) {
                        lv_value = 2;
                    }
                    else if (autoC58D99E8_val == 2) {
                        lv_value = 5;
                    }
                    else if (autoC58D99E8_val == 3) {
                        lv_value = 8;
                    }
                    else {
                    }
                }
                else if ((lp_integer == 3)) {
                    auto1E7C0D1F_val = lv_random;
                    if (auto1E7C0D1F_val == 1) {
                        lv_value = 3;
                    }
                    else if (auto1E7C0D1F_val == 2) {
                        lv_value = 6;
                    }
                    else if (auto1E7C0D1F_val == 3) {
                        lv_value = 9;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DB27E89C">
        <ScriptCode>
            int gf_GetUnlockedStatus (int lp_integer) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if (((lp_integer == 1) || (lp_integer == 4) || (lp_integer == 7))) {
                    lv_value = 1;
                }
                else if (((lp_integer == 2) || (lp_integer == 5) || (lp_integer == 8))) {
                    lv_value = 2;
                }
                else if (((lp_integer == 3) || (lp_integer == 6) || (lp_integer == 9))) {
                    lv_value = 3;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C707660C">
        <ScriptCode>
            bool gf_RewardButtonClicked (int lp_button) {
                int auto061951E3_ae;
                int auto061951E3_ai;
                // Variable Declarations
                int lv_a;
                bool lv_value;
                // Variable Initialization
                // Implementation
                auto061951E3_ae = gv_rewardItems;
                auto061951E3_ai = 1;
                lv_a = 1;
                for ( ; ( (auto061951E3_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto061951E3_ae) || (auto061951E3_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto061951E3_ae) ) ; lv_a += auto061951E3_ai ) {
                    if ((gv_rewardButton[lv_a] == lp_button)) {
                        lv_value = true;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="28361E9F">
        <ScriptCode>
            int gf_GetRewardButtonIndex (int lp_button) {
                int autoBEB270A2_ae;
                int autoBEB270A2_ai;
                // Variable Declarations
                int lv_a;
                int lv_value;
                // Variable Initialization
                // Implementation
                autoBEB270A2_ae = gv_rewardItems;
                autoBEB270A2_ai = 1;
                lv_a = 1;
                for ( ; ( (autoBEB270A2_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoBEB270A2_ae) || (autoBEB270A2_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoBEB270A2_ae) ) ; lv_a += autoBEB270A2_ai ) {
                    if ((gv_rewardButton[lv_a] == lp_button)) {
                        lv_value = lv_a;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9637C611">
        <ScriptCode>
            void gf_ShowRewardsDialog (int lp_player) {
                // Implementation
                if ((gv_acclvl[lp_player] &gt;= gv_rewardLevelRequirement) &amp;&amp; (DialogIsVisible(gv_rewardsMainWindow, lp_player) == false)) {
                    DialogSetVisible(gv_pGSWindowLarge, PlayerGroupSingle(lp_player), false);
                    DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupSingle(lp_player), false);
                    DialogSetVisible(gv_perkWindow, PlayerGroupSingle(lp_player), false);
                    DialogSetVisible(gv_rewardsMainWindow, PlayerGroupSingle(lp_player), true);
                    libNtve_gf_SetDialogItemText(gv_perkDialogSmallBTN, StringExternal(&quot;Param/Value/86F9746F&quot;), PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemText(gv_pGSWindowSmallBTN, StringExternal(&quot;Param/Value/799732D6&quot;), PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemText(gv_rewardsOpenerItem, gf_RewardsOpenerText(lp_player), PlayerGroupSingle(EventPlayer()));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="AA1C6E4E">
        <ScriptCode>
            void gf_UpdateRewardsDialog (int lp_player) {
                int auto60F9EEFF_ae;
                int auto60F9EEFF_ai;
                // Variable Declarations
                text lv_title;
                text lv_tooltip;
                int lv_a;
                // Variable Initialization
                lv_title = StringExternal(&quot;Param/Value/3C3A62CC&quot;);
                lv_tooltip = StringExternal(&quot;Param/Value/15B192F3&quot;);
                // Implementation
                gf_HideAllRewButtons(lp_player);
                gf_CategoryText(lp_player);
                TextExpressionSetToken(&quot;Param/Expression/C57265DD&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/512867AB&quot;));
                TextExpressionSetToken(&quot;Param/Expression/C57265DD&quot;, &quot;B&quot;, IntToText(gv_conqpoints[lp_player]));
                libNtve_gf_SetDialogItemText(gv_conqpointsLabel, TextExpressionAssemble(&quot;Param/Expression/C57265DD&quot;), PlayerGroupSingle(lp_player));
                auto60F9EEFF_ae = 28;
                auto60F9EEFF_ai = 1;
                lv_a = 1;
                for ( ; ( (auto60F9EEFF_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto60F9EEFF_ae) || (auto60F9EEFF_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto60F9EEFF_ae) ) ; lv_a += auto60F9EEFF_ai ) {
                    if ((gv_rewardCost[gv_rewardsCatSelect[lp_player]][lv_a] != -1) &amp;&amp; ((gv_rewardHideIfReqIncomplete[gv_rewardsCatSelect[lp_player]][lv_a] == false) || (gf_RequirementCompleted(lp_player, gv_rewardsCatSelect[lp_player], lv_a) == true))) {
                        DialogControlSetVisible(gv_rewardButton[lv_a], PlayerGroupSingle(lp_player), true);
                        lv_title = gv_rewardTitle[gv_rewardsCatSelect[lp_player]][lv_a];
                        TextExpressionSetToken(&quot;Param/Expression/61426F5E&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/2FC09342&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/61426F5E&quot;, &quot;B&quot;, lv_title);
                        TextExpressionSetToken(&quot;Param/Expression/61426F5E&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/D5E90946&quot;));
                        lv_title = TextExpressionAssemble(&quot;Param/Expression/61426F5E&quot;);
                        lv_tooltip = lv_title;
                        lv_tooltip = (lv_tooltip + StringExternal(&quot;Param/Value/1F5630BB&quot;));
                        lv_tooltip = (lv_tooltip + gf_RewardCostText(lp_player, lv_a));
                        lv_tooltip = (lv_tooltip + gf_RewardTooltipText(lp_player, lv_a));
                        lv_tooltip = (lv_tooltip + gf_RewardReqText(lp_player, lv_a));
                        libNtve_gf_SetDialogItemText(gv_rewardButton[lv_a], lv_title, PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemTooltip(gv_rewardButton[lv_a], lv_tooltip, PlayerGroupSingle(lp_player));
                    }
                    else {
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A4E21B49">
        <ScriptCode>
            void gf_CategoryText (int lp_player) {
                int autoC7A8F8B8_ae;
                int autoC7A8F8B8_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                autoC7A8F8B8_ae = gv_rewardCategories;
                autoC7A8F8B8_ai = 1;
                lv_a = 1;
                for ( ; ( (autoC7A8F8B8_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC7A8F8B8_ae) || (autoC7A8F8B8_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC7A8F8B8_ae) ) ; lv_a += autoC7A8F8B8_ai ) {
                    if ((gv_rewardsCatSelect[lp_player] == lv_a)) {
                        libNtve_gf_SetDialogItemColor(gv_rewardsCatBTN[lv_a], Color(22*100/255,128*100/255,0), PlayerGroupSingle(lp_player));
                    }
                    else {
                        libNtve_gf_SetDialogItemColor(gv_rewardsCatBTN[lv_a], Color(100,100,100), PlayerGroupSingle(lp_player));
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D74FF4B3">
        <ScriptCode>
            void gf_HideAllRewButtons (int lp_player) {
                int auto6885CDFC_ae;
                int auto6885CDFC_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                auto6885CDFC_ae = 28;
                auto6885CDFC_ai = 1;
                lv_a = 1;
                for ( ; ( (auto6885CDFC_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto6885CDFC_ae) || (auto6885CDFC_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto6885CDFC_ae) ) ; lv_a += auto6885CDFC_ai ) {
                    DialogControlSetVisible(gv_rewardButton[lv_a], PlayerGroupSingle(lp_player), false);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8E21AC8A">
        <ScriptCode>
            text gf_RewardsOpenerText (int lp_player) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                // Implementation
                if ((DialogIsVisible(gv_rewardsMainWindow, lp_player) == true)) {
                    lv_value = StringExternal(&quot;Param/Value/6C0698B1&quot;);
                }
                else if ((gv_acclvl[lp_player] &lt; gv_rewardLevelRequirement)) {
                    lv_value = StringExternal(&quot;Param/Value/4187AB45&quot;);
                }
                else if (true) {
                    lv_value = StringExternal(&quot;Param/Value/65E8CB6C&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="69EC94DC">
        <ScriptCode>
            text gf_RewardCostText (int lp_player, int lp_a) {
                // Variable Declarations
                int lv_cost;
                text lv_value;
                // Variable Initialization
                lv_cost = gv_rewardCost[gv_rewardsCatSelect[lp_player]][lp_a];
                lv_value = StringExternal(&quot;Param/Value/FD921713&quot;);
                // Implementation
                if (((gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 1) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 4) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 7))) {
                    lv_value = (lv_value + IntToText(gv_conqpoints[lp_player]));
                    lv_value = (lv_value + StringExternal(&quot;Param/Value/0DA4C3ED&quot;));
                    lv_value = (lv_value + IntToText(lv_cost));
                    lv_value = (lv_value + StringExternal(&quot;Param/Value/7D0A8145&quot;));
                    if ((gv_conqpoints[lp_player] &gt;= lv_cost)) {
                        TextExpressionSetToken(&quot;Param/Expression/022E8641&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3B7E031F&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/022E8641&quot;, &quot;B&quot;, lv_value);
                        TextExpressionSetToken(&quot;Param/Expression/022E8641&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/0B982F90&quot;));
                        lv_value = TextExpressionAssemble(&quot;Param/Expression/022E8641&quot;);
                    }
                    else {
                        TextExpressionSetToken(&quot;Param/Expression/929D2084&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/C65F9C8A&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/929D2084&quot;, &quot;B&quot;, lv_value);
                        TextExpressionSetToken(&quot;Param/Expression/929D2084&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/4EDFE6CF&quot;));
                        lv_value = TextExpressionAssemble(&quot;Param/Expression/929D2084&quot;);
                    }
                }
                else if (((gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 2) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 5) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 8))) {
                    lv_value = StringExternal(&quot;Param/Value/46E91F58&quot;);
                }
                else if (((gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 3) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 6) || (gv_rewardState[lp_player][gv_rewardsCatSelect[lp_player]][lp_a] == 9))) {
                    lv_value = StringExternal(&quot;Param/Value/29B670BB&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0FBCE66C">
        <ScriptCode>
            text gf_RewardTooltipText (int lp_player, int lp_a) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                lv_value = StringExternal(&quot;Param/Value/D88618FE&quot;);
                // Implementation
                if ((gv_rewardsCatSelect[lp_player] == 1)) {
                    TextExpressionSetToken(&quot;Param/Expression/B45955D5&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/A0B3F3C3&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/B45955D5&quot;, &quot;B&quot;, gf_TitleFormat(lp_player, lp_a));
                    TextExpressionSetToken(&quot;Param/Expression/B45955D5&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/A9705725&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/B45955D5&quot;);
                }
                else {
                    TextExpressionSetToken(&quot;Param/Expression/F33B63EE&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/65D313AE&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/F33B63EE&quot;, &quot;B&quot;, gv_rewardTooltip[gv_rewardsCatSelect[lp_player]][lp_a]);
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/F33B63EE&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A4F6C927">
        <ScriptCode>
            text gf_RewardReqText (int lp_player, int lp_a) {
                // Variable Declarations
                text lv_value;
                text lv_requirement;
                bool lv_completed;
                int lv_gladiatorSpree;
                // Variable Initialization
                lv_value = StringExternal(&quot;Param/Value/52AB17B4&quot;);
                lv_requirement = StringExternal(&quot;Param/Value/EF5A3D0A&quot;);
                lv_gladiatorSpree = gv_gladSpree[lp_player];
                // Implementation
                if ((gv_rewardReqExists[gv_rewardsCatSelect[lp_player]][lp_a] == true)) {
                    if ((gf_RequirementCompleted(lp_player, gv_rewardsCatSelect[lp_player], lp_a) == false)) {
                        lv_requirement = StringExternal(&quot;Param/Value/4D578BB6&quot;);
                    }
                    else {
                        lv_completed = true;
                        lv_requirement = StringExternal(&quot;Param/Value/99EB4B20&quot;);
                    }
                    if ((gv_rewardsCatSelect[lp_player] == 1) &amp;&amp; (lp_a == 17)) {
                        if ((gf_RequirementCompleted(lp_player, 1, 4) == true)) {
                            lv_gladiatorSpree = 5;
                        }
                        else {
                        }
                        TextExpressionSetToken(&quot;Param/Expression/848BE313&quot;, &quot;A&quot;, lv_requirement);
                        TextExpressionSetToken(&quot;Param/Expression/848BE313&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/4C150FFE&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/848BE313&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/AFF231BD&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/848BE313&quot;, &quot;D&quot;, IntToText(lv_gladiatorSpree));
                        TextExpressionSetToken(&quot;Param/Expression/848BE313&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/9FA9E9DC&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/848BE313&quot;, &quot;F&quot;, IntToText(5));
                        TextExpressionSetToken(&quot;Param/Expression/848BE313&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/7C384FBD&quot;));
                        lv_value = TextExpressionAssemble(&quot;Param/Expression/848BE313&quot;);
                    }
                    else if (true) {
                        TextExpressionSetToken(&quot;Param/Expression/B3C3EE87&quot;, &quot;A&quot;, lv_requirement);
                        TextExpressionSetToken(&quot;Param/Expression/B3C3EE87&quot;, &quot;B&quot;, gv_rewardReq[gv_rewardsCatSelect[lp_player]][lp_a]);
                        TextExpressionSetToken(&quot;Param/Expression/B3C3EE87&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/1A5E4B0E&quot;));
                        lv_value = TextExpressionAssemble(&quot;Param/Expression/B3C3EE87&quot;);
                    }
                }
                else {
                }
                TextExpressionSetToken(&quot;Param/Expression/52EBA528&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/235773C8&quot;));
                TextExpressionSetToken(&quot;Param/Expression/52EBA528&quot;, &quot;B&quot;, lv_value);
                TextExpressionSetToken(&quot;Param/Expression/52EBA528&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/FCBBB0D8&quot;));
                lv_value = TextExpressionAssemble(&quot;Param/Expression/52EBA528&quot;);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B5092127">
        <ScriptCode>
            text gf_TitleFormat (int lp_player, int lp_a) {
                int autoE7E51B13_val;
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                lv_value = StringExternal(&quot;Param/Value/F265AA6D&quot;);
                // Implementation
                autoE7E51B13_val = gv_rewardsTitleStyle[lp_a];
                if (autoE7E51B13_val == 1) {
                    TextExpressionSetToken(&quot;Param/Expression/16C46D13&quot;, &quot;B&quot;, gv_rewardTitle[1][lp_a]);
                    TextExpressionSetToken(&quot;Param/Expression/16C46D13&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/6F97B39B&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/16C46D13&quot;, &quot;C&quot;, PlayerName(lp_player));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/16C46D13&quot;);
                }
                else if (autoE7E51B13_val == 2) {
                    TextExpressionSetToken(&quot;Param/Expression/3D98F292&quot;, &quot;C&quot;, PlayerName(lp_player));
                    TextExpressionSetToken(&quot;Param/Expression/3D98F292&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/D6508F61&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/3D98F292&quot;, &quot;B&quot;, gv_rewardTitle[1][lp_a]);
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/3D98F292&quot;);
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A9ED4090">
        <ScriptCode>
            void gf_SaveRewards (int lp_i) {
                // Variable Declarations
                string lv_keystring;
                string lv_floodstring;
                // Variable Initialization
                lv_keystring = gf_GetRandom12String();
                lv_floodstring = gf_GetRandom12String();
                // Implementation
                BankLoad(&quot;nostrobskalufs&quot;, lp_i);
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;Yb4aLtz&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 1, 1)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 0), (gv_trolzl12 - 0))), StringToInt(StringSub(lv_floodstring, 1, 1))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;J1klbk&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 1, 8)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 1), (gv_trolzl12 - 1))), StringToInt(StringSub(lv_floodstring, 2, 2))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;grtzk61&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 1, 15)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 2), (gv_trolzl12 - 2))), StringToInt(StringSub(lv_floodstring, 3, 3))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;HaL14rk&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 1, 22)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 3), (gv_trolzl12 - 3))), StringToInt(StringSub(lv_floodstring, 4, 4))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;NepRk9a&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 2, 1)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 4), (gv_trolzl12 - 4))), StringToInt(StringSub(lv_floodstring, 5, 5))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;Frvz7vl&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 2, 8)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 5), (gv_trolzl12 - 5))), StringToInt(StringSub(lv_floodstring, 6, 6))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;oO0brtg&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 2, 15)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 6), (gv_trolzl12 - 6))), StringToInt(StringSub(lv_floodstring, 7, 7))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;yrNyz31&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 2, 22)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 7), (gv_trolzl12 - 7))), StringToInt(StringSub(lv_floodstring, 8, 8))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;zT5S5mn&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 3, 1)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 8), (gv_trolzl12 - 8))), StringToInt(StringSub(lv_floodstring, 9, 9))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;kTrK7xb&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 3, 8)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 9), (gv_trolzl12 - 9))), StringToInt(StringSub(lv_floodstring, 10, 10))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;nypR6ex&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 3, 15)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 10), (gv_trolzl12 - 10))), StringToInt(StringSub(lv_floodstring, 11, 11))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;kxNn88a&quot;, gf_EncryptInt(StringToInt(gf_GetRewardState(lp_i, 3, 22)), StringToInt(StringSub(lv_keystring, (gv_trolzl12 - 11), (gv_trolzl12 - 11))), StringToInt(StringSub(lv_floodstring, 12, 12))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;IbRt8q8&quot;, lv_keystring);
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;LoBfl21&quot;, lv_floodstring);
                BankSave(BankLastCreated());
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="26E8209C">
        <ScriptCode>
            void gf_SetRewardState (int lp_player, int lp_integerString, int lp_category, int lp_index) {
                int auto551DE330_ae;
                int auto551DE330_ai;
                // Variable Declarations
                string lv_string;
                int lv_a;
                int lv_b;
                // Variable Initialization
                lv_string = IntToString(lp_integerString);
                // Implementation
                auto551DE330_ae = (lp_index + 6);
                auto551DE330_ai = 1;
                lv_a = lp_index;
                for ( ; ( (auto551DE330_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto551DE330_ae) || (auto551DE330_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto551DE330_ae) ) ; lv_a += auto551DE330_ai ) {
                    lv_b += 1;
                    gv_rewardState[lp_player][lp_category][lv_a] = StringToInt(StringSub(lv_string, lv_b, lv_b));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="473DB0FF">
        <ScriptCode>
            string gf_GetRewardState (int lp_player, int lp_category, int lp_index) {
                int autoE29A0069_ae;
                int autoE29A0069_ai;
                // Variable Declarations
                int lv_a;
                string lv_value;
                // Variable Initialization
                lv_value = &quot;&quot;;
                // Implementation
                autoE29A0069_ae = (lp_index + 6);
                autoE29A0069_ai = 1;
                lv_a = lp_index;
                for ( ; ( (autoE29A0069_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE29A0069_ae) || (autoE29A0069_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE29A0069_ae) ) ; lv_a += autoE29A0069_ai ) {
                    lv_value = (lv_value + IntToString(gv_rewardState[lp_player][lp_category][lv_a]));
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2671F582">
        <ScriptCode>
            void gf_DeactivateConflictingRewards (int lp_player, int lp_category, int lp_index) {
                int auto86543E63_ae;
                int auto86543E63_ai;
                int autoF1A7A559_ae;
                int autoF1A7A559_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                if ((lp_category == 1)) {
                    auto86543E63_ae = gv_rewardItems;
                    auto86543E63_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto86543E63_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto86543E63_ae) || (auto86543E63_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto86543E63_ae) ) ; lv_a += auto86543E63_ai ) {
                        if ((lv_a != lp_index) &amp;&amp; (gf_GetUnlockedStatus(gv_rewardState[lp_player][lp_category][lv_a]) == 3)) {
                            gv_rewardState[lp_player][lp_category][lv_a] = gf_GetUnlockedVariable(2);
                        }
                        else {
                        }
                    }
                }
                else if ((lp_category == 2) &amp;&amp; (lp_index != 9)) {
                    autoF1A7A559_ae = gv_rewardItems;
                    autoF1A7A559_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoF1A7A559_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoF1A7A559_ae) || (autoF1A7A559_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoF1A7A559_ae) ) ; lv_a += autoF1A7A559_ai ) {
                        if ((lv_a != lp_index) &amp;&amp; (lv_a != 9) &amp;&amp; (gf_GetUnlockedStatus(gv_rewardState[lp_player][lp_category][lv_a]) == 3)) {
                            gv_rewardState[lp_player][lp_category][lv_a] = gf_GetUnlockedVariable(2);
                        }
                        else {
                        }
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3357C067">
        <ScriptCode>
            bool gf_ValidReward (string lp_entry, string lp_section, int lp_index) {
                // Variable Declarations
                string lv_daString;
                int lv_key;
                int lv_keyValue;
                int lv_flood;
                int lv_pL;
                int lv_supposedLength;
                bool lv_value;
                // Variable Initialization
                lv_daString = &quot;&quot;;
                // Implementation
                if ((BankKeyExists(BankLastCreated(), lp_section, lp_entry) == true) &amp;&amp; (BankKeyExists(BankLastCreated(), &quot;stats&quot;, &quot;IbRt8q8&quot;) == true) &amp;&amp; (BankKeyExists(BankLastCreated(), &quot;stats&quot;, &quot;LoBfl21&quot;) == true)) {
                    lv_daString = BankValueGetAsString(BankLastCreated(), lp_section, lp_entry);
                    lv_key = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), &quot;stats&quot;, &quot;IbRt8q8&quot;), ((gv_trolzl12 + 1) - lp_index), ((gv_trolzl12 + 1) - lp_index)));
                    lv_keyValue = StringToInt(StringSub(lv_daString, lv_key, lv_key));
                    lv_flood = StringToInt(StringSub(BankValueGetAsString(BankLastCreated(), &quot;stats&quot;, &quot;LoBfl21&quot;), lp_index, lp_index));
                    lv_pL = StringLength(IntToString(gf_DecryptInt(lv_daString, lv_key, lv_flood)));
                    lv_supposedLength = (lv_key + ((lv_flood * 3) + (lv_pL * lv_keyValue)));
                    if ((StringLength(lv_daString) == lv_supposedLength)) {
                        lv_value = true;
                    }
                    else {
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="352824BC">
        <ScriptCode>
            int gf_GetActiveTitleIndex (int lp_player) {
                int auto9B3EFAFB_ae;
                int auto9B3EFAFB_ai;
                // Variable Declarations
                int lv_a;
                int lv_value;
                // Variable Initialization
                lv_value = -1;
                // Implementation
                auto9B3EFAFB_ae = gv_rewardItems;
                auto9B3EFAFB_ai = 1;
                lv_a = 1;
                for ( ; ( (auto9B3EFAFB_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto9B3EFAFB_ae) || (auto9B3EFAFB_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto9B3EFAFB_ae) ) ; lv_a += auto9B3EFAFB_ai ) {
                    if (((gv_rewardState[lp_player][1][lv_a] == 3) || (gv_rewardState[lp_player][1][lv_a] == 6) || (gv_rewardState[lp_player][1][lv_a] == 9))) {
                        lv_value = lv_a;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EF7FF13C">
        <ScriptCode>
            bool gf_RequirementCompleted (int lp_player, int lp_category, int lp_index) {
                // Variable Declarations
                bool lv_value;
                // Variable Initialization
                // Implementation
                if (((StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == &quot;2&quot;) || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == &quot;5&quot;) || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == &quot;8&quot;) || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == &quot;3&quot;) || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == &quot;6&quot;) || (StringSub(gv_requirementString[lp_category][lp_player], lp_index, lp_index) == &quot;9&quot;))) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="113E807E">
        <ScriptCode>
            void gf_UnlockRequirement (int lp_player, int lp_category, int lp_index) {
                int autoA9306325_val;
                // Variable Declarations
                int lv_a;
                int lv_b;
                // Variable Initialization
                // Implementation
                if (gv_cheated){
                    return;
                }
                if ((gv_acclvl[lp_player] &gt;= gv_rewardLevelRequirement)) {
                    autoA9306325_val = lp_category;
                    if (autoA9306325_val == 1) {
                        if ((lp_index == 9) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/D1B4F09A&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 10) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/0BD31747&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 11) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/F780EFA3&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 12) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/3FAD147D&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 13) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/1A5931EF&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 14) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/C0A25FA8&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 15) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/DC58A046&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 16) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/35AC1F16&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 17) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/92AF42D0&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 18) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/6BD1C0F8&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 19) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/DB876DE8&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 20) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/E14CC6DE&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 21) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/6CA08BF6&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 22) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/CFF94D14&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 23) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/FE276EB4&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 24) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/5950B340&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 25) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/FE40E8A7&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 26) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/5E176C58&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 27) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/47FF1549&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 28) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/52B8C808&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                    }
                    else if (autoA9306325_val == 2) {
                        if ((lp_index == 2) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/4B15329E&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 5) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/564012C7&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 6) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/C610F64B&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 8) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/F986AF0A&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 9) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/657C0561&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 27) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/E0438E7C&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 28) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/4DB22FFA&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                    }
                    else if (autoA9306325_val == 3) {
                        if ((lp_index == 2) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/8C47F615&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 3) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/1D771890&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 4) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/4A9E74DC&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                        else if ((lp_index == 5) &amp;&amp; (gf_RequirementCompleted(lp_player, lp_category, lp_index) == false)) {
                            gf_RequirementAchieved(StringExternal(&quot;Param/Value/12B1BA62&quot;), SoundLink(&quot;UI_Achievement&quot;, -1), lp_category, lp_index, lp_player);
                        }
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="01844B49">
        <ScriptCode>
            void gf_RequirementAchieved (text lp_text, soundlink lp_sound, int lp_category, int lp_index, int lp_player) {
                int autoEC338A63_val;
                // Implementation
                gv_requirementString[lp_category][lp_player] = StringReplace(gv_requirementString[lp_category][lp_player], IntToString(gf_GetUnlockedVariable(RandomInt(2, 3))), lp_index, lp_index);
                TextExpressionSetToken(&quot;Param/Expression/733827AC&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/565BA192&quot;));
                TextExpressionSetToken(&quot;Param/Expression/733827AC&quot;, &quot;B&quot;, lp_text);
                TextExpressionSetToken(&quot;Param/Expression/733827AC&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/B1C6F5CB&quot;));
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/733827AC&quot;));
                SoundPlay(lp_sound, PlayerGroupSingle(lp_player), 100.0, 0.0);
                BankLoad(&quot;nostrobskalufs&quot;, lp_player);
                autoEC338A63_val = lp_category;
                if (autoEC338A63_val == 1) {
                    gf_BankSaveEncryptedString(&quot;tKlz8mi&quot;, &quot;stats&quot;, gv_requirementString[lp_category][lp_player], lp_player);
                }
                else if (autoEC338A63_val == 2) {
                    gf_BankSaveEncryptedString(&quot;BuGr21z&quot;, &quot;stats&quot;, gv_requirementString[lp_category][lp_player], lp_player);
                }
                else if (autoEC338A63_val == 3) {
                    gf_BankSaveEncryptedString(&quot;K128saz&quot;, &quot;stats&quot;, gv_requirementString[lp_category][lp_player], lp_player);
                }
                else {
                }
                BankSave(BankLastCreated());
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="715109FF">
        <Item Type="CustomScript" Id="A2F6EA89"/>
        <Item Type="CustomScript" Id="DA830448"/>
        <Item Type="CustomScript" Id="EA1BF6A3"/>
        <Item Type="CustomScript" Id="A61EC274"/>
        <Item Type="CustomScript" Id="26906DCD"/>
        <Item Type="CustomScript" Id="BA6F85BB"/>
        <Item Type="CustomScript" Id="A5C63F96"/>
        <Item Type="CustomScript" Id="3D78A68F"/>
        <Item Type="CustomScript" Id="A6BBEA4F"/>
        <Item Type="CustomScript" Id="C5C6F1F3"/>
        <Item Type="CustomScript" Id="44334928"/>
        <Item Type="CustomScript" Id="EB3C4C76"/>
        <Item Type="CustomScript" Id="F34EFFD5"/>
        <Item Type="CustomScript" Id="C68B21F8"/>
        <Item Type="CustomScript" Id="1C943683"/>
        <Item Type="CustomScript" Id="47755172"/>
        <Item Type="CustomScript" Id="F1275F95"/>
        <Item Type="CustomScript" Id="F36FE85C"/>
        <Item Type="CustomScript" Id="B95A1DE5"/>
        <Item Type="CustomScript" Id="B55944F5"/>
        <Item Type="CustomScript" Id="1354D9D6"/>
        <Item Type="CustomScript" Id="6F6945B7"/>
        <Item Type="CustomScript" Id="A76B414C"/>
        <Item Type="CustomScript" Id="B7915E5F"/>
        <Item Type="CustomScript" Id="9BD8BCD9"/>
        <Item Type="CustomScript" Id="15360DEC"/>
        <Item Type="CustomScript" Id="C04A10B9"/>
        <Item Type="CustomScript" Id="6096B21B"/>
        <Item Type="CustomScript" Id="467C4858"/>
        <Item Type="CustomScript" Id="54DF62BF"/>
        <Item Type="CustomScript" Id="2DCD5113"/>
        <Item Type="CustomScript" Id="4F3DA59A"/>
        <Item Type="CustomScript" Id="460E4DEF"/>
        <Item Type="CustomScript" Id="2DE7D9CE"/>
        <Item Type="CustomScript" Id="38392FD9"/>
        <Item Type="CustomScript" Id="05CDAD48"/>
        <Item Type="CustomScript" Id="8B88DF87"/>
        <Item Type="CustomScript" Id="1FE5ED09"/>
        <Item Type="CustomScript" Id="329179A2"/>
        <Item Type="CustomScript" Id="49176AC6"/>
        <Item Type="CustomScript" Id="855FB87A"/>
        <Item Type="CustomScript" Id="970DCD07"/>
        <Item Type="CustomScript" Id="1AB7D08F"/>
        <Item Type="CustomScript" Id="8F2E952D"/>
        <Item Type="CustomScript" Id="D9F0FBF2"/>
        <Item Type="CustomScript" Id="37E9E74C"/>
        <Item Type="CustomScript" Id="41404758"/>
        <Item Type="CustomScript" Id="0F8580DA"/>
        <Item Type="CustomScript" Id="E707CF9F"/>
        <Item Type="CustomScript" Id="25B0BD29"/>
        <Item Type="CustomScript" Id="95754F2A"/>
        <Item Type="CustomScript" Id="241D2B89"/>
        <Item Type="CustomScript" Id="6FDB3FEE"/>
        <Item Type="CustomScript" Id="E7EAB334"/>
        <Item Type="CustomScript" Id="594F91AF"/>
        <Item Type="CustomScript" Id="1A98910F"/>
        <Item Type="CustomScript" Id="23A899BE"/>
        <Item Type="CustomScript" Id="BB6383D8"/>
        <Item Type="CustomScript" Id="2073BAAB"/>
        <Item Type="CustomScript" Id="7BA7D3D5"/>
    </Element>
    <Element Type="CustomScript" Id="A2F6EA89">
        <ScriptCode>
            void gf_InitializeQuest (int lp_questIndex) {
                int autoEFF31F67_val;
                int auto546F4555_ae;
                int auto546F4555_ai;
                // Variable Declarations
                int lv_a;
                int lv_r;
                int lv_b;
                int lv_failsafe;
                int lv_end;
                // Variable Initialization
                lv_b = lp_questIndex;
                // Implementation
                if ((gv_questActive == false)) {
                    while ((lv_b == 0)) {
                        if ((lv_failsafe &lt; (gv_questAmount * 10))) {
                            lv_b = RandomInt(1, gv_questAmount);
                        }
                        else {
                            if (lv_b &gt;= gv_questAmount) {
                                lv_b = 1;
                            }
                            else {
                                lv_b = lv_b + 1;
                            }
                            lv_end += 1;
                        }
                        lv_failsafe += 1;
                        if ((((lv_b == 14) &amp;&amp; (gv_activeTeams &gt; 2)) || ((lv_b == 15) &amp;&amp; (gv_activeTeams &gt;= PlayerGroupCount(PlayerGroupActive()))))) {
                            gv_questCompleted[lv_b] = true;
                            lv_b = 0;
                        }
                        else {
                        }
                        if (((lv_b == 14)) &amp;&amp; (GameGetMissionTime() &lt; 600.0)) {
                            lv_b = 0;
                        }
                        else {
                        }
                        if ((gv_questCompleted[lv_b] == true)) {
                            lv_b = 0;
                        }
                        else {
                        }
                        if ((lv_end &gt; gv_questAmount)) {
                            break;
                        }
                        else {
                        }
                    }
                    autoEFF31F67_val = lv_b;
                    if (autoEFF31F67_val == 0) {
                        auto546F4555_ae = gv_questAmount;
                        auto546F4555_ai = 1;
                        lv_a = 1;
                        for ( ; ( (auto546F4555_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto546F4555_ae) || (auto546F4555_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto546F4555_ae) ) ; lv_a += auto546F4555_ai ) {
                            gv_questCompleted[lv_a] = false;
                        }
                        TimerStart(gv_questDelayTimer, 5.0, false, c_timeGame);
                    }
                    else if (autoEFF31F67_val == 1) {
                        gf_ChiefInit();
                    }
                    else if (autoEFF31F67_val == 2) {
                        gf_TreasureInit();
                    }
                    else if (autoEFF31F67_val == 3) {
                        gf_RetrievalInit();
                    }
                    else if (autoEFF31F67_val == 4) {
                        gf_PlantInit();
                    }
                    else if (autoEFF31F67_val == 5) {
                        gf_FeastInit();
                    }
                    else if (autoEFF31F67_val == 6) {
                        gf_GladiatorInit();
                    }
                    else if (autoEFF31F67_val == 7) {
                        gf_DeadnightinitPhase1();
                    }
                    else if (autoEFF31F67_val == 8) {
                        gf_WarlordInit();
                    }
                    else if (autoEFF31F67_val == 9) {
                        gf_TruffleInit();
                    }
                    else if (autoEFF31F67_val == 10) {
                        gf_WinterInitialize();
                    }
                    else if (autoEFF31F67_val == 11) {
                        gf_PiratesInit();
                    }
                    else if (autoEFF31F67_val == 12) {
                        gf_WizardInit();
                    }
                    else if (autoEFF31F67_val == 13) {
                        gf_BuilderInit();
                    }
                    else if (autoEFF31F67_val == 14) {
                        gf_ExileInit();
                    }
                    else if (autoEFF31F67_val == 15) {
                        gf_VeilInit();
                    }
                    else if (autoEFF31F67_val == 16) {
                        gf_ExpeditionInit();
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DA830448">
        <ScriptCode>
            fixed gf_GetNextQuestDelay () {
                // Variable Declarations
                fixed lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_activeTeams &gt; 2)) {
                    lv_value = (RandomFixed(120.0, 180.0) - libNtve_gf_ArithmeticRealClamp((gv_gameDuration / 45.0), 0.0, 60.0));
                }
                else if (true) {
                    lv_value = (RandomFixed(180.0, 240.0) - libNtve_gf_ArithmeticRealClamp((gv_gameDuration / 45.0), 0.0, 60.0));
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EA1BF6A3">
        <ScriptCode>
            void gf_QuestFinishEvents (playergroup lp_questWinners, playergroup lp_questLosers) {
                // Implementation
                if ((PlayerGroupCount(lp_questWinners) &gt; 0)) {
                    SoundPlay(SoundLink(&quot;UI_ObjectiveComplete&quot;, -1), lp_questWinners, 100.0, 0.0);
                    PlayerGroupLoopBegin(lp_questWinners);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                            gf_AddExperience(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, 200.0);
                            gf_GladiatorsStrength(PlayerGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                }
                else {
                }
                if ((PlayerGroupCount(lp_questLosers) &gt; 0)) {
                    SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), lp_questLosers, 100.0, 0.0);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A61EC274">
        <ScriptCode>
            point gf_GetBossSpawnLocation () {
                // Variable Declarations
                point lv_centerofKobolds;
                point lv_spawnLocation;
                int lv_failsafe;
                // Variable Initialization
                // Implementation
                lv_centerofKobolds = gf_WeightedCenterofKobolds();
                while ((lv_spawnLocation == null)) {
                    lv_spawnLocation = RegionRandomPoint(RegionCircle(lv_centerofKobolds, 32.0));
                    lv_failsafe += 1;
                    if (((PointPathingPassable(lv_spawnLocation) == false) || (gf_PathableMaximum(UnitGroupClosestToPoint(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), lv_spawnLocation), lv_spawnLocation, 200) == false) || (UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionCircle(lv_spawnLocation, 12.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0))) {
                        if ((lv_failsafe &lt; 500)) {
                            lv_spawnLocation = null;
                        }
                        else {
                            lv_spawnLocation = PointFromId(2850);
                        }
                    }
                    else {
                    }
                }
                return lv_spawnLocation;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="26906DCD">
        <ScriptCode>
            void gf_ChiefInit () {
                // Variable Declarations
                int lv_chieftainPlayer;
                unitgroup lv_team1Kobolds;
                unitgroup lv_team2Kobolds;
                point lv_team1Point;
                point lv_team2Point;
                point lv_spawnLocation;
                int lv_failsafe;
                fixed lv_a;
                // Variable Initialization
                lv_chieftainPlayer = 15;
                lv_team1Kobolds = UnitGroupEmpty();
                lv_team2Kobolds = UnitGroupEmpty();
                lv_spawnLocation = gf_GetBossSpawnLocation();
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/E3601739&quot;);
                TimerStart(gv_questTimer, 210.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/2772D309&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 1;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                gf_SetScaledStats(&quot;MurlocChieftain&quot;, lv_chieftainPlayer);
                UnitCreate(1, &quot;MurlocChieftain&quot;, 0, lv_chieftainPlayer, lv_spawnLocation, 270.0);
                gv_murlocChief = UnitLastCreated();
                if ((RandomInt(0, 1) == 1)) {
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_TextureSelectByID(&quot;MurlocOrange&quot;));
                }
                else {
                }
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, lv_spawnLocation, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
                gv_chiefPing = PingLastCreated();
                PingSetUnit(gv_chiefPing, gv_murlocChief);
                PingSetScale(gv_chiefPing, 0.5);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_murlocChief, true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicBoss&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BA6F85BB">
        <ScriptCode>
            void gf_ChiefDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                int autoBE8DA324_ae;
                int autoBE8DA324_ai;
                // Variable Declarations
                int lv_i;
                int lv_a;
                int lv_b;
                point lv_p;
                int lv_winningTeam;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_killingUnit);
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Implementation
                gf_SlayerProgress(UnitGetOwner(lp_killingUnit), lp_dyingUnit);
                lv_winningTeam = gv_playerData[lv_i].lv_team;
                lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
                libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                lv_p = UnitGetPosition(lp_dyingUnit);
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[1] = true;
                gv_murlocChief = null;
                TimerPause(gv_questTimer, true);
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_chiefPing);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_killingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_killingUnit), false))) + (StringExternal(&quot;Param/Value/D9E8C204&quot;) + (gf_GetTribeTextOfTeam(gv_playerData[lv_i].lv_team) + StringExternal(&quot;Param/Value/99D259FF&quot;)))));
                gf_CreateLoot(&quot;MurlocDoomhammer&quot;, lv_p, 0.0, false, 100, 0);
                gf_CreateLoot(&quot;MurlocSkull&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;AncientArtifactFragment&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;IronOre&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;RadiantGem&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;Shadowstone&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;Beer&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;LambentSunflower&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;SpicyHerbs&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;RoastedPheasantWithBerrySauce&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;BeerBraisedPheasant&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;ScrollofTransmutation&quot;, lv_p, 2.0, true, 100, 0);
                autoBE8DA324_ae = RandomInt(2, 3);
                autoBE8DA324_ai = 1;
                lv_a = 1;
                for ( ; ( (autoBE8DA324_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoBE8DA324_ae) || (autoBE8DA324_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoBE8DA324_ae) ) ; lv_a += autoBE8DA324_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lv_p, 2.0, true, 100, RandomInt(20, 30));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A5C63F96">
        <ScriptCode>
            void gf_TreasureInit () {
                int auto22E3A2D9_ae;
                int auto22E3A2D9_ai;
                // Variable Declarations
                int lv_a;
                unitgroup lv_kobolds;
                int lv_b;
                region lv_region;
                point lv_temp;
                // Variable Initialization
                lv_kobolds = UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_b = UnitGroupCount(lv_kobolds, c_unitCountAlive);
                lv_region = RegionCircle(gf_WeightedCenterofKobolds(), 40.0);
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/7033EBB2&quot;);
                TimerStart(gv_questTimer, 240.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/D2EA8FD7&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 2;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                auto22E3A2D9_ae = (2 + (lv_b / 3));
                auto22E3A2D9_ai = 1;
                lv_a = 1;
                for ( ; ( (auto22E3A2D9_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto22E3A2D9_ae) || (auto22E3A2D9_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto22E3A2D9_ae) ) ; lv_a += auto22E3A2D9_ai ) {
                    lv_temp = gf_RandomPathablePoint(lv_region);
                    UnitCreate(1, &quot;TreasureChest&quot;, 0, 0, lv_temp, RandomFixed(230.0, 310.0));
                    UnitGroupAdd(gv_treasureChests, UnitLastCreated());
                    UnitBehaviorAdd(UnitLastCreated(), &quot;GoblinLoot&quot;, UnitLastCreated(), 1);
                    UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
                    UnitSetCustomValue(UnitLastCreated(), 1, IntToFixed(lv_a));
                    gv_treasureChest[lv_a] = UnitLastCreated();
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingObjective&quot;, lv_temp, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
                    gv_treasurePing[lv_a] = PingLastCreated();
                    PingSetUnit(gv_treasurePing[lv_a], UnitLastCreated());
                    PlayerGroupLoopBegin(PlayerGroupActive());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
                    }
                    PlayerGroupLoopEnd();
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3D78A68F">
        <ScriptCode>
            void gf_TreasureSpawnLoot (point lp_p) {
                int auto3615413E_val;
                int auto8E4C6E33_val;
                int auto814C0F43_val;
                // Variable Declarations
                int lv_random;
                string lv_type;
                // Variable Initialization
                // Implementation
                if ((UnitGroupCount(gv_treasureChests, c_unitCountAlive) == 0)) {
                    lv_random = 1;
                }
                else {
                    lv_random = RandomInt(2, 7);
                }
                auto3615413E_val = lv_random;
                if (auto3615413E_val == 1) {
                    lv_type = &quot;SpikedShadowstoneScutum&quot;;
                }
                else if (auto3615413E_val == 2) {
                    lv_type = &quot;EnigmaticStaff&quot;;
                }
                else if (auto3615413E_val == 3) {
                    lv_type = &quot;MysticsTribalShield&quot;;
                }
                else if (auto3615413E_val == 4) {
                    lv_type = &quot;GoldenPolearm&quot;;
                }
                else if (auto3615413E_val == 5) {
                    lv_type = &quot;HeavyIronBreastplate&quot;;
                }
                else if (auto3615413E_val == 6) {
                    lv_type = &quot;HeavyTowerShield&quot;;
                }
                else if (auto3615413E_val == 7) {
                    lv_type = &quot;CelestialOrb&quot;;
                }
                else {
                }
                gf_CreateLoot(lv_type, lp_p, 1.0, true, 100, 0);
                lv_random = RandomInt(1, 3);
                auto8E4C6E33_val = lv_random;
                if (auto8E4C6E33_val == 1) {
                    lv_type = &quot;RadiantGem&quot;;
                }
                else if (auto8E4C6E33_val == 2) {
                    lv_type = &quot;Shadowstone&quot;;
                }
                else if (auto8E4C6E33_val == 3) {
                    lv_type = &quot;IronOre&quot;;
                }
                else {
                }
                gf_CreateLoot(lv_type, lp_p, 1.0, true, 100, 0);
                lv_random = RandomInt(1, 5);
                auto814C0F43_val = lv_random;
                if (auto814C0F43_val == 1) {
                    lv_type = &quot;LambentSunflower&quot;;
                }
                else if (auto814C0F43_val == 2) {
                    lv_type = &quot;HandfulofBerries&quot;;
                }
                else if (auto814C0F43_val == 3) {
                    lv_type = &quot;Sageberry&quot;;
                }
                else if (auto814C0F43_val == 4) {
                    lv_type = &quot;SpicyHerbs&quot;;
                }
                else if (auto814C0F43_val == 5) {
                    lv_type = &quot;Beer&quot;;
                }
                else {
                }
                gf_CreateLoot(lv_type, lp_p, 1.0, true, 100, 0);
                gf_CreateLoot(&quot;ScrollofTransmutation&quot;, lp_p, 1.0, true, 50, 0);
                gf_CreateLoot(&quot;GoldPurse&quot;, lp_p, 1.0, true, 100, RandomInt(20, 30));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A6BBEA4F">
        <ScriptCode>
            void gf_TreasureEndPrem () {
                // Implementation
                if ((UnitGroupCount(gv_treasureChests, c_unitCountAlive) == 0)) {
                    gv_questIndexActive = 0;
                    gv_questActive = false;
                    gv_questCompleted[2] = true;
                    TimerPause(gv_questTimer, true);
                    ObjectiveDestroy(gv_questObjective);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/8AB6FBF0&quot;));
                    SoundPlay(SoundLink(&quot;UI_ObjectiveComplete&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C5C6F1F3">
        <ScriptCode>
            void gf_RetrievalInit () {
                // Variable Declarations
                point lv_centerofKobolds;
                point lv_spawnLocation;
                point lv_spawnLocation2;
                int lv_failsafe;
                fixed lv_angle;
                // Variable Initialization
                lv_angle = libNtve_gf_RandomAngle();
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/8DE9FB6E&quot;);
                TimerStart(gv_questTimer, 240.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/9B5F893B&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 3;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                lv_centerofKobolds = gf_WeightedCenterofKobolds();
                while ((lv_spawnLocation == null)) {
                    lv_spawnLocation = PointWithOffsetPolar(lv_centerofKobolds, RandomFixed(0.0, 88.0), (lv_angle + 0.0));
                    lv_failsafe += 1;
                    if (((PointPathingPassable(lv_spawnLocation) == false) || (PointPathingIsConnected(lv_spawnLocation, gv_center) == false))) {
                        if ((lv_failsafe &lt; 200)) {
                            lv_spawnLocation = null;
                        }
                        else {
                            lv_spawnLocation = PointFromId(709);
                        }
                    }
                    else {
                    }
                }
                UnitCreate(1, &quot;CrabShipment&quot;, 0, 0, lv_spawnLocation, libNtve_gf_RandomAngle());
                gv_shipment = UnitLastCreated();
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingObjective&quot;, lv_spawnLocation, ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 0.0, 270.0);
                gv_shipmentPing = PingLastCreated();
                PingSetUnit(gv_shipmentPing, gv_shipment);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_shipment, true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                while ((lv_spawnLocation2 == null)) {
                    lv_spawnLocation2 = PointWithOffsetPolar(lv_centerofKobolds, RandomFixed(0.0, 88.0), (lv_angle + 180.0));
                    lv_failsafe += 1;
                    if (((PointPathingPassable(lv_spawnLocation2) == false) || (PointPathingIsConnected(lv_spawnLocation, lv_spawnLocation2) == false) || (DistanceBetweenPoints(lv_spawnLocation, lv_spawnLocation2) &lt; 56.0))) {
                        if ((lv_failsafe &lt; 200)) {
                            lv_spawnLocation2 = null;
                        }
                        else {
                            lv_spawnLocation2 = PointFromId(613);
                        }
                    }
                    else {
                    }
                }
                UnitCreate(1, &quot;CravenTheFisherman&quot;, 0, 0, lv_spawnLocation2, RandomFixed(240.0, 300.0));
                gv_merchant = UnitLastCreated();
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingObjective&quot;, lv_spawnLocation2, ColorWithAlpha(1.57, 67.84, 100.00, 0.00), 0.0, 270.0);
                gv_merchantPing = PingLastCreated();
                PingSetUnit(gv_merchantPing, gv_merchant);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_merchant, true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="44334928">
        <ScriptCode>
            void gf_RetrieveRewards (point lp_location) {
                int auto859AC0D1_val;
                int auto8A5F0917_val;
                int auto2E6CDBDA_ae;
                int auto2E6CDBDA_ai;
                // Variable Declarations
                int lv_a;
                int lv_random;
                string lv_type;
                // Variable Initialization
                // Implementation
                gf_CreateLoot(&quot;CravensFishSticker&quot;, lp_location, 0.0, false, 100, 0);
                lv_random = RandomInt(1, 3);
                auto859AC0D1_val = lv_random;
                if (auto859AC0D1_val == 1) {
                    lv_type = &quot;RadiantGem&quot;;
                }
                else if (auto859AC0D1_val == 2) {
                    lv_type = &quot;Shadowstone&quot;;
                }
                else if (auto859AC0D1_val == 3) {
                    lv_type = &quot;IronOre&quot;;
                }
                else {
                }
                gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
                lv_random = RandomInt(1, 3);
                auto8A5F0917_val = lv_random;
                if (auto8A5F0917_val == 1) {
                    lv_type = &quot;LambentSunflower&quot;;
                }
                else if (auto8A5F0917_val == 2) {
                    lv_type = &quot;HandfulofBerries&quot;;
                }
                else if (auto8A5F0917_val == 3) {
                    lv_type = &quot;Beer&quot;;
                }
                else {
                }
                gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
                lv_type = &quot;SpicedLambFeast&quot;;
                gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
                auto2E6CDBDA_ae = RandomInt(2, 3);
                auto2E6CDBDA_ai = 1;
                lv_a = 1;
                for ( ; ( (auto2E6CDBDA_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto2E6CDBDA_ae) || (auto2E6CDBDA_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto2E6CDBDA_ae) ) ; lv_a += auto2E6CDBDA_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lp_location, 1.5, true, 100, RandomInt(20, 30));
                }
                gf_CreateLoot(&quot;ScrollofTransmutation&quot;, lp_location, 1.5, true, 100, 0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EB3C4C76">
        <ScriptCode>
            void gf_PlantInit () {
                int autoE06421EB_ae;
                int autoE06421EB_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/F6F0B129&quot;);
                TimerStart(gv_questTimer, 240.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/40A8E481&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 4;
                gv_grownTreesLeadingTeam = 0;
                autoE06421EB_ae = gv_activeTeams;
                autoE06421EB_ai = 1;
                lv_a = 1;
                for ( ; ( (autoE06421EB_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE06421EB_ae) || (autoE06421EB_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE06421EB_ae) ) ; lv_a += autoE06421EB_ai ) {
                    gv_grownTreesTeam[lv_a] = 0;
                }
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F34EFFD5">
        <ScriptCode>
            void gf_FeastInit () {
                int autoD04A797A_ae;
                int autoD04A797A_ai;
                // Variable Declarations
                int lv_b;
                int lv_chieftainPlayer;
                point lv_spawnLocation;
                int lv_failsafe;
                fixed lv_a;
                // Variable Initialization
                lv_chieftainPlayer = 11;
                lv_spawnLocation = gf_GetBossSpawnLocation();
                // Implementation
                autoD04A797A_ae = gv_activeTeams;
                autoD04A797A_ai = 1;
                lv_b = 1;
                for ( ; ( (autoD04A797A_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoD04A797A_ae) || (autoD04A797A_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoD04A797A_ae) ) ; lv_b += autoD04A797A_ai ) {
                    gv_feastCooked[lv_b][1] = false;
                    gv_feastCooked[lv_b][2] = false;
                    gv_feastCooked[lv_b][3] = false;
                }
                gv_questText = StringExternal(&quot;Param/Value/7D36A95A&quot;);
                TimerStart(gv_questTimer, 240.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/838E1F33&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 5;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                UnitCreate(1, &quot;NiziliaTheGastronomist&quot;, 0, 0, lv_spawnLocation, 270.0);
                gv_feastChef = UnitLastCreated();
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingObjective&quot;, lv_spawnLocation, ColorWithAlpha(50.20, 100.00, 50.20, 0.00), 0.0, 270.0);
                gv_feastChefPing = PingLastCreated();
                PingSetUnit(gv_feastChefPing, gv_feastChef);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_feastChef, true, PlayerGroupLoopCurrent());
                    gv_aIData[PlayerGroupLoopCurrent()].lv_weightedPOI = UnitGetPosition(gv_feastChef);
                }
                PlayerGroupLoopEnd();
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C68B21F8">
        <ScriptCode>
            void gf_FeastCriteria (unit lp_cooker, string lp_foodType) {
                string autoF65F148F_val;
                // Variable Declarations
                int lv_i;
                int lv_t;
                point lv_p;
                int lv_winningTeam;
                int lv_losingTeam;
                int lv_a;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_cooker);
                lv_t = gv_playerData[lv_i].lv_team;
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Implementation
                if ((gv_questIndexActive == 5) &amp;&amp; (UnitHasBehavior(lp_cooker, &quot;TheGastronomistsTutelage&quot;) == true)) {
                    lv_p = UnitGetPosition(gv_feastChef);
                    autoF65F148F_val = lp_foodType;
                    if (autoF65F148F_val == &quot;SpicedLambFeast&quot;) {
                        if ((gv_feastCooked[lv_t][1] == false)) {
                            gv_feastCooked[lv_t][1] = true;
                            SoundPlay(SoundLink(&quot;UI_TerranHint&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                        }
                        else {
                        }
                    }
                    else if (autoF65F148F_val == &quot;GrilledWolfEntrecote&quot;) {
                        if ((gv_feastCooked[lv_t][2] == false)) {
                            gv_feastCooked[lv_t][2] = true;
                            SoundPlay(SoundLink(&quot;UI_TerranHint&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                        }
                        else {
                        }
                    }
                    else if (autoF65F148F_val == &quot;BeerBraisedPheasant&quot;) {
                        if ((gv_feastCooked[lv_t][3] == false)) {
                            gv_feastCooked[lv_t][3] = true;
                            SoundPlay(SoundLink(&quot;UI_TerranHint&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                        }
                        else {
                        }
                    }
                    else {
                    }
                    if ((gv_feastCooked[lv_t][1] == true) &amp;&amp; (gv_feastCooked[lv_t][2] == true) &amp;&amp; (gv_feastCooked[lv_t][3] == true)) {
                        lv_questWinners = gv_teamData[lv_t].lv_members;
                        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                        lv_winningTeam = lv_t;
                        gv_lambSirloinEnabled[lv_winningTeam] = true;
                        if ((lv_winningTeam == 1)) {
                            lv_losingTeam = 2;
                        }
                        else {
                            lv_losingTeam = 1;
                        }
                        TextExpressionSetToken(&quot;Param/Expression/E2947E79&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/CA72D19B&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/E2947E79&quot;, &quot;C&quot;, gf_GetTribeTextOfTeam(lv_winningTeam));
                        TextExpressionSetToken(&quot;Param/Expression/E2947E79&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/736AA932&quot;));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/E2947E79&quot;));
                        gv_questIndexActive = 0;
                        gv_questActive = false;
                        gv_questCompleted[5] = true;
                        TimerPause(gv_questTimer, true);
                        ObjectiveDestroy(gv_questObjective);
                        PingDestroy(gv_feastChefPing);
                        UnitRemove(gv_feastChef);
                        gf_CreateLoot(&quot;MagnificentChefsHat&quot;, lv_p, 0.0, false, 100, 0);
                        gf_CreateLoot(&quot;ScrollofTransmutation&quot;, lv_p, 1.5, true, 100, 0);
                        gf_CreateLoot(&quot;GoldPurse&quot;, lv_p, 1.5, true, 100, RandomInt(20, 30));
                        gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                        PlayerGroupLoopBegin(lv_questWinners);
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            gv_skillPointsPlayer[PlayerGroupLoopCurrent()] += 5;
                            gf_IncreaseSkillType(PlayerGroupLoopCurrent(), 3, 5);
                            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E2B40797&quot;));
                            if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                                UnitBehaviorAdd(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;SmokedLambSirloinReq&quot;, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, 1);
                            }
                            else {
                            }
                        }
                        PlayerGroupLoopEnd();
                        TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1C943683">
        <ScriptCode>
            text gf_FeastProgressText () {
                int auto1622C7A5_ae;
                int auto1622C7A5_ai;
                // Variable Declarations
                int lv_a;
                text lv_value;
                // Variable Initialization
                // Implementation
                lv_value = (lv_value + StringExternal(&quot;Param/Value/66808C78&quot;));
                lv_value = (lv_value + StringExternal(&quot;Param/Value/2D180BCC&quot;));
                lv_value = (lv_value + StringExternal(&quot;Param/Value/BF6EDD86&quot;));
                auto1622C7A5_ae = gv_activeTeams;
                auto1622C7A5_ai = 1;
                lv_a = 1;
                for ( ; ( (auto1622C7A5_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto1622C7A5_ae) || (auto1622C7A5_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto1622C7A5_ae) ) ; lv_a += auto1622C7A5_ai ) {
                    if ((gv_teamData[lv_a].lv_allDead == false)) {
                        TextExpressionSetToken(&quot;Param/Expression/EB3A9038&quot;, &quot;A&quot;, lv_value);
                        TextExpressionSetToken(&quot;Param/Expression/EB3A9038&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lv_a));
                        TextExpressionSetToken(&quot;Param/Expression/EB3A9038&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/0CDBA55A&quot;));
                        lv_value = TextExpressionAssemble(&quot;Param/Expression/EB3A9038&quot;);
                        if ((gv_feastCooked[lv_a][1] == true)) {
                            lv_value = (lv_value + StringExternal(&quot;Param/Value/ABCB1A5F&quot;));
                        }
                        else {
                            lv_value = (lv_value + StringExternal(&quot;Param/Value/8AA212CF&quot;));
                        }
                        if ((gv_feastCooked[lv_a][2] == true)) {
                            lv_value = (lv_value + StringExternal(&quot;Param/Value/6B1578E3&quot;));
                        }
                        else {
                            lv_value = (lv_value + StringExternal(&quot;Param/Value/EA324975&quot;));
                        }
                        if ((gv_feastCooked[lv_a][3] == true)) {
                            lv_value = (lv_value + StringExternal(&quot;Param/Value/7A9AE1F1&quot;));
                        }
                        else {
                            lv_value = (lv_value + StringExternal(&quot;Param/Value/09ADC42E&quot;));
                        }
                        lv_value = (lv_value + StringExternal(&quot;Param/Value/147CB172&quot;));
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="47755172">
        <ScriptCode>
            void gf_GladiatorInit () {
                // Variable Declarations
                point lv_centerofKobolds;
                unitgroup lv_tribeGroup;
                int lv_a;
                point lv_challengeZone;
                int lv_failsafe;
                fixed lv_duration;
                point lv_spawnLocation;
                point lv_spawnLocation2;
                fixed lv_angle;
                // Variable Initialization
                lv_tribeGroup = UnitGroupEmpty();
                lv_duration = 150.0;
                lv_angle = libNtve_gf_RandomAngle();
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/5739FEEC&quot;);
                TimerStart(gv_questTimer, lv_duration, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/4FF82D64&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 6;
                gv_gladiatorPhase = 1;
                gv_challenger[1] = null;
                gv_challenger[2] = null;
                gv_gladiatorStart[1] = PointFromId(1794);
                gv_gladiatorStart[2] = PointFromId(2434);
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                lv_centerofKobolds = gf_WeightedCenterofKobolds();
                while ((lv_spawnLocation == null)) {
                    lv_spawnLocation = PointWithOffsetPolar(lv_centerofKobolds, RandomFixed(0.0, 88.0), (lv_angle + 0.0));
                    lv_failsafe += 1;
                    if (((PointPathingPassable(lv_spawnLocation) == false) || (PointPathingIsConnected(lv_spawnLocation, gv_center) == false) || (UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionCircle(lv_spawnLocation, 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0))) {
                        if ((lv_failsafe &lt; 200)) {
                            lv_spawnLocation = null;
                        }
                        else {
                            lv_spawnLocation = PointFromId(709);
                        }
                    }
                    else {
                    }
                }
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingSimple&quot;, lv_spawnLocation, ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
                gv_zonePing[1] = PingLastCreated();
                UnitCreate(1, &quot;ChallengeBanner&quot;, 0, 0, lv_spawnLocation, 270.0);
                UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
                gv_zoneChecker[1] = UnitLastCreated();
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_zoneChecker[1], true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                while ((lv_spawnLocation2 == null)) {
                    lv_spawnLocation2 = PointWithOffsetPolar(lv_centerofKobolds, RandomFixed(0.0, 88.0), (lv_angle + 180.0));
                    lv_failsafe += 1;
                    if (((PointPathingPassable(lv_spawnLocation2) == false) || (PointPathingIsConnected(lv_spawnLocation2, gv_center) == false) || (UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionCircle(lv_spawnLocation2, 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0) || (DistanceBetweenPoints(lv_spawnLocation, lv_spawnLocation2) &lt; 32.0))) {
                        if ((lv_failsafe &lt; 200)) {
                            lv_spawnLocation2 = null;
                        }
                        else {
                            lv_spawnLocation2 = PointFromId(709);
                        }
                    }
                    else {
                    }
                }
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingSimple&quot;, lv_spawnLocation2, ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
                gv_zonePing[2] = PingLastCreated();
                UnitCreate(1, &quot;ChallengeBanner&quot;, 0, 0, lv_spawnLocation2, 270.0);
                UnitSetCustomValue(UnitLastCreated(), 0, 2.0);
                gv_zoneChecker[2] = UnitLastCreated();
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_zoneChecker[2], true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F1275F95">
        <ScriptCode>
            trigger auto_gf_GladiatorEndPhase2_Trigger = null;
            unit auto_gf_GladiatorEndPhase2_lp_dyingUnit;
            unit auto_gf_GladiatorEndPhase2_lp_killingUnit;
            void gf_GladiatorEndPhase2 (unit lp_dyingUnit, unit lp_killingUnit) {
                auto_gf_GladiatorEndPhase2_lp_dyingUnit = lp_dyingUnit;
                auto_gf_GladiatorEndPhase2_lp_killingUnit = lp_killingUnit;
                if (auto_gf_GladiatorEndPhase2_Trigger == null) {
                    auto_gf_GladiatorEndPhase2_Trigger = TriggerCreate(&quot;auto_gf_GladiatorEndPhase2_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_GladiatorEndPhase2_Trigger, false, false);
            }
            bool auto_gf_GladiatorEndPhase2_TriggerFunc (bool testConds, bool runActions) {
                unit lp_dyingUnit = auto_gf_GladiatorEndPhase2_lp_dyingUnit;
                unit lp_killingUnit = auto_gf_GladiatorEndPhase2_lp_killingUnit;
                int auto8846F2A9_ae;
                int auto8846F2A9_ai;
                int auto91EA56C2_ae;
                int auto91EA56C2_ai;
                // Variable Declarations
                int lv_a;
                int lv_winner;
                int lv_loser;
                text lv_defeatVariation;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                int lv_survivingChallenger;
                int lv_r;
                // Variable Initialization
                lv_winner = gf_GetTeamOfPlayer(UnitGetOwner(lp_killingUnit));
                lv_loser = gf_GetTeamOfPlayer(UnitGetOwner(lp_dyingUnit));
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                lv_r = RandomInt(1, gv_arenaSpectators);
                // Implementation
                lv_questWinners = gv_teamData[lv_winner].lv_members;
                libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                if ((gv_acclvl[UnitGetOwner(lp_killingUnit)] &gt;= gv_rewardLevelRequirement)) {
                    gv_gladSpree[UnitGetOwner(lp_killingUnit)] += 1;
                    if ((gv_gladSpree[UnitGetOwner(lp_killingUnit)] &gt;= 5)) {
                        gf_UnlockRequirement(UnitGetOwner(lp_killingUnit), 1, 17);
                    }
                    else {
                    }
                }
                else {
                }
                gv_gladSpree[UnitGetOwner(lp_dyingUnit)] = 0;
                UnitCreate(1, &quot;GarishGladiatorsGarb&quot;, c_unitCreateIgnorePlacement, 0, gv_arenaSpectator[lv_r], libNtve_gf_RandomAngle());
                UnitSetHeight(UnitLastCreated(), PointGetHeight(gv_arenaSpectator[lv_r]), 0.0);
                UnitCreateEffectPoint(UnitLastCreated(), &quot;LootFountainEffect&quot;, UnitGetPosition(lp_killingUnit));
                TriggerEnable(gt_GladiatorCrowd, false);
                if ((UnitGetPropertyFixed(lp_killingUnit, c_unitPropLifePercent, c_unitPropCurrent) &gt;= 50.0)) {
                    lv_defeatVariation = StringExternal(&quot;Param/Value/61BD18C8&quot;);
                    gf_UnlockRequirement(UnitGetOwner(lp_killingUnit), 3, 3);
                }
                else {
                    lv_defeatVariation = StringExternal(&quot;Param/Value/8F3CA49C&quot;);
                }
                TextExpressionSetToken(&quot;Param/Expression/0192E7C1&quot;, &quot;F&quot;, gf_GetTribeTextOfTeam(gf_GetTeamOfPlayer(UnitGetOwner(lp_killingUnit))));
                TextExpressionSetToken(&quot;Param/Expression/0192E7C1&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/AF4EB378&quot;));
                TextExpressionSetToken(&quot;Param/Expression/0192E7C1&quot;, &quot;A&quot;, TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_killingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_killingUnit), false))));
                TextExpressionSetToken(&quot;Param/Expression/0192E7C1&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/07BF6002&quot;));
                TextExpressionSetToken(&quot;Param/Expression/0192E7C1&quot;, &quot;B&quot;, lv_defeatVariation);
                TextExpressionSetToken(&quot;Param/Expression/0192E7C1&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/ECE880E8&quot;));
                TextExpressionSetToken(&quot;Param/Expression/0192E7C1&quot;, &quot;E&quot;, TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_dyingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_dyingUnit), false))));
                TextExpressionSetToken(&quot;Param/Expression/0192E7C1&quot;, &quot;H&quot;, StringExternal(&quot;Param/Value/A8E0A9E4&quot;));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/0192E7C1&quot;));
                gv_questIndexActive = 0;
                gv_gladiatorPhase = 0;
                gv_questActive = false;
                gv_questCompleted[6] = true;
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                Wait(1.0, c_timeGame);
                if ((gv_gameOver == false)) {
                    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                    Wait(3.0, c_timeGame);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/29C3B119&quot;));
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
                    Wait(5.0, c_timeGame);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/8C859E71&quot;));
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
                    Wait(2.0, c_timeGame);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/09DBDF1E&quot;));
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
                    Wait(1.0, c_timeGame);
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
                    Wait(1.0, c_timeGame);
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(lp_killingUnit)), 100.0, 0.0);
                    Wait(1.0, c_timeGame);
                    auto8846F2A9_ae = gv_challengers;
                    auto8846F2A9_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto8846F2A9_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto8846F2A9_ae) || (auto8846F2A9_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto8846F2A9_ae) ) ; lv_a += auto8846F2A9_ai ) {
                        if ((lp_killingUnit == gv_challenger[lv_a])) {
                            lv_survivingChallenger = lv_a;
                        }
                        else {
                        }
                    }
                    if ((UnitIsAlive(gv_challenger[lv_survivingChallenger]) == true)) {
                        UnitSetPosition(gv_challenger[lv_survivingChallenger], gv_returnPoint[lv_survivingChallenger], false);
                        UnitIssueOrder(gv_challenger[lv_survivingChallenger], Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                        UnitGroupLoopBegin(gv_pets[UnitGetOwner(gv_challenger[lv_survivingChallenger])]);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitSetPosition(UnitGroupLoopCurrent(), gv_returnPoint[lv_survivingChallenger], false);
                        }
                        UnitGroupLoopEnd();
                        CameraPan(UnitGetOwner(gv_challenger[lv_survivingChallenger]), gv_returnPoint[lv_survivingChallenger], 0.0, -1, 10.0, false);
                    }
                    else {
                    }
                    UnitGroupLoopBegin(UnitGroup(&quot;DemonLordJaryx&quot;, c_playerAny, gv_regionArena, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPosition(UnitGroupLoopCurrent(), gf_RandomPathablePoint(RegionPlayableMap()), false);
                        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F9A3DC7A&quot;));
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(UnitGroup(&quot;RagingArcaneBeast&quot;, c_playerAny, gv_regionArena, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPosition(UnitGroupLoopCurrent(), gf_RandomPathablePoint(RegionPlayableMap()), false);
                        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_regionArena, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    PlayerGroupLoopBegin(PlayerGroupAll());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        VisRevealerDestroy(gv_arenaRevealer[PlayerGroupLoopCurrent()]);
                    }
                    PlayerGroupLoopEnd();
                    auto91EA56C2_ae = gv_challengers;
                    auto91EA56C2_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto91EA56C2_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto91EA56C2_ae) || (auto91EA56C2_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto91EA56C2_ae) ) ; lv_a += auto91EA56C2_ai ) {
                        gv_challenger[lv_a] = null;
                    }
                }
                else {
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F36FE85C">
        <ScriptCode>
            text gf_GetTeamChallengerName (int lp_teamIndex) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_challenger[lp_teamIndex] == null)) {
                    lv_value = StringExternal(&quot;Param/Value/D68549DD&quot;);
                }
                else {
                    lv_value = TextWithColor(gf_GetPlayerName(UnitGetOwner(gv_challenger[lp_teamIndex]), 1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_challenger[lp_teamIndex]), false)));
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B95A1DE5">
        <ScriptCode>
            unit gf_RemainingDuelist () {
                // Variable Declarations
                unit lv_value;
                // Variable Initialization
                // Implementation
                if ((UnitIsAlive(gv_challenger[1]) == true) &amp;&amp; ((UnitIsAlive(gv_challenger[2]) == false) || (gv_challenger[2] == null))) {
                    lv_value = gv_challenger[1];
                }
                else if ((UnitIsAlive(gv_challenger[2]) == true) &amp;&amp; ((UnitIsAlive(gv_challenger[1]) == false) || (gv_challenger[1] == null))) {
                    lv_value = gv_challenger[2];
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B55944F5">
        <ScriptCode>
            bool gf_IsGladiator (unit lp_unit) {
                int auto76D75FD5_ae;
                int auto76D75FD5_ai;
                // Variable Declarations
                int lv_a;
                bool lv_value;
                // Variable Initialization
                // Implementation
                auto76D75FD5_ae = gv_challengers;
                auto76D75FD5_ai = 1;
                lv_a = 1;
                for ( ; ( (auto76D75FD5_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto76D75FD5_ae) || (auto76D75FD5_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto76D75FD5_ae) ) ; lv_a += auto76D75FD5_ai ) {
                    if ((lp_unit == gv_challenger[lv_a])) {
                        lv_value = true;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1354D9D6">
        <ScriptCode>
            text gf_ArenaCheer () {
                int autoE8794ADC_ae;
                int autoE8794ADC_ai;
                int auto549B2B8F_val;
                // Variable Declarations
                int lv_a;
                int lv_r;
                text lv_value;
                unitgroup lv_crowdFavourites;
                text lv_name;
                // Variable Initialization
                lv_r = RandomInt(1, 30);
                lv_crowdFavourites = UnitGroupEmpty();
                // Implementation
                autoE8794ADC_ae = gv_challengers;
                autoE8794ADC_ai = 1;
                lv_a = 1;
                for ( ; ( (autoE8794ADC_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE8794ADC_ae) || (autoE8794ADC_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE8794ADC_ae) ) ; lv_a += autoE8794ADC_ai ) {
                    if ((gv_challenger[lv_a] != null) &amp;&amp; gf_RewardCatIndexActive(UnitGetOwner(gv_challenger[lv_a]), 3, 3)) {
                        UnitGroupAdd(lv_crowdFavourites, gv_challenger[lv_a]);
                    }
                    else {
                    }
                }
                if ((UnitGroupCount(lv_crowdFavourites, c_unitCountAlive) &gt; 0)) {
                    lv_name = gf_GetPlayerName(UnitGetOwner(UnitGroupRandomUnit(lv_crowdFavourites, c_unitCountAlive)), 0);
                    lv_r = RandomInt(1, 40);
                }
                else {
                }
                auto549B2B8F_val = lv_r;
                if (auto549B2B8F_val == 1) {
                    lv_value = StringExternal(&quot;Param/Value/893D4D45&quot;);
                }
                else if (auto549B2B8F_val == 2) {
                    lv_value = StringExternal(&quot;Param/Value/98D1AAFD&quot;);
                }
                else if (auto549B2B8F_val == 3) {
                    lv_value = StringExternal(&quot;Param/Value/F0EFFA0F&quot;);
                }
                else if (auto549B2B8F_val == 4) {
                    lv_value = StringExternal(&quot;Param/Value/E63F7544&quot;);
                }
                else if (auto549B2B8F_val == 5) {
                    lv_value = StringExternal(&quot;Param/Value/F65F77DD&quot;);
                }
                else if (auto549B2B8F_val == 6) {
                    lv_value = StringExternal(&quot;Param/Value/C273F465&quot;);
                }
                else if (auto549B2B8F_val == 7) {
                    lv_value = StringExternal(&quot;Param/Value/2AE36FED&quot;);
                }
                else if (auto549B2B8F_val == 8) {
                    lv_value = StringExternal(&quot;Param/Value/EE415597&quot;);
                }
                else if (auto549B2B8F_val == 9) {
                    lv_value = StringExternal(&quot;Param/Value/1DC5490D&quot;);
                }
                else if (auto549B2B8F_val == 10) {
                    lv_value = StringExternal(&quot;Param/Value/D1F0420F&quot;);
                }
                else if (auto549B2B8F_val == 11) {
                    lv_value = StringExternal(&quot;Param/Value/394E9F38&quot;);
                }
                else if (auto549B2B8F_val == 12) {
                    lv_value = StringExternal(&quot;Param/Value/E0E11CB3&quot;);
                }
                else if (auto549B2B8F_val == 13) {
                    lv_value = StringExternal(&quot;Param/Value/A9EB77D6&quot;);
                }
                else if (auto549B2B8F_val == 14) {
                    lv_value = StringExternal(&quot;Param/Value/544B78C2&quot;);
                }
                else if (auto549B2B8F_val == 15) {
                    lv_value = StringExternal(&quot;Param/Value/87C92897&quot;);
                }
                else if (auto549B2B8F_val == 16) {
                    lv_value = StringExternal(&quot;Param/Value/BB80FF6F&quot;);
                }
                else if (auto549B2B8F_val == 17) {
                    lv_value = StringExternal(&quot;Param/Value/64B25FB6&quot;);
                }
                else if (auto549B2B8F_val == 18) {
                    lv_value = StringExternal(&quot;Param/Value/D4F564C6&quot;);
                }
                else if (auto549B2B8F_val == 19) {
                    lv_value = StringExternal(&quot;Param/Value/A80A76A9&quot;);
                }
                else if (auto549B2B8F_val == 20) {
                    lv_value = StringExternal(&quot;Param/Value/48A3B983&quot;);
                }
                else if (auto549B2B8F_val == 21) {
                    lv_value = StringExternal(&quot;Param/Value/5DF6B1B5&quot;);
                }
                else if (auto549B2B8F_val == 22) {
                    lv_value = StringExternal(&quot;Param/Value/CF18363A&quot;);
                }
                else if (auto549B2B8F_val == 23) {
                    lv_value = StringExternal(&quot;Param/Value/B6B9ED9D&quot;);
                }
                else if (auto549B2B8F_val == 24) {
                    lv_value = StringExternal(&quot;Param/Value/8936A259&quot;);
                }
                else if (auto549B2B8F_val == 25) {
                    lv_value = StringExternal(&quot;Param/Value/F418FDB3&quot;);
                }
                else if (auto549B2B8F_val == 26) {
                    lv_value = StringExternal(&quot;Param/Value/D1D498B7&quot;);
                }
                else if (auto549B2B8F_val == 27) {
                    lv_value = StringExternal(&quot;Param/Value/EF848B37&quot;);
                }
                else if (auto549B2B8F_val == 28) {
                    lv_value = StringExternal(&quot;Param/Value/7C58133D&quot;);
                }
                else if (auto549B2B8F_val == 29) {
                    lv_value = StringExternal(&quot;Param/Value/088B58BC&quot;);
                }
                else if (auto549B2B8F_val == 30) {
                    lv_value = StringExternal(&quot;Param/Value/A8B98DFC&quot;);
                }
                else if (auto549B2B8F_val == 31) {
                    TextExpressionSetToken(&quot;Param/Expression/8443DF94&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/4F8ED6AB&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/8443DF94&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/8443DF94&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/E9B0CF4D&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/8443DF94&quot;);
                }
                else if (auto549B2B8F_val == 32) {
                    TextExpressionSetToken(&quot;Param/Expression/5B81F425&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/5C10F3AD&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/5B81F425&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/5B81F425&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/73AE6027&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/5B81F425&quot;);
                }
                else if (auto549B2B8F_val == 33) {
                    TextExpressionSetToken(&quot;Param/Expression/24DD1CC8&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/FA0052A9&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/24DD1CC8&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/24DD1CC8&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/4C6CF17D&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/24DD1CC8&quot;);
                }
                else if (auto549B2B8F_val == 34) {
                    TextExpressionSetToken(&quot;Param/Expression/16B91108&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/48311216&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/16B91108&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/16B91108&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/13B810E8&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/16B91108&quot;);
                }
                else if (auto549B2B8F_val == 35) {
                    TextExpressionSetToken(&quot;Param/Expression/5BE3D340&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/56B56A46&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/5BE3D340&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/5BE3D340&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/BCBF4338&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/5BE3D340&quot;);
                }
                else if (auto549B2B8F_val == 36) {
                    TextExpressionSetToken(&quot;Param/Expression/326AF8F3&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/B4AAED71&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/326AF8F3&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/326AF8F3&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/E31F45B2&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/326AF8F3&quot;);
                }
                else if (auto549B2B8F_val == 37) {
                    TextExpressionSetToken(&quot;Param/Expression/43C2AC85&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/41042741&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/43C2AC85&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/43C2AC85&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/4AECE189&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/43C2AC85&quot;);
                }
                else if (auto549B2B8F_val == 38) {
                    TextExpressionSetToken(&quot;Param/Expression/465A1673&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3626A353&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/465A1673&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/465A1673&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/909E5B4E&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/465A1673&quot;);
                }
                else if (auto549B2B8F_val == 39) {
                    TextExpressionSetToken(&quot;Param/Expression/3A86D0A6&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/C009A75B&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/3A86D0A6&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/3A86D0A6&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/B64D6E5C&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/3A86D0A6&quot;);
                }
                else if (auto549B2B8F_val == 40) {
                    TextExpressionSetToken(&quot;Param/Expression/B5D919C6&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/44084FF6&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/B5D919C6&quot;, &quot;B&quot;, lv_name);
                    TextExpressionSetToken(&quot;Param/Expression/B5D919C6&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/110BAF48&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/B5D919C6&quot;);
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6F6945B7">
        <ScriptCode>
            void gf_DeadnightinitPhase1 () {
                // Implementation
                gv_questActive = true;
                gv_questIndexActive = 7;
                gv_deadnightPhase = 1;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A76B414C">
        <ScriptCode>
            trigger auto_gf_DeadnightinitPhase2_Trigger = null;
            fixed auto_gf_DeadnightinitPhase2_lp_transitionTime;
            void gf_DeadnightinitPhase2 (fixed lp_transitionTime) {
                auto_gf_DeadnightinitPhase2_lp_transitionTime = lp_transitionTime;
                if (auto_gf_DeadnightinitPhase2_Trigger == null) {
                    auto_gf_DeadnightinitPhase2_Trigger = TriggerCreate(&quot;auto_gf_DeadnightinitPhase2_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_DeadnightinitPhase2_Trigger, false, false);
            }
            bool auto_gf_DeadnightinitPhase2_TriggerFunc (bool testConds, bool runActions) {
                fixed lp_transitionTime = auto_gf_DeadnightinitPhase2_lp_transitionTime;
                // Variable Declarations
                int lv_undeadPlayer;
                // Variable Initialization
                lv_undeadPlayer = 15;
                // Implementation
                gf_NewLightset(&quot;MarSaraNightTest&quot;, lp_transitionTime, true, -1);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, (gv_transitionTime * 0.5));
                gv_deadnightPhase = 2;
                gf_AIDeadnightChat(UnitGroupRandomUnit(gf_UnitsInUnitGroupWithBuff(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), &quot;KoboldBotNormal&quot;), c_unitCountAlive));
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B7915E5F">
        <ScriptCode>
            void gf_DeadnightinitPhase3 () {
                // Variable Declarations
                int lv_undeadPlayer;
                // Variable Initialization
                lv_undeadPlayer = 15;
                // Implementation
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicGloom&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, gv_musicVolume, 2.0);
                gv_questText = StringExternal(&quot;Param/Value/9D5B98A5&quot;);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/7EB6CBFD&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_nightDuration = 240.0;
                gv_deadnightPhase = 3;
                gv_ghoulExtra = 0;
                gf_SetScaledStats(&quot;Ghoul&quot;, lv_undeadPlayer);
                gf_SetScaledStats(&quot;UndeadSavage&quot;, lv_undeadPlayer);
                gf_SetScaledStats(&quot;Monstrosity&quot;, lv_undeadPlayer);
                gf_SetScaledStats(&quot;TombGuardian&quot;, lv_undeadPlayer);
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;DeadnightActive&quot;, UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9BD8BCD9">
        <ScriptCode>
            void gf_SpawnMonstrosity () {
                // Variable Declarations
                point lv_p;
                // Variable Initialization
                // Implementation
                lv_p = gf_BlinkLocation(null);
                if ((lv_p == null)) {
                    lv_p = gf_RandomPathablePoint(RegionPlayableMap());
                }
                else {
                }
                UnitCreate(1, &quot;Monstrosity&quot;, 0, 15, lv_p, libNtve_gf_RandomAngle());
                UnitBehaviorAdd(UnitLastCreated(), &quot;BlinkStalker&quot;, UnitLastCreated(), 1);
                gf_MonstrosityAcquireTarget(UnitLastCreated());
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="15360DEC">
        <ScriptCode>
            point gf_BlinkLocation (unit lp_unit) {
                // Variable Declarations
                region lv_region;
                point lv_p;
                // Variable Initialization
                // Implementation
                if (gf_UnitExists(lp_unit)) {
                    lv_region = RegionCircle(UnitGetPosition(lp_unit), 24.0);
                    lv_p = gf_StealthPointInRegion(lv_region, UnitGetOwner(lp_unit));
                }
                else {
                    lv_region = RegionPlayableMap();
                    lv_p = gf_StealthPointInRegion(lv_region, 0);
                }
                return lv_p;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C04A10B9">
        <ScriptCode>
            point gf_StealthPointInRegion (region lp_region, int lp_player) {
                // Variable Declarations
                point lv_p;
                int lv_failsafe;
                // Variable Initialization
                // Implementation
                while ((lv_p == null)) {
                    lv_p = RegionRandomPoint(lp_region);
                    lv_failsafe += 1;
                    if ((PathingType(lv_p) == c_pathingGround) &amp;&amp; (RegionContainsPoint(gv_regionArena, lv_p) == false) &amp;&amp; (VisIsVisibleForPlayer(lp_player, lv_p) == false)) {
                    }
                    else {
                        if ((lv_failsafe &lt; 30)) {
                            lv_p = null;
                        }
                        else {
                            return null;
                        }
                    }
                }
                return lv_p;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6096B21B">
        <ScriptCode>
            void gf_MonstrosityAcquireTarget (unit lp_unit) {
                // Implementation
                UnitSetCustomValue(lp_unit, 0, 0.0);
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (gf_UnitExists(gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_monsterStalker)) {
                    }
                    else {
                        gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_monsterStalker = lp_unit;
                        UnitSetCustomValue(lp_unit, 0, UnitGetOwner(UnitGroupLoopCurrent()));
                    }
                }
                UnitGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="467C4858">
        <ScriptCode>
            void gf_WarlordInit () {
                // Variable Declarations
                int lv_warlordPlayer;
                unitgroup lv_team1Kobolds;
                unitgroup lv_team2Kobolds;
                point lv_team1Point;
                point lv_team2Point;
                point lv_spawnLocation;
                int lv_failsafe;
                fixed lv_a;
                // Variable Initialization
                lv_warlordPlayer = 15;
                lv_team1Kobolds = UnitGroupEmpty();
                lv_team2Kobolds = UnitGroupEmpty();
                lv_spawnLocation = gf_GetBossSpawnLocation();
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/85CCF727&quot;);
                TimerStart(gv_questTimer, 210.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/FD4D25BB&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 8;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                gf_SetScaledStats(&quot;Zulrogg&quot;, lv_warlordPlayer);
                UnitCreate(1, &quot;Zulrogg&quot;, 0, lv_warlordPlayer, lv_spawnLocation, 270.0);
                gv_warlord = UnitLastCreated();
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, lv_spawnLocation, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
                gv_warlordPing = PingLastCreated();
                PingSetUnit(gv_warlordPing, gv_warlord);
                PingSetScale(gv_warlordPing, 0.5);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_warlord, true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicBoss&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="54DF62BF">
        <ScriptCode>
            void gf_WarlordDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                int auto9E0672F1_ae;
                int auto9E0672F1_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                int lv_winningTeam;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Implementation
                gf_SlayerProgress(UnitGetOwner(lp_killingUnit), lp_dyingUnit);
                lv_winningTeam = gf_GetTeamOfPlayer(UnitGetOwner(lp_killingUnit));
                lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
                libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                lv_p = UnitGetPosition(lp_dyingUnit);
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[8] = true;
                gv_warlord = null;
                TimerPause(gv_questTimer, true);
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_warlordPing);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_killingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_killingUnit), false))) + (StringExternal(&quot;Param/Value/4A3E424E&quot;) + (gf_GetTribeTextOfPlayer(UnitGetOwner(lp_killingUnit)) + StringExternal(&quot;Param/Value/753D6093&quot;)))));
                gf_CreateLoot(&quot;ViciouslySharpArmblade&quot;, lv_p, 0.0, false, 100, 0);
                gf_CreateLoot(&quot;TrollNoseBone&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;AncientArtifactFragment&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;IronOre&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;RadiantGem&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;Shadowstone&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;Beer&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;LambentSunflower&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;SpicyHerbs&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;RoastedPheasantWithBerrySauce&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;GrilledWolfEntrecote&quot;, lv_p, 2.0, true, 100, 0);
                auto9E0672F1_ae = RandomInt(2, 3);
                auto9E0672F1_ai = 1;
                lv_a = 1;
                for ( ; ( (auto9E0672F1_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto9E0672F1_ae) || (auto9E0672F1_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto9E0672F1_ae) ) ; lv_a += auto9E0672F1_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lv_p, 2.0, true, 100, RandomInt(20, 30));
                }
                gf_CreateLoot(&quot;ScrollofTransmutation&quot;, lv_p, 2.0, true, 100, 0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2DCD5113">
        <ScriptCode>
            void gf_TruffleInit () {
                int autoBF988E26_ae;
                int autoBF988E26_ai;
                int autoB2F72328_ae;
                int autoB2F72328_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/93B8986F&quot;);
                TimerStart(gv_questTimer, 270.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/73B56AE3&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 9;
                gv_truffleLeadingTeam = 0;
                autoBF988E26_ae = gv_activeTeams;
                autoBF988E26_ai = 1;
                lv_a = 1;
                for ( ; ( (autoBF988E26_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoBF988E26_ae) || (autoBF988E26_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoBF988E26_ae) ) ; lv_a += autoBF988E26_ai ) {
                    gv_trufflesFound[lv_a] = 0;
                }
                autoB2F72328_ae = gv_players;
                autoB2F72328_ai = 1;
                lv_a = 1;
                for ( ; ( (autoB2F72328_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoB2F72328_ae) || (autoB2F72328_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoB2F72328_ae) ) ; lv_a += autoB2F72328_ai ) {
                    gv_truffleSkillBonus[lv_a] = 0;
                }
                gv_noTrufflesEre = gv_region002;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4F3DA59A">
        <ScriptCode>
            void gf_WinterInitialize () {
                // Implementation
                gv_witchSummoned = false;
                gv_bearsKilled = 0;
                gv_winterProlongable = false;
                gv_questActive = true;
                if ((gv_rainDelayCounter &gt; 0.0)) {
                    gv_rainingSoon = false;
                    gv_rainDelayCounter = 0.0;
                    gv_rainCounter = 0.0;
                }
                else {
                }
                gv_winterSoon = true;
                gv_winterDelayCounter = (gv_rainCounter + 1.0);
                gv_winterCounter = 270.0;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="460E4DEF">
        <ScriptCode>
            void gf_WinterLoop () {
                int autoFBE87850_ae;
                int autoFBE87850_ai;
                int autoB84B7DA1_ae;
                int autoB84B7DA1_ai;
                int autoA4548DAC_ae;
                int autoA4548DAC_ai;
                int auto3D30DAA8_ae;
                int auto3D30DAA8_ai;
                int auto9917C446_ae;
                int auto9917C446_ai;
                int autoF4ACA878_n;
                int autoF4ACA878_i;
                int auto01A87A25_ae;
                int auto01A87A25_ai;
                int auto35DCCF91_ae;
                int auto35DCCF91_ai;
                int auto10A959E7_ae;
                int auto10A959E7_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                fixed lv_f;
                unitgroup g;
                unit lu;
                fixed luFac;
                point luPoint;
                fixed luLife;
                fixed luEnergy;
                // Variable Initialization
                lv_f = libNtve_gf_RandomAngle();
                // Implementation
                if ((gv_winterDriftCleanup == 0)) {
                    if ((gv_winter == false)) {
                        if ((gv_winterSoon == true)) {
                            if ((gv_winterDelayCounter &lt;= 0.0)) {
                                gv_winterSoon = false;
                                gv_winter = true;
                                gv_winterJustStarted = true;
                                g = UnitGroup(&quot;Bear&quot;, 15, RegionEntireMap(), null, c_noMaxCount); 
                                for(UnitGroupLoopBegin(g);!UnitGroupLoopDone(); UnitGroupLoopStep()){
                                    lu = UnitGroupLoopCurrent();
                                    luPoint = UnitGetPosition(lu);
                                    luFac = UnitGetFacing(lu);
                                    luLife = UnitGetPropertyFixed(lu, c_unitPropLifePercent, true);
                                    luEnergy = UnitGetPropertyFixed(lu, c_unitPropEnergyPercent, true);
                                    UnitRemove(lu);
                                    UnitCreate(1, &quot;FrostBear&quot;, c_unitCreateIgnorePlacement, 15, luPoint, luFac);
                                    lu = UnitLastCreated();
                                    UnitSetPropertyFixed(lu, c_unitPropLifePercent, luLife);
                                    UnitSetPropertyFixed(lu, c_unitPropEnergyPercent, luEnergy);
                                }
                            }
                            else {
                                gv_winterDelayCounter -= gv_periodInterval;
                            }
                        }
                        else {
                        }
                    }
                    else {
                        if ((gv_winterJustStarted == true)) {
                            gv_winterJustStarted = false;
                            gv_questIndexActive = 10;
                            gv_witchSpawnReq = FixedToInt(Round(libNtve_gf_ArithmeticRealClamp(((IntToFixed(UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) * 1.5) + RandomInt(-1, 1)), 4.0, 20.0)));
                            gf_NewLightset(&quot;Snow&quot;, 10.0, true, 1);
                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicWinter&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                            gv_questText = StringExternal(&quot;Param/Value/672313B4&quot;);
                            TimerStart(gv_questTimer, gv_winterCounter, false, c_timeGame);
                            ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/1EE26BC6&quot;), c_objectiveStateActive, true);
                            gv_questObjective = ObjectiveLastCreated();
                            TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                            gf_SetScaledStats(&quot;FrostBear&quot;, 15);
                            auto01A87A25_ae = gv_players;
                            auto01A87A25_ai = 1;
                            lv_a = 1;
                            for ( ; ( (auto01A87A25_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto01A87A25_ae) || (auto01A87A25_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto01A87A25_ae) ) ; lv_a += auto01A87A25_ai ) {
                                gv_winterFrozen[lv_a] = false;
                            }
                            UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;Snowing&quot;, UnitGroupLoopCurrent(), 1);
                            }
                            UnitGroupLoopEnd();
                            auto35DCCF91_ae = gv_weatherSize;
                            auto35DCCF91_ai = 1;
                            lv_a = 0;
                            for ( ; ( (auto35DCCF91_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto35DCCF91_ae) || (auto35DCCF91_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto35DCCF91_ae) ) ; lv_a += auto35DCCF91_ai ) {
                                auto10A959E7_ae = gv_weatherSize;
                                auto10A959E7_ai = 1;
                                lv_b = 0;
                                for ( ; ( (auto10A959E7_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto10A959E7_ae) || (auto10A959E7_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto10A959E7_ae) ) ; lv_b += auto10A959E7_ai ) {
                                    lv_p = Point((10 + (19 * lv_a)), (10 + (19 * lv_b)));
                                    libNtve_gf_CreateActorAtPoint(&quot;Snow&quot;, lv_p);
                                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((lv_f + RandomFixed(-30.0, 30.0))));
                                    gv_winterEmitter[lv_a][lv_b] = libNtve_gf_ActorLastCreated();
                                }
                            }
                        }
                        else {
                            if ((gv_winterCounter &gt; 1.0)) {
                                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    if ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Sheltered&quot;) == false)) {
                                        UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;SnowApply&quot;, UnitGroupLoopCurrent());
                                    }
                                    else {
                                    }
                                }
                                UnitGroupLoopEnd();
                                autoF4ACA878_n = 2;
                                for (autoF4ACA878_i = 1; autoF4ACA878_i &lt;= autoF4ACA878_n; autoF4ACA878_i += 1) {
                                    if ((gv_winterDriftCounter &lt; gv_winterDriftCap)) {
                                        gv_winterDriftCounter += 1;
                                        libNtve_gf_CreateActorAtPoint(&quot;SnowDrift&quot;, RegionRandomPoint(RegionPlayableMap()));
                                        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
                                        gv_winterDrift[gv_winterDriftCounter] = libNtve_gf_ActorLastCreated();
                                    }
                                    else {
                                    }
                                }
                                gv_winterCounter -= gv_periodInterval;
                            }
                            else {
                                if ((gv_winterProlongable == true)) {
                                    gv_winterCounter = 60.0;
                                    TimerStart(gv_questTimer, gv_winterCounter, false, c_timeGame);
                                    gv_winterProlongable = false;
                                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/949AF922&quot;));
                                    SoundPlay(SoundLink(&quot;Music_Stinger_Complete07&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                                }
                                else {
                                    autoB84B7DA1_ae = gv_weatherSize;
                                    autoB84B7DA1_ai = 1;
                                    lv_a = 0;
                                    for ( ; ( (autoB84B7DA1_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoB84B7DA1_ae) || (autoB84B7DA1_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoB84B7DA1_ae) ) ; lv_a += autoB84B7DA1_ai ) {
                                        autoA4548DAC_ae = gv_weatherSize;
                                        autoA4548DAC_ai = 1;
                                        lv_b = 0;
                                        for ( ; ( (autoA4548DAC_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoA4548DAC_ae) || (autoA4548DAC_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoA4548DAC_ae) ) ; lv_b += autoA4548DAC_ai ) {
                                            ActorSend(gv_winterEmitter[lv_a][lv_b], &quot;Destroy&quot;);
                                        }
                                    }
                                    auto3D30DAA8_ae = gv_winterDriftCap;
                                    auto3D30DAA8_ai = 1;
                                    lv_a = 1;
                                    for ( ; ( (auto3D30DAA8_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto3D30DAA8_ae) || (auto3D30DAA8_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto3D30DAA8_ae) ) ; lv_a += auto3D30DAA8_ai ) {
                                        ActorSend(gv_winterDrift[lv_a], &quot;SetTintColor 45,60,48 2.000000&quot;);
                                    }
                                    gv_winterDriftCleanup = 4;
                                    if (gf_UnitExists(gv_frostWitch)) {
                                        PingDestroy(gv_frostWitchPing);
                                        UnitRemove(gv_frostWitch);
                                        gv_frostWitch = null;
                                    }
                                    else {
                                    }
                                    gf_NewLightset(&quot;Haven&quot;, 10.0, true, 1);
                                    gv_questIndexActive = 0;
                                    gv_questActive = false;
                                    gv_questCompleted[10] = true;
                                    UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                        UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;Snowing&quot;, 1);
                                    }
                                    UnitGroupLoopEnd();
                                    UnitGroupLoopBegin(UnitGroup(&quot;FrostBear&quot;, 15, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                        UnitRemove(UnitGroupLoopCurrent());
                                    }
                                    UnitGroupLoopEnd();
                                    gv_winter = false;
                                    ObjectiveDestroy(gv_questObjective);
                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                    auto9917C446_ae = gv_players;
                                    auto9917C446_ai = 1;
                                    lv_a = 1;
                                    for ( ; ( (auto9917C446_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto9917C446_ae) || (auto9917C446_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto9917C446_ae) ) ; lv_a += auto9917C446_ai ) {
                                        if ((gv_playerData[lv_a].lv_alive == true) &amp;&amp; (gv_winterFrozen[lv_a] == false)) {
                                            if ((gv_coldResistance[lv_a] &lt; 0.2)) {
                                                UIDisplayMessage(PlayerGroupSingle(lv_a), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/1C72885D&quot;));
                                                gv_coldResistance[lv_a] += 0.1;
                                            }
                                            else {
                                                UIDisplayMessage(PlayerGroupSingle(lv_a), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E151C8D3&quot;));
                                            }
                                        }
                                        else {
                                        }
                                    }
                                    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                                }
                            }
                        }
                    }
                }
                else {
                    gv_winterDriftCleanup -= 1;
                    if ((gv_winterDriftCleanup == 0)) {
                        autoFBE87850_ae = gv_winterDriftCap;
                        autoFBE87850_ai = 1;
                        lv_a = 1;
                        for ( ; ( (autoFBE87850_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoFBE87850_ae) || (autoFBE87850_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoFBE87850_ae) ) ; lv_a += autoFBE87850_ai ) {
                            ActorSend(gv_winterDrift[lv_a], &quot;Destroy Immediate&quot;);
                        }
                    }
                    else {
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2DE7D9CE">
        <ScriptCode>
            void gf_FrostWitchSpawn (unit lp_spawner, point lp_location) {
                // Variable Declarations
                int lv_hostile;
                point lv_spawnLocation;
                // Variable Initialization
                lv_hostile = 15;
                lv_spawnLocation = gf_GetBossSpawnLocation();
                // Implementation
                if ((gv_bearsKilled == gv_witchSpawnReq)) {
                    gf_SetScaledStats(&quot;FrostWitch&quot;, lv_hostile);
                    UnitCreate(1, &quot;FrostWitch&quot;, 0, lv_hostile, lv_spawnLocation, libNtve_gf_RandomAngle());
                    gv_frostWitch = UnitLastCreated();
                    gv_witchSummoned = true;
                    gv_winterProlongable = true;
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, lv_spawnLocation, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
                    gv_frostWitchPing = PingLastCreated();
                    PingSetUnit(gv_frostWitchPing, gv_frostWitch);
                    PingSetScale(gv_frostWitchPing, 0.5);
                    SoundPlay(SoundLink(&quot;Music_Stinger_Descending&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    SoundPlay(SoundLink(&quot;FrostWitchSpawn&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    PlayerGroupLoopBegin(PlayerGroupAll());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        libNtve_gf_ShareVisionofUnit(gv_frostWitch, true, PlayerGroupLoopCurrent());
                    }
                    PlayerGroupLoopEnd();
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="38392FD9">
        <ScriptCode>
            void gf_FrostWitchDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                int autoD962713A_ae;
                int autoD962713A_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                int lv_winningTeam;
                int lv_losingTeam;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_p = UnitGetPosition(lp_dyingUnit);
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Implementation
                PingDestroy(gv_frostWitchPing);
                gv_winterProlongable = false;
                gf_SlayerProgress(UnitGetOwner(lp_killingUnit), lp_dyingUnit);
                lv_winningTeam = gf_GetTeamOfPlayer(UnitGetOwner(lp_killingUnit));
                lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
                libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                gv_frostWitch = null;
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                gf_CreateLoot(&quot;FrostNeedle&quot;, lv_p, 0.0, false, 100, 0);
                gf_CreateLoot(&quot;AncientArtifactFragment&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;CleansingDraught&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;Stone&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;Wool&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;SpicyHerbs&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;GrilledWolfEntrecote&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;SpicedLambFeast&quot;, lv_p, 2.0, true, 100, 0);
                autoD962713A_ae = RandomInt(2, 3);
                autoD962713A_ai = 1;
                lv_a = 1;
                for ( ; ( (autoD962713A_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoD962713A_ae) || (autoD962713A_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoD962713A_ae) ) ; lv_a += autoD962713A_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lv_p, 2.0, true, 100, RandomInt(20, 30));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="05CDAD48">
        <ScriptCode>
            void gf_LightsOutImpact (point lp_point) {
                // Implementation
                if ((lp_point != null)) {
                    libNtve_gf_CreateActorAtPoint(&quot;LightsOutImpact&quot;, lp_point);
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
                    SoundPlayAtPoint(SoundLink(&quot;Zeratul_Blink&quot;, -1), PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8B88DF87">
        <ScriptCode>
            void gf_PiratesInit () {
                int auto955CCAB7_ae;
                int auto955CCAB7_ai;
                int auto2A86B289_ae;
                int auto2A86B289_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/1AB30D58&quot;);
                TimerStart(gv_questTimer, 270.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/08FE3736&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 11;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicPirate&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                auto955CCAB7_ae = gv_players;
                auto955CCAB7_ai = 1;
                lv_a = 1;
                for ( ; ( (auto955CCAB7_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto955CCAB7_ae) || (auto955CCAB7_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto955CCAB7_ae) ) ; lv_a += auto955CCAB7_ai ) {
                    gv_aIPirateSearchP[lv_a] = null;
                    gv_piratesBeerHint[lv_a] = false;
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BeerCost&quot;, &quot;Amount&quot;, lv_a, FixedToString(1.0, 0));
                }
                auto2A86B289_ae = gv_activeTeams;
                auto2A86B289_ai = 1;
                lv_a = 1;
                for ( ; ( (auto2A86B289_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto2A86B289_ae) || (auto2A86B289_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto2A86B289_ae) ) ; lv_a += auto2A86B289_ai ) {
                    gv_aIPirateSearchT[lv_a] = null;
                }
                gv_piratesTreasureLocation = gf_GetBossSpawnLocation();
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;ShovelKnowledge&quot;, UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1FE5ED09">
        <ScriptCode>
            void gf_PiratesFound (unit lp_digger) {
                int autoC372C00B_ae;
                int autoC372C00B_ai;
                int auto1346A753_ae;
                int auto1346A753_ai;
                // Variable Declarations
                int lv_i;
                point lv_p;
                int lv_a;
                int lv_goldValue;
                int lv_winningTeam;
                int lv_losingTeam;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_digger);
                lv_p = UnitGetPosition(lp_digger);
                lv_winningTeam = gv_playerData[lv_i].lv_team;
                lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
                lv_questLosers = PlayerGroupActive();
                // Implementation
                libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                if ((TimerGetElapsed(gv_questTimer) &lt;= 45.0)) {
                    gf_UnlockRequirement(UnitGetOwner(lp_digger), 2, 6);
                }
                else {
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[11] = true;
                TimerPause(gv_questTimer, true);
                ObjectiveDestroy(gv_questObjective);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_digger), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_digger), false))) + (StringExternal(&quot;Param/Value/0FAA0453&quot;) + (gf_GetTribeTextOfPlayer(UnitGetOwner(lp_digger)) + StringExternal(&quot;Param/Value/BB98DA5B&quot;)))));
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;ShovelKnowledge&quot;, 1);
                }
                UnitGroupLoopEnd();
                autoC372C00B_ae = gv_players;
                autoC372C00B_ai = 1;
                lv_a = 1;
                for ( ; ( (autoC372C00B_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC372C00B_ae) || (autoC372C00B_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC372C00B_ae) ) ; lv_a += autoC372C00B_ai ) {
                    if ((StringSub(gv_perks[lv_a], 5, 5) == &quot;1&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;BeerCost&quot;, &quot;Amount&quot;, lv_a, FixedToString(5.0, 0));
                    }
                    else {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;BeerCost&quot;, &quot;Amount&quot;, lv_a, FixedToString(6.0, 0));
                    }
                }
                gf_CreateLoot(&quot;BloodthirstyPirateHat&quot;, lv_p, 0.0, false, 100, 0);
                gf_CreateLoot(&quot;ScrollofTransmutation&quot;, lv_p, 2.0, true, 100, 0);
                auto1346A753_ae = RandomInt(7, 9);
                auto1346A753_ai = 1;
                lv_a = 1;
                for ( ; ( (auto1346A753_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto1346A753_ae) || (auto1346A753_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto1346A753_ae) ) ; lv_a += auto1346A753_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lv_p, 2.0, true, 100, RandomInt(30, 40));
                }
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="329179A2">
        <ScriptCode>
            void gf_PiratesDirection (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                point lv_arrowPoint;
                actor lv_arrowActor;
                fixed lv_angleOffset;
                fixed lv_distanceAccuracy;
                fixed lv_red;
                fixed lv_green;
                fixed lv_blue;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_angleOffset = libNtve_gf_ArithmeticRealClamp((35.0 - (FixedToInt(gv_skillMining[UnitGetOwner(lp_unit)]) + (5.0 * BoolToInt(UnitHasBehavior(lp_unit, &quot;WellFedBeer&quot;))))), 0.0, 35.0);
                lv_distanceAccuracy = libNtve_gf_ArithmeticRealClamp((DistanceBetweenPoints(UnitGetPosition(lp_unit), gv_piratesTreasureLocation) * (1.0 + RandomFixed((0.0 - (lv_angleOffset * 0.005)), (lv_angleOffset * 0.005)))), 0.0, 100.0);
                lv_red = lv_distanceAccuracy;
                lv_green = (100.0 - lv_distanceAccuracy);
                // Implementation
                gv_aIPirateSearchT[gf_GetTeamOfPlayer(lv_i)] = PointWithOffsetPolar(UnitGetPosition(lp_unit), (DistanceBetweenPoints(UnitGetPosition(lp_unit), gv_piratesTreasureLocation) * RandomFixed(0.25, 0.5)), (AngleBetweenPoints(UnitGetPosition(lp_unit), gv_piratesTreasureLocation) + RandomFixed((0.0 - lv_angleOffset), lv_angleOffset)));
                PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gv_aIPirateSearchP[PlayerGroupLoopCurrent()] = null;
                }
                PlayerGroupLoopEnd();
                if ((gv_playerData[lv_i].lv_isAI == true) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;SkipChatQuest120&quot;) == false)) {
                    TextExpressionSetToken(&quot;Param/Expression/2879E53B&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken(&quot;Param/Expression/2879E53B&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/6215AD83&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/E3EB32BF&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/6656D675&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/E3EB32BF&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/2879E53B&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                    TextExpressionSetToken(&quot;Param/Expression/E3EB32BF&quot;, &quot;C&quot;, StringToText(gv_aIPirateString[RandomInt(1, gv_aIPirateStringAmount)]));
                    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/E3EB32BF&quot;));
                    UnitBehaviorAdd(lp_unit, &quot;SkipChatQuest120&quot;, lp_unit, 1);
                }
                else {
                }
                lv_arrowPoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), 1.25, (AngleBetweenPoints(UnitGetPosition(lp_unit), gv_piratesTreasureLocation) + RandomFixed((0.0 - lv_angleOffset), lv_angleOffset)));
                libNtve_gf_CreateModelAtPoint(&quot;PingArrow&quot;, lv_arrowPoint);
                lv_arrowActor = libNtve_gf_ActorLastCreated();
                libNtve_gf_MakeModelFaceAngle(lv_arrowActor, AngleBetweenPoints(UnitGetPosition(lp_unit), lv_arrowPoint));
                ActorSend(lv_arrowActor, libNtve_gf_SetHeight(0.5));
                ActorSend(lv_arrowActor, libNtve_gf_SetScale(4.0, 4.0, 4.0, 0.25));
                ActorSend(lv_arrowActor, libNtve_gf_SetTintColor(Color(lv_red, lv_green, lv_blue), 1.5, 0.0));
                libNtve_gf_CreatePingFacingAngle(gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_members, &quot;PingArrow&quot;, UnitGetPosition(lp_unit), Color(lv_red, lv_green, lv_blue), 5.0, AngleBetweenPoints(UnitGetPosition(lp_unit), lv_arrowPoint));
                Wait(5.0, c_timeGame);
                libNtve_gf_KillModel(lv_arrowActor);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="49176AC6">
        <ScriptCode>
            void gf_WizardInit () {
                // Variable Declarations
                int lv_wizardPlayer;
                point lv_spawnLocation;
                int lv_failsafe;
                fixed lv_a;
                // Variable Initialization
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/7478C03D&quot;);
                TimerStart(gv_questTimer, 240.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/2E5E1E13&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 12;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                lv_spawnLocation = gf_GetBossSpawnLocation();
                gf_SetScaledStats(&quot;TheWoundedWizard&quot;, lv_wizardPlayer);
                UnitCreate(1, &quot;TheWoundedWizard&quot;, 0, lv_wizardPlayer, lv_spawnLocation, 270.0);
                UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/DE26E345&quot;), StringExternal(&quot;Param/Value/74E408D8&quot;), StringExternal(&quot;Param/Value/017FF592&quot;));
                gv_wizard = UnitLastCreated();
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, lv_spawnLocation, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
                gv_wizardPing = PingLastCreated();
                PingSetUnit(gv_wizardPing, gv_wizard);
                PingSetScale(gv_wizardPing, 0.5);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_wizard, true, PlayerGroupLoopCurrent());
                    gv_aIData[PlayerGroupLoopCurrent()].lv_weightedPOI = UnitGetPosition(gv_wizard);
                }
                PlayerGroupLoopEnd();
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="855FB87A">
        <ScriptCode>
            void gf_WizardHealed (unit lp_healedUnit, unit lp_healingUnit) {
                int autoA6085A65_ae;
                int autoA6085A65_ai;
                int auto57F93257_ae;
                int auto57F93257_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                int lv_winningTeam;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Implementation
                lv_winningTeam = gf_GetTeamOfPlayer(UnitGetOwner(lp_healingUnit));
                lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
                libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                lv_p = UnitGetPosition(lp_healedUnit);
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[12] = true;
                TimerPause(gv_questTimer, true);
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_wizardPing);
                UnitRemove(gv_wizard);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_healingUnit), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_healingUnit), false))) + (StringExternal(&quot;Param/Value/D25C67B8&quot;) + (gf_GetTribeTextOfPlayer(UnitGetOwner(lp_healingUnit)) + StringExternal(&quot;Param/Value/AECD9594&quot;)))));
                gf_CreateLoot(&quot;ConjurersCharm&quot;, lv_p, 0.0, false, 100, 0);
                autoA6085A65_ae = 3;
                autoA6085A65_ai = 1;
                lv_a = 1;
                for ( ; ( (autoA6085A65_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoA6085A65_ae) || (autoA6085A65_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoA6085A65_ae) ) ; lv_a += autoA6085A65_ai ) {
                    gf_CreateLoot(&quot;ScrollofTransmutation&quot;, lv_p, 2.0, true, 100, 0);
                }
                auto57F93257_ae = RandomInt(2, 3);
                auto57F93257_ai = 1;
                lv_a = 1;
                for ( ; ( (auto57F93257_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto57F93257_ae) || (auto57F93257_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto57F93257_ae) ) ; lv_a += auto57F93257_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lv_p, 2.0, true, 100, RandomInt(20, 30));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="970DCD07">
        <ScriptCode>
            void gf_BuilderInit () {
                int auto2D3EA0F5_ae;
                int auto2D3EA0F5_ai;
                // Variable Declarations
                int lv_b;
                int lv_wizardPlayer;
                unitgroup lv_team1Kobolds;
                unitgroup lv_team2Kobolds;
                point lv_team1Point;
                point lv_team2Point;
                point lv_spawnLocation;
                int lv_failsafe;
                fixed lv_a;
                // Variable Initialization
                lv_team1Kobolds = UnitGroupEmpty();
                lv_team2Kobolds = UnitGroupEmpty();
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/514BA7D4&quot;);
                TimerStart(gv_questTimer, 240.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/0DBF58FD&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 13;
                gv_extensionAllowed = true;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;BarnetsMonument&quot;, UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                auto2D3EA0F5_ae = gv_activeTeams;
                auto2D3EA0F5_ai = 1;
                lv_b = 1;
                for ( ; ( (auto2D3EA0F5_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto2D3EA0F5_ae) || (auto2D3EA0F5_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto2D3EA0F5_ae) ) ; lv_b += auto2D3EA0F5_ai ) {
                    PlayerGroupLoopBegin(gv_teamData[lv_b].lv_members);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) &amp;&amp; (gv_playerData[PlayerGroupLoopCurrent()].lv_isAI == true)) {
                            gv_aIMonumentBuilder[lv_b] = PlayerGroupLoopCurrent();
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if (gf_UnitExists(gv_playerData[gv_aIMonumentBuilder[lv_b]].lv_kobold) &amp;&amp; (UnitHasBehavior(gv_playerData[gv_aIMonumentBuilder[lv_b]].lv_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                        TextExpressionSetToken(&quot;Param/Expression/E1BD9E40&quot;, &quot;A&quot;, gf_GetPlayerName(gv_aIMonumentBuilder[lv_b], 0));
                        TextExpressionSetToken(&quot;Param/Expression/E1BD9E40&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/C3B2B9AF&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/641C28D5&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/0E27F1F4&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/641C28D5&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/E1BD9E40&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_aIMonumentBuilder[lv_b], false))));
                        TextExpressionSetToken(&quot;Param/Expression/641C28D5&quot;, &quot;C&quot;, StringToText(gv_aIMonumentBuildString[RandomInt(1, gv_aIMonumentBuildStringAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, gv_aIMonumentBuilder[lv_b]), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/641C28D5&quot;));
                        UnitBehaviorAdd(gv_playerData[gv_aIMonumentBuilder[lv_b]].lv_kobold, &quot;SkipChatQuest120&quot;, gv_playerData[gv_aIMonumentBuilder[lv_b]].lv_kobold, 1);
                    }
                    else {
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1AB7D08F">
        <ScriptCode>
            void gf_ExileInit () {
                // Variable Declarations
                unit lv_strongest;
                const bool lv_weakerTeamAlwaysAttack = false;
                // Variable Initialization
                // Implementation
                if ((lv_weakerTeamAlwaysAttack == true) &amp;&amp; (UnitGroupCount(gf_LivingKoboldsOnTeam(1), c_unitCountAlive) &gt; UnitGroupCount(gf_LivingKoboldsOnTeam(2), c_unitCountAlive))) {
                    gv_defenders = 1;
                    gv_attackers = 2;
                }
                else if ((lv_weakerTeamAlwaysAttack == true) &amp;&amp; (UnitGroupCount(gf_LivingKoboldsOnTeam(2), c_unitCountAlive) &gt; UnitGroupCount(gf_LivingKoboldsOnTeam(1), c_unitCountAlive))) {
                    gv_defenders = 2;
                    gv_attackers = 1;
                }
                else if (true) {
                    gv_attackers = RandomInt(1, 2);
                    if ((gv_attackers == 2)) {
                        gv_defenders = 1;
                    }
                    else {
                        gv_defenders = 2;
                    }
                }
                lv_strongest = gf_GetStrongestOnTeam(gv_defenders);
                TextExpressionSetToken(&quot;Param/Expression/4D929C97&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/B20CEE86&quot;));
                TextExpressionSetToken(&quot;Param/Expression/4D929C97&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(gv_defenders));
                TextExpressionSetToken(&quot;Param/Expression/4D929C97&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/D0A47E1B&quot;));
                TextExpressionSetToken(&quot;Param/Expression/4D929C97&quot;, &quot;D&quot;, gf_GetTribeTextOfTeam(gv_attackers));
                TextExpressionSetToken(&quot;Param/Expression/4D929C97&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/A5895EBC&quot;));
                gv_questText = TextExpressionAssemble(&quot;Param/Expression/4D929C97&quot;);
                TimerStart(gv_questTimer, 240.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/F81F66F5&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 14;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                PlayerGroupLoopBegin(gv_teamData[gv_defenders].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_SetScaledStats(&quot;KingFurbeastIV&quot;, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                if (gf_UnitExists(lv_strongest)) {
                    UnitCreate(1, &quot;KingFurbeastIV&quot;, 0, UnitGetOwner(lv_strongest), gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lv_strongest), 6.0)), libNtve_gf_RandomAngle());
                    gv_exile = UnitLastCreated();
                    UnitIssueOrder(gv_exile, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), lv_strongest), c_orderQueueReplace);
                }
                else {
                    gf_SetScaledStats(&quot;KingFurbeastIV&quot;, 15);
                    UnitCreate(1, &quot;KingFurbeastIV&quot;, 0, 15, PointFromId(2850), libNtve_gf_RandomAngle());
                    gv_exile = UnitLastCreated();
                }
                UnitSetInfoText(gv_exile, StringExternal(&quot;Param/Value/325337F6&quot;), StringExternal(&quot;Param/Value/14808A3A&quot;), StringExternal(&quot;Param/Value/B39C4AEA&quot;));
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, UnitGetPosition(gv_exile), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
                gv_exilePing = PingLastCreated();
                PingSetUnit(gv_exilePing, gv_exile);
                PingSetScale(gv_exilePing, 0.5);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_exile, true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                TimerStart(gv_kingslayerTimer, 30.0, false, c_timeGame);
                UIDisplayMessage(gv_teamData[gv_attackers].lv_members, c_messageAreaSubtitle, StringExternal(&quot;Param/Value/936C6D12&quot;));
                UIDisplayMessage(gv_teamData[gv_defenders].lv_members, c_messageAreaSubtitle, StringExternal(&quot;Param/Value/CD13E8F9&quot;));
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8F2E952D">
        <ScriptCode>
            unit gf_GetStrongestOnTeam (int lp_team) {
                // Variable Declarations
                unit lv_value;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true) &amp;&amp; (gf_EvaluateThreat(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) &gt; gf_EvaluateThreat(lv_value))) {
                        lv_value = gv_playerData[PlayerGroupLoopCurrent()].lv_kobold;
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D9F0FBF2">
        <ScriptCode>
            void gf_ExileLoot (point lp_location) {
                int autoFD77D75E_val;
                int auto5F9860C7_val;
                // Variable Declarations
                int lv_random;
                string lv_type;
                // Variable Initialization
                // Implementation
                PingDestroy(gv_exileRewardPing);
                gf_CreateLoot(&quot;Bloodcleaver&quot;, lp_location, 0.0, false, 100, 0);
                lv_random = RandomInt(1, 3);
                autoFD77D75E_val = lv_random;
                if (autoFD77D75E_val == 1) {
                    lv_type = &quot;RadiantGem&quot;;
                }
                else if (autoFD77D75E_val == 2) {
                    lv_type = &quot;Shadowstone&quot;;
                }
                else if (autoFD77D75E_val == 3) {
                    lv_type = &quot;IronOre&quot;;
                }
                else {
                }
                gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
                lv_random = RandomInt(1, 5);
                auto5F9860C7_val = lv_random;
                if (auto5F9860C7_val == 1) {
                    lv_type = &quot;LambentSunflower&quot;;
                }
                else if (auto5F9860C7_val == 2) {
                    lv_type = &quot;HandfulofBerries&quot;;
                }
                else if (auto5F9860C7_val == 3) {
                    lv_type = &quot;Sageberry&quot;;
                }
                else if (auto5F9860C7_val == 4) {
                    lv_type = &quot;SpicyHerbs&quot;;
                }
                else if (auto5F9860C7_val == 5) {
                    lv_type = &quot;Beer&quot;;
                }
                else {
                }
                gf_CreateLoot(lv_type, lp_location, 1.5, true, 100, 0);
                gf_CreateLoot(&quot;GoldPurse&quot;, lp_location, 1.5, true, 100, RandomInt(20, 30));
                gf_CreateLoot(&quot;ScrollofTransmutation&quot;, lp_location, 1.5, true, 100, 0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="37E9E74C">
        <ScriptCode>
            void gf_VeilInit () {
                int auto9DF15A47_ae;
                int auto9DF15A47_ai;
                // Variable Declarations
                const fixed lv_duration = 270.0;
                int lv_a;
                int lv_shrines;
                point lv_p;
                const int lv_areaSize = 9;
                region lv_questRegion;
                // Variable Initialization
                lv_shrines = libNtve_gf_ArithmeticIntClamp((UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) / 3), 1, 3);
                lv_questRegion = RegionCircle(gf_WeightedCenterofKobolds(), 64.0);
                // Implementation
                gv_veilShrineCount = 1;
                gv_questText = StringExternal(&quot;Param/Value/510014C8&quot;);
                TimerStart(gv_questTimer, lv_duration, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/DA88EBAD&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 15;
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                auto9DF15A47_ae = lv_shrines;
                auto9DF15A47_ai = 1;
                lv_a = 1;
                for ( ; ( (auto9DF15A47_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto9DF15A47_ae) || (auto9DF15A47_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto9DF15A47_ae) ) ; lv_a += auto9DF15A47_ai ) {
                    lv_p = gf_RandomOpenArea(lv_areaSize, lv_questRegion);
                    gf_VeilShrineSetup(lv_p);
                    if ((lv_p == PointFromId(2850))) {
                        break;
                    }
                    else {
                    }
                }
                gf_VeilofDarkness(lv_duration, 0);
                gf_SetScaledStats(&quot;VeilGuardian&quot;, 15);
                gf_SetScaledStats(&quot;TombGuardian&quot;, 15);
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;MysteriousShrineZap&quot;, &quot;Amount&quot;, 0, FixedToString((20.0 + (gv_gameDuration / 20.0)), 0));
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicCrypt&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                TimerStart(gv_veilGuardianTimer, RandomFixed(10.0, 20.0), false, c_timeGame);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="41404758">
        <ScriptCode>
            void gf_VeilShrineSetup (point lp_point) {
                int auto32072250_ae;
                int auto32072250_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                gv_veilShrineSequence[gv_veilShrineCount] = gf_VeilShrineSequence();
                UnitCreate(1, &quot;MysteriousShrine&quot;, c_unitCreateIgnorePlacement, 0, lp_point, 270.0);
                UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/76543469&quot;), StringExternal(&quot;Param/Value/0F98D835&quot;), StringExternal(&quot;Param/Value/0C4C4021&quot;));
                gv_veilShrine[gv_veilShrineCount] = UnitLastCreated();
                UnitSetCustomValue(UnitLastCreated(), 0, gv_veilShrineCount);
                UnitSetCustomValue(UnitLastCreated(), 2, 1.0);
                UnitSetCustomValue(UnitLastCreated(), 3, 1.0);
                UnitSetCustomValue(UnitLastCreated(), 4, 0.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingObjective&quot;, lp_point, ColorWithAlpha(100.00, 50.20, 75.29, 0.00), 0.0, 270.0);
                gv_veilShrinePing[gv_veilShrineCount] = PingLastCreated();
                UnitCreate(1, &quot;VeilShrinePad&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, -1.0, -3.0), 270.0);
                gv_veilShrinePad[gv_veilShrineCount][1] = UnitLastCreated();
                UnitCreate(1, &quot;VeilShrinePad&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, 2.0, -2.0), 270.0);
                gv_veilShrinePad[gv_veilShrineCount][2] = UnitLastCreated();
                UnitCreate(1, &quot;VeilShrinePad&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, 3.0, 1.0), 270.0);
                gv_veilShrinePad[gv_veilShrineCount][3] = UnitLastCreated();
                UnitCreate(1, &quot;VeilShrinePad&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, 1.0, 3.0), 270.0);
                gv_veilShrinePad[gv_veilShrineCount][4] = UnitLastCreated();
                UnitCreate(1, &quot;VeilShrinePad&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, -2.0, 2.0), 270.0);
                gv_veilShrinePad[gv_veilShrineCount][5] = UnitLastCreated();
                UnitCreate(1, &quot;VeilShrinePad&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffset(lp_point, -3.0, -1.0), 270.0);
                gv_veilShrinePad[gv_veilShrineCount][6] = UnitLastCreated();
                auto32072250_ae = 6;
                auto32072250_ai = 1;
                lv_a = 1;
                for ( ; ( (auto32072250_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto32072250_ae) || (auto32072250_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto32072250_ae) ) ; lv_a += auto32072250_ai ) {
                    UnitSetCustomValue(gv_veilShrinePad[gv_veilShrineCount][lv_a], 0, gv_veilShrineCount);
                    UnitSetCustomValue(gv_veilShrinePad[gv_veilShrineCount][lv_a], 1, lv_a);
                }
                gv_veilShrineCount += 1;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0F8580DA">
        <ScriptCode>
            string gf_VeilShrineSequence () {
                int auto301EA747_ae;
                int auto301EA747_ai;
                // Variable Declarations
                const int lv_length = 6;
                int lv_a;
                string lv_pool;
                string lv_value;
                int lv_r;
                // Variable Initialization
                lv_pool = &quot;123456&quot;;
                lv_value = &quot;&quot;;
                // Implementation
                auto301EA747_ae = lv_length;
                auto301EA747_ai = 1;
                lv_a = 1;
                for ( ; ( (auto301EA747_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto301EA747_ae) || (auto301EA747_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto301EA747_ae) ) ; lv_a += auto301EA747_ai ) {
                    lv_r = RandomInt(1, StringLength(lv_pool));
                    lv_value = (lv_value + StringSub(lv_pool, lv_r, lv_r));
                    lv_pool = StringReplace(lv_pool, &quot;&quot;, lv_r, lv_r);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E707CF9F">
        <ScriptCode>
            point gf_RandomOpenArea (int lp_size, region lp_region) {
                int auto374F3166_ae;
                int auto374F3166_ai;
                int auto79F33061_ae;
                int auto79F33061_ai;
                // Variable Declarations
                point lv_probe;
                point lv_p;
                bool lv_success;
                int lv_failsafe;
                int lv_a;
                int lv_b;
                // Variable Initialization
                lv_failsafe = 250;
                // Implementation
                while ((lv_success == false)) {
                    if ((lv_failsafe == 0)) {
                        lv_probe = PointFromId(2850);
                        lv_success = true;
                    }
                    else {
                        lv_failsafe -= 1;
                        lv_probe = RegionRandomPoint(lp_region);
                        lv_probe = Point((Round(PointGetX(lv_probe)) + 0.5), (Round(PointGetY(lv_probe)) + 0.5));
                        if ((RegionContainsPoint(gv_regionArena, lv_probe) == false) &amp;&amp; (UnitGroupCount(UnitGroup(&quot;Fortress&quot;, c_playerAny, RegionCircle(lv_probe, 24.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                            lv_success = true;
                            auto374F3166_ae = (lp_size / 2);
                            auto374F3166_ai = 1;
                            lv_a = (0 - (lp_size / 2));
                            for ( ; ( (auto374F3166_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto374F3166_ae) || (auto374F3166_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto374F3166_ae) ) ; lv_a += auto374F3166_ai ) {
                                auto79F33061_ae = (lp_size / 2);
                                auto79F33061_ai = 1;
                                lv_b = (0 - (lp_size / 2));
                                for ( ; ( (auto79F33061_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto79F33061_ae) || (auto79F33061_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto79F33061_ae) ) ; lv_b += auto79F33061_ai ) {
                                    lv_p = PointWithOffset(lv_probe, IntToFixed(lv_a), IntToFixed(lv_b));
                                    if ((PathingType(lv_p) == c_pathingGround)) {
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                        else {
                        }
                    }
                }
                return lv_probe;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="25B0BD29">
        <ScriptCode>
            void gf_VeilShrineFail (unit lp_shrine) {
                int auto9DBD4CCE_ae;
                int auto9DBD4CCE_ai;
                // Variable Declarations
                int lv_shrineIndex;
                int lv_a;
                // Variable Initialization
                lv_shrineIndex = FixedToInt(UnitGetCustomValue(lp_shrine, 0));
                // Implementation
                SoundPlayOnUnit(SoundLink(&quot;VeilShrineFailSound&quot;, -1), PlayerGroupAll(), lp_shrine, 0.0, 100.0, 0.0);
                gf_Alltag(lp_shrine, StringExternal(&quot;Param/Value/776C122A&quot;), 2.0, 26);
                UnitBehaviorRemove(lp_shrine, &quot;VeilShrineActive&quot;, 1);
                auto9DBD4CCE_ae = 6;
                auto9DBD4CCE_ai = 1;
                lv_a = 1;
                for ( ; ( (auto9DBD4CCE_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto9DBD4CCE_ae) || (auto9DBD4CCE_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto9DBD4CCE_ae) ) ; lv_a += auto9DBD4CCE_ai ) {
                    UnitBehaviorRemove(gv_veilShrinePad[lv_shrineIndex][lv_a], &quot;VeilShrinePadActive&quot;, 1);
                    UnitBehaviorAdd(gv_veilShrinePad[lv_shrineIndex][lv_a], &quot;VeilShrineFailFlashLead&quot;, lp_shrine, 1);
                }
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_shrine), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCreateEffectUnit(lp_shrine, &quot;MysteriousShrineZapSet&quot;, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitSetInfoText(lp_shrine, StringExternal(&quot;Param/Value/D0F9938B&quot;), StringExternal(&quot;Param/Value/63AEAB97&quot;), StringExternal(&quot;Param/Value/E3791AC0&quot;));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="95754F2A">
        <ScriptCode>
            void gf_VeilLoot (point lp_point) {
                int auto464729F0_ae;
                int auto464729F0_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                gf_CreateLoot(&quot;NecromancersNecklace&quot;, lp_point, 0.0, false, 100, 0);
                gf_CreateLoot(&quot;OrbofDarkness&quot;, lp_point, 1.5, true, 100, 0);
                gf_CreateLoot(&quot;OrbofDarkness&quot;, lp_point, 1.5, true, 100, 0);
                auto464729F0_ae = 3;
                auto464729F0_ai = 1;
                lv_a = 1;
                for ( ; ( (auto464729F0_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto464729F0_ae) || (auto464729F0_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto464729F0_ae) ) ; lv_a += auto464729F0_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lp_point, 1.5, true, 100, RandomInt(20, 30));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="241D2B89">
        <ScriptCode>
            void gf_VeilofDarkness (fixed lp_duration, int lp_castingTeam) {
                int auto7F33A7F8_ae;
                int auto7F33A7F8_ai;
                // Variable Declarations
                int lv_a;
                int lv_x;
                int lv_y;
                // Variable Initialization
                // Implementation
                TimerStart(gv_veilofDarknessTimer, lp_duration, false, c_timeGame);
                auto7F33A7F8_ae = gv_activeTeams;
                auto7F33A7F8_ai = 1;
                lv_a = 1;
                for ( ; ( (auto7F33A7F8_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto7F33A7F8_ae) || (auto7F33A7F8_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto7F33A7F8_ae) ) ; lv_a += auto7F33A7F8_ai ) {
                    if ((lv_a != lp_castingTeam)) {
                        gv_veilofDarknessActive[lv_a] = true;
                        libNtve_gf_SetPlayerGroupAlliance(gv_teamData[lv_a].lv_members, 0);
                        PlayerGroupLoopBegin(gv_teamData[lv_a].lv_members);
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterArmored) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;)) {
                                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;VeilofDarkness&quot;, UnitGroupLoopCurrent(), 1);
                                }
                                else {
                                    if ((UnitGetType(UnitGroupLoopCurrent()) != &quot;MurlocSlave&quot;)) {
                                        UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;VeilofDarknessGeneral&quot;, UnitGroupLoopCurrent(), 1);
                                    }
                                    else {
                                    }
                                }
                            }
                            UnitGroupLoopEnd();
                            UnitGroupLoopBegin(UnitGroup(&quot;Bird&quot;, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterArmored) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;BirdScouting&quot;, 1);
                            }
                            UnitGroupLoopEnd();
                        }
                        PlayerGroupLoopEnd();
                    }
                    else {
                    }
                }
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterArmored) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;OrbofDarknessDenied&quot;, UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
                TriggerEnable(gt_VeilofDarknessCont, true);
                gf_AllAIsShareControlwithAllies();
                SoundPlay(SoundLink(&quot;Music_Stinger_Descending&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                CutsceneFade(false, 1.0, Color(0,0,0), 25.0, PlayerGroupAll(), true);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6FDB3FEE">
        <ScriptCode>
            void gf_ExpeditionInit () {
                int autoDA88EADA_ae;
                int autoDA88EADA_ai;
                int autoCA10028D_ae;
                int autoCA10028D_ai;
                int auto5AEA148A_ae;
                int auto5AEA148A_ai;
                int auto5C3F08F5_ae;
                int auto5C3F08F5_ai;
                int autoC116729A_ae;
                int autoC116729A_ai;
                int autoC7818B0E_ae;
                int autoC7818B0E_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                // Variable Initialization
                // Implementation
                gv_questText = StringExternal(&quot;Param/Value/B33C0A74&quot;);
                TimerStart(gv_questTimer, 300.0, false, c_timeGame);
                ObjectiveCreate(gv_questText, StringExternal(&quot;Param/Value/639E6432&quot;), c_objectiveStateActive, true);
                gv_questObjective = ObjectiveLastCreated();
                gv_questActive = true;
                gv_questIndexActive = 16;
                gv_expeditionLeadingTeam = 0;
                autoDA88EADA_ae = gv_activeTeams;
                autoDA88EADA_ai = 1;
                lv_a = 1;
                for ( ; ( (autoDA88EADA_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoDA88EADA_ae) || (autoDA88EADA_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoDA88EADA_ae) ) ; lv_a += autoDA88EADA_ai ) {
                    gv_expeditionProgressCount[lv_a] = 0;
                    autoCA10028D_ae = gv_expeditionAreas;
                    autoCA10028D_ai = 1;
                    lv_b = 1;
                    for ( ; ( (autoCA10028D_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoCA10028D_ae) || (autoCA10028D_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoCA10028D_ae) ) ; lv_b += autoCA10028D_ai ) {
                        gv_expeditionProgress[lv_a][lv_b] = false;
                    }
                }
                TimerStart(gv_questTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                SoundPlay(SoundLink(&quot;UI_ObjectiveDiscoveredStinger&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                auto5AEA148A_ae = gv_expeditionAreas;
                auto5AEA148A_ai = 1;
                lv_a = 1;
                for ( ; ( (auto5AEA148A_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto5AEA148A_ae) || (auto5AEA148A_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto5AEA148A_ae) ) ; lv_a += auto5AEA148A_ai ) {
                    gv_expeditionActivePoint[lv_a] = gv_expeditionPoint[lv_a][RandomInt(1, 3)];
                    UnitCreate(1, &quot;ExpeditionArea&quot;, c_unitCreateIgnorePlacement, 0, gv_expeditionActivePoint[lv_a], 270.0);
                    gv_expeditionRing[lv_a] = UnitLastCreated();
                    auto5C3F08F5_ae = gv_players;
                    auto5C3F08F5_ai = 1;
                    lv_b = 1;
                    for ( ; ( (auto5C3F08F5_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto5C3F08F5_ae) || (auto5C3F08F5_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto5C3F08F5_ae) ) ; lv_b += auto5C3F08F5_ai ) {
                        VisExploreArea(lv_b, RegionCircle(gv_expeditionActivePoint[lv_a], gv_expeditionRadius), true, false);
                    }
                }
                autoC116729A_ae = gv_activeTeams;
                autoC116729A_ai = 1;
                lv_a = 1;
                for ( ; ( (autoC116729A_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC116729A_ae) || (autoC116729A_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC116729A_ae) ) ; lv_a += autoC116729A_ai ) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingNumeric1&quot;, gv_expeditionActivePoint[1], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
                    gv_expeditionPing[lv_a][1] = PingLastCreated();
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingNumeric2&quot;, gv_expeditionActivePoint[2], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
                    gv_expeditionPing[lv_a][2] = PingLastCreated();
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingNumeric3&quot;, gv_expeditionActivePoint[3], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
                    gv_expeditionPing[lv_a][3] = PingLastCreated();
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingNumeric4&quot;, gv_expeditionActivePoint[4], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
                    gv_expeditionPing[lv_a][4] = PingLastCreated();
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingNumeric5&quot;, gv_expeditionActivePoint[5], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
                    gv_expeditionPing[lv_a][5] = PingLastCreated();
                    autoC7818B0E_ae = gv_expeditionAreas;
                    autoC7818B0E_ai = 1;
                    lv_b = 1;
                    for ( ; ( (autoC7818B0E_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoC7818B0E_ae) || (autoC7818B0E_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoC7818B0E_ae) ) ; lv_b += autoC7818B0E_ai ) {
                        PingSetScale(gv_expeditionPing[lv_a][lv_b], 0.75);
                        PingSetPlayerGroup(gv_expeditionPing[lv_a][lv_b], gv_teamData[lv_a].lv_members);
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E7EAB334">
        <ScriptCode>
            void gf_ExpeditionProgress (int lp_team) {
                int auto4D135EAF_ae;
                int auto4D135EAF_ai;
                int autoE5BC8179_ae;
                int autoE5BC8179_ai;
                int auto4906B9F0_ae;
                int auto4906B9F0_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Implementation
                if ((gv_expeditionProgressCount[lp_team] == gv_expeditionAreas)) {
                    gv_questIndexActive = 0;
                    gv_questActive = false;
                    gv_questCompleted[16] = true;
                    ObjectiveDestroy(gv_questObjective);
                    auto4D135EAF_ae = gv_expeditionAreas;
                    auto4D135EAF_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto4D135EAF_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto4D135EAF_ae) || (auto4D135EAF_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto4D135EAF_ae) ) ; lv_a += auto4D135EAF_ai ) {
                        UnitRemove(gv_expeditionRing[lv_a]);
                    }
                    autoE5BC8179_ae = gv_maxTeams;
                    autoE5BC8179_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoE5BC8179_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE5BC8179_ae) || (autoE5BC8179_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE5BC8179_ae) ) ; lv_a += autoE5BC8179_ai ) {
                        auto4906B9F0_ae = gv_expeditionAreas;
                        auto4906B9F0_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto4906B9F0_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto4906B9F0_ae) || (auto4906B9F0_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto4906B9F0_ae) ) ; lv_b += auto4906B9F0_ai ) {
                            PingDestroy(gv_expeditionPing[lv_a][lv_b]);
                        }
                    }
                    lv_questWinners = gv_teamData[lp_team].lv_members;
                    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                    TextExpressionSetToken(&quot;Param/Expression/4D0B0776&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/90BC92C2&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/4D0B0776&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lp_team));
                    TextExpressionSetToken(&quot;Param/Expression/4D0B0776&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/0D2E8E77&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/4D0B0776&quot;));
                    PlayerGroupLoopBegin(lv_questWinners);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                            gf_Quicktag(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, StringExternal(&quot;Param/Value/DC559551&quot;), 3.0, 24);
                            gf_CreateItemForUnit(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;EpicFishingRod&quot;, 1);
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="594F91AF">
        <ScriptCode>
            text gf_ExpeditionProgressText () {
                int auto53D8CAC0_ae;
                int auto53D8CAC0_ai;
                int autoB9555964_ae;
                int autoB9555964_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                text lv_value;
                // Variable Initialization
                // Implementation
                lv_value = (lv_value + StringExternal(&quot;Param/Value/CC98442D&quot;));
                auto53D8CAC0_ae = gv_activeTeams;
                auto53D8CAC0_ai = 1;
                lv_a = 1;
                for ( ; ( (auto53D8CAC0_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto53D8CAC0_ae) || (auto53D8CAC0_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto53D8CAC0_ae) ) ; lv_a += auto53D8CAC0_ai ) {
                    if ((gv_teamData[lv_a].lv_allDead == false)) {
                        TextExpressionSetToken(&quot;Param/Expression/4A69D351&quot;, &quot;A&quot;, lv_value);
                        TextExpressionSetToken(&quot;Param/Expression/4A69D351&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lv_a));
                        TextExpressionSetToken(&quot;Param/Expression/4A69D351&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/F5C0D0AB&quot;));
                        lv_value = TextExpressionAssemble(&quot;Param/Expression/4A69D351&quot;);
                        autoB9555964_ae = gv_expeditionAreas;
                        autoB9555964_ai = 1;
                        lv_b = 1;
                        for ( ; ( (autoB9555964_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoB9555964_ae) || (autoB9555964_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoB9555964_ae) ) ; lv_b += autoB9555964_ai ) {
                            if ((lv_b == gv_expeditionAreas)) {
                                if ((gv_expeditionProgress[lv_a][lv_b] == true)) {
                                    TextExpressionSetToken(&quot;Param/Expression/0787F14C&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/9DABAFBB&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/0787F14C&quot;, &quot;B&quot;, IntToText(lv_b));
                                    TextExpressionSetToken(&quot;Param/Expression/0787F14C&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/9A159FAE&quot;));
                                    lv_value = (lv_value + TextExpressionAssemble(&quot;Param/Expression/0787F14C&quot;));
                                }
                                else {
                                    TextExpressionSetToken(&quot;Param/Expression/4AE5062A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/A607D780&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/4AE5062A&quot;, &quot;B&quot;, IntToText(lv_b));
                                    TextExpressionSetToken(&quot;Param/Expression/4AE5062A&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/DF7E6D4F&quot;));
                                    lv_value = (lv_value + TextExpressionAssemble(&quot;Param/Expression/4AE5062A&quot;));
                                }
                            }
                            else {
                                if ((gv_expeditionProgress[lv_a][lv_b] == true)) {
                                    TextExpressionSetToken(&quot;Param/Expression/1EB85EB2&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/66F5223F&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/1EB85EB2&quot;, &quot;B&quot;, IntToText(lv_b));
                                    TextExpressionSetToken(&quot;Param/Expression/1EB85EB2&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/9E07519F&quot;));
                                    lv_value = (lv_value + TextExpressionAssemble(&quot;Param/Expression/1EB85EB2&quot;));
                                }
                                else {
                                    TextExpressionSetToken(&quot;Param/Expression/1CAA5977&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/34C2B46F&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/1CAA5977&quot;, &quot;B&quot;, IntToText(lv_b));
                                    TextExpressionSetToken(&quot;Param/Expression/1CAA5977&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/60F65ADA&quot;));
                                    lv_value = (lv_value + TextExpressionAssemble(&quot;Param/Expression/1CAA5977&quot;));
                                }
                            }
                        }
                        lv_value = (lv_value + StringExternal(&quot;Param/Value/4AE90520&quot;));
                    }
                    else {
                    }
                }
                if ((gv_expeditionLeadingTeam != 0)) {
                    TextExpressionSetToken(&quot;Param/Expression/A55814F5&quot;, &quot;A&quot;, lv_value);
                    TextExpressionSetToken(&quot;Param/Expression/A55814F5&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/CD1BD59E&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/A55814F5&quot;, &quot;C&quot;, gf_GetTribeTextOfTeam(gv_expeditionLeadingTeam));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/A55814F5&quot;);
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1A98910F">
        <ScriptCode>
            void gf_DLJRSpawn (point lp_point) {
                // Implementation
                gf_SetScaledStats(&quot;DemonLordJaryx&quot;, 15);
                UnitCreate(1, &quot;DemonLordJaryx&quot;, 0, 15, lp_point, libNtve_gf_RandomAngle());
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/BE424AF9&quot;));
                SoundPlay(SoundLink(&quot;DemonLordSummon&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                MinimapPing(PlayerGroupAll(), lp_point, 5.0, Color(100.00, 0.00, 0.00));
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicBossHeroic&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraShake(PlayerGroupLoopCurrent(), &quot;Massive&quot;, &quot;Shake&quot;, 0.0, 1.0, 2.0);
                    VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lp_point, 16.0), 15.0, false);
                }
                PlayerGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="23A899BE">
        <ScriptCode>
            void gf_DLJRDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                int autoFBBC495F_ae;
                int autoFBBC495F_ai;
                int autoFBD06F2B_ae;
                int autoFBD06F2B_ai;
                // Variable Declarations
                int lv_a;
                point lv_p;
                // Variable Initialization
                lv_p = UnitGetPosition(lp_dyingUnit);
                // Implementation
                gf_SlayerProgress(UnitGetOwner(lp_killingUnit), lp_dyingUnit);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5C08DBAF&quot;));
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicBossHeroicVictory&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                gf_CreateLoot(&quot;FelFireTorch&quot;, lv_p, 0.0, false, 100, 0);
                gf_CreateLoot(&quot;RadiantGem&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;LambentSunflower&quot;, lv_p, 2.0, true, 100, 0);
                gf_CreateLoot(&quot;Shadowstone&quot;, lv_p, 2.0, true, 100, 0);
                autoFBBC495F_ae = 3;
                autoFBBC495F_ai = 1;
                lv_a = 1;
                for ( ; ( (autoFBBC495F_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoFBBC495F_ae) || (autoFBBC495F_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoFBBC495F_ae) ) ; lv_a += autoFBBC495F_ai ) {
                    gf_CreateLoot(&quot;SmokedLambSirloin&quot;, lv_p, 2.0, true, 100, 0);
                }
                autoFBD06F2B_ae = RandomInt(4, 5);
                autoFBD06F2B_ai = 1;
                lv_a = 1;
                for ( ; ( (autoFBD06F2B_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoFBD06F2B_ae) || (autoFBD06F2B_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoFBD06F2B_ae) ) ; lv_a += autoFBD06F2B_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lv_p, 2.0, true, 100, RandomInt(20, 30));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BB6383D8">
        <ScriptCode>
            void gf_RABSpawn (point lp_point, int lp_summoningPlayer) {
                int autoF8B8BE44_ae;
                int autoF8B8BE44_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/74F741A6&quot;));
                SoundPlay(SoundLink(&quot;RagingArcaneBeastSpawn&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                TextExpressionSetToken(&quot;Param/Expression/B163589B&quot;, &quot;A&quot;, gf_GetPlayerName(lp_summoningPlayer, 0));
                TextExpressionSetToken(&quot;Param/Expression/B163589B&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/65E6E91F&quot;));
                UIDisplayMessage(PlayerGroupSingle(lp_summoningPlayer), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble(&quot;Param/Expression/B163589B&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_summoningPlayer, false))) + StringExternal(&quot;Param/Value/F865C3E0&quot;)));
                MinimapPing(PlayerGroupAll(), lp_point, 5.0, Color(100.00, 0.00, 0.00));
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicBossHeroic&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                        UnitAbilitySpend(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, AbilityCommand(&quot;MysteriousArcaneRitual&quot;, 0), c_spendLocationAbility);
                    }
                    else {
                    }
                    CameraShake(PlayerGroupLoopCurrent(), &quot;Massive&quot;, &quot;Shake&quot;, 0.0, 1.0, 2.0);
                    VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lp_point, 16.0), 15.0, false);
                }
                PlayerGroupLoopEnd();
                gf_SetScaledStats(&quot;RagingArcaneBeast&quot;, 15);
                UnitCreate(1, &quot;RagingArcaneBeast&quot;, 0, 15, lp_point, libNtve_gf_RandomAngle());
                UnitSetCustomValue(UnitLastCreated(), 1, lp_summoningPlayer);
                UnitSetCustomValue(UnitLastCreated(), 2, gv_gameDuration);
                autoF8B8BE44_ae = 3;
                autoF8B8BE44_ai = 1;
                lv_a = 1;
                for ( ; ( (autoF8B8BE44_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoF8B8BE44_ae) || (autoF8B8BE44_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoF8B8BE44_ae) ) ; lv_a += autoF8B8BE44_ai ) {
                    UnitCreate(1, &quot;LightningCloud&quot;, 0, 15, RegionRandomPoint(RegionCircle(lp_point, 12.0)), libNtve_gf_RandomAngle());
                    UnitSetHeight(UnitLastCreated(), RandomFixed(6.0, 8.0), 0.0);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2073BAAB">
        <ScriptCode>
            void gf_UnstableAnomalyAscent (unit lp_unit, fixed lp_damage) {
                // Variable Declarations
                fixed lv_currentHeight;
                fixed lv_verticalForce;
                const fixed lv_damageConversionFactor = 0.03;
                // Variable Initialization
                lv_currentHeight = UnitGetHeight(lp_unit);
                lv_verticalForce = UnitGetCustomValue(lp_unit, 0);
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;UnstableAnomaly&quot;)) {
                    UnitSetCustomValue(lp_unit, 0, libNtve_gf_ArithmeticRealClamp((lv_verticalForce + (SquareRoot(lp_damage) * lv_damageConversionFactor)), -0.25, 0.5));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7BA7D3D5">
        <ScriptCode>
            void gf_RABDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                int auto285212B3_ae;
                int auto285212B3_ai;
                int auto1ABE0FB0_ae;
                int auto1ABE0FB0_ai;
                // Variable Declarations
                point lv_p;
                int lv_a;
                // Variable Initialization
                lv_p = UnitGetPosition(lp_dyingUnit);
                // Implementation
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/A410AE83&quot;));
                SoundPlay(SoundLink(&quot;RagingArcaneBeastDeath&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicBossHeroicVictory&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                UnitGroupLoopBegin(UnitGroup(&quot;LightningCloud&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 3));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                gf_AddExperience(lp_killingUnit, 200.0);
                gf_CreateLoot(&quot;SpellbreakerArmor&quot;, lv_p, 0.0, false, 100, 0);
                auto285212B3_ae = 5;
                auto285212B3_ai = 1;
                lv_a = 1;
                for ( ; ( (auto285212B3_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto285212B3_ae) || (auto285212B3_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto285212B3_ae) ) ; lv_a += auto285212B3_ai ) {
                    gf_CreateLoot(&quot;RadiantGem&quot;, lv_p, 2.0, true, 100, 0);
                    gf_CreateLoot(&quot;Shadowstone&quot;, lv_p, 2.0, true, 100, 0);
                }
                auto1ABE0FB0_ae = RandomInt(2, 3);
                auto1ABE0FB0_ai = 1;
                lv_a = 1;
                for ( ; ( (auto1ABE0FB0_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto1ABE0FB0_ae) || (auto1ABE0FB0_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto1ABE0FB0_ae) ) ; lv_a += auto1ABE0FB0_ai ) {
                    gf_CreateLoot(&quot;GoldPurse&quot;, lv_p, 2.0, true, 100, RandomInt(20, 30));
                }
                if ((UnitGetCustomValue(lp_dyingUnit, 2) &gt;= 3600.0)) {
                    PlayerGroupLoopBegin(gv_teamData[gv_playerData[UnitGetOwner(lp_killingUnit)].lv_team].lv_members);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        gf_UnlockRequirement(PlayerGroupLoopCurrent(), 1, 21);
                    }
                    PlayerGroupLoopEnd();
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="7DCBC655">
        <Item Type="CustomScript" Id="0D6F2D37"/>
        <Item Type="CustomScript" Id="B7B97193"/>
        <Item Type="CustomScript" Id="0C3BDAFE"/>
        <Item Type="CustomScript" Id="6E6BD40D"/>
        <Item Type="CustomScript" Id="75E24BA0"/>
        <Item Type="CustomScript" Id="915616E3"/>
        <Item Type="CustomScript" Id="CB7ACB36"/>
        <Item Type="CustomScript" Id="5ABA29E2"/>
    </Element>
    <Element Type="CustomScript" Id="0D6F2D37">
        <ScriptCode>
            void gf_SpellCast (unit lp_caster, fixed lp_cost) {
                // Implementation
                if (gf_UnitExists(lp_caster)) {
                    if (((UnitGetOwner(lp_caster) &gt;= 1) &amp;&amp; (UnitGetOwner(lp_caster) &lt;= gv_players))) {
                        gv_playerData[UnitGetOwner(lp_caster)].lv_gameStats.lv_spellsCast += 1;
                    }
                    else {
                    }
                    gf_SpellbreakerHaste(lp_caster);
                    gf_LeatherCoatHeal(lp_caster, lp_cost);
                    gf_NightwispSynergy(lp_caster);
                    gf_SpellbreakerTrigger(lp_caster);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B7B97193">
        <ScriptCode>
            void gf_LeatherCoatHeal (unit lp_caster, fixed lp_cost) {
                // Variable Declarations
                fixed lv_haelz;
                // Variable Initialization
                lv_haelz = (lp_cost * 0.75);
                // Implementation
                if ((UnitHasBehavior(lp_caster, &quot;LeatherCoat&quot;) == true)) {
                    gf_HealUnit(lp_caster, lp_caster, lv_haelz, true);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0C3BDAFE">
        <ScriptCode>
            void gf_SpellbreakerHaste (unit lp_caster) {
                // Implementation
                if ((UnitHasBehavior(lp_caster, &quot;SpellbreakerArmor&quot;) == true)) {
                    UnitBehaviorAdd(lp_caster, &quot;SpellbreakerHaste&quot;, lp_caster, 1);
                    gf_UpdateStatsAll(UnitGetOwner(lp_caster));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6E6BD40D">
        <ScriptCode>
            void gf_NightwispSynergy (unit lp_caster) {
                // Implementation
                UnitGroupLoopBegin(UnitGroupFilter(&quot;Nightwisp&quot;, c_playerAny, gv_pets[UnitGetOwner(lp_caster)], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitAbilityCheck(UnitGroupLoopCurrent(), &quot;Synergy&quot;, true) == false)) {
                        UnitCreateEffectUnit(lp_caster, &quot;SynergyBeamSmall&quot;, UnitGroupLoopCurrent());
                        UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;SynergyProc&quot;, lp_caster, 1);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="75E24BA0">
        <ScriptCode>
            void gf_SpellbreakerTrigger (unit lp_unit) {
                // Implementation
                if ((UnitHasBehavior(lp_unit, &quot;SpellbreakerTrigger&quot;) == true)) {
                    UnitBehaviorAdd(lp_unit, &quot;Spellbroken&quot;, lp_unit, 1);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="915616E3">
        <ScriptCode>
            void gf_HealUnit (unit lp_target, unit lp_source, fixed lp_amount, bool lp_showText) {
                // Variable Declarations
                unit lv_target;
                fixed lv_healAmount;
                fixed lv_modifier;
                // Variable Initialization
                lv_target = lp_target;
                lv_healAmount = lp_amount;
                lv_modifier = 1.0;
                // Implementation
                if ((UnitHasBehavior(lv_target, &quot;GravesingersClawDebuff&quot;) == true)) {
                    lv_modifier -= gv_gravesingerHealFactor;
                }
                else {
                }
                if ((UnitHasBehavior(lp_source, &quot;LeatherCoat&quot;) == true)) {
                    lv_modifier += 0.1;
                }
                else {
                }
                lv_modifier = libNtve_gf_ArithmeticRealClamp(lv_modifier, 0.0, 100.0);
                lv_healAmount *= lv_modifier;
                UnitSetPropertyFixed(lv_target, c_unitPropLife, (UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent) + lv_healAmount));
                if ((lp_showText == true)) {
                    TextExpressionSetToken(&quot;Param/Expression/0F08CE5A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/7AC70323&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/0F08CE5A&quot;, &quot;B&quot;, FixedToText(Round(lv_healAmount), 0));
                    gf_Advancedtag(lv_target, UnitGetOwner(lp_source), TextExpressionAssemble(&quot;Param/Expression/0F08CE5A&quot;), 2.0, 24);
                }
                else {
                }
                if ((lv_target == gv_wizard) &amp;&amp; (UnitGetPropertyFixed(gv_wizard, c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
                    gf_WizardHealed(lv_target, lp_source);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CB7ACB36">
        <ScriptCode>
            trigger auto_gf_GuardianSpiritLoop_Trigger = null;
            unit auto_gf_GuardianSpiritLoop_lp_unit;
            void gf_GuardianSpiritLoop (unit lp_unit) {
                auto_gf_GuardianSpiritLoop_lp_unit = lp_unit;
                if (auto_gf_GuardianSpiritLoop_Trigger == null) {
                    auto_gf_GuardianSpiritLoop_Trigger = TriggerCreate(&quot;auto_gf_GuardianSpiritLoop_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_GuardianSpiritLoop_Trigger, false, false);
            }
            bool auto_gf_GuardianSpiritLoop_TriggerFunc (bool testConds, bool runActions) {
                unit lp_unit = auto_gf_GuardianSpiritLoop_lp_unit;
                // Variable Declarations
                const fixed lv_spiritZOffset = 0.5;
                const fixed lv_spiritInterval = 0.0625;
                fixed lv_rotationSpeed;
                unit lv_spirit;
                fixed lv_distanceOffset;
                fixed lv_startingAngle;
                fixed lv_angle;
                unit lv_sacrificeTarget;
                int lv_checkInterval;
                fixed lv_healAmount;
                bool lv_sacrificed;
                // Variable Initialization
                lv_startingAngle = libNtve_gf_RandomAngle();
                // Implementation
                UnitCreate(1, &quot;GuardianSpirit&quot;, 0, UnitGetOwner(lp_unit), UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
                lv_spirit = UnitLastCreated();
                UnitSetHeight(lv_spirit, (WorldHeight(c_heightMapGround, UnitGetPosition(lp_unit)) + lv_spiritZOffset), 0.0);
                while ((lv_sacrificed == false) &amp;&amp; (lp_unit != null) &amp;&amp; (lv_spirit != null) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;GuardianSpirit&quot;) == true)) {
                    lv_angle += (4.0 + lv_rotationSpeed);
                    lv_rotationSpeed += 0.01;
                    if ((lv_angle &gt;= 360.0)) {
                        lv_angle = (lv_angle - 360.0);
                    }
                    else {
                    }
                    lv_distanceOffset = libNtve_gf_ArithmeticRealClamp((lv_distanceOffset + 0.05), 0.0, 1.5);
                    if (lv_checkInterval &gt;= 8) {
                        lv_checkInterval = 1;
                    }
                    else {
                        lv_checkInterval = lv_checkInterval + 1;
                    }
                    if ((lv_checkInterval == 1)) {
                        lv_sacrificeTarget = gf_NearbySacrificeTarget(lp_unit);
                    }
                    else {
                    }
                    if ((lv_sacrificeTarget != null) &amp;&amp; (UnitGetPropertyFixed(lv_sacrificeTarget, c_unitPropLifePercent, c_unitPropCurrent) &lt; 100.0)) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_spirit), UnitGetPosition(lv_sacrificeTarget)) &lt;= 0.5)) {
                            if ((UnitGetPropertyFixed(lv_sacrificeTarget, c_unitPropLifePercent, c_unitPropCurrent) &lt; 10.0) &amp;&amp; (UnitGetType(lv_sacrificeTarget) == &quot;Kobold&quot;) &amp;&amp; (lv_sacrificeTarget != lp_unit)) {
                                gf_UnlockRequirement(UnitGetOwner(lp_unit), 1, 9);
                            }
                            else {
                            }
                            lv_healAmount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GuardianSpiritStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(lp_unit)));
                            gf_HealUnit(lv_sacrificeTarget, lp_unit, lv_healAmount, true);
                            if ((UnitHasBehavior(lp_unit, &quot;ConjurersCharm&quot;) == true)) {
                                UnitBehaviorAdd(lv_sacrificeTarget, &quot;GuardianSpiritLingering&quot;, lp_unit, 1);
                            }
                            else {
                            }
                            libNtve_gf_AttachActorToUnit(lv_sacrificeTarget, &quot;GuardianSpiritHealImpact&quot;, &quot;Ref_Origin&quot;);
                            lv_sacrificed = true;
                        }
                        else {
                            UnitSetPosition(lv_spirit, PointWithOffsetPolar(UnitGetPosition(lv_spirit), 0.3, AngleBetweenPoints(UnitGetPosition(lv_spirit), UnitGetPosition(lv_sacrificeTarget))), true);
                            lv_angle = (AngleBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_spirit)) - lv_startingAngle);
                        }
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_spirit)) &gt; 2.5)) {
                            UnitSetPosition(lv_spirit, PointWithOffsetPolar(UnitGetPosition(lv_spirit), 0.2, AngleBetweenPoints(UnitGetPosition(lv_spirit), UnitGetPosition(lp_unit))), true);
                            lv_angle = (AngleBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_spirit)) - lv_startingAngle);
                        }
                        else {
                            UnitSetPosition(lv_spirit, PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_distanceOffset, (lv_startingAngle + lv_angle)), true);
                        }
                    }
                    UnitSetHeight(lv_spirit, (WorldHeight(c_heightMapGround, UnitGetPosition(lp_unit)) + lv_spiritZOffset), lv_spiritInterval);
                    Wait(lv_spiritInterval, c_timeGame);
                }
                UnitKill(lv_spirit);
                UnitBehaviorRemove(lp_unit, &quot;GuardianSpirit&quot;, 1);
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5ABA29E2">
        <ScriptCode>
            unit gf_NearbySacrificeTarget (unit lp_unit) {
                // Variable Declarations
                unitgroup lv_kobolds;
                unit lv_target;
                // Variable Initialization
                lv_kobolds = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(lp_unit), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_unit), 12.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Implementation
                UnitGroupLoopBegin(lv_kobolds);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) &gt; 40.0)) {
                        UnitGroupRemove(lv_kobolds, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                lv_target = UnitGroupClosestToPoint(lv_kobolds, UnitGetPosition(lp_unit));
                if ((lv_target == null) &amp;&amp; (gv_questIndexActive == 12)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_wizard)) &lt;= gv_interactRadius)) {
                        lv_target = gv_wizard;
                    }
                    else {
                    }
                }
                else {
                }
                if ((lv_target == null) &amp;&amp; (gv_questIndexActive == 14)) {
                    if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_unit), UnitGetOwner(gv_exile), 0) == true) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_exile)) &lt;= 12.0) &amp;&amp; (UnitGetPropertyFixed(gv_exile, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 90.0)) {
                        lv_target = gv_exile;
                    }
                    else {
                    }
                }
                else {
                }
                return lv_target;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="32F05AC1">
        <Item Type="CustomScript" Id="D8CE4E5D"/>
        <Item Type="CustomScript" Id="DA83A1B3"/>
        <Item Type="CustomScript" Id="D53653B2"/>
        <Item Type="CustomScript" Id="CE1D834E"/>
        <Item Type="CustomScript" Id="A0520C60"/>
        <Item Type="CustomScript" Id="8B220512"/>
        <Item Type="CustomScript" Id="1B7C26AB"/>
        <Item Type="CustomScript" Id="E91D6EE3"/>
        <Item Type="CustomScript" Id="79C566FF"/>
        <Item Type="CustomScript" Id="B07D30BB"/>
        <Item Type="CustomScript" Id="15F717B5"/>
        <Item Type="CustomScript" Id="6B5B22D5"/>
        <Item Type="CustomScript" Id="70479FA5"/>
        <Item Type="CustomScript" Id="BF1A8C91"/>
    </Element>
    <Element Type="CustomScript" Id="D8CE4E5D">
        <ScriptCode>
            bool gf_DayNightCyclePaused () {
                // Variable Declarations
                bool lv_value;
                // Variable Initialization
                // Implementation
                if ((((gv_tutorial == true) &amp;&amp; (gv_pauseNextDusk == true) &amp;&amp; (gv_dayNightCycle == (gv_dayDuration - gv_transitionTime))) || ((gv_tutorial == true) &amp;&amp; (gv_pauseNextDawn == true) &amp;&amp; (gv_dayNightCycle == ((gv_dayDuration + gv_nightDuration) - gv_transitionTime))))) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DA83A1B3">
        <ScriptCode>
            void gf_DayNightCycle () {
                // Implementation
                gf_UpdateDayTimer(gv_dayNightCycle);
                if ((gv_dayNightCycle == 1.0)) {
                    gf_DiscoverDeposits();
                }
                else if ((gv_dayNightCycle == 2.0)) {
                    gf_DiscoverBushes();
                }
                else if ((gv_dayNightCycle == (gv_dayDuration - (gv_transitionTime / 2.0)))) {
                    PlayerGroupLoopBegin(PlayerGroupActive());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        gf_TravelingWizards(PlayerGroupLoopCurrent(), false);
                    }
                    PlayerGroupLoopEnd();
                    gf_SetFogOpacity(gv_dayFogDensity, gv_nightFogDensity, gv_fogDensityTransitionTime);
                    if ((gv_questIndexActive == 7) &amp;&amp; (gv_deadnightPhase == 1)) {
                        gf_DeadnightinitPhase2((gv_transitionTime / 2.0));
                    }
                    else {
                        gf_NewLightset(&quot;MeinhoffCampaignNight&quot;, gv_transitionTime, true, -1);
                    }
                }
                else if ((gv_dayNightCycle == gv_dayDuration)) {
                    gf_NightHappened();
                }
                else if ((gv_dayNightCycle == ((gv_dayDuration + gv_nightDuration) - (gv_transitionTime / 2.0)))) {
                    if ((gv_questIndexActive == 10)) {
                        gf_NewLightset(&quot;Snow&quot;, gv_transitionTime, true, -1);
                    }
                    else {
                        gf_NewLightset(&quot;Haven&quot;, gv_transitionTime, true, -1);
                    }
                    gf_SetFogOpacity(gv_nightFogDensity, gv_dayFogDensity, gv_fogDensityTransitionTime);
                }
                else if ((gv_dayNightCycle == (gv_dayDuration + gv_nightDuration))) {
                    gf_MorningHappened();
                }
                if ((gv_dayNightCycle &gt;= (gv_dayDuration + gv_nightDuration))) {
                    gv_dayNightCycle = 0.0;
                }
                else {
                    gv_dayNightCycle += gv_periodInterval;
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D53653B2">
        <ScriptCode>
            void gf_UpdateDayTimer (fixed lp_cycle) {
                // Implementation
                if ((gv_dayNight == 1)) {
                    libNtve_gf_SetDialogItemCurrentValue(gv_dayTimerProgress, ((lp_cycle / gv_dayDuration) * 100.0), PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_dayTimerProgress, (StringExternal(&quot;Param/Value/1015D506&quot;) + TextTimeFormat(StringToText(&quot;&lt;mintotal/&gt;:&lt;sec2/&gt;&quot;), (FixedToInt(gv_dayDuration) - FixedToInt(lp_cycle)))), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemCurrentValue(gv_dayTimerProgress, (((lp_cycle - gv_dayDuration) / gv_nightDuration) * 100.0), PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_dayTimerProgress, (StringExternal(&quot;Param/Value/81AC4C59&quot;) + TextTimeFormat(StringToText(&quot;&lt;mintotal/&gt;:&lt;sec2/&gt;&quot;), (FixedToInt(gv_nightDuration) - FixedToInt((lp_cycle - gv_dayDuration))))), PlayerGroupAll());
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CE1D834E">
        <ScriptCode>
            void gf_TravelingWizards (int lp_player, bool lp_guaranteed) {
                // Variable Declarations
                unitgroup lv_taverns;
                int lv_wizards;
                fixed lv_roll;
                fixed lv_chance;
                // Variable Initialization
                lv_taverns = UnitGroupEmpty();
                // Implementation
                if ((gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerArcaneSanctum == false)) {
                    lv_taverns = UnitGroup(&quot;Tavern&quot;, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    UnitGroupLoopBegin(lv_taverns);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((StringSub(gv_perks[lp_player], 14, 14) == &quot;1&quot;) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 30)) {
                            lv_chance = 100.0;
                        }
                        else {
                            lv_roll = libNtve_gf_RandomPercent();
                            lv_chance = (40.0 + (libNtve_gf_ArithmeticRealClamp(IntToFixed(PlayerGetPropertyInt(lp_player, c_playerPropMinerals)), 0.0, 120.0) / 2.0));
                        }
                        if (((lv_roll &lt;= lv_chance) || (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;KoboldBotNormal&quot;) == true) || (lp_guaranteed == true) || (lp_player == 0))) {
                            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lp_player), &quot;PingSimple&quot;, UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 100.00, 49.02), 3.0, 270.0);
                            UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;TavernWizardApply&quot;, UnitGroupLoopCurrent());
                            lv_wizards += 1;
                        }
                        else {
                        }
                    }
                    UnitGroupLoopEnd();
                    if ((StringSub(gv_perks[lp_player], 14, 14) == &quot;1&quot;) &amp;&amp; (lv_wizards == 1)) {
                        SoundPlay(SoundLink(&quot;UI_TerranReminderPing&quot;, -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/73AA127F&quot;));
                        gv_wizardVisitEveryNight[lp_player] = false;
                    }
                    else if ((StringSub(gv_perks[lp_player], 14, 14) == &quot;1&quot;) &amp;&amp; (lv_wizards &gt; 1)) {
                        SoundPlay(SoundLink(&quot;UI_TerranReminderPing&quot;, -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F84CF4F5&quot;));
                    }
                    else if ((lv_wizards == 1)) {
                        SoundPlay(SoundLink(&quot;UI_TerranReminderPing&quot;, -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/67CBE1FD&quot;));
                        gv_wizardVisitEveryNight[lp_player] = false;
                    }
                    else if ((lv_wizards &gt; 1) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &lt; 100)) {
                        SoundPlay(SoundLink(&quot;UI_TerranReminderPing&quot;, -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5E2BFA9C&quot;));
                    }
                    else if ((lv_wizards &gt; 1) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt; 100)) {
                        SoundPlay(SoundLink(&quot;UI_TerranReminderPing&quot;, -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/709A3C33&quot;));
                    }
                    else if (true) {
                        gv_wizardVisitEveryNight[lp_player] = false;
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A0520C60">
        <ScriptCode>
            void gf_MorningHappened () {
                // Variable Declarations
                int lv_neutralHostile;
                // Variable Initialization
                lv_neutralHostile = 15;
                // Implementation
                gv_day += 1;
                gv_dayNight = 1;
                gv_b_Day = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/460543DF&quot;) + (IntToText(gv_day) + StringExternal(&quot;Param/Value/6D94F055&quot;))));
                gf_SetScaledStats(&quot;MapleTree&quot;, 0);
                gf_SetScaledStats(&quot;ElderTree&quot;, 0);
                gf_SetScaledStats(&quot;Stag&quot;, 0);
                GameTimeOfDaySet(&quot;12:00:00&quot;);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_UpdatePetStats(PlayerGroupLoopCurrent());
                    if ((gv_skillForaging[PlayerGroupLoopCurrent()] &lt; 25)) {
                        gf_ModifyUnitSight(&quot;Kobold&quot;, PlayerGroupLoopCurrent(), 2.0);
                    }
                    else {
                    }
                    gf_Banker(PlayerGroupLoopCurrent());
                    if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) &amp;&amp; gf_UnitExists(gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_watchTower) &amp;&amp; (gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_watchTowerCanteen == true)) {
                        gf_CanteenFood(gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_watchTower, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                gv_nightcrawlerQuota = 0;
                UnitGroupLoopBegin(UnitGroup(&quot;Nightcrawler&quot;, 0, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Lyote&quot;, lv_neutralHostile, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Ghoul&quot;, lv_neutralHostile, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;GhoulBurrow&quot;, UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Tavern&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((gv_teamData[gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_team].lv_watchTowerArcaneSanctum == false)) {
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;TavernWizard&quot;, 1);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Fortress&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;WatchTowerNightLight&quot;, 1);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Tavern&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;GenericNightBehavior&quot;, 1);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;LorenorStatue&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(UnitGroupLoopCurrent()), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterUnderConstruction - 32)) | (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0)) {
                        gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_stamina += 100.0;
                        gf_Quicktag(UnitGroupLoopCurrent(), StringExternal(&quot;Param/Value/15ED2E7F&quot;), 3.0, 24);
                        UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;Inspired&quot;, UnitGroupLoopCurrent(), 1);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if ((gv_questIndexActive == 7) &amp;&amp; (gv_deadnightPhase == 3)) {
                    gv_questIndexActive = 0;
                    gv_questActive = false;
                    gv_questCompleted[7] = true;
                    UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;DeadnightActive&quot;, 1);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(UnitGroup(&quot;Monstrosity&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    ObjectiveDestroy(gv_questObjective);
                    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, gv_musicVolume, 0.0);
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    gf_QuestFinishEvents(PlayerGroupActive(), PlayerGroupEmpty());
                    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                }
                else {
                    SoundPlay(SoundLink(&quot;DawnCue&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                if ((gv_raining == false)) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_Haven&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else {
                }
                if ((gv_tutorial == true)) {
                    TriggerExecute(gt_TutorialPart9, true, false);
                }
                else {
                    gf_RainInitialize(RandomInt(2, 60), RandomInt(40, 240), 11.0);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8B220512">
        <ScriptCode>
            void gf_NightHappened () {
                // Variable Declarations
                int lv_neutral;
                int lv_neutralHostile;
                // Variable Initialization
                lv_neutralHostile = 15;
                // Implementation
                if ((gv_questIndexActive == 7) &amp;&amp; (gv_deadnightPhase == 2)) {
                    gf_DeadnightinitPhase3();
                }
                else {
                    if ((gv_tutorial == false)) {
                        gv_nightDuration = 80.0;
                    }
                    else {
                        if ((gv_day == 2)) {
                            gv_nightDuration = 140.0;
                        }
                        else {
                            gv_nightDuration = 40.0;
                        }
                    }
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/B22529CD&quot;));
                    SoundPlay(SoundLink(&quot;DuskCue&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                GameTimeOfDaySet(&quot;00&quot;);
                gv_dayNight = 2;
                gv_b_Day = false;
                gf_NightlyBeerCasks();
                gv_nightcrawlerQuota = (UnitGroupCount(UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) / 6);
                UnitGroupLoopBegin(UnitGroup(&quot;Fortress&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;WatchTowerLookout&quot;) == true)) {
                        UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;WatchTowerNightLight&quot;, UnitGroupLoopCurrent(), 1);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Tavern&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;GenericNightBehavior&quot;, UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;Inspired&quot;, 1);
                }
                UnitGroupLoopEnd();
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_UpdatePetStats(PlayerGroupLoopCurrent());
                    gf_InGameHint(&quot;night&quot;, PlayerGroupLoopCurrent());
                    if ((gv_skillForaging[PlayerGroupLoopCurrent()] &lt; 25)) {
                        gf_ModifyUnitSight(&quot;Kobold&quot;, PlayerGroupLoopCurrent(), -2.0);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                gf_SetScaledStats(&quot;Dog&quot;, lv_neutral);
                gf_SetScaledStats(&quot;Lyote&quot;, lv_neutralHostile);
                gf_SetScaledStats(&quot;Bear&quot;, lv_neutralHostile);
                gf_SetScaledStats(&quot;FrostBear&quot;, lv_neutralHostile);
                if ((gv_raining == false)) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_Hanson01Night&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else {
                }
                if ((gv_tutorial == false)) {
                    gf_RainInitialize(RandomInt(2, 60), RandomInt(40, 240), 11.0);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1B7C26AB">
        <ScriptCode>
            void gf_UpdateWolfsbanePlayer (int lp_player) {
                // Implementation
                if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;Wolfsbane&quot;) == true) &amp;&amp; (gv_dayNight == 2)) {
                    UnitCreateEffectUnit(gv_playerData[lp_player].lv_kobold, &quot;WolfsbaneStrongerApply&quot;, gv_playerData[lp_player].lv_kobold);
                }
                else {
                }
                gv_playerData[lp_player].lv_gameStats.lv_wolvesKilled += 1;
                if ((gv_playerData[lp_player].lv_gameStats.lv_wolvesKilled &gt; gv_playerData[gv_wolfsbanePlayer].lv_gameStats.lv_wolvesKilled)) {
                    UnitBehaviorRemove(gv_playerData[gv_wolfsbanePlayer].lv_kobold, &quot;WolfsbaneTitle&quot;, 1);
                    gf_Quicktag(gv_playerData[gv_wolfsbanePlayer].lv_kobold, StringExternal(&quot;Param/Value/D7C52291&quot;), 2.0, 24);
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;WolfsbaneTitle&quot;, gv_playerData[lp_player].lv_kobold, 1);
                    gf_Quicktag(gv_playerData[lp_player].lv_kobold, StringExternal(&quot;Param/Value/09D04C19&quot;), 2.0, 24);
                    gv_wolfsbanePlayer = lp_player;
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E91D6EE3">
        <ScriptCode>
            trigger auto_gf_SetFogOpacity_Trigger = null;
            fixed auto_gf_SetFogOpacity_lp_opacityOriginal;
            fixed auto_gf_SetFogOpacity_lp_opacityTarget;
            fixed auto_gf_SetFogOpacity_lp_fadeDuration;
            void gf_SetFogOpacity (fixed lp_opacityOriginal, fixed lp_opacityTarget, fixed lp_fadeDuration) {
                auto_gf_SetFogOpacity_lp_opacityOriginal = lp_opacityOriginal;
                auto_gf_SetFogOpacity_lp_opacityTarget = lp_opacityTarget;
                auto_gf_SetFogOpacity_lp_fadeDuration = lp_fadeDuration;
                if (auto_gf_SetFogOpacity_Trigger == null) {
                    auto_gf_SetFogOpacity_Trigger = TriggerCreate(&quot;auto_gf_SetFogOpacity_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_SetFogOpacity_Trigger, false, false);
            }
            bool auto_gf_SetFogOpacity_TriggerFunc (bool testConds, bool runActions) {
                fixed lp_opacityOriginal = auto_gf_SetFogOpacity_lp_opacityOriginal;
                fixed lp_opacityTarget = auto_gf_SetFogOpacity_lp_opacityTarget;
                fixed lp_fadeDuration = auto_gf_SetFogOpacity_lp_fadeDuration;
                // Variable Declarations
                fixed lv_opacity;
                fixed lv_changePerInterval;
                bool lv_positive;
                // Variable Initialization
                lv_opacity = lp_opacityOriginal;
                lv_changePerInterval = (0.0 - (AbsF((lp_opacityOriginal - lp_opacityTarget)) / (8.0 * lp_fadeDuration)));
                // Implementation
                if ((lp_opacityOriginal &lt; lp_opacityTarget)) {
                    lv_positive = true;
                    lv_changePerInterval = AbsF(lv_changePerInterval);
                }
                else {
                }
                while ((((lv_opacity &lt; lp_opacityTarget) &amp;&amp; (lv_positive == true)) || ((lv_opacity &gt; lp_opacityTarget) &amp;&amp; (lv_positive == false)))) {
                    lv_opacity += lv_changePerInterval;
                    FogSetDensity(lv_opacity);
                    Wait(0.125, c_timeGame);
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="79C566FF">
        <ScriptCode>
            void gf_RainInitialize (fixed lp_wait, fixed lp_duration, fixed lp_chance) {
                // Variable Declarations
                fixed lv_rainChanceModifier;
                fixed lv_rainDurationModifier;
                // Variable Initialization
                lv_rainChanceModifier = 1.0;
                lv_rainDurationModifier = 1.0;
                // Implementation
                UnitGroupLoopBegin(gf_UnitsInUnitGroupWithBuff(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), &quot;StormwizardsRobes&quot;));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_rainChanceModifier += 0.25;
                    lv_rainDurationModifier += 0.1;
                }
                UnitGroupLoopEnd();
                if ((gv_raining == false) &amp;&amp; (gv_winter == false) &amp;&amp; (gv_rainingSoon == false) &amp;&amp; (gv_winterSoon == false) &amp;&amp; (libNtve_gf_RandomPercent() &lt;= (lp_chance * lv_rainChanceModifier))) {
                    gv_rainingSoon = true;
                    gv_rainDelayCounter = lp_wait;
                    gv_rainCounter = (lp_duration * lv_rainDurationModifier);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B07D30BB">
        <ScriptCode>
            void gf_RainLoop () {
                int auto9236DC58_ae;
                int auto9236DC58_ai;
                int autoAF646891_ae;
                int autoAF646891_ai;
                int auto8FF1BDA9_ae;
                int auto8FF1BDA9_ai;
                int auto9BED1912_ae;
                int auto9BED1912_ai;
                int autoB0A7A97C_ae;
                int autoB0A7A97C_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                fixed lv_f;
                // Variable Initialization
                lv_f = libNtve_gf_RandomAngle();
                // Implementation
                if ((gv_raining == false)) {
                    if ((gv_rainingSoon == true)) {
                        if ((gv_rainDelayCounter &lt;= 0)) {
                            gv_rainingSoon = false;
                            gv_raining = true;
                            gv_rainJustStarted = true;
                        }
                        else {
                            gv_rainDelayCounter -= gv_periodInterval;
                        }
                    }
                    else {
                    }
                }
                else {
                    if ((gv_rainJustStarted == true)) {
                        gv_rainJustStarted = false;
                        PlayerGroupLoopBegin(PlayerGroupActive());
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            gf_InGameHint(&quot;rain&quot;, PlayerGroupLoopCurrent());
                        }
                        PlayerGroupLoopEnd();
                        UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;Raining&quot;, UnitGroupLoopCurrent(), 1);
                        }
                        UnitGroupLoopEnd();
                        auto9BED1912_ae = gv_weatherSize;
                        auto9BED1912_ai = 1;
                        lv_a = 0;
                        for ( ; ( (auto9BED1912_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto9BED1912_ae) || (auto9BED1912_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto9BED1912_ae) ) ; lv_a += auto9BED1912_ai ) {
                            autoB0A7A97C_ae = gv_weatherSize;
                            autoB0A7A97C_ai = 1;
                            lv_b = 0;
                            for ( ; ( (autoB0A7A97C_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoB0A7A97C_ae) || (autoB0A7A97C_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoB0A7A97C_ae) ) ; lv_b += autoB0A7A97C_ai ) {
                                lv_p = Point((10 + (19 * lv_a)), (10 + (19 * lv_b)));
                                libNtve_gf_CreateActorAtPoint(&quot;RainEmitterLarge&quot;, lv_p);
                                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((lv_f + RandomFixed(-20.0, 20.0))));
                                gv_rainEmitter[lv_a][lv_b] = libNtve_gf_ActorLastCreated();
                            }
                        }
                    }
                    else {
                        if ((gv_rainCounter &gt; 0.0)) {
                            PlayerGroupLoopBegin(PlayerGroupAll());
                            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                                if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) &amp;&amp; ((UnitHasBehavior(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;Sheltered&quot;) == true) || (UnitHasBehavior(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;WatchTowerGarrisonCargoBuff&quot;) == true))) {
                                    if ((gv_rainAmbience[PlayerGroupLoopCurrent()] != 2)) {
                                        SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryAmbience, &quot;RainIndoors&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                                        gv_rainAmbience[PlayerGroupLoopCurrent()] = 2;
                                    }
                                    else {
                                    }
                                }
                                else {
                                    UnitCreateEffectUnit(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;RainApply&quot;, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
                                    if ((gv_rainAmbience[PlayerGroupLoopCurrent()] != 1)) {
                                        SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryAmbience, &quot;RainOutdoors&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                                        gv_rainAmbience[PlayerGroupLoopCurrent()] = 1;
                                    }
                                    else {
                                    }
                                }
                            }
                            PlayerGroupLoopEnd();
                            if ((libNtve_gf_RandomPercent() &lt;= 5.0)) {
                                SoundPlay(SoundLink(&quot;DistantThunder&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                            }
                            else {
                            }
                            gv_rainCounter -= gv_periodInterval;
                        }
                        else {
                            UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;Raining&quot;, 1);
                            }
                            UnitGroupLoopEnd();
                            auto9236DC58_ae = gv_players;
                            auto9236DC58_ai = 1;
                            lv_a = 1;
                            for ( ; ( (auto9236DC58_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto9236DC58_ae) || (auto9236DC58_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto9236DC58_ae) ) ; lv_a += auto9236DC58_ai ) {
                                gv_rainAmbience[lv_a] = 0;
                            }
                            autoAF646891_ae = gv_weatherSize;
                            autoAF646891_ai = 1;
                            lv_a = 0;
                            for ( ; ( (autoAF646891_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoAF646891_ae) || (autoAF646891_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoAF646891_ae) ) ; lv_a += autoAF646891_ai ) {
                                auto8FF1BDA9_ae = gv_weatherSize;
                                auto8FF1BDA9_ai = 1;
                                lv_b = 0;
                                for ( ; ( (auto8FF1BDA9_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto8FF1BDA9_ae) || (auto8FF1BDA9_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto8FF1BDA9_ae) ) ; lv_b += auto8FF1BDA9_ai ) {
                                    ActorSend(gv_rainEmitter[lv_a][lv_b], &quot;Destroy&quot;);
                                }
                            }
                            if ((gv_dayNight == 1)) {
                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_Haven&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                            }
                            else {
                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_Hanson01Night&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                            }
                            gv_raining = false;
                        }
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="15F717B5">
        <ScriptCode>
            trigger auto_gf_NewLightset_Trigger = null;
            string auto_gf_NewLightset_lp_lightset;
            fixed auto_gf_NewLightset_lp_duration;
            bool auto_gf_NewLightset_lp_waitforit;
            int auto_gf_NewLightset_lp_timeofday;
            void gf_NewLightset (string lp_lightset, fixed lp_duration, bool lp_waitforit, int lp_timeofday) {
                auto_gf_NewLightset_lp_lightset = lp_lightset;
                auto_gf_NewLightset_lp_duration = lp_duration;
                auto_gf_NewLightset_lp_waitforit = lp_waitforit;
                auto_gf_NewLightset_lp_timeofday = lp_timeofday;
                if (auto_gf_NewLightset_Trigger == null) {
                    auto_gf_NewLightset_Trigger = TriggerCreate(&quot;auto_gf_NewLightset_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_NewLightset_Trigger, false, false);
            }
            bool auto_gf_NewLightset_TriggerFunc (bool testConds, bool runActions) {
                string lp_lightset = auto_gf_NewLightset_lp_lightset;
                fixed lp_duration = auto_gf_NewLightset_lp_duration;
                bool lp_waitforit = auto_gf_NewLightset_lp_waitforit;
                int lp_timeofday = auto_gf_NewLightset_lp_timeofday;
                // Implementation
                if ((lp_waitforit == false)) {
                    if ((gv_lightsetTransition == false)) {
                        if (((lp_timeofday == -1) || (lp_timeofday == gv_dayNight))) {
                            GameSetLighting(lp_lightset, lp_duration);
                            gv_lightsetTransition = true;
                            Wait(lp_duration, c_timeGame);
                            gv_lightsetTransition = false;
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                else {
                    while ((gv_lightsetTransition == true)) {
                        Wait(1.0, c_timeGame);
                    }
                    if (((lp_timeofday == -1) || (lp_timeofday == gv_dayNight))) {
                        GameSetLighting(lp_lightset, lp_duration);
                        gv_lightsetTransition = true;
                        Wait(lp_duration, c_timeGame);
                        gv_lightsetTransition = false;
                    }
                    else {
                    }
                }
                return true;
            }   
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6B5B22D5">
        <ScriptCode>
            point gf_RandomPathablePoint (region lp_region) {
                // Variable Declarations
                point lv_p;
                int lv_failsafe;
                // Variable Initialization
                lv_failsafe = 25;
                // Implementation
                while ((lv_p == null)) {
                    lv_p = RegionRandomPoint(lp_region);
                    lv_failsafe -= 1;
                    if ((PathingType(lv_p) == c_pathingGround) &amp;&amp; (RegionContainsPoint(gv_regionArena, lv_p) == false)) {
                    }
                    else {
                        if ((lv_failsafe &gt; 0)) {
                            lv_p = null;
                        }
                        else {
                            lv_p = RegionGetCenter(lp_region);
                        }
                    }
                }
                return lv_p;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="70479FA5">
        <ScriptCode>
            point gf_RandomPathablePointSansVision (region lp_region) {
                // Variable Declarations
                point lv_p;
                int lv_failsafe;
                // Variable Initialization
                lv_failsafe = 25;
                // Implementation
                while ((lv_p == null)) {
                    lv_p = RegionRandomPoint(lp_region);
                    lv_failsafe -= 1;
                    if ((PathingType(lv_p) == c_pathingGround) &amp;&amp; (RegionContainsPoint(gv_regionArena, lv_p) == false) &amp;&amp; (gf_PointVisibleToAnyone(lv_p) == false)) {
                    }
                    else {
                        if ((lv_failsafe &gt; 0)) {
                            lv_p = null;
                        }
                        else {
                            lv_p = gf_RandomPathablePoint(lp_region);
                        }
                    }
                }
                return lv_p;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BF1A8C91">
        <ScriptCode>
            bool gf_PointVisibleToAnyone (point lp_point) {
                int auto2E6D6C8B_ae;
                int auto2E6D6C8B_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                auto2E6D6C8B_ae = gv_players;
                auto2E6D6C8B_ai = 1;
                lv_a = 1;
                for ( ; ( (auto2E6D6C8B_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto2E6D6C8B_ae) || (auto2E6D6C8B_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto2E6D6C8B_ae) ) ; lv_a += auto2E6D6C8B_ai ) {
                    if ((VisIsVisibleForPlayer(lv_a, lp_point) == true)) {
                        return true;
                    }
                    else {
                    }
                }
                return false;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="204F004F">
        <Item Type="CustomScript" Id="F83C2224"/>
        <Item Type="CustomScript" Id="8AB0AAE8"/>
        <Item Type="CustomScript" Id="B3FE9C9D"/>
        <Item Type="CustomScript" Id="35423580"/>
        <Item Type="CustomScript" Id="5A1434CE"/>
        <Item Type="CustomScript" Id="C8749D93"/>
        <Item Type="CustomScript" Id="98E66E2B"/>
        <Item Type="CustomScript" Id="BDC040EA"/>
        <Item Type="CustomScript" Id="44D780A9"/>
        <Item Type="CustomScript" Id="627B1177"/>
        <Item Type="CustomScript" Id="71900E1D"/>
        <Item Type="CustomScript" Id="4E76F6E0"/>
        <Item Type="CustomScript" Id="33B83BD4"/>
        <Item Type="CustomScript" Id="E7C0CBC6"/>
        <Item Type="CustomScript" Id="34016CD2"/>
        <Item Type="CustomScript" Id="BF84C5E4"/>
        <Item Type="CustomScript" Id="59B6F8B5"/>
        <Item Type="CustomScript" Id="82EB5D2E"/>
        <Item Type="CustomScript" Id="73E87076"/>
        <Item Type="CustomScript" Id="E357317F"/>
        <Item Type="CustomScript" Id="4E854D64"/>
        <Item Type="CustomScript" Id="E2BBDE05"/>
        <Item Type="CustomScript" Id="B7653AAF"/>
    </Element>
    <Element Type="CustomScript" Id="F83C2224">
        <ScriptCode>
            void gf_UpdateResourceReservesSingle (unit lp_unit, unit lp_item, bool lp_negative) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((gv_playerData[lv_i].lv_alive == true)) {
                    gf_UpdateResourceReserversCond(lv_i, lp_item, lp_negative);
                    gf_MiningExpertiseIII(lp_unit);
                    if ((gv_playerData[lv_i].lv_isAI == true)) {
                        gf_UpdateSupplies(lv_i);
                        gv_aIData[lv_i].lv_smithyDesire = gf_WantedItemType(lp_unit, &quot;Smithy&quot;);
                        gv_aIData[lv_i].lv_benchDesire = gf_WantedItemType(lp_unit, &quot;Workbench&quot;);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8AB0AAE8">
        <ScriptCode>
            void gf_UpdateResourceReserversCond (int lp_player, unit lp_item, bool lp_negative) {
                // Variable Declarations
                int lv_modifier;
                string lv_itemType;
                int lv_b;
                // Variable Initialization
                lv_modifier = 1;
                lv_itemType = UnitGetType(lp_item);
                // Implementation
                if ((lp_negative == true)) {
                    lv_modifier = -1;
                    UnitGroupRemove(gv_aIData[lp_player].lv_tradeItems, lp_item);
                }
                else {
                }
                if ((lv_itemType == &quot;HandfulofBerries&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_handfulofBerries, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                }
                else if ((lv_itemType == &quot;RawLamb&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_rawLamb, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodRaw, lp_negative);
                }
                else if ((lv_itemType == &quot;RawPheasant&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_rawPheasant, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodRaw, lp_negative);
                }
                else if ((lv_itemType == &quot;RawWolfMeat&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_rawWolf, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodRaw, lp_negative);
                }
                else if ((lv_itemType == &quot;RawStagMeat&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_rawStag, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodRaw, lp_negative);
                }
                else if ((lv_itemType == &quot;WolfSteak&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_wolfSteak, lp_negative);
                }
                else if ((lv_itemType == &quot;SpicedLambFeast&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_lambFeast, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                }
                else if ((lv_itemType == &quot;SmokedLambSirloin&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                }
                else if ((lv_itemType == &quot;RoastedPheasantWithBerrySauce&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                }
                else if ((lv_itemType == &quot;RoastedLamb&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_roastedLamb, lp_negative);
                }
                else if ((lv_itemType == &quot;GrilledWolfEntrecote&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_wolfEntrecote, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                }
                else if ((lv_itemType == &quot;BeerBraisedPheasant&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_beerPhez, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                }
                else if ((lv_itemType == &quot;StagStew&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                }
                else if (((lv_itemType == &quot;AlbinoCavefish&quot;) || (lv_itemType == &quot;BlindRainfish&quot;) || (lv_itemType == &quot;FireAmmonite&quot;) || (lv_itemType == &quot;ForestTrout&quot;) || (lv_itemType == &quot;GiantSunfish&quot;) || (lv_itemType == &quot;HighlandGuppy&quot;) || (lv_itemType == &quot;JewelDanio&quot;) || (lv_itemType == &quot;SlipperyEel&quot;) || (lv_itemType == &quot;StripedLurker&quot;) || (lv_itemType == &quot;WaterScorpion&quot;))) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_foodCooked, lp_negative);
                }
                else if ((lv_itemType == &quot;Beer&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_beer, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_food, lp_negative);
                }
                else if ((lv_itemType == &quot;SpicyHerbs&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_spicyHerbs, lp_negative);
                }
                else if ((lv_itemType == &quot;LambentSunflower&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_sunflowers, lp_negative);
                }
                else if ((lv_itemType == &quot;Sageberry&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_sageberries, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_consumables, lp_negative);
                }
                else if ((lv_itemType == &quot;Lumber&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_lumber, lp_negative);
                }
                else if ((lv_itemType == &quot;LumberParts&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_lumberParts, lp_negative);
                }
                else if ((lv_itemType == &quot;Stone&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_stone, lp_negative);
                }
                else if ((lv_itemType == &quot;Leather&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_leather, lp_negative);
                }
                else if ((lv_itemType == &quot;Wool&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_wool, lp_negative);
                }
                else if ((lv_itemType == &quot;IronOre&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_ironOre, lp_negative);
                }
                else if ((lv_itemType == &quot;Shadowstone&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_shadowstone, lp_negative);
                }
                else if ((lv_itemType == &quot;RadiantGem&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_radiantGem, lp_negative);
                }
                else if ((lv_itemType == &quot;MurlocSkull&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_murlocSkulls, lp_negative);
                }
                else if ((lv_itemType == &quot;InfusedLumber&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_infusedLumber, lp_negative);
                }
                else if ((lv_itemType == &quot;BearPelt&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Psionic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Psionic]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_bearPelts, lp_negative);
                }
                else if ((lv_itemType == &quot;WarmWoolTunic&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves3&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves3&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_warmWoolTunics, lp_negative);
                }
                else if ((lv_itemType == &quot;MurlocSkullFragment&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves3&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves3&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_murlocSkullFragments, lp_negative);
                }
                else if ((lv_itemType == &quot;SturdyWoodenStick&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsMaterialReserves3&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves3&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_sturdyWoodenSticks, lp_negative);
                }
                else if ((lv_itemType == &quot;HuntsmansJacket&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_huntsmansJackets, lp_negative);
                }
                else if ((lv_itemType == &quot;WhiteBearFang&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_whiteBearFangs, lp_negative);
                }
                else if ((lv_itemType == &quot;BoneTalisman&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_boneTalismans, lp_negative);
                }
                else if ((lv_itemType == &quot;TrollNoseBone&quot;)) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString((lv_b + lv_modifier)));
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_trollNoseBones, lp_negative);
                }
                else if ((lv_itemType == &quot;Antlers&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_antlers, lp_negative);
                }
                else if ((lv_itemType == &quot;DraughtofDecay&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_consumables, lp_negative);
                }
                else if ((lv_itemType == &quot;ReapersHand&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_reapersHands, lp_negative);
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_consumables, lp_negative);
                }
                else if ((lv_itemType == &quot;ObedienceRod&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_obedRods, lp_negative);
                }
                else if ((lv_itemType == &quot;Candle&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_candles, lp_negative);
                }
                else if ((lv_itemType == &quot;Lantern&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_lanterns, lp_negative);
                }
                else if ((lv_itemType == &quot;SkeletalFinger&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_skeletalFingers, lp_negative);
                }
                else if ((lv_itemType == &quot;BerserkersBattleAxe&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_berserkersBattleAxes, lp_negative);
                }
                else if ((lv_itemType == &quot;SharpIronPickaxe&quot;)) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_sharpIronPickaxe, lp_negative);
                }
                else if (((lv_itemType == &quot;FishingRod&quot;) || (lv_itemType == &quot;EpicFishingRod&quot;))) {
                    gf_AddRemoveUnitFromUnitGroup(lp_item, gv_playerData[lp_player].lv_resources.lv_fishingRods, lp_negative);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B3FE9C9D">
        <ScriptCode>
            void gf_AddRemoveUnitFromUnitGroup (unit lp_unit, unitgroup lp_unitGroup, bool lp_negative) {
                // Implementation
                if ((lp_negative == true)) {
                    UnitGroupRemove(lp_unitGroup, lp_unit);
                }
                else {
                    UnitGroupAdd(lp_unitGroup, lp_unit);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="35423580">
        <ScriptCode>
            void gf_MiningExpertiseIII (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((gv_skillMining[UnitGetOwner(lp_unit)] &gt;= 25)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt; 0)) {
                        UnitBehaviorAdd(lp_unit, &quot;MiningExpertise&quot;, lp_unit, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_unit, &quot;MiningExpertise&quot;, 1);
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5A1434CE">
        <ScriptCode>
            void gf_ClearResourceReserves (int lp_player) {
                // Variable Declarations
                int lv_b;
                // Variable Initialization
                // Implementation
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_antlers);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_bearPelts);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_beer);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_beerPhez);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_boneTalismans);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_candles);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_consumables);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_food);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_foodCooked);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_foodRaw);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_handfulofBerries);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_huntsmansJackets);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_infusedLumber);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_ironOre);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_lambFeast);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_lanterns);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_leather);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_lumber);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_lumberParts);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_murlocSkullFragments);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_murlocSkulls);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_obedRods);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_radiantGem);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_rawLamb);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_rawPheasant);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_rawStag);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_rawWolf);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_reapersHands);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_sageberries);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_shadowstone);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_skeletalFingers);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_spicyHerbs);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_stone);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_sturdyWoodenSticks);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_sunflowers);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_trollNoseBones);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_warmWoolTunics);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_whiteBearFangs);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_wolfEntrecote);
                UnitGroupClear(gv_playerData[lp_player].lv_resources.lv_wool);
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsFoodReserves&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves&quot;, &quot;AttributeBonus[Light]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Massive]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves2&quot;, &quot;AttributeBonus[Psionic]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrophyCount&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves3&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, IntToString(lv_b));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMaterialReserves3&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, IntToString(lv_b));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C8749D93">
        <ScriptCode>
            void gf_UpdateResourceTooltip (unit lp_unit) {
                // Implementation
                if (gf_UnitExists(lp_unit)) {
                    TextExpressionSetToken(&quot;Param/Expression/1CC5227B&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/9A5EB282&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/1CC5227B&quot;, &quot;B&quot;, FixedToText(UnitGetCustomValue(lp_unit, 0), 0));
                    TextExpressionSetToken(&quot;Param/Expression/1CC5227B&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/A9ECB7AE&quot;));
                    UnitSetInfoText(lp_unit, StringExternal(&quot;Param/Value/DDC8FDEB&quot;), TextExpressionAssemble(&quot;Param/Expression/1CC5227B&quot;), StringExternal(&quot;Param/Value/2B9CFAED&quot;));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="98E66E2B">
        <ScriptCode>
            void gf_SaveResources (int lp_i) {
                // Variable Declarations
                string lv_keystring;
                string lv_floodstring;
                string lv_keystringRq;
                string lv_floodstringRq;
                // Variable Initialization
                lv_keystring = gf_GetRandom8String();
                lv_floodstring = gf_GetRandom8String();
                lv_keystringRq = gf_GetRandom8String();
                lv_floodstringRq = gf_GetRandom8String();
                // Implementation
                BankLoad(&quot;nostrobskalufs&quot;, lp_i);
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;Y7rGzk0&quot;, gf_EncryptInt(gv_accwins[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 0), (gv_trollz - 0))), StringToInt(StringSub(lv_floodstring, 1, 1))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;hhgh3hha&quot;, gf_EncryptInt(gv_acclosses[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 1), (gv_trollz - 1))), StringToInt(StringSub(lv_floodstring, 2, 2))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;ni6u1rK&quot;, gf_EncryptInt(gv_acclvl[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 2), (gv_trollz - 2))), StringToInt(StringSub(lv_floodstring, 3, 3))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;bJr0nQ2&quot;, gf_EncryptInt(gv_kobkills[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 3), (gv_trollz - 3))), StringToInt(StringSub(lv_floodstring, 4, 4))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;norl0sP&quot;, gf_EncryptInt(gv_kobdeaths[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 4), (gv_trollz - 4))), StringToInt(StringSub(lv_floodstring, 5, 5))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;xpJar65&quot;, gf_EncryptInt(gv_accxp[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 5), (gv_trollz - 5))), StringToInt(StringSub(lv_floodstring, 6, 6))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;Uut1s3t&quot;, gf_EncryptInt(gv_conqpoints[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 6), (gv_trollz - 6))), StringToInt(StringSub(lv_floodstring, 7, 7))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;gTl8zbk&quot;, gf_EncryptInt(gv_gladSpree[lp_i], StringToInt(StringSub(lv_keystring, (gv_trollz - 7), (gv_trollz - 7))), StringToInt(StringSub(lv_floodstring, 8, 8))));
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;7HuRb8gn&quot;, lv_keystring);
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;Jyr8GxL&quot;, lv_floodstring);
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;RiBktos&quot;, gv_matchhistory[lp_i]);
                BankSave(BankLastCreated());
                gf_SaveSB3(lp_i);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BDC040EA">
        <ScriptCode>
            void gf_UpdateGold (int lp_player) {
                // Implementation
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;GoldReserves&quot;, &quot;Amount&quot;, lp_player, IntToString(PlayerGetPropertyInt(lp_player, c_playerPropMinerals)));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="44D780A9">
        <ScriptCode>
            void gf_DiscoverDeposits () {
                int autoA9F6F6BD_ae;
                int autoA9F6F6BD_ai;
                int auto1AF45301_ae;
                int auto1AF45301_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                fixed lv_depositFindAmount;
                unitgroup lv_depositCandidates;
                unit lv_chosenStone;
                int lv_index;
                // Variable Initialization
                lv_depositCandidates = UnitGroupEmpty();
                // Implementation
                autoA9F6F6BD_ae = gv_players;
                autoA9F6F6BD_ai = 1;
                lv_a = 1;
                for ( ; ( (autoA9F6F6BD_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoA9F6F6BD_ae) || (autoA9F6F6BD_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoA9F6F6BD_ae) ) ; lv_a += autoA9F6F6BD_ai ) {
                    if ((gv_playerData[lv_a].lv_alive == true)) {
                        lv_depositFindAmount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_a));
                        if ((FixedToInt(lv_depositFindAmount) &gt;= 1)) {
                            lv_depositCandidates = UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            UnitGroupAddUnitGroup(lv_depositCandidates, UnitGroup(&quot;GoldDeposit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                            UnitGroupLoopBegin(lv_depositCandidates);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                if ((UnitGroupHasUnit(gv_discoveredDepositsTeam[gf_GetTeamOfPlayer(lv_a)], UnitGroupLoopCurrent()) == true)) {
                                    UnitGroupRemove(lv_depositCandidates, UnitGroupLoopCurrent());
                                }
                                else {
                                }
                            }
                            UnitGroupLoopEnd();
                            if ((UnitGroupCount(lv_depositCandidates, c_unitCountAlive) &gt; 0)) {
                                lv_index = 0;
                                auto1AF45301_ae = FixedToInt(lv_depositFindAmount);
                                auto1AF45301_ai = 1;
                                lv_b = 1;
                                for ( ; ( (auto1AF45301_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto1AF45301_ae) || (auto1AF45301_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto1AF45301_ae) ) ; lv_b += auto1AF45301_ai ) {
                                    lv_chosenStone = UnitGroupClosestToPoint(lv_depositCandidates, UnitGetPosition(gv_playerData[lv_a].lv_kobold));
                                    if (gf_UnitExists(lv_chosenStone)) {
                                        VisRevealArea(lv_a, RegionCircle(UnitGetPosition(lv_chosenStone), 2.0), 1.0, false);
                                        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_a), &quot;PingSimple&quot;, UnitGetPosition(lv_chosenStone), Color(75.29, 75.29, 75.29), 5.0, 270.0);
                                        PingSetScale(PingLastCreated(), 0.75);
                                        UnitGroupRemove(lv_depositCandidates, lv_chosenStone);
                                        UnitGroupAdd(gv_discoveredDepositsTeam[gf_GetTeamOfPlayer(lv_a)], lv_chosenStone);
                                        gv_playerData[lv_a].lv_gameStats.lv_nodesDiscovered += 1;
                                        lv_index += 1;
                                    }
                                    else {
                                    }
                                }
                                gf_Quicktag(gv_playerData[lv_a].lv_kobold, (StringExternal(&quot;Param/Value/FE21D66D&quot;) + (IntToText(lv_index) + StringExternal(&quot;Param/Value/232D2C63&quot;))), 2.0, 24);
                            }
                            else {
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="627B1177">
        <ScriptCode>
            void gf_DiscoverBushes () {
                int auto0E5B3F22_ae;
                int auto0E5B3F22_ai;
                int auto2889B3D5_ae;
                int auto2889B3D5_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                fixed lv_bushFindAmount;
                unitgroup lv_bushCandidates;
                unit lv_chosenBush;
                int lv_index;
                // Variable Initialization
                lv_bushCandidates = UnitGroupEmpty();
                // Implementation
                auto0E5B3F22_ae = gv_players;
                auto0E5B3F22_ai = 1;
                lv_a = 1;
                for ( ; ( (auto0E5B3F22_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto0E5B3F22_ae) || (auto0E5B3F22_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto0E5B3F22_ae) ) ; lv_a += auto0E5B3F22_ai ) {
                    if ((gv_playerData[lv_a].lv_alive == true)) {
                        lv_bushFindAmount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_a));
                        if ((FixedToInt(lv_bushFindAmount) &gt;= 1)) {
                            lv_bushCandidates = UnitGroup(&quot;BerryBush&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            UnitGroupAddUnitGroup(lv_bushCandidates, UnitGroup(&quot;CulinaryHerbBush&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                            UnitGroupLoopBegin(lv_bushCandidates);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                if ((UnitGroupHasUnit(gv_discoveredBushesTeam[gf_GetTeamOfPlayer(lv_a)], UnitGroupLoopCurrent()) == true)) {
                                    UnitGroupRemove(lv_bushCandidates, UnitGroupLoopCurrent());
                                }
                                else {
                                }
                            }
                            UnitGroupLoopEnd();
                            if ((UnitGroupCount(lv_bushCandidates, c_unitCountAlive) &gt; 0)) {
                                lv_index = 0;
                                auto2889B3D5_ae = FixedToInt(lv_bushFindAmount);
                                auto2889B3D5_ai = 1;
                                lv_b = 1;
                                for ( ; ( (auto2889B3D5_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto2889B3D5_ae) || (auto2889B3D5_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto2889B3D5_ae) ) ; lv_b += auto2889B3D5_ai ) {
                                    lv_chosenBush = UnitGroupClosestToPoint(lv_bushCandidates, UnitGetPosition(gv_playerData[lv_a].lv_kobold));
                                    if (gf_UnitExists(lv_chosenBush)) {
                                        VisRevealArea(lv_a, RegionCircle(UnitGetPosition(lv_chosenBush), 2.0), 1.0, false);
                                        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_a), &quot;PingSimple&quot;, UnitGetPosition(lv_chosenBush), Color(100.00, 100.00, 100.00), 5.0, 270.0);
                                        PingSetScale(PingLastCreated(), 0.75);
                                        UnitGroupRemove(lv_bushCandidates, lv_chosenBush);
                                        UnitGroupAdd(gv_discoveredBushesTeam[gf_GetTeamOfPlayer(lv_a)], lv_chosenBush);
                                        gv_playerData[lv_a].lv_gameStats.lv_nodesDiscovered += 1;
                                        lv_index += 1;
                                    }
                                    else {
                                    }
                                }
                                gf_Quicktag(gv_playerData[lv_a].lv_kobold, (StringExternal(&quot;Param/Value/EC7C8646&quot;) + (IntToText(lv_index) + StringExternal(&quot;Param/Value/F7AB3588&quot;))), 2.0, 24);
                            }
                            else {
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="71900E1D">
        <ScriptCode>
            void gf_SpawnBerries (unit lp_bush) {
                int auto25FAC5F8_ae;
                int auto25FAC5F8_ai;
                int auto96D7F99C_ae;
                int auto96D7F99C_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                auto25FAC5F8_ae = RandomInt(4, 8);
                auto25FAC5F8_ai = 1;
                lv_a = 1;
                for ( ; ( (auto25FAC5F8_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto25FAC5F8_ae) || (auto25FAC5F8_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto25FAC5F8_ae) ) ; lv_a += auto25FAC5F8_ai ) {
                    UnitCreate(1, &quot;Berry&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_bush), RandomFixed(0.3, 0.6), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                    UnitSetCustomValue(lp_bush, 0, (UnitGetCustomValue(lp_bush, 0) + 1.0));
                }
                auto96D7F99C_ae = RandomInt(2, 4);
                auto96D7F99C_ai = 1;
                lv_a = 1;
                for ( ; ( (auto96D7F99C_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto96D7F99C_ae) || (auto96D7F99C_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto96D7F99C_ae) ) ; lv_a += auto96D7F99C_ai ) {
                    UnitCreate(1, &quot;Berry&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_bush), RandomFixed(0.3, 0.6), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                    UnitSetHeight(UnitLastCreated(), 1.0, 0.0);
                    UnitSetCustomValue(lp_bush, 0, (UnitGetCustomValue(lp_bush, 0) + 1.0));
                }
                gf_UpdateResourceTooltip(lp_bush);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4E76F6E0">
        <ScriptCode>
            void gf_SpawnHerbs (unit lp_bush) {
                int autoEA66F7DC_ae;
                int autoEA66F7DC_ai;
                int auto14992F84_ae;
                int auto14992F84_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                autoEA66F7DC_ae = RandomInt(4, 7);
                autoEA66F7DC_ai = 1;
                lv_a = 1;
                for ( ; ( (autoEA66F7DC_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoEA66F7DC_ae) || (autoEA66F7DC_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoEA66F7DC_ae) ) ; lv_a += autoEA66F7DC_ai ) {
                    UnitCreate(1, &quot;CulinaryHerb&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_bush), RandomFixed(0.4, 0.5), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                    UnitSetHeight(UnitLastCreated(), RandomFixed(0.6, 0.8), 0.0);
                    UnitSetCustomValue(lp_bush, 0, (UnitGetCustomValue(lp_bush, 0) + 1.0));
                }
                auto14992F84_ae = RandomInt(2, 4);
                auto14992F84_ai = 1;
                lv_a = 1;
                for ( ; ( (auto14992F84_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto14992F84_ae) || (auto14992F84_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto14992F84_ae) ) ; lv_a += auto14992F84_ai ) {
                    UnitCreate(1, &quot;CulinaryHerb&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_bush), RandomFixed(0.3, 0.4), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                    UnitSetHeight(UnitLastCreated(), RandomFixed(1.4, 1.6), 0.0);
                    UnitSetCustomValue(lp_bush, 0, (UnitGetCustomValue(lp_bush, 0) + 1.0));
                }
                gf_UpdateResourceTooltip(lp_bush);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="33B83BD4">
        <ScriptCode>
            void gf_SpawnResources () {
                int auto3DBA009C_ae;
                int auto3DBA009C_ai;
                int autoF0BF3E91_ae;
                int autoF0BF3E91_ai;
                int auto6B12CC81_ae;
                int auto6B12CC81_ai;
                int auto0EEFC461_ae;
                int auto0EEFC461_ai;
                int auto9B4D1838_ae;
                int auto9B4D1838_ai;
                int auto75CBAC5C_ae;
                int auto75CBAC5C_ai;
                int auto7015A077_ae;
                int auto7015A077_ai;
                int autoB2C34D1F_ae;
                int autoB2C34D1F_ai;
                int auto408B1AA7_ae;
                int auto408B1AA7_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                int lv_spawnedCount;
                unitgroup lv_uG;
                // Variable Initialization
                lv_uG = UnitGroupEmpty();
                // Implementation
                if ((gv_tutorial == false) &amp;&amp; (gv_gameOver == false)) {
                    lv_a = (gv_treeQuota - UnitGroupCount(UnitGroup(&quot;MapleTree&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                    if ((lv_a &gt; 0)) {
                        UnitCreate(1, &quot;MapleTree&quot;, 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                        UnitCreateEffectUnit(UnitLastCreated(), &quot;GrowingTreeSet&quot;, UnitLastCreated());
                        lv_spawnedCount += 1;
                    }
                    else {
                    }
                    lv_a = (gv_birdQuota - UnitGroupCount(UnitGroup(&quot;Bird&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                    if ((lv_a &gt; 0)) {
                        auto3DBA009C_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                        auto3DBA009C_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto3DBA009C_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto3DBA009C_ae) || (auto3DBA009C_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto3DBA009C_ae) ) ; lv_b += auto3DBA009C_ai ) {
                            UnitCreate(1, &quot;Bird&quot;, 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                            lv_spawnedCount += 1;
                        }
                    }
                    else {
                    }
                    lv_a = (gv_sheepQuota - UnitGroupCount(gv_wildSheep, c_unitCountAlive));
                    if ((lv_a &gt; 0)) {
                        autoF0BF3E91_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                        autoF0BF3E91_ai = 1;
                        lv_b = 1;
                        for ( ; ( (autoF0BF3E91_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoF0BF3E91_ae) || (autoF0BF3E91_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoF0BF3E91_ae) ) ; lv_b += autoF0BF3E91_ai ) {
                            UnitCreate(1, &quot;Sheep&quot;, 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                            UnitGroupAdd(gv_wildSheep, UnitLastCreated());
                            lv_spawnedCount += 1;
                        }
                    }
                    else {
                    }
                    lv_a = (gv_blueJunglefowlQuota - UnitGroupCount(UnitGroup(&quot;Pheasant&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                    if ((lv_a &gt; 0)) {
                        auto6B12CC81_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                        auto6B12CC81_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto6B12CC81_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto6B12CC81_ae) || (auto6B12CC81_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto6B12CC81_ae) ) ; lv_b += auto6B12CC81_ai ) {
                            UnitCreate(1, &quot;Pheasant&quot;, 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                            lv_spawnedCount += 1;
                        }
                    }
                    else {
                    }
                    lv_a = (gv_wolfQuota - UnitGroupCount(UnitGroup(&quot;Dog&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                    if ((lv_a &gt; 0)) {
                        auto0EEFC461_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                        auto0EEFC461_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto0EEFC461_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto0EEFC461_ae) || (auto0EEFC461_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto0EEFC461_ae) ) ; lv_b += auto0EEFC461_ai ) {
                            UnitCreate(1, &quot;Dog&quot;, 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                            lv_spawnedCount += 1;
                        }
                    }
                    else {
                    }   
                    if (gv_questIndexActive != 10){
                        lv_a = (gv_bearQuota - UnitGroupCount(UnitGroup(&quot;Bear&quot;, 15, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                        if ((lv_a &gt; 0)) {
                            auto9B4D1838_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                            auto9B4D1838_ai = 1;
                            lv_b = 1;
                            for ( ; ( (auto9B4D1838_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto9B4D1838_ae) || (auto9B4D1838_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto9B4D1838_ae) ) ; lv_b += auto9B4D1838_ai ) {
                                UnitCreate(1, &quot;Bear&quot;, 0, 15, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                                lv_spawnedCount += 1;
                            }
                        }
                    }
                    if ((gv_dayNight == 2) &amp;&amp; (gv_questIndexActive != 7)) {
                        gv_direWolfQuota = (3 * UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive));
                        lv_a = (gv_direWolfQuota - UnitGroupCount(UnitGroup(&quot;Lyote&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                        if ((lv_a &gt; 0)) {
                            auto75CBAC5C_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                            auto75CBAC5C_ai = 1;
                            lv_b = 1;
                            for ( ; ( (auto75CBAC5C_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto75CBAC5C_ae) || (auto75CBAC5C_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto75CBAC5C_ae) ) ; lv_b += auto75CBAC5C_ai ) {
                                UnitCreate(1, &quot;Lyote&quot;, 0, 15, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                                lv_spawnedCount += 1;
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                    if ((gv_dayNight == 2) &amp;&amp; (gv_questIndexActive == 7) &amp;&amp; (gv_deadnightPhase == 3)) {
                        gv_ghoulExtra += 2;
                        gv_undeadQuota = (100 + (12 * UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive)));
                        gv_undeadQuota += gv_ghoulExtra;
                        lv_a = (gv_undeadQuota - UnitGroupCount(UnitGroup(&quot;Ghoul&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                        if ((lv_a &gt; 0)) {
                            auto7015A077_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 10);
                            auto7015A077_ai = 1;
                            lv_b = 1;
                            for ( ; ( (auto7015A077_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto7015A077_ae) || (auto7015A077_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto7015A077_ae) ) ; lv_b += auto7015A077_ai ) {
                                UnitCreate(1, &quot;Ghoul&quot;, 0, 15, gf_RandomPathablePoint(RegionEntireMap()), 270.0);
                                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(0.8, 1.2)));
                                lv_spawnedCount += 1;
                            }
                        }
                        else {
                        }
                        if ((UnitGroupCount(UnitGroup(&quot;Monstrosity&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt; UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive))) {
                            gf_SpawnMonstrosity();
                        }
                        else {
                        }
                    }
                    else {
                    }
                    if ((gv_questIndexActive == 10)) {
                        lv_a = (gv_frostBearQuota - UnitGroupCount(UnitGroup(&quot;FrostBear&quot;, 15, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                        if ((lv_a &gt; 0)) {
                            autoB2C34D1F_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 5);
                            autoB2C34D1F_ai = 1;
                            lv_b = 1;
                            for ( ; ( (autoB2C34D1F_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoB2C34D1F_ae) || (autoB2C34D1F_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoB2C34D1F_ae) ) ; lv_b += autoB2C34D1F_ai ) {
                                UnitCreate(1, &quot;FrostBear&quot;, 0, 15, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                                lv_spawnedCount += 1;
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                    lv_a = (gv_stagQuota - UnitGroupCount(UnitGroup(&quot;Stag&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                    if ((lv_a &gt; 0)) {
                        UnitCreate(1, &quot;Stag&quot;, 0, 0, gf_RandomPathablePointSansVision(RegionEntireMap()), libNtve_gf_RandomAngle());
                        lv_spawnedCount += 1;
                    }
                    else {
                    }
                    lv_a = (gv_nightcrawlerQuota - UnitGroupCount(UnitGroup(&quot;Nightcrawler&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                    if ((lv_a &gt; 0)) {
                        lv_uG = UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        auto408B1AA7_ae = libNtve_gf_ArithmeticIntClamp(lv_a, 1, 10);
                        auto408B1AA7_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto408B1AA7_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto408B1AA7_ae) || (auto408B1AA7_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto408B1AA7_ae) ) ; lv_b += auto408B1AA7_ai ) {
                            UnitCreate(1, &quot;Nightcrawler&quot;, 0, 0, UnitGetPosition(UnitGroupRandomUnit(lv_uG, c_unitCountAlive)), libNtve_gf_RandomAngle());
                            lv_spawnedCount += 1;
                        }
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E7C0CBC6">
        <ScriptCode>
            void gf_GatherStop (unit lp_unit) {
                // Implementation
                UnitBehaviorRemove(lp_unit, &quot;MiningStoneSmart&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;MiningGoldSmart&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;PickingBerriesSmart&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;PickingHerbsSmart&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;UnlockingChestSmart&quot;, 1);
                UnitSetCustomValue(lp_unit, 0, 0.0);
                UnitSetCustomValue(lp_unit, 1, 0.0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="34016CD2">
        <ScriptCode>
            int gf_GatherType (unit lp_unit) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((UnitHasBehavior(lp_unit, &quot;MiningStoneSmart&quot;) == true)) {
                    lv_value = 1;
                }
                else if ((UnitHasBehavior(lp_unit, &quot;MiningGoldSmart&quot;) == true)) {
                    lv_value = 2;
                }
                else if ((UnitHasBehavior(lp_unit, &quot;PickingBerriesSmart&quot;) == true)) {
                    lv_value = 3;
                }
                else if ((UnitHasBehavior(lp_unit, &quot;PickingHerbsSmart&quot;) == true)) {
                    lv_value = 4;
                }
                else if ((UnitHasBehavior(lp_unit, &quot;UnlockingChestSmart&quot;) == true)) {
                    lv_value = 5;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BF84C5E4">
        <ScriptCode>
            int gf_GatherCap (unit lp_unit, unit lp_node, int lp_type) {
                int auto19632423_val;
                // Variable Declarations
                int lv_i;
                fixed lv_gatheringSpeed;
                int lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_gatheringSpeed = 1.0;
                // Implementation
                if (gf_UnitExists(lp_node)) {
                    auto19632423_val = lp_type;
                    if (auto19632423_val == 1) {
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                            lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i)) * 0.01);
                            if ((UnitHasBehavior(lp_unit, &quot;SharpIronPickaxe&quot;) == true)) {
                                lv_gatheringSpeed += 0.15;
                            }
                            else {
                            }
                            if ((UnitHasBehavior(lp_unit, &quot;DullPickaxe&quot;) == true)) {
                                lv_gatheringSpeed += 0.05;
                            }
                            else {
                            }
                            if ((StringSub(gv_perks[lv_i], 3, 3) == &quot;1&quot;)) {
                                lv_gatheringSpeed += 0.05;
                            }
                            else {
                            }
                            if ((gv_playerData[lv_i].lv_isAI == true)) {
                                lv_gatheringSpeed += (gv_aIData[lv_i].lv_difficultyRating * 0.002);
                            }
                            else {
                            }
                            if ((UnitHasBehavior(lp_node, &quot;MineralTap&quot;) == true)) {
                                lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MineralTapStats&quot;, &quot;Amount&quot;, lv_i)) * 0.01);
                            }
                            else {
                            }
                        }
                        else {
                            lv_gatheringSpeed = gf_Nonkoboldgatherrate(lp_unit);
                        }
                        lv_value = FixedToInt(Round((48.0 * (1.0 / lv_gatheringSpeed))));
                    }
                    else if (auto19632423_val == 2) {
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                            lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i)) * 0.01);
                            if ((UnitHasBehavior(lp_unit, &quot;SharpIronPickaxe&quot;) == true)) {
                                lv_gatheringSpeed += 0.15;
                            }
                            else {
                            }
                            if ((UnitHasBehavior(lp_unit, &quot;DullPickaxe&quot;) == true)) {
                                lv_gatheringSpeed += 0.05;
                            }
                            else {
                            }
                            if ((StringSub(gv_perks[lv_i], 3, 3) == &quot;1&quot;)) {
                                lv_gatheringSpeed += 0.05;
                            }
                            else {
                            }
                            if ((gv_playerData[lv_i].lv_isAI == true)) {
                                lv_gatheringSpeed += (gv_aIData[lv_i].lv_difficultyRating * 0.002);
                            }
                            else {
                            }
                            if ((UnitHasBehavior(lp_node, &quot;MineralTap&quot;) == true)) {
                                lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MineralTapStats&quot;, &quot;Amount&quot;, lv_i)) * 0.01);
                            }
                            else {
                            }
                        }
                        else {
                            lv_gatheringSpeed = gf_Nonkoboldgatherrate(lp_unit);
                        }
                        lv_value = FixedToInt(Round((8.0 * (1.0 / lv_gatheringSpeed))));
                    }
                    else if (auto19632423_val == 3) {
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                            lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i)) * 0.01);
                            if ((StringSub(gv_perks[lv_i], 4, 4) == &quot;1&quot;)) {
                                lv_gatheringSpeed += 0.05;
                            }
                            else {
                            }
                            if ((gv_playerData[lv_i].lv_isAI == true)) {
                                lv_gatheringSpeed += (gv_aIData[lv_i].lv_difficultyRating * 0.002);
                            }
                            else {
                            }
                        }
                        else {
                            lv_gatheringSpeed = gf_Nonkoboldgatherrate(lp_unit);
                        }
                        lv_value = FixedToInt(Round((48.0 * (1.0 / lv_gatheringSpeed))));
                    }
                    else if (auto19632423_val == 4) {
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                            lv_gatheringSpeed += (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i)) * 0.01);
                            if ((StringSub(gv_perks[lv_i], 4, 4) == &quot;1&quot;)) {
                                lv_gatheringSpeed += 0.05;
                            }
                            else {
                            }
                            if ((gv_playerData[lv_i].lv_isAI == true)) {
                                lv_gatheringSpeed += (gv_aIData[lv_i].lv_difficultyRating * 0.002);
                            }
                            else {
                            }
                        }
                        else {
                            lv_gatheringSpeed = gf_Nonkoboldgatherrate(lp_unit);
                        }
                        lv_value = FixedToInt(Round((48.0 * (1.0 / lv_gatheringSpeed))));
                    }
                    else if (auto19632423_val == 5) {
                        lv_value = 48;
                    }
                    else {
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="59B6F8B5">
        <ScriptCode>
            void gf_GatherResult (unit lp_unit, unit lp_node, int lp_type) {
                int auto7E194AC8_val;
                // Variable Declarations
                int lv_i;
                int lv_a;
                string lv_type;
                point lv_p;
                int lv_cv;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGetCustomValue(lp_node, 0) &gt;= 1.0)) {
                    auto7E194AC8_val = lp_type;
                    if (auto7E194AC8_val == 1) {
                        lv_type = gf_ProduceStone(lp_unit);
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (libNtve_gf_RandomPercent() &lt; ((20.0 * BoolToInt((gv_skillMining[lv_i] &gt;= 15))) + (30.0 * BoolToInt(UnitHasBehavior(lp_unit, &quot;SharpIronPickaxe&quot;)))))) {
                        }
                        else {
                            UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
                        }
                        if ((UnitGetCustomValue(lp_node, 0) == 0.0)) {
                            gf_GatherStop(lp_unit);
                            UnitKill(lp_node);
                            gf_Quicktag(lp_unit, (StringExternal(&quot;Param/Value/FA47B320&quot;) + (UnitTypeGetName(lv_type) + StringExternal(&quot;Param/Value/738CF64F&quot;))), 3.0, 24);
                        }
                        else {
                            gf_UpdateResourceTooltip(lp_node);
                            gf_Quicktag(lp_unit, (StringExternal(&quot;Param/Value/EC5EEC60&quot;) + (UnitTypeGetName(lv_type) + StringExternal(&quot;Param/Value/8FF85F31&quot;))), 2.0, 24);
                        }
                        gf_AddExperience(lp_unit, 25.0);
                        gf_CreateItemForUnit(lp_unit, lv_type, 1);
                        gf_BoostAdrenalineRush(lv_i, UnitGetType(lp_unit), 5);
                    }
                    else if (auto7E194AC8_val == 2) {
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (libNtve_gf_RandomPercent() &lt; ((20.0 * BoolToInt((gv_skillMining[lv_i] &gt;= 15))) + (30.0 * BoolToInt(UnitHasBehavior(lp_unit, &quot;SharpIronPickaxe&quot;)))))) {
                        }
                        else {
                            UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
                        }
                        if ((UnitGetCustomValue(lp_node, 0) == 0.0)) {
                            gf_GatherStop(lp_unit);
                            lv_type = gf_ProduceGold(lp_unit, true);
                            UnitKill(lp_node);
                            if ((lv_type != null)) {
                                gf_CreateItemForUnit(lp_unit, lv_type, 1);
                                gf_Quicktag(lp_unit, (StringExternal(&quot;Param/Value/6CC4AA3D&quot;) + (UnitTypeGetName(lv_type) + StringExternal(&quot;Param/Value/6D9BF3AF&quot;))), 3.0, 24);
                            }
                            else {
                                gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/B6FA4BBD&quot;), 3.0, 24);
                            }
                        }
                        else {
                            lv_type = gf_ProduceGold(lp_unit, false);
                            if ((lv_type != null)) {
                                gf_CreateItemForUnit(lp_unit, lv_type, 1);
                                gf_Quicktag(lp_unit, (StringExternal(&quot;Param/Value/5E058594&quot;) + (UnitTypeGetName(lv_type) + StringExternal(&quot;Param/Value/66ADDF30&quot;))), 2.0, 24);
                                gf_BoostAdrenalineRush(lv_i, UnitGetType(lp_unit), 30);
                            }
                            else {
                            }
                            gf_UpdateResourceTooltip(lp_node);
                        }
                        gv_playerData[lv_i].lv_gameStats.lv_goldEarned += 1;
                        PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperAdd, 1);
                        gf_AddExperience(lp_unit, 7.5);
                        gf_BoostAdrenalineRush(lv_i, UnitGetType(lp_unit), 1);
                    }
                    else if (auto7E194AC8_val == 3) {
                        lv_type = gf_ProduceBerries(lp_unit);
                        gv_playerData[lv_i].lv_gameStats.lv_berriesPicked += 1;
                        UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
                        UnitRemove(UnitGroupRandomUnit(UnitGroup(&quot;Berry&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_node), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                        if ((UnitGetCustomValue(lp_node, 0) == 0.0)) {
                            gf_GatherStop(lp_unit);
                            UnitKill(lp_node);
                            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;Signal WorkComplete&quot;);
                            TextExpressionSetToken(&quot;Param/Expression/248AED3D&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/1B2BE344&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/248AED3D&quot;, &quot;B&quot;, UnitTypeGetName(lv_type));
                            TextExpressionSetToken(&quot;Param/Expression/248AED3D&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/C11345F1&quot;));
                            gf_Quicktag(lp_unit, TextExpressionAssemble(&quot;Param/Expression/248AED3D&quot;), 3.0, 24);
                        }
                        else {
                            gf_UpdateResourceTooltip(lp_node);
                            TextExpressionSetToken(&quot;Param/Expression/6699FC93&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/61070284&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/6699FC93&quot;, &quot;B&quot;, UnitTypeGetName(lv_type));
                            TextExpressionSetToken(&quot;Param/Expression/6699FC93&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/3E09BC74&quot;));
                            gf_Quicktag(lp_unit, TextExpressionAssemble(&quot;Param/Expression/6699FC93&quot;), 2.0, 24);
                            if ((gv_skillForaging[lv_i] &gt;= 15)) {
                                UnitSetCustomValue(lp_node, 1, (UnitGetCustomValue(lp_node, 1) + 1.0));
                                UnitBehaviorAdd(lp_node, &quot;BushRegrowth&quot;, lp_node, 1);
                            }
                            else {
                            }
                        }
                        SoundPlayOnUnit(SoundLink(&quot;ForageSound&quot;, -1), PlayerGroupAll(), lp_node, 0.0, 100.0, 0.0);
                        gf_AddExperience(lp_unit, 25.0);
                        gf_CreateItemForUnit(lp_unit, lv_type, 1);
                    }
                    else if (auto7E194AC8_val == 4) {
                        lv_type = gf_ProduceHerb(lp_unit);
                        gv_playerData[lv_i].lv_gameStats.lv_berriesPicked += 1;
                        UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
                        UnitRemove(UnitGroupRandomUnit(UnitGroup(&quot;CulinaryHerb&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_node), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                        if ((UnitGetCustomValue(lp_node, 0) == 0.0)) {
                            gf_GatherStop(lp_unit);
                            UnitKill(lp_node);
                            gf_Quicktag(lp_unit, (StringExternal(&quot;Param/Value/7A70B351&quot;) + (UnitTypeGetName(lv_type) + StringExternal(&quot;Param/Value/31B86819&quot;))), 2.0, 24);
                            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;Signal WorkComplete&quot;);
                        }
                        else {
                            if ((gv_skillForaging[lv_i] &gt;= 15)) {
                                UnitSetCustomValue(lp_node, 1, (UnitGetCustomValue(lp_node, 1) + 1.0));
                                UnitBehaviorAdd(lp_node, &quot;BushRegrowth&quot;, lp_node, 1);
                            }
                            else {
                            }
                            gf_Quicktag(lp_unit, (StringExternal(&quot;Param/Value/D76C466B&quot;) + (UnitTypeGetName(lv_type) + StringExternal(&quot;Param/Value/C0CBE479&quot;))), 2.0, 24);
                            gf_UpdateResourceTooltip(lp_node);
                        }
                        SoundPlayOnUnit(SoundLink(&quot;ForageSound&quot;, -1), PlayerGroupAll(), lp_node, 0.0, 100.0, 0.0);
                        gf_AddExperience(lp_unit, 25.0);
                        gf_CreateItemForUnit(lp_unit, lv_type, 1);
                    }
                    else if (auto7E194AC8_val == 5) {
                        gf_GatherStop(lp_unit);
                        UnitGroupRemove(gv_treasureChests, lp_node);
                        UnitSetCustomValue(lp_node, 0, (UnitGetCustomValue(lp_node, 0) - 1.0));
                        gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/94CEE36D&quot;), 2.0, 24);
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;Signal WorkComplete&quot;);
                        lv_p = UnitGetPosition(lp_node);
                        lv_cv = FixedToInt(UnitGetCustomValue(lp_node, 1));
                        if ((UnitHasBehavior(lp_node, &quot;GoblinLoot&quot;) == true)) {
                            UnitKill(lp_node);
                            PingDestroy(gv_treasurePing[lv_cv]);
                            gf_GladiatorsStrength(lv_i);
                            gf_TreasureSpawnLoot(lv_p);
                            gf_TreasureEndPrem();
                        }
                        else if ((UnitHasBehavior(lp_node, &quot;KingsReward&quot;) == true)) {
                            UnitKill(lp_node);
                            gf_ExileLoot(lv_p);
                        }
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="82EB5D2E">
        <ScriptCode>
            void gf_GatherAnimation (unit lp_unit, int lp_cV, int lp_type, int lp_cap) {
                string auto454C32CF_val;
                int auto06888FD0_val;
                // Variable Declarations
                string lv_miningAnimation;
                string lv_gatherAnimation;
                const fixed lv_animationSpeed = 1.0;
                // Variable Initialization
                lv_miningAnimation = &quot;&quot;;
                lv_gatherAnimation = &quot;&quot;;
                // Implementation
                if ((UnitGetCustomValue(lp_unit, 1) == 0)) {
                    auto454C32CF_val = UnitGetType(lp_unit);
                    if (auto454C32CF_val == &quot;Kobold&quot;) {
                        lv_miningAnimation = &quot;Work&quot;;
                        lv_gatherAnimation = &quot;Spell&quot;;
                    }
                    else if (auto454C32CF_val == &quot;MurlocSlave&quot;) {
                        lv_miningAnimation = &quot;Attack&quot;;
                        lv_gatherAnimation = &quot;Spell&quot;;
                    }
                    else {
                        lv_miningAnimation = &quot;Attack&quot;;
                        lv_gatherAnimation = &quot;Attack&quot;;
                    }
                    auto06888FD0_val = lp_type;
                    if (auto06888FD0_val == 1) {
                        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(&quot;Spell&quot;, -1.0));
                        libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay(&quot;Mining&quot;, lv_miningAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
                        SoundPlayOnUnit(SoundLink(&quot;MiningSound&quot;, -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
                    }
                    else if (auto06888FD0_val == 2) {
                        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(&quot;Spell&quot;, -1.0));
                        libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay(&quot;Mining&quot;, lv_miningAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
                        SoundPlayOnUnit(SoundLink(&quot;MiningSound&quot;, -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
                    }
                    else if (auto06888FD0_val == 3) {
                        libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay(&quot;Picking&quot;, lv_gatherAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
                    }
                    else if (auto06888FD0_val == 4) {
                        libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay(&quot;Picking&quot;, lv_gatherAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
                    }
                    else if (auto06888FD0_val == 5) {
                        libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgAnimPlay(&quot;Picking&quot;, lv_gatherAnimation, 0, -1.0, -1.0, lv_animationSpeed, c_animTimeVariantAsDuration));
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="73E87076">
        <ScriptCode>
            fixed gf_Nonkoboldgatherrate (unit lp_unit) {
                // Variable Declarations
                fixed lv_value;
                // Variable Initialization
                lv_value = 0.5;
                // Implementation
                if ((UnitHasBehavior(lp_unit, &quot;MurlocEquipment&quot;) == true)) {
                    lv_value += 0.1;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E357317F">
        <ScriptCode>
            string gf_ProduceStone (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                fixed lv_shadowstone = 10.0;
                fixed lv_ironOre = 20.0;
                fixed lv_bonusFactor;
                bool lv_guaranteedStone;
                string lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_bonusFactor = 1.0;
                // Implementation
                if ((gv_playerData[lv_i].lv_isAI == true) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) == 0)) {
                    lv_guaranteedStone = true;
                }
                else {
                }
                if ((gv_playerData[lv_i].lv_isAI == true) &amp;&amp; (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) &amp;&amp; (gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_aIWatchTowerBuilder != lv_i)) {
                    lv_bonusFactor += 0.1;
                }
                else {
                }
                if (gv_dayNight == 2){
                    lv_shadowstone = 17.;
                    lv_ironOre = 30.;
                }
                if ((lv_guaranteedStone == false) &amp;&amp; ((lv_shadowstone * lv_bonusFactor) &gt;= libNtve_gf_RandomPercent())) {
                    lv_value = &quot;Shadowstone&quot;;
                }
                else if ((lv_guaranteedStone == false) &amp;&amp; ((lv_ironOre * lv_bonusFactor) &gt;= libNtve_gf_RandomPercent())) {
                    lv_value = &quot;IronOre&quot;;
                }
                else if (true) {
                    lv_value = &quot;Stone&quot;;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4E854D64">
        <ScriptCode>
            string gf_ProduceGold (unit lp_unit, bool lp_depleted) {
                // Variable Declarations
                const fixed lv_radiantGem = 2.25;
                fixed lv_bonusFactor;
                string lv_value;
                // Variable Initialization
                lv_bonusFactor = 1.0;
                // Implementation
                if ((((lv_radiantGem * lv_bonusFactor) &gt;= libNtve_gf_RandomPercent()) || ((lp_depleted == true) &amp;&amp; (StringSub(gv_perks[UnitGetOwner(lp_unit)], 24, 24) == &quot;1&quot;)))) {
                    lv_value = &quot;RadiantGem&quot;;
                }
                else if (true) {
                    lv_value = null;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E2BBDE05">
        <ScriptCode>
            string gf_ProduceBerries (unit lp_unit) {
                // Variable Declarations
                fixed lv_sageberry = 33.0;
                fixed lv_bonusFactor;
                string lv_value;
                // Variable Initialization
                lv_bonusFactor = 1.0;
                // Implementation
                if (gv_dayNight == 2){
                    lv_sageberry = 66.;
                }
                if (((lv_sageberry * lv_bonusFactor) &gt;= libNtve_gf_RandomPercent())) {
                    lv_value = &quot;Sageberry&quot;;
                }
                else if (true) {
                    lv_value = &quot;HandfulofBerries&quot;;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B7653AAF">
        <ScriptCode>
            string gf_ProduceHerb (unit lp_unit) {
                // Variable Declarations
                fixed lv_sunflower = 33.0;
                fixed lv_bonusFactor;
                string lv_value;
                // Variable Initialization
                lv_bonusFactor = 1.0;
                if (gv_dayNight == 2){
                    lv_sunflower = 66;
                }
                // Implementation
                if (((lv_sunflower * lv_bonusFactor) &gt;= libNtve_gf_RandomPercent())) {
                    lv_value = &quot;LambentSunflower&quot;;
                }
                else if (true) {
                    lv_value = &quot;SpicyHerbs&quot;;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="09AF6F38">
        <Item Type="CustomScript" Id="438FB625"/>
        <Item Type="CustomScript" Id="FED8BC63"/>
        <Item Type="CustomScript" Id="75BB9161"/>
        <Item Type="CustomScript" Id="B1C3F729"/>
        <Item Type="CustomScript" Id="470C259D"/>
        <Item Type="CustomScript" Id="4A04B932"/>
        <Item Type="CustomScript" Id="16F7A384"/>
        <Item Type="CustomScript" Id="8E9473C7"/>
        <Item Type="CustomScript" Id="4C894BAC"/>
        <Item Type="CustomScript" Id="9795CE5E"/>
        <Item Type="CustomScript" Id="EEF1D9F7"/>
        <Item Type="CustomScript" Id="4FB15A22"/>
        <Item Type="CustomScript" Id="109FFADB"/>
        <Item Type="CustomScript" Id="FF9B055F"/>
        <Item Type="CustomScript" Id="B8F42A78"/>
        <Item Type="CustomScript" Id="BC8432B7"/>
        <Item Type="CustomScript" Id="B60E8411"/>
        <Item Type="CustomScript" Id="B77EC63B"/>
        <Item Type="CustomScript" Id="3D24E437"/>
        <Item Type="CustomScript" Id="BCAAF1B7"/>
    </Element>
    <Element Type="CustomScript" Id="438FB625">
        <ScriptCode>
            void gf_UpdateBuildingStats (int lp_player) {
                // Variable Declarations
                fixed lv_lifeFlatModifier;
                fixed lv_lifePercentageModifier;
                fixed lv_armorFlatModifier;
                fixed lv_armorPercentageModifier;
                fixed lv_artisanLifeBonus;
                fixed lv_artisanArmorBonus;
                fixed lv_cookingCampfireBonus;
                fixed lv_aDTLifeBonus;
                // Variable Initialization
                lv_lifePercentageModifier = 1.0;
                lv_armorPercentageModifier = 1.0;
                lv_artisanLifeBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                lv_artisanArmorBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                lv_cookingCampfireBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Mechanical]&quot;, lp_player));
                lv_aDTLifeBonus = (50.0 * IntToFixed(BoolToInt((gv_skillArtisanship[lp_player] &gt;= 20))));
                // Implementation
                lv_lifePercentageModifier += (lv_artisanLifeBonus / 100.0);
                lv_armorFlatModifier += lv_artisanArmorBonus;
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Tent&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((150.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Tent&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((150.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Tent&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Tavern&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((250.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Tavern&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((250.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Tavern&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((1.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;StorageOutpost&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((350.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;StorageOutpost&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((350.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;StorageOutpost&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((2.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;SpikeTrap&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((10.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;SpikeTrap&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((10.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;SpikeTrap&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((5.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Smithy&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Smithy&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Smithy&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((1.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Farm&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Farm&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Farm&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((1.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;CampfireLit&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((200.0 + (lv_lifeFlatModifier + lv_cookingCampfireBonus)) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;CampfireLit&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((200.0 + (lv_lifeFlatModifier + lv_cookingCampfireBonus)) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;CampfireLit&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Campfire&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Campfire&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((200.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Campfire&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Workbench&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((100.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Workbench&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((100.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Workbench&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;HuntersLodge&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((300.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;HuntersLodge&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((300.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;HuntersLodge&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((1.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Palisade&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Palisade&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Palisade&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((10.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;PalisadeGateClosed&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;PalisadeGateClosed&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;PalisadeGateClosed&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((10.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;PalisadeGateOpen&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;PalisadeGateOpen&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;PalisadeGateOpen&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((10.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;LorenorStatue&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((1000.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;LorenorStatue&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((1000.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;LorenorStatue&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((5.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;AutomatedDefenseTurret&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((((250.0 + lv_aDTLifeBonus) + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;AutomatedDefenseTurret&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((((250.0 + lv_aDTLifeBonus) + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;AutomatedDefenseTurret&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((((5000.0 + (2000.0 * BoolToInt(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_watchTowerStructuralReinforcement))) + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((((5000.0 + (2000.0 * BoolToInt(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_watchTowerStructuralReinforcement))) + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((((5.0 + (5.0 * BoolToInt(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_watchTowerStructuralReinforcement))) + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString((0.0 + (2.0 * BoolToInt(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_watchTowerStructuralReinforcement))), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Trebuchet&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Trebuchet&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((400.0 + lv_lifeFlatModifier) * lv_lifePercentageModifier), 0));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Trebuchet&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((0.0 + lv_armorFlatModifier) * lv_armorPercentageModifier), 0));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FED8BC63">
        <ScriptCode>
            void gf_BuildTent (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_wool;
                unitgroup lv_leather;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_wool = UnitGroupFilter(&quot;Wool&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_leather = UnitGroupFilter(&quot;Leather&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                if ((UnitGroupCount(lv_wool, c_unitCountAlive) &gt;= 1)) {
                    UnitGroupAddUnitGroup(lv_sum, lv_wool);
                }
                else {
                    UnitGroupAddUnitGroup(lv_sum, lv_leather);
                }
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 50.0);
                    TriggerExecute(gt_TutorialPart4, true, false);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="75BB9161">
        <ScriptCode>
            void gf_BuildCampfire (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_stone;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_stone = UnitGroupFilter(&quot;Stone&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_stone);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 50.0);
                    TriggerExecute(gt_TutorialPart2, true, false);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B1C3F729">
        <ScriptCode>
            void gf_BuildFarm (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_stone;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_stone = UnitGroupFilter(&quot;Stone&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_stone);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 50.0);
                    TriggerExecute(gt_TutorialPart7, true, false);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="470C259D">
        <ScriptCode>
            void gf_BuildWorkbench (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_leather;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_leather = UnitGroupFilter(&quot;Leather&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_leather);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 2)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 50.0);
                    TriggerExecute(gt_TutorialPart10, true, false);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4A04B932">
        <ScriptCode>
            void gf_BuildSmithy (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_leather;
                unitgroup lv_stone;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_leather = UnitGroupFilter(&quot;Leather&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_stone = UnitGroupFilter(&quot;Stone&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_leather);
                UnitGroupAddUnitGroup(lv_sum, lv_stone);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 80.0);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="16F7A384">
        <ScriptCode>
            void gf_BuildTavern (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                int lv_lumberCost;
                unitgroup lv_lumber;
                unitgroup lv_stone;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumberCost = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Artisan25LumberCost&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), lv_lumberCost);
                lv_stone = UnitGroupFilter(&quot;Stone&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_stone);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == (lv_lumberCost + 2))) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 100.0);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8E9473C7">
        <ScriptCode>
            void gf_BuildOutpost (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                int lv_lumberCost;
                unitgroup lv_lumber;
                unitgroup lv_wool;
                unitgroup lv_leather;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumberCost = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Artisan25LumberCost&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), lv_lumberCost);
                lv_wool = UnitGroupFilter(&quot;Wool&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2);
                lv_leather = UnitGroupFilter(&quot;Leather&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                if ((UnitGroupCount(lv_wool, c_unitCountAlive) == 2)) {
                    UnitGroupAddUnitGroup(lv_sum, lv_wool);
                }
                else if ((UnitGroupCount(lv_leather, c_unitCountAlive) == 2)) {
                    UnitGroupAddUnitGroup(lv_sum, lv_leather);
                }
                else if ((UnitGroupCount(lv_leather, c_unitCountAlive) == 1) &amp;&amp; (UnitGroupCount(lv_wool, c_unitCountAlive) == 1)) {
                    UnitGroupAddUnitGroup(lv_sum, lv_wool);
                    UnitGroupAddUnitGroup(lv_sum, lv_leather);
                }
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == (lv_lumberCost + 2))) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 120.0);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4C894BAC">
        <ScriptCode>
            void gf_BuildSpikeTrap (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_ironOre;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_ironOre = UnitGroupFilter(&quot;IronOre&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_ironOre);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 1)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 40.0);
                    UnitSetCustomValue(lp_building, 0, 1.0);
                    if ((UnitHasBehavior(lv_unit, &quot;KoboldBotNormal&quot;) == true) &amp;&amp; (UnitHasBehavior(lv_unit, &quot;SkipChatTraps180&quot;) == false)) {
                        TextExpressionSetToken(&quot;Param/Expression/A1225262&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                        TextExpressionSetToken(&quot;Param/Expression/A1225262&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/9A7FDCCE&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/54110DCA&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/952DCC6E&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/54110DCA&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/A1225262&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken(&quot;Param/Expression/54110DCA&quot;, &quot;C&quot;, StringToText(gv_aITrapsString[RandomInt(1, gv_aITrapsStringAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/54110DCA&quot;));
                        UnitBehaviorAdd(lv_unit, &quot;SkipChatTraps180&quot;, lv_unit, 1);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9795CE5E">
        <ScriptCode>
            void gf_BuildLodge (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                int lv_lumberCost;
                unitgroup lv_lumber;
                unitgroup lv_leather;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumberCost = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Artisan25LumberCost&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i));
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), lv_lumberCost);
                lv_leather = UnitGroupFilter(&quot;Leather&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_leather);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == (lv_lumberCost + 3))) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_StaminaOnCraft(lv_unit);
                    gf_AddExperience(lv_unit, 120.0);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EEF1D9F7">
        <ScriptCode>
            void gf_BuildMonument (unit lp_building) {
                int auto59DA779E_ae;
                int auto59DA779E_ai;
                // Variable Declarations
                int lv_a;
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_stone;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 9);
                lv_stone = UnitGroupFilter(&quot;Stone&quot;, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 9);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_stone);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 18)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(lp_building), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_building), false))) + (StringExternal(&quot;Param/Value/558A4D02&quot;) + (gf_GetTribeTextOfPlayer(UnitGetOwner(lp_building)) + StringExternal(&quot;Param/Value/C6CCBC80&quot;)))));
                    SoundPlay(SoundLink(&quot;UI_MissionFailed&quot;, -1), PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_building)), 100.0, 0.0);
                    SoundPlay(SoundLink(&quot;UI_LoadingFinished&quot;, -1), gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_members, 100.0, 0.0);
                    PlayerGroupLoopBegin(PlayerGroupAll());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        libNtve_gf_ShareVisionofUnit(lp_building, true, PlayerGroupLoopCurrent());
                    }
                    PlayerGroupLoopEnd();
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingSimple&quot;, UnitGetPosition(lp_building), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 10.0, 270.0);
                    gf_Quicktag(lv_unit, StringExternal(&quot;Param/Value/30FCC1CC&quot;), 2.0, 24);
                    gf_Quicktag(lp_building, StringExternal(&quot;Param/Value/344E867C&quot;), 3.0, 24);
                    auto59DA779E_ae = gv_activeTeams;
                    auto59DA779E_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto59DA779E_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto59DA779E_ae) || (auto59DA779E_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto59DA779E_ae) ) ; lv_a += auto59DA779E_ai ) {
                        if ((lv_a != gf_GetTeamOfPlayer(lv_i))) {
                            gv_aIMonumentBuilder[lv_a] = 0;
                        }
                        else {
                        }
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4FB15A22">
        <ScriptCode>
            void gf_BuildPalisade (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_lumberParts;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_lumberParts = UnitGroupFilter(&quot;LumberParts&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_sum = UnitGroupEmpty();
                // Implementation
                if ((UnitGroupCount(lv_lumberParts, c_unitCountAlive) == 1)) {
                    UnitGroupAddUnitGroup(lv_sum, lv_lumberParts);
                }
                else if ((UnitGroupCount(lv_lumber, c_unitCountAlive) == 1)) {
                    UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                }
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 1)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Lumber&quot;)) {
                            gf_CreateItemForUnit(lv_unit, &quot;LumberParts&quot;, 1);
                        }
                        else {
                        }
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Quicktag(lv_unit, StringExternal(&quot;Param/Value/90F0D84A&quot;), 2.0, 24);
                    libHots_gf_StorePointForUnit(lp_building, 1, UnitGetPosition(gv_playerData[lv_i].lv_kobold));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="109FFADB">
        <ScriptCode>
            void gf_BuildADT (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_stone;
                unitgroup lv_ironOre;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_stone = UnitGroupFilter(&quot;Stone&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_ironOre = UnitGroupFilter(&quot;IronOre&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_stone);
                UnitGroupAddUnitGroup(lv_sum, lv_ironOre);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Quicktag(lv_unit, StringExternal(&quot;Param/Value/E4ECA6DF&quot;), 2.0, 24);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FF9B055F">
        <ScriptCode>
            void gf_BuildWatchTower (unit lp_building) {
                // Variable Declarations
                int lv_i;
                unit lv_unit;
                unitgroup lv_lumber;
                unitgroup lv_stone;
                unitgroup lv_sum;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_building);
                lv_unit = gv_playerData[lv_i].lv_kobold;
                lv_lumber = UnitGroupFilter(&quot;Lumber&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 10);
                lv_stone = UnitGroupFilter(&quot;Stone&quot;, c_playerAny, UnitInventoryGroup(lv_unit), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 6);
                lv_sum = UnitGroupEmpty();
                // Implementation
                UnitGroupAddUnitGroup(lv_sum, lv_lumber);
                UnitGroupAddUnitGroup(lv_sum, lv_stone);
                if ((UnitGroupCount(lv_sum, c_unitCountAlive) == 16)) {
                    UnitGroupLoopBegin(lv_sum);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_Quicktag(lv_unit, StringExternal(&quot;Param/Value/868CE6A4&quot;), 2.0, 24);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B8F42A78">
        <ScriptCode>
            fixed gf_LeastConstructionProgress (unitgroup lp_buildings, fixed lp_buildTime) {
                // Variable Declarations
                fixed lv_value;
                fixed lv_percentComplete;
                // Variable Initialization
                lv_percentComplete = 100.0;
                // Implementation
                UnitGroupLoopBegin(lp_buildings);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetProgressComplete(UnitGroupLoopCurrent(), 1) &lt; lv_percentComplete)) {
                        lv_percentComplete = UnitGetProgressComplete(UnitGroupLoopCurrent(), 1);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                lv_value = (lp_buildTime * (1.0 - (lv_percentComplete * 0.01)));
                lv_value += 1.0;
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BC8432B7">
        <ScriptCode>
            text gf_SpikeTrapSuffix (int lp_charges) {
                int auto2C0435F4_val;
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                // Implementation
                lv_value = (lv_value + StringExternal(&quot;Param/Value/D3E6B28D&quot;));
                auto2C0435F4_val = lp_charges;
                if (auto2C0435F4_val == 0) {
                    lv_value = (lv_value + StringExternal(&quot;Param/Value/160B7278&quot;));
                }
                else if (auto2C0435F4_val == 1) {
                    lv_value = (lv_value + IntToText(lp_charges));
                    lv_value = (lv_value + StringExternal(&quot;Param/Value/AFAF3E92&quot;));
                }
                else {
                    lv_value = (lv_value + IntToText(lp_charges));
                    lv_value = (lv_value + StringExternal(&quot;Param/Value/8780EBED&quot;));
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B60E8411">
        <ScriptCode>
            void gf_RefreshCampfire (unit lp_unit, int lp_player, bool lp_expert) {
                // Implementation
                if (gf_UnitExists(gv_playerData[lp_player].lv_kobold)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_playerData[lp_player].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((lp_expert == true)) {
                            UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
                            UnitAbilityEnable(lp_unit, &quot;LightTorch&quot;, true);
                            SoundPlayOnUnit(SoundLink(&quot;CampfireRefresh&quot;, -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
                        }
                        else {
                            UnitAbilityReset(lp_unit, AbilityCommand(&quot;RefreshCampfireExpert&quot;, 0), c_spendLocationAll);
                            if ((UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                                gf_DropandRemove(UnitGroupUnit(gv_playerData[lp_player].lv_resources.lv_lumber, 1));
                                gf_AddExperience(gv_playerData[lp_player].lv_kobold, 20.0);
                                UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
                                UnitAbilityEnable(lp_unit, &quot;LightTorch&quot;, true);
                                SoundPlayOnUnit(SoundLink(&quot;CampfireRefresh&quot;, -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                        UnitAbilityReset(lp_unit, AbilityCommand(&quot;RefreshCampfireExpert&quot;, 0), c_spendLocationAll);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, gv_errorMessage.lv_dead);
                    UnitAbilityReset(lp_unit, AbilityCommand(&quot;RefreshCampfireExpert&quot;, 0), c_spendLocationAll);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B77EC63B">
        <ScriptCode>
            void gf_ADTUpdateAmmo (unit lp_unit) {
                // Implementation
                TextExpressionSetToken(&quot;Param/Expression/97B3D951&quot;, &quot;D&quot;, gf_GetPlayerName(UnitGetOwner(lp_unit), 0));
                TextExpressionSetToken(&quot;Param/Expression/97B3D951&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/1F3683CC&quot;));
                TextExpressionSetToken(&quot;Param/Expression/97B3D951&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/1E90D0A4&quot;));
                TextExpressionSetToken(&quot;Param/Expression/97B3D951&quot;, &quot;B&quot;, IntToText(FixedToInt(UnitGetCustomValue(lp_unit, 1))));
                TextExpressionSetToken(&quot;Param/Expression/97B3D951&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/227A6C6B&quot;));
                UnitSetInfoText(lp_unit, StringExternal(&quot;Param/Value/52DFAC54&quot;), TextExpressionAssemble(&quot;Param/Expression/97B3D951&quot;), StringExternal(&quot;Param/Value/E7060DF6&quot;));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3D24E437">
        <ScriptCode>
            void gf_PalisadeMutability (unit lp_unit, unitgroup lp_exclude, int lp_layer) {
                int autoE4AC679B_ae;
                int autoE4AC679B_ai;
                int auto777AA9C7_ae;
                int auto777AA9C7_ai;
                // Variable Declarations
                int lv_a;
                fixed lv_x;
                fixed lv_y;
                unit[9] lv_neighbour;
                int lv_totalneighbours;
                int lv_adjacentPalisades;
                int lv_adjacentGates;
                int lv_diagonalPalisades;
                int lv_diagonalGates;
                unitgroup lv_exclude;
                fixed lv_agr;
                // Variable Initialization
                lv_x = PointGetX(UnitGetPosition(lp_unit));
                lv_y = PointGetY(UnitGetPosition(lp_unit));
                lv_exclude = lp_exclude;
                // Implementation
                lv_neighbour[1] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Palisade&quot;, &quot;PalisadeGateClosed&quot;, &quot;PalisadeGateOpen&quot;, UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), -1.0, -1.0), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                lv_neighbour[2] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Palisade&quot;, &quot;PalisadeGateClosed&quot;, &quot;PalisadeGateOpen&quot;, UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), -1.0, 0.0), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                lv_neighbour[3] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Palisade&quot;, &quot;PalisadeGateClosed&quot;, &quot;PalisadeGateOpen&quot;, UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), -1.0, 1.0), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                lv_neighbour[4] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Palisade&quot;, &quot;PalisadeGateClosed&quot;, &quot;PalisadeGateOpen&quot;, UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 0.0, 1.0), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                lv_neighbour[5] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Palisade&quot;, &quot;PalisadeGateClosed&quot;, &quot;PalisadeGateOpen&quot;, UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 1.0, 1.0), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                lv_neighbour[6] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Palisade&quot;, &quot;PalisadeGateClosed&quot;, &quot;PalisadeGateOpen&quot;, UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 1.0, 0.0), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                lv_neighbour[7] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Palisade&quot;, &quot;PalisadeGateClosed&quot;, &quot;PalisadeGateOpen&quot;, UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 1.0, -1.0), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                lv_neighbour[8] = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Palisade&quot;, &quot;PalisadeGateClosed&quot;, &quot;PalisadeGateOpen&quot;, UnitGetOwner(lp_unit), c_unitAllianceAny, RegionCircle(PointWithOffset(UnitGetPosition(lp_unit), 0.0, -1.0), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                autoE4AC679B_ae = 8;
                autoE4AC679B_ai = 1;
                lv_a = 1;
                for ( ; ( (autoE4AC679B_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE4AC679B_ae) || (autoE4AC679B_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE4AC679B_ae) ) ; lv_a += autoE4AC679B_ai ) {
                    if ((lv_neighbour[lv_a] != null)) {
                        lv_totalneighbours += 1;
                        if ((ModI(lv_a, 2) == 0)) {
                            lv_adjacentPalisades += 1;
                            if (((UnitGetType(lv_neighbour[lv_a]) == &quot;PalisadeGateClosed&quot;) || (UnitGetType(lv_neighbour[lv_a]) == &quot;PalisadeGateOpen&quot;))) {
                                lv_adjacentGates += 1;
                            }
                            else {
                            }
                        }
                        else {
                            lv_diagonalPalisades += 1;
                            if (((UnitGetType(lv_neighbour[lv_a]) == &quot;PalisadeGateClosed&quot;) || (UnitGetType(lv_neighbour[lv_a]) == &quot;PalisadeGateOpen&quot;))) {
                                lv_diagonalGates += 1;
                            }
                            else {
                            }
                        }
                    }
                    else {
                    }
                }
                if ((lv_adjacentGates == 0) &amp;&amp; (lv_neighbour[2] != null) &amp;&amp; (lv_neighbour[4] == null) &amp;&amp; (lv_neighbour[6] != null) &amp;&amp; (lv_neighbour[8] == null)) {
                    if ((UnitGetCustomValue(lp_unit, 0) == 0.0)) {
                        UnitSetFacing(lp_unit, 90.0, 0.0);
                    }
                    else {
                        UnitSetFacing(lp_unit, 270.0, 0.0);
                    }
                    if ((UnitGetType(lp_unit) == &quot;Palisade&quot;)) {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale 1.000000,1.500000,1.000000&quot;);
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;ModelSwap PalisadeLength&quot;);
                        UnitBehaviorAdd(lp_unit, &quot;CanBecomeGate&quot;, lp_unit, 1);
                    }
                    else {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale&quot;);
                    }
                    UnitBehaviorRemove(lp_unit, &quot;PalisadeCandle&quot;, 1);
                }
                else if ((lv_adjacentGates == 0) &amp;&amp; (lv_neighbour[2] == null) &amp;&amp; (lv_neighbour[4] != null) &amp;&amp; (lv_neighbour[6] == null) &amp;&amp; (lv_neighbour[8] != null)) {
                    if ((UnitGetCustomValue(lp_unit, 0) == 0.0)) {
                        UnitSetFacing(lp_unit, 0.0, 0.0);
                    }
                    else {
                        UnitSetFacing(lp_unit, 180.0, 0.0);
                    }
                    if ((UnitGetType(lp_unit) == &quot;Palisade&quot;)) {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale 1.000000,1.500000,1.000000&quot;);
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;ModelSwap PalisadeLength&quot;);
                        UnitBehaviorAdd(lp_unit, &quot;CanBecomeGate&quot;, lp_unit, 1);
                    }
                    else {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale&quot;);
                    }
                    UnitBehaviorRemove(lp_unit, &quot;PalisadeCandle&quot;, 1);
                }
                else if ((lv_diagonalGates == 0) &amp;&amp; (lv_neighbour[1] == null) &amp;&amp; (lv_neighbour[3] != null) &amp;&amp; (lv_neighbour[5] == null) &amp;&amp; (lv_neighbour[7] != null)) {
                    if ((UnitGetCustomValue(lp_unit, 0) == 0.0)) {
                        UnitSetFacing(lp_unit, 45.0, 0.0);
                    }
                    else {
                        UnitSetFacing(lp_unit, 225.0, 0.0);
                    }
                    if ((UnitGetType(lp_unit) == &quot;Palisade&quot;)) {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale 1.500000,1.500000,1.000000&quot;);
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;ModelSwap PalisadeLength&quot;);
                        UnitBehaviorAdd(lp_unit, &quot;CanBecomeGate&quot;, lp_unit, 1);
                    }
                    else {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale 1.400000,1.400000,1.000000&quot;);
                    }
                    UnitBehaviorRemove(lp_unit, &quot;PalisadeCandle&quot;, 1);
                }
                else if ((lv_diagonalGates == 0) &amp;&amp; (lv_neighbour[1] != null) &amp;&amp; (lv_neighbour[3] == null) &amp;&amp; (lv_neighbour[5] != null) &amp;&amp; (lv_neighbour[7] == null)) {
                    if ((UnitGetCustomValue(lp_unit, 0) == 0.0)) {
                        UnitSetFacing(lp_unit, 135.0, 0.0);
                    }
                    else {
                        UnitSetFacing(lp_unit, 315.0, 0.0);
                    }
                    if ((UnitGetType(lp_unit) == &quot;Palisade&quot;)) {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale 1.500000,1.500000,1.000000&quot;);
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;ModelSwap PalisadeLength&quot;);
                        UnitBehaviorAdd(lp_unit, &quot;CanBecomeGate&quot;, lp_unit, 1);
                    }
                    else {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale 1.400000,1.400000,1.000000&quot;);
                    }
                    UnitBehaviorRemove(lp_unit, &quot;PalisadeCandle&quot;, 1);
                }
                else if (((lv_adjacentPalisades &gt; 2) || (lv_diagonalPalisades &gt; 2) || (lv_adjacentGates &gt; 0) || (lv_diagonalGates &gt; 0) || ((lv_neighbour[2] != null) &amp;&amp; (lv_neighbour[4] != null)) || ((lv_neighbour[4] != null) &amp;&amp; (lv_neighbour[6] != null)) || ((lv_neighbour[6] != null) &amp;&amp; (lv_neighbour[8] != null)) || ((lv_neighbour[8] != null) &amp;&amp; (lv_neighbour[2] != null)))) {
                    if ((UnitGetType(lp_unit) == &quot;Palisade&quot;)) {
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;SetScale&quot;);
                        UnitSetFacing(lp_unit, 270.0, 0.0);
                        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), &quot;ModelSwap PalisadeCorner&quot;);
                        UnitBehaviorRemove(lp_unit, &quot;CanBecomeGate&quot;, 1);
                    }
                    else {
                        libNtve_gf_ReplaceUnit(lp_unit, &quot;Palisade&quot;, 1);
                    }
                    if (gf_RewardCatIndexActive(UnitGetOwner(lp_unit), 3, 5)) {
                        UnitBehaviorAdd(lp_unit, &quot;PalisadeCandle&quot;, lp_unit, 1);
                    }
                    else {
                    }
                }
                UnitGroupAdd(lv_exclude, lp_unit);
                if ((UnitGroupCount(lv_exclude, c_unitCountAlive) &gt;= 30)) {
                    gf_UnlockRequirement(UnitGetOwner(lp_unit), 3, 5);
                }
                else {
                }
                if ((lp_layer &lt; 50)) {
                    auto777AA9C7_ae = 8;
                    auto777AA9C7_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto777AA9C7_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto777AA9C7_ae) || (auto777AA9C7_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto777AA9C7_ae) ) ; lv_a += auto777AA9C7_ai ) {
                        if ((lv_neighbour[lv_a] != null) &amp;&amp; (UnitGroupHasUnit(lv_exclude, lv_neighbour[lv_a]) == false)) {
                            gf_PalisadeMutability(lv_neighbour[lv_a], lv_exclude, (lp_layer + 1));
                        }
                        else {
                        }
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BCAAF1B7">
        <ScriptCode>
            void gf_PailsadeRangedProtection (unit lp_attacker, unit lp_target, string lp_effect) {
                // Variable Declarations
                fixed lv_dmgReduction;
                int lv_intervals;
                fixed lv_angle;
                point lv_p;
                unit lv_u;
                // Variable Initialization
                lv_intervals = FixedToInt(DistanceBetweenPoints(UnitGetPosition(lp_target), UnitGetPosition(lp_attacker)));
                lv_angle = AngleBetweenPoints(UnitGetPosition(lp_target), UnitGetPosition(lp_attacker));
                // Implementation
                if (true) {
                }
                else {
                }
                if (gf_RangedAttack(lp_effect)) {
                    while ((lv_intervals &gt; 0)) {
                        lv_intervals -= 1;
                        lv_p = PointWithOffsetPolar(UnitGetPosition(lp_target), lv_intervals, lv_angle);
                        lv_u = UnitGroupClosestToPoint(UnitGroupFilterAlliance(UnitGroup(null, c_playerAny, RegionCircle(lv_p, 1.0), UnitFilter((1 &lt;&lt; c_targetFilterPsionic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetOwner(lp_attacker), c_unitAllianceEnemy, 0), lv_p);
                        if ((lv_u == lp_target)) {
                            lv_u = null;
                        }
                        else {
                        }
                        if ((lv_u != null)) {
                            lv_intervals = 0;
                        }
                        else {
                        }
                    }
                    if ((lv_u != null)) {
                        gf_Advancedtag(lv_u, UnitGetOwner(lp_attacker), StringExternal(&quot;Param/Value/A6274FCD&quot;), 1.5, 20);
                        gf_Advancedtag(lv_u, UnitGetOwner(lp_target), StringExternal(&quot;Param/Value/C5FFD5B1&quot;), 1.5, 20);
                        lv_dmgReduction = (gv_damageTaken / 2.0);
                        gv_damageTaken -= lv_dmgReduction;
                        UnitSetPropertyFixed(lp_target, c_unitPropLife, (UnitGetPropertyFixed(lp_target, c_unitPropLife, c_unitPropCurrent) + lv_dmgReduction));
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="72EE1C4C">
        <Item Type="CustomScript" Id="94012F91"/>
        <Item Type="CustomScript" Id="B1EACD2C"/>
        <Item Type="CustomScript" Id="A9260E08"/>
        <Item Type="CustomScript" Id="F9E464AE"/>
        <Item Type="CustomScript" Id="B97CB26B"/>
        <Item Type="CustomScript" Id="7AB17F39"/>
        <Item Type="CustomScript" Id="CE5A5A8E"/>
    </Element>
    <Element Type="CustomScript" Id="94012F91">
        <ScriptCode>
            void gf_Cooking (unit lp_unit, string lp_mealType, fixed lp_preparationTime) {
                // Variable Declarations
                const fixed lv_interval = 0.125;
                int lv_i;
                fixed lv_preparationTime;
                fixed lv_experienceGain;
                fixed lv_preparationTimeCoefficient;
                int lv_progressTextTag;
                fixed lv_progress;
                int lv_turnInterval;
                bool lv_finished;
                unit lv_cookingNode;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_preparationTime = lp_preparationTime;
                lv_experienceGain = (lp_preparationTime * 3.0);
                lv_preparationTimeCoefficient = libNtve_gf_ArithmeticRealClamp((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i)) * 0.01), 0.0, 0.8);
                lv_progressTextTag = c_textTagNone;
                lv_cookingNode = gf_GetCookingNode(lp_unit);
                // Implementation
                TriggerDebugOutput(1, (StringExternal(&quot;Param/Value/6124D3D0&quot;) + UnitTypeGetName(lp_mealType)), false);
                UnitIssueOrder(lp_unit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                    lv_preparationTime = (lv_preparationTime - (lv_preparationTime * lv_preparationTimeCoefficient));
                }
                else {
                    lv_preparationTime *= 1.25;
                }
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;Cooking&quot;, &quot;Duration&quot;, lv_i, FixedToString(lv_preparationTime, 1));
                UnitBehaviorAdd(lp_unit, &quot;Cooking&quot;, lp_unit, 1);
                gf_Quicktag(lp_unit, gf_GetCookingTypeText(lp_mealType), 2.0, 24);
                while ((lv_finished == false) &amp;&amp; gf_UnitExists(lp_unit) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;Unconscious&quot;) == false) &amp;&amp; gf_UnitExists(lv_cookingNode)) {
                    if ((lv_progress &gt;= lv_preparationTime)) {
                        lv_finished = true;
                        gv_playerData[lv_i].lv_gameStats.lv_mealsCooked += 1;
                        gf_FeastCriteria(lp_unit, lp_mealType);
                        gf_Quicktag(lp_unit, (StringExternal(&quot;Param/Value/574B8588&quot;) + (UnitTypeGetName(lp_mealType) + StringExternal(&quot;Param/Value/432E819A&quot;))), 2.0, 24);
                        gf_CreateItemForUnit(lp_unit, lp_mealType, 1);
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (gv_skillCooking[lv_i] &gt;= 15)) {
                            UnitBehaviorAdd(lp_unit, &quot;CookingExpertiseI&quot;, lp_unit, 1);
                            UnitSetCustomValue(gv_lastCreatedItem, 0, IntToFixed(lv_i));
                        }
                        else {
                        }
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (gv_skillCooking[lv_i] &gt;= 20)) {
                            UnitSetCustomValue(gv_lastCreatedItem, 1, IntToFixed(lv_i));
                        }
                        else {
                        }
                        if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                            gf_AddExperience(lp_unit, lv_experienceGain);
                        }
                        else {
                        }
                        if ((UnitHasBehavior(lp_unit, &quot;MagnificentChefsHat&quot;) == true)) {
                            PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(lv_i)].lv_members);
                            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                                if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                                    UnitBehaviorAdd(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;ChefsInspiration&quot;, lp_unit, 1);
                                }
                                else {
                                }
                            }
                            PlayerGroupLoopEnd();
                        }
                        else {
                        }
                    }
                    else {
                        lv_progress += lv_interval;
                        if (lv_turnInterval &gt;= 8) {
                            lv_turnInterval = 1;
                        }
                        else {
                            lv_turnInterval = lv_turnInterval + 1;
                        }
                        if (gf_UnitExists(lv_cookingNode) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_cookingNode)) &lt;= ((UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent) + UnitGetPropertyFixed(lv_cookingNode, c_unitPropRadius, c_unitPropCurrent)) + (gv_interactRadius + gv_interactRadiusBonus)))) {
                            if ((lv_turnInterval == 1) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;Stationary&quot;) == true)) {
                                libNtve_gf_MakeUnitFacePoint(lp_unit, UnitGetPosition(lv_cookingNode), 0.5);
                            }
                            else {
                            }
                        }
                        else {
                            lv_cookingNode = gf_GetCookingNode(lp_unit);
                        }
                        Wait(lv_interval, c_timeGame);
                    }
                }
                if ((lv_finished == false)) {
                    SoundPlay(SoundLink(&quot;CraftingFailed&quot;, -1), PlayerGroupSingle(lv_i), 100.0, 0.0);
                    gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/7BD17DC8&quot;), 2.0, 24);
                }
                else {
                }
                UnitBehaviorRemove(lp_unit, &quot;Cooking&quot;, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B1EACD2C">
        <ScriptCode>
            unit gf_GetCookingNode (unit lp_kobold) {
                // Variable Declarations
                unit lv_value;
                // Variable Initialization
                // Implementation
                if ((UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true)) {
                    lv_value = UnitBehaviorEffectUnit(lp_kobold, &quot;Heat&quot;, c_effectUnitCaster, 0);
                }
                else {
                    if (gf_UnitExists(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower)) &lt;= ((UnitGetPropertyFixed(lp_kobold, c_unitPropRadius, c_unitPropCurrent) + UnitGetPropertyFixed(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower, c_unitPropRadius, c_unitPropCurrent)) + gv_interactRadius)) &amp;&amp; (UnitHasBehavior(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower, &quot;WatchTowerCanteen&quot;) == true)) {
                        lv_value = gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lp_kobold))].lv_watchTower;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A9260E08">
        <ScriptCode>
            text gf_GetCookingTypeText (string lp_unitType) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                // Implementation
                if ((lp_unitType == &quot;CleansingDraught&quot;)) {
                    lv_value = StringExternal(&quot;Param/Value/380C5311&quot;);
                }
                else if (true) {
                    lv_value = StringExternal(&quot;Param/Value/178464D9&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F9E464AE">
        <ScriptCode>
            void gf_EatFood (unit lp_unit, unit lp_item, bool lp_consume) {
                // Variable Declarations
                int lv_i;
                text lv_text;
                text lv_suffix;
                fixed lv_rawLamb;
                fixed lv_roastedLamb;
                fixed lv_handfulofBerries;
                fixed lv_spicedLambFeast;
                fixed lv_rawPheasant;
                fixed lv_roastedPheasantWithBerrySauce;
                fixed lv_beerBraisedPheasant;
                fixed lv_beer;
                fixed lv_rawWolfMeat;
                fixed lv_wolfSteak;
                fixed lv_grilledWolfEntrecote;
                fixed lv_smokedLambSirloin1;
                fixed lv_smokedLambSirloin2;
                fixed lv_smokedLambSirloin3;
                fixed lv_sageberry;
                fixed lv_a;
                fixed lv_b;
                fixed lv_c;
                const bool lv_showHealing = true;
                bool lv_showText;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_rawLamb = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Heroic]&quot;, UnitGetOwner(lp_unit)));
                lv_roastedLamb = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Hover]&quot;, UnitGetOwner(lp_unit)));
                lv_handfulofBerries = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Light]&quot;, UnitGetOwner(lp_unit)));
                lv_spicedLambFeast = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Massive]&quot;, UnitGetOwner(lp_unit)));
                lv_rawPheasant = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Mechanical]&quot;, UnitGetOwner(lp_unit)));
                lv_roastedPheasantWithBerrySauce = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Psionic]&quot;, UnitGetOwner(lp_unit)));
                lv_beerBraisedPheasant = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Robotic]&quot;, UnitGetOwner(lp_unit)));
                lv_beer = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Structure]&quot;, UnitGetOwner(lp_unit)));
                lv_rawWolfMeat = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(lp_unit)));
                lv_wolfSteak = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(lp_unit)));
                lv_grilledWolfEntrecote = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Heroic]&quot;, UnitGetOwner(lp_unit)));
                lv_smokedLambSirloin1 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Hover]&quot;, UnitGetOwner(lp_unit)));
                lv_smokedLambSirloin3 = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Light]&quot;, UnitGetOwner(lp_unit)));
                lv_sageberry = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats2&quot;, &quot;AttributeBonus[Massive]&quot;, UnitGetOwner(lp_unit)));
                // Implementation
                if ((UnitGetType(lp_item) == &quot;RawLamb&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_rawLamb, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_rawLamb * 0.5);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;RoastedLamb&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_roastedLamb, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_roastedLamb * 0.5);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;HandfulofBerries&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_handfulofBerries, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_handfulofBerries * 0.5);
                    gf_ActivateFoodCooldown(lp_unit, 4.0);
                }
                else if ((UnitGetType(lp_item) == &quot;SpicedLambFeast&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_spicedLambFeast, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_spicedLambFeast * 0.5);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;WellFedEndurance&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;RawPheasant&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_rawPheasant, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_rawPheasant * 0.5);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;RoastedPheasantWithBerrySauce&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_roastedPheasantWithBerrySauce, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_roastedPheasantWithBerrySauce * 0.5);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;BeerBraisedPheasant&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_beerBraisedPheasant, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_beerBraisedPheasant * 0.5);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;WellFedStrength&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;Beer&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_beer, lv_showHealing);
                    if ((UnitHasBehavior(lp_unit, &quot;BloodthirstyPirateHat&quot;) == false)) {
                        gf_ActivateFoodCooldown(lp_unit, 4.0);
                    }
                    else {
                    }
                    UnitBehaviorAdd(lp_unit, &quot;WellFedBeer&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;RawWolfMeat&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_rawWolfMeat, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_rawWolfMeat * 0.667);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;WolfSteak&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_wolfSteak, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_wolfSteak * 0.667);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;GrilledWolfEntrecote&quot;)) {
                    gf_HealUnit(lp_unit, lp_unit, lv_grilledWolfEntrecote, lv_showHealing);
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += (lv_grilledWolfEntrecote * 0.667);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;WellFedDex&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;SmokedLambSirloin&quot;)) {
                    lv_smokedLambSirloin2 = (UnitGetPropertyFixed(lp_unit, c_unitPropEnergyMax, c_unitPropCurrent) * (lv_smokedLambSirloin1 / 200.0));
                    lv_smokedLambSirloin1 = (UnitGetPropertyFixed(lp_unit, c_unitPropLifeMax, c_unitPropCurrent) * (lv_smokedLambSirloin1 / 100.0));
                    gf_HealUnit(lp_unit, lp_unit, lv_smokedLambSirloin1, lv_showHealing);
                    UnitSetPropertyFixed(lp_unit, c_unitPropEnergy, (UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent) + lv_smokedLambSirloin2));
                    gv_playerData[UnitGetOwner(lp_unit)].lv_hunger += lv_smokedLambSirloin3;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;Sageberry&quot;)) {
                    UnitSetPropertyFixed(lp_unit, c_unitPropEnergy, (UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent) + lv_sageberry));
                    TextExpressionSetToken(&quot;Param/Expression/4409F779&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/EF1747DA&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/4409F779&quot;, &quot;F&quot;, FixedToText(lv_sageberry, 0));
                    TextExpressionSetToken(&quot;Param/Expression/4409F779&quot;, &quot;G&quot;, StringExternal(&quot;Param/Value/EF7020A6&quot;));
                    gf_Quicktag(lp_unit, TextExpressionAssemble(&quot;Param/Expression/4409F779&quot;), 3.0, 24);
                    gf_ActivateFoodCooldown(lp_unit, 4.0);
                }
                else if ((UnitGetType(lp_item) == &quot;RawStagMeat&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    lv_c = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gv_playerData[lv_i].lv_stamina += lv_c;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;StagStew&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Hover]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Massive]&quot;, lv_i));
                    lv_c = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StagFoodStats&quot;, &quot;AttributeBonus[Mechanical]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gv_playerData[lv_i].lv_stamina += lv_c;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;WellFedStag&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;GiantSunfish&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsGiantSunfish&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsGiantSunfish&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;GiantSunfish&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;SlipperyEel&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsSlipperyEel&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsSlipperyEel&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;SlipperyEel&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;ToxicFrog&quot;)) {
                    lv_a = (0.35 * UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
                    UnitSetPropertyFixed(lp_unit, c_unitPropLife, (UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent) - lv_a));
                    TextExpressionSetToken(&quot;Param/Expression/CAB35B1E&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/572B0AC7&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/CAB35B1E&quot;, &quot;B&quot;, FixedToText(lv_a, 0));
                    TextExpressionSetToken(&quot;Param/Expression/CAB35B1E&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/0493DA19&quot;));
                    gf_Quicktag(lp_unit, TextExpressionAssemble(&quot;Param/Expression/CAB35B1E&quot;), 3.0, 24);
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;ToxicFrog&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;ForestTrout&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsForestTrout&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsForestTrout&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    lv_c = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsForestTrout&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gv_playerData[lv_i].lv_stamina += lv_c;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;HighlandGuppy&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsHighlandGuppy&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsHighlandGuppy&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;HighlandGuppy&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;AlbinoCavefish&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsAlbinoCavefish&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsAlbinoCavefish&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;AlbinoCavefish&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;StripedLurker&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsStripedLurker&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsStripedLurker&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;StripedLurker&quot;, lp_unit, 1);
                    UnitBehaviorAdd(lp_unit, &quot;StripedLurkerInvisibility&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;JewelDanio&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsJewelDanio&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsJewelDanio&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    UnitBehaviorAdd(lp_unit, &quot;JewelDanio&quot;, lp_unit, 1);
                }
                else if ((UnitGetType(lp_item) == &quot;WaterScorpion&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsWaterScorpion&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsWaterScorpion&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gf_ActivateFoodCooldown(lp_unit, 16.0);
                }
                else if ((UnitGetType(lp_item) == &quot;FireAmmonite&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFireAmmonite&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFireAmmonite&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    lv_c = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsFireAmmonite&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    if ((UnitHasBehavior(lp_unit, &quot;FrostBarrier&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;FrostArmor&quot;) == false)) {
                        gv_playerData[lv_i].lv_warmth += lv_c;
                    }
                    else {
                    }
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                }
                else if ((UnitGetType(lp_item) == &quot;BlindRainfish&quot;)) {
                    lv_a = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsBlindRainfish&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    lv_b = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsBlindRainfish&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                    gf_HealUnit(lp_unit, lp_unit, lv_a, lv_showHealing);
                    gv_playerData[lv_i].lv_hunger += lv_b;
                    gf_ActivateFoodCooldown(lp_unit, 8.0);
                    gf_RainInitialize(2.0, RandomFixed(30.0, 60.0), 100.0);
                }
                else if ((UnitGetType(lp_item) == &quot;TigerGourami&quot;)) {
                    UnitGroupLoopBegin(gv_pets[lv_i]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;TigerRage&quot;, lp_unit, 1);
                        gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/5082F7DD&quot;), 3.0, 24);
                    }
                    UnitGroupLoopEnd();
                }
                else if ((UnitGetType(lp_item) == &quot;MurlocTreat&quot;)) {
                    UnitCreate(1, &quot;MurlocSlave&quot;, 0, lv_i, UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
                    UnitBehaviorRemove(UnitLastCreated(), &quot;MurlocContract&quot;, 1);
                    UnitGroupAdd(gv_playerData[lv_i].lv_murlocSlaves, UnitLastCreated());
                    UnitControlGroupAddUnit(lv_i, 8, UnitLastCreated());
                    UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/47465454&quot;), gf_GetPlayerName(UnitGetOwner(UnitLastCreated()), 0), StringExternal(&quot;Param/Value/CEDA1A2B&quot;));
                    if ((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;TheMurlocket&quot;) == true)) {
                        UnitBehaviorAdd(UnitLastCreated(), &quot;MurlocRebelSpirit&quot;, UnitLastCreated(), 1);
                    }
                    else {
                    }
                    if (gf_RewardCatIndexActive(lv_i, 3, 4)) {
                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_TextureSelectByID(&quot;MurlocOrange&quot;));
                    }
                    else {
                    }
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_murlocSlaves, c_unitCountAlive) &gt;= 50)) {
                        gf_UnlockRequirement(lv_i, 3, 4);
                    }
                    else {
                    }
                    gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/B118DE8F&quot;), 3.0, 24);
                }
                if ((UnitGetCustomValue(lp_item, 0) != 0.0)) {
                    lv_text = StringExternal(&quot;Param/Value/BBF1891C&quot;);
                    lv_showText = true;
                    UnitBehaviorAdd(lp_unit, &quot;CookingExpertiseII&quot;, gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 0))].lv_kobold, 1);
                }
                else {
                }
                if ((UnitGetCustomValue(lp_item, 1) != 0.0)) {
                    UnitBehaviorAdd(gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 1))].lv_kobold, &quot;CookingExpertiseIII&quot;, gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 1))].lv_kobold, 1);
                    if ((lp_unit == gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 1))].lv_kobold)) {
                        lv_text = (lv_text + StringExternal(&quot;Param/Value/5D5CA705&quot;));
                        lv_showText = true;
                    }
                    else {
                        gf_Quicktag(gv_playerData[FixedToInt(UnitGetCustomValue(lp_item, 1))].lv_kobold, StringExternal(&quot;Param/Value/74A037B3&quot;), 2.0, 24);
                    }
                }
                else {
                }
                if ((lp_consume == true)) {
                    gf_DropandRemove(lp_item);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B97CB26B">
        <ScriptCode>
            void gf_ActivateFoodCooldown (unit lp_unit, fixed lp_duration) {
                // Variable Declarations
                int lv_i;
                fixed lv_durationModded;
                const fixed lv_tolerace = 0.01;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_durationModded = lp_duration;
                // Implementation
                if ((gv_skillCooking[lv_i] &gt;= 25)) {
                    lv_durationModded *= (1.0 - 0.2);
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, &quot;VenomousArbalestPoison&quot;) == true)) {
                    lv_durationModded *= (1.0 + 0.2);
                }
                else {
                }
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;KoboldDigestion&quot;, &quot;Duration&quot;, lv_i, FixedToString(lv_durationModded, 1));
                UnitBehaviorAdd(lp_unit, &quot;KoboldDigestion&quot;, lp_unit, 1);
                UnitAbilityReset(lp_unit, AbilityCommand(&quot;Eatasnack&quot;, 0), c_spendLocationAll);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Eatasnack&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.TimeUse&quot;, UnitGetOwner(lp_unit), FixedToString(lv_durationModded, 2));
                UnitAbilitySpend(lp_unit, AbilityCommand(&quot;Eatasnack&quot;, 0), c_spendLocationAbility);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Eatasnack&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.TimeUse&quot;, UnitGetOwner(lp_unit), FixedToString(0.25, 2));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7AB17F39">
        <ScriptCode>
            void gf_RemoveAilments (unit lp_unit) {
                // Implementation
                UnitBehaviorRemove(lp_unit, &quot;DemonicStrikes&quot;, 50);
                UnitBehaviorRemove(lp_unit, &quot;Infection&quot;, 10);
                UnitBehaviorRemove(lp_unit, &quot;IronPickaxeBleed&quot;, 5);
                UnitBehaviorRemove(lp_unit, &quot;VenomousArbalestPoison&quot;, 5);
                UnitBehaviorRemove(lp_unit, &quot;ArmorShred&quot;, 3);
                UnitBehaviorRemove(lp_unit, &quot;Affliction&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;AfflictionArmorShred&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;SturdyWoodenStickSlow&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;Trampled&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;RotatingBladeBleed&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;FelFlames&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;Tether&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;Clairvoyance&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;ClairvoyanceNecromancerBonus&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;Annihilate&quot;, 1);
                if ((UnitHasBehavior(lp_unit, &quot;Stalked&quot;) == true)) {
                    UnitCreateEffectUnit(lp_unit, &quot;BirdServiceExpire&quot;, UnitBehaviorEffectUnit(lp_unit, &quot;Stalked&quot;, c_effectUnitCaster, 0));
                    UnitBehaviorRemove(lp_unit, &quot;Stalked&quot;, 1);
                    gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/DFC57BDF&quot;), 3.0, 24);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CE5A5A8E">
        <ScriptCode>
            void gf_Crafting (unit lp_craftsman, unit lp_station, string lp_itemType, fixed lp_craftingTime) {
                // Variable Declarations
                const fixed lv_interval = 0.125;
                int lv_i;
                fixed lv_craftingTime;
                fixed lv_experienceGain;
                fixed lv_craftingTimeCoefficient;
                int lv_progressTextTag;
                fixed lv_progress;
                int lv_turnInterval;
                bool lv_finished;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_craftsman);
                lv_craftingTime = lp_craftingTime;
                lv_experienceGain = (lp_craftingTime * 3.0);
                lv_craftingTimeCoefficient = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i)) * 0.01);
                lv_progressTextTag = c_textTagNone;
                // Implementation
                TriggerDebugOutput(1, (StringExternal(&quot;Param/Value/6A41732D&quot;) + UnitTypeGetName(lp_itemType)), false);
                UnitIssueOrder(lp_craftsman, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                lv_craftingTime = (lv_craftingTime - (lv_craftingTime * lv_craftingTimeCoefficient));
                if ((gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArmory == true)) {
                    lv_craftingTime *= 0.5;
                }
                else {
                }
                gf_Quicktag(lp_craftsman, StringExternal(&quot;Param/Value/2C605AC4&quot;), 2.0, 24);
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;Crafting&quot;, &quot;Duration&quot;, lv_i, FixedToString(lv_craftingTime, 1));
                UnitBehaviorAdd(lp_craftsman, &quot;Crafting&quot;, lp_craftsman, 1);
                if ((UnitGetType(lp_station) == &quot;Smithy&quot;)) {
                    UnitBehaviorAdd(lp_station, &quot;SmithyWorking&quot;, lp_station, 1);
                }
                else {
                }
                while ((lv_finished == false) &amp;&amp; (gv_playerData[lv_i].lv_alive == true) &amp;&amp; gf_UnitExists(lp_station) &amp;&amp; (UnitHasBehavior(lp_craftsman, &quot;Unconscious&quot;) == false) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_craftsman), UnitGetPosition(lp_station)) &lt;= (gv_interactRadius + gv_interactRadiusBonus))) {
                    if ((lv_progress &gt;= lv_craftingTime)) {
                        lv_finished = true;
                        gv_playerData[lv_i].lv_gameStats.lv_itemsCrafted += 1;
                        gf_AddExperience(lp_craftsman, lv_experienceGain);
                        gf_CreateItemForUnit(lp_craftsman, lp_itemType, 1);
                        gf_Quicktag(lp_craftsman, (StringExternal(&quot;Param/Value/F3CA4DFE&quot;) + (UnitTypeGetName(lp_itemType) + StringExternal(&quot;Param/Value/5F1667AF&quot;))), 2.0, 24);
                        gf_StaminaOnCraft(lp_craftsman);
                        ActorSend(libNtve_gf_MainActorofUnit(lp_craftsman), &quot;Signal WorkComplete&quot;);
                        if ((gv_playerData[lv_i].lv_isAI == true)) {
                            gf_UpdateSupplies(lv_i);
                            gv_aIData[lv_i].lv_smithyDesire = gf_WantedItemType(lp_craftsman, &quot;Smithy&quot;);
                            gv_aIData[lv_i].lv_benchDesire = gf_WantedItemType(lp_craftsman, &quot;Workbench&quot;);
                        }
                        else {
                        }
                        if ((gv_tutorial == true)) {
                            if ((lp_itemType == &quot;SturdyWoodenStick&quot;)) {
                                TriggerExecute(gt_TutorialPart11, true, false);
                            }
                            else if ((lp_itemType == &quot;WarmWoolTunic&quot;)) {
                                TriggerExecute(gt_TutorialPart12, true, false);
                            }
                        }
                        else {
                        }
                    }
                    else {
                        lv_progress += lv_interval;
                        if (lv_turnInterval &gt;= 8) {
                            lv_turnInterval = 1;
                        }
                        else {
                            lv_turnInterval = lv_turnInterval + 1;
                        }
                        if ((lv_turnInterval == 1) &amp;&amp; (UnitHasBehavior(lp_craftsman, &quot;Stationary&quot;) == true)) {
                            libNtve_gf_MakeUnitFacePoint(lp_craftsman, UnitGetPosition(lp_station), 0.5);
                        }
                        else {
                        }
                        Wait(lv_interval, c_timeGame);
                    }
                }
                if ((lv_finished == false)) {
                    SoundPlay(SoundLink(&quot;CraftingFailed&quot;, -1), PlayerGroupSingle(lv_i), 100.0, 0.0);
                    gf_Quicktag(lp_craftsman, StringExternal(&quot;Param/Value/E3F73A38&quot;), 2.0, 24);
                }
                else {
                }
                gv_aIData[lv_i].lv_benchDesire = null;
                gv_aIData[lv_i].lv_smithyDesire = null;
                UnitBehaviorRemove(lp_craftsman, &quot;Crafting&quot;, 1);
                UnitBehaviorRemove(lp_station, &quot;SmithyWorking&quot;, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="C56B2ECA">
        <Item Type="CustomScript" Id="326A51EF"/>
        <Item Type="CustomScript" Id="C5D0409B"/>
        <Item Type="CustomScript" Id="84A94FC8"/>
        <Item Type="CustomScript" Id="62F57E04"/>
        <Item Type="CustomScript" Id="C1A8E32C"/>
        <Item Type="CustomScript" Id="574E92FD"/>
        <Item Type="CustomScript" Id="1DC1117D"/>
        <Item Type="CustomScript" Id="25261CF6"/>
        <Item Type="CustomScript" Id="B042C01D"/>
        <Item Type="CustomScript" Id="9C7C3969"/>
        <Item Type="CustomScript" Id="0F1460B4"/>
        <Item Type="CustomScript" Id="D424D3E5"/>
        <Item Type="CustomScript" Id="3A94B51B"/>
        <Item Type="CustomScript" Id="B7E833F0"/>
        <Item Type="CustomScript" Id="276F8702"/>
        <Item Type="CustomScript" Id="A5E1346B"/>
        <Item Type="CustomScript" Id="91BCE039"/>
        <Item Type="CustomScript" Id="08A51EAF"/>
        <Item Type="CustomScript" Id="A494B8A2"/>
        <Item Type="CustomScript" Id="807F401A"/>
        <Item Type="CustomScript" Id="3B3F4A64"/>
        <Item Type="CustomScript" Id="F02A6FA1"/>
        <Item Type="CustomScript" Id="A62FB2BA"/>
        <Item Type="CustomScript" Id="37BBA9C7"/>
        <Item Type="CustomScript" Id="3E765C85"/>
        <Item Type="CustomScript" Id="93C75FE4"/>
        <Item Type="CustomScript" Id="1C3345D1"/>
        <Item Type="CustomScript" Id="14237333"/>
        <Item Type="CustomScript" Id="ED5B70B8"/>
        <Item Type="CustomScript" Id="EDBC79DD"/>
        <Item Type="CustomScript" Id="4CE76799"/>
        <Item Type="CustomScript" Id="07937388"/>
        <Item Type="CustomScript" Id="B1DA7FD4"/>
        <Item Type="CustomScript" Id="B1E8BB54"/>
    </Element>
    <Element Type="CustomScript" Id="326A51EF">
        <ScriptCode>
            void gf_BlunderbussShotgun (unit lp_attacker, unit lp_target, string lp_effect) {
                // Variable Declarations
                fixed lv_distance;
                fixed lv_extraDamage;
                fixed lv_maxRange;
                fixed lv_damageFactor;
                // Variable Initialization
                // Implementation
                if ((lp_effect == &quot;BlunderbussDamage&quot;)) {
                    lv_maxRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;Blunderbuss&quot;, &quot;Range&quot;, UnitGetOwner(lp_attacker)));
                    lv_distance = DistanceBetweenPoints(UnitGetPosition(lp_attacker), UnitGetPosition(lp_target));
                    lv_distance -= (UnitGetPropertyFixed(lp_attacker, c_unitPropRadius, c_unitPropCurrent) + 0.5);
                    lv_distance -= UnitGetPropertyFixed(lp_target, c_unitPropRadius, c_unitPropCurrent);
                    lv_damageFactor = (0.2 * (1.0 - (lv_distance / lv_maxRange)));
                    lv_extraDamage = (gv_damageTaken * lv_damageFactor);
                    gv_damageTaken += lv_extraDamage;
                    UnitDamage(lp_attacker, &quot;RangedDamageDummyNoText&quot;, lp_target, lv_extraDamage);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C5D0409B">
        <ScriptCode>
            int gf_GetItemLevel (string lp_type, int lp_player) {
                // Variable Declarations
                string lv_itemTypeID;
                int lv_value;
                // Variable Initialization
                lv_itemTypeID = &quot;&quot;;
                // Implementation
                if ((lp_type != null)) {
                    if ((lp_type == &quot;TwinThrowingAxes&quot;) &amp;&amp; (gv_playerData[lp_player].lv_isAI == true)) {
                        lv_value = -1;
                    }
                    else if ((lp_type == &quot;OffhandBlockedHelper&quot;) &amp;&amp; (gv_playerData[lp_player].lv_isAI == true)) {
                        lv_value = 1000;
                    }
                    else if ((lp_type == &quot;ViciousJavelin&quot;) &amp;&amp; (gv_playerData[lp_player].lv_isAI == true) &amp;&amp; (gf_RangedWeapon(gv_playerData[lp_player].lv_kobold) == true)) {
                        lv_value = -1;
                    }
                    else if ((lp_type == &quot;Torch&quot;) &amp;&amp; ((gv_b_Day == false) || (gv_winter == true))) {
                        if ((gv_winter == true)) {
                            lv_value = 102;
                        }
                        else {
                            lv_value = 100;
                        }
                    }
                    else if ((lp_type == &quot;Lantern&quot;) &amp;&amp; (gv_b_Day == false)) {
                        lv_value = 101;
                    }
                    else if ((lp_type == &quot;FelFireTorch&quot;) &amp;&amp; ((gv_b_Day == false) || (gv_winter == true))) {
                        lv_value = 103;
                    }
                    else if ((lp_type == &quot;ObedienceRod&quot;) &amp;&amp; ((lp_player &gt;= 1) &amp;&amp; (lp_player &lt;= gv_players)) &amp;&amp; (TimerGetRemaining(gv_aIData[lp_player].lv_tamingTime) &gt; 0.0)) {
                        lv_value = 100;
                    }
                    else if (((lp_type == &quot;FishingRod&quot;) || (lp_type == &quot;EpicFishingRod&quot;)) &amp;&amp; ((lp_player &gt;= 1) &amp;&amp; (lp_player &lt;= gv_players)) &amp;&amp; (TimerGetRemaining(gv_aIData[lp_player].lv_fishingTime) &gt; 0.0)) {
                        lv_value = 100;
                    }
                    else if (true) {
                        lv_itemTypeID = (lp_type);
                        lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Level&quot;, lp_player));
                    }
                }
                else {
                    lv_value = -1;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="84A94FC8">
        <ScriptCode>
            bool gf_UnitCanGetItem (unit lp_unit, string lp_type) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_inventory;
                int lv_freeSpace;
                bool lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_inventory = UnitInventoryGroup(lp_unit);
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                    lv_freeSpace = gv_playerData[lv_i].lv_backpackSize;
                    if ((gf_UnitExists(gf_KoboldMainHand(lp_unit)) == false) &amp;&amp; (CatalogFieldValueGet(c_gameCatalogItem, lp_type, &quot;Class&quot;, lv_i) == &quot;MainHand&quot;)) {
                        lv_freeSpace += 1;
                    }
                    else {
                        UnitGroupRemove(lv_inventory, gf_KoboldMainHand(lp_unit));
                    }
                    if ((gf_UnitExists(gf_KoboldOffhand(lp_unit)) == false) &amp;&amp; ((CatalogFieldValueGet(c_gameCatalogItem, lp_type, &quot;Class&quot;, lv_i) == &quot;Offhand&quot;) || (CatalogFieldValueGet(c_gameCatalogItem, lp_type, &quot;Class&quot;, lv_i) == &quot;OffhandHelper&quot;))) {
                        lv_freeSpace += 1;
                    }
                    else {
                        UnitGroupRemove(lv_inventory, gf_KoboldOffhand(lp_unit));
                    }
                    if ((gf_UnitExists(gf_KoboldArmor(lp_unit)) == false) &amp;&amp; (CatalogFieldValueGet(c_gameCatalogItem, lp_type, &quot;Class&quot;, lv_i) == &quot;Armor&quot;)) {
                        lv_freeSpace += 1;
                    }
                    else {
                        UnitGroupRemove(lv_inventory, gf_KoboldArmor(lp_unit));
                    }
                }
                else if ((UnitGetType(lp_unit) == &quot;MurlocSlave&quot;)) {
                    lv_freeSpace = 4;
                }
                else if ((UnitGetType(lp_unit) == &quot;StorageOutpost&quot;)) {
                    lv_freeSpace = 26;
                }
                else if ((UnitGetType(lp_unit) == &quot;PackBeaver&quot;)) {
                    lv_freeSpace = 1;
                }
                else if ((UnitGetType(lp_unit) == &quot;Fortress&quot;) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;WatchTowerStorage&quot;) == true)) {
                    lv_freeSpace = 40;
                }
                lv_freeSpace -= UnitGroupCount(lv_inventory, c_unitCountAlive);
                if ((lv_freeSpace &gt; 0)) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="62F57E04">
        <ScriptCode>
            void gf_CreateItemForUnit (unit lp_unit, string lp_itemType, int lp_amount) {
                int autoBEED6783_ae;
                int autoBEED6783_ai;
                // Variable Declarations
                int lv_a;
                unitgroup lv_inventoryItems;
                int lv_numberOfItemsCarried;
                bool lv_inventoryFull;
                unit lv_daItem;
                // Variable Initialization
                lv_inventoryItems = UnitInventoryGroup(lp_unit);
                // Implementation
                if (gf_UnitExists(lp_unit) &amp;&amp; (lp_itemType != null) &amp;&amp; (lp_amount != 0)) {
                    autoBEED6783_ae = lp_amount;
                    autoBEED6783_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoBEED6783_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoBEED6783_ae) || (autoBEED6783_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoBEED6783_ae) ) ; lv_a += autoBEED6783_ai ) {
                        if (gf_UnitCanGetItem(lp_unit, lp_itemType)) {
                            UnitInventoryCreate(lp_unit, lp_itemType);
                            lv_daItem = UnitInventoryLastCreated();
                            gv_lastCreatedItem = UnitInventoryLastCreated();
                            UnitSetOwner(UnitInventoryLastCreated(), 0, true);
                        }
                        else {
                            if ((UnitGetType(lp_unit) == &quot;StorageOutpost&quot;) &amp;&amp; (lp_itemType == &quot;Beer&quot;)) {
                                UnitCreate(1, lp_itemType, 0, 0, PointWithOffsetPolar(UnitGetPosition(lp_unit), 1.5, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                            }
                            else {
                                UnitCreate(1, lp_itemType, 0, 0, UnitGetPosition(lp_unit), 270.0);
                            }
                            lv_daItem = UnitLastCreated();
                            gv_lastCreatedItem = UnitLastCreated();
                            lv_inventoryFull = true;
                        }
                        if ((UnitGetType(lv_daItem) == &quot;Torch&quot;)) {
                            if ((UnitHasBehavior(lp_unit, &quot;Lightbringer&quot;) == true)) {
                                UnitBehaviorAdd(lv_daItem, &quot;TorchTimedLifePerked&quot;, lv_daItem, 1);
                            }
                            else {
                                UnitBehaviorAdd(lv_daItem, &quot;TorchTimedLife&quot;, lv_daItem, 1);
                            }
                        }
                        else {
                        }
                    }
                    if ((lv_inventoryFull == true)) {
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, StringExternal(&quot;Param/Value/AD1A70A6&quot;));
                    }
                    else {
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, StringExternal(&quot;Param/Value/E42168FB&quot;));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C1A8E32C">
        <ScriptCode>
            void gf_CreateLoot (string lp_itemType, point lp_origin, fixed lp_randomOffset, bool lp_fountainEffect, int lp_dropChance, int lp_goldAmountoptional) {
                // Implementation
                if ((RandomInt(1, 100) &lt;= lp_dropChance)) {
                    UnitCreate(1, lp_itemType, c_unitCreateIgnorePlacement, 0, lp_origin, libNtve_gf_RandomAngle());
                    if ((lp_itemType == &quot;GoldPurse&quot;)) {
                        UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/0A9A2FE8&quot;), (IntToText(lp_goldAmountoptional) + StringExternal(&quot;Param/Value/BBFB4EC7&quot;)), StringExternal(&quot;Param/Value/916A9DED&quot;));
                        UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lp_goldAmountoptional));
                    }
                    else {
                    }
                    if ((lp_fountainEffect == true)) {
                        UnitCreateEffectPoint(UnitLastCreated(), &quot;LootFountainEffect&quot;, gf_RandomPathablePoint(RegionCircle(lp_origin, lp_randomOffset)));
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="574E92FD">
        <ScriptCode>
            void gf_CreateCoinPurse (int lp_value, point lp_point) {
                // Implementation
                UnitCreate(1, &quot;GoldPurse&quot;, 0, 0, lp_point, libNtve_gf_RandomAngle());
                UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/FD257A8D&quot;), (IntToText(lp_value) + StringExternal(&quot;Param/Value/35E054F6&quot;)), StringExternal(&quot;Param/Value/BC71D966&quot;));
                UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lp_value));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1DC1117D">
        <ScriptCode>
            void gf_EquipmentChange (int lp_player, unit lp_item, bool lp_negative, int lp_actionIndex) {
                // Variable Declarations
                string lv_itemTypeID;
                // Variable Initialization
                lv_itemTypeID = (UnitGetType(lp_item));
                // Implementation
                if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lp_player) == &quot;MainHand&quot;)) {
                    if ((lp_negative == false)) {
                        UnitGroupAdd(gv_playerData[lp_player].lv_equippedMainHandG, lp_item);
                    }
                    else {
                        UnitGroupRemove(gv_playerData[lp_player].lv_equippedMainHandG, lp_item);
                        if ((UnitGetType(lp_item) == &quot;CommonSword&quot;)) {
                            gf_DropandRemove(lp_item);
                        }
                        else {
                        }
                    }
                    gf_EquipMainHands(lp_player, UnitGetType(lp_item), lp_negative);
                }
                else if (((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lp_player) == &quot;Offhand&quot;) || (CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lp_player) == &quot;OffhandHelper&quot;))) {
                    if ((lp_negative == false)) {
                        UnitGroupAdd(gv_playerData[lp_player].lv_equippedOffhandG, lp_item);
                    }
                    else {
                        UnitGroupRemove(gv_playerData[lp_player].lv_equippedOffhandG, lp_item);
                        if ((UnitGetType(lp_item) == &quot;CommonBuckler&quot;)) {
                            gf_DropandRemove(lp_item);
                        }
                        else {
                        }
                    }
                    gf_EquipOffhands(lp_player, UnitGetType(lp_item), lp_negative);
                }
                else if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lp_player) == &quot;Armor&quot;)) {
                    if ((lp_negative == false)) {
                        UnitGroupAdd(gv_playerData[lp_player].lv_equippedArmorG, lp_item);
                    }
                    else {
                        UnitGroupRemove(gv_playerData[lp_player].lv_equippedArmorG, lp_item);
                        if ((UnitGetType(lp_item) == &quot;CommonArmor&quot;)) {
                            gf_DropandRemove(lp_item);
                        }
                        else {
                        }
                    }
                    gf_EquipArmors(lp_player, UnitGetType(lp_item), lp_negative);
                }
                gv_aIData[lp_player].lv_benchDesire = null;
                gv_aIData[lp_player].lv_smithyDesire = null;
                gf_UpdateStatsAll(lp_player);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="25261CF6">
        <ScriptCode>
            void gf_EquipMainHands (int lp_player, string lp_itemType, bool lp_negative) {
                // Variable Declarations
                fixed lv_x;
                fixed lv_r;
                fixed lv_weap1Str;
                fixed lv_weap1Dex;
                fixed lv_weap2Str;
                fixed lv_weap2End;
                fixed lv_weap3Str;
                fixed lv_weap3End;
                fixed lv_weap4Str;
                fixed lv_weap5Str;
                fixed lv_weap5End;
                fixed lv_weap6Str;
                fixed lv_weap6End;
                fixed lv_weap7Str;
                fixed lv_weap7Dex;
                fixed lv_weap7End;
                fixed lv_weap8Dex;
                fixed lv_weap8Int;
                fixed lv_weap8End;
                fixed lv_weap9Str;
                fixed lv_weap9Dex;
                fixed lv_weap11Str;
                fixed lv_weap11Will;
                fixed lv_weap11Armor;
                fixed lv_weap11EL;
                fixed lv_weap12Str;
                fixed lv_weap12End;
                fixed lv_weap12Int;
                fixed lv_weap13Str;
                fixed lv_weap13Dex;
                fixed lv_weap14Dex;
                fixed lv_weap14End;
                fixed lv_weap15Int;
                fixed lv_weap16Int;
                fixed lv_weap16Will;
                fixed lv_weap17Str;
                fixed lv_weap17Dex;
                fixed lv_weap17End;
                fixed lv_weap18Str;
                fixed lv_weap18End;
                fixed lv_weap18Int;
                fixed lv_weap19WillCelestialOrb;
                fixed lv_weap19EndCelestialOrb;
                fixed lv_weap20Dex;
                fixed lv_weap20Int;
                fixed lv_weap20Will;
                unit lv_tU;
                // Variable Initialization
                lv_r = gf_ReversalFactor(lp_negative);
                lv_weap1Str = (4.0 * lv_r);
                lv_weap1Dex = (4.0 * lv_r);
                lv_weap2Str = (6.0 * lv_r);
                lv_weap2End = (4.0 * lv_r);
                lv_weap3Str = (3.0 * lv_r);
                lv_weap3End = (5.0 * lv_r);
                lv_weap4Str = (15.0 * lv_r);
                lv_weap5Str = (10.0 * lv_r);
                lv_weap5End = (10.0 * lv_r);
                lv_weap6Str = (2.0 * lv_r);
                lv_weap6End = (2.0 * lv_r);
                lv_weap7Str = (5.0 * lv_r);
                lv_weap7Dex = (3.0 * lv_r);
                lv_weap7End = (4.0 * lv_r);
                lv_weap8Dex = (10.0 * lv_r);
                lv_weap8Int = (6.0 * lv_r);
                lv_weap8End = (4.0 * lv_r);
                lv_weap9Str = (8.0 * lv_r);
                lv_weap9Dex = (4.0 * lv_r);
                lv_weap11Str = (7.0 * lv_r);
                lv_weap11Will = (6.0 * lv_r);
                lv_weap11Armor = (2.0 * lv_r);
                lv_weap11EL = (0.1 * lv_r);
                lv_weap12Str = (5.0 * lv_r);
                lv_weap12End = (5.0 * lv_r);
                lv_weap12Int = (4.0 * lv_r);
                lv_weap13Str = (10.0 * lv_r);
                lv_weap13Dex = (10.0 * lv_r);
                lv_weap14Dex = (2.0 * lv_r);
                lv_weap14End = (2.0 * lv_r);
                lv_weap15Int = (5.0 * lv_r);
                lv_weap16Int = (15.0 * lv_r);
                lv_weap16Will = (5.0 * lv_r);
                lv_weap17Str = (8.0 * lv_r);
                lv_weap17Dex = (6.0 * lv_r);
                lv_weap17End = (6.0 * lv_r);
                lv_weap18Str = (7.0 * lv_r);
                lv_weap18End = (4.0 * lv_r);
                lv_weap18Int = (4.0 * lv_r);
                lv_weap19WillCelestialOrb = (3.0 * lv_r);
                lv_weap19EndCelestialOrb = (2.0 * lv_r);
                lv_weap20Dex = (7.0 * lv_r);
                lv_weap20Int = (7.0 * lv_r);
                lv_weap20Will = (6.0 * lv_r);
                // Implementation
                UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;ShadowCloakStopAttack&quot;, gv_playerData[lp_player].lv_kobold, 1);
                if ((lp_itemType == &quot;SturdyWoodenStick&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap1Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap1Dex), 0));
                }
                else if ((lp_itemType == &quot;SharpIronPickaxe&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap2Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap2End), 0));
                }
                else if ((lp_itemType == &quot;RoughBlunderbuss&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap3Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap3End), 0));
                }
                else if ((lp_itemType == &quot;Wolfsbane&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap4Str), 0));
                }
                else if ((lp_itemType == &quot;MurlocDoomhammer&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap5Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap5End), 0));
                    if ((gv_playerData[lp_player].lv_alive == true) &amp;&amp; (lp_negative == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;MurlocRage&quot;, 1);
                    }
                    else {
                    }
                }
                else if ((lp_itemType == &quot;DullPickaxe&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap6Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap6End), 0));
                }
                else if ((lp_itemType == &quot;BerserkersBattleAxe&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap7Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap7Dex), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap7End), 0));
                }
                else if ((lp_itemType == &quot;CravensFishSticker&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap8Dex), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap8Int), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap8End), 0));
                }
                else if ((lp_itemType == &quot;GoldenPolearm&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap9Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap9Dex), 0));
                }
                else if ((lp_itemType == &quot;EnigmaticStaff&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap11Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap11Will), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_weap11Armor), gv_armorPrecision));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;LeechFraction[Energy]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;LeechFraction[Energy]&quot;, lp_player, FixedToString((lv_x + lv_weap11EL), 2));
                }
                else if ((lp_itemType == &quot;VenomousArbalest&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap12Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap12Int), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap12End), 0));
                }
                else if ((lp_itemType == &quot;ViciouslySharpArmblade&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap13Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap13Dex), 0));
                }
                else if ((lp_itemType == &quot;ObedienceRod&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap14Dex), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap14End), 0));
                }
                else if ((lp_itemType == &quot;ElderWand&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap15Int), 0));
                }
                else if ((lp_itemType == &quot;FrostNeedle&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap16Int), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap16Will), 0));
                }
                else if ((lp_itemType == &quot;Bloodcleaver&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap17Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap17Dex), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap17End), 0));
                    if ((gv_playerData[lp_player].lv_alive == true) &amp;&amp; (lp_negative == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;BloodcleaverHaste&quot;, 1);
                    }
                    else {
                    }
                }
                else if ((lp_itemType == &quot;JudgmentGavel&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap18Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap18End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap18Int), 0));
                }
                else if ((lp_itemType == &quot;CelestialOrb&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap19WillCelestialOrb), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_weap19EndCelestialOrb), 0));
                }
                else if ((lp_itemType == &quot;LiquidatorSpellblade&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap20Dex), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_weap20Int), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_weap20Will), 0));
                    if ((gv_playerData[lp_player].lv_alive == true) &amp;&amp; (lp_negative == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;LiquidatorSpellbladeActive&quot;, 1);
                    }
                    else {
                    }
                }
                else if ((lp_itemType == &quot;RepeatingCrossbow&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
                }
                else if ((lp_itemType == &quot;FishingRod&quot;)) {
                    UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;Fishing&quot;, 1);
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + (5.0 * lv_r)), 0));
                }
                else if ((lp_itemType == &quot;EpicFishingRod&quot;)) {
                    UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;Fishing&quot;, 1);
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
                }
                else if ((lp_itemType == &quot;TwinThrowingAxes&quot;)) {
                    UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;TwinThrowingAxesAlternate&quot;, 1);
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + (12.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + (10.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + (10.0 * lv_r)), 0));
                    if ((lp_negative == false)) {
                        if (gf_UnitExists(gf_KoboldOffhand(gv_playerData[lp_player].lv_kobold))) {
                            UnitSetPosition(gf_KoboldOffhand(gv_playerData[lp_player].lv_kobold), UnitGetPosition(gv_playerData[lp_player].lv_kobold), false);
                            lv_tU = gf_KoboldOffhand(gv_playerData[lp_player].lv_kobold);
                        }
                        else {
                        }
                        UnitInventoryCreate(gv_playerData[lp_player].lv_kobold, &quot;OffhandBlockedHelper&quot;);
                        if (gf_UnitExists(lv_tU)) {
                            UnitIssueOrder(gv_playerData[lp_player].lv_kobold, OrderTargetingUnit(null, lv_tU), c_orderQueueAddToFront);
                        }
                        else {
                        }
                    }
                    else {
                        gf_DropandRemove(gf_KoboldOffhand(gv_playerData[lp_player].lv_kobold));
                    }
                }
                else if ((lp_itemType == &quot;CommonSword&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + (5.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + (5.0 * lv_r)), 0));
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/1E8DF119&quot;), false);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B042C01D">
        <ScriptCode>
            void gf_EquipOffhands (int lp_player, string lp_itemType, bool lp_negative) {
                // Variable Declarations
                fixed lv_temp;
                fixed lv_r;
                fixed lv_offh1Str;
                fixed lv_offh1End;
                fixed lv_offh1Armor;
                fixed lv_offh2Omni;
                fixed lv_offh3Str;
                fixed lv_offh3End;
                fixed lv_offh3Armor;
                fixed lv_offh4End;
                fixed lv_offh4Int;
                fixed lv_offh4Will;
                fixed lv_offh4Armor;
                fixed lv_offh5Will;
                fixed lv_offh6End;
                fixed lv_offh6Armor;
                fixed lv_offh7Int;
                fixed lv_offh7Will;
                fixed lv_offh8Str;
                fixed lv_offh8End;
                fixed lv_offh9Str;
                fixed lv_offh9Dex;
                fixed lv_offh9End;
                fixed lv_offh10End;
                fixed lv_offh10Int;
                fixed lv_offh10Will;
                fixed lv_offh10Armor;
                fixed lv_offh11Dex;
                fixed lv_offh11End;
                fixed lv_offh11Armor;
                fixed lv_offh12StrDex;
                // Variable Initialization
                lv_r = gf_ReversalFactor(lp_negative);
                lv_offh1Str = (5.0 * lv_r);
                lv_offh1End = (3.0 * lv_r);
                lv_offh1Armor = (4.0 * lv_r);
                lv_offh2Omni = (2.0 * lv_r);
                lv_offh3Str = (8.0 * lv_r);
                lv_offh3End = (12.0 * lv_r);
                lv_offh3Armor = (6.0 * lv_r);
                lv_offh4End = (4.0 * lv_r);
                lv_offh4Int = (3.0 * lv_r);
                lv_offh4Will = (2.0 * lv_r);
                lv_offh4Armor = (3.0 * lv_r);
                lv_offh5Will = (6.0 * lv_r);
                lv_offh6End = (8.0 * lv_r);
                lv_offh6Armor = (5.0 * lv_r);
                lv_offh7Int = (10.0 * lv_r);
                lv_offh7Will = (10.0 * lv_r);
                lv_offh8Str = (2.0 * lv_r);
                lv_offh8End = (2.0 * lv_r);
                lv_offh9Str = (4.0 * lv_r);
                lv_offh9Dex = (8.0 * lv_r);
                lv_offh9End = (4.0 * lv_r);
                lv_offh10End = (6.0 * lv_r);
                lv_offh10Int = (7.0 * lv_r);
                lv_offh10Will = (7.0 * lv_r);
                lv_offh10Armor = (4.0 * lv_r);
                lv_offh11Dex = (3.0 * lv_r);
                lv_offh11End = (4.0 * lv_r);
                lv_offh11Armor = (3.0 * lv_r);
                lv_offh12StrDex = (5.0 * lv_r);
                // Implementation
                if ((lp_itemType == &quot;ViciousJavelin&quot;)) {
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;ShadowCloakStopAttack&quot;, gv_playerData[lp_player].lv_kobold, 1);
                }
                else {
                }
                if (((lp_player &gt;= 0) &amp;&amp; (lp_player &lt;= gv_players)) &amp;&amp; (StringSub(gv_perks[lp_player], 18, 18) == &quot;1&quot;)) {
                    lv_offh8Str += (1.0 * lv_r);
                    lv_offh8End += (1.0 * lv_r);
                }
                else {
                }
                if ((lp_itemType == &quot;IronBandedBuckler&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh1Str), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh1End), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player, FixedToString((lv_temp + lv_offh1Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;Lantern&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh2Omni), 0));
                }
                else if ((lp_itemType == &quot;SpikedShadowstoneScutum&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh3Str), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh3End), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player, FixedToString((lv_temp + lv_offh3Armor), gv_armorPrecision));
                    if ((lp_negative == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;TowerShield&quot;, 1);
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;TowerShieldRain&quot;, 1);
                    }
                    else {
                    }
                }
                else if ((lp_itemType == &quot;MysticsTribalShield&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh4End), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh4Int), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh4Will), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player, FixedToString((lv_temp + lv_offh4Armor), gv_armorPrecision));
                    gf_UpdateSpellCosts(lp_player);
                }
                else if ((lp_itemType == &quot;VengefulMurlocSkull&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh5Will), 0));
                }
                else if ((lp_itemType == &quot;HeavyTowerShield&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh6End), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player, FixedToString((lv_temp + lv_offh6Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;FelFireTorch&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh7Int), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh7Will), 0));
                    if ((lv_r == 1)) {
                        gv_aIData[lp_player].lv_supply.lv_lanterns = 0;
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_lanterns = 1;
                    }
                }
                else if ((lp_itemType == &quot;Torch&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh8Str), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh8End), 0));
                }
                else if ((lp_itemType == &quot;OutlandishHeartpiercer&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh9Str), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh9Dex), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh9End), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;SiphonLifeApply&quot;, &quot;Count&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;SiphonLifeApply&quot;, &quot;Count&quot;, lp_player, FixedToString((lv_temp + (2.0 * lv_r)), 0));
                }
                else if ((lp_itemType == &quot;FrostBarrier&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh10End), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh10Int), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh10Will), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player, FixedToString((lv_temp + lv_offh10Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;LightLeatherShield&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh11Dex), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + lv_offh11End), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_temp + lv_offh11Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;ViciousJavelin&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + lv_offh12StrDex), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_temp + lv_offh12StrDex), 0));
                }
                else if ((lp_itemType == &quot;Demonward&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + (5.0 * lv_r)), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + (8.0 * lv_r)), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_temp + (6.0 * lv_r)), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;GravesingersClaw&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + (4.0 * lv_r)), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_temp + (7.0 * lv_r)), 0));
                    if ((gv_playerData[lp_player].lv_alive == true) &amp;&amp; (lp_negative == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;GravesingersClawActive&quot;, 1);
                    }
                    else {
                    }
                }
                else if ((lp_itemType == &quot;CommonBuckler&quot;)) {
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_temp + (6.0 * lv_r)), 0));
                    lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_temp + (5.0 * lv_r)), gv_armorPrecision));
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/12688F49&quot;), false);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9C7C3969">
        <ScriptCode>
            void gf_EquipArmors (int lp_player, string lp_itemType, bool lp_negative) {
                // Variable Declarations
                int lv_y;
                fixed lv_x;
                fixed lv_r;
                fixed lv_armor1End;
                fixed lv_armor1Int;
                fixed lv_armor1Will;
                fixed lv_armor2Str;
                fixed lv_armor2End;
                fixed lv_armor2Will;
                fixed lv_armor2Armor;
                fixed lv_armor3End;
                fixed lv_armor3Armor;
                fixed lv_armor4Str;
                fixed lv_armor4StrBonus;
                fixed lv_armor4End;
                fixed lv_armor4Armor;
                fixed lv_armor5Int;
                fixed lv_armor5End;
                fixed lv_armor6Str;
                fixed lv_armor6Dex;
                fixed lv_armor6End;
                fixed lv_armor6Arm;
                fixed lv_armor6Range;
                fixed lv_armor7Str;
                fixed lv_armor7End;
                fixed lv_armor7Arm;
                fixed lv_armor8Str;
                fixed lv_armor8End;
                fixed lv_armor8Will;
                fixed lv_armor8Arm;
                fixed lv_armor9End;
                fixed lv_armor9Int;
                fixed lv_armor9Will;
                fixed lv_armor9Armor;
                fixed lv_armor10Str;
                fixed lv_armor10Dex;
                fixed lv_armor10End;
                fixed lv_armor11Str;
                fixed lv_armor11End;
                fixed lv_armor11Int;
                fixed lv_armor11Armor;
                fixed lv_armor12WillWarlocksVestments;
                fixed lv_armor12ArmorWarlocksVestments;
                fixed lv_armor13StrHighRangersChainmail;
                fixed lv_armor13DexHighRangersChainmail;
                fixed lv_armor13EndHighRangersChainmail;
                fixed lv_armor13ArmorHighRangersChainmail;
                fixed lv_armor13SightHighRangersChainmail;
                fixed lv_armor13StrBonus;
                fixed lv_armor13DexBonus;
                fixed lv_armor14Omni;
                fixed lv_armor14Armor;
                // Variable Initialization
                lv_r = gf_ReversalFactor(lp_negative);
                lv_armor1End = (3.0 * lv_r);
                lv_armor1Int = (3.0 * lv_r);
                lv_armor1Will = (4.0 * lv_r);
                lv_armor2Str = (3.0 * lv_r);
                lv_armor2End = (3.0 * lv_r);
                lv_armor2Will = (2.0 * lv_r);
                lv_armor2Armor = (2.0 * lv_r);
                lv_armor3End = (14.0 * lv_r);
                lv_armor3Armor = (6.0 * lv_r);
                lv_armor4Str = (8.0 * lv_r);
                lv_armor4StrBonus = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GladiatorsStrength&quot;, &quot;Amount&quot;, lp_player)) * lv_r);
                lv_armor4End = (8.0 * lv_r);
                lv_armor4Armor = (6.0 * lv_r);
                lv_armor5Int = (8.0 * lv_r);
                lv_armor5End = (6.0 * lv_r);
                lv_armor6Str = (3.0 * lv_r);
                lv_armor6Dex = (4.0 * lv_r);
                lv_armor6End = (3.0 * lv_r);
                lv_armor6Arm = (2.0 * lv_r);
                lv_armor6Range = (1.0 * lv_r);
                lv_armor7Str = (8.0 * lv_r);
                lv_armor7End = (8.0 * lv_r);
                lv_armor7Arm = (5.0 * lv_r);
                lv_armor8Str = (5.0 * lv_r);
                lv_armor8End = (4.0 * lv_r);
                lv_armor8Will = (3.0 * lv_r);
                lv_armor8Arm = (3.0 * lv_r);
                lv_armor9End = (4.0 * lv_r);
                lv_armor9Int = (5.0 * lv_r);
                lv_armor9Will = (5.0 * lv_r);
                lv_armor9Armor = (3.0 * lv_r);
                lv_armor10Str = (8.0 * lv_r);
                lv_armor10Dex = (7.0 * lv_r);
                lv_armor10End = (5.0 * lv_r);
                lv_armor11Str = (5.0 * lv_r);
                lv_armor11End = (8.0 * lv_r);
                lv_armor11Int = (2.0 * lv_r);
                lv_armor11Armor = (5.0 * lv_r);
                lv_armor12WillWarlocksVestments = (10.0 * lv_r);
                lv_armor12ArmorWarlocksVestments = (1.0 * lv_r);
                lv_armor13StrHighRangersChainmail = (2.0 * lv_r);
                lv_armor13DexHighRangersChainmail = (3.0 * lv_r);
                lv_armor13EndHighRangersChainmail = (5.0 * lv_r);
                lv_armor13ArmorHighRangersChainmail = (4.0 * lv_r);
                lv_armor13SightHighRangersChainmail = (2.0 * lv_r);
                lv_armor13StrBonus = (2.0 * lv_r);
                lv_armor13DexBonus = (2.0 * lv_r);
                lv_armor14Omni = (5.0 * lv_r);
                lv_armor14Armor = (8.0 * lv_r);
                // Implementation
                if ((lp_itemType == &quot;LeatherCoat&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor1End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor1Int), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor1Will), 0));
                }
                else if ((lp_itemType == &quot;WarmWoolTunic&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor2Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor2End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor2Will), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor2Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;HeavyIronBreastplate&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor3End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player, FixedToString((lv_x + lv_armor3Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;GarishGladiatorsGarb&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + (lv_armor4Str + lv_armor4StrBonus)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor4End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor[0]&quot;, lp_player, FixedToString((lv_x + lv_armor4Armor), gv_armorPrecision));
                    if ((gv_playerData[lp_player].lv_alive == true)) {
                        if ((lp_negative == true) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;GladiatorsStrength&quot;) == true)) {
                            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;GladiatorsStrength&quot;, UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;GladiatorsStrength&quot;));
                        }
                        else {
                            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;GladiatorsStrength&quot;, gv_playerData[lp_player].lv_kobold, FixedToInt(lv_armor4StrBonus));
                        }
                    }
                    else {
                    }
                }
                else if ((lp_itemType == &quot;MagnificentChefsHat&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor5Int), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor5End), 0));
                }
                else if ((lp_itemType == &quot;HuntsmansJacket&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor6Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor6Dex), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor6End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor6Arm), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;DreadplateArmor&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor7Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor7End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor7Arm), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;IronStuddedVest&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor8Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor8End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor8Will), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor8Arm), gv_armorPrecision));
                    if ((lp_negative == true)) {
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;SpellAbsorb&quot;, 1);
                        UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;SpellAbsorbCooldown&quot;, 1);
                    }
                    else {
                    }
                }
                else if ((lp_itemType == &quot;BearShamansShroud&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor9End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor9Int), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor9Will), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor9Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;BloodthirstyPirateHat&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor10Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor10Dex), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor10End), 0));
                }
                else if ((lp_itemType == &quot;GoldenHauberk&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor11Str), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor11End), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor11Int), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor11Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;WarlocksVestments&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor12WillWarlocksVestments), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor12ArmorWarlocksVestments), gv_armorPrecision));
                    gf_UpdateSpellCosts(lp_player);
                }
                else if ((lp_itemType == &quot;MasterRangersMaille&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor13StrHighRangersChainmail), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor13DexHighRangersChainmail), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor13EndHighRangersChainmail), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor13ArmorHighRangersChainmail), gv_armorPrecision));
                    gf_ModifyUnitSight(&quot;Kobold&quot;, lp_player, (2.0 * lv_r));
                    if ((gv_playerData[lp_player].lv_alive == true)) {
                        if ((lp_negative == true)) {
                            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleStrDex&quot;, UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleStrDex&quot;));
                            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleStrEnd&quot;, UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleStrEnd&quot;));
                            UnitBehaviorRemove(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleIntWil&quot;, UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleIntWil&quot;));
                        }
                        else {
                            UnitGroupLoopBegin(gv_pets[lp_player]);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_AcquirePet(lp_player, UnitGetType(UnitGroupLoopCurrent()));
                            }
                            UnitGroupLoopEnd();
                        }
                    }
                    else {
                    }
                }
                else if ((lp_itemType == &quot;SpellbreakerArmor&quot;)) {
                    gf_MetalArmor(gv_playerData[lp_player].lv_kobold, lv_r);
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + lv_armor14Omni), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + lv_armor14Armor), gv_armorPrecision));
                }
                else if ((lp_itemType == &quot;StormwizardsRobes&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + (8.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + (8.0 * lv_r)), 0));
                }
                else if ((lp_itemType == &quot;IronbarkArmor&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player, FixedToString((lv_x + (5.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + (7.0 * lv_r)), 0));
                }
                else if ((lp_itemType == &quot;CommonArmor&quot;)) {
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + (4.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player, FixedToString((lv_x + (3.0 * lv_r)), 0));
                    lv_x = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_x + (4.0 * lv_r)), 0));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0F1460B4">
        <ScriptCode>
            unit gf_KoboldMainHand (unit lp_kobold) {
                // Implementation
                if (gf_UnitExists(lp_kobold)) {
                    return UnitGroupUnit(gv_playerData[UnitGetOwner(lp_kobold)].lv_equippedMainHandG, 1);
                }
                else {
                    return null;
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D424D3E5">
        <ScriptCode>
            unit gf_KoboldOffhand (unit lp_kobold) {
                // Implementation
                if (gf_UnitExists(lp_kobold)) {
                    return UnitGroupUnit(gv_playerData[UnitGetOwner(lp_kobold)].lv_equippedOffhandG, 1);
                }
                else {
                    return null;
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3A94B51B">
        <ScriptCode>
            unit gf_KoboldArmor (unit lp_kobold) {
                // Implementation
                if (gf_UnitExists(lp_kobold)) {
                    return UnitGroupUnit(gv_playerData[UnitGetOwner(lp_kobold)].lv_equippedArmorG, 1);
                }
                else {
                    return null;
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B7E833F0">
        <ScriptCode>
            fixed gf_ReversalFactor (bool lp_booly) {
                // Variable Declarations
                fixed lv_reversalFactor;
                // Variable Initialization
                lv_reversalFactor = 1.0;
                // Implementation
                if ((lp_booly == true)) {
                    lv_reversalFactor = -1.0;
                }
                else {
                }
                return lv_reversalFactor;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="276F8702">
        <ScriptCode>
            void gf_MetalArmor (unit lp_unit, fixed lp_r) {
                // Implementation
                if ((lp_r == 1.0)) {
                    UnitBehaviorAdd(lp_unit, &quot;MetalArmor&quot;, lp_unit, 1);
                }
                else {
                    UnitBehaviorRemove(lp_unit, &quot;MetalArmor&quot;, 1);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A5E1346B">
        <ScriptCode>
            void gf_GladiatorsStrength (int lp_player) {
                // Variable Declarations
                const fixed lv_increment = 1.0;
                const int lv_stackCap = 10;
                fixed lv_gladiatorGarbCurrentBonus;
                fixed lv_currentStrength;
                // Variable Initialization
                // Implementation
                if (((lp_player &gt;= 0) &amp;&amp; (lp_player &lt;= 15)) &amp;&amp; (gv_playerData[lp_player].lv_alive == true)) {
                    lv_gladiatorGarbCurrentBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GladiatorsStrength&quot;, &quot;Amount&quot;, lp_player));
                    lv_currentStrength = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;GarishGladiatorsGarb&quot;) == true) &amp;&amp; (UnitBehaviorCount(gv_playerData[lp_player].lv_kobold, &quot;GladiatorsStrength&quot;) &lt; lv_stackCap)) {
                        UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;GladiatorsStrength&quot;, gv_playerData[lp_player].lv_kobold, 1);
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;GladiatorsStrength&quot;, &quot;Amount&quot;, lp_player, FixedToString((lv_gladiatorGarbCurrentBonus + lv_increment), 0));
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString((lv_currentStrength + lv_increment), 0));
                        gf_Quicktag(gv_playerData[lp_player].lv_kobold, StringExternal(&quot;Param/Value/346EAD87&quot;), 3.0, 24);
                        gf_UpdateStatsAll(lp_player);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="91BCE039">
        <ScriptCode>
            void gf_NightlyBeerCasks () {
                // Variable Declarations
                unitgroup lv_pirates;
                unitgroup lv_beerOutposts;
                // Variable Initialization
                lv_pirates = gf_UnitsInUnitGroupWithBuff(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), &quot;BloodthirstyPirateHat&quot;);
                lv_beerOutposts = UnitGroupEmpty();
                // Implementation
                UnitGroupLoopBegin(lv_pirates);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupAddUnitGroup(lv_beerOutposts, UnitGroup(&quot;StorageOutpost&quot;, UnitGetOwner(UnitGroupLoopCurrent()), RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(lv_beerOutposts);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGroupCount(UnitInventoryGroup(UnitGroupLoopCurrent()), c_unitCountAlive) &lt; 36)) {
                        UnitInventoryCreate(UnitGroupLoopCurrent(), &quot;Beer&quot;);
                        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="08A51EAF">
        <ScriptCode>
            void gf_SpawnScrollofTransmutation (point lp_a, fixed lp_b) {
                // Implementation
                if ((libNtve_gf_RandomPercent() &lt;= lp_b)) {
                    UnitCreate(1, &quot;ScrollofTransmutation&quot;, 0, 0, lp_a, libNtve_gf_RandomAngle());
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A494B8A2">
        <ScriptCode>
            void gf_ModifyTorchIntensity (int lp_player, fixed lp_amount) {
                // Variable Declarations
                fixed lv_intensity;
                // Variable Initialization
                lv_intensity = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;FelFireTorchIntensity&quot;, &quot;Amount&quot;, lp_player));
                // Implementation
                lv_intensity = libNtve_gf_ArithmeticRealClamp((lv_intensity + lp_amount), 0.0, 100.0);
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;FelFireTorchIntensity&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_intensity, 1));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;FelFlamesDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((1.0 + (lv_intensity * 0.05)), 1));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="807F401A">
        <ScriptCode>
            void gf_ItemCleansingPotion (unit lp_unit, unit lp_item, bool lp_itemUsed) {
                // Implementation
                if ((lp_itemUsed == false)) {
                    UnitAddChargeUsed(lp_item, &quot;Abil/GenericUseItem3Charges&quot;, 1.0);
                }
                else {
                }
                if ((UnitGetChargeUsed(lp_item, &quot;Abil/GenericUseItem3Charges&quot;) == 3.0)) {
                    gf_DropandRemove(lp_item);
                }
                else {
                }
                gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/BA915C75&quot;), 2.0, 24);
                gf_RemoveAilments(lp_unit);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3B3F4A64">
        <ScriptCode>
            void gf_ItemMurlocDoomhammer (unit lp_unit, unit lp_item) {
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (UnitInventoryContainer(lp_item) == gv_mainHandSlot)) {
                    UnitCreateEffectUnit(lp_unit, &quot;MurlocRage&quot;, lp_unit);
                    UnitBehaviorAdd(lp_unit, &quot;MurlocDoomhammerCooldown&quot;, lp_unit, 1);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_itemEquipReq);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F02A6FA1">
        <ScriptCode>
            void gf_ItemGoldenHauberk (unit lp_unit, unit lp_item) {
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (UnitInventoryContainer(lp_item) == gv_armorSlot)) {
                    UnitCreateEffectUnit(lp_unit, &quot;GoldenHauberkHealSearch&quot;, lp_unit);
                    UnitBehaviorAdd(lp_unit, &quot;GoldenHauberkCooldown&quot;, lp_unit, 1);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_itemEquipReq);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A62FB2BA">
        <ScriptCode>
            void gf_ItemShovelDig (unit lp_unit, unit lp_item, bool lp_itemUsed) {
                // Variable Declarations
                point lv_digLocation;
                // Variable Initialization
                lv_digLocation = UnitGetPosition(lp_unit);
                // Implementation
                if ((lp_itemUsed == false)) {
                    UnitAddChargeUsed(lp_item, &quot;Abil/GenericUseItem2Charges&quot;, 1.0);
                }
                else {
                }
                if ((UnitGetChargeUsed(lp_item, &quot;Abil/GenericUseItem2Charges&quot;) == 2.0)) {
                    gf_DropandRemove(lp_item);
                }
                else {
                }
                if ((gv_questIndexActive == 11)) {
                    UnitCreateEffectUnit(lp_unit, &quot;ShovelDig&quot;, lp_unit);
                    if ((DistanceBetweenPoints(lv_digLocation, gv_piratesTreasureLocation) &lt;= (1.5 + (0.05 * gv_skillMining[UnitGetOwner(lp_unit)])))) {
                        gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/8854468B&quot;), 2.0, 24);
                        gv_skillPointsPlayer[UnitGetOwner(lp_unit)] += 10;
                        gf_IncreaseSkillType(UnitGetOwner(lp_unit), 2, 10);
                        gf_PiratesFound(lp_unit);
                    }
                    else {
                        gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/410A6960&quot;), 2.0, 24);
                        gf_PiratesDirection(lp_unit);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, StringExternal(&quot;Param/Value/170A3719&quot;));
                    gf_CreateLoot(&quot;Stone&quot;, lv_digLocation, 1.5, true, 100, 0);
                    gf_CreateLoot(&quot;Stone&quot;, lv_digLocation, 1.5, true, 100, 0);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="37BBA9C7">
        <ScriptCode>
            void gf_ItemBearPeltSplit (unit lp_unit, unit lp_item, bool lp_consume) {
                // Implementation
                if ((lp_consume == true)) {
                    gf_DropandRemove(lp_item);
                }
                else {
                }
                gf_CreateItemForUnit(lp_unit, &quot;Leather&quot;, 2);
                gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/855E4E44&quot;), 3.0, 24);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3E765C85">
        <ScriptCode>
            void gf_ItemRaiseDead (unit lp_unit, unit lp_item, bool lp_consume) {
                int auto1F30808A_ae;
                int auto1F30808A_ai;
                // Variable Declarations
                int lv_a;
                int lv_amount;
                // Variable Initialization
                lv_amount = 8;
                // Implementation
                if ((lp_consume == true)) {
                    gf_DropandRemove(lp_item);
                }
                else {
                }
                gf_SetScaledStats(&quot;Ghoul&quot;, UnitGetOwner(lp_unit));
                auto1F30808A_ae = lv_amount;
                auto1F30808A_ai = 1;
                lv_a = 1;
                for ( ; ( (auto1F30808A_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto1F30808A_ae) || (auto1F30808A_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto1F30808A_ae) ) ; lv_a += auto1F30808A_ai ) {
                    UnitCreate(1, &quot;Ghoul&quot;, 0, UnitGetOwner(lp_unit), gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_unit), 4.0)), libNtve_gf_RandomAngle());
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="93C75FE4">
        <ScriptCode>
            void gf_ItemDraughtofDecay (unit lp_unit, unit lp_item, bool lp_consume) {
                // Implementation
                if ((lp_consume == true)) {
                    gf_DropandRemove(lp_item);
                }
                else {
                }
                gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/FFA02403&quot;), 2.0, 24);
                UnitCreateEffectUnit(lp_unit, &quot;UnlivingStrengthApply&quot;, lp_unit);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1C3345D1">
        <ScriptCode>
            void gf_ItemDemonward (unit lp_unit, unit lp_item) {
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;) &amp;&amp; (UnitInventoryContainer(lp_item) == gv_offhandSlot)) {
                    gf_SetScaledStats(&quot;InfernalMinion&quot;, UnitGetOwner(lp_unit));
                    UnitCreateEffectUnit(lp_unit, &quot;DemonwardSummon&quot;, lp_unit);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_itemEquipReq);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="14237333">
        <ScriptCode>
            void gf_ItemOrbofDarkness (unit lp_unit, unit lp_item, bool lp_consume) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                    if ((lp_consume == true)) {
                        gf_DropandRemove(lp_item);
                    }
                    else {
                    }
                    gf_VeilofDarkness(30.0, gf_GetTeamOfPlayer(lv_i));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="ED5B70B8">
        <ScriptCode>
            void gf_ItemJavelin (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                    UnitAbilityReset(lp_unit, AbilityCommand(&quot;JavelinCooldown&quot;, 0), c_spendLocationPlayer);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EDBC79DD">
        <ScriptCode>
            void gf_ItemLiquidatorSpellblade (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                    UnitAbilityReset(lp_unit, AbilityCommand(&quot;LiquidatorSpellbladeCooldown&quot;, 0), c_spendLocationPlayer);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4CE76799">
        <ScriptCode>
            void gf_ItemNightcrawler (unit lp_unit, unit lp_item, bool lp_consume) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                    if ((lp_consume == true)) {
                        gf_DropandRemove(lp_item);
                    }
                    else {
                    }
                    UnitBehaviorAdd(lp_unit, &quot;Nightcrawler&quot;, lp_unit, 1);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="07937388">
        <ScriptCode>
            void gf_ItemLumberParts (unit lp_unit, unit lp_item) {
                // Implementation
                if ((UnitGroupCount(gv_playerData[UnitGetOwner(lp_unit)].lv_resources.lv_lumberParts, c_unitCountAlive) &gt;= 2)) {
                    gf_CreateItemForUnit(lp_unit, &quot;Lumber&quot;, 1);
                    UnitGroupRemove(gv_playerData[UnitGetOwner(lp_unit)].lv_resources.lv_lumberParts, lp_item);
                    gf_DropandRemove(lp_item);
                    gf_DropandRemove(UnitGroupRandomUnit(gv_playerData[UnitGetOwner(lp_unit)].lv_resources.lv_lumberParts, c_unitCountAlive));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B1DA7FD4">
        <ScriptCode>
            void gf_ItemFireworks (unit lp_unit, unit lp_item) {
                int auto95E4A53A_val;
                // Implementation
                auto95E4A53A_val = RandomInt(1, 3);
                if (auto95E4A53A_val == 1) {
                    UnitCreate(1, &quot;FireworksRed&quot;, 0, 0, UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
                    UnitBehaviorAdd(UnitLastCreated(), &quot;FireworksTimedLife&quot;, UnitLastCreated(), 1);
                }
                else if (auto95E4A53A_val == 2) {
                    UnitCreate(1, &quot;FireworksYellow&quot;, 0, 0, UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
                    UnitBehaviorAdd(UnitLastCreated(), &quot;FireworksTimedLife&quot;, UnitLastCreated(), 1);
                }
                else if (auto95E4A53A_val == 3) {
                    UnitCreate(1, &quot;FireworksBlue&quot;, 0, 0, UnitGetPosition(lp_unit), libNtve_gf_RandomAngle());
                    UnitBehaviorAdd(UnitLastCreated(), &quot;FireworksTimedLife&quot;, UnitLastCreated(), 1);
                }
                else {
                }
                gf_DropandRemove(lp_item);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B1E8BB54">
        <ScriptCode>
            bool gf_FishingStart (unit lp_unit, point lp_target) {
                int auto51B37CA7_ae;
                int auto51B37CA7_ai;
                // Variable Declarations
                int lv_a;
                int lv_i;
                int lv_fishingRegion;
                fixed lv_fishingTime;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_fishingRegion = gf_FishRegionAtPoint(lp_target);
                lv_fishingTime = libNtve_gf_ArithmeticRealClamp((gv_fishTime * gf_FishingSpeedModifier(lp_unit)), 5.0, 100.0);
                lv_success = true;
                // Implementation
                if ((lv_fishingRegion != 0)) {
                    UnitSetCustomValue(lp_unit, 7, 0.0);
                    CatalogFieldValueSet(c_gameCatalogBehavior, &quot;Fishing&quot;, &quot;Duration&quot;, lv_i, FixedToString(lv_fishingTime, 1));
                    CatalogFieldValueSet(c_gameCatalogBehavior, &quot;FishingBobber&quot;, &quot;Duration&quot;, lv_i, FixedToString(lv_fishingTime, 1));
                    gf_Quicktag(lp_unit, StringExternal(&quot;Param/Value/9FA40A0A&quot;), 3.0, 22);
                    UnitIssueOrder(lp_unit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                    libNtve_gf_MakeUnitFacePoint(lp_unit, lp_target, 0.25);
                    UnitCreate(1, &quot;FishingTarget&quot;, c_unitCreateIgnorePlacement, lv_i, lp_target, libNtve_gf_RandomAngle());
                    UnitSetHeight(UnitLastCreated(), (gv_fishRegionEleveation[lv_fishingRegion] - 0.05), 0.0);
                    UnitBehaviorAdd(lp_unit, &quot;Fishing&quot;, lp_unit, 1);
                    UnitBehaviorAdd(UnitLastCreated(), &quot;FishingBobber&quot;, lp_unit, 1);
                    UnitCreateEffectUnit(lp_unit, &quot;FishingLine&quot;, UnitLastCreated());
                    if ((gv_questIndexActive == 16)) {
                        auto51B37CA7_ae = gv_expeditionAreas;
                        auto51B37CA7_ai = 1;
                        lv_a = 1;
                        for ( ; ( (auto51B37CA7_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto51B37CA7_ae) || (auto51B37CA7_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto51B37CA7_ae) ) ; lv_a += auto51B37CA7_ai ) {
                            if ((RegionContainsPoint(RegionCircle(gv_expeditionActivePoint[lv_a], gv_expeditionRadius), UnitGetPosition(UnitLastCreated())) == true)) {
                                if ((gv_expeditionProgress[gv_playerData[lv_i].lv_team][lv_a] == false)) {
                                    gf_Quicktag(UnitLastCreated(), StringExternal(&quot;Param/Value/90EAEA5D&quot;), 3.0, 22);
                                }
                                else {
                                }
                                UnitSetCustomValue(lp_unit, 7, IntToFixed(lv_a));
                            }
                            else {
                            }
                        }
                    }
                    else {
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, StringExternal(&quot;Param/Value/8639080B&quot;));
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="F9D614E8">
        <Item Type="CustomScript" Id="77E5F96D"/>
        <Item Type="CustomScript" Id="EBD1F7DA"/>
        <Item Type="CustomScript" Id="B1F37E9F"/>
    </Element>
    <Element Type="CustomScript" Id="77E5F96D">
        <ScriptCode>
            int gf_FishRegionAtPoint (point lp_point) {
                int auto92BE4A68_ae;
                int auto92BE4A68_ai;
                // Variable Declarations
                int lv_a;
                int lv_value;
                // Variable Initialization
                // Implementation
                auto92BE4A68_ae = gv_fishRegions;
                auto92BE4A68_ai = 1;
                lv_a = 1;
                for ( ; ( (auto92BE4A68_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto92BE4A68_ae) || (auto92BE4A68_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto92BE4A68_ae) ) ; lv_a += auto92BE4A68_ai ) {
                    if ((RegionContainsPoint(gv_fishRegion[lv_a], lp_point) == true) &amp;&amp; (WorldHeight(c_heightMapGround, lp_point) &lt;= gv_fishRegionEleveation[lv_a])) {
                        lv_value = lv_a;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EBD1F7DA">
        <ScriptCode>
            string gf_GetFishReward (unit lp_bobber) {
                // Variable Declarations
                string lv_value;
                // Variable Initialization
                // Implementation
                if ((RandomInt(1, 75) == 1)) {
                    lv_value = &quot;TheMurlocket&quot;;
                }
                else if ((gv_dayNight == 1)) {
                    lv_value = gv_fishReward[RandomInt(1, gv_fishRewards)];
                }
                else if (true) {
                    lv_value = gv_fishReward[RandomInt(2, gv_fishRewards)];
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B1F37E9F">
        <ScriptCode>
            fixed gf_FishingSpeedModifier (unit lp_unit) {
                // Variable Declarations
                fixed lv_value;
                // Variable Initialization
                lv_value = 1.0;
                // Implementation
                lv_value *= (1.0 - (IntToFixed(gv_skillForaging[UnitGetOwner(lp_unit)]) * 0.01));
                if ((UnitHasBehavior(lp_unit, &quot;EpicFishingRod&quot;) == true)) {
                    lv_value *= (1.0 - 0.15);
                }
                else {
                }
                if ((UnitHasBehavior(lp_unit, &quot;Nightcrawler&quot;) == true)) {
                    lv_value *= (1.0 - 0.35);
                }
                else {
                }
                if ((gv_raining == true)) {
                    lv_value *= (1.0 - 0.1);
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="7F1BE74C">
        <Item Type="CustomScript" Id="8E57B985"/>
        <Item Type="CustomScript" Id="B9D65882"/>
        <Item Type="CustomScript" Id="1A416141"/>
        <Item Type="CustomScript" Id="02970F85"/>
        <Item Type="CustomScript" Id="B1C0FC38"/>
        <Item Type="CustomScript" Id="D74CA920"/>
        <Item Type="CustomScript" Id="03FE4897"/>
        <Item Type="CustomScript" Id="767241B7"/>
        <Item Type="CustomScript" Id="ACAFE371"/>
        <Item Type="CustomScript" Id="A5175DAF"/>
        <Item Type="CustomScript" Id="C8900170"/>
        <Item Type="CustomScript" Id="846DFD37"/>
        <Item Type="CustomScript" Id="007040B5"/>
        <Item Type="CustomScript" Id="8B30627D"/>
        <Item Type="CustomScript" Id="AFE30DEA"/>
        <Item Type="CustomScript" Id="686834E8"/>
        <Item Type="CustomScript" Id="05602DE8"/>
        <Item Type="CustomScript" Id="313BFD62"/>
    </Element>
    <Element Type="CustomScript" Id="8E57B985">
        <ScriptCode>
            void gf_BirdScoutLand (unit lp_bird, unit lp_outpost) {
                // Variable Declarations
                point lv_targetLocation;
                // Variable Initialization
                lv_targetLocation = PointWithOffset(UnitGetPosition(lp_outpost), gv_birdScoutXOffset, gv_birdScoutYOffset);
                // Implementation
                UnitBehaviorRemove(lp_bird, &quot;BirdLookingForNest&quot;, 1);
                UnitSetState(lp_bird, c_unitStateFidget, false);
                UnitIssueOrder(lp_bird, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_targetLocation), c_orderQueueReplace);
                UnitSetHeight(lp_bird, gv_birdScoutZOffset, (DistanceBetweenPoints(UnitGetPosition(lp_bird), lv_targetLocation) / UnitGetPropertyFixed(lp_bird, c_unitPropMovementSpeed, c_unitPropCurrent)));
                while (!((((DistanceBetweenPoints(UnitGetPosition(lp_bird), lv_targetLocation) &lt;= 0.1)) || (lp_bird == null) || (lp_outpost == null) || (UnitHasBehavior(lp_outpost, &quot;OutpostGotBird&quot;) == true)))) {
                    Wait(0.125, c_timeGame);
                }
                if (gf_UnitExists(lp_outpost) &amp;&amp; (UnitHasBehavior(lp_outpost, &quot;OutpostGotBird&quot;) == false)) {
                    UnitSetHeight(lp_bird, (WorldHeight(c_heightMapGround, lv_targetLocation) + gv_birdScoutZOffset), 0.0625);
                    UnitSetState(lp_bird, c_unitStateIgnoreTerrainZ, true);
                    UnitBehaviorAdd(lp_bird, &quot;BirdNesting&quot;, lp_outpost, 1);
                    UnitBehaviorAdd(lp_outpost, &quot;OutpostGotBird&quot;, lp_bird, 1);
                    gf_Quicktag(lp_outpost, StringExternal(&quot;Param/Value/22F1D842&quot;), 2.0, 24);
                }
                else {
                    UnitBehaviorAdd(lp_bird, &quot;BirdLookingForNest&quot;, lp_bird, 1);
                    gf_BirdScoutTakeOff(lp_bird, lp_outpost);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B9D65882">
        <ScriptCode>
            void gf_BirdScoutTakeOff (unit lp_bird, unit lp_outpost) {
                // Implementation
                UnitSetState(lp_bird, c_unitStateIgnoreTerrainZ, false);
                UnitSetHeight(lp_bird, gv_birdScoutZOffset, 0.0);
                UnitSetHeight(lp_bird, RandomFixed(5.0, 6.0), 4.0);
                UnitSetState(lp_bird, c_unitStateFidget, true);
                UnitBehaviorAdd(lp_bird, &quot;BirdNoLand&quot;, lp_bird, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1A416141">
        <ScriptCode>
            void gf_UpdateOutpostVisual (unit lp_hut) {
                // Variable Declarations
                int lv_current;
                const int lv_maximum = 26;
                // Variable Initialization
                lv_current = gf_GetNumberOfItemsInOutpost(lp_hut);
                // Implementation
                TextExpressionSetToken(&quot;Param/Expression/1C91219E&quot;, &quot;A&quot;, gf_GetPlayerName(UnitGetOwner(lp_hut), 0));
                TextExpressionSetToken(&quot;Param/Expression/1C91219E&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/DA0524E8&quot;));
                TextExpressionSetToken(&quot;Param/Expression/1C91219E&quot;, &quot;C&quot;, IntToText(lv_current));
                TextExpressionSetToken(&quot;Param/Expression/1C91219E&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/DF89C6EA&quot;));
                TextExpressionSetToken(&quot;Param/Expression/1C91219E&quot;, &quot;E&quot;, IntToText(lv_maximum));
                UnitSetInfoText(lp_hut, StringExternal(&quot;Param/Value/EA02E31A&quot;), TextExpressionAssemble(&quot;Param/Expression/1C91219E&quot;), StringExternal(&quot;Param/Value/A80C2CE3&quot;));
                if ((UnitGetType(lp_hut) == &quot;StorageOutpost&quot;)) {
                    if ((lv_current &gt;= 1)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity1&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity1&quot;, 1);
                    }
                    if ((lv_current &gt;= 2)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity2&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity2&quot;, 1);
                    }
                    if ((lv_current &gt;= 4)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity3&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity3&quot;, 1);
                    }
                    if ((lv_current &gt;= 6)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity4&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity4&quot;, 1);
                    }
                    if ((lv_current &gt;= 8)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity5&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity5&quot;, 1);
                    }
                    if ((lv_current &gt;= 10)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity6&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity6&quot;, 1);
                    }
                    if ((lv_current &gt;= 12)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity7&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity7&quot;, 1);
                    }
                    if ((lv_current &gt;= 14)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity8&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity8&quot;, 1);
                    }
                    if ((lv_current &gt;= 16)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity9&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity9&quot;, 1);
                    }
                    if ((lv_current &gt;= 18)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity10&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity10&quot;, 1);
                    }
                    if ((lv_current &gt;= 20)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity11&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity11&quot;, 1);
                    }
                    if ((lv_current &gt;= 22)) {
                        UnitBehaviorAdd(lp_hut, &quot;StorageOutpostCapacity12&quot;, lp_hut, 1);
                    }
                    else {
                        UnitBehaviorRemove(lp_hut, &quot;StorageOutpostCapacity12&quot;, 1);
                    }
                }
                else {
                }
                gf_UpdateShipmentAvailability(lp_hut);
                if (gf_RewardCatIndexActive(UnitGetOwner(lp_hut), 3, 1)) {
                    UnitBehaviorAdd(lp_hut, &quot;OutpostCandles&quot;, lp_hut, 1);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="02970F85">
        <ScriptCode>
            void gf_UpdateShipmentAvailability (unit lp_unit) {
                // Variable Declarations
                unitgroup lv_inventory;
                bool lv_well;
                // Variable Initialization
                lv_inventory = UnitInventoryGroup(lp_unit);
                // Implementation
                UnitGroupLoopBegin(lv_inventory);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
                        lv_well = true;
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if ((lv_well == true)) {
                    UnitBehaviorAdd(lp_unit, &quot;ShipmentAvailable&quot;, lp_unit, 1);
                }
                else {
                    UnitBehaviorRemove(lp_unit, &quot;ShipmentAvailable&quot;, 1);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B1C0FC38">
        <ScriptCode>
            int gf_GetNumberOfItemsInOutpost (unit lp_outpost) {
                // Variable Declarations
                int lv_a;
                int lv_b;
                fixed lv_cV;
                int lv_index;
                unitgroup lv_inventory;
                int lv_total;
                // Variable Initialization
                lv_inventory = UnitInventoryGroup(lp_outpost);
                lv_total = UnitGroupCount(lv_inventory, c_unitCountAlive);
                // Implementation
                if ((lv_total &gt;= 26)) {
                    UnitSetCustomValue(lp_outpost, 0, 1.0);
                }
                else {
                    UnitSetCustomValue(lp_outpost, 0, 0.0);
                }
                if ((lv_total &gt; gv_playerData[UnitGetOwner(lp_outpost)].lv_gameStats.lv_storedItems)) {
                    gv_playerData[UnitGetOwner(lp_outpost)].lv_gameStats.lv_storedItems = lv_total;
                }
                else {
                }
                return lv_total;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D74CA920">
        <ScriptCode>
            void gf_SellResource (unit lp_item, int lp_seller, unit lp_outpost) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                // Implementation
                if (gf_UnitExists(lp_item)) {
                    lv_type = UnitGetType(lp_item);
                    if (gf_TypeIsTradeGood(lv_type)) {
                        lv_amount = gf_GetSellPrice(lv_type, lp_seller);
                        gf_DropandRemove(lp_item);
                        PlayerModifyPropertyInt(lp_seller, c_playerPropMinerals, c_playerPropOperAdd, lv_amount);
                        gv_playerData[lp_seller].lv_gameStats.lv_goldEarned += lv_amount;
                        gf_Quicktag(gv_playerData[lp_seller].lv_kobold, (StringExternal(&quot;Param/Value/0D604AAE&quot;) + (IntToText(lv_amount) + StringExternal(&quot;Param/Value/0DEC48DF&quot;))), 2.0, 24);
                        SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lp_seller), gv_playerData[lp_seller].lv_kobold, 0.0, 100.0, 0.0);
                        gf_UpdateSellPrice(lv_type, lv_amount, gf_GetTradeIncrement(lv_type));
                    }
                    else {
                        UnitGroupRemove(gv_aIData[lp_seller].lv_tradeItems, lp_item);
                        UnitSetPosition(lp_item, PointWithOffsetPolar(UnitGetPosition(lp_outpost), RandomFixed(1.3, 1.6), libNtve_gf_RandomAngle()), false);
                        UnitIssueOrder(lp_outpost, OrderTargetingUnit(null, lp_item), c_orderQueueAddToEnd);
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="03FE4897">
        <ScriptCode>
            bool gf_BuyResource (unit lp_buyer, string lp_type) {
                // Variable Declarations
                int lv_i;
                int lv_amount;
                bool lv_succeed;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_buyer);
                lv_amount = gf_GetBuyPrice(lp_type, UnitGetOwner(lp_buyer));
                lv_succeed = true;
                // Implementation
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_amount)) {
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_amount);
                    gf_CreateItemForUnit(lp_buyer, lp_type, 1);
                    gf_Quicktag(lp_buyer, (UnitTypeGetName(lp_type) + StringExternal(&quot;Param/Value/AD8AD045&quot;)), 2.0, 24);
                    SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), lp_buyer, 0.0, 100.0, 0.0);
                    gf_UpdateBuyPrice(lp_type, lv_amount, 1);
                }
                else {
                    lv_succeed = false;
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
                return lv_succeed;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="767241B7">
        <ScriptCode>
            int gf_GetTradeIncrement (string lp_type) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if (((lp_type == &quot;Lumber&quot;) || (lp_type == &quot;Stone&quot;) || (lp_type == &quot;Wool&quot;) || (lp_type == &quot;Leather&quot;))) {
                    lv_value = 1;
                }
                else if ((lp_type == &quot;IronOre&quot;)) {
                    lv_value = 2;
                }
                else if ((lp_type == &quot;Shadowstone&quot;)) {
                    lv_value = 3;
                }
                else if (((lp_type == &quot;InfusedLumber&quot;) || (lp_type == &quot;RadiantGem&quot;))) {
                    lv_value = 5;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="ACAFE371">
        <ScriptCode>
            int gf_GetSellPrice (string lp_type, int lp_player) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((lp_type == &quot;Lumber&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LumberSellPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;Stone&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StoneSellPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;Wool&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WoolSellPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;Leather&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LeatherSellPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;IronOre&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;IronOreSellPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;Shadowstone&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ShadowstoneSellPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;InfusedLumber&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;InfusedLumberSellPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;RadiantGem&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;RadiantGemSellPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A5175DAF">
        <ScriptCode>
            int gf_GetBuyPrice (string lp_type, int lp_player) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((lp_type == &quot;Lumber&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LumberBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;Stone&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StoneBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;Wool&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WoolBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;Leather&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LeatherBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;IronOre&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;IronOreBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;Shadowstone&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ShadowstoneBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;InfusedLumber&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;InfusedLumberBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                else if ((lp_type == &quot;RadiantGem&quot;)) {
                    lv_value = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;RadiantGemBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C8900170">
        <ScriptCode>
            bool gf_TypeIsTradeGood (string lp_type) {
                // Variable Declarations
                bool lv_value;
                // Variable Initialization
                lv_value = true;
                // Implementation
                if ((lp_type != &quot;Lumber&quot;) &amp;&amp; (lp_type != &quot;Stone&quot;) &amp;&amp; (lp_type != &quot;Wool&quot;) &amp;&amp; (lp_type != &quot;Leather&quot;) &amp;&amp; (lp_type != &quot;IronOre&quot;) &amp;&amp; (lp_type != &quot;Shadowstone&quot;) &amp;&amp; (lp_type != &quot;InfusedLumber&quot;) &amp;&amp; (lp_type != &quot;RadiantGem&quot;)) {
                    lv_value = false;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="846DFD37">
        <ScriptCode>
            void gf_UpdateSellPrice (string lp_unitType, fixed lp_amount, int lp_tier) {
                int auto3B890E7D_val;
                // Variable Declarations
                fixed lv_sellPriceCoefficient;
                fixed lv_sellPriceReductionCoefficient;
                fixed lv_finalPrice;
                fixed lv_baseReduction;
                fixed lv_minimum;
                // Variable Initialization
                lv_sellPriceCoefficient = 1.0;
                lv_sellPriceReductionCoefficient = 1.0;
                // Implementation
                auto3B890E7D_val = lp_tier;
                if (auto3B890E7D_val == 1) {
                    lv_baseReduction = 1.0;
                    lv_minimum = 5.0;
                }
                else if (auto3B890E7D_val == 2) {
                    lv_baseReduction = 2.0;
                    lv_minimum = 10.0;
                }
                else {
                    lv_minimum = 15.0;
                    lv_baseReduction = IntToFixed(lp_tier);
                }
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_sellPriceCoefficient = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;SellPriceCoefficient&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent()));
                    lv_finalPrice = libNtve_gf_ArithmeticRealClamp(Round(((lp_amount - (lv_baseReduction * lv_sellPriceReductionCoefficient)) * lv_sellPriceCoefficient)), lv_minimum, 100.0);
                    if ((lp_unitType == &quot;Lumber&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;LumberSellPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;Stone&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;StoneSellPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;Wool&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;WoolSellPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;Leather&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;LeatherSellPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;IronOre&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;IronOreSellPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;Shadowstone&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ShadowstoneSellPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;InfusedLumber&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;InfusedLumberSellPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;RadiantGem&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;RadiantGemSellPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                }
                PlayerGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="007040B5">
        <ScriptCode>
            void gf_UpdateBuyPrice (string lp_unitType, fixed lp_amount, int lp_tier) {
                // Variable Declarations
                fixed lv_buyPriceCoefficient;
                fixed lv_buyPriceIncrementCoefficient;
                fixed lv_finalPrice;
                fixed lv_baseIncrement;
                fixed lv_maximum;
                // Variable Initialization
                lv_buyPriceCoefficient = 1.0;
                lv_buyPriceIncrementCoefficient = 1.0;
                // Implementation
                lv_maximum = 100.0;
                lv_baseIncrement = IntToFixed(lp_tier);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_buyPriceCoefficient = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;BuyPriceCoefficient&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent()));
                    lv_finalPrice = libNtve_gf_ArithmeticRealClamp(Round(((lp_amount + (lv_baseIncrement * lv_buyPriceIncrementCoefficient)) * lv_buyPriceCoefficient)), 1.0, lv_maximum);
                    if ((lp_unitType == &quot;Lumber&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;LumberBuyPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;Stone&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;StoneBuyPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;Wool&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;WoolBuyPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;Leather&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;LeatherBuyPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;IronOre&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;IronOreBuyPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;Shadowstone&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;ShadowstoneBuyPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;InfusedLumber&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;InfusedLumberBuyPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                    else if ((lp_unitType == &quot;RadiantGem&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;RadiantGemBuyPrice&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(lv_finalPrice, 0));
                    }
                }
                PlayerGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8B30627D">
        <ScriptCode>
            void gf_NormalizePrices (int lp_player) {
                // Variable Declarations
                int lv_a;
                int lv_b;
                // Variable Initialization
                // Implementation
                if (((lp_player &gt;= 0) &amp;&amp; (lp_player &lt;= gv_players))) {
                    lv_b = 12;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LumberSellPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;LumberSellPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 18;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LumberBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;LumberBuyPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 10;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StoneSellPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StoneSellPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 15;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StoneBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StoneBuyPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 10;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WoolSellPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WoolSellPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 15;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WoolBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WoolBuyPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 10;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LeatherSellPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;LeatherSellPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 15;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LeatherBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;LeatherBuyPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 20;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;IronOreSellPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;IronOreSellPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 30;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;IronOreBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;IronOreBuyPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 30;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ShadowstoneSellPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ShadowstoneSellPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 45;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ShadowstoneBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ShadowstoneBuyPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 50;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;InfusedLumberSellPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;InfusedLumberSellPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 75;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;InfusedLumberBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;InfusedLumberBuyPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 40;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;RadiantGemSellPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RadiantGemSellPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                    lv_b = 60;
                    lv_a = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;RadiantGemBuyPrice&quot;, &quot;Amount&quot;, lp_player));
                    lv_a += libNtve_gf_ArithmeticIntClamp((lv_b - lv_a), -1, 1);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RadiantGemBuyPrice&quot;, &quot;Amount&quot;, lp_player, IntToString(lv_a));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="AFE30DEA">
        <ScriptCode>
            void gf_SendBeaver (unit lp_sourceUnit, point lp_targetPoint, unit lp_targetUnit, string lp_shipmentType, int lp_sendingPlayer) {
                // Variable Declarations
                point lv_p;
                unit lv_beavy;
                unit lv_package;
                // Variable Initialization
                // Implementation
                if (gf_UnitExists(lp_targetUnit)) {
                    lv_p = UnitGetPosition(lp_targetUnit);
                }
                else {
                    lv_p = lp_targetPoint;
                }
                UnitCreate(1, &quot;PackBeaver&quot;, 0, lp_sendingPlayer, PointWithOffsetPolar(UnitGetPosition(lp_sourceUnit), 1.0, AngleBetweenPoints(UnitGetPosition(lp_sourceUnit), lv_p)), 270.0);
                lv_beavy = UnitLastCreated();
                gf_CreateItemForUnit(lv_beavy, lp_shipmentType, 1);
                lv_package = UnitGroupUnit(UnitInventoryGroup(lv_beavy), 1);
                UnitSetInfoText(lv_beavy, StringExternal(&quot;Param/Value/6D98B7F3&quot;), UnitTypeGetName(UnitGetType(lv_package)), StringExternal(&quot;Param/Value/E85AD903&quot;));
                UnitBehaviorAdd(lv_beavy, &quot;BeaverCargo&quot;, lv_beavy, 1);
                gf_AutofillShipmentSlot(lp_sourceUnit, lp_sendingPlayer, lp_shipmentType);
                if ((StringSub(gv_perks[lp_sendingPlayer], 37, 37) == &quot;1&quot;)) {
                    UnitBehaviorRemove(lv_beavy, &quot;BeaverTrigger&quot;, 1);
                    UnitBehaviorAdd(lv_beavy, &quot;BeaverStamina&quot;, lv_beavy, 1);
                }
                else {
                }
                if (gf_UnitExists(lp_targetUnit)) {
                    UnitIssueOrder(lv_beavy, OrderTargetingUnit(AbilityCommand(&quot;GiveAllItemsToTarget&quot;, 0), lp_targetUnit), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_beavy, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lp_targetPoint), c_orderQueueReplace);
                    UnitIssueOrder(lv_beavy, Order(AbilityCommand(&quot;ShipmentArrived&quot;, 0)), c_orderQueueAddToEnd);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="686834E8">
        <ScriptCode>
            void gf_AutofillShipmentSlot (unit lp_outpost, int lp_sendingPlayer, string lp_sendItemType) {
                // Variable Declarations
                const int lv_outpostSize = 26;
                const int lv_shipmentContainer = 1;
                const int lv_storageContainer = 2;
                int lv_a;
                unit lv_item;
                // Variable Initialization
                // Implementation
                UnitGroupLoopBegin(UnitInventoryGroup(lp_outpost));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == lv_storageContainer)) {
                        lv_item = UnitGroupLoopCurrent();
                        break;
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if (gf_UnitExists(lv_item)) {
                    TextExpressionSetToken(&quot;Param/Expression/8AC695B4&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/455E116B&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/8AC695B4&quot;, &quot;B&quot;, UnitTypeGetName(lp_sendItemType));
                    TextExpressionSetToken(&quot;Param/Expression/8AC695B4&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/009BE4E4&quot;));
                    gf_Advancedtag(lp_outpost, lp_sendingPlayer, TextExpressionAssemble(&quot;Param/Expression/8AC695B4&quot;), 3.0, 24);
                    gf_DropandPickup(lp_outpost, lv_item);
                }
                else {
                    TextExpressionSetToken(&quot;Param/Expression/60C42768&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/CE5B44C8&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/60C42768&quot;, &quot;B&quot;, UnitTypeGetName(lp_sendItemType));
                    gf_Advancedtag(lp_outpost, lp_sendingPlayer, TextExpressionAssemble(&quot;Param/Expression/60C42768&quot;), 3.0, 24);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="05602DE8">
        <ScriptCode>
            void gf_DropandRemove (unit lp_unit) {
                // Implementation
                if (gf_UnitExists(lp_unit) &amp;&amp; gf_UnitExists(UnitInventoryUnit(lp_unit))) {
                    UnitSetPosition(lp_unit, UnitGetPosition(UnitInventoryUnit(lp_unit)), false);
                    UnitBehaviorAdd(lp_unit, &quot;DropandRemove&quot;, lp_unit, 1);
                    libNtve_gf_ShowHideUnit(lp_unit, false);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="313BFD62">
        <ScriptCode>
            void gf_DropandPickup (unit lp_carrier, unit lp_item) {
                // Implementation
                UnitSetPosition(lp_item, UnitGetPosition(lp_carrier), false);
                UnitIssueOrder(lp_carrier, OrderTargetingUnit(null, lp_item), c_orderQueueAddToEnd);
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="9205A157">
        <Item Type="CustomScript" Id="953A073D"/>
        <Item Type="CustomScript" Id="9D3FC9C5"/>
        <Item Type="CustomScript" Id="5E43C8EB"/>
        <Item Type="CustomScript" Id="E5B84119"/>
        <Item Type="CustomScript" Id="1CDC8D85"/>
        <Item Type="CustomScript" Id="08DF88F8"/>
        <Item Type="CustomScript" Id="E75DE4F4"/>
        <Item Type="CustomScript" Id="2C89A2BB"/>
        <Item Type="CustomScript" Id="F4E6C164"/>
        <Item Type="CustomScript" Id="62C0CD17"/>
        <Item Type="CustomScript" Id="50D4FE52"/>
        <Item Type="CustomScript" Id="ACB60A05"/>
        <Item Type="CustomScript" Id="3B6EFB0B"/>
        <Item Type="CustomScript" Id="C0D2D6AD"/>
        <Item Type="CustomScript" Id="7F97B27B"/>
        <Item Type="CustomScript" Id="C9E9DE50"/>
    </Element>
    <Element Type="CustomScript" Id="953A073D">
        <ScriptCode>
            void gf_TavernSpawn (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                UnitSetInfoText(lp_unit, StringExternal(&quot;Param/Value/F2E44590&quot;), gf_GetPlayerName(UnitGetOwner(lp_unit), 0), StringExternal(&quot;Param/Value/0DB70CA5&quot;));
                if (gf_RewardCatIndexActive(lv_i, 3, 2)) {
                    UnitBehaviorAdd(lp_unit, &quot;TavernBeerSupply&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArcaneSanctum == true)) {
                    UnitBehaviorAdd(lp_unit, &quot;TavernWizard&quot;, lp_unit, 1);
                }
                else {
                }
                if ((gv_b_Day == false)) {
                    UnitBehaviorAdd(lp_unit, &quot;GenericNightBehavior&quot;, lp_unit, 1);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9D3FC9C5">
        <ScriptCode>
            void gf_Gossip (int lp_player, bool lp_bribed) {
                int autoD54E22E9_ae;
                int autoD54E22E9_ai;
                int auto6194C53B_val;
                // Variable Declarations
                int lv_a;
                int lv_troll;
                text lv_gossip;
                int lv_randomIndex;
                int lv_lastRemainingGossip;
                int lv_gossipIndex;
                // Variable Initialization
                lv_gossip = StringExternal(&quot;Param/Value/CF252F50&quot;);
                // Implementation
                if ((gf_OutOfGossip(lp_player) == true)) {
                    gv_gossipListened[lp_player] = 0;
                    autoD54E22E9_ae = gv_gossipAmount;
                    autoD54E22E9_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoD54E22E9_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoD54E22E9_ae) || (autoD54E22E9_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoD54E22E9_ae) ) ; lv_a += autoD54E22E9_ai ) {
                        gv_gossipPool[lv_a][lp_player] = lv_a;
                    }
                }
                else {
                }
                lv_lastRemainingGossip = (gv_gossipAmount - gv_gossipListened[lp_player]);
                lv_randomIndex = RandomInt(1, lv_lastRemainingGossip);
                lv_gossipIndex = gv_gossipPool[lv_randomIndex][lp_player];
                gv_gossipPool[lv_randomIndex][lp_player] = gv_gossipPool[lv_lastRemainingGossip][lp_player];
                gv_gossipPool[lv_lastRemainingGossip][lp_player] = 0;
                gv_gossipListened[lp_player] += 1;
                auto6194C53B_val = lv_gossipIndex;
                if (auto6194C53B_val == 1) {
                    lv_troll = gf_GossipMostGold(PlayerGroupActive());
                    if ((PlayerGetPropertyInt(lv_troll, c_playerPropMinerals) &gt; 20)) {
                        if ((lv_troll == lp_player)) {
                            lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/AD79591C&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/E902CF81&quot;));
                        }
                        else {
                            if ((PlayerGetPropertyInt(lv_troll, c_playerPropMinerals) &gt; 1000)) {
                                lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/B113B66F&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/12357527&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/01F09C70&quot;))));
                            }
                            else {
                                if ((PlayerGetPropertyInt(lv_troll, c_playerPropMinerals) &gt; 200)) {
                                    lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/3E0B90DB&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/23CE268C&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/3067C577&quot;))));
                                }
                                else {
                                    lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/2D0D259D&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/74C0800A&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/E406C377&quot;))));
                                }
                            }
                        }
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/B84ADDCD&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/CE653668&quot;));
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 2) {
                    lv_troll = gv_wolfsbanePlayer;
                    if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_troll) == true)) {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/E8B6D560&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/D2A3F409&quot;) + (gf_GetPlayerName(gv_wolfsbanePlayer, 1) + StringExternal(&quot;Param/Value/8E434F72&quot;))));
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/BA4B1F41&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/8B904713&quot;));
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 3) {
                    lv_troll = gf_GossipMostBribes(PlayerGroupActive());
                    if ((gv_playerData[lv_troll].lv_gameStats.lv_drunkardsBribed &gt; 0)) {
                        if ((lv_troll == lp_player)) {
                            lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/D1859C74&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/EDD9BD91&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/CE59CE37&quot;))));
                        }
                        else {
                            lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/5D7201F5&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/72D025AA&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/D274E787&quot;))));
                        }
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/B05BF1D5&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/DB259942&quot;));
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 4) {
                    lv_troll = gf_GossipMostBerries(PlayerGroupActive());
                    if ((gv_playerData[lv_troll].lv_gameStats.lv_berriesPicked &gt; 0)) {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/BD37B454&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/86AF14C7&quot;) + (gf_GetPlayerName(lv_troll, 1) + StringExternal(&quot;Param/Value/7372FD3B&quot;))));
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/C7A12BB9&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/6898195A&quot;));
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 5) {
                    lv_troll = gf_GossipMostTreesFelled(PlayerGroupActive());
                    if ((gv_playerData[lv_troll].lv_gameStats.lv_treesFelled &gt; 0)) {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/1671B71B&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/BCF7A9A0&quot;) + (gf_GetPlayerName(lv_troll, 1) + StringExternal(&quot;Param/Value/660120E0&quot;))));
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/0AD4DC39&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/0C35CA48&quot;));
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 6) {
                    lv_troll = gf_GossipMostSheepsBred(PlayerGroupActive());
                    if ((gv_playerData[lv_troll].lv_gameStats.lv_sheepBred &gt; 0)) {
                        if ((gv_playerData[lv_troll].lv_gameStats.lv_sheepBred &gt; 100)) {
                            lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/A842814B&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/8037C248&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/5DC3692B&quot;))));
                        }
                        else {
                            lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/46012502&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/B62F60DE&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/5E9D8525&quot;))));
                        }
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/FEB8D450&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/3726C621&quot;));
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 7) {
                    lv_troll = gf_GossipMostMealsCooked(PlayerGroupActive());
                    if ((gv_playerData[lv_troll].lv_gameStats.lv_mealsCooked &gt; 0)) {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/EB745699&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/29535FBF&quot;) + (gf_GetPlayerName(lv_troll, 1) + StringExternal(&quot;Param/Value/271E1887&quot;))));
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/C9F47A5E&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/7CF83947&quot;));
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 8) {
                    lv_troll = gf_GossipMostExp(PlayerGroupActive());
                    lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/D2232039&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/935FCB2F&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/DE216312&quot;))));
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 9) {
                    lv_troll = gf_GossipMostCrafts(PlayerGroupActive());
                    if ((gv_playerData[lv_troll].lv_gameStats.lv_itemsCrafted &gt; 0)) {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/A23AF597&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/1AB6C37E&quot;) + (gf_GetPlayerName(lv_troll, 1) + StringExternal(&quot;Param/Value/726EA1B1&quot;))));
                    }
                    else {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/36D43CB7&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/F8F43D9C&quot;));
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else if (auto6194C53B_val == 10) {
                    lv_troll = gf_GossipMostPetTLI(PlayerGroupActive());
                    if ((gf_GetPetTLI(lv_troll) &gt; 0)) {
                        lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/F755D229&quot;), Color(74.90, 69.02, 58.43)) + (StringExternal(&quot;Param/Value/B7EF374C&quot;) + (gf_GetPlayerName(lv_troll, 0) + StringExternal(&quot;Param/Value/EFEAE909&quot;))));
                    }
                    else {
                        if ((RandomInt(0, 1) == 1)) {
                            lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/721A9302&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/54C088FF&quot;));
                        }
                        else {
                            lv_gossip = (TextWithColor(StringExternal(&quot;Param/Value/9DE96627&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/99F2746C&quot;));
                        }
                    }
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, lv_gossip);
                }
                else {
                }
                gv_playerData[lp_player].lv_gameStats.lv_drunkardsBribed += 1;
                gv_gossipTypeListened[lp_player] = StringReplace(gv_gossipTypeListened[lp_player], &quot;1&quot;, lv_gossipIndex, lv_gossipIndex);
                if ((gv_gossipTypeListened[lp_player] == &quot;1111111111&quot;)) {
                    gf_UnlockRequirement(lp_player, 3, 2);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5E43C8EB">
        <ScriptCode>
            bool gf_OutOfGossip (int lp_player) {
                int auto89C688D7_ae;
                int auto89C688D7_ai;
                // Variable Declarations
                int lv_a;
                bool lv_value;
                // Variable Initialization
                lv_value = true;
                // Implementation
                auto89C688D7_ae = gv_gossipAmount;
                auto89C688D7_ai = 1;
                lv_a = 1;
                for ( ; ( (auto89C688D7_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto89C688D7_ae) || (auto89C688D7_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto89C688D7_ae) ) ; lv_a += auto89C688D7_ai ) {
                    if ((gv_gossipPool[lv_a][lp_player] &gt; 0)) {
                        lv_value = false;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E5B84119">
        <ScriptCode>
            int gf_GossipMostGold (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals) &lt; PlayerGetPropertyInt(lv_troll, c_playerPropMinerals))) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1CDC8D85">
        <ScriptCode>
            int gf_GossipMostWolfKills () {
                int autoCC630E02_ae;
                int autoCC630E02_ai;
                // Variable Declarations
                int lv_a;
                int lv_value;
                // Variable Initialization
                // Implementation
                autoCC630E02_ae = gv_players;
                autoCC630E02_ai = 1;
                lv_a = 1;
                for ( ; ( (autoCC630E02_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoCC630E02_ae) || (autoCC630E02_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoCC630E02_ae) ) ; lv_a += autoCC630E02_ai ) {
                    if ((gv_playerData[lv_a].lv_gameStats.lv_wolvesKilled &gt; gv_playerData[lv_value].lv_gameStats.lv_wolvesKilled)) {
                        lv_value = lv_a;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="08DF88F8">
        <ScriptCode>
            int gf_GossipMostBribes (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_drunkardsBribed &lt; gv_playerData[lv_troll].lv_gameStats.lv_drunkardsBribed)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E75DE4F4">
        <ScriptCode>
            int gf_GossipMostBerries (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_berriesPicked &lt; gv_playerData[lv_troll].lv_gameStats.lv_berriesPicked)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2C89A2BB">
        <ScriptCode>
            int gf_GossipMostTreesFelled (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_treesFelled &lt; gv_playerData[lv_troll].lv_gameStats.lv_treesFelled)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F4E6C164">
        <ScriptCode>
            int gf_GossipMostSheepsBred (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_sheepBred &lt; gv_playerData[lv_troll].lv_gameStats.lv_sheepBred)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="62C0CD17">
        <ScriptCode>
            int gf_GossipMostMealsCooked (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_mealsCooked &lt; gv_playerData[lv_troll].lv_gameStats.lv_mealsCooked)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="50D4FE52">
        <ScriptCode>
            int gf_GossipMostExp (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((UnitGetPropertyFixed(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, c_unitPropXP, c_unitPropCurrent) &lt; UnitGetPropertyFixed(gv_playerData[lv_troll].lv_kobold, c_unitPropXP, c_unitPropCurrent))) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="ACB60A05">
        <ScriptCode>
            int gf_GossipMostCrafts (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_gameStats.lv_itemsCrafted &lt; gv_playerData[lv_troll].lv_gameStats.lv_itemsCrafted)) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3B6EFB0B">
        <ScriptCode>
            int gf_GossipMostPetTLI (playergroup lp_playerGroup) {
                // Variable Declarations
                int lv_troll;
                bool lv_sadTroll;
                // Variable Initialization
                lv_sadTroll = true;
                // Implementation
                while ((PlayerGroupCount(lp_playerGroup) &gt; 1)) {
                    lv_sadTroll = true;
                    lv_troll = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
                    PlayerGroupRemove(lp_playerGroup, lv_troll);
                    PlayerGroupLoopBegin(lp_playerGroup);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gf_GetPetTLI(PlayerGroupLoopCurrent()) &lt; gf_GetPetTLI(lv_troll))) {
                            PlayerGroupRemove(lp_playerGroup, PlayerGroupLoopCurrent());
                            lv_sadTroll = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((lv_sadTroll == false)) {
                        PlayerGroupAdd(lp_playerGroup, lv_troll);
                    }
                    else {
                    }
                }
                return PlayerGroupPlayer(lp_playerGroup, 1);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C0D2D6AD">
        <ScriptCode>
            fixed gf_GetPetTLI (int lp_player) {
                // Variable Declarations
                unitgroup lv_pets;
                fixed lv_value;
                // Variable Initialization
                lv_pets = gf_UnitsInUnitGroupWithBuff(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), &quot;Tamed&quot;);
                // Implementation
                UnitGroupLoopBegin(lv_pets);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_value += gf_EvaluateThreat(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7F97B27B">
        <ScriptCode>
            void gf_SendBeaverScavenger (int lp_player, point lp_point) {
                // Implementation
                if (gf_UnitExists(gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTower) &amp;&amp; (gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerBeaverPen == true)) {
                    UnitCreate(1, &quot;PackBeaver&quot;, 0, lp_player, PointWithOffsetPolar(UnitGetPosition(gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTower), 2.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lp_point), c_orderQueueReplace);
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;BeaverScavengerActivate&quot;, 0)), c_orderQueueAddToEnd);
                    if ((StringSub(gv_perks[lp_player], 37, 37) == &quot;1&quot;)) {
                        UnitBehaviorRemove(UnitLastCreated(), &quot;BeaverTrigger&quot;, 1);
                        UnitBehaviorAdd(UnitLastCreated(), &quot;BeaverStamina&quot;, UnitLastCreated(), 1);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C9E9DE50">
        <ScriptCode>
            void gf_CanteenFood (unit lp_watchTower, unit lp_kobold) {
                int auto6FC66CF1_val;
                // Variable Declarations
                int lv_i;
                int lv_r;
                string lv_type;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                // Implementation
                lv_r = RandomInt(1, 5);
                auto6FC66CF1_val = lv_r;
                if (auto6FC66CF1_val == 1) {
                    lv_type = &quot;RoastedLamb&quot;;
                }
                else if (auto6FC66CF1_val == 2) {
                    lv_type = &quot;WolfSteak&quot;;
                }
                else if (auto6FC66CF1_val == 3) {
                    lv_type = &quot;SpicedLambFeast&quot;;
                }
                else if (auto6FC66CF1_val == 4) {
                    lv_type = &quot;GrilledWolfEntrecote&quot;;
                }
                else if (auto6FC66CF1_val == 5) {
                    lv_type = &quot;RoastedPheasantWithBerrySauce&quot;;
                }
                else {
                }
                if ((UnitHasBehavior(lp_watchTower, &quot;BeaverPen&quot;) == true)) {
                    gf_SendBeaver(lp_watchTower, UnitGetPosition(lp_kobold), lp_kobold, lv_type, UnitGetOwner(lp_watchTower));
                }
                else {
                    if (gf_UnitCanGetItem(lp_watchTower, lv_type)) {
                        gf_CreateItemForUnit(lp_watchTower, lv_type, 1);
                    }
                    else {
                        UnitCreate(1, lv_type, 0, 0, PointWithOffsetPolar(UnitGetPosition(lp_watchTower), 3.0, RandomFixed(240.0, 300.0)), libNtve_gf_RandomAngle());
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="871B2FDC">
        <Item Type="CustomScript" Id="B9EEEFD5"/>
        <Item Type="CustomScript" Id="1C54DD4D"/>
        <Item Type="CustomScript" Id="9AB7DBFE"/>
        <Item Type="CustomScript" Id="7EB5BAE2"/>
    </Element>
    <Element Type="CustomScript" Id="B9EEEFD5">
        <ScriptCode>
            void gf_UpdateWatchTowerGoldCost (int lp_player) {
                // Variable Declarations
                int lv_numberOfTeamMembers;
                // Variable Initialization
                lv_numberOfTeamMembers = PlayerGroupCount(gv_teamData[gv_playerData[lp_player].lv_team].lv_members);
                // Implementation
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;ArcaneSanctum&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((80.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;WatchTowerArmory&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((80.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;WatchTowerBarracks&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((20.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Ballista&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((70.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Canteen&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((30.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Groundskeeper&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((20.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Infirmary&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((20.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Lookout&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((10.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;MunitionsSquad&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((50.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;WatchTowerMurlocMilitia&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((60.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;Storage&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((20.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;StructuralReinforcement&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((80.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;TunnelerCrew&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((30.0 * lv_numberOfTeamMembers), 0));
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;WatchTowerWarHorn&quot;, &quot;SmartPriority&quot;, lp_player, FixedToString((50.0 * lv_numberOfTeamMembers), 0));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1C54DD4D">
        <ScriptCode>
            void gf_WTUpdateTooltip (unit lp_unit) {
                // Implementation
                TextExpressionSetToken(&quot;Param/Expression/A5EB5B48&quot;, &quot;D&quot;, gf_GetTribeTextOfPlayer(UnitGetOwner(lp_unit)));
                TextExpressionSetToken(&quot;Param/Expression/A5EB5B48&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/3CBCF2CA&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A5EB5B48&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/E818E6E4&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A5EB5B48&quot;, &quot;B&quot;, IntToText(FixedToInt(UnitGetCustomValue(lp_unit, 1))));
                TextExpressionSetToken(&quot;Param/Expression/A5EB5B48&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/BF5A5D94&quot;));
                UnitSetInfoText(lp_unit, StringExternal(&quot;Param/Value/0A265D1A&quot;), TextExpressionAssemble(&quot;Param/Expression/A5EB5B48&quot;), StringExternal(&quot;Param/Value/F0222B17&quot;));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9AB7DBFE">
        <ScriptCode>
            bool gf_AllLivingTeamsHaveWT () {
                int auto8B02A598_ae;
                int auto8B02A598_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                auto8B02A598_ae = gv_activeTeams;
                auto8B02A598_ai = 1;
                lv_a = 1;
                for ( ; ( (auto8B02A598_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto8B02A598_ae) || (auto8B02A598_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto8B02A598_ae) ) ; lv_a += auto8B02A598_ai ) {
                    if ((gv_teamData[lv_a].lv_allDead == false) &amp;&amp; (gf_UnitExists(gv_teamData[lv_a].lv_watchTower) == false)) {
                        return false;
                    }
                    else {
                    }
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7EB5BAE2">
        <ScriptCode>
            void gf_WatchTowerDefeatTeam (int lp_team) {
                // Implementation
                gv_teamData[lp_team].lv_watchTowerDefeat = true;
                PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold)) {
                        gv_playerData[PlayerGroupLoopCurrent()].lv_showDeathMessage = false;
                        UnitCreateEffectUnit(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;KillWithDamage&quot;, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                gv_teamData[lp_team].lv_allDead = true;
                if ((gf_LastTeamStanding() != -1)) {
                    gf_Endgame(false, false);
                }
                else if ((gv_activeTeams == 1) &amp;&amp; gf_AllDeadOnTeam(lp_team, false)) {
                    gf_Endgame(false, true);
                }
                else if ((gv_activeTeams &gt; 2)) {
                    PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        DialogSetVisible(gv_observeRequest, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    PlayerGroupLoopEnd();
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="3635DB28">
        <Item Type="CustomScript" Id="A1F9971D"/>
        <Item Type="CustomScript" Id="B0D0A72D"/>
        <Item Type="CustomScript" Id="37CFC701"/>
        <Item Type="CustomScript" Id="B65025FE"/>
        <Item Type="CustomScript" Id="92FE6E79"/>
        <Item Type="CustomScript" Id="EC390A7B"/>
        <Item Type="CustomScript" Id="923866B8"/>
        <Item Type="CustomScript" Id="3F48E03A"/>
    </Element>
    <Element Type="CustomScript" Id="A1F9971D">
        <ScriptCode>
            void gf_HuntersLodgeSpawn (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                int lv_trophies;
                text lv_suffix;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_trophies = gf_NumberofTrophies(lp_unit);
                // Implementation
                if ((lv_trophies &gt; 0)) {
                    if ((lv_trophies == 1)) {
                        lv_suffix = StringExternal(&quot;Param/Value/FC4C4BD8&quot;);
                    }
                    else {
                        lv_suffix = StringExternal(&quot;Param/Value/BA183C11&quot;);
                    }
                    TextExpressionSetToken(&quot;Param/Expression/A69D2034&quot;, &quot;A&quot;, gf_GetPlayerName(UnitGetOwner(lp_unit), 0));
                    TextExpressionSetToken(&quot;Param/Expression/A69D2034&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/42E3D999&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/A69D2034&quot;, &quot;C&quot;, IntToText(gf_NumberofTrophies(lp_unit)));
                    TextExpressionSetToken(&quot;Param/Expression/A69D2034&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/E8E98167&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/A69D2034&quot;, &quot;E&quot;, lv_suffix);
                    UnitSetInfoText(lp_unit, StringExternal(&quot;Param/Value/29B28883&quot;), TextExpressionAssemble(&quot;Param/Expression/A69D2034&quot;), StringExternal(&quot;Param/Value/92C0F396&quot;));
                }
                else {
                    UnitSetInfoText(lp_unit, StringExternal(&quot;Param/Value/0F3424B8&quot;), gf_GetPlayerName(UnitGetOwner(lp_unit), 0), StringExternal(&quot;Param/Value/784F9C43&quot;));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B0D0A72D">
        <ScriptCode>
            int gf_NumberofTrophies (unit lp_unit) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                // Implementation
                lv_value += UnitBehaviorCount(lp_unit, &quot;TrollNoseBoneStack&quot;);
                lv_value += UnitBehaviorCount(lp_unit, &quot;WhiteBearToothStack&quot;);
                lv_value += UnitBehaviorCount(lp_unit, &quot;BoneTalismanStack&quot;);
                lv_value += UnitBehaviorCount(lp_unit, &quot;AntlersStack&quot;);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="37CFC701">
        <ScriptCode>
            bool gf_UnitFacingGeneralDirection (unit lp_source, unit lp_target) {
                // Variable Declarations
                fixed lv_sourceFacing;
                fixed lv_angleToTarget;
                bool lv_success;
                // Variable Initialization
                // Implementation
                if (gf_UnitExists(lp_source) &amp;&amp; gf_UnitExists(lp_target)) {
                    lv_sourceFacing = UnitGetFacing(lp_source);
                    lv_angleToTarget = AngleBetweenPoints(UnitGetPosition(lp_source), UnitGetPosition(lp_target));
                    if (((AbsF((lv_angleToTarget - lv_sourceFacing)) &lt;= 60.0) || (AbsF((lv_angleToTarget - lv_sourceFacing)) &gt;= 300.0))) {
                        lv_success = true;
                    }
                    else {
                    }
                }
                else {
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B65025FE">
        <ScriptCode>
            void gf_UpdatePetStats (int lp_player) {
                // Variable Declarations
                fixed lv_masterStrength;
                fixed lv_masterIntelligence;
                fixed lv_masterWillpower;
                fixed lv_masterEndurance;
                fixed lv_masterAttackSpeed;
                fixed lv_regen;
                fixed lv_armor;
                fixed lv_damageFactor;
                fixed lv_lifeFactor;
                fixed lv_arPen;
                fixed lv_aPS;
                fixed lv_movementSpeed;
                fixed lv_movespeedBonus;
                fixed lv_armorBonus;
                fixed lv_lifeBonus;
                fixed lv_bearShamansShroudBonus;
                fixed lv_predKno_WolfDmg;
                fixed lv_predKno_BearDmg;
                fixed lv_predKno_BearArm;
                fixed lv_predKno_WispDmg;
                fixed lv_predKno_WispRng;
                // Variable Initialization
                lv_masterStrength = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                lv_masterIntelligence = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                lv_masterWillpower = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                lv_masterEndurance = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                lv_masterAttackSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;KoboldAttackMeleeBash&quot;, &quot;Period&quot;, lp_player));
                lv_regen = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lp_player));
                lv_armor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Hover]&quot;, lp_player));
                lv_damageFactor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player));
                lv_lifeFactor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Biological]&quot;, lp_player));
                lv_arPen = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Light]&quot;, lp_player));
                lv_aPS = (1.0 / lv_masterAttackSpeed);
                lv_movementSpeed = libNtve_gf_ArithmeticRealClamp(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;Speed&quot;, lp_player)), 2.5, 100.0);
                lv_movespeedBonus = 1.0;
                lv_predKno_WolfDmg = (gv_predatoryKnowledgeStacks[1][lp_player] * 1.0);
                lv_predKno_BearDmg = (gv_predatoryKnowledgeStacks[2][lp_player] * 0.5);
                lv_predKno_BearArm = (gv_predatoryKnowledgeStacks[2][lp_player] * 0.3);
                lv_predKno_WispDmg = (gv_predatoryKnowledgeStacks[3][lp_player] * 0.3);
                lv_predKno_WispRng = (gv_predatoryKnowledgeStacks[3][lp_player] * 0.1);
                // Implementation
                if ((lp_player != 0) &amp;&amp; (lp_player != 15)) {
                    if ((lv_masterIntelligence &gt; lv_masterStrength)) {
                        lv_masterStrength = lv_masterIntelligence;
                    }
                    else {
                    }
                    if ((lv_masterWillpower &gt; lv_masterStrength)) {
                        lv_masterStrength = lv_masterWillpower;
                    }
                    else {
                    }
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;StatsMasterStrength&quot;, &quot;Amount&quot;, lp_player, FixedToString(lv_masterStrength, 2));
                    if ((UnitGetType(gf_KoboldArmor(gv_playerData[lp_player].lv_kobold)) == &quot;BearShamansShroud&quot;)) {
                        lv_bearShamansShroudBonus += 2.0;
                    }
                    else {
                    }
                    if ((gv_skillForaging[lp_player] &gt;= 25)) {
                        lv_armorBonus += (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player)) * 0.5);
                    }
                    else {
                    }
                    if ((StringSub(gv_taughtPetsString[lp_player], 6, 6) == &quot;1&quot;)) {
                        lv_movespeedBonus += 0.1;
                    }
                    else {
                    }
                    lv_armorBonus += (0.5 * gv_antlerStacks[lp_player]);
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WolfBiteDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((lv_masterStrength + lv_predKno_WolfDmg) * lv_damageFactor), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;DirewolfBiteDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((lv_masterStrength + lv_predKno_WolfDmg) * lv_damageFactor), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BearMaulDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((1.25 * ((lv_masterStrength + lv_predKno_BearDmg) * lv_damageFactor)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBearMaulDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((1.4 * ((lv_masterStrength + lv_predKno_BearDmg) * lv_damageFactor)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;NightwispDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((0.8 * ((lv_masterStrength + lv_predKno_WispDmg) * lv_damageFactor)), 0));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;WolfBite&quot;, &quot;Period&quot;, lp_player, FixedToString((1.0 / (lv_aPS * (1.0 + (BoolToInt(gv_b_Day) * 0.25)))), 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;DirewolfBite&quot;, &quot;Period&quot;, lp_player, FixedToString((1.0 / (lv_aPS * (1.0 + (BoolToInt(!(gv_b_Day)) * 0.35)))), 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;BearMaul&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_masterAttackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;FrostBearMaul&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_masterAttackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;NightwispAttack&quot;, &quot;Period&quot;, lp_player, FixedToString(lv_masterAttackSpeed, 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WolfBiteDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;DirewolfBiteDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BearMaulDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBearMaulDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;NightwispDamage&quot;, &quot;ArmorReduction&quot;, lp_player, FixedToString((1.0 - (lv_arPen * 0.01)), 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Dog&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Dog&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Lyote&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Lyote&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Bear&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((1.15 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Bear&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((1.15 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostBear&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((1.2 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostBear&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((1.2 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Nightwisp&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((0.7 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Nightwisp&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((0.7 * (lv_lifeBonus + (lv_masterEndurance * lv_lifeFactor))), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Dog&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString(lv_regen, 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Lyote&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString(lv_regen, 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Bear&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString(lv_regen, 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostBear&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString(lv_regen, 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Nightwisp&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString(lv_regen, 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Dog&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_armor + lv_armorBonus), 1));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Lyote&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_armor + lv_armorBonus), 1));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Bear&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((lv_armor + lv_predKno_BearArm) + (lv_armorBonus + lv_bearShamansShroudBonus)), 1));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostBear&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString(((lv_armor + lv_predKno_BearArm) + (lv_armorBonus + lv_bearShamansShroudBonus)), 1));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Nightwisp&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((lv_armor + lv_armorBonus), 1));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Dog&quot;, &quot;Speed&quot;, lp_player, FixedToString((lv_movementSpeed * (lv_movespeedBonus + (BoolToInt(gv_b_Day) * 0.1))), 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Lyote&quot;, &quot;Speed&quot;, lp_player, FixedToString((lv_movementSpeed * (lv_movespeedBonus + (BoolToInt(!(gv_b_Day)) * 0.1))), 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Bear&quot;, &quot;Speed&quot;, lp_player, FixedToString((lv_movementSpeed * lv_movespeedBonus), 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostBear&quot;, &quot;Speed&quot;, lp_player, FixedToString((lv_movementSpeed * lv_movespeedBonus), 2));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Nightwisp&quot;, &quot;Speed&quot;, lp_player, FixedToString((lv_movementSpeed * lv_movespeedBonus), 2));
                    CatalogFieldValueSet(c_gameCatalogWeapon, &quot;NightwispAttack&quot;, &quot;Range&quot;, lp_player, FixedToString((4.5 + lv_predKno_WispRng), 1));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="92FE6E79">
        <ScriptCode>
            void gf_TameAnimal (unit lp_master, unit lp_animal) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_master);
                // Implementation
                if ((UnitHasBehavior(lp_animal, &quot;Tamed&quot;) == true) &amp;&amp; (libNtve_gf_PlayerIsEnemy(lv_i, UnitGetOwner(lp_animal), 4) == true)) {
                    UnitBehaviorRemove(lp_animal, &quot;HunterRequirement&quot;, 1);
                    UnitBehaviorAdd(lp_animal, &quot;HunterRequirement&quot;, lp_master, 1);
                }
                else {
                }
                UnitBehaviorRemove(lp_animal, &quot;AnimalRush&quot;, 1);
                UnitBehaviorRemove(lp_animal, &quot;Beast&quot;, 1);
                gv_playerData[lv_i].lv_gameStats.lv_petsTamed += 1;
                UnitCreateEffectUnit(lp_master, &quot;TamedRemove&quot;, lp_animal);
                UnitCreateEffectUnit(lp_master, &quot;TamedApply&quot;, lp_animal);
                UnitGroupRemove(gv_pets[UnitGetOwner(lp_animal)], lp_animal);
                UnitIssueOrder(lp_master, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(lp_animal, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitSetOwner(lp_animal, lv_i, true);
                UnitSetInfoText(lp_animal, StringExternal(&quot;Param/Value/9FD92E01&quot;), gf_GetPlayerName(lv_i, 0), StringExternal(&quot;Param/Value/EE4FD5D4&quot;));
                UnitSetPropertyFixed(lp_animal, c_unitPropLifePercent, 100.0);
                UnitGroupAdd(gv_pets[lv_i], lp_animal);
                gf_Quicktag(lp_animal, StringExternal(&quot;Param/Value/8ED5DC33&quot;), 3.0, 24);
                if (((UnitGetType(lp_animal) == &quot;Bear&quot;) || (UnitGetType(lp_animal) == &quot;FrostBear&quot;))) {
                    libNtve_gf_SendActorMessageToUnit(lp_animal, &quot;AnimGroupRemove Slow&quot;);
                    libNtve_gf_SendActorMessageToUnit(lp_animal, &quot;SetWalkAnimMoveSpeed 4.5&quot;);
                }
                else if (((UnitGetType(lp_animal) == &quot;Dog&quot;) || (UnitGetType(lp_animal) == &quot;Lyote&quot;))) {
                    libNtve_gf_SendActorMessageToUnit(lp_animal, &quot;AnimGroupRemove Slow&quot;);
                    libNtve_gf_SendActorMessageToUnit(lp_animal, &quot;SetWalkAnimMoveSpeed 2.8007&quot;);
                }
                gf_AcquirePet(lv_i, UnitGetType(lp_animal));
                gf_ApplyPetBehaviors(lp_animal, lp_master);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EC390A7B">
        <ScriptCode>
            void gf_ApplyPetBehaviors (unit lp_animal, unit lp_master) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_animal);
                // Implementation
                if ((StringSub(gv_taughtPetsString[lv_i], 5, 5) == &quot;1&quot;) &amp;&amp; (UnitHasBehavior(lp_animal, &quot;NaturalTenacity&quot;) == false)) {
                    UnitBehaviorAdd(lp_animal, &quot;NaturalTenacity&quot;, lp_master, 1);
                }
                else {
                }
                if ((StringSub(gv_taughtPetsString[lv_i], 4, 4) == &quot;1&quot;) &amp;&amp; (UnitHasBehavior(lp_animal, &quot;PredatoryKnowledgeCounter&quot;) == false)) {
                    UnitBehaviorAdd(lp_animal, &quot;PredatoryKnowledgeCounter&quot;, lp_master, 1);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="923866B8">
        <ScriptCode>
            void gf_AcquirePet (int lp_player, string lp_type) {
                // Implementation
                if (gf_UnitExists(gv_playerData[lp_player].lv_kobold)) {
                    if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMaille&quot;) == true)) {
                        if (((lp_type == &quot;Dog&quot;) || (lp_type == &quot;Lyote&quot;))) {
                            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleStrDex&quot;, gv_playerData[lp_player].lv_kobold, 1);
                        }
                        else if (((lp_type == &quot;Bear&quot;) || (lp_type == &quot;FrostBear&quot;))) {
                            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleStrEnd&quot;, gv_playerData[lp_player].lv_kobold, 1);
                        }
                        else if ((lp_type == &quot;Nightwisp&quot;)) {
                            UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;MasterRangersMailleIntWil&quot;, gv_playerData[lp_player].lv_kobold, 1);
                        }
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3F48E03A">
        <ScriptCode>
            void gf_LosePet (unit lp_pet) {
                // Variable Declarations
                unit lv_b;
                int lv_i;
                string lv_type;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_pet);
                lv_type = UnitGetType(lp_pet);
                // Implementation
                if (gf_UnitExists(gv_playerData[lv_i].lv_kobold)) {
                    if (((lv_type == &quot;Dog&quot;) || (lv_type == &quot;Lyote&quot;))) {
                        UnitBehaviorRemove(gv_playerData[lv_i].lv_kobold, &quot;MasterRangersMailleStrDex&quot;, 1);
                    }
                    else if (((lv_type == &quot;Bear&quot;) || (lv_type == &quot;FrostBear&quot;))) {
                        UnitBehaviorRemove(gv_playerData[lv_i].lv_kobold, &quot;MasterRangersMailleStrEnd&quot;, 1);
                    }
                    else if ((lv_type == &quot;Nightwisp&quot;)) {
                        UnitBehaviorRemove(gv_playerData[lv_i].lv_kobold, &quot;MasterRangersMailleIntWil&quot;, 1);
                    }
                    lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;HuntersLodge&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_playerData[lv_i].lv_kobold));
                    if (gf_UnitExists(lv_b) &amp;&amp; (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;MasterRangersMaille&quot;) == true) &amp;&amp; (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;MasterRangersMailleCooldown&quot;) == false)) {
                        UnitBehaviorAdd(gv_playerData[lv_i].lv_kobold, &quot;MasterRangersMailleCooldown&quot;, gv_playerData[lv_i].lv_kobold, 1);
                        UnitCreate(1, UnitGetType(lp_pet), 0, lv_i, PointWithOffsetPolar(UnitGetPosition(lv_b), UnitGetPropertyFixed(lv_b, c_unitPropRadius, c_unitPropCurrent), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                        gf_TameAnimal(gv_playerData[lv_i].lv_kobold, UnitLastCreated());
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="7BF315FF">
        <Item Type="CustomScript" Id="84B613FD"/>
        <Item Type="CustomScript" Id="D679D437"/>
        <Item Type="CustomScript" Id="5CBF9C1D"/>
        <Item Type="CustomScript" Id="FB08F11A"/>
        <Item Type="CustomScript" Id="9C08BB09"/>
        <Item Type="CustomScript" Id="FFCB9830"/>
        <Item Type="CustomScript" Id="A94E75C5"/>
        <Item Type="CustomScript" Id="2A93E892"/>
        <Item Type="CustomScript" Id="F694CB01"/>
        <Item Type="CustomScript" Id="479C229D"/>
        <Item Type="CustomScript" Id="37E768FD"/>
        <Item Type="CustomScript" Id="06088290"/>
        <Item Type="CustomScript" Id="C793B9AF"/>
        <Item Type="CustomScript" Id="BB815C71"/>
        <Item Type="CustomScript" Id="80D61042"/>
        <Item Type="CustomScript" Id="122FFFE6"/>
        <Item Type="CustomScript" Id="FF72FF2D"/>
        <Item Type="CustomScript" Id="7C94736C"/>
        <Item Type="CustomScript" Id="A1B62FFA"/>
        <Item Type="CustomScript" Id="5A822BE0"/>
        <Item Type="CustomScript" Id="23561193"/>
        <Item Type="CustomScript" Id="17FBB918"/>
        <Item Type="CustomScript" Id="5C828CC3"/>
    </Element>
    <Element Type="CustomScript" Id="84B613FD">
        <ScriptCode>
            void gf_KoboldDeath (point lp_location, unit lp_dyingUnit, unit lp_killingUnit) {
                int autoD8E3FCBA_ae;
                int autoD8E3FCBA_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                int lv_dyingPlayer;
                text lv_dyingTribeText;
                text lv_dyerName;
                int lv_killingPlayer;
                text lv_killingTribeText;
                text lv_killerName;
                // Variable Initialization
                lv_dyingPlayer = UnitGetOwner(lp_dyingUnit);
                lv_dyerName = gf_GetPlayerName(lv_dyingPlayer, 0);
                lv_killingPlayer = UnitGetOwner(lp_killingUnit);
                lv_killerName = gf_GetPlayerName(lv_killingPlayer, 0);
                // Implementation
                if ((gv_questIndexActive == 6) &amp;&amp; (gv_gladiatorPhase == 2) &amp;&amp; ((gv_challenger[1] == lp_dyingUnit) || (gv_challenger[2] == lp_dyingUnit))) {
                    gf_GladiatorEndPhase2(lp_dyingUnit, gf_RemainingDuelist());
                }
                else if ((lp_dyingUnit != lp_killingUnit) &amp;&amp; ((UnitGetType(lp_killingUnit) == &quot;Kobold&quot;) || (UnitHasBehavior(lp_killingUnit, &quot;Tamed&quot;) == true))) {
                    if ((libNtve_gf_PlayerIsEnemy(lv_killingPlayer, lv_dyingPlayer, 1) == true)) {
                        TextExpressionSetToken(&quot;Param/Expression/D8CC6D80&quot;, &quot;A&quot;, TextWithColor(lv_killerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingPlayer, false))));
                        TextExpressionSetToken(&quot;Param/Expression/D8CC6D80&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/5CBFE623&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/D8CC6D80&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_killingPlayer));
                        TextExpressionSetToken(&quot;Param/Expression/D8CC6D80&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/26FCD851&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/D8CC6D80&quot;, &quot;E&quot;, TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
                        TextExpressionSetToken(&quot;Param/Expression/D8CC6D80&quot;, &quot;H&quot;, StringExternal(&quot;Param/Value/59A8D93D&quot;));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/D8CC6D80&quot;));
                    }
                    else {
                        TextExpressionSetToken(&quot;Param/Expression/CC02D59B&quot;, &quot;A&quot;, TextWithColor(lv_killerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingPlayer, false))));
                        TextExpressionSetToken(&quot;Param/Expression/CC02D59B&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/10ADD886&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/CC02D59B&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_killingPlayer));
                        TextExpressionSetToken(&quot;Param/Expression/CC02D59B&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/F89D5E17&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/CC02D59B&quot;, &quot;E&quot;, TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
                        TextExpressionSetToken(&quot;Param/Expression/CC02D59B&quot;, &quot;F&quot;, StringExternal(&quot;Param/Value/1B8CC388&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/CC02D59B&quot;, &quot;G&quot;, gf_GetTribeTextOfPlayer(lv_dyingPlayer));
                        TextExpressionSetToken(&quot;Param/Expression/CC02D59B&quot;, &quot;H&quot;, StringExternal(&quot;Param/Value/F71A51F7&quot;));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/CC02D59B&quot;));
                    }
                }
                else if ((UnitGetType(lp_killingUnit) == &quot;SpikeTrap&quot;)) {
                    TextExpressionSetToken(&quot;Param/Expression/76F4CB47&quot;, &quot;A&quot;, TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
                    TextExpressionSetToken(&quot;Param/Expression/76F4CB47&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/3FA7ED09&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/76F4CB47&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_dyingPlayer));
                    TextExpressionSetToken(&quot;Param/Expression/76F4CB47&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/37A513D2&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/76F4CB47&quot;));
                }
                else if (((UnitGetType(lp_killingUnit) == &quot;Dog&quot;) || (UnitGetType(lp_killingUnit) == &quot;Lyote&quot;))) {
                    TextExpressionSetToken(&quot;Param/Expression/3BD4BB62&quot;, &quot;A&quot;, TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
                    TextExpressionSetToken(&quot;Param/Expression/3BD4BB62&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/877EA55B&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/3BD4BB62&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(UnitGetOwner(lp_dyingUnit)));
                    TextExpressionSetToken(&quot;Param/Expression/3BD4BB62&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/D326E37A&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/3BD4BB62&quot;));
                }
                else if ((UnitGetType(lp_killingUnit) == &quot;MurlocChieftain&quot;)) {
                    TextExpressionSetToken(&quot;Param/Expression/669C6A51&quot;, &quot;A&quot;, TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
                    TextExpressionSetToken(&quot;Param/Expression/669C6A51&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/CE74E85D&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/669C6A51&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_dyingPlayer));
                    TextExpressionSetToken(&quot;Param/Expression/669C6A51&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/AF4C62D0&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/669C6A51&quot;));
                }
                else if ((UnitGetType(lp_killingUnit) == &quot;Zulrogg&quot;)) {
                    TextExpressionSetToken(&quot;Param/Expression/49D56CC1&quot;, &quot;A&quot;, TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
                    TextExpressionSetToken(&quot;Param/Expression/49D56CC1&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/22BD09C5&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/49D56CC1&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_dyingPlayer));
                    TextExpressionSetToken(&quot;Param/Expression/49D56CC1&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/AACDD511&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/49D56CC1&quot;));
                }
                else if (((UnitGetType(lp_killingUnit) == &quot;RagingArcaneBeast&quot;) || (UnitGetType(lp_killingUnit) == &quot;UnstableAnomaly&quot;) || (UnitGetType(lp_killingUnit) == &quot;LightningCloud&quot;))) {
                    TextExpressionSetToken(&quot;Param/Expression/DB0C3911&quot;, &quot;A&quot;, TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
                    TextExpressionSetToken(&quot;Param/Expression/DB0C3911&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/5E330B12&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/DB0C3911&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_dyingPlayer));
                    TextExpressionSetToken(&quot;Param/Expression/DB0C3911&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/E7B9B662&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/DB0C3911&quot;));
                    TriggerExecute(gt_RABKill, true, false);
                }
                else if ((gv_playerData[lv_dyingPlayer].lv_showDeathMessage == true)) {
                    TextExpressionSetToken(&quot;Param/Expression/5E2D9D8A&quot;, &quot;A&quot;, TextWithColor(lv_dyerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingPlayer, false))));
                    TextExpressionSetToken(&quot;Param/Expression/5E2D9D8A&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/034896C7&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/5E2D9D8A&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_dyingPlayer));
                    TextExpressionSetToken(&quot;Param/Expression/5E2D9D8A&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/8E83B0BA&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/5E2D9D8A&quot;));
                }
                gf_AddExperience(lp_killingUnit, 100.0);
                gf_GladiatorsStrength(lv_killingPlayer);
                UnitGroupClear(gv_aIData[lv_dyingPlayer].lv_enemies);
                if (((lv_killingPlayer &gt;= 0) &amp;&amp; (lv_killingPlayer &lt;= 15))) {
                    gf_AITaunt(gv_playerData[lv_killingPlayer].lv_kobold);
                }
                else {
                }
                if ((lp_dyingUnit == gv_challenger[1])) {
                    gv_challenger[1] = null;
                }
                else if ((lp_dyingUnit == gv_challenger[2])) {
                    gv_challenger[2] = null;
                }
                gv_savedXP[lv_dyingPlayer] = UnitGetPropertyFixed(gv_playerData[lv_dyingPlayer].lv_kobold, c_unitPropXP, c_unitPropCurrent);
                if (((lv_killingPlayer &gt;= 0) &amp;&amp; (lv_killingPlayer &lt;= 15)) &amp;&amp; (gv_playerData[lv_killingPlayer].lv_alive == true) &amp;&amp; (UnitGroupCount(gv_playerData[lv_killingPlayer].lv_resources.lv_sunflowers, c_unitCountAlive) &gt;= 20)) {
                    gf_UnlockRequirement(lv_killingPlayer, 2, 9);
                }
                else {
                }
                DialogSetVisible(gv_rezzDialog, PlayerGroupSingle(lv_dyingPlayer), false);
                SoundPlay(SoundLink(&quot;Defeat&quot;, -1), gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_members, 100.0, 0.0);
                SoundtrackPlay(PlayerGroupSingle(lv_dyingPlayer), c_soundtrackCategoryMusic, &quot;KoboldMusicDead&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                autoD8E3FCBA_ae = 3;
                autoD8E3FCBA_ai = 1;
                lv_a = 1;
                for ( ; ( (autoD8E3FCBA_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoD8E3FCBA_ae) || (autoD8E3FCBA_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoD8E3FCBA_ae) ) ; lv_a += autoD8E3FCBA_ai ) {
                    gf_SendBeaverScavenger(lv_dyingPlayer, UnitGetPosition(lp_dyingUnit));
                }
                if ((((gv_gameMode == 2) &amp;&amp; (gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_watchTowerDefeat == false)) || (gv_playerData[lv_dyingPlayer].lv_reincarnation == true))) {
                    gv_playerData[lv_dyingPlayer].lv_kobold = null;
                    gv_playerData[lv_dyingPlayer].lv_alive = false;
                    gf_ReincarnatePlayerStart(lv_dyingPlayer, (10.0 + (gv_gameDuration / 60.0)));
                }
                else {
                    gv_dead[lv_dyingPlayer] = true;
                    gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_koboldsAlive -= 1;
                    if ((lp_dyingUnit != lp_killingUnit) &amp;&amp; ((lv_killingPlayer &gt;= 0) &amp;&amp; (lv_killingPlayer &lt;= 15))) {
                        gv_playerData[lv_killingPlayer].lv_gameStats.lv_playerKills += 1;
                        gv_kobkills[lv_killingPlayer] += 1;
                    }
                    else {
                    }
                    gv_kobdeaths[lv_dyingPlayer] += 1;
                    lv_b = PlayerGetPropertyInt(lv_dyingPlayer, c_playerPropMinerals);
                    if ((lv_b &gt; 0)) {
                        gf_CreateCoinPurse(lv_b, lp_location);
                    }
                    else {
                    }
                    PlayerModifyPropertyInt(lv_dyingPlayer, c_playerPropMinerals, c_playerPropOperSetTo, 0);
                    if ((gv_activeTeams &gt; 2) &amp;&amp; (gf_AllDeadOnTeam(gv_playerData[lv_dyingPlayer].lv_team, false) == true) &amp;&amp; (gv_gameMode == 1)) {
                        gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_allDead = true;
                        PlayerGroupLoopBegin(gv_teamData[gv_playerData[lv_dyingPlayer].lv_team].lv_members);
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            DialogSetVisible(gv_observeRequest, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        }
                        PlayerGroupLoopEnd();
                    }
                    else {
                    }
                    UnitGroupLoopBegin(UnitGroup(null, lv_dyingPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGroupLoopCurrent() == gv_exile) &amp;&amp; (gv_questIndexActive == 14)) {
                            TriggerExecute(gt_ExileTransfer, true, false);
                        }
                        else if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LorenorStatue&quot;)) {
                            UnitSetOwner(UnitGroupLoopCurrent(), 0, false);
                            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal(&quot;Param/Value/88111439&quot;), StringExternal(&quot;Param/Value/9790F152&quot;), StringExternal(&quot;Param/Value/EC3BFABB&quot;));
                        }
                        else if (true) {
                            UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                        }
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(gv_animalVisionGroup[lv_dyingPlayer]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, lv_dyingPlayer);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupClear(gv_animalVisionGroup[lv_dyingPlayer]);
                    if ((gv_playerData[lv_killingPlayer].lv_team != 0) &amp;&amp; (gv_playerData[lv_dyingPlayer].lv_team != 0)) {
                        gv_destroyerProgress[lv_killingPlayer] += 1;
                        if ((TimerGetRemaining(gv_destroyerTimer[lv_killingPlayer]) == 0.0)) {
                            TimerStart(gv_destroyerTimer[lv_killingPlayer], 120.0, false, c_timeGame);
                            gv_destroyerProgress[lv_killingPlayer] = 1;
                        }
                        else {
                            if ((gv_destroyerProgress[lv_killingPlayer] == 3)) {
                                TimerPause(gv_destroyerTimer[lv_killingPlayer], true);
                                gf_UnlockRequirement(lv_killingPlayer, 1, 15);
                            }
                            else {
                            }
                        }
                        PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(lv_dyingPlayer)].lv_members);
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            if ((PlayerGroupLoopCurrent() != lv_dyingPlayer)) {
                                gf_VanquisherStart(PlayerGroupLoopCurrent());
                            }
                            else {
                            }
                        }
                        PlayerGroupLoopEnd();
                    }
                    else {
                    }
                    gv_playerData[lv_dyingPlayer].lv_kobold = null;
                    gv_playerData[lv_dyingPlayer].lv_alive = false;
                    if ((gf_LastTeamStanding() != -1)) {
                        gf_Endgame(false, false);
                    }
                    else if ((gv_activeTeams == 1) &amp;&amp; gf_AllDeadOnTeam(gf_GetTeamOfPlayer(lv_dyingPlayer), false)) {
                        gf_Endgame(false, true);
                    }
                    else if (true) {
                        gf_InGameHint(&quot;death&quot;, lv_dyingPlayer);
                        gf_PostDeathHint(UnitGetOwner(lp_dyingUnit), 15.0);
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D679D437">
        <ScriptCode>
            void gf_SheepDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Implementation
                if ((UnitGetOwner(lp_killingUnit) != 0) &amp;&amp; (UnitGetOwner(lp_killingUnit) != 15)) {
                    gf_AddExperience(lp_killingUnit, 30.0);
                    UnitCreate(1, &quot;RawLamb&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                    if (((libNtve_gf_RandomPercent() &lt;= 50.0) || (gv_tutorial == true))) {
                        UnitCreate(1, &quot;Wool&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5CBF9C1D">
        <ScriptCode>
            void gf_WolfDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Implementation
                gf_AddExperience(lp_killingUnit, 40.0);
                UnitCreate(1, &quot;Leather&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                UnitCreate(1, &quot;RawWolfMeat&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                if ((UnitGetType(lp_killingUnit) == &quot;Kobold&quot;)) {
                    gf_UpdateWolfsbanePlayer(UnitGetOwner(lp_killingUnit));
                }
                else {
                }
                if ((UnitGroupHasUnit(gv_pets[UnitGetOwner(lp_dyingUnit)], lp_dyingUnit) == true)) {
                    gf_LosePet(lp_dyingUnit);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FB08F11A">
        <ScriptCode>
            void gf_DirewolfDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Implementation
                gf_AddExperience(lp_killingUnit, 50.0);
                if ((gv_tutorial == false)) {
                    UnitCreate(1, &quot;RawWolfMeat&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                }
                else {
                }
                if (((libNtve_gf_RandomPercent() &lt;= 50.0) || (gv_tutorial == true))) {
                    UnitCreate(1, &quot;Leather&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                }
                else {
                }
                if ((UnitGetType(lp_killingUnit) == &quot;Kobold&quot;)) {
                    if ((gv_tutorial == true)) {
                        TriggerExecute(gt_TutorialPart8, true, false);
                    }
                    else {
                        gf_UpdateWolfsbanePlayer(UnitGetOwner(lp_killingUnit));
                    }
                }
                else {
                }
                if ((UnitGroupHasUnit(gv_pets[UnitGetOwner(lp_dyingUnit)], lp_dyingUnit) == true)) {
                    gf_LosePet(lp_dyingUnit);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9C08BB09">
        <ScriptCode>
            void gf_BearDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Variable Declarations
                int lv_i;
                int lv_b;
                int lv_oHBonus;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_killingUnit);
                lv_oHBonus = 2;
                // Implementation
                gf_AddExperience(lp_killingUnit, 100.0);
                UnitCreate(1, &quot;BearPelt&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                if ((UnitGetType(lp_dyingUnit) == &quot;FrostBear&quot;)) {
                    UnitCreate(1, &quot;WhiteBearFang&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                    lv_oHBonus += 1;
                    if ((gv_questIndexActive == 10) &amp;&amp; (gv_witchSummoned == false)) {
                        gv_bearsKilled += 1;
                        gf_FrostWitchSpawn(lp_killingUnit, UnitGetPosition(lp_dyingUnit));
                    }
                    else {
                    }
                }
                else {
                }
                if (((lv_i &gt;= 1) &amp;&amp; (lv_i &lt;= gv_players)) &amp;&amp; (gv_playerData[lv_i].lv_alive == true) &amp;&amp; (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;OutlandishHeartpiercer&quot;) == true) &amp;&amp; ((lp_killingUnit == gv_playerData[lv_i].lv_kobold) || (UnitGroupHasUnit(gv_pets[lv_i], lp_killingUnit) == true))) {
                    lv_b = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;OutlandishHeartpiercerBonus&quot;, &quot;Amount&quot;, lv_i));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;OutlandishHeartpiercerBonus&quot;, &quot;Amount&quot;, lv_i, IntToString(libNtve_gf_ArithmeticIntClamp((lv_b + lv_oHBonus), 20, 50)));
                    gf_UpdateStatsAll(lv_i);
                }
                else {
                }
                if (((UnitGetOwner(lp_dyingUnit) &gt;= 1) &amp;&amp; (UnitGetOwner(lp_dyingUnit) &lt;= gv_players)) &amp;&amp; (UnitGroupHasUnit(gv_pets[UnitGetOwner(lp_dyingUnit)], lp_dyingUnit) == true)) {
                    gf_LosePet(lp_dyingUnit);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FFCB9830">
        <ScriptCode>
            void gf_PheasantDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Implementation
                if ((UnitGetOwner(lp_killingUnit) != 0) &amp;&amp; (UnitGetOwner(lp_killingUnit) != 15)) {
                    gf_AddExperience(lp_killingUnit, 30.0);
                    UnitCreate(1, &quot;RawPheasant&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A94E75C5">
        <ScriptCode>
            void gf_MurlocDeath (unit lp_dyingUnit) {
                // Implementation
                UnitCreate(1, &quot;MurlocSkullFragment&quot;, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2A93E892">
        <ScriptCode>
            void gf_GhoulDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Variable Declarations
                string lv_loot;
                int lv_a;
                // Variable Initialization
                // Implementation
                gf_AddExperience(lp_killingUnit, 10.0);
                if ((libNtve_gf_RandomPercent() &lt;= 10.0)) {
                    lv_loot = &quot;SkeletalFinger&quot;;
                }
                else {
                }
                if ((lv_loot != null)) {
                    UnitCreate(1, lv_loot, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F694CB01">
        <ScriptCode>
            void gf_VeilGuardianDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Variable Declarations
                string lv_loot;
                int lv_a;
                // Variable Initialization
                // Implementation
                gf_AddExperience(lp_killingUnit, 50.0);
                gf_CreateCoinPurse(RandomInt(5, 10), UnitGetPosition(lp_dyingUnit));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="479C229D">
        <ScriptCode>
            void gf_UndeadSavageDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                int autoB3ACBA79_val;
                // Variable Declarations
                string lv_loot;
                int lv_a;
                // Variable Initialization
                // Implementation
                gf_AddExperience(lp_killingUnit, 75.0);
                lv_a = RandomInt(1, 2);
                autoB3ACBA79_val = lv_a;
                if (autoB3ACBA79_val == 1) {
                    lv_loot = &quot;DraughtofDecay&quot;;
                }
                else if (autoB3ACBA79_val == 2) {
                    lv_loot = &quot;BoneTalisman&quot;;
                }
                else {
                }
                if ((lv_loot != null)) {
                    UnitCreate(1, lv_loot, 0, 0, UnitGetPosition(lp_dyingUnit), libNtve_gf_RandomAngle());
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="37E768FD">
        <ScriptCode>
            void gf_DeathTombGuardian (unit lp_dyingUnit, unit lp_killingUnit) {
                // Variable Declarations
                string lv_loot;
                int lv_a;
                // Variable Initialization
                // Implementation
                gf_AddExperience(lp_killingUnit, 50.0);
                gf_CreateLoot(&quot;RadiantGem&quot;, UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="06088290">
        <ScriptCode>
            void gf_DeathMonstrosity (unit lp_dyingUnit, unit lp_killingUnit) {
                int auto04A3D1B9_val;
                // Variable Declarations
                string lv_loot;
                int lv_a;
                // Variable Initialization
                // Implementation
                gf_AddExperience(lp_killingUnit, 500.0);
                lv_a = RandomInt(1, 5);
                auto04A3D1B9_val = lv_a;
                if (auto04A3D1B9_val == 1) {
                    lv_loot = &quot;Demonward&quot;;
                }
                else if (auto04A3D1B9_val == 2) {
                    lv_loot = &quot;RepeatingCrossbow&quot;;
                }
                else if (auto04A3D1B9_val == 3) {
                    lv_loot = &quot;GoldenHauberk&quot;;
                }
                else if (auto04A3D1B9_val == 4) {
                    lv_loot = &quot;MasterRangersMaille&quot;;
                }
                else if (auto04A3D1B9_val == 5) {
                    lv_loot = &quot;GravesingersClaw&quot;;
                }
                else {
                    lv_loot = &quot;HandfulofBerries&quot;;
                }
                gf_CreateLoot(lv_loot, UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
                gf_CreateLoot(&quot;ReapersHand&quot;, UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
                gf_CreateLoot(&quot;BoneTalisman&quot;, UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
                gf_CreateLoot(&quot;DraughtofDecay&quot;, UnitGetPosition(lp_dyingUnit), 1.0, true, 100, 0);
                gf_CreateLoot(&quot;GoldPurse&quot;, UnitGetPosition(lp_dyingUnit), 1.0, true, 100, RandomInt(50, 60));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C793B9AF">
        <ScriptCode>
            void gf_CampfireDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_dyingUnit);
                // Implementation
                if ((gv_dead[lv_i] == true)) {
                }
                else {
                    UnitCreate(1, &quot;Campfire&quot;, c_unitCreateIgnorePlacement, lv_i, UnitGetPosition(lp_dyingUnit), UnitGetFacing(lp_dyingUnit));
                    if ((lp_killingUnit == lp_dyingUnit)) {
                        UnitClearSelection(lv_i);
                        UnitSelect(UnitLastCreated(), UnitGetOwner(UnitLastCreated()), true);
                    }
                    else {
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="BB815C71">
        <ScriptCode>
            void gf_NightwispDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Implementation
                gf_AddExperience(lp_killingUnit, 50.0);
                if ((UnitGroupHasUnit(gv_pets[UnitGetOwner(lp_dyingUnit)], lp_dyingUnit) == true)) {
                    gf_LosePet(lp_dyingUnit);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="80D61042">
        <ScriptCode>
            void gf_StagDeath (unit lp_dyingUnit, unit lp_killingUnit) {
                // Implementation
                if ((UnitGetOwner(lp_killingUnit) != 0) &amp;&amp; (UnitGetOwner(lp_killingUnit) != 15)) {
                    gf_AddExperience(lp_killingUnit, 100.0);
                    UnitCreate(1, &quot;RawStagMeat&quot;, 0, 0, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_dyingUnit), 1.0)), libNtve_gf_RandomAngle());
                    UnitCreate(1, &quot;Leather&quot;, 0, 0, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_dyingUnit), 1.0)), libNtve_gf_RandomAngle());
                    UnitCreate(1, &quot;Antlers&quot;, 0, 0, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_dyingUnit), 1.0)), libNtve_gf_RandomAngle());
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="122FFFE6">
        <ScriptCode>
            trigger auto_gf_PostDeathHint_Trigger = null;
            int auto_gf_PostDeathHint_lp_player;
            fixed auto_gf_PostDeathHint_lp_delay;
            void gf_PostDeathHint (int lp_player, fixed lp_delay) {
                auto_gf_PostDeathHint_lp_player = lp_player;
                auto_gf_PostDeathHint_lp_delay = lp_delay;
                if (auto_gf_PostDeathHint_Trigger == null) {
                    auto_gf_PostDeathHint_Trigger = TriggerCreate(&quot;auto_gf_PostDeathHint_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_PostDeathHint_Trigger, false, false);
            }
            bool auto_gf_PostDeathHint_TriggerFunc (bool testConds, bool runActions) {
                int lp_player = auto_gf_PostDeathHint_lp_player;
                fixed lp_delay = auto_gf_PostDeathHint_lp_delay;
                // Implementation
                if ((StringSub(gv_hints[lp_player], 20, 20) == &quot;0&quot;)) {
                    Wait(lp_delay, c_timeGame);
                    if ((gv_gameOver == false)) {
                        gf_InGameHint(&quot;perks&quot;, lp_player);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FF72FF2D">
        <ScriptCode>
            void gf_UpdateRezShrine (int lp_player) {
                int autoF5592C72_ae;
                int autoF5592C72_ai;
                // Variable Declarations
                playergroup lv_deadPlayers;
                playergroup lv_tempGroup;
                int lv_a;
                // Variable Initialization
                lv_deadPlayers = PlayerGroupEmpty();
                lv_tempGroup = PlayerGroupEmpty();
                // Implementation
                PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_beingResurrected[PlayerGroupLoopCurrent()] == false) &amp;&amp; ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) || (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeComputer)) &amp;&amp; ((gv_playerData[PlayerGroupLoopCurrent()].lv_kobold == null) || (UnitIsAlive(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) == false))) {
                        PlayerGroupAdd(lv_deadPlayers, PlayerGroupLoopCurrent());
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                autoF5592C72_ae = 4;
                autoF5592C72_ai = 1;
                lv_a = 1;
                for ( ; ( (autoF5592C72_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoF5592C72_ae) || (autoF5592C72_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoF5592C72_ae) ) ; lv_a += autoF5592C72_ai ) {
                    if ((PlayerGroupCount(lv_deadPlayers) &gt; 0)) {
                        libNtve_gf_SetDialogItemText(gv_rezzDialogBTN[lv_a], (StringExternal(&quot;Param/Value/4B65B3D1&quot;) + (gf_GetPlayerName(PlayerGroupPlayer(lv_deadPlayers, 1), -1) + StringExternal(&quot;Param/Value/90946D2A&quot;))), PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemTooltip(gv_rezzDialogBTN[lv_a], StringExternal(&quot;Param/Value/AEBC4DE7&quot;), PlayerGroupSingle(lp_player));
                        DialogControlSetVisible(gv_rezzDialogBTN[lv_a], PlayerGroupSingle(lp_player), true);
                        gv_rezzBTNTargetPlayer[lv_a][lp_player] = PlayerGroupPlayer(lv_deadPlayers, 1);
                        PlayerGroupRemove(lv_deadPlayers, PlayerGroupPlayer(lv_deadPlayers, 1));
                        lv_tempGroup = lv_deadPlayers;
                        lv_deadPlayers = lv_tempGroup;
                    }
                    else {
                        DialogControlSetVisible(gv_rezzDialogBTN[lv_a], PlayerGroupSingle(lp_player), false);
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7C94736C">
        <ScriptCode>
            void gf_Resurrecting (unit lp_rezzer, unit lp_shrine, int lp_player, fixed lp_rezzTimes) {
                // Variable Declarations
                const fixed lv_interval = 0.25;
                int lv_i;
                fixed lv_rezzDuration;
                fixed lv_experienceGain;
                fixed lv_progress;
                int lv_turnInterval;
                bool lv_finished;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_rezzer);
                lv_rezzDuration = lp_rezzTimes;
                lv_experienceGain = (lp_rezzTimes * 2.0);
                // Implementation
                UnitIssueOrder(lp_rezzer, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                gf_Quicktag(lp_rezzer, StringExternal(&quot;Param/Value/1B22FE2A&quot;), 2.0, 24);
                UIAlertUnit(&quot;BeingResurrected&quot;, lp_player, StringExternal(&quot;Param/Value/C272ED5B&quot;), null, lp_shrine);
                UIAlertUnit(&quot;AllyBeingResurrected&quot;, lp_player, StringExternal(&quot;Param/Value/01C512CF&quot;), null, lp_shrine);
                gv_beingResurrected[lp_player] = true;
                while ((lv_finished == false) &amp;&amp; (gv_playerData[lv_i].lv_alive == true) &amp;&amp; (UnitHasBehavior(lp_rezzer, &quot;Unconscious&quot;) == false) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_rezzer), UnitGetPosition(lp_shrine)) &lt;= (gv_interactRadius + gv_interactRadiusBonus))) {
                    if ((lv_progress &gt;= lv_rezzDuration)) {
                        lv_finished = true;
                        gv_alliesResurrected[lv_i] += 1;
                        gf_Quicktag(lp_rezzer, (StringExternal(&quot;Param/Value/09003102&quot;) + (gf_GetPlayerName(lp_player, 0) + StringExternal(&quot;Param/Value/8D46DF6F&quot;))), 2.0, 24);
                        gf_AddExperience(lp_rezzer, lv_experienceGain);
                        gf_ResurrectPlayer(lp_player, lp_shrine);
                        SoundPlayAtPoint(SoundLink(&quot;ResurrectionFinishSound&quot;, -1), PlayerGroupAll(), UnitGetPosition(lp_shrine), 0.0, 100.0, 0.0);
                        ActorSend(libNtve_gf_MainActorofUnit(lp_rezzer), &quot;Signal WorkComplete&quot;);
                        if ((gv_alliesResurrected[lv_i] &gt;= 5)) {
                            gf_UnlockRequirement(lv_i, 2, 2);
                        }
                        else {
                        }
                    }
                    else {
                        lv_progress += lv_interval;
                        if (lv_turnInterval &gt;= 4) {
                            lv_turnInterval = 1;
                        }
                        else {
                            lv_turnInterval = lv_turnInterval + 1;
                        }
                        if ((lv_turnInterval == 1) &amp;&amp; (UnitHasBehavior(lp_rezzer, &quot;Stationary&quot;) == true)) {
                            libNtve_gf_MakeUnitFacePoint(lp_rezzer, UnitGetPosition(lp_shrine), 0.5);
                        }
                        else {
                        }
                        Wait(lv_interval, c_timeGame);
                    }
                }
                if ((lv_finished == false)) {
                    SoundPlay(SoundLink(&quot;CraftingFailed&quot;, -1), PlayerGroupSingle(lv_i), 100.0, 0.0);
                    gf_Quicktag(lp_rezzer, StringExternal(&quot;Param/Value/712799BE&quot;), 2.0, 24);
                }
                else {
                }
                UnitBehaviorRemove(lp_rezzer, &quot;Resurrecting&quot;, 1);
                gv_beingResurrected[lp_player] = false;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A1B62FFA">
        <ScriptCode>
            void gf_ResurrectPlayer (int lp_player, unit lp_shrine) {
                // Variable Declarations
                point lv_rezzloc;
                fixed lv_temp;
                int lv_a;
                // Variable Initialization
                // Implementation
                gf_SetKoboldDefault(lp_player);
                gf_ClearResourceReserves(lp_player);
                if ((lp_shrine == UnitFromId(2745))) {
                    lv_rezzloc = PointWithOffsetPolar(UnitGetPosition(UnitFromId(2745)), 2.0, 250.0);
                }
                else if ((lp_shrine == UnitFromId(2316))) {
                    lv_rezzloc = PointWithOffsetPolar(UnitGetPosition(UnitFromId(2316)), 2.0, 310.0);
                }
                else if ((lp_shrine == null)) {
                    lv_rezzloc = gf_DynamicResLocation(lp_player);
                }
                UnitCreate(1, &quot;Kobold&quot;, 0, lp_player, lv_rezzloc, libNtve_gf_RandomAngle());
                gv_playerData[lp_player].lv_kobold = UnitLastCreated();
                gv_dead[lp_player] = false;
                gv_teamData[gf_GetTeamOfPlayer(lp_player)].lv_koboldsAlive += 1;
                gv_playerData[lp_player].lv_alive = true;
                gv_playerData[lp_player].lv_gameStats.lv_timesResurrected += 1;
                UnitClearSelection(lp_player);
                UnitSelect(gv_playerData[lp_player].lv_kobold, lp_player, true);
                UnitControlGroupAddUnit(lp_player, 1, gv_playerData[lp_player].lv_kobold);
                UnitBehaviorAdd(UnitLastCreated(), &quot;RecentlyResurrected&quot;, gv_playerData[lp_player].lv_kobold, 1);
                gf_SetupStartingSpells(gv_playerData[lp_player].lv_kobold);
                gf_SetupStartingItems(gv_playerData[lp_player].lv_kobold, true);
                gf_SetupPerkBonusi(gv_playerData[lp_player].lv_kobold, true);
                gf_SkillBonusesPostMortem(lp_player);
                gf_UpdateSpellCosts(lp_player);
                CameraPan(lp_player, UnitGetPosition(gv_playerData[lp_player].lv_kobold), 0.0, -1, 10, true);
                if ((gv_playerData[lp_player].lv_isAI == true)) {
                    UnitSetCustomValue(gv_playerData[lp_player].lv_kobold, 5, 1.0);
                    UnitBehaviorAdd(gv_playerData[lp_player].lv_kobold, &quot;KoboldBotInitialDelay&quot;, gv_playerData[lp_player].lv_kobold, 1);
                    gf_AISpendSkillPoints(lp_player);
                }
                else {
                }
                UnitSetPropertyFixed(gv_playerData[lp_player].lv_kobold, c_unitPropXP, gv_savedXP[lp_player]);
                gf_UpdateHighlightTooltip(lp_player);
                gv_playerData[lp_player].lv_warmth += 100.0;
                gv_playerData[lp_player].lv_hunger += 100.0;
                gv_playerData[lp_player].lv_stamina += 100.0;
                UnitGroupLoopBegin(gv_pets[lp_player]);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_TameAnimal(UnitLastCreated(), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                gf_UpdateForestry(lp_player);
                gf_UpdateMining(lp_player);
                gf_UpdateCooking(lp_player);
                gf_UpdateForaging(lp_player);
                gf_UpdateArtisanship(lp_player);
                gf_UpdateStatsAll(lp_player);
                gf_ResumeSituationalMusic(lp_player);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5A822BE0">
        <ScriptCode>
            void gf_SkillBonusesPostMortem (int lp_player) {
                // Implementation
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lp_player)) + IntToFixed((gv_skillForestry[lp_player] / 5))), 0));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="23561193">
        <ScriptCode>
            void gf_ReincarnatePlayerStart (int lp_player, fixed lp_time) {
                // Implementation
                if ((gv_gameOver == false) &amp;&amp; (((gv_gameMode == 2) &amp;&amp; (gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerDefeat == false)) || (gv_playerData[lp_player].lv_reincarnation == true))) {
                    TimerStart(gv_reincarnationTimer[lp_player], lp_time, false, c_timeGame);
                    TimerWindowCreate(TimerLastStarted(), StringExternal(&quot;Param/Value/20AFBED1&quot;), false, false);
                    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(lp_player), true);
                    TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
                    TimerWindowShowBorder(TimerWindowLastCreated(), false);
                    gv_reincarnationTimerWindow[lp_player] = TimerWindowLastCreated();
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="17FBB918">
        <ScriptCode>
            void gf_ReincarnatePlayerFinish (int lp_player) {
                // Implementation
                if ((gv_gameOver == false) &amp;&amp; (((gv_gameMode == 2) &amp;&amp; (gv_teamData[gv_playerData[lp_player].lv_team].lv_watchTowerDefeat == false)) || (gv_playerData[lp_player].lv_reincarnation == true))) {
                    gf_ResurrectPlayer(lp_player, gv_playerData[lp_player].lv_reincarnationBuilding);
                    gv_playerData[lp_player].lv_reincarnation = false;
                    gv_playerData[lp_player].lv_reincarnationBuilding = null;
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5C828CC3">
        <ScriptCode>
            point gf_DynamicResLocation (int lp_player) {
                int auto78F0B3CE_ae;
                int auto78F0B3CE_ai;
                // Variable Declarations
                int lv_a;
                unit lv_b;
                int lv_t;
                point lv_value;
                // Variable Initialization
                lv_t = gv_playerData[lp_player].lv_team;
                // Implementation
                if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower) &amp;&amp; (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_teamData[lv_t].lv_watchTower), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;Sight&quot;, UnitGetOwner(gv_teamData[lv_t].lv_watchTower)))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    lv_value = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(gv_teamData[lv_t].lv_watchTower), 8.0));
                }
                else {
                    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;Sight&quot;, UnitGetOwner(UnitGroupLoopCurrent())))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                            lv_b = UnitGroupLoopCurrent();
                        }
                        else {
                        }
                    }
                    UnitGroupLoopEnd();
                    if (gf_UnitExists(lv_b)) {
                        lv_value = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lv_b), 4.0));
                    }
                    else {
                        auto78F0B3CE_ae = 20;
                        auto78F0B3CE_ai = 1;
                        lv_a = 1;
                        for ( ; ( (auto78F0B3CE_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto78F0B3CE_ae) || (auto78F0B3CE_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto78F0B3CE_ae) ) ; lv_a += auto78F0B3CE_ai ) {
                            if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower)) {
                                lv_value = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(gv_teamData[lv_t].lv_watchTower), 64.0));
                            }
                            else {
                                lv_value = gf_RandomPathablePoint(RegionPlayableMap());
                            }
                            if ((lv_value != null) &amp;&amp; (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceEnemy, RegionCircle(lv_value, 16.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                                lv_a = 100;
                            }
                            else {
                            }
                        }
                        if ((lv_value != null)) {
                        }
                        else {
                            lv_value = gf_GetTeamStart(lp_player);
                        }
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="E477B158">
        <Item Type="CustomScript" Id="B0B7D697"/>
        <Item Type="CustomScript" Id="23B1E662"/>
        <Item Type="CustomScript" Id="B475681B"/>
        <Item Type="CustomScript" Id="C25221D1"/>
        <Item Type="CustomScript" Id="DF198932"/>
        <Item Type="CustomScript" Id="1E9993CA"/>
        <Item Type="CustomScript" Id="EFC8DFDD"/>
    </Element>
    <Element Type="CustomScript" Id="B0B7D697">
        <ScriptCode>
            void gf_Endgame (bool lp_ignoreConditions, bool lp_soloTeamGame) {
                // Variable Declarations
                int lv_dead;
                text lv_victoryText;
                text lv_defeatedText;
                // Variable Initialization
                lv_victoryText = StringExternal(&quot;Param/Value/FFF9767D&quot;);
                lv_defeatedText = StringExternal(&quot;Param/Value/1D0523FA&quot;);
                // Implementation
                if ((gv_gameStarted == true) &amp;&amp; (gv_gameOver == false) &amp;&amp; (gv_tutorial == false)) {
                    gf_Turnoffstuff();
                    if ((lp_soloTeamGame == false)) {
                        gv_winningTeam = gf_LastTeamStanding();
                        gv_losingPlayers = PlayerGroupActive();
                        gv_winningPlayers = gv_teamData[gv_winningTeam].lv_members;
                        libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_winningPlayers, gv_losingPlayers);
                    }
                    else {
                        gv_losingPlayers = PlayerGroupActive();
                    }
                    SoundtrackPlay(gv_losingPlayers, c_soundtrackCategoryMusic, &quot;KoboldMusicDefeat&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    SoundtrackPlay(gv_winningPlayers, c_soundtrackCategoryMusic, &quot;KoboldMusicVictory&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    UIDisplayMessage(gv_winningPlayers, c_messageAreaDirective, lv_victoryText);
                    UIDisplayMessage(gv_losingPlayers, c_messageAreaDirective, lv_defeatedText);
                    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
                    gf_EndgameStats(gv_winningPlayers, gv_losingPlayers);
                    Wait(5.0, c_timeGame);
                    PlayerGroupLoopBegin(PlayerGroupActive());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        gf_InGameHint(&quot;postgame&quot;, PlayerGroupLoopCurrent());
                    }
                    PlayerGroupLoopEnd();
                    Wait(25.0, c_timeGame);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/2D628DFB&quot;));
                    Wait(60.0, c_timeGame);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/AEB8FB95&quot;));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="23B1E662">
        <ScriptCode>
            bool gf_AllDeadOnTeam (int lp_team, bool lp_messages) {
                // Variable Declarations
                bool lv_value;
                // Variable Initialization
                lv_value = true;
                // Implementation
                if ((gv_teamData[lp_team].lv_watchTowerDefeat == false)) {
                    PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if (((gv_dead[PlayerGroupLoopCurrent()] == false) || (gv_playerData[PlayerGroupLoopCurrent()].lv_reincarnation == true)) &amp;&amp; (((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) &amp;&amp; (PlayerStatus(PlayerGroupLoopCurrent()) != c_playerStatusLeft)) || (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeComputer) || (gv_aIFFATestingOverride == true))) {
                            lv_value = false;
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                }
                else {
                }
                if ((lp_messages == true)) {
                    if ((lv_value == true)) {
                        if ((UnitGroupCount(gf_LivingKoboldsOnTeam(lp_team), c_unitCountAlive) == 1)) {
                            TextExpressionSetToken(&quot;Param/Expression/E18FA707&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/2E7A8335&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/E18FA707&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lp_team));
                            TextExpressionSetToken(&quot;Param/Expression/E18FA707&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/8AF9A483&quot;));
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/E18FA707&quot;));
                        }
                        else if ((UnitGroupCount(gf_LivingKoboldsOnTeam(lp_team), c_unitCountAlive) &gt; 1)) {
                            TextExpressionSetToken(&quot;Param/Expression/D1729179&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/8DE578B2&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/D1729179&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lp_team));
                            TextExpressionSetToken(&quot;Param/Expression/D1729179&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/DF9A1F62&quot;));
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/D1729179&quot;));
                        }
                    }
                    else {
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B475681B">
        <ScriptCode>
            unitgroup gf_LivingKoboldsOnTeam (int lp_team) {
                // Variable Declarations
                unitgroup lv_value;
                // Variable Initialization
                lv_value = UnitGroupEmpty();
                // Implementation
                if (((lp_team &gt;= 1) &amp;&amp; (lp_team &lt;= gv_maxTeams))) {
                    PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                            UnitGroupAdd(lv_value, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C25221D1">
        <ScriptCode>
            void gf_EndgameStats (playergroup lp_winningPlayers, playergroup lp_losingPlayers) {
                int auto4AB2417E_n;
                int auto4AB2417E_i;
                // Variable Declarations
                int lv_a;
                bool[gv_players + 1] lv_dinged;
                fixed[gv_players + 1] lv_experienceGained;
                fixed[gv_players + 1] lv_experienceTotal;
                fixed[gv_players + 1] lv_experienceTNL;
                bool[gv_players + 1] lv_gainedXP;
                playergroup lv_allUsers;
                fixed lv_cPEarned;
                fixed lv_cPFactor;
                // Variable Initialization
                lv_allUsers = PlayerGroupEmpty();
                lv_cPFactor = RandomFixed(1.2, 1.4);
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                        PlayerGroupAdd(lv_allUsers, PlayerGroupLoopCurrent());
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                gf_SetupPostgameFeats();
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                // Just checks if player cheated in single player
                if (!gv_cheated){
                    PlayerGroupLoopBegin(gv_winningPlayers);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        gf_ModifyMatchHistory(PlayerGroupLoopCurrent(), &quot;W&quot;);
                        if ((gv_rated == true) &amp;&amp; (gv_validRatedGame == true)) {
                            gf_UpdatePlayerRating(PlayerGroupLoopCurrent(), 1);
                        }
                        else {
                        }
                        gv_accwins[PlayerGroupLoopCurrent()] += 1;
                        lv_experienceGained[PlayerGroupLoopCurrent()] = (25.0 + (gv_gameDuration * 0.07));
                        gv_accxp[PlayerGroupLoopCurrent()] += FixedToInt(lv_experienceGained[PlayerGroupLoopCurrent()]);
                        lv_experienceTotal[PlayerGroupLoopCurrent()] = gv_accxp[PlayerGroupLoopCurrent()];
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(gv_losingPlayers);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        gf_ModifyMatchHistory(PlayerGroupLoopCurrent(), &quot;L&quot;);
                        if ((gv_rated == true) &amp;&amp; (gv_validRatedGame == true)) {
                            gf_UpdatePlayerRating(PlayerGroupLoopCurrent(), 0);
                        }
                        else {
                        }
                        gv_acclosses[PlayerGroupLoopCurrent()] += 1;
                        lv_experienceGained[PlayerGroupLoopCurrent()] = (10.0 + (gv_gameDuration * 0.05));
                        gv_accxp[PlayerGroupLoopCurrent()] += FixedToInt(lv_experienceGained[PlayerGroupLoopCurrent()]);
                        lv_experienceTotal[PlayerGroupLoopCurrent()] = gv_accxp[PlayerGroupLoopCurrent()];
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(PlayerGroupActive());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        auto4AB2417E_n = 20;
                        for (auto4AB2417E_i = 1; auto4AB2417E_i &lt;= auto4AB2417E_n; auto4AB2417E_i += 1) {
                            if ((gv_acclvl[PlayerGroupLoopCurrent()] &lt; 20)) {
                                lv_gainedXP[PlayerGroupLoopCurrent()] = true;
                                lv_experienceTNL[PlayerGroupLoopCurrent()] = (-50.0 + (IntToFixed(gv_acclvl[PlayerGroupLoopCurrent()]) * (100.0 + (5.0 * IntToFixed(gv_acclvl[PlayerGroupLoopCurrent()])))));
                                if ((gv_accxp[PlayerGroupLoopCurrent()] &gt;= FixedToInt(lv_experienceTNL[PlayerGroupLoopCurrent()]))) {
                                    gv_acclvl[PlayerGroupLoopCurrent()] += 1;
                                    gv_accpp[PlayerGroupLoopCurrent()] += 1;
                                    lv_dinged[PlayerGroupLoopCurrent()] = true;
                                    lv_experienceTNL[PlayerGroupLoopCurrent()] = (-50.0 + (IntToFixed(gv_acclvl[PlayerGroupLoopCurrent()]) * (100.0 + (5.0 * IntToFixed(gv_acclvl[PlayerGroupLoopCurrent()])))));
                                }
                                else {
                                }
                            }
                            else {
                                lv_experienceTNL[PlayerGroupLoopCurrent()] = 0.0;
                            }
                        }
                    }
                    PlayerGroupLoopEnd();
                }
                // You cheated in single player
                else {  
                    UIDisplayMessage(PlayerGroupAll(), 1, StringToText(&quot;&lt;c val=\&quot;04ADFF\&quot;&gt;Single Player: &lt;/c&gt;&quot; + 
                        &quot;&lt;c val=\&quot;A6D69A\&quot;&gt;No stats will be recorded due to cheating.&lt;/c&gt;&quot;));
                }
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((lv_gainedXP[PlayerGroupLoopCurrent()] == true)) {
                        if ((gv_acclvl[PlayerGroupLoopCurrent()] == 20) &amp;&amp; (lv_dinged[PlayerGroupLoopCurrent()] == true)) {
                            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/6551B093&quot;) + (FixedToText(lv_experienceGained[PlayerGroupLoopCurrent()], 0) + (StringExternal(&quot;Param/Value/E9436739&quot;) + (FixedToText(lv_experienceTotal[PlayerGroupLoopCurrent()], 0) + StringExternal(&quot;Param/Value/FE6BB8E4&quot;))))));
                            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/0C619275&quot;) + (IntToText(gv_acclvl[PlayerGroupLoopCurrent()]) + StringExternal(&quot;Param/Value/2250725E&quot;))));
                            SoundPlay(SoundLink(&quot;UI_Achievement&quot;, -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
                            gf_InGameHint(&quot;conqpoints&quot;, PlayerGroupLoopCurrent());
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/4137514A&quot;) + (FixedToText(lv_experienceGained[PlayerGroupLoopCurrent()], 0) + (StringExternal(&quot;Param/Value/F8243520&quot;) + (FixedToText(lv_experienceTotal[PlayerGroupLoopCurrent()], 0) + (StringExternal(&quot;Param/Value/6B85F99A&quot;) + (FixedToText((lv_experienceTNL[PlayerGroupLoopCurrent()] - lv_experienceTotal[PlayerGroupLoopCurrent()]), 0) + StringExternal(&quot;Param/Value/D109164F&quot;))))))));
                            if ((lv_dinged[PlayerGroupLoopCurrent()] == true)) {
                                if ((gv_acclvl[PlayerGroupLoopCurrent()] == gv_rewardLevelRequirement)) {
                                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/B6A3EB26&quot;) + (IntToText(gv_acclvl[PlayerGroupLoopCurrent()]) + StringExternal(&quot;Param/Value/762652A3&quot;))));
                                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/1F67632A&quot;));
                                    SoundPlay(SoundLink(&quot;UI_BNet_Achievement&quot;, -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
                                }
                                else {
                                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/3D87509B&quot;) + (IntToText(gv_acclvl[PlayerGroupLoopCurrent()]) + StringExternal(&quot;Param/Value/1ED6E77D&quot;))));
                                    SoundPlay(SoundLink(&quot;UI_Achievement&quot;, -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
                                }
                            }
                            else {
                            }
                        }
                    }
                    else {
                    }
                    if ((gv_acclvl[PlayerGroupLoopCurrent()] &gt;= gv_rewardLevelRequirement)) {
                        lv_cPEarned = (lv_experienceGained[PlayerGroupLoopCurrent()] * lv_cPFactor);
                        gv_conqpoints[PlayerGroupLoopCurrent()] += FixedToInt(lv_cPEarned);
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/0188EA42&quot;) + (IntToText(FixedToInt(lv_cPEarned)) + (StringExternal(&quot;Param/Value/BC2DBF54&quot;) + (IntToText(gv_conqpoints[PlayerGroupLoopCurrent()]) + StringExternal(&quot;Param/Value/05C8617B&quot;))))));
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                if ((gv_banksInitialized == true)) {
                    PlayerGroupLoopBegin(lv_allUsers);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_bankSynced[PlayerGroupLoopCurrent()] == true)) {
                            gf_SaveResources(PlayerGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                }
                else {
                }
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_UpdatePGSWindow(PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                libNtve_gf_SetDialogItemText(gv_pGSWindowSmallBTN, StringExternal(&quot;Param/Value/342414FA&quot;), PlayerGroupActive());
                libNtve_gf_SetDialogItemText(gv_perkDialogSmallBTN, StringExternal(&quot;Param/Value/85DC213C&quot;), PlayerGroupActive());
                if ((gv_activeTeams == 2)) {
                    DialogSetVisible(gv_pGSWindowLarge, PlayerGroupAll(), true);
                }
                else {
                    DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupAll(), true);
                }
                DialogSetVisible(gv_perkDialogSmall, PlayerGroupActive(), true);
                DialogSetVisible(gv_pGSWindowSmall, PlayerGroupActive(), true);
                DialogSetVisible(gv_rewardsOpenerDialog, PlayerGroupActive(), true);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_acclvl[PlayerGroupLoopCurrent()] &lt; gv_rewardLevelRequirement)) {
                        libNtve_gf_SetDialogItemTooltip(gv_rewardsOpenerItem, (libNtve_gf_DialogItemTooltip(gv_rewardsOpenerItem, PlayerGroupLoopCurrent()) + StringExternal(&quot;Param/Value/F1143CFD&quot;)), PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    }
                    else {
                    }
                    libNtve_gf_SetDialogItemText(gv_rewardsOpenerItem, gf_RewardsOpenerText(PlayerGroupLoopCurrent()), PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gf_RunPostgameFeats(PlayerGroupLoopCurrent());
                    gf_EndgameRequirementsCheck(PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DF198932">
        <ScriptCode>
            void gf_Turnoffstuff () {
                int autoE04053BF_ae;
                int autoE04053BF_ai;
                int auto403FF605_ae;
                int auto403FF605_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Implementation
                gv_gameOver = true;
                gv_questIndexActive = 0;
                gv_questActive = false;
                TimerPause(gv_questDelayTimer, true);
                TimerPause(gv_questTimer, true);
                autoE04053BF_ae = gv_players;
                autoE04053BF_ai = 1;
                lv_a = 1;
                for ( ; ( (autoE04053BF_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE04053BF_ae) || (autoE04053BF_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE04053BF_ae) ) ; lv_a += autoE04053BF_ai ) {
                    TimerPause(gv_reincarnationTimer[lv_a], true);
                    TimerWindowDestroy(gv_reincarnationTimerWindow[lv_a]);
                    TimerPause(gv_destroyerTimer[lv_a], true);
                    DialogSetVisible(gv_observeAnswer[lv_a], PlayerGroupAll(), false);
                }
                DialogSetVisible(gv_observeRequest, PlayerGroupAll(), false);
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_chiefPing);
                PingDestroy(gv_feastChefPing);
                PingDestroy(gv_merchantPing);
                PingDestroy(gv_shipmentPing);
                auto403FF605_ae = 20;
                auto403FF605_ai = 1;
                lv_a = 1;
                for ( ; ( (auto403FF605_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto403FF605_ae) || (auto403FF605_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto403FF605_ae) ) ; lv_a += auto403FF605_ai ) {
                    PingDestroy(gv_treasurePing[lv_a]);
                }
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
                }
                UnitGroupLoopEnd();
                DialogSetVisible(gv_skillWindowBig, PlayerGroupAll(), false);
                DialogSetVisible(gv_skillWindowSmall, PlayerGroupAll(), false);
                DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupAll(), false);
                DialogSetVisible(gv_statusDialog, PlayerGroupAll(), false);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, gv_musicVolume, 0.0);
                TriggerEnable(gt_TheBigPeriod, false);
                TriggerEnable(gt_AIMainThread, false);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1E9993CA">
        <ScriptCode>
            void gf_ModifyMatchHistory (int lp_player, string lp_char) {
                // Variable Declarations
                int lv_maximumHistoryLength;
                // Variable Initialization
                lv_maximumHistoryLength = 10;
                // Implementation
                gv_matchhistory[lp_player] = (gv_matchhistory[lp_player] + lp_char);
                if ((StringLength(gv_matchhistory[lp_player]) &gt; lv_maximumHistoryLength)) {
                    gv_matchhistory[lp_player] = StringReplace(gv_matchhistory[lp_player], &quot;&quot;, 1, (StringLength(gv_matchhistory[lp_player]) - lv_maximumHistoryLength));
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EFC8DFDD">
        <ScriptCode>
            int gf_LastTeamStanding () {
                int autoEEDF286F_ae;
                int autoEEDF286F_ai;
                // Variable Declarations
                int lv_a;
                int lv_teamsRemaining;
                int lv_value;
                // Variable Initialization
                // Implementation
                autoEEDF286F_ae = gv_activeTeams;
                autoEEDF286F_ai = 1;
                lv_a = 1;
                for ( ; ( (autoEEDF286F_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoEEDF286F_ae) || (autoEEDF286F_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoEEDF286F_ae) ) ; lv_a += autoEEDF286F_ai ) {
                    if ((gf_AllDeadOnTeam(lv_a, false) == false)) {
                        lv_teamsRemaining += 1;
                        lv_value = lv_a;
                    }
                    else {
                    }
                }
                if (((lv_teamsRemaining &gt; 1) || (gv_activeTeams == 1))) {
                    lv_value = -1;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="B266D895">
        <Item Type="CustomScript" Id="1793D2C0"/>
        <Item Type="CustomScript" Id="7970EA65"/>
        <Item Type="CustomScript" Id="7A14FA4A"/>
        <Item Type="CustomScript" Id="2BBD53F7"/>
        <Item Type="CustomScript" Id="FDDCC70D"/>
        <Item Type="CustomScript" Id="0E372BA4"/>
    </Element>
    <Element Type="CustomScript" Id="1793D2C0">
        <ScriptCode>
            void gf_DamageText (unit lp_source, unit lp_target, fixed lp_damageAmount, fixed lp_absorbed, string lp_effect) {
                // Variable Declarations
                int lv_i;
                int lv_j;
                int lv_fontSize;
                fixed lv_angle;
                fixed lv_offset;
                text lv_text;
                color lv_color;
                bool lv_fatal;
                playergroup lv_playergroup;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_source);
                lv_j = UnitGetOwner(lp_target);
                lv_color = Color(100,100,100);
                lv_fatal = (UnitGetPropertyFixed(lp_target, c_unitPropLife, c_unitPropCurrent) == 0);
                lv_playergroup = PlayerGroupSingle(lv_i);
                // Implementation
                if ((lp_target != lp_source) &amp;&amp; (lp_effect != &quot;KillWithDamage&quot;) &amp;&amp; ((lp_damageAmount &gt; 0.5) || (UnitHasBehavior(lp_target, &quot;TigerRage&quot;) == true) || (gv_noDamage == true))) {
                    if (((lv_i &gt;= 1) &amp;&amp; (lv_i &lt;= gv_players)) &amp;&amp; ((gv_dTDamageDoneOn[lv_i] == true) || (gv_playerData[lv_i].lv_isAI == true)) &amp;&amp; ((UnitGetType(lp_source) == &quot;Kobold&quot;) || (UnitGetType(lp_source) == &quot;Fortress&quot;) || (UnitGetType(lp_source) == &quot;AutomatedDefenseTurret&quot;) || (UnitGetType(lp_source) == &quot;SpikeTrap&quot;) || (UnitHasBehavior(lp_source, &quot;Tamed&quot;) == true)) &amp;&amp; (libNtve_gf_UnitIsVisibleToPlayer(lp_target, lv_i) == true)) {
                        lv_fontSize = FixedToInt(Round((gv_dTScaleValue[lv_i] * (19.0 + (lp_damageAmount * 0.05)))));
                        lv_fontSize = gf_RoundIntegertoEven(lv_fontSize);
                        if ((UnitGroupHasUnit(gv_recentlyDamaged[lv_i], lp_target) == true)) {
                            lv_offset = (RandomFixed(0.3, 0.35) + (IntToFixed(lv_fontSize) * 0.01));
                            lv_angle = gf_GetDTDamageDoneAngle(lv_i);
                        }
                        else {
                            gv_dTAngles[lv_i] = &quot;123456&quot;;
                        }
                        if ((lp_damageAmount == 0.0) &amp;&amp; ((UnitHasBehavior(lp_target, &quot;TigerRage&quot;) == true))) {
                            lv_text = StringExternal(&quot;Param/Value/240A50C7&quot;);
                            lv_color = Color(100.00, 100.00, 0.00);
                        }
                        else {
                            lv_text = FixedToText(Round(lp_damageAmount), 0);
                            lv_text = gf_DTSuffix(lp_absorbed, lv_text, lv_fatal);
                            lv_color = gf_GetDamageColor(lp_effect);
                        }
                        if ((lp_effect == &quot;BallistaDamage&quot;)) {
                            UnitGroupLoopBegin(UnitCargoGroup(lp_source));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                PlayerGroupAdd(lv_playergroup, UnitGetOwner(UnitGroupLoopCurrent()));
                            }
                            UnitGroupLoopEnd();
                        }
                        else {
                        }
                        TextTagCreate(TextWithColor(lv_text, lv_color), lv_fontSize, PointWithOffsetPolar(UnitGetPosition(lp_target), lv_offset, lv_angle), 1.5, true, false, lv_playergroup);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, (0.75 * gv_dTDurationValue[lv_i]));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (0.5 * gv_dTDurationValue[lv_i]));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (0.25 * gv_dTDurationValue[lv_i]));
                        UnitBehaviorAdd(lp_target, &quot;RecentlyDamaged&quot;, lp_source, 1);
                        if ((UnitGroupHasUnit(gv_recentlyDamaged[lv_i], lp_target) == false)) {
                            UnitGroupAdd(gv_recentlyDamaged[lv_i], lp_target);
                        }
                        else {
                        }
                    }
                    else {
                    }
                    if (((lv_j &gt;= 1) &amp;&amp; (lv_j &lt;= gv_players)) &amp;&amp; ((gv_dTDamageTakenOn[lv_j] == true) || (gv_playerData[lv_j].lv_isAI == true)) &amp;&amp; (UnitGetType(lp_target) == &quot;Kobold&quot;)) {
                        lv_fontSize = FixedToInt(Round((gv_dTScaleValue[lv_j] * (19.0 + (lp_damageAmount * 0.05)))));
                        lv_fontSize = gf_RoundIntegertoEven(lv_fontSize);
                        if ((UnitGroupHasUnit(gv_recentlyDamaged[lv_j], lp_target) == true)) {
                            lv_offset = (RandomFixed(0.3, 0.35) + (IntToFixed(lv_fontSize) * 0.01));
                            lv_angle = gf_GetDTDamageTakenAngle(lv_j);
                        }
                        else {
                            gv_dTAngles2[lv_j] = &quot;123456&quot;;
                        }
                        lv_text = FixedToText(Round(lp_damageAmount), 0);
                        lv_text = gf_DTSuffix(lp_absorbed, lv_text, lv_fatal);
                        lv_color = Color(100.00, 0.00, 0.00);
                        TextTagCreate(TextWithColor(lv_text, lv_color), lv_fontSize, PointWithOffsetPolar(UnitGetPosition(lp_target), lv_offset, lv_angle), 1.5, true, false, PlayerGroupSingle(lv_j));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, (0.75 * gv_dTDurationValue[lv_j]));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (0.5 * gv_dTDurationValue[lv_j]));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (0.25 * gv_dTDurationValue[lv_j]));
                        UnitBehaviorAdd(lp_target, &quot;RecentlyDamaged&quot;, lp_target, 1);
                        if ((UnitGroupHasUnit(gv_recentlyDamaged[lv_j], lp_target) == false)) {
                            UnitGroupAdd(gv_recentlyDamaged[lv_j], lp_target);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7970EA65">
        <ScriptCode>
            int gf_RoundIntegertoEven (int lp_int) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                lv_value = lp_int;
                // Implementation
                if ((ModI(lv_value, 2) == 1)) {
                    lv_value -= 1;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7A14FA4A">
        <ScriptCode>
            text gf_DTSuffix (fixed lp_absorbed, text lp_text, bool lp_fatal) {
                // Variable Declarations
                text lv_value;
                // Variable Initialization
                lv_value = lp_text;
                // Implementation
                if ((lp_fatal == true)) {
                    TextExpressionSetToken(&quot;Param/Expression/84FDAAD7&quot;, &quot;B&quot;, lv_value);
                    TextExpressionSetToken(&quot;Param/Expression/84FDAAD7&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/A2817C16&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/84FDAAD7&quot;);
                }
                else if ((lp_absorbed &gt; 0.0)) {
                    TextExpressionSetToken(&quot;Param/Expression/5794B673&quot;, &quot;B&quot;, lv_value);
                    TextExpressionSetToken(&quot;Param/Expression/5794B673&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/DF34F289&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/5794B673&quot;);
                }
                else if ((lp_absorbed &lt; 0.0)) {
                    TextExpressionSetToken(&quot;Param/Expression/659393E0&quot;, &quot;B&quot;, lv_value);
                    TextExpressionSetToken(&quot;Param/Expression/659393E0&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/201F4EE4&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/659393E0&quot;);
                }
                else if (true) {
                    TextExpressionSetToken(&quot;Param/Expression/B5E5588C&quot;, &quot;B&quot;, lv_value);
                    TextExpressionSetToken(&quot;Param/Expression/B5E5588C&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/E0F8CC08&quot;));
                    lv_value = TextExpressionAssemble(&quot;Param/Expression/B5E5588C&quot;);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2BBD53F7">
        <ScriptCode>
            color gf_GetDamageColor (string lp_effect) {
                // Variable Declarations
                color lv_value;
                // Variable Initialization
                lv_value = Color(100,100,100);
                // Implementation
                if (((lp_effect == &quot;MeleeDamage&quot;) || (lp_effect == &quot;BlunderbussDamage&quot;) || (lp_effect == &quot;ElderWandDamage&quot;) || (lp_effect == &quot;CravensFishStickerDamage&quot;) || (lp_effect == &quot;CravensFishStickerDamageExplosive&quot;) || (lp_effect == &quot;VenomousArbalestDamage&quot;) || (lp_effect == &quot;ViciousJavelinDamage&quot;) || (lp_effect == &quot;CelestialOrbDamage&quot;) || (lp_effect == &quot;RepeatingCrossbowDamage&quot;) || (lp_effect == &quot;RepeatingCrossbowDamageNoProc&quot;) || (lp_effect == &quot;TwinThrowingAxesDamageLeft&quot;) || (lp_effect == &quot;TwinThrowingAxesDamageRight&quot;) || (lp_effect == &quot;FrostBeamDamage&quot;))) {
                    lv_value = Color(100,100,100);
                }
                else if (((lp_effect == &quot;ShadowCloakDamage&quot;) || (lp_effect == &quot;SiphonLifeDummyDamage&quot;) || (lp_effect == &quot;FrostArmorDamage&quot;) || (lp_effect == &quot;AfflictionDamage&quot;))) {
                    lv_value = Color(28*100/255,167*100/255,234*100/255);
                }
                else if (((lp_effect == &quot;WolfBiteDamage&quot;) || (lp_effect == &quot;DirewolfBiteDamage&quot;) || (lp_effect == &quot;BearMaulDamage&quot;) || (lp_effect == &quot;FrostBearMaulDamage&quot;) || (lp_effect == &quot;NightwispDamage&quot;) || (lp_effect == &quot;SpikeTrapDamage&quot;) || (lp_effect == &quot;AutomatedDefenseTurretDamage&quot;))) {
                    lv_value = Color(149*100/255,150*100/255,151*100/255);
                }
                else if (true) {
                    lv_value = Color(254*100/255,138*100/255,14*100/255);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FDDCC70D">
        <ScriptCode>
            fixed gf_GetDTDamageDoneAngle (int lp_player) {
                // Variable Declarations
                int lv_random;
                int lv_index;
                fixed lv_value;
                // Variable Initialization
                // Implementation
                if ((StringLength(gv_dTAngles[lp_player]) == 0)) {
                    gv_dTAngles[lp_player] = &quot;123456&quot;;
                }
                else {
                }
                lv_random = RandomInt(1, StringLength(gv_dTAngles[lp_player]));
                lv_index = StringToInt(StringSub(gv_dTAngles[lp_player], lv_random, lv_random));
                lv_value = 90.0;
                lv_value += (IntToFixed(lv_index) * 45.0);
                gv_dTAngles[lp_player] = StringReplace(gv_dTAngles[lp_player], &quot;&quot;, lv_random, lv_random);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0E372BA4">
        <ScriptCode>
            fixed gf_GetDTDamageTakenAngle (int lp_player) {
                // Variable Declarations
                int lv_random;
                int lv_index;
                fixed lv_value;
                // Variable Initialization
                // Implementation
                if ((StringLength(gv_dTAngles2[lp_player]) == 0)) {
                    gv_dTAngles2[lp_player] = &quot;123456&quot;;
                }
                else {
                }
                lv_random = RandomInt(1, StringLength(gv_dTAngles2[lp_player]));
                lv_index = StringToInt(StringSub(gv_dTAngles2[lp_player], lv_random, lv_random));
                lv_value = 90.0;
                lv_value += (IntToFixed(lv_index) * 45.0);
                gv_dTAngles2[lp_player] = StringReplace(gv_dTAngles2[lp_player], &quot;&quot;, lv_random, lv_random);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="0CAE117E">
        <Item Type="CustomScript" Id="0EA858C4"/>
        <Item Type="CustomScript" Id="16635122"/>
        <Item Type="CustomScript" Id="15DE936E"/>
        <Item Type="CustomScript" Id="5C83E50F"/>
        <Item Type="CustomScript" Id="3160C765"/>
        <Item Type="CustomScript" Id="22DD80E5"/>
    </Element>
    <Element Type="CustomScript" Id="0EA858C4">
        <ScriptCode>
            void gf_Quicktag (unit lp_unit, text lp_text, fixed lp_totalDuration, int lp_fontSize) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if (gf_UnitExists(lp_unit)) {
                    if ((lp_unit == gv_playerData[lv_i].lv_kobold)) {
                        if (gv_tTCycle[lv_i] &gt;= gv_tTQueueSize) {
                            gv_tTCycle[lv_i] = 1;
                        }
                        else {
                            gv_tTCycle[lv_i] = gv_tTCycle[lv_i] + 1;
                        }
                        gv_tTUnit[gv_tTCycle[lv_i]][lv_i] = lp_unit;
                        gv_tTPlayer[gv_tTCycle[lv_i]][lv_i] = lv_i;
                        gv_tTText[gv_tTCycle[lv_i]][lv_i] = lp_text;
                        gv_tTDuration[gv_tTCycle[lv_i]][lv_i] = lp_totalDuration;
                        gv_tTSize[gv_tTCycle[lv_i]][lv_i] = lp_fontSize;
                        gv_tTExists[gv_tTCycle[lv_i]][lv_i] = true;
                        if ((UnitHasBehavior(lp_unit, &quot;TextTagged&quot;) == false)) {
                            gf_TextTag(lv_i, false);
                        }
                        else {
                        }
                    }
                    else {
                        TextTagCreate(lp_text, lp_fontSize, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupSingle(lv_i));
                        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_totalDuration);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (lp_totalDuration * 0.5));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (lp_totalDuration * 0.5));
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="16635122">
        <ScriptCode>
            void gf_Advancedtag (unit lp_unit, int lp_player, text lp_text, fixed lp_totalDuration, int lp_fontSize) {
                // Implementation
                if (gf_UnitExists(lp_unit)) {
                    if ((lp_unit == gv_playerData[lp_player].lv_kobold)) {
                        if (gv_tTCycle[lp_player] &gt;= gv_tTQueueSize) {
                            gv_tTCycle[lp_player] = 1;
                        }
                        else {
                            gv_tTCycle[lp_player] = gv_tTCycle[lp_player] + 1;
                        }
                        gv_tTUnit[gv_tTCycle[lp_player]][lp_player] = lp_unit;
                        gv_tTPlayer[gv_tTCycle[lp_player]][lp_player] = lp_player;
                        gv_tTText[gv_tTCycle[lp_player]][lp_player] = lp_text;
                        gv_tTDuration[gv_tTCycle[lp_player]][lp_player] = lp_totalDuration;
                        gv_tTSize[gv_tTCycle[lp_player]][lp_player] = lp_fontSize;
                        gv_tTExists[gv_tTCycle[lp_player]][lp_player] = true;
                        if ((UnitHasBehavior(lp_unit, &quot;TextTagged&quot;) == false)) {
                            gf_TextTag(lp_player, false);
                        }
                        else {
                        }
                    }
                    else {
                        TextTagCreate(lp_text, lp_fontSize, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupSingle(lp_player));
                        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_totalDuration);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (lp_totalDuration * 0.5));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (lp_totalDuration * 0.5));
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="15DE936E">
        <ScriptCode>
            void gf_Alltag (unit lp_unit, text lp_text, fixed lp_totalDuration, int lp_fontSize) {
                // Implementation
                if (gf_UnitExists(lp_unit)) {
                    TextTagCreate(lp_text, lp_fontSize, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupActive());
                    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_totalDuration);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (lp_totalDuration * 0.5));
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (lp_totalDuration * 0.5));
                    PlayerGroupLoopBegin(PlayerGroupActive());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((VisIsVisibleForPlayer(PlayerGroupLoopCurrent(), UnitGetPosition(lp_unit)) == false)) {
                            TextTagShow(TextTagLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5C83E50F">
        <ScriptCode>
            void gf_TextTag (int lp_player, bool lp_queued) {
                // Variable Declarations
                int lv_index;
                unit lv_unit;
                // Variable Initialization
                // Implementation
                if (gv_tTCurrentIndex[lp_player] &gt;= gv_tTQueueSize) {
                    gv_tTCurrentIndex[lp_player] = 1;
                }
                else {
                    gv_tTCurrentIndex[lp_player] = gv_tTCurrentIndex[lp_player] + 1;
                }
                lv_index = gv_tTCurrentIndex[lp_player];
                lv_unit = gv_tTUnit[lv_index][lp_player];
                TextTagCreate(gv_tTText[lv_index][lp_player], gv_tTSize[lv_index][lp_player], UnitGetPosition(gv_tTUnit[lv_index][lp_player]), 1.0, true, false, PlayerGroupSingle(lp_player));
                TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, gv_tTDuration[lv_index][lp_player]);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, (gv_tTDuration[lv_index][lp_player] * 0.5));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, (gv_tTDuration[lv_index][lp_player] * 0.5));
                UnitBehaviorAdd(lv_unit, &quot;TextTagged&quot;, lv_unit, 1);
                gf_TextTagIndexWipe(lp_player, lv_index);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3160C765">
        <ScriptCode>
            int gf_TextTagNextIndex (int lp_player, int lp_currentIndex) {
                // Variable Declarations
                int lv_value;
                // Variable Initialization
                lv_value = lp_currentIndex;
                // Implementation
                lv_value += 1;
                if ((lv_value &gt; gv_tTQueueSize)) {
                    lv_value = 1;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="22DD80E5">
        <ScriptCode>
            void gf_TextTagIndexWipe (int lp_player, int lp_index) {
                // Implementation
                gv_tTUnit[lp_index][lp_player] = null;
                gv_tTPlayer[lp_index][lp_player] = -1;
                gv_tTText[lp_index][lp_player] = null;
                gv_tTDuration[lp_index][lp_player] = 0.0;
                gv_tTSize[lp_index][lp_player] = 0;
                gv_tTExists[lp_index][lp_player] = false;
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="6B7AE7C5">
        <Item Type="CustomScript" Id="B363915A"/>
        <Item Type="CustomScript" Id="9E560F05"/>
        <Item Type="CustomScript" Id="5E3426B7"/>
        <Item Type="CustomScript" Id="9BBFD279"/>
        <Item Type="CustomScript" Id="A9B72916"/>
        <Item Type="CustomScript" Id="D4B14406"/>
        <Item Type="CustomScript" Id="98875AC6"/>
        <Item Type="CustomScript" Id="7BDA5C4C"/>
        <Item Type="CustomScript" Id="D6647CB3"/>
        <Item Type="CustomScript" Id="0588BD98"/>
        <Item Type="CustomScript" Id="D493B029"/>
        <Item Type="CustomScript" Id="F08036F5"/>
        <Item Type="CustomScript" Id="F9112634"/>
        <Item Type="CustomScript" Id="7DD8FA1A"/>
        <Item Type="CustomScript" Id="CC22E9FE"/>
        <Item Type="CustomScript" Id="78D9CC87"/>
        <Item Type="CustomScript" Id="76637D3E"/>
        <Item Type="CustomScript" Id="11E7E927"/>
        <Item Type="CustomScript" Id="AF1C013A"/>
        <Item Type="CustomScript" Id="F7CA8E8F"/>
        <Item Type="CustomScript" Id="A1129088"/>
        <Item Type="CustomScript" Id="144F0548"/>
        <Item Type="CustomScript" Id="F4F3BBB3"/>
        <Item Type="CustomScript" Id="1C7F9DCB"/>
        <Item Type="CustomScript" Id="D35B394F"/>
        <Item Type="CustomScript" Id="695DA851"/>
        <Item Type="CustomScript" Id="9AA1E85C"/>
        <Item Type="CustomScript" Id="3DCF90EB"/>
        <Item Type="CustomScript" Id="A8B4FA03"/>
        <Item Type="CustomScript" Id="8A14A8C0"/>
        <Item Type="CustomScript" Id="F997F72D"/>
        <Item Type="CustomScript" Id="48286F93"/>
        <Item Type="CustomScript" Id="3384D5DA"/>
        <Item Type="CustomScript" Id="215FBEA1"/>
        <Item Type="CustomScript" Id="93978CEA"/>
        <Item Type="CustomScript" Id="34A5AFB5"/>
        <Item Type="CustomScript" Id="71B13D10"/>
        <Item Type="CustomScript" Id="4D0E2898"/>
        <Item Type="CustomScript" Id="6854C37D"/>
        <Item Type="CustomScript" Id="4C5204F8"/>
        <Item Type="CustomScript" Id="6543396E"/>
        <Item Type="CustomScript" Id="82684B58"/>
        <Item Type="CustomScript" Id="5D73C58D"/>
        <Item Type="CustomScript" Id="73F09CC2"/>
        <Item Type="CustomScript" Id="6AE59EAD"/>
        <Item Type="CustomScript" Id="9C3A646D"/>
        <Item Type="CustomScript" Id="5372A2C4"/>
        <Item Type="CustomScript" Id="4B9E05DD"/>
        <Item Type="CustomScript" Id="D1EB083C"/>
        <Item Type="CustomScript" Id="120229A6"/>
        <Item Type="CustomScript" Id="47FBDEFC"/>
        <Item Type="CustomScript" Id="28C195D5"/>
        <Item Type="CustomScript" Id="FF482177"/>
        <Item Type="CustomScript" Id="ECAE5528"/>
        <Item Type="CustomScript" Id="49B40529"/>
        <Item Type="CustomScript" Id="546DCC13"/>
        <Item Type="CustomScript" Id="EB4E0984"/>
        <Item Type="CustomScript" Id="5D0942AA"/>
        <Item Type="CustomScript" Id="98844166"/>
        <Item Type="CustomScript" Id="EB536D52"/>
        <Item Type="CustomScript" Id="FEB776D7"/>
        <Item Type="CustomScript" Id="154AA6F8"/>
        <Item Type="CustomScript" Id="DA0FCEB3"/>
        <Item Type="CustomScript" Id="C0D3CCC0"/>
        <Item Type="CustomScript" Id="02E57D53"/>
        <Item Type="CustomScript" Id="69BF9B09"/>
        <Item Type="CustomScript" Id="C03569C7"/>
        <Item Type="CustomScript" Id="E816AD88"/>
        <Item Type="CustomScript" Id="26D19548"/>
        <Item Type="CustomScript" Id="05761D03"/>
        <Item Type="CustomScript" Id="8C329EC4"/>
        <Item Type="CustomScript" Id="86C747D3"/>
        <Item Type="CustomScript" Id="E675D948"/>
        <Item Type="CustomScript" Id="980DB17C"/>
        <Item Type="CustomScript" Id="FA1C7D39"/>
        <Item Type="CustomScript" Id="DE726EF1"/>
        <Item Type="CustomScript" Id="52545608"/>
        <Item Type="CustomScript" Id="7D6C2163"/>
        <Item Type="CustomScript" Id="19FC343B"/>
        <Item Type="CustomScript" Id="44BFAA2F"/>
        <Item Type="CustomScript" Id="086B59D3"/>
        <Item Type="CustomScript" Id="1DBC5F1F"/>
        <Item Type="CustomScript" Id="868B6BCD"/>
        <Item Type="CustomScript" Id="A0D3B965"/>
        <Item Type="CustomScript" Id="7FC6B0BF"/>
        <Item Type="CustomScript" Id="539DD3EB"/>
        <Item Type="CustomScript" Id="834D763D"/>
        <Item Type="CustomScript" Id="0B55C20B"/>
        <Item Type="CustomScript" Id="A5D06656"/>
        <Item Type="CustomScript" Id="5A6F204E"/>
        <Item Type="CustomScript" Id="E0430C8F"/>
        <Item Type="CustomScript" Id="EA7745F3"/>
        <Item Type="CustomScript" Id="FC7380A0"/>
        <Item Type="CustomScript" Id="7D5EBA10"/>
        <Item Type="CustomScript" Id="AB88B784"/>
        <Item Type="CustomScript" Id="A0721E42"/>
        <Item Type="CustomScript" Id="E9BAF4D2"/>
        <Item Type="CustomScript" Id="F9EDC01E"/>
        <Item Type="CustomScript" Id="2437AB55"/>
        <Item Type="CustomScript" Id="3277C1C7"/>
        <Item Type="CustomScript" Id="2D95F1CA"/>
        <Item Type="CustomScript" Id="6E9ACB35"/>
        <Item Type="CustomScript" Id="1070014D"/>
        <Item Type="CustomScript" Id="1AE9A484"/>
        <Item Type="CustomScript" Id="68B03BF3"/>
        <Item Type="CustomScript" Id="B1104137"/>
        <Item Type="CustomScript" Id="99017A0B"/>
        <Item Type="CustomScript" Id="57FCE3CB"/>
        <Item Type="CustomScript" Id="AE9047BE"/>
        <Item Type="CustomScript" Id="F29E146A"/>
        <Item Type="CustomScript" Id="99D163F0"/>
        <Item Type="CustomScript" Id="0CBE70A1"/>
        <Item Type="CustomScript" Id="ED992054"/>
        <Item Type="CustomScript" Id="A386ABF9"/>
        <Item Type="CustomScript" Id="2ECF0F30"/>
        <Item Type="CustomScript" Id="36707373"/>
        <Item Type="CustomScript" Id="25878D01"/>
    </Element>
    <Element Type="CustomScript" Id="B363915A">
        <ScriptCode>
            trigger auto_gf_Upyougo_Trigger = null;
            unit auto_gf_Upyougo_lp_unit;
            fixed auto_gf_Upyougo_lp_force;
            void gf_Upyougo (unit lp_unit, fixed lp_force) {
                auto_gf_Upyougo_lp_unit = lp_unit;
                auto_gf_Upyougo_lp_force = lp_force;
                if (auto_gf_Upyougo_Trigger == null) {
                    auto_gf_Upyougo_Trigger = TriggerCreate(&quot;auto_gf_Upyougo_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_Upyougo_Trigger, false, false);
            }
            bool auto_gf_Upyougo_TriggerFunc (bool testConds, bool runActions) {
                unit lp_unit = auto_gf_Upyougo_lp_unit;
                fixed lp_force = auto_gf_Upyougo_lp_force;
                // Variable Declarations
                fixed lv_negForce;
                // Variable Initialization
                // Implementation
                if ((UnitGetHeight(lp_unit) == 0.0)) {
                    UnitSetHeight(lp_unit, 0.1, 0.0);
                    while (((UnitGetHeight(lp_unit) &gt; 0.0) || (lv_negForce == 0.0))) {
                        lv_negForce += 0.08;
                        UnitSetHeight(lp_unit, (UnitGetHeight(lp_unit) + (lp_force - lv_negForce)), 0.0625);
                        Wait(0.0625, c_timeGame);
                    }
                    if ((UnitGetHeight(lp_unit) != 0.0)) {
                        UnitSetHeight(lp_unit, 0.0, 0.0625);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9E560F05">
        <ScriptCode>
            trigger auto_gf_Charge_Trigger = null;
            unit auto_gf_Charge_lp_unit;
            point auto_gf_Charge_lp_target;
            fixed auto_gf_Charge_lp_force;
            void gf_Charge (unit lp_unit, point lp_target, fixed lp_force) {
                auto_gf_Charge_lp_unit = lp_unit;
                auto_gf_Charge_lp_target = lp_target;
                auto_gf_Charge_lp_force = lp_force;
                if (auto_gf_Charge_Trigger == null) {
                    auto_gf_Charge_Trigger = TriggerCreate(&quot;auto_gf_Charge_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_Charge_Trigger, false, false);
            }
            bool auto_gf_Charge_TriggerFunc (bool testConds, bool runActions) {
                unit lp_unit = auto_gf_Charge_lp_unit;
                point lp_target = auto_gf_Charge_lp_target;
                fixed lp_force = auto_gf_Charge_lp_force;
                // Variable Declarations
                point lv_startingPosition;
                fixed lv_distance;
                // Variable Initialization
                lv_startingPosition = UnitGetPosition(lp_unit);
                lv_distance = DistanceBetweenPoints(UnitGetPosition(lp_unit), lp_target);
                // Implementation
                libNtve_gf_MakeUnitFacePoint(lp_unit, lp_target, 0.0);
                if ((UnitGetType(lp_unit) == &quot;MurlocChieftain&quot;)) {
                    if ((UnitHasBehavior(lp_unit, &quot;MurlocFrenzy&quot;) == true)) {
                        CatalogFieldValueSet(c_gameCatalogBehavior, &quot;MurlocRushSetup&quot;, &quot;Duration&quot;, UnitGetOwner(lp_unit), FixedToString(1.6, 1));
                        UnitBehaviorAdd(lp_unit, &quot;MurlocRushSetup&quot;, lp_unit, 1);
                        Wait(1.6, c_timeGame);
                    }
                    else {
                        CatalogFieldValueSet(c_gameCatalogBehavior, &quot;MurlocRushSetup&quot;, &quot;Duration&quot;, UnitGetOwner(lp_unit), FixedToString(1.9, 1));
                        UnitBehaviorAdd(lp_unit, &quot;MurlocRushSetup&quot;, lp_unit, 1);
                        Wait(1.9, c_timeGame);
                    }
                    UnitBehaviorAdd(lp_unit, &quot;MurlocRushTrample&quot;, lp_unit, 1);
                }
                if ((lp_unit != null) &amp;&amp; (UnitIsAlive(lp_unit) == true)) {
                    while ((lp_unit != null) &amp;&amp; (UnitIsAlive(lp_unit) == true) &amp;&amp; (DistanceBetweenPoints(lv_startingPosition, UnitGetPosition(lp_unit)) &lt; lv_distance) &amp;&amp; (PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(lp_unit), lp_force, AngleBetweenPoints(UnitGetPosition(lp_unit), lp_target))) == true)) {
                        UnitSetPosition(lp_unit, PointWithOffsetPolar(UnitGetPosition(lp_unit), lp_force, AngleBetweenPoints(UnitGetPosition(lp_unit), lp_target)), true);
                        Wait(0.0625, c_timeGame);
                        if ((lp_unit != null) &amp;&amp; (UnitIsAlive(lp_unit) == true)) {
                        }
                        else {
                            break;
                        }
                    }
                }
                else {
                }
                if ((lp_unit != null) &amp;&amp; (UnitIsAlive(lp_unit) == true) &amp;&amp; (UnitGetType(lp_unit) == &quot;MurlocChieftain&quot;)) {
                    UnitCreateEffectUnit(lp_unit, &quot;HuntKoboldsTrigger&quot;, lp_unit);
                    UnitBehaviorRemove(lp_unit, &quot;MurlocRushSetup&quot;, 1);
                    UnitBehaviorRemove(lp_unit, &quot;MurlocRushTrample&quot;, 1);
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5E3426B7">
        <ScriptCode>
            void gf_SetScaledStats (string lp_unitType, int lp_player) {
                // Variable Declarations
                int lv_livingKobolds;
                fixed lv_avgRmnTeamSize;
                fixed lv_damageCoefficientNormal;
                fixed lv_lifeCoefficientNormal;
                fixed lv_damageCoefficientBoss;
                fixed lv_lifeCoefficientBoss;
                // Variable Initialization
                lv_livingKobolds = UnitGroupCount(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                lv_avgRmnTeamSize = gf_AverageRemainingTeamSize();
                lv_damageCoefficientNormal = 1.0;
                lv_lifeCoefficientNormal = 1.0;
                lv_damageCoefficientBoss = 1.0;
                lv_lifeCoefficientBoss = 1.0;
                // Implementation
                lv_lifeCoefficientNormal *= (lv_avgRmnTeamSize * 0.2);
                lv_damageCoefficientNormal *= (lv_avgRmnTeamSize * 0.2);
                lv_lifeCoefficientBoss *= (lv_avgRmnTeamSize * 0.2);
                lv_damageCoefficientBoss *= (lv_avgRmnTeamSize * 0.2);
                if ((lp_unitType == &quot;MurlocSlave&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;Smash&quot;, &quot;Amount&quot;, lp_player, FixedToString((10.0 + (gv_gameDuration / 360.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MurlocSlave&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((80.0 + (gv_gameDuration / 45.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MurlocSlave&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((80.0 + (gv_gameDuration / 45.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MurlocSlave&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString((0.5 + (gv_gameDuration / 7200.0)), 2));
                }
                else if ((lp_unitType == &quot;KingFurbeastIV&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;KingFurbeastIV&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((280.0 + (gv_gameDuration / 5.0)) * lv_lifeCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;KingFurbeastIV&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((280.0 + (gv_gameDuration / 5.0)) * lv_lifeCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;KingFurbeastIV&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString(((1.0 + (gv_gameDuration * 0.001)) * lv_lifeCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;KingFurbeastIV&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
                }
                else if ((lp_unitType == &quot;Ghoul&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;GhoulDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((6.0 + (gv_gameDuration * 0.005)) * 1.0), 1));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Ghoul&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((25.0 + (gv_gameDuration * 0.015)) * 1.0), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Ghoul&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((25.0 + (gv_gameDuration * 0.015)) * 1.0), 0));
                }
                else if ((lp_unitType == &quot;Dog&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;WolfBiteDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((10.0 + (gv_gameDuration / 180.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Dog&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((40.0 + (gv_gameDuration / 36.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Dog&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((40.0 + (gv_gameDuration / 36.0)), 0));
                }
                else if ((lp_unitType == &quot;Lyote&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;DirewolfBiteDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((15.0 + (gv_gameDuration / 120.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Lyote&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((50.0 + (gv_gameDuration / 30.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Lyote&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((50.0 + (gv_gameDuration / 30.0)), 0));
                }
                else if ((lp_unitType == &quot;Bear&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;BearMaulDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((20.0 + (gv_gameDuration / 90.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Bear&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((150.0 + (gv_gameDuration / 18.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Bear&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((150.0 + (gv_gameDuration / 18.0)), 0));
                }
                else if ((lp_unitType == &quot;FrostBear&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostBearMaulDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((40.0 + (gv_gameDuration / 90.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostBear&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((200.0 + (gv_gameDuration / 18.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostBear&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((200.0 + (gv_gameDuration / 18.0)), 0));
                }
                else if ((lp_unitType == &quot;MapleTree&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MapleTree&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((100.0 + (gv_gameDuration / 36.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MapleTree&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((100.0 + (gv_gameDuration / 36.0)), 0));
                }
                else if ((lp_unitType == &quot;ElderTree&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;ElderTree&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((750.0 + (gv_gameDuration / 7.2)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;ElderTree&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((750.0 + (gv_gameDuration / 7.2)), 0));
                }
                else if ((lp_unitType == &quot;Stag&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Stag&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((70.0 + (gv_gameDuration / 20.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Stag&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((70.0 + (gv_gameDuration / 20.0)), 0));
                }
                else if ((lp_unitType == &quot;TheWoundedWizard&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;TheWoundedWizard&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((500.0 + (gv_gameDuration * 0.2)) * lv_lifeCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;TheWoundedWizard&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(1.0, 0));
                }
                else if ((lp_unitType == &quot;InfernalMinion&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;InfernalMinionDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((5.0 + (gv_gameDuration / 120.0)) * lv_damageCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;InfernalMinion&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((100.0 + (gv_gameDuration / 20.0)) * lv_lifeCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;InfernalMinion&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((100.0 + (gv_gameDuration / 20.0)) * lv_lifeCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;InfernalMinion&quot;, &quot;Speed&quot;, lp_player, FixedToString(3.25, 0));
                }
                else if ((lp_unitType == &quot;VeilGuardian&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;DeathBowDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((30.0 + (gv_gameDuration / 30.0)) * lv_damageCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;VeilGuardian&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((75.0 + (gv_gameDuration / 16.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;VeilGuardian&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((75.0 + (gv_gameDuration / 16.0)), 0));
                }
                else if ((lp_unitType == &quot;UndeadSavage&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;SavageSwordDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 60.0)) * lv_damageCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;UndeadSavage&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((50.0 + (gv_gameDuration / 12.0)) * lv_lifeCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;UndeadSavage&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((50.0 + (gv_gameDuration / 12.0)) * lv_lifeCoefficientNormal), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;UndeadSavage&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
                }
                else if ((lp_unitType == &quot;MurlocMilitia&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MurlocMilitiaJavelinDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((15.0 + (gv_gameDuration / 144.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MurlocMilitia&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((50.0 + (gv_gameDuration / 72.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MurlocMilitia&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((50.0 + (gv_gameDuration / 72.0)), 0));
                }
                else if ((lp_unitType == &quot;TombGuardian&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FireballDamagePoint&quot;, &quot;Amount&quot;, lp_player, FixedToString((50.0 + (gv_gameDuration / 36.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FireballDamageUnit&quot;, &quot;Amount&quot;, lp_player, FixedToString((50.0 + (gv_gameDuration / 36.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;TombGuardian&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((100.0 + (gv_gameDuration / 18.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;TombGuardian&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((100.0 + (gv_gameDuration / 18.0)), 0));
                }
                else if ((lp_unitType == &quot;Monstrosity&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Monstrosity&quot;, &quot;LifeMax&quot;, lp_player, FixedToString((1000.0 + (gv_gameDuration / 1.8)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Monstrosity&quot;, &quot;LifeStart&quot;, lp_player, FixedToString((1000.0 + (gv_gameDuration / 1.8)), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Monstrosity&quot;, &quot;LifeRegenRate&quot;, lp_player, FixedToString((1.0 + (gv_gameDuration / 900.0)), 2));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MonstrousFistsDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((40.0 + (gv_gameDuration / 45.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MonstrousFistsDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString((40.0 + (gv_gameDuration / 45.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;AfflictionDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((4.0 + (gv_gameDuration / 450.0)), 0));
                }
                else if ((lp_unitType == &quot;MurlocChieftain&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MurlocChieftain&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MurlocChieftain&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;MurlocChieftain&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MurlocDoomhammerDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString((10.0 + (gv_gameDuration / 40.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MurlocDoomhammerDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString((10.0 + (gv_gameDuration / 40.0)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MurlocRushTrampleDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((60.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MurlocRushTrampleDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((60.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 0));
                }
                else if ((lp_unitType == &quot;Zulrogg&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Zulrogg&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Zulrogg&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;Zulrogg&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrollBossDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((8.0 + (gv_gameDuration / 50.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrollBossDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((8.0 + (gv_gameDuration / 50.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RotatingBladeDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((6.0 + (gv_gameDuration * 0.015)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;RotatingBladeDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((5.0 + (gv_gameDuration * 0.015)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ShreddedDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((4.0 + (gv_gameDuration / 100.0)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TrollGroundSpikeDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((20.0 + (gv_gameDuration / 20.0)) * lv_damageCoefficientBoss), 1));
                }
                else if ((lp_unitType == &quot;FrostWitch&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostWitch&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostWitch&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((1400.0 + gv_gameDuration) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;FrostWitch&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostWitchDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 40.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FrostWitchDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 40.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;PermafrostDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((8.0 + (gv_gameDuration / 50.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;PermafrostDamageSecondary&quot;, &quot;Amount&quot;, lp_player, FixedToString(((8.0 + (gv_gameDuration / 50.0)) * lv_damageCoefficientBoss), 0));
                }
                else if ((lp_unitType == &quot;DemonLordJaryx&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;DemonLordJaryx&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((5600.0 + (gv_gameDuration * 4.0)) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;DemonLordJaryx&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((5600.0 + (gv_gameDuration * 4.0)) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;DemonLordJaryx&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;DemonLordJaryxAttackDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 90.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;DemonLordJaryxAttackDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 90.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FirestormDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 120.0)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;FirestormDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 120.0)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;TetherDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((5.0 + (gv_gameDuration / 360.0)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MoltenSphereDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;MoltenSphereDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 1));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;InfernalMinion&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((120.0 + (gv_gameDuration / 20.0)) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;InfernalMinion&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((120.0 + (gv_gameDuration / 20.0)) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;InfernalMinionDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((5.0 + (gv_gameDuration / 240.0)) * lv_damageCoefficientBoss), 0));
                }
                else if ((lp_unitType == &quot;RagingArcaneBeast&quot;)) {
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;RagingArcaneBeast&quot;, &quot;LifeMax&quot;, lp_player, FixedToString(((12000.0 + (gv_gameDuration * 5.0)) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;RagingArcaneBeast&quot;, &quot;LifeStart&quot;, lp_player, FixedToString(((12000.0 + (gv_gameDuration * 5.0)) * lv_lifeCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogUnit, &quot;RagingArcaneBeast&quot;, &quot;LifeArmor&quot;, lp_player, FixedToString((0.0 + (gv_gameDuration * 0.0014)), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArcanePulseDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 60.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArcanePulseDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 60.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArcaneEruptionDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((40.0 + (gv_gameDuration / 10.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;ArcaneEruptionDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((40.0 + (gv_gameDuration / 10.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;LightningCloudDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((5.0 + (gv_gameDuration / 240.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;LightningCloudDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((5.0 + (gv_gameDuration / 240.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;LightningCloudDamage&quot;, &quot;AttributeBonus[Armored]&quot;, lp_player, FixedToString(((5.0 + (gv_gameDuration / 240.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;AnnihilateDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 90.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;AnnihilateDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((10.0 + (gv_gameDuration / 90.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;EmpoweredLightningDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((12.0 + (gv_gameDuration / 200.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;EmpoweredLightningDamage&quot;, &quot;AttributeBonus[Structure]&quot;, lp_player, FixedToString(((12.0 + (gv_gameDuration / 200.0)) * lv_damageCoefficientBoss), 0));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;UnstableAnomalyZapDamage&quot;, &quot;Amount&quot;, lp_player, FixedToString(((60.0 + (gv_gameDuration / 15.0)) * lv_damageCoefficientBoss), 0));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9BBFD279">
        <ScriptCode>
            fixed gf_AverageRemainingTeamSize () {
                int autoE61F678D_ae;
                int autoE61F678D_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                fixed lv_value;
                // Variable Initialization
                // Implementation
                autoE61F678D_ae = gv_maxTeams;
                autoE61F678D_ai = 1;
                lv_a = 1;
                for ( ; ( (autoE61F678D_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE61F678D_ae) || (autoE61F678D_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE61F678D_ae) ) ; lv_a += autoE61F678D_ai ) {
                    if ((PlayerGroupCount(gv_teamData[lv_a].lv_members) &gt; 0) &amp;&amp; (gv_teamData[lv_a].lv_allDead == false)) {
                        lv_value += IntToFixed(PlayerGroupCount(gv_teamData[lv_a].lv_members));
                        lv_b += 1;
                    }
                    else {
                    }
                }
                if ((lv_b != 0)) {
                    lv_value /= lv_b;
                }
                else {
                    lv_value = 1.0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A9B72916">
        <ScriptCode>
            point gf_WeightedCenterofKobolds () {
                int autoECBDE876_ae;
                int autoECBDE876_ai;
                // Variable Declarations
                int lv_a;
                unitgroup lv_t;
                point lv_p;
                int lv_d;
                fixed lv_sumX;
                fixed lv_sumY;
                point lv_value;
                // Variable Initialization
                lv_t = UnitGroupEmpty();
                lv_value = gv_center;
                // Implementation
                autoECBDE876_ae = gv_activeTeams;
                autoECBDE876_ai = 1;
                lv_a = 1;
                for ( ; ( (autoECBDE876_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoECBDE876_ae) || (autoECBDE876_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoECBDE876_ae) ) ; lv_a += autoECBDE876_ai ) {
                    if ((gv_teamData[lv_a].lv_koboldsAlive &gt; 0)) {
                        PlayerGroupLoopBegin(gv_teamData[lv_a].lv_members);
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold)) {
                                UnitGroupAdd(lv_t, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
                            }
                            else {
                            }
                        }
                        PlayerGroupLoopEnd();
                        if ((UnitGroupCount(lv_t, c_unitCountAlive) &gt; 0)) {
                            lv_d += 1;
                            lv_p = UnitGroupCenterOfGroup(lv_t);
                            lv_sumX += PointGetX(lv_p);
                            lv_sumY += PointGetY(lv_p);
                            UnitGroupClear(lv_t);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                if ((lv_d &gt; 0)) {
                    lv_value = Point((lv_sumX / lv_d), (lv_sumY / lv_d));
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D4B14406">
        <ScriptCode>
            bool gf_UnitIsBusy (unit lp_unit) {
                // Variable Declarations
                bool lv_value;
                // Variable Initialization
                lv_value = true;
                // Implementation
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/A0E3E05A&quot;), false);
                if (gf_UnitExists(lp_unit)) {
                    TextExpressionSetToken(&quot;Param/Expression/D4AEA969&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3AC9CC1D&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/D4AEA969&quot;, &quot;B&quot;, UnitTypeGetName(UnitGetType(lp_unit)));
                    TextExpressionSetToken(&quot;Param/Expression/D4AEA969&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/C061BF66&quot;));
                    TriggerDebugOutput(1, TextExpressionAssemble(&quot;Param/Expression/D4AEA969&quot;), false);
                    if ((UnitHasBehavior(lp_unit, &quot;MiningStoneSmart&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;MiningGoldSmart&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;PickingBerriesSmart&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;PickingHerbsSmart&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;UnlockingChestSmart&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;SleepingBag&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;Unconscious&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;Cooking&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;Crafting&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;Fishing&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;Resurrecting&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;MysteriousArcaneRitual&quot;) == false)) {
                        lv_value = false;
                    }
                    else {
                        lv_value = true;
                    }
                }
                else {
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/10114F0A&quot;), false);
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="98875AC6">
        <ScriptCode>
            bool gf_UnitExists (unit lp_unit) {
                // Variable Declarations
                bool lv_value;
                // Variable Initialization
                // Implementation
                if ((lp_unit != null)) {
                    if ((UnitIsAlive(lp_unit) == true)) {
                        lv_value = true;
                    }
                    else {
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7BDA5C4C">
        <ScriptCode>
            void gf_ResumeSituationalMusic (int lp_player) {
                // Implementation
                if (((gv_questIndexActive == 1) || (gv_questIndexActive == 8))) {
                    SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, &quot;KoboldMusicBoss&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                else if ((gv_questIndexActive == 7)) {
                    SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, &quot;KoboldMusicGloom&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                else if ((gv_questIndexActive == 10)) {
                    SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, &quot;KoboldMusicWinter&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                else if ((gv_questIndexActive == 11)) {
                    SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, &quot;KoboldMusicPirate&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                else if ((gv_questIndexActive == 15)) {
                    SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, &quot;KoboldMusicCrypt&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                else if (true) {
                    SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D6647CB3">
        <ScriptCode>
            trigger auto_gf_AITaunt_Trigger = null;
            unit auto_gf_AITaunt_lp_unit;
            void gf_AITaunt (unit lp_unit) {
                auto_gf_AITaunt_lp_unit = lp_unit;
                if (auto_gf_AITaunt_Trigger == null) {
                    auto_gf_AITaunt_Trigger = TriggerCreate(&quot;auto_gf_AITaunt_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_AITaunt_Trigger, false, false);
            }
            bool auto_gf_AITaunt_TriggerFunc (bool testConds, bool runActions) {
                unit lp_unit = auto_gf_AITaunt_lp_unit;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if (gf_UnitExists(lp_unit) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;KoboldBotNormal&quot;) == true) &amp;&amp; (libNtve_gf_RandomPercent() &lt;= 50.0)) {
                    Wait(RandomFixed(2.0, 5.0), c_timeGame);
                    if (gf_UnitExists(lp_unit) &amp;&amp; (gv_gameOver == false) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;SkipChatTaunt30&quot;) == false)) {
                        TextExpressionSetToken(&quot;Param/Expression/D73A2F50&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                        TextExpressionSetToken(&quot;Param/Expression/D73A2F50&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/131C8373&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/CC272CE2&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/79467263&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/CC272CE2&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/D73A2F50&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken(&quot;Param/Expression/CC272CE2&quot;, &quot;C&quot;, StringToText(gv_aITauntString[RandomInt(1, gv_aITauntStringAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupEnemy, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/CC272CE2&quot;));
                        UnitBehaviorAdd(lp_unit, &quot;SkipChatTaunt30&quot;, lp_unit, 1);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0588BD98">
        <ScriptCode>
            trigger auto_gf_AIDeadnightChat_Trigger = null;
            unit auto_gf_AIDeadnightChat_lp_unit;
            void gf_AIDeadnightChat (unit lp_unit) {
                auto_gf_AIDeadnightChat_lp_unit = lp_unit;
                if (auto_gf_AIDeadnightChat_Trigger == null) {
                    auto_gf_AIDeadnightChat_Trigger = TriggerCreate(&quot;auto_gf_AIDeadnightChat_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_AIDeadnightChat_Trigger, false, false);
            }
            bool auto_gf_AIDeadnightChat_TriggerFunc (bool testConds, bool runActions) {
                unit lp_unit = auto_gf_AIDeadnightChat_lp_unit;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                Wait(RandomFixed(4.0, 6.0), c_timeGame);
                if (gf_UnitExists(lp_unit) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;SkipChatQuest120&quot;) == false)) {
                    TextExpressionSetToken(&quot;Param/Expression/9978FCE2&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                    TextExpressionSetToken(&quot;Param/Expression/9978FCE2&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/7DCE36C6&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/8C61BEDB&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/F6F60766&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/8C61BEDB&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/9978FCE2&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                    TextExpressionSetToken(&quot;Param/Expression/8C61BEDB&quot;, &quot;C&quot;, StringToText(gv_aIQuestDeadnightString[RandomInt(1, gv_aIQuestDeadnightStringAmount)]));
                    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/8C61BEDB&quot;));
                    UnitBehaviorAdd(lp_unit, &quot;SkipChatQuest120&quot;, lp_unit, 1);
                }
                else {
                }
                return true;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D493B029">
        <ScriptCode>
            void gf_SetupAI (unit lp_unit) {
                int auto02E159D7_ae;
                int auto02E159D7_ai;
                // Variable Declarations
                int lv_a;
                int lv_i;
                int lv_b;
                string lv_s;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_s = &quot;&quot;;
                // Implementation
                if (((gv_aIFFATestingOverride == true) || (PlayerType(lv_i) == c_playerTypeComputer) || (PlayerStatus(lv_i) == c_playerStatusLeft))) {
                    gv_playerData[lv_i].lv_isAI = true;
                    UnitSetCustomValue(lp_unit, 5, 1.0);
                    gf_SetAIName(lv_i);
                    UnitBehaviorAdd(lp_unit, &quot;KoboldBotInitialDelay&quot;, lp_unit, 1);
                    auto02E159D7_ae = gv_players;
                    auto02E159D7_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto02E159D7_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto02E159D7_ae) || (auto02E159D7_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto02E159D7_ae) ) ; lv_a += auto02E159D7_ai ) {
                        if ((PlayerType(lv_a) == c_playerTypeUser) &amp;&amp; (libNtve_gf_PlayerIsEnemy(lv_i, lv_a, 0) == true)) {
                            PlayerSetAlliance(lv_i, c_allianceIdControl, lv_a, true);
                        }
                        else {
                        }
                    }
                    gf_UpdateSkillButton(lv_i);
                    gv_perks[lv_i] = gf_AIPerks(lv_i, gv_averagePlayerLevel);
                    gv_aIData[lv_i].lv_difficultyRating = libNtve_gf_ArithmeticRealClamp((gv_averagePlayerLevel * 5.0), 1.0, 100.0);
                    gf_AICustomization(lv_i);
                    gf_AISpendSkillPoints(lv_i);
                    if ((GameGetMissionTime() &lt;= 30.0) &amp;&amp; (gv_activeTeams == 2)) {
                        gv_aIData[lv_i].lv_explorerAngle = (AngleBetweenPoints(UnitGetPosition(gv_playerData[lv_i].lv_kobold), RegionGetCenter(RegionPlayableMap())) + RandomFixed(-45.0, 45.0));
                        TimerStart(gv_aIData[lv_i].lv_explorerTimer, RandomFixed(15.0, 30.0), false, c_timeGame);
                    }
                    else {
                    }
                    gv_aIData[lv_i].lv_weightedPOI = gv_center;
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F08036F5">
        <ScriptCode>
            bool gf_AIEquipment (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unit lv_b;
                int lv_a;
                unitgroup lv_loot;
                string lv_itemTypeID;
                int lv_levelMainHand;
                int lv_levelOffhand;
                int lv_levelArmor;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_loot = UnitGroupEmpty();
                lv_itemTypeID = &quot;&quot;;
                lv_levelMainHand = gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(lp_kobold)), lv_i);
                lv_levelOffhand = gf_GetItemLevel(UnitGetType(gf_KoboldOffhand(lp_kobold)), lv_i);
                lv_levelArmor = gf_GetItemLevel(UnitGetType(gf_KoboldArmor(lp_kobold)), lv_i);
                // Implementation
                lv_loot = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter((1 &lt;&lt; c_targetFilterItem), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                UnitGroupAddUnitGroup(lv_loot, UnitGroupFilter(null, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                lv_b = UnitGroupClosestToPoint(UnitGroupFilterAlliance(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup(&quot;StorageOutpost&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_aIData[lv_i].lv_tradeRoamRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 1, 0.0), lv_i, c_unitAllianceAlly, 0), UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                    UnitGroupAddUnitGroup(lv_loot, UnitGroupFilter(null, c_playerAny, UnitInventoryGroup(lv_b), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                }
                else {
                }
                UnitGroupRemove(lv_loot, gf_KoboldMainHand(lp_kobold));
                UnitGroupRemove(lv_loot, gf_KoboldOffhand(lp_kobold));
                UnitGroupRemove(lv_loot, gf_KoboldArmor(lp_kobold));
                UnitGroupLoopBegin(lv_loot);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_itemTypeID = (UnitGetType(UnitGroupLoopCurrent()));
                    if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lv_i) != &quot;MainHand&quot;) &amp;&amp; (CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lv_i) != &quot;Offhand&quot;) &amp;&amp; (CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lv_i) != &quot;Armor&quot;)) {
                        UnitGroupRemove(lv_loot, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(lv_loot);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_itemTypeID = (UnitGetType(UnitGroupLoopCurrent()));
                    if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lv_i) == &quot;MainHand&quot;) &amp;&amp; (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) &gt; lv_levelMainHand)) {
                        lv_success = true;
                        if ((UnitInventoryUnit(UnitGroupLoopCurrent()) == UnitGroupLoopCurrent())) {
                            if (gf_UnitExists(gf_KoboldMainHand(lp_kobold))) {
                                UnitSetPosition(gf_KoboldMainHand(lp_kobold), UnitGetPosition(lp_kobold), false);
                            }
                            else {
                            }
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueReplace);
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gf_KoboldMainHand(lp_kobold)), c_orderQueueAddToEnd);
                        }
                        else {
                            if ((UnitGetType(UnitInventoryUnit(UnitGroupLoopCurrent())) == &quot;StorageOutpost&quot;) &amp;&amp; gf_AITradeBuyWithdraw(lp_kobold, UnitGetType(UnitGroupLoopCurrent()), 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                            }
                            else {
                                UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lp_kobold), false);
                            }
                        }
                        break;
                    }
                    else {
                        if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lv_i) == &quot;Offhand&quot;) &amp;&amp; (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) &gt; lv_levelOffhand)) {
                            lv_success = true;
                            if ((UnitInventoryUnit(UnitGroupLoopCurrent()) == UnitGroupLoopCurrent())) {
                                if (gf_UnitExists(gf_KoboldOffhand(lp_kobold))) {
                                    UnitSetPosition(gf_KoboldOffhand(lp_kobold), UnitGetPosition(lp_kobold), false);
                                }
                                else {
                                }
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueReplace);
                                if ((UnitGetType(gf_KoboldOffhand(lp_kobold)) != &quot;Torch&quot;)) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gf_KoboldOffhand(lp_kobold)), c_orderQueueAddToEnd);
                                }
                                else {
                                }
                            }
                            else {
                                if ((UnitGetType(UnitInventoryUnit(UnitGroupLoopCurrent())) == &quot;StorageOutpost&quot;) &amp;&amp; gf_AITradeBuyWithdraw(lp_kobold, UnitGetType(UnitGroupLoopCurrent()), 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                }
                                else {
                                    UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lp_kobold), false);
                                }
                            }
                            break;
                        }
                        else {
                            if ((CatalogFieldValueGet(c_gameCatalogItem, lv_itemTypeID, &quot;Class&quot;, lv_i) == &quot;Armor&quot;) &amp;&amp; (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) &gt; lv_levelArmor)) {
                                lv_success = true;
                                if ((UnitInventoryUnit(UnitGroupLoopCurrent()) == UnitGroupLoopCurrent())) {
                                    if (gf_UnitExists(gf_KoboldArmor(lp_kobold))) {
                                        UnitSetPosition(gf_KoboldArmor(lp_kobold), UnitGetPosition(lp_kobold), false);
                                    }
                                    else {
                                    }
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueReplace);
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gf_KoboldArmor(lp_kobold)), c_orderQueueAddToEnd);
                                }
                                else {
                                    if ((UnitGetType(UnitInventoryUnit(UnitGroupLoopCurrent())) == &quot;StorageOutpost&quot;) &amp;&amp; gf_AITradeBuyWithdraw(lp_kobold, UnitGetType(UnitGroupLoopCurrent()), 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                    }
                                    else {
                                        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lp_kobold), false);
                                    }
                                }
                                break;
                            }
                            else {
                            }
                        }
                    }
                }
                UnitGroupLoopEnd();
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F9112634">
        <ScriptCode>
            void gf_AIRunWalk (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                fixed lv_walkLimit;
                fixed lv_runLimit;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_walkLimit = 5.0;
                lv_runLimit = 8.0;
                // Implementation
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/88138A93&quot;), false);
                if ((UnitHasBehavior(lp_kobold, &quot;Affliction&quot;) == true)) {
                    lv_walkLimit += 10.0;
                    lv_runLimit += 10.0;
                }
                else {
                }
                if ((gv_playerData[lv_i].lv_stamina &lt;= lv_walkLimit) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Running&quot;) == true)) {
                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;Run&quot;, 1)), c_orderQueueReplace);
                }
                else if ((gv_playerData[lv_i].lv_stamina &gt; lv_runLimit) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Running&quot;) == false) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;Run&quot;, true) == true)) {
                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;Run&quot;, 0)), c_orderQueueReplace);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7DD8FA1A">
        <ScriptCode>
            bool gf_AIRetreat (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_enemies;
                unitgroup lv_enemiesKoboldsExclusive;
                fixed lv_enemiesThreat;
                unitgroup lv_allies;
                fixed lv_alliesThreat;
                point lv_point;
                unitgroup lv_food;
                unitgroup lv_g;
                unit lv_a;
                unit lv_b;
                int lv_spellVariation;
                bool lv_onlybears;
                bool lv_onlyStructuresNoADTs;
                bool lv_includingKoboldPetorBoss;
                fixed lv_d;
                region lv_spellbladeRegion;
                unitgroup lv_fleeingBuddies;
                fixed lv_retreatAngle;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_enemies = gf_GetEnemiesNearPoint(UnitGetPosition(lp_kobold), lv_i, gv_playerData[lv_i].lv_stats.lv_sightRadius, false);
                lv_enemiesKoboldsExclusive = UnitGroupEmpty();
                lv_allies = gf_GetAlliesNearPoint(UnitGetPosition(lp_kobold), lv_i, gv_playerData[lv_i].lv_stats.lv_sightRadius);
                lv_food = UnitGroupEmpty();
                lv_g = UnitGroupEmpty();
                lv_onlybears = true;
                lv_onlyStructuresNoADTs = true;
                lv_fleeingBuddies = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                UnitGroupLoopBegin(lv_enemies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCreateEffectUnit(lp_kobold, &quot;AIHelperEnemyTriggerStart5&quot;, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupAddUnitGroup(lv_enemies, gv_aIData[lv_i].lv_enemies);
                UnitGroupLoopBegin(lv_enemies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_enemiesThreat += gf_EvaluateThreat(UnitGroupLoopCurrent());
                    if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;) || (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Tamed&quot;) == true))) {
                        lv_includingKoboldPetorBoss = true;
                    }
                    else {
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;)) {
                        UnitGroupAdd(lv_enemiesKoboldsExclusive, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) != &quot;Bear&quot;)) {
                        lv_onlybears = false;
                    }
                    else {
                    }
                    if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;Fortress&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;AutomatedDefenseTurret&quot;) || (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false))) {
                        lv_onlyStructuresNoADTs = false;
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(lv_allies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_alliesThreat += gf_EvaluateThreat(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                if ((UnitGroupHasUnit(lv_allies, gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTower) == true)) {
                    lv_alliesThreat *= 2.0;
                }
                else {
                }
                if ((UnitGroupCount(lv_enemies, c_unitCountAlive) &gt; 0) &amp;&amp; (libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == false) &amp;&amp; (!(((gv_playerData[lv_i].lv_stamina &lt;= 5.0) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;Kobold&quot;, c_playerAny, lv_enemies, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;Kobold&quot;, c_playerAny, lv_allies, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) &amp;&amp; (UnitHasBehavior(UnitGroupClosestToPoint(UnitGroupFilter(&quot;Kobold&quot;, c_playerAny, lv_enemies, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold)), &quot;Running&quot;) == true) &amp;&amp; ((gf_RangedWeapon(lp_kobold) == true) || (gf_RangedWeapon(UnitGroupClosestToPoint(UnitGroupFilter(&quot;Kobold&quot;, c_playerAny, lv_enemies, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold))) == false))))) &amp;&amp; ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Ghoul&quot;, &quot;UndeadSavage&quot;, &quot;&quot;, lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), 3.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 8) || (lv_alliesThreat &lt; (lv_enemiesThreat * gv_errorEstimationFactor)) || ((gf_GroupStamina(lv_allies) &lt; (gf_GroupStamina(lv_enemies) * gv_errorEstimationFactor)) &amp;&amp; ((lv_alliesThreat * 1.25) &lt;= lv_enemiesThreat)) || ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt;= gf_MinimumRetreatLife(lp_kobold)) &amp;&amp; (lv_onlyStructuresNoADTs == false)) || ((lv_includingKoboldPetorBoss == true) &amp;&amp; (gv_dayNight == 2) &amp;&amp; (UnitGetType(gf_KoboldOffhand(lp_kobold)) != &quot;Torch&quot;) &amp;&amp; (UnitGetType(gf_KoboldOffhand(lp_kobold)) != &quot;Lantern&quot;) &amp;&amp; (UnitGetType(gf_KoboldOffhand(lp_kobold)) != &quot;FelFireTorch&quot;) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == false)))) {
                    if ((UnitHasBehavior(lp_kobold, &quot;CrabShipment&quot;) == true)) {
                        UnitSetPosition(gv_shipment, UnitGetPosition(lp_kobold), false);
                    }
                    else {
                    }
                    lv_a = UnitGroupClosestToPoint(lv_enemies, UnitGetPosition(lp_kobold));
                    gv_aIData[lv_i].lv_focalNode = lv_a;
                    lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;SpikeTrap&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter((1 &lt;&lt; c_targetFilterCloaked), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lp_kobold)) &lt;= DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lv_b))) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) &lt;= DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lv_b)))) {
                        lv_retreatAngle = AngleBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b));
                    }
                    else {
                        lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;AutomatedDefenseTurret&quot;, &quot;Fortress&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), (gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; (UnitWeaponIsEnabled(lv_b, 1) == true) &amp;&amp; (libNtve_gf_UnitIsUnderConstruction(lv_b) == false) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lp_kobold)) &lt;= DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lv_b))) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) &lt;= DistanceBetweenPoints(UnitGetPosition(lv_a), UnitGetPosition(lv_b)))) {
                            UnitIssueOrder(lv_b, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_a), c_orderQueueReplace);
                            lv_retreatAngle = AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lv_b));
                        }
                        else {
                            if ((UnitGroupCount(lv_enemiesKoboldsExclusive, c_unitCountAlive) &gt; 0)) {
                                lv_fleeingBuddies = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), gv_aIStatusIndex, 2.0);
                                UnitGroupAddUnitGroup(lv_enemiesKoboldsExclusive, lv_fleeingBuddies);
                                lv_retreatAngle = AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemiesKoboldsExclusive), UnitGetPosition(lp_kobold));
                            }
                            else {
                                lv_retreatAngle = AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_kobold));
                            }
                        }
                    }
                    lv_point = gf_SmartRetreatPoint(lp_kobold, lv_retreatAngle);
                    if ((lv_point != null)) {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_point), c_orderQueueReplace);
                        gv_aIData[lv_i].lv_weightedPOI = gf_RandomPathablePoint(RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_kobold), (DistanceBetweenPoints(UnitGetPosition(lp_kobold), lv_point) * 3.0), lv_point), 4.0));
                        if ((UnitHasBehavior(lp_kobold, &quot;LiquidatorSpellbladeActive&quot;) == true)) {
                            lv_spellbladeRegion = RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_kobold), 5.0, lv_point), 5.0);
                            RegionAddCircle(lv_spellbladeRegion, false, UnitGetPosition(lp_kobold), 5.0);
                            lv_a = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, lv_spellbladeRegion, UnitFilter((1 &lt;&lt; c_targetFilterVisible), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_a) &amp;&amp; (UnitCanAttackTarget(lp_kobold, lv_a) == true) &amp;&amp; (libNtve_gf_PlayerIsEnemy(lv_i, UnitGetOwner(lv_a), 0) == false)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_a), c_orderQueueReplace);
                            }
                            else {
                            }
                        }
                        else {
                        }
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;KoboldTestBuild&quot;, 30)), c_orderQueueAddToFront);
                    }
                    else {
                    }
                    if (((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt; 70.0) || (UnitHasBehavior(lp_kobold, &quot;Starving&quot;) == true)) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;KoboldCanEat&quot;) == true)) {
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;Eatasnack&quot;, 0)), c_orderQueueReplace);
                    }
                    else {
                    }
                    if ((UnitGroupCount(UnitGroupAlliance(lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), 3.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;ShadowCloak&quot;, 0))) {
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;ShadowCloak&quot;, 0)), c_orderQueueReplace);
                    }
                    else if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;Affliction&quot;, 0))) {
                        lv_b = UnitGroupClosestToPoint(gf_UnitsInUnitGroupWithoutBuff(lv_enemies, &quot;Affliction&quot;), UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;Affliction&quot;, 0), lv_b), c_orderQueueReplace);
                        }
                        else {
                        }
                    }
                    else if ((UnitHasBehavior(lp_kobold, &quot;GoldenHauberk&quot;) == true) &amp;&amp; (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, &quot;GoldenHauberkHeal&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.Link&quot;, lv_i)) == 0.0) &amp;&amp; ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 50.0) || (UnitGroupCount(gf_UnitsInUnitGroupWithLife(UnitGroupAlliance(lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GoldenHauberkHealSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, lv_i))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0), 25.0), c_unitCountAlive) &gt; 0))) {
                        UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand(&quot;KoboldBackpack&quot;, 3), gf_KoboldArmor(lp_kobold)), c_orderQueueReplace);
                    }
                    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_consumables, c_unitCountAlive) &gt; 0)) {
                        UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand(&quot;KoboldBackpack&quot;, 3), UnitGroupRandomUnit(gv_playerData[lv_i].lv_resources.lv_consumables, c_unitCountAlive)), c_orderQueueReplace);
                    }
                    if (gf_AIQuickwarmth(lp_kobold)) {
                    }
                    else {
                        if ((gv_playerData[lv_i].lv_stamina &lt;= 10.0) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Resting&quot;) == false) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;Tent&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 0), null)) {
                        }
                        else {
                            if (gf_AIQuicktree(lp_kobold)) {
                            }
                            else {
                                if (gf_AIQuickstone(lp_kobold)) {
                                }
                                else {
                                    if (gf_AIQuickammo(lp_kobold, true)) {
                                    }
                                    else {
                                    }
                                }
                            }
                        }
                    }
                    if ((lv_includingKoboldPetorBoss == true) &amp;&amp; (libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == false)) {
                        UnitSetCustomValue(lp_kobold, gv_aIStatusIndex, IntToFixed(2));
                        UnitBehaviorAdd(lp_kobold, &quot;AIRecentCombat&quot;, lp_kobold, 1);
                    }
                    else {
                    }
                    if ((UnitHasBehavior(lp_kobold, &quot;SkipChatRetreat60&quot;) == false)) {
                        TextExpressionSetToken(&quot;Param/Expression/E1ED5808&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                        TextExpressionSetToken(&quot;Param/Expression/E1ED5808&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/4EBE1B53&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/5B491372&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/38937256&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/5B491372&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/E1ED5808&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken(&quot;Param/Expression/5B491372&quot;, &quot;C&quot;, StringToText(gv_aIRetreatString[RandomInt(1, gv_aIRetreatStringAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/5B491372&quot;));
                        UnitBehaviorAdd(lp_kobold, &quot;SkipChatRetreat60&quot;, lp_kobold, 1);
                    }
                    else {
                    }
                    gv_aIData[lv_i].lv_lastCombatState = 2;
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="CC22E9FE">
        <ScriptCode>
            bool gf_AICombat (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_enemies;
                fixed lv_enemyThreat;
                unitgroup lv_allies;
                fixed lv_alliesThreat;
                point lv_point;
                unit lv_target;
                unit lv_a;
                unit lv_b;
                int lv_spellVariation;
                unitgroup lv_nearbyActiveAlliedSpikeTraps;
                bool lv_onlyBears;
                bool lv_onlyStructures;
                bool lv_onlyGhoulsorSavages;
                bool lv_includingKoboldPetorBoss;
                point lv_p;
                unitgroup lv_executableFoes;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_enemies = gf_GetEnemiesNearPoint(UnitGetPosition(lp_kobold), lv_i, gv_playerData[lv_i].lv_stats.lv_sightRadius, true);
                lv_allies = gf_GetAlliesNearPoint(UnitGetPosition(lp_kobold), lv_i, gv_playerData[lv_i].lv_stats.lv_sightRadius);
                lv_nearbyActiveAlliedSpikeTraps = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;SpikeTrap&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter((1 &lt;&lt; c_targetFilterCloaked), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_onlyBears = true;
                lv_onlyStructures = true;
                lv_onlyGhoulsorSavages = true;
                lv_executableFoes = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                UnitGroupLoopBegin(lv_enemies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCreateEffectUnit(lp_kobold, &quot;AIHelperEnemyTriggerStart5&quot;, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupAddUnitGroup(lv_enemies, gv_aIData[lv_i].lv_enemies);
                UnitGroupLoopBegin(lv_enemies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_enemyThreat += gf_EvaluateThreat(UnitGroupLoopCurrent());
                    if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;) || (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Tamed&quot;) == true))) {
                        lv_includingKoboldPetorBoss = true;
                    }
                    else {
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) != &quot;Bear&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;FrostBear&quot;)) {
                        lv_onlyBears = false;
                    }
                    else {
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) != &quot;Ghoul&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;UndeadSavage&quot;)) {
                        lv_onlyGhoulsorSavages = false;
                    }
                    else {
                    }
                    if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false)) {
                        lv_onlyStructures = false;
                    }
                    else {
                    }
                    if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) &lt;= 30.0) &amp;&amp; ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;) || (UnitHasBehavior(lp_kobold, &quot;Tamed&quot;) == true))) {
                        UnitGroupAdd(lv_executableFoes, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(lv_allies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_alliesThreat += gf_EvaluateThreat(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                if ((UnitGroupHasUnit(lv_allies, gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTower) == true)) {
                    lv_alliesThreat *= 2.0;
                }
                else {
                }
                if ((UnitGroupCount(lv_enemies, c_unitCountAlive) &gt; 0) &amp;&amp; ((lv_onlyStructures == false) || (UnitGroupCount(gf_GetNearbyDirewolves(lp_kobold), c_unitCountAlive) == 0)) &amp;&amp; ((libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == true) || ((gv_playerData[lv_i].lv_stamina &lt;= 5.0) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;Kobold&quot;, c_playerAny, lv_enemies, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;Kobold&quot;, c_playerAny, lv_allies, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) &amp;&amp; ((gf_RangedWeapon(lp_kobold) == true) || (gf_RangedWeapon(UnitGroupClosestToPoint(UnitGroupFilter(&quot;Kobold&quot;, c_playerAny, lv_enemies, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold))) == false))) || (((lv_enemyThreat * gv_errorEstimationFactor) &lt;= lv_alliesThreat) &amp;&amp; ((gv_playerData[lv_i].lv_stamina &gt;= 50.0) || ((lv_enemyThreat * 1.5) &lt;= lv_alliesThreat) || ((gf_GroupStamina(lv_enemies) * gv_errorEstimationFactor) &lt;= gf_GroupStamina(lv_allies))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &gt; gf_MinimumRetreatLife(lp_kobold))))) {
                    gv_aIData[lv_i].lv_weightedPOI = UnitGroupCenterOfGroup(lv_enemies);
                    if ((gv_playerData[lv_i].lv_stamina &lt;= 15.0) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Resting&quot;) == false) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;Tent&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 0), null)) {
                    }
                    else {
                        if (gf_AIQuickwarmth(lp_kobold)) {
                        }
                        else {
                            if ((gv_questIndexActive == 3) &amp;&amp; (lp_kobold == UnitInventoryUnit(gv_shipment)) &amp;&amp; (UnitGroupCount(lv_allies, c_unitCountAlive) &gt; (1 + UnitGroupCount(gv_pets[lv_i], c_unitCountAlive)))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_merchant)), c_orderQueueReplace);
                            }
                            else {
                                if (gf_AIDodgeBossAbilities(lp_kobold)) {
                                }
                                else {
                                    if ((gv_questIndexActive == 7) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;BoneTalisman&quot;) == false) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;BoneTalisman&quot;)) {
                                    }
                                    else {
                                        if (gf_AIQuicktree(lp_kobold)) {
                                        }
                                        else {
                                            if (gf_AIQuickstone(lp_kobold)) {
                                            }
                                            else {
                                                if (gf_AIQuickammo(lp_kobold, false)) {
                                                }
                                                else {
                                                    lv_point = UnitGroupCenterOfGroup(lv_enemies);
                                                    lv_target = gf_GetEnemyTarget(lp_kobold, lv_enemies);
                                                    gv_aIData[lv_i].lv_focalNode = lv_target;
                                                    if ((UnitGetType(lv_target) == &quot;Campfire&quot;)) {
                                                        UnitSetOwner(lv_target, lv_i, false);
                                                        UnitSetInfoText(lv_target, StringExternal(&quot;Param/Value/0542D33F&quot;), gf_GetPlayerName(lv_i, 0), StringExternal(&quot;Param/Value/F525E82C&quot;));
                                                    }
                                                    else {
                                                        if ((UnitTestState(lv_target, c_unitStateCloaked) == true) &amp;&amp; (libNtve_gf_UnitIsVisibleToPlayer(lv_target, lv_i) == false) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;Clairvoyance&quot;, 0))) {
                                                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;Clairvoyance&quot;, 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
                                                        }
                                                        else {
                                                            if (gf_RangedWeapon(lp_kobold) &amp;&amp; (gf_AttackCooldown(lp_kobold) &gt; 0.5) &amp;&amp; (UnitHasBehavior(lv_target, &quot;ArcaneEruption&quot;) == false) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_target)) &lt; (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, (UnitWeaponGet(lp_kobold, 1)), &quot;Range&quot;, lv_i)) * 0.8))) {
                                                                lv_b = UnitGroupClosestToPoint(lv_nearbyActiveAlliedSpikeTraps, UnitGetPosition(lp_kobold));
                                                                if (gf_UnitExists(lv_b) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lv_target), UnitGetPosition(lp_kobold)) &lt; DistanceBetweenPoints(UnitGetPosition(lv_target), UnitGetPosition(lv_b)))) {
                                                                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(lp_kobold), (UnitGetPropertyFixed(lp_kobold, c_unitPropMovementSpeed, c_unitPropCurrent) * gf_AttackCooldown(lp_kobold)), AngleBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)))), c_orderQueueReplace);
                                                                }
                                                                else {
                                                                    lv_p = gf_SmartRetreatPoint(lp_kobold, AngleBetweenPoints(lv_point, UnitGetPosition(lp_kobold)));
                                                                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_p), c_orderQueueReplace);
                                                                }
                                                            }
                                                            else {
                                                                lv_b = UnitGroupClosestToPoint(lv_executableFoes, UnitGetPosition(lp_kobold));
                                                                if (gf_UnitExists(lv_b) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;ShadowCloak&quot;) == true)) {
                                                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                                                }
                                                                else {
                                                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueReplace);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    lv_spellVariation = RandomInt(1, 5);
                    if (((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt; 70.0) || (UnitHasBehavior(lp_kobold, &quot;Starving&quot;) == true)) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;KoboldCanEat&quot;) == true)) {
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;Eatasnack&quot;, 0)), c_orderQueueReplace);
                    }
                    else {
                        if (((UnitGroupCount(lv_executableFoes, c_unitCountAlive) &gt; 0) || (lv_spellVariation == 2)) &amp;&amp; (lv_onlyStructures == false) &amp;&amp; (lv_onlyGhoulsorSavages == false) &amp;&amp; (TimerGetRemaining(gv_aIData[lv_i].lv_tamingTime) == 0.0) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;ShadowCloak&quot;, 0))) {
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;ShadowCloak&quot;, 0)), c_orderQueueReplace);
                        }
                        else {
                            lv_b = UnitGroupClosestToPoint(lv_enemies, UnitGetPosition(lp_kobold));
                            if ((lv_spellVariation == 4) &amp;&amp; (lv_onlyStructures == false) &amp;&amp; (TimerGetRemaining(gv_aIData[lv_i].lv_tamingTime) == 0.0) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;Affliction&quot;, 0)) &amp;&amp; gf_UnitExists(lv_b) &amp;&amp; (UnitHasBehavior(lv_b, &quot;Affliction&quot;) == false) &amp;&amp; (libNtve_gf_UnitIsVisibleToPlayer(lv_b, lv_i) == true) &amp;&amp; (UnitFilterMatch(lv_b, UnitGetOwner(lv_b), UnitFilter((1 &lt;&lt; c_targetFilterBiological), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32)))) == true)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;Affliction&quot;, 0), lv_b), c_orderQueueReplace);
                            }
                            else {
                                if ((UnitHasBehavior(lp_kobold, &quot;InCombat&quot;) == true) &amp;&amp; (lv_spellVariation == 3) &amp;&amp; (lv_onlyStructures == false) &amp;&amp; (TimerGetRemaining(gv_aIData[lv_i].lv_tamingTime) == 0.0) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;FrostArmor&quot;, 0))) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;FrostArmor&quot;, 0)), c_orderQueueAddToFront);
                                }
                                else {
                                    if ((((lv_spellVariation == 1) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Attacking&quot;) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt; 95.0)) || (lv_onlyBears == true)) &amp;&amp; (lv_onlyStructures == false) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;SiphonLife&quot;, 0))) {
                                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;SiphonLife&quot;, 0)), c_orderQueueAddToFront);
                                    }
                                    else {
                                        if ((((lv_spellVariation == 5) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt; 80.0)) || (UnitGroupCount(gf_UnitsInUnitGroupWithLife(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 40.0), c_unitCountAlive) &gt; 0)) &amp;&amp; (lv_onlyStructures == false) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;GuardianSpirit&quot;, 0))) {
                                            UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;GuardianSpirit&quot;, 0)), c_orderQueueAddToFront);
                                        }
                                        else {
                                            if ((UnitHasBehavior(lp_kobold, &quot;GoldenHauberk&quot;) == true) &amp;&amp; (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, &quot;GoldenHauberkHeal&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.Link&quot;, lv_i)) == 0.0) &amp;&amp; ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 50.0) || (UnitGroupCount(gf_UnitsInUnitGroupWithLife(UnitGroupAlliance(lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GoldenHauberkHealSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, lv_i))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0), 25.0), c_unitCountAlive) &gt; 0))) {
                                                UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand(&quot;KoboldBackpack&quot;, 3), gf_KoboldArmor(lp_kobold)), c_orderQueueReplace);
                                            }
                                            else {
                                                if ((UnitHasBehavior(lp_kobold, &quot;MurlocDoomhammer&quot;) == true) &amp;&amp; (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, &quot;MurlocDoomhammer&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.Link&quot;, lv_i)) == 0.0) &amp;&amp; (lv_includingKoboldPetorBoss == true) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(UnitGroupClosestToPoint(lv_enemies, UnitGetPosition(lp_kobold)))) &lt;= 3.0)) {
                                                    UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand(&quot;KoboldBackpack&quot;, 3), gf_KoboldMainHand(lp_kobold)), c_orderQueueReplace);
                                                }
                                                else {
                                                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_consumables, c_unitCountAlive) &gt; 0) &amp;&amp; (lv_includingKoboldPetorBoss == true)) {
                                                        UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand(&quot;KoboldBackpack&quot;, 3), UnitGroupRandomUnit(gv_playerData[lv_i].lv_resources.lv_consumables, c_unitCountAlive)), c_orderQueueReplace);
                                                    }
                                                    else {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((lv_onlyBears == true) &amp;&amp; (UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) &lt; StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i)))) {
                        TimerStart(gv_aIData[lv_i].lv_tamingTime, 4.0, false, c_timeGame);
                    }
                    else {
                    }
                    if ((lv_includingKoboldPetorBoss == true) &amp;&amp; (libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == false)) {
                        UnitSetCustomValue(lp_kobold, gv_aIStatusIndex, IntToFixed(1));
                        UnitBehaviorAdd(lp_kobold, &quot;AIRecentCombat&quot;, lp_kobold, 1);
                    }
                    else {
                    }
                    if ((UnitHasBehavior(lp_kobold, &quot;SkipChatCombat60&quot;) == false) &amp;&amp; (libNtve_gf_UnitInRegion(lp_kobold, gv_regionArena) == false) &amp;&amp; (lv_includingKoboldPetorBoss == true)) {
                        TextExpressionSetToken(&quot;Param/Expression/C7298D82&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                        TextExpressionSetToken(&quot;Param/Expression/C7298D82&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/3E41B091&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/8BA4C916&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/BD9D07E2&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/8BA4C916&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/C7298D82&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken(&quot;Param/Expression/8BA4C916&quot;, &quot;C&quot;, StringToText(gv_aIEnemySighted[RandomInt(1, gv_aIEnemySightedAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/8BA4C916&quot;));
                        UnitBehaviorAdd(lp_kobold, &quot;SkipChatCombat60&quot;, lp_kobold, 1);
                    }
                    else {
                    }
                    gv_aIData[lv_i].lv_lastCombatState = 1;
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="78D9CC87">
        <ScriptCode>
            bool gf_AIQuickwarmth (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_hasTorch;
                bool lv_hasLantern;
                bool lv_b_Night;
                bool lv_b_Winter;
                bool lv_needTorch;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_hasTorch = ((UnitHasBehavior(lp_kobold, &quot;Torch&quot;) || UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;)) || (UnitGroupCount(UnitGroupFilter(&quot;Torch&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0));
                lv_hasLantern = (UnitHasBehavior(lp_kobold, &quot;Lantern&quot;) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) &gt; 0));
                lv_b_Night = (!(gv_b_Day) &amp;&amp; !((lv_hasTorch || lv_hasLantern)));
                lv_b_Winter = (gv_winter &amp;&amp; !(lv_hasTorch));
                lv_needTorch = (lv_b_Night || lv_b_Winter);
                lv_success = true;
                // Implementation
                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;CampfireLit&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupRandomUnit(lv_a, c_unitCountAlive);
                if (gf_UnitExists(lv_b) &amp;&amp; (lv_needTorch == true)) {
                    gf_CreateItemForUnit(lp_kobold, &quot;Torch&quot;, 1);
                }
                else {
                    lv_a = UnitGroup(&quot;Campfire&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b) &amp;&amp; (lv_needTorch == true) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                        if ((UnitGetOwner(lv_b) != lv_i)) {
                            UnitSetOwner(lv_b, lv_i, false);
                        }
                        else {
                        }
                        UnitIssueOrder(lv_b, Order(AbilityCommand(&quot;LightCampfire&quot;, 0)), c_orderQueueReplace);
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;CampfireLit&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; (lv_needTorch == true) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        }
                        else {
                            lv_a = UnitGroup(&quot;Campfire&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) &amp;&amp; (lv_needTorch == true) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                if (((lv_needTorch == true) || (gv_playerData[lv_i].lv_warmth &lt;= 5.0)) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;CampfireLit&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 1), null)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="76637D3E">
        <ScriptCode>
            bool gf_AIQuicktree (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_b_LumberForFire;
                bool lv_b_ForestryReplenish;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_b_LumberForFire = ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) == 0) &amp;&amp; ((UnitHasBehavior(lp_kobold, &quot;Frostbite&quot;) || !((((UnitHasBehavior(lp_kobold, &quot;Heat&quot;) || UnitHasBehavior(lp_kobold, &quot;Torch&quot;)) || UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;)) || UnitHasBehavior(lp_kobold, &quot;Lantern&quot;)))) &amp;&amp; ((gv_playerData[lv_i].lv_warmth &lt;= 50.0) &amp;&amp; !(UnitHasBehavior(lp_kobold, &quot;FrostBarrier&quot;)))));
                lv_b_ForestryReplenish = ((gv_skillForestry[lv_i] &gt;= 15) &amp;&amp; ((gv_playerData[lv_i].lv_stamina &lt;= 10.0) || ((gv_playerData[lv_i].lv_warmth &lt;= 10.0) &amp;&amp; (!(UnitHasBehavior(lp_kobold, &quot;FrostArmor&quot;)) &amp;&amp; !(UnitHasBehavior(lp_kobold, &quot;FrostBarrier&quot;))))));
                lv_success = true;
                // Implementation
                if ((gv_b_Day == false)) {
                    if (((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) == 0) || ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_lumber) &amp;&amp; (lv_b_ForestryReplenish == true))) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Lumber&quot;)) {
                    }
                    else {
                        if ((lv_b_LumberForFire == true) &amp;&amp; gf_AITradeBuyWithdraw(lp_kobold, &quot;Lumber&quot;, 1, true, false, gv_playerData[lv_i].lv_stats.lv_sightRadius)) {
                        }
                        else {
                            if (((lv_b_LumberForFire == true) || (lv_b_ForestryReplenish == true)) &amp;&amp; gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;MapleTree&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                            }
                            else {
                                lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup(&quot;MapleTree&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 1.0);
                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                if (((lv_b_LumberForFire == true) || (lv_b_ForestryReplenish == true)) &amp;&amp; gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                    gv_aIData[lv_i].lv_focalNode = lv_b;
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="11E7E927">
        <ScriptCode>
            bool gf_AIQuickstone (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_b_StoneForFire;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_b_StoneForFire = ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) == 0) &amp;&amp; ((UnitHasBehavior(lp_kobold, &quot;Frostbite&quot;) || !((((UnitHasBehavior(lp_kobold, &quot;Heat&quot;) || UnitHasBehavior(lp_kobold, &quot;Torch&quot;)) || UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;)) || UnitHasBehavior(lp_kobold, &quot;Lantern&quot;)))) &amp;&amp; ((gv_playerData[lv_i].lv_warmth &lt;= 50.0) &amp;&amp; !(UnitHasBehavior(lp_kobold, &quot;FrostBarrier&quot;)))));
                lv_success = true;
                // Implementation
                if ((gv_b_Day == false)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) == 0) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Stone&quot;)) {
                    }
                    else {
                        if ((lv_b_StoneForFire == true) &amp;&amp; gf_AITradeBuyWithdraw(lp_kobold, &quot;Stone&quot;, 1, true, false, gv_playerData[lv_i].lv_stats.lv_sightRadius)) {
                        }
                        else {
                            if ((lv_b_StoneForFire == true) &amp;&amp; gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;StoneDeposit&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                UnitBehaviorAdd(lp_kobold, &quot;BriefPassivity&quot;, lp_kobold, 1);
                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                            }
                            else {
                                lv_a = UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                if ((lv_b_StoneForFire == true) &amp;&amp; gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                                    gv_aIData[lv_i].lv_focalNode = lv_b;
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                                    UnitBehaviorAdd(lp_kobold, &quot;BriefPassivity&quot;, lp_kobold, 1);
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="AF1C013A">
        <ScriptCode>
            bool gf_AIQuickammo (unit lp_kobold, bool lp_proximityCheck) {
                // Variable Declarations
                int lv_i;
                int lv_t;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_t = gv_playerData[lv_i].lv_team;
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                    if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)) &lt;= gv_interactRadius) &amp;&amp; (UnitGetCustomValue(gv_teamData[lv_t].lv_watchTower, 1) &lt;= 10.0) &amp;&amp; (libNtve_gf_UnitIsUnderConstruction(gv_teamData[lv_t].lv_watchTower) == false)) {
                        gf_PlayerUseUnitAbility(lv_i, gv_teamData[lv_t].lv_watchTower, AbilityCommand(&quot;WatchTowerRefillAmmunition&quot;, 0));
                    }
                    else {
                        if ((lp_proximityCheck == false) &amp;&amp; gf_UnitExists(gv_teamData[lv_t].lv_watchTower) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_teamData[lv_t].lv_watchTower), FixedToInt(gv_playerData[lv_i].lv_stats.lv_sightRadius)) &amp;&amp; (UnitGetCustomValue(gv_teamData[lv_t].lv_watchTower, 1) &lt;= 5.0) &amp;&amp; (libNtve_gf_UnitIsUnderConstruction(gv_teamData[lv_t].lv_watchTower) == false)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)), c_orderQueueReplace);
                        }
                        else {
                            lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;AutomatedDefenseTurret&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 1, 0.0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b)) {
                                if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) &lt;= gv_interactRadius)) {
                                    gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand(&quot;RefillAmmunition&quot;, 0));
                                }
                                else {
                                    if ((lp_proximityCheck == false)) {
                                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F7CA8E8F">
        <ScriptCode>
            point gf_SmartRetreatPoint (unit lp_kobold, fixed lp_angle) {
                int auto8FE0BCC9_ae;
                int auto8FE0BCC9_ai;
                // Variable Declarations
                const fixed lv_arc = 90.0;
                const int lv_nodes = 7;
                int lv_a;
                point lv_p;
                const fixed lv_r = 8.0;
                point lv_value;
                // Variable Initialization
                // Implementation
                auto8FE0BCC9_ae = lv_nodes;
                auto8FE0BCC9_ai = 1;
                lv_a = 0;
                for ( ; ( (auto8FE0BCC9_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto8FE0BCC9_ae) || (auto8FE0BCC9_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto8FE0BCC9_ae) ) ; lv_a += auto8FE0BCC9_ai ) {
                    lv_p = PointWithOffsetPolar(UnitGetPosition(lp_kobold), (lv_r + (lv_a * 0.1)), (lp_angle + (lv_a * (lv_arc / (lv_nodes + 1.0)))));
                    if ((AIPathingCostUnit(lp_kobold, lv_p, c_ignoreEnemyBuildings) != -1) &amp;&amp; ((lv_value == null) || (AIPathingCostUnit(lp_kobold, lv_p, c_ignoreEnemyBuildings) &lt; AIPathingCostUnit(lp_kobold, lv_value, c_ignoreEnemyBuildings)))) {
                        lv_value = lv_p;
                    }
                    else {
                    }
                    lv_p = PointWithOffsetPolar(UnitGetPosition(lp_kobold), (lv_r + (lv_a * 0.1)), (lp_angle - (lv_a * (lv_arc / (lv_nodes + 1.0)))));
                    if ((AIPathingCostUnit(lp_kobold, lv_p, c_ignoreEnemyBuildings) != -1) &amp;&amp; ((lv_value == null) || (AIPathingCostUnit(lp_kobold, lv_p, c_ignoreEnemyBuildings) &lt; AIPathingCostUnit(lp_kobold, lv_value, c_ignoreEnemyBuildings)))) {
                        lv_value = lv_p;
                    }
                    else {
                    }
                }
                if ((lv_value == null)) {
                    lv_value = PointWithOffsetPolar(UnitGetPosition(lp_kobold), 1.0, (lp_angle + 90.0));
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A1129088">
        <ScriptCode>
            unit gf_GetEnemyTarget (unit lp_attacker, unitgroup lp_group) {
                // Variable Declarations
                unit lv_value;
                unitgroup lv_enemiesAll;
                unitgroup lv_enemiesNoStructures;
                // Variable Initialization
                lv_enemiesAll = UnitGroupFilter(null, c_playerAny, lp_group, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_enemiesNoStructures = UnitGroupFilter(null, c_playerAny, lp_group, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Implementation
                UnitGroupAddUnitGroup(lv_enemiesNoStructures, UnitGroupFilter(&quot;SpikeTrap&quot;, c_playerAny, lp_group, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_enemiesNoStructures, UnitGroupFilter(&quot;AutomatedDefenseTurret&quot;, c_playerAny, lp_group, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_enemiesNoStructures, UnitGroupFilter(&quot;Fortress&quot;, c_playerAny, lp_group, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                if ((UnitGroupCount(lv_enemiesNoStructures, c_unitCountAlive) &gt; 0)) {
                    lv_value = UnitGroupClosestToPoint(lv_enemiesNoStructures, UnitGetPosition(lp_attacker));
                }
                else {
                    lv_value = UnitGroupClosestToPoint(lv_enemiesAll, UnitGetPosition(lp_attacker));
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="144F0548">
        <ScriptCode>
            fixed gf_MinimumRetreatLife (unit lp_unit) {
                // Variable Declarations
                fixed lv_value;
                // Variable Initialization
                lv_value = 30.0;
                // Implementation
                if (gf_RangedWeapon(lp_unit)) {
                    lv_value = 20.0;
                }
                else {
                }
                lv_value += (2 * UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), 4.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F4F3BBB3">
        <ScriptCode>
            bool gf_AIDodgeBossAbilities (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                bool lv_success;
                unit lv_unit;
                point lv_p;
                unitgroup lv_a;
                unit lv_b;
                region lv_region;
                unit lv_rAB;
                unit lv_uA;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_success = true;
                lv_a = UnitGroupEmpty();
                lv_region = RegionCircle(UnitGetPosition(lp_unit), gv_playerData[lv_i].lv_stats.lv_sightRadius);
                lv_rAB = UnitGroupClosestToPoint(UnitGroup(&quot;RagingArcaneBeast&quot;, c_playerAny, lv_region, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                lv_uA = UnitGroupClosestToPoint(UnitGroup(&quot;UnstableAnomaly&quot;, c_playerAny, lv_region, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit));
                // Implementation
                if (gf_UnitExists(lv_rAB) &amp;&amp; (UnitHasBehavior(lv_rAB, &quot;ArcaneEruption&quot;) == true) &amp;&amp; ((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_rAB)) &gt;= ((UnitGetCustomValue(lv_rAB, 0) * 1.75) - (1.75 / 2.0))) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_rAB)) &lt;= ((UnitGetCustomValue(lv_rAB, 0) * 1.75) + (1.75 / 2.0))))) {
                    if ((UnitGetCustomValue(lv_rAB, 0) == 1.0)) {
                        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(lp_unit), 2.0, AngleBetweenPoints(UnitGetPosition(lv_rAB), UnitGetPosition(lp_unit)))), c_orderQueueReplace);
                        UnitIssueOrder(lp_unit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                        if ((UnitHasBehavior(lp_unit, &quot;Tamed&quot;) == true)) {
                            UnitCreateEffectUnit(lp_unit, &quot;PetDodging05Sec&quot;, lp_unit);
                        }
                        else {
                        }
                    }
                    else {
                        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(lp_unit), 2.0, AngleBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(lv_rAB)))), c_orderQueueReplace);
                    }
                }
                else {
                    if (gf_UnitExists(lv_uA) &amp;&amp; (UnitGetHeight(lv_uA) &lt; gv_uAMeleeHeight)) {
                        UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_uA), c_orderQueueReplace);
                    }
                    else {
                        if (gf_UnitExists(lv_rAB) &amp;&amp; (UnitHasBehavior(lp_unit, &quot;Annihilate&quot;) == true)) {
                            lv_p = PointWithOffsetPolar(UnitGetPosition(lv_rAB), 6.0, (AngleBetweenPoints(UnitGetPosition(lv_rAB), UnitGetPosition(lp_unit)) + 35.0));
                            if (gf_PathableMaximum(lp_unit, lv_p, 4)) {
                                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_p), c_orderQueueReplace);
                            }
                            else {
                                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gf_SmartRetreatPoint(lp_unit, AngleBetweenPoints(UnitGetPosition(lv_rAB), UnitGetPosition(lp_unit)))), c_orderQueueReplace);
                            }
                        }
                        else {
                            if ((UnitGroupCount(UnitGroup(&quot;TrollGroundSpike&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_unit), (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;TrollGroundSpikeSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, 15)) + UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0)) {
                                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gf_PointWithoutUnitType(lp_unit, 4.0, &quot;TrollGroundSpike&quot;, (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;TrollGroundSpikeSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, 15)) + UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent)))), c_orderQueueReplace);
                                UnitIssueOrder(lp_unit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                            }
                            else {
                                lv_a = UnitGroup(&quot;MoltenSphere&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_unit), (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MoltenSphereSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, 15)) + UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_unit));
                                if (gf_UnitExists(lv_b) &amp;&amp; (UnitGetHeight(lv_b) &lt;= 4.0)) {
                                    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gf_PointWithoutUnitType(lp_unit, 6.0, &quot;MoltenSphere&quot;, (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MoltenSphereSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, 15)) + UnitGetPropertyFixed(lp_unit, c_unitPropRadius, c_unitPropCurrent)))), c_orderQueueReplace);
                                }
                                else {
                                    if ((UnitHasBehavior(lp_unit, &quot;FirestormDoT&quot;) == true)) {
                                        lv_b = UnitBehaviorEffectUnit(lp_unit, &quot;FirestormDoT&quot;, c_effectUnitCaster, 0);
                                        if (gf_UnitExists(lv_b)) {
                                            lv_p = PointWithOffsetPolar(UnitGetPosition(lv_b), 4.0, (AngleBetweenPoints(UnitGetPosition(lv_b), UnitGetPosition(lp_unit)) + 10.0));
                                            if (gf_PathableMaximum(lp_unit, lv_p, 4)) {
                                                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_p), c_orderQueueReplace);
                                            }
                                            else {
                                                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gf_SmartRetreatPoint(lp_unit, AngleBetweenPoints(UnitGetPosition(lv_b), UnitGetPosition(lp_unit)))), c_orderQueueReplace);
                                            }
                                        }
                                        else {
                                            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gf_SmartRetreatPoint(lp_unit, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                        }
                                    }
                                    else {
                                        if (gf_UnitExists(gv_warlord) &amp;&amp; (UnitHasBehavior(gv_warlord, &quot;WhirlingBlades&quot;) == true) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(gv_warlord), UnitGetPosition(lp_unit)) &lt;= 8.0)) {
                                            if (((DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_warlord)) &gt;= 3.75) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(gv_warlord)) &lt;= 4.25))) {
                                                UnitIssueOrder(lp_unit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                                                if ((UnitHasBehavior(lp_unit, &quot;Tamed&quot;) == true)) {
                                                    UnitCreateEffectUnit(lp_unit, &quot;PetDodging05Sec&quot;, lp_unit);
                                                }
                                                else {
                                                }
                                            }
                                            else {
                                                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(gv_warlord), 4.0, (AngleBetweenPoints(UnitGetPosition(gv_warlord), UnitGetPosition(lp_unit)) + RandomFixed(-20.0, 20.0)))), c_orderQueueReplace);
                                                UnitIssueOrder(lp_unit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                                                if ((UnitHasBehavior(lp_unit, &quot;Tamed&quot;) == true)) {
                                                    UnitCreateEffectUnit(lp_unit, &quot;PetDodging05Sec&quot;, lp_unit);
                                                }
                                                else {
                                                }
                                            }
                                        }
                                        else {
                                            if (gf_UnitExists(gv_murlocChief) &amp;&amp; (UnitHasBehavior(gv_murlocChief, &quot;MurlocRushSetup&quot;) == true) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_unit)) &lt;= 10.0)) {
                                                gf_DodgeMurlocCharge(lp_unit);
                                            }
                                            else {
                                                lv_success = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1C7F9DCB">
        <ScriptCode>
            point gf_PointWithoutUnitType (unit lp_origin, fixed lp_radius, string lp_type, fixed lp_typeRadius) {
                int autoD0AB5D99_ae;
                int autoD0AB5D99_ai;
                // Variable Declarations
                int lv_a;
                region lv_region;
                const int lv_attempts = 30;
                point lv_value;
                // Variable Initialization
                lv_region = RegionCircle(UnitGetPosition(lp_origin), lp_radius);
                // Implementation
                autoD0AB5D99_ae = lv_attempts;
                autoD0AB5D99_ai = 1;
                lv_a = 1;
                for ( ; ( (autoD0AB5D99_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoD0AB5D99_ae) || (autoD0AB5D99_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoD0AB5D99_ae) ) ; lv_a += autoD0AB5D99_ai ) {
                    lv_value = RegionRandomPoint(lv_region);
                    if ((UnitGroupCount(UnitGroup(lp_type, c_playerAny, RegionCircle(lv_value, lp_typeRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; gf_PathableMaximum(lp_origin, lv_value, FixedToInt(lp_radius))) {
                        return lv_value;
                    }
                    else {
                        lv_value = null;
                    }
                }
                if ((lv_value == null)) {
                    lv_value = RegionRandomPoint(lv_region);
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D35B394F">
        <ScriptCode>
            void gf_DodgeMurlocCharge (unit lp_dodger) {
                // Variable Declarations
                fixed lv_a;
                fixed lv_b;
                // Variable Initialization
                // Implementation
                lv_a = (UnitGetFacing(gv_murlocChief) - AngleBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_dodger)));
                if ((AbsF(lv_a) &lt;= 45.0)) {
                    if ((lv_a &gt;= 0.0)) {
                        lv_b = -75.0;
                    }
                    else {
                        lv_b = 75.0;
                    }
                    UnitIssueOrder(lp_dodger, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(PointWithOffsetPolar(UnitGetPosition(gv_murlocChief), DistanceBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_dodger)), UnitGetFacing(gv_murlocChief)), 4.0, (UnitGetFacing(gv_murlocChief) + lv_b))), c_orderQueueReplace);
                }
                else if ((DistanceBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_dodger)) &lt;= 2.5)) {
                    UnitIssueOrder(lp_dodger, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(gv_murlocChief), 4.0, AngleBetweenPoints(UnitGetPosition(gv_murlocChief), UnitGetPosition(lp_dodger)))), c_orderQueueReplace);
                }
                if ((UnitHasBehavior(lp_dodger, &quot;Tamed&quot;) == true)) {
                    UnitIssueOrder(lp_dodger, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                    UnitBehaviorAdd(lp_dodger, &quot;PetDodging&quot;, lp_dodger, 1);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="695DA851">
        <ScriptCode>
            fixed gf_GroupStamina (unitgroup lp_group) {
                // Variable Declarations
                fixed lv_value;
                // Variable Initialization
                // Implementation
                UnitGroupLoopBegin(lp_group);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;)) {
                        lv_value += gv_playerData[UnitGetOwner(UnitGroupLoopCurrent())].lv_stamina;
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9AA1E85C">
        <ScriptCode>
            bool gf_AIHelpAlly (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                int lv_t;
                unitgroup lv_engagedBruddahs;
                unit lv_u;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_t = gf_GetTeamOfPlayer(lv_i);
                lv_engagedBruddahs = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower) &amp;&amp; (UnitGroupCount(gf_GetEnemiesNearPoint(UnitGetPosition(gv_teamData[lv_t].lv_watchTower), lv_i, StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;Sight&quot;, UnitGetOwner(gv_teamData[lv_t].lv_watchTower))), false), c_unitCountAlive) &gt; 0)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)), c_orderQueueReplace);
                }
                else {
                    if ((gv_aIMonumentBuilder[lv_t] != lv_i) &amp;&amp; (gv_teamData[lv_t].lv_aIWatchTowerBuilder != lv_i) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &gt;= 50.0)) {
                        UnitGroupAddUnitGroup(lv_engagedBruddahs, libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAllyExcludeSelf, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), gv_aIStatusIndex, 1.0));
                        UnitGroupAddUnitGroup(lv_engagedBruddahs, libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAllyExcludeSelf, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), gv_aIStatusIndex, 2.0));
                        lv_u = UnitGroupClosestToPoint(lv_engagedBruddahs, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_u) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_u), 64) &amp;&amp; (libNtve_gf_UnitInRegion(lv_u, gv_regionArena) == false)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_u)), c_orderQueueReplace);
                        }
                        else {
                            lv_success = false;
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3DCF90EB">
        <ScriptCode>
            bool gf_AIRepairFortress (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                int lv_t;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_t = gv_playerData[lv_i].lv_team;
                lv_success = true;
                // Implementation
                if (gf_UnitExists(gv_teamData[lv_t].lv_watchTower) &amp;&amp; (gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (UnitGetPropertyFixed(gv_teamData[lv_t].lv_watchTower, c_unitPropLifePercent, c_unitPropCurrent) &lt; 75.0) &amp;&amp; (UnitHasBehavior(gv_teamData[lv_t].lv_watchTower, &quot;Dilapidated&quot;) == false) &amp;&amp; (UnitHasBehavior(gv_teamData[lv_t].lv_watchTower, &quot;UnderSiege&quot;) == false)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)) &lt; 6.0)) {
                        gv_unstuckRating[lv_i] = 0;
                    }
                    else {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)), c_orderQueueReplace);
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A8B4FA03">
        <ScriptCode>
            bool gf_AITakeABreath (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                // Implementation
                if ((UnitHasBehavior(lp_kobold, &quot;ShadowCloak&quot;) == true) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;AIProwlsStag&quot;) == false) &amp;&amp; (TimerGetRemaining(gv_aIData[lv_i].lv_shadowCloakMinimum) == 0.0)) {
                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;ShadowCloak&quot;, 1)), c_orderQueueReplace);
                }
                else {
                }
                return false;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8A14A8C0">
        <ScriptCode>
            bool gf_AIEarlyExploring (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                point lv_p;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_success = true;
                // Implementation
                if ((TimerGetRemaining(gv_aIData[lv_i].lv_explorerTimer) &gt; 0.0)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(lp_kobold), 8.0, (gv_aIData[lv_i].lv_explorerAngle + RandomFixed(-10.0, 10.0)))), c_orderQueueReplace);
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F997F72D">
        <ScriptCode>
            bool gf_AILootFish (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_success = true;
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_food)) {
                    if (gf_FindPickupItem(lp_kobold, &quot;WaterScorpion&quot;)) {
                    }
                    else {
                        if (gf_FindPickupItem(lp_kobold, &quot;AlbinoCavefish&quot;)) {
                        }
                        else {
                            if (gf_FindPickupItem(lp_kobold, &quot;GiantSunfish&quot;)) {
                            }
                            else {
                                if (gf_FindPickupItem(lp_kobold, &quot;BlindRainfish&quot;)) {
                                }
                                else {
                                    if (gf_FindPickupItem(lp_kobold, &quot;StripedLurker&quot;)) {
                                    }
                                    else {
                                        if (gf_FindPickupItem(lp_kobold, &quot;SlipperyEel&quot;)) {
                                        }
                                        else {
                                            if (gf_FindPickupItem(lp_kobold, &quot;JewelDanio&quot;)) {
                                            }
                                            else {
                                                if (gf_FindPickupItem(lp_kobold, &quot;HighlandGuppy&quot;)) {
                                                }
                                                else {
                                                    if (gf_FindPickupItem(lp_kobold, &quot;ForestTrout&quot;)) {
                                                    }
                                                    else {
                                                        if (gf_FindPickupItem(lp_kobold, &quot;FireAmmonite&quot;)) {
                                                        }
                                                        else {
                                                            lv_success = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="48286F93">
        <ScriptCode>
            bool gf_AILootFood (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_success = true;
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_food)) {
                    if (gf_FindPickupItem(lp_kobold, &quot;StagStew&quot;)) {
                    }
                    else {
                        if (gf_FindPickupItem(lp_kobold, &quot;SmokedLambSirloin&quot;)) {
                        }
                        else {
                            if (gf_FindPickupItem(lp_kobold, &quot;BeerBraisedPheasant&quot;)) {
                            }
                            else {
                                if (gf_FindPickupItem(lp_kobold, &quot;RoastedPheasantWithBerrySauce&quot;)) {
                                }
                                else {
                                    if (gf_FindPickupItem(lp_kobold, &quot;GrilledWolfEntrecote&quot;)) {
                                    }
                                    else {
                                        if (gf_FindPickupItem(lp_kobold, &quot;SpicedLambFeast&quot;)) {
                                        }
                                        else {
                                            if (gf_FindPickupItem(lp_kobold, &quot;RoastedLamb&quot;)) {
                                            }
                                            else {
                                                if (gf_FindPickupItem(lp_kobold, &quot;WolfSteak&quot;)) {
                                                }
                                                else {
                                                    lv_success = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3384D5DA">
        <ScriptCode>
            bool gf_AILootQuestGear (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_success = true;
                // Implementation
                if ((gv_aIMonumentBuilder[lv_i] != lv_i)) {
                    if ((UnitHasBehavior(lp_kobold, &quot;ConjurersCharm&quot;) == false) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;ConjurersCharm&quot;)) {
                        if ((UnitHasBehavior(lp_kobold, &quot;NecromancersNecklace&quot;) == false) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;NecromancersNecklace&quot;)) {
                        }
                        else {
                            if ((UnitHasBehavior(lp_kobold, &quot;TheMurlocket&quot;) == false) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;TheMurlocket&quot;)) {
                            }
                            else {
                                if (gf_FindPickupItem(lp_kobold, &quot;MurlocDoomhammer&quot;)) {
                                }
                                else {
                                    if (gf_FindPickupItem(lp_kobold, &quot;ViciouslySharpArmblade&quot;)) {
                                    }
                                    else {
                                        if (gf_FindPickupItem(lp_kobold, &quot;CravensFishSticker&quot;)) {
                                        }
                                        else {
                                            if (gf_FindPickupItem(lp_kobold, &quot;FelFireTorch&quot;)) {
                                            }
                                            else {
                                                if (gf_FindPickupItem(lp_kobold, &quot;SpikedShadowstoneScutum&quot;)) {
                                                }
                                                else {
                                                    if (gf_FindPickupItem(lp_kobold, &quot;FrostNeedle&quot;)) {
                                                    }
                                                    else {
                                                        if (gf_FindPickupItem(lp_kobold, &quot;FrostBarrier&quot;)) {
                                                        }
                                                        else {
                                                            if (gf_FindPickupItem(lp_kobold, &quot;Bloodcleaver&quot;)) {
                                                            }
                                                            else {
                                                                lv_success = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
                else {
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="215FBEA1">
        <ScriptCode>
            bool gf_AITreasureChests (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;TreasureChest&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 128)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                }
                else {
                    lv_b = UnitGroupClosestToPoint(UnitGroup(&quot;TreasureChest&quot;, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(null, null, 128) &amp;&amp; (libNtve_gf_UnitIsVisibleToPlayer(lv_b, lv_i) == true) &amp;&amp; ((UnitHasBehavior(lv_b, &quot;ChestBeingUnlocked&quot;) == false) || (UnitHasBehavior(lp_kobold, &quot;UnlockingChestSmart&quot;) == true))) {
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                            TextExpressionSetToken(&quot;Param/Expression/4D4F9DDD&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                            TextExpressionSetToken(&quot;Param/Expression/4D4F9DDD&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/D39374F4&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/39E28F09&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/5CE6D4A5&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/39E28F09&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/4D4F9DDD&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                            TextExpressionSetToken(&quot;Param/Expression/39E28F09&quot;, &quot;C&quot;, StringToText(gv_aIQuestLootString[RandomInt(1, gv_aIQuestLootStringAmount)]));
                            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/39E28F09&quot;));
                            UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                        }
                        else {
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="93978CEA">
        <ScriptCode>
            bool gf_AIQuestingImperative (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_success = true;
                // Implementation
                if ((UnitHasBehavior(lp_kobold, &quot;Fishing&quot;) == true)) {
                    TimerStart(gv_aIData[lv_i].lv_fishingTime, 5.0, false, c_timeGame);
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="34A5AFB5">
        <ScriptCode>
            bool gf_AIQuestingHighPriority (unit lp_kobold) {
                // Variable Declarations
                unitgroup lv_a;
                unit lv_b;
                unitgroup lv_group;
                fixed lv_temp;
                int lv_i;
                int lv_t;
                unit lv_carrier;
                bool lv_success;
                // Variable Initialization
                lv_a = UnitGroupEmpty();
                lv_group = UnitGroupEmpty();
                lv_i = UnitGetOwner(lp_kobold);
                lv_t = gf_GetTeamOfPlayer(lv_i);
                lv_success = true;
                // Implementation
                if ((lv_i != gv_teamData[lv_t].lv_aIWatchTowerBuilder)) {
                    if (gf_AITreasureChests(lp_kobold)) {
                    }
                    else {
                        if ((gv_questIndexActive == 3)) {
                            lv_carrier = UnitInventoryUnit(gv_shipment);
                            if ((lv_carrier == lp_kobold)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_merchant)), c_orderQueueReplace);
                            }
                            else {
                                if ((UnitGetType(UnitInventoryUnit(gv_shipment)) == &quot;CrabShipment&quot;)) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_shipment), c_orderQueueReplace);
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                        else {
                            if (gf_AIQuestGastronomist(lp_kobold)) {
                            }
                            else {
                                if ((gv_questIndexActive == 6) &amp;&amp; (gv_gladiatorPhase == 2) &amp;&amp; gf_IsGladiator(lp_kobold)) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(2592)), c_orderQueueReplace);
                                }
                                else {
                                    if ((gv_questIndexActive == 13)) {
                                        lv_a = UnitGroup(&quot;LorenorStatue&quot;, lv_i, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b) &amp;&amp; (libNtve_gf_UnitIsUnderConstruction(lv_b) == true)) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                                        }
                                        else {
                                            if ((lv_i == gv_aIMonumentBuilder[lv_t]) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;LorenorStatue&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 9), null)) {
                                            }
                                            else {
                                                if ((lv_i != gv_aIMonumentBuilder[lv_t]) &amp;&amp; (UnitHasBehavior(gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_kobold, &quot;Constructing&quot;) == false) &amp;&amp; (UnitGroupCount(gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_resources.lv_stone, c_unitCountAlive) &lt; 9) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt; 1) &amp;&amp; gf_AIBringItemToUnit(lp_kobold, UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_stone, 1), gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_kobold)) {
                                                }
                                                else {
                                                    if ((lv_i != gv_aIMonumentBuilder[lv_t]) &amp;&amp; (UnitHasBehavior(gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_kobold, &quot;Constructing&quot;) == false) &amp;&amp; (UnitGroupCount(gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_resources.lv_lumber, c_unitCountAlive) &lt; 9) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt; 1) &amp;&amp; gf_AIBringItemToUnit(lp_kobold, UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lumber, 1), gv_playerData[gv_aIMonumentBuilder[lv_t]].lv_kobold)) {
                                                    }
                                                    else {
                                                        if ((lv_i != gv_aIMonumentBuilder[lv_t])) {
                                                            lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;LorenorStatue&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
                                                            if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                                                                if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                                                                    TextExpressionSetToken(&quot;Param/Expression/B6A98FAE&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                                                                    TextExpressionSetToken(&quot;Param/Expression/B6A98FAE&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/4B4A2100&quot;));
                                                                    TextExpressionSetToken(&quot;Param/Expression/466DF4F4&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/90FE1F76&quot;));
                                                                    TextExpressionSetToken(&quot;Param/Expression/466DF4F4&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/B6A98FAE&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                                                    TextExpressionSetToken(&quot;Param/Expression/466DF4F4&quot;, &quot;C&quot;, StringToText(gv_aIMonumentString[RandomInt(1, gv_aIMonumentStringAmount)]));
                                                                    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/466DF4F4&quot;));
                                                                    UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                                                                }
                                                                else {
                                                                }
                                                            }
                                                            else {
                                                                lv_success = false;
                                                            }
                                                        }
                                                        else {
                                                            lv_success = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (gf_AIDiggyHole(lp_kobold)) {
                                        }
                                        else {
                                            if (gf_FindPickupItem(lp_kobold, &quot;GoldPurse&quot;)) {
                                            }
                                            else {
                                                if ((gv_aIMonumentBuilder[lv_t] != lv_i) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;SpellBook&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;ConjurersCharm&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;NecromancersNecklace&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;TheMurlocket&quot;) == false) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;SpellBook&quot;)) {
                                                }
                                                else {
                                                    if ((gv_aIMonumentBuilder[lv_t] != lv_i) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;ScrollofTransmutation&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;ScrollofTransmutation&quot;)) {
                                                    }
                                                    else {
                                                        if ((gv_aIMonumentBuilder[lv_t] != lv_i) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_obedRods, c_unitCountAlive) == 0) &amp;&amp; (UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) &lt; StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i))) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;ObedienceRod&quot;)) {
                                                        }
                                                        else {
                                                            if ((gv_aIMonumentBuilder[lv_t] != lv_i) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &lt; (gv_aIData[lv_i].lv_supply.lv_radiantGems + 1)) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;RadiantGem&quot;)) {
                                                            }
                                                            else {
                                                                if ((gv_aIMonumentBuilder[lv_t] != lv_i) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_lanterns) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Lantern&quot;)) {
                                                                }
                                                                else {
                                                                    if (gf_AIGatherCandles(lp_kobold)) {
                                                                    }
                                                                    else {
                                                                        if (gf_AILootFish(lp_kobold)) {
                                                                        }
                                                                        else {
                                                                            if (gf_AILootFood(lp_kobold)) {
                                                                            }
                                                                            else {
                                                                                if (gf_AILootQuestGear(lp_kobold)) {
                                                                                }
                                                                                else {
                                                                                    lv_success = false;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="71B13D10">
        <ScriptCode>
            bool gf_AIQuestingNormal (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unit lv_b;
                unitgroup lv_group;
                fixed lv_temp;
                unit lv_carrier;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_group = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((lv_i != gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder)) {
                    if ((gv_questIndexActive == 1)) {
                        lv_temp = 0.0;
                        lv_group = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        UnitGroupLoopBegin(lv_group);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            lv_temp += gf_EvaluateThreat(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        if ((lv_temp &gt; gf_EvaluateThreat(gv_murlocChief))) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(gv_murlocChief)), c_orderQueueReplace);
                            if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                                TextExpressionSetToken(&quot;Param/Expression/09106C1F&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                                TextExpressionSetToken(&quot;Param/Expression/09106C1F&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/4AD4E17C&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/A4E16D80&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/51E97D76&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/A4E16D80&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/09106C1F&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                TextExpressionSetToken(&quot;Param/Expression/A4E16D80&quot;, &quot;C&quot;, StringToText(gv_aIQuestKillString[RandomInt(1, gv_aIQuestKillStringAmount)]));
                                UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/A4E16D80&quot;));
                                UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                            }
                            else {
                            }
                        }
                        else {
                            lv_success = false;
                        }
                    }
                    else if ((UnitGroupCount(UnitGroup(&quot;TreasureChest&quot;, c_playerAny, RegionEntireMap(), UnitFilter((1 &lt;&lt; c_targetFilterVisible), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0)) {
                        lv_b = UnitGroupClosestToPoint(UnitGroup(&quot;TreasureChest&quot;, c_playerAny, RegionEntireMap(), UnitFilter((1 &lt;&lt; c_targetFilterVisible), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; (UnitHasBehavior(lv_b, &quot;ChestBeingUnlocked&quot;) == false)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                                TextExpressionSetToken(&quot;Param/Expression/A217DD53&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                                TextExpressionSetToken(&quot;Param/Expression/A217DD53&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/6E18413C&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/5AD081A6&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/D89A1505&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/5AD081A6&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/A217DD53&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                TextExpressionSetToken(&quot;Param/Expression/5AD081A6&quot;, &quot;C&quot;, StringToText(gv_aIQuestLootString[RandomInt(1, gv_aIQuestLootStringAmount)]));
                                UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/5AD081A6&quot;));
                                UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                            }
                            else {
                            }
                        }
                        else {
                            lv_success = false;
                        }
                    }
                    else if ((gv_questIndexActive == 3)) {
                        lv_carrier = UnitInventoryUnit(gv_shipment);
                        if ((libNtve_gf_PlayerIsEnemy(lv_i, UnitGetOwner(lv_carrier), 0) == true)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_carrier), 4.0))), c_orderQueueReplace);
                        }
                        else {
                            if ((libNtve_gf_PlayerIsEnemy(lv_i, UnitGetOwner(lv_carrier), 4) == true)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(lv_carrier), (DistanceBetweenPoints(UnitGetPosition(lv_carrier), UnitGetPosition(gv_merchant)) * 0.5), AngleBetweenPoints(UnitGetPosition(lv_carrier), UnitGetPosition(gv_merchant)))), c_orderQueueReplace);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                        if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                            TextExpressionSetToken(&quot;Param/Expression/D381E109&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                            TextExpressionSetToken(&quot;Param/Expression/D381E109&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/EDCBD2E6&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/D1A794F2&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3BBD9F97&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/D1A794F2&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/D381E109&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                            TextExpressionSetToken(&quot;Param/Expression/D1A794F2&quot;, &quot;C&quot;, StringToText(gv_aIQuestString[RandomInt(1, gv_aIQuestStringAmount)]));
                            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/D1A794F2&quot;));
                            UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                        }
                        else {
                        }
                    }
                    else if ((gv_questIndexActive == 6) &amp;&amp; (gv_gladiatorPhase == 1) &amp;&amp; (gf_GetTeamOfPlayer(UnitGetOwner(gv_challenger[1])) != gf_GetTeamOfPlayer(lv_i)) &amp;&amp; (gf_GetTeamOfPlayer(UnitGetOwner(gv_challenger[2])) != gf_GetTeamOfPlayer(lv_i)) &amp;&amp; (gf_StrongestOnTeam(lp_kobold) == true)) {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(&quot;ChallengeBanner&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold)))), c_orderQueueReplace);
                        if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                            TextExpressionSetToken(&quot;Param/Expression/B5EA9D64&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                            TextExpressionSetToken(&quot;Param/Expression/B5EA9D64&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/FFBF87FF&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/FCA6CC1B&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/E56B2A11&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/FCA6CC1B&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/B5EA9D64&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                            TextExpressionSetToken(&quot;Param/Expression/FCA6CC1B&quot;, &quot;C&quot;, StringToText(gv_aIQuestGladiatorString[RandomInt(1, gv_aIQuestGladiatorStringAmount)]));
                            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/FCA6CC1B&quot;));
                            UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                        }
                        else {
                        }
                    }
                    else if ((gv_questIndexActive == 8)) {
                        lv_temp = 0.0;
                        lv_group = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        UnitGroupLoopBegin(lv_group);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            lv_temp += gf_EvaluateThreat(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        if ((lv_temp &gt; gf_EvaluateThreat(gv_warlord))) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(gv_warlord)), c_orderQueueReplace);
                            if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                                TextExpressionSetToken(&quot;Param/Expression/6C06A308&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                                TextExpressionSetToken(&quot;Param/Expression/6C06A308&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/360A7E81&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/624C13C4&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/D98B36C8&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/624C13C4&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/6C06A308&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                TextExpressionSetToken(&quot;Param/Expression/624C13C4&quot;, &quot;C&quot;, StringToText(gv_aIQuestKillString[RandomInt(1, gv_aIQuestKillStringAmount)]));
                                UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/624C13C4&quot;));
                                UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                            }
                            else {
                            }
                        }
                        else {
                            lv_success = false;
                        }
                    }
                    else if ((gv_questIndexActive == 10)) {
                        lv_group = UnitGroup(&quot;FrostBear&quot;, 15, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        if ((gv_witchSummoned == false) &amp;&amp; (lv_group != UnitGroupEmpty())) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), UnitGroupClosestToPoint(UnitGroup(&quot;FrostBear&quot;, 15, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_kobold))), c_orderQueueReplace);
                        }
                        else {
                            if (gf_UnitExists(gv_frostWitch)) {
                                lv_temp = 0.0;
                                lv_group = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                UnitGroupLoopBegin(lv_group);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    lv_temp += gf_EvaluateThreat(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                if ((lv_temp &gt; gf_EvaluateThreat(gv_frostWitch))) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), gv_frostWitch), c_orderQueueReplace);
                                    if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                                        TextExpressionSetToken(&quot;Param/Expression/4EDF7C9C&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                                        TextExpressionSetToken(&quot;Param/Expression/4EDF7C9C&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/838AD204&quot;));
                                        TextExpressionSetToken(&quot;Param/Expression/B35F1E0A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3E29BE88&quot;));
                                        TextExpressionSetToken(&quot;Param/Expression/B35F1E0A&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/4EDF7C9C&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                        TextExpressionSetToken(&quot;Param/Expression/B35F1E0A&quot;, &quot;C&quot;, StringToText(gv_aIQuestKillString[RandomInt(1, gv_aIQuestKillStringAmount)]));
                                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/B35F1E0A&quot;));
                                        UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                                    }
                                    else {
                                    }
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                    else if ((gv_questIndexActive == 12)) {
                        if ((UnitHasBehavior(lp_kobold, &quot;GoldenHauberk&quot;) == true) &amp;&amp; (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, &quot;GoldenHauberkHeal&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.Link&quot;, lv_i)) == 0.0)) {
                            if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_wizard)) &lt;= StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GoldenHauberkHealSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, lv_i)))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand(&quot;KoboldBackpack&quot;, 3), gf_KoboldArmor(lp_kobold)), c_orderQueueReplace);
                            }
                            else {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_wizard)), c_orderQueueReplace);
                            }
                        }
                        else {
                            if ((UnitHasBehavior(lp_kobold, &quot;GuardianSpirit&quot;) == true)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_wizard)), c_orderQueueReplace);
                            }
                            else {
                                if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;GuardianSpirit&quot;, 0))) {
                                    if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_wizard)) &lt; 32.0)) {
                                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;GuardianSpirit&quot;, 0)), c_orderQueueReplace);
                                    }
                                    else {
                                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_wizard)), c_orderQueueReplace);
                                    }
                                }
                                else {
                                    if ((UnitGetType(gf_KoboldMainHand(lp_kobold)) == &quot;CelestialOrb&quot;)) {
                                        lv_group = UnitGroup(&quot;Palisade&quot;, lv_i, RegionCircle(UnitGetPosition(gv_wizard), 10.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                        lv_b = UnitGroupClosestToPoint(lv_group, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b)) {
                                            if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_wizard)) &lt;= 8.0)) {
                                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                            }
                                            else {
                                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_wizard), RandomFixed(2.0, 6.0), UnitGetPosition(lv_b))), c_orderQueueReplace);
                                            }
                                        }
                                        else {
                                            if (((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) + UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumberParts, c_unitCountAlive)) &gt;= 1)) {
                                                if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_wizard)) &lt;= 4.0) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 15), &quot;TheWoundedWizard&quot;)) {
                                                }
                                                else {
                                                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_wizard)), c_orderQueueReplace);
                                                }
                                            }
                                            else {
                                                lv_success = false;
                                            }
                                        }
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                    }
                    else if ((gv_questIndexActive == 14) &amp;&amp; gf_UnitExists(gv_exile) &amp;&amp; (gf_GetTeamOfPlayer(lv_i) == gv_attackers)) {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_exile)), c_orderQueueReplace);
                        if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                            TextExpressionSetToken(&quot;Param/Expression/44188474&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                            TextExpressionSetToken(&quot;Param/Expression/44188474&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/5E4BB6AD&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/73C05D96&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/593868E8&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/73C05D96&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/44188474&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                            TextExpressionSetToken(&quot;Param/Expression/73C05D96&quot;, &quot;C&quot;, StringToText(gv_aIExileString[RandomInt(1, gv_aIExileStringAmount)]));
                            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/73C05D96&quot;));
                            UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                        }
                        else {
                        }
                    }
                    else if (gf_AIQuestFishing(lp_kobold)) {
                    }
                    else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_skeletalFingers, c_unitCountAlive) &gt;= 3)) {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gf_GetClosestResurrectionShrine(lp_kobold, true))), c_orderQueueReplace);
                    }
                    else if (true) {
                        if ((gv_questIndexActive != 7) &amp;&amp; (gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] != lv_i) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder != lv_i) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_skeletalFingers, c_unitCountAlive) &lt; 3) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_reapersHands, c_unitCountAlive) == 0) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;SkeletalFinger&quot;)) {
                        }
                        else {
                            if ((gv_questIndexActive != 7) &amp;&amp; (gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] != lv_i) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder != lv_i) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_reapersHands, c_unitCountAlive) == 0) &amp;&amp; gf_AITradeBuyWithdraw(lp_kobold, &quot;SkeletalFinger&quot;, 3, false, false, 32.0)) {
                            }
                            else {
                                if ((gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] != lv_i) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder != lv_i) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;AncientArtifactFragment&quot;)) {
                                }
                                else {
                                    if ((gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] != lv_i) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder != lv_i) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;DraughtofDecay&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;DraughtofDecay&quot;)) {
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4D0E2898">
        <ScriptCode>
            bool gf_AIQuestGastronomist (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                int lv_t;
                bool lv_b_CanCook1;
                bool lv_b_CanCook2;
                bool lv_b_CanCook3;
                bool lv_b_CanCookAny;
                unit lv_gastroCampfire;
                bool lv_success;
                unitgroup lv_g;
                point lv_p;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_t = gf_GetTeamOfPlayer(lv_i);
                lv_b_CanCook1 = (!(gv_feastCooked[lv_t][1]) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;SpicedLambFeast&quot;));
                lv_b_CanCook2 = (!(gv_feastCooked[lv_t][2]) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;GrilledWolfEntrecote&quot;));
                lv_b_CanCook3 = (!(gv_feastCooked[lv_t][3]) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;BeerBraisedPheasant&quot;));
                lv_b_CanCookAny = ((lv_b_CanCook1 || lv_b_CanCook2) || lv_b_CanCook3);
                lv_success = true;
                lv_g = UnitGroupEmpty();
                // Implementation
                if ((gv_questIndexActive == 5) &amp;&amp; (lv_b_CanCookAny == true)) {
                    if ((UnitHasBehavior(lp_kobold, &quot;TheGastronomistsTutelage&quot;) == true) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true) &amp;&amp; (gf_UnitIsBusy(lp_kobold) == false)) {
                        if ((lv_b_CanCook1 == true)) {
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingSpicedLambFeast&quot;, 0)), c_orderQueueReplace);
                        }
                        else {
                            if ((lv_b_CanCook2 == true)) {
                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingGrilledWolfEntrecote&quot;, 0)), c_orderQueueReplace);
                            }
                            else {
                                if ((lv_b_CanCook3 == true)) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingBeerBraisedPheasant&quot;, 0)), c_orderQueueReplace);
                                }
                                else {
                                }
                            }
                        }
                    }
                    else {
                        lv_gastroCampfire = UnitGroupClosestToPoint(UnitGroup(&quot;Campfire&quot;, c_playerAny, RegionCircle(UnitGetPosition(gv_feastChef), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_feastChef));
                        if (gf_UnitExists(lv_gastroCampfire) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_gastroCampfire)) &lt;= gv_interactRadius) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                            if ((UnitGetOwner(lv_gastroCampfire) != lv_i)) {
                                UnitSetOwner(lv_gastroCampfire, lv_i, false);
                            }
                            else {
                            }
                            UnitIssueOrder(lv_gastroCampfire, Order(AbilityCommand(&quot;LightCampfire&quot;, 0)), c_orderQueueReplace);
                        }
                        else {
                            lv_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;CampfireLit&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_feastChef), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            if ((UnitGroupCount(lv_g, c_unitCountAlive) == 0) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                                UnitGroupAddUnitGroup(lv_g, UnitGroup(&quot;Campfire&quot;, c_playerAny, RegionCircle(UnitGetPosition(gv_feastChef), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                            }
                            else {
                            }
                            lv_gastroCampfire = UnitGroupClosestToPoint(lv_g, UnitGetPosition(gv_feastChef));
                            if (gf_UnitExists(lv_gastroCampfire)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_gastroCampfire), (DistanceBetweenPoints(UnitGetPosition(lv_gastroCampfire), UnitGetPosition(gv_feastChef)) / 2.0), UnitGetPosition(gv_feastChef))), c_orderQueueReplace);
                            }
                            else {
                                if (gf_HasMaterialsFor(lp_kobold, &quot;CampfireLit&quot;)) {
                                    if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_feastChef)) &lt;= 8.0)) {
                                        lv_p = gf_GetBuildLocation3x3(RegionCircle(UnitGetPosition(gv_feastChef), 6.0));
                                        if ((lv_p != null)) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;KoboldTestBuild&quot;, 1), lv_p), c_orderQueueReplace);
                                        }
                                        else {
                                            lv_success = false;
                                        }
                                    }
                                    else {
                                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_feastChef)), c_orderQueueReplace);
                                    }
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6854C37D">
        <ScriptCode>
            bool gf_AIQuestFishing (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                int lv_a;
                region lv_area;
                point lv_p;
                fixed lv_angleoffset;
                const int lv_searchattempts = 40;
                int lv_failsafe;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_angleoffset = libNtve_gf_RandomAngle();
                lv_failsafe = 50;
                lv_success = true;
                // Implementation
                if ((gv_questIndexActive == 16) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_fishingRods, c_unitCountAlive) &gt; 0)) {
                    lv_area = RegionCircle(gv_expeditionActivePoint[gf_ClosestFishableExpeditionPoint(lp_kobold)], gv_expeditionRadius);
                    if ((lv_area != null)) {
                        if ((libNtve_gf_UnitInRegion(lp_kobold, lv_area) == true)) {
                            TimerStart(gv_aIData[lv_i].lv_fishingTime, 5.0, false, c_timeGame);
                            if (((UnitGetType(gf_KoboldMainHand(lp_kobold)) == &quot;FishingRod&quot;) || (UnitGetType(gf_KoboldMainHand(lp_kobold)) == &quot;EpicFishingRod&quot;))) {
                                lv_p = gf_FishablePointInRegion(lp_kobold, lv_area);
                                if ((lv_p != null) &amp;&amp; gf_FishingStart(lp_kobold, lv_p)) {
                                }
                                else {
                                    UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(RegionGetCenter(lv_area), 1.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                        else {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionGetCenter(lv_area)), c_orderQueueReplace);
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4C5204F8">
        <ScriptCode>
            int gf_ClosestFishableExpeditionPoint (unit lp_kobold) {
                int auto94D9BCBA_ae;
                int auto94D9BCBA_ai;
                // Variable Declarations
                int lv_i;
                int lv_a;
                int lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                // Implementation
                auto94D9BCBA_ae = gv_expeditionAreas;
                auto94D9BCBA_ai = 1;
                lv_a = 1;
                for ( ; ( (auto94D9BCBA_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto94D9BCBA_ae) || (auto94D9BCBA_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto94D9BCBA_ae) ) ; lv_a += auto94D9BCBA_ai ) {
                    if (((lv_value == 0) || (DistanceBetweenPoints(UnitGetPosition(lp_kobold), gv_expeditionActivePoint[lv_a]) &lt; DistanceBetweenPoints(UnitGetPosition(lp_kobold), gv_expeditionActivePoint[lv_value]))) &amp;&amp; (gv_expeditionProgress[gv_playerData[lv_i].lv_team][lv_a] == false)) {
                        lv_value = lv_a;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6543396E">
        <ScriptCode>
            point gf_FishablePointInRegion (unit lp_unit, region lp_reg) {
                int autoBA59C61A_ae;
                int autoBA59C61A_ai;
                int autoF5D56B4F_ae;
                int autoF5D56B4F_ai;
                // Variable Declarations
                fixed lv_angleoffset;
                int lv_a;
                int lv_b;
                point lv_value;
                // Variable Initialization
                lv_angleoffset = libNtve_gf_RandomAngle();
                // Implementation
                autoBA59C61A_ae = 4;
                autoBA59C61A_ai = 1;
                lv_a = 1;
                for ( ; ( (autoBA59C61A_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoBA59C61A_ae) || (autoBA59C61A_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoBA59C61A_ae) ) ; lv_a += autoBA59C61A_ai ) {
                    autoF5D56B4F_ae = 8;
                    autoF5D56B4F_ai = 1;
                    lv_b = 1;
                    for ( ; ( (autoF5D56B4F_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoF5D56B4F_ae) || (autoF5D56B4F_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoF5D56B4F_ae) ) ; lv_b += autoF5D56B4F_ai ) {
                        lv_value = PointWithOffsetPolar(UnitGetPosition(lp_unit), (lv_a * 2.0), (lv_angleoffset + (lv_b * (360.0 / 8.0))));
                        if ((RegionContainsPoint(lp_reg, lv_value) == true) &amp;&amp; (gf_FishRegionAtPoint(lv_value) != 0)) {
                        }
                        else {
                            lv_value = null;
                        }
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="82684B58">
        <ScriptCode>
            bool gf_AICampfire (unit lp_kobold, fixed lp_warmth, unit lp_shrine, bool lp_toCook) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                unit lv_h;
                point lv_p;
                bool lv_hasTorch;
                bool lv_hasLantern;
                bool lv_b_Night;
                bool lv_b_Winter;
                bool lv_needTorch;
                bool lv_hugCampfire;
                bool lv_stayAWhile;
                bool lv_anythingCampfire;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_hasTorch = ((UnitHasBehavior(lp_kobold, &quot;Torch&quot;) || UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;)) || (UnitGroupCount(UnitGroupFilter(&quot;Torch&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0));
                lv_hasLantern = (UnitHasBehavior(lp_kobold, &quot;Lantern&quot;) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) &gt; 0));
                lv_b_Night = (!(gv_b_Day) &amp;&amp; !((lv_hasTorch || lv_hasLantern)));
                lv_b_Winter = (gv_winter &amp;&amp; !(lv_hasTorch));
                lv_needTorch = (lv_b_Night || lv_b_Winter);
                lv_hugCampfire = (gv_playerData[lv_i].lv_warmth &lt;= (IntToFixed(gv_dayNight) * 25.0));
                lv_stayAWhile = ((UnitHasBehavior(lp_kobold, &quot;Heat&quot;) &amp;&amp; (gv_playerData[lv_i].lv_warmth &lt;= 85.0)) &amp;&amp; (gv_winter || (gv_raining || !(gv_b_Day))));
                lv_anythingCampfire = ((lv_needTorch || lp_toCook) || (lv_hugCampfire || lv_stayAWhile));
                lv_success = true;
                // Implementation
                if ((lv_anythingCampfire == true)) {
                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;CampfireLit&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupRandomUnit(lv_a, c_unitCountAlive);
                    if (gf_UnitExists(lv_b) &amp;&amp; (lv_needTorch == true)) {
                        gf_CreateItemForUnit(lp_kobold, &quot;Torch&quot;, 1);
                    }
                    else {
                        lv_a = UnitGroup(&quot;Campfire&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                            if ((UnitGetOwner(lv_b) != lv_i)) {
                                UnitSetOwner(lv_b, lv_i, false);
                            }
                            else {
                            }
                            UnitIssueOrder(lv_b, Order(AbilityCommand(&quot;LightCampfire&quot;, 0)), c_orderQueueReplace);
                        }
                        else {
                            if ((lv_stayAWhile == true)) {
                                gv_unstuckRating[lv_i] = 0;
                                if (gf_AIFood(lp_kobold, true, gv_playerData[lv_i].lv_hunger, true)) {
                                }
                                else {
                                    lv_h = UnitBehaviorEffectUnit(lp_kobold, &quot;Heat&quot;, c_effectUnitCaster, 0);
                                    if (gf_UnitExists(lv_h)) {
                                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Tent&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_h), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Sheltered&quot;) == false) &amp;&amp; ((gv_raining == true) || (gv_winter == true) || (gv_playerData[lv_i].lv_stamina &lt;= 85.0))) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_b), 1.5, UnitGetPosition(lv_h))), c_orderQueueReplace);
                                        }
                                        else {
                                            UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                                        }
                                    }
                                    else {
                                    }
                                }
                            }
                            else {
                                if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; ((UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;CampfireLit&quot;) || ((UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;Campfire&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1))) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 48)) {
                                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Tent&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                    lv_h = UnitGroupClosestToPoint(lv_a, UnitGetPosition(gv_aIData[lv_i].lv_focalNode));
                                    if (gf_UnitExists(lv_h)) {
                                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), (DistanceBetweenPoints(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), UnitGetPosition(lv_h)) / 2.0), UnitGetPosition(lv_h))), c_orderQueueReplace);
                                    }
                                    else {
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                    }
                                }
                                else {
                                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;CampfireLit&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 24.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                    if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 48)) {
                                        gv_aIData[lv_i].lv_focalNode = lv_b;
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                                    }
                                    else {
                                        lv_a = UnitGroup(&quot;Campfire&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), 24.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 48) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                                            gv_aIData[lv_i].lv_focalNode = lv_b;
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                                        }
                                        else {
                                            if (gf_HasMaterialsFor(lp_kobold, &quot;CampfireLit&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 1), &quot;Tent&quot;)) {
                                            }
                                            else {
                                                lv_success = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5D73C58D">
        <ScriptCode>
            bool gf_AIFood (unit lp_kobold, bool lp_stock, fixed lp_hunger, bool lp_whileWarming) {
                // Variable Declarations
                int lv_i;
                int lv_t;
                unitgroup lv_a;
                unit lv_b;
                bool lv_cooking;
                bool lv_success;
                bool lv_busy;
                bool lv_b_HasEnoughCookedFood;
                bool lv_b_WantRoastedLamb;
                bool lv_b_WantWolfSteak;
                bool lv_b_WantLambFeast;
                bool lv_b_WantWolfEntrecote;
                bool lv_b_WantBerryPheasant;
                bool lv_b_WantBeerPhez;
                bool lv_b_WantStagSoup;
                bool lv_b_WantsToCookSomething;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_t = gf_GetTeamOfPlayer(lv_i);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                lv_busy = gf_UnitIsBusy(lp_kobold);
                lv_b_HasEnoughCookedFood = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodCooked, c_unitCountAlive) &gt;= gv_aIData[lv_i].lv_supply.lv_food);
                lv_b_WantRoastedLamb = (((((gv_skillCooking[lv_i] &gt;= 0) &amp;&amp; (gv_skillCooking[lv_i] &lt;= 4)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodCooked, c_unitCountAlive) == 0)) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawLamb, c_unitCountAlive) &gt; 0)) &amp;&amp; !(lv_busy));
                lv_b_WantWolfSteak = (((((gv_skillCooking[lv_i] &gt;= 0) &amp;&amp; (gv_skillCooking[lv_i] &lt;= 4)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodCooked, c_unitCountAlive) == 0)) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawWolf, c_unitCountAlive) &gt; 0)) &amp;&amp; !(lv_busy));
                lv_b_WantLambFeast = (((gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lambFeast, c_unitCountAlive) == 0) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;SpicedLambFeast&quot;))) &amp;&amp; ((gv_questIndexActive != 5) &amp;&amp; !(lv_busy)));
                lv_b_WantWolfEntrecote = (((gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfEntrecote, c_unitCountAlive) == 0) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;GrilledWolfEntrecote&quot;))) &amp;&amp; ((gv_questIndexActive != 5) &amp;&amp; !(lv_busy)));
                lv_b_WantBerryPheasant = (((gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;RoastedPheasantWithBerrySauce&quot;)) &amp;&amp; !(lv_busy));
                lv_b_WantBeerPhez = (((gv_skillCooking[lv_i] &gt;= 10) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;BeerBraisedPheasant&quot;)) &amp;&amp; ((gv_questIndexActive != 5) &amp;&amp; !(lv_busy)));
                lv_b_WantStagSoup = (((gv_skillCooking[lv_i] &gt;= 20) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;StagStew&quot;)) &amp;&amp; !(lv_busy));
                lv_b_WantsToCookSomething = (lv_b_WantBeerPhez || (lv_b_WantLambFeast || (lv_b_WantRoastedLamb || (lv_b_WantWolfEntrecote || (lv_b_WantWolfSteak || (lv_b_WantBerryPheasant || lv_b_WantStagSoup))))));
                // Implementation
                if ((UnitHasBehavior(lp_kobold, &quot;GoldenHauberk&quot;) == true) &amp;&amp; (UnitGetCooldown(lp_kobold, CatalogFieldValueGet(c_gameCatalogAbil, &quot;GoldenHauberkHeal&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.Link&quot;, lv_i)) == 0.0) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 25.0)) {
                    UnitIssueOrder(lp_kobold, OrderTargetingItem(AbilityCommand(&quot;KoboldBackpack&quot;, 3), gf_KoboldArmor(lp_kobold)), c_orderQueueReplace);
                }
                else {
                    if ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 70.0) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;GuardianSpirit&quot;, 0))) {
                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;GuardianSpirit&quot;, 0)), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitHasBehavior(lp_kobold, &quot;KoboldCanEat&quot;) == true) &amp;&amp; ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 70.0) || (gv_playerData[lv_i].lv_hunger &lt;= 60.0)) &amp;&amp; gf_AIFoodSnack(lp_kobold)) {
                        }
                        else {
                            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodCooked, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;KoboldCanEat&quot;) == true) &amp;&amp; ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 60.0) || (gv_playerData[lv_i].lv_hunger &lt;= 50.0))) {
                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;Eatasnack&quot;, 0)), c_orderQueueReplace);
                            }
                            else {
                                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_foodRaw, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;KoboldCanEat&quot;) == true) &amp;&amp; ((UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 20.0) || (gv_playerData[lv_i].lv_hunger &lt;= 0.0))) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;Eatasnack&quot;, 0)), c_orderQueueReplace);
                                }
                                else {
                                    if ((lv_b_HasEnoughCookedFood == false) &amp;&amp; (lv_b_WantsToCookSomething == true)) {
                                        if ((UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true)) {
                                            if ((lv_b_WantStagSoup == true)) {
                                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingStagStew&quot;, 0)), c_orderQueueReplace);
                                            }
                                            else if ((lv_b_WantBerryPheasant == true)) {
                                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingRoastedPheasantWithBlueberrySauce&quot;, 0)), c_orderQueueReplace);
                                            }
                                            else if ((lv_b_WantBeerPhez == true)) {
                                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingBeerBraisedPheasant&quot;, 0)), c_orderQueueReplace);
                                            }
                                            else if ((lv_b_WantLambFeast == true)) {
                                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingSpicedLambFeast&quot;, 0)), c_orderQueueReplace);
                                            }
                                            else if ((lv_b_WantWolfEntrecote == true)) {
                                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingGrilledWolfEntrecote&quot;, 0)), c_orderQueueReplace);
                                            }
                                            else if ((lv_b_WantWolfSteak == true)) {
                                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingWolfSteak&quot;, 0)), c_orderQueueReplace);
                                            }
                                            else if ((lv_b_WantRoastedLamb == true)) {
                                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;CookingRoastedLamb&quot;, 0)), c_orderQueueReplace);
                                            }
                                            else if (true) {
                                                lv_success = false;
                                            }
                                            lv_b = UnitBehaviorEffectUnit(lp_kobold, &quot;Heat&quot;, c_effectUnitCaster, 0);
                                            if (gf_UnitExists(lv_b) &amp;&amp; (StringSub(gv_perks[UnitGetOwner(lv_b)], 40, 40) == &quot;1&quot;) &amp;&amp; (UnitAbilityGetCooldown(lv_b, &quot;RefreshCampfireExpert&quot;, &quot;Abil/RefreshCampfire&quot;) == 0.0)) {
                                                UnitIssueOrder(lv_b, Order(AbilityCommand(&quot;RefreshCampfireExpert&quot;, 0)), c_orderQueueAddToEnd);
                                            }
                                            else {
                                            }
                                        }
                                        else {
                                            if ((lp_whileWarming == false) &amp;&amp; gf_AICampfire(lp_kobold, 0.0, null, true)) {
                                            }
                                            else {
                                                lv_success = false;
                                            }
                                        }
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="73F09CC2">
        <ScriptCode>
            bool gf_AIFoodSnack (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unit lv_thisbeeating;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_success = true;
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, 1);
                }
                else {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfSteak, c_unitCountAlive) &gt; 0)) {
                        lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_wolfSteak, 1);
                    }
                    else {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_roastedLamb, c_unitCountAlive) &gt; 0)) {
                            lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_roastedLamb, 1);
                        }
                        else {
                        }
                    }
                }
                if ((lv_thisbeeating == null)) {
                    lv_success = false;
                }
                else {
                    gf_EatFood(lp_kobold, lv_thisbeeating, true);
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6AE59EAD">
        <ScriptCode>
            bool gf_AIStamina (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                unit lv_h;
                bool lv_success;
                bool lv_b_NoLumberjack;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                lv_b_NoLumberjack = (TimerGetRemaining(gv_aIData[lv_i].lv_lumberjackTimer) == 0.0);
                // Implementation
                if ((UnitHasBehavior(lp_kobold, &quot;Resting&quot;) == true) &amp;&amp; (gv_playerData[lv_i].lv_stamina &lt; 75.0) &amp;&amp; (lv_b_NoLumberjack == true)) {
                    gv_unstuckRating[lv_i] = 0;
                    if ((UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true) &amp;&amp; gf_AIFood(lp_kobold, true, 100.0, false)) {
                    }
                    else {
                        if ((gv_dayNight == 2)) {
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                        }
                        else {
                        }
                    }
                }
                else {
                    if ((gv_playerData[lv_i].lv_stamina &lt; 25.0) &amp;&amp; (lv_b_NoLumberjack == true)) {
                        if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;Tent&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 48)) {
                            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;CampfireLit&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            lv_h = UnitGroupClosestToPoint(lv_a, UnitGetPosition(gv_aIData[lv_i].lv_focalNode));
                            if (gf_UnitExists(lv_h) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == false)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), (DistanceBetweenPoints(UnitGetPosition(gv_aIData[lv_i].lv_focalNode), UnitGetPosition(lv_h)) / 2.0), UnitGetPosition(lv_h))), c_orderQueueReplace);
                            }
                            else {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                            }
                        }
                        else {
                            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Tent&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 24.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 48)) {
                                gv_aIData[lv_i].lv_focalNode = lv_b;
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                if (gf_HasMaterialsFor(lp_kobold, &quot;Tent&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 0), &quot;CampfireLit&quot;)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="9C3A646D">
        <ScriptCode>
            bool gf_AITradeSellStore (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                unit lv_sellingItem;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((UnitGroupCount(gv_aIData[lv_i].lv_tradeItems, c_unitCountAlive) &gt;= gf_GetExcessLimit(lp_kobold))) {
                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b) &amp;&amp; ((UnitHasBehavior(lv_b, &quot;Locked&quot;) == false) || (UnitGetOwner(lv_b) == lv_i))) {
                        lv_sellingItem = UnitGroupRandomUnit(gv_aIData[lv_i].lv_tradeItems, c_unitCountAlive);
                        if ((UnitInventoryUnit(lv_sellingItem) == lp_kobold)) {
                            gv_unstuckRating[lv_i] = 0;
                            gf_SellResource(lv_sellingItem, lv_i, lv_b);
                        }
                        else {
                            UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, lv_sellingItem);
                        }
                        gf_AIBirdScout(lv_i, lv_b);
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_aIData[lv_i].lv_tradeRoamRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 0.0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; ((UnitHasBehavior(lv_b, &quot;Locked&quot;) == false) || (UnitGetOwner(lv_b) == lv_i))) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        }
                        else {
                            if (gf_HasMaterialsFor(lp_kobold, &quot;StorageOutpost&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 6), &quot;CampfireLit&quot;)) {
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5372A2C4">
        <ScriptCode>
            bool gf_AITradeBuyWithdraw (unit lp_kobold, string lp_type, int lp_limit, bool lp_ignoreRichRequirement, bool lp_withdrawToSell, fixed lp_radius) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                unit lv_c;
                bool lv_tradeGood;
                bool lv_affordable;
                bool lv_wantToBuy;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_tradeGood = gf_TypeIsTradeGood(lp_type);
                lv_affordable = ((lp_ignoreRichRequirement || (PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= gv_aIData[lv_i].lv_richLimit)) &amp;&amp; (PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= gf_GetBuyPrice(lp_type, lv_i)));
                lv_wantToBuy = (lv_tradeGood &amp;&amp; (lv_affordable &amp;&amp; !(lp_withdrawToSell)));
                lv_success = true;
                // Implementation
                if ((UnitGroupCount(UnitGroupFilter(lp_type, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &lt; lp_limit)) {
                    if ((lp_withdrawToSell == true)) {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, lv_i, -1, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    }
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b) &amp;&amp; ((UnitHasBehavior(lv_b, &quot;Locked&quot;) == false) || (UnitGetOwner(lv_b) == lv_i)) &amp;&amp; ((lv_wantToBuy == true) || (UnitGroupCount(UnitGroupFilter(lp_type, c_playerAny, UnitInventoryGroup(lv_b), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0))) {
                        lv_a = UnitGroupFilter(lp_type, c_playerAny, UnitInventoryGroup(lv_b), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                        lv_c = UnitGroupUnit(lv_a, 1);
                        if (gf_UnitExists(lv_c) &amp;&amp; ((UnitHasBehavior(lv_b, &quot;Locked&quot;) == false) || (UnitGetOwner(lv_b) == lv_i))) {
                            gv_unstuckRating[lv_i] = 0;
                            UnitSetPosition(lv_c, UnitGetPosition(lp_kobold), false);
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_c), c_orderQueueReplace);
                            gf_Quicktag(lp_kobold, (UnitTypeGetName(UnitGetType(lv_c)) + StringExternal(&quot;Param/Value/95CB5ED6&quot;)), 2.0, 24);
                            if ((lp_withdrawToSell == true)) {
                                UnitGroupAdd(gv_aIData[lv_i].lv_tradeItems, lv_c);
                            }
                            else {
                            }
                        }
                        else {
                            if ((lv_wantToBuy == true) &amp;&amp; gf_BuyResource(lp_kobold, lp_type)) {
                                gf_AIBirdScout(lv_i, lv_b);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                    else {
                        if ((lp_withdrawToSell == true)) {
                            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, lv_i, -1, RegionCircle(UnitGetPosition(lp_kobold), lp_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        }
                        else {
                            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), lp_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        }
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; ((UnitHasBehavior(lv_b, &quot;Locked&quot;) == false) || (UnitGetOwner(lv_b) == lv_i))) {
                            if (((lv_wantToBuy == true) || (UnitGroupCount(UnitGroupFilter(lp_type, c_playerAny, UnitInventoryGroup(lv_b), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                        else {
                            if ((lp_withdrawToSell == false) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;StorageOutpost&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 6), &quot;CampfireLit&quot;)) {
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="4B9E05DD">
        <ScriptCode>
            void gf_AIBirdScout (int lp_player, unit lp_outpost) {
                // Variable Declarations
                unitgroup lv_enemies;
                point lv_target;
                // Variable Initialization
                lv_enemies = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Implementation
                if ((UnitHasBehavior(lp_outpost, &quot;OutpostGotBird&quot;) == true) &amp;&amp; (UnitHasBehavior(gv_playerData[UnitGetOwner(lp_outpost)].lv_kobold, &quot;KoboldBotNormal&quot;) == true)) {
                    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) &gt; 0)) {
                        lv_target = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_enemies, c_unitCountAlive)), 32.0));
                    }
                    else {
                        lv_target = RegionRandomPoint(RegionPlayableMap());
                    }
                    UnitIssueOrder(lp_outpost, OrderTargetingPoint(AbilityCommand(&quot;TameBird&quot;, 0), lv_target), c_orderQueueReplace);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D1EB083C">
        <ScriptCode>
            bool gf_AIBuildStructure (unit lp_kobold, abilcmd lp_order, string lp_nearStructureType) {
                // Variable Declarations
                const fixed lv_radius = 6.0;
                const fixed lv_preferedStructuresRadius = 32.0;
                unitgroup lv_preferedStructures;
                unit lv_b;
                int lv_i;
                point lv_point;
                bool lv_success;
                // Variable Initialization
                lv_preferedStructures = UnitGroupEmpty();
                lv_i = UnitGetOwner(lp_kobold);
                lv_success = true;
                // Implementation
                if ((TimerGetRemaining(gv_aIData[lv_i].lv_buildPlacement) == 0.0)) {
                    if ((lp_nearStructureType != null)) {
                        lv_preferedStructures = UnitGroup(lp_nearStructureType, lv_i, RegionCircle(UnitGetPosition(lp_kobold), lv_preferedStructuresRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_preferedStructures, UnitGetPosition(lp_kobold));
                    }
                    else {
                    }
                    if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt(lv_preferedStructuresRadius)) &amp;&amp; (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_b), lv_radius), UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterArmored) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt; 5)) {
                        lv_point = gf_GetBuildLocation3x3(RegionCircle(UnitGetPosition(lv_b), lv_radius));
                    }
                    else {
                        if ((lp_order == AbilityCommand(&quot;KoboldTestBuild&quot;, 16))) {
                            lv_point = gf_GetBuildLocation4x4(RegionCircle(UnitGetPosition(lp_kobold), lv_radius));
                        }
                        else {
                            if ((lp_order == AbilityCommand(&quot;KoboldTestBuild&quot;, 7)) &amp;&amp; (lp_nearStructureType == null)) {
                                lv_point = gf_GetBuildLocation3x3(RegionCircle(UnitGetPosition(lp_kobold), 2.0));
                            }
                            else {
                                lv_point = gf_GetBuildLocation3x3(RegionCircle(UnitGetPosition(lp_kobold), lv_radius));
                            }
                        }
                    }
                    if ((lv_point != null) &amp;&amp; gf_PathableMaximum(lp_kobold, lv_point, FixedToInt(lv_radius))) {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(lp_order, lv_point), c_orderQueueReplace);
                    }
                    else {
                        if ((TimerGetRemaining(gv_aIData[lv_i].lv_buildPlacement) == 0.0)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_kobold), RandomFixed(-2.0, 2.0), PointFromId(2850))), c_orderQueueReplace);
                        }
                        else {
                        }
                        lv_success = false;
                    }
                }
                else {
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="120229A6">
        <ScriptCode>
            point gf_GetBuildLocation2x2 (region lp_region) {
                // Variable Declarations
                point lv_p;
                int lv_failsafe;
                bool lv_deny;
                // Variable Initialization
                // Implementation
                while ((lv_p == null)) {
                    lv_p = RegionRandomPoint(lp_region);
                    lv_p = Point(Round(PointGetX(lv_p)), Round(PointGetY(lv_p)));
                    lv_failsafe += 1;
                    if ((gf_StructurePathable2x2(lv_p) == true)) {
                    }
                    else {
                        if ((lv_failsafe &lt; 50)) {
                            lv_p = null;
                        }
                        else {
                            lv_p = RegionGetCenter(lp_region);
                            lv_deny = true;
                        }
                    }
                }
                if ((lv_deny == true)) {
                    lv_p = null;
                }
                else {
                }
                return lv_p;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="47FBDEFC">
        <ScriptCode>
            point gf_GetBuildLocation3x3 (region lp_region) {
                // Variable Declarations
                point lv_p;
                int lv_failsafe;
                bool lv_deny;
                // Variable Initialization
                // Implementation
                while ((lv_p == null)) {
                    lv_p = RegionRandomPoint(lp_region);
                    lv_p = Point((Round(PointGetX(lv_p)) + 0.5), (Round(PointGetY(lv_p)) + 0.5));
                    lv_failsafe += 1;
                    if ((gf_StructurePathable3x3(lv_p) == true)) {
                    }
                    else {
                        if ((lv_failsafe &lt; 50)) {
                            lv_p = null;
                        }
                        else {
                            lv_p = RegionGetCenter(lp_region);
                            lv_deny = true;
                        }
                    }
                }
                if ((lv_deny == true)) {
                    lv_p = null;
                }
                else {
                }
                return lv_p;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="28C195D5">
        <ScriptCode>
            point gf_GetBuildLocation4x4 (region lp_region) {
                // Variable Declarations
                point lv_p;
                int lv_failsafe;
                bool lv_deny;
                // Variable Initialization
                // Implementation
                while ((lv_p == null)) {
                    lv_p = RegionRandomPoint(lp_region);
                    lv_p = Point(Round(PointGetX(lv_p)), Round(PointGetY(lv_p)));
                    lv_failsafe += 1;
                    if ((gf_StructurePathable4x4(lv_p) == true)) {
                    }
                    else {
                        if ((lv_failsafe &lt; 50)) {
                            lv_p = null;
                        }
                        else {
                            lv_p = RegionGetCenter(lp_region);
                            lv_deny = true;
                        }
                    }
                }
                if ((lv_deny == true)) {
                    lv_p = null;
                }
                else {
                }
                return lv_p;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FF482177">
        <ScriptCode>
            bool gf_StructurePathable2x2 (point lp_point) {
                int auto55F90FB2_ae;
                int auto55F90FB2_ai;
                int auto7267C3FA_ae;
                int auto7267C3FA_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                region lv_rect;
                bool lv_value;
                // Variable Initialization
                lv_rect = RegionRect((PointGetX(lp_point) - 1.0), (PointGetY(lp_point) - 1.0), (PointGetX(lp_point) + 1.0), (PointGetY(lp_point) + 1.0));
                lv_value = true;
                // Implementation
                if ((UnitGroupCount(UnitGroup(null, c_playerAny, lv_rect, UnitFilter((1 &lt;&lt; c_targetFilterItem), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto55F90FB2_ae = 2;
                    auto55F90FB2_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto55F90FB2_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto55F90FB2_ae) || (auto55F90FB2_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto55F90FB2_ae) ) ; lv_a += auto55F90FB2_ai ) {
                        auto7267C3FA_ae = 2;
                        auto7267C3FA_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto7267C3FA_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto7267C3FA_ae) || (auto7267C3FA_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto7267C3FA_ae) ) ; lv_b += auto7267C3FA_ai ) {
                            lv_p = PointWithOffset(lp_point, (-1.5 + lv_a), (-1.5 + lv_b));
                            if ((PathingType(lv_p) == c_pathingGround)) {
                            }
                            else {
                                lv_value = false;
                            }
                        }
                    }
                }
                else {
                    lv_value = false;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="ECAE5528">
        <ScriptCode>
            bool gf_StructurePathable3x3 (point lp_point) {
                int auto7AC9A611_ae;
                int auto7AC9A611_ai;
                int autoB38528A1_ae;
                int autoB38528A1_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                region lv_rect;
                bool lv_value;
                // Variable Initialization
                lv_rect = RegionRect((PointGetX(lp_point) - 1.5), (PointGetY(lp_point) - 1.5), (PointGetX(lp_point) + 1.5), (PointGetY(lp_point) + 1.5));
                lv_value = true;
                // Implementation
                if ((UnitGroupCount(UnitGroup(null, c_playerAny, lv_rect, UnitFilter((1 &lt;&lt; c_targetFilterItem), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto7AC9A611_ae = 3;
                    auto7AC9A611_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto7AC9A611_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto7AC9A611_ae) || (auto7AC9A611_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto7AC9A611_ae) ) ; lv_a += auto7AC9A611_ai ) {
                        autoB38528A1_ae = 3;
                        autoB38528A1_ai = 1;
                        lv_b = 1;
                        for ( ; ( (autoB38528A1_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoB38528A1_ae) || (autoB38528A1_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoB38528A1_ae) ) ; lv_b += autoB38528A1_ai ) {
                            lv_p = PointWithOffset(lp_point, (-2 + lv_a), (-2 + lv_b));
                            if ((PathingType(lv_p) == c_pathingGround)) {
                            }
                            else {
                                lv_value = false;
                            }
                        }
                    }
                }
                else {
                    lv_value = false;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="49B40529">
        <ScriptCode>
            bool gf_StructurePathable4x4 (point lp_point) {
                int auto44067D85_ae;
                int auto44067D85_ai;
                int auto496B37DA_ae;
                int auto496B37DA_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                region lv_rect;
                bool lv_value;
                // Variable Initialization
                lv_rect = RegionRect((PointGetX(lp_point) - 2.0), (PointGetY(lp_point) - 2.0), (PointGetX(lp_point) + 2.0), (PointGetY(lp_point) + 2.0));
                lv_value = true;
                // Implementation
                if ((UnitGroupCount(UnitGroup(null, c_playerAny, lv_rect, UnitFilter((1 &lt;&lt; c_targetFilterItem), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto44067D85_ae = 4;
                    auto44067D85_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto44067D85_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto44067D85_ae) || (auto44067D85_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto44067D85_ae) ) ; lv_a += auto44067D85_ai ) {
                        auto496B37DA_ae = 4;
                        auto496B37DA_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto496B37DA_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto496B37DA_ae) || (auto496B37DA_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto496B37DA_ae) ) ; lv_b += auto496B37DA_ai ) {
                            lv_p = PointWithOffset(lp_point, (-2.5 + lv_a), (-2.5 + lv_b));
                            if ((PathingType(lv_p) == c_pathingGround)) {
                            }
                            else {
                                lv_value = false;
                            }
                        }
                    }
                }
                else {
                    lv_value = false;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="546DCC13">
        <ScriptCode>
            string gf_WantedItemType (unit lp_kobold, string lp_craftingStation) {
                // Variable Declarations
                int lv_i;
                unit lv_kobold;
                string lv_needsItemType;
                int lv_mainHandLevel;
                int lv_offhandLevel;
                int lv_armorLevel;
                int lv_owner;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_kobold = lp_kobold;
                lv_owner = UnitGetOwner(lv_kobold);
                // Implementation
                if ((gv_questIndexActive != 2) &amp;&amp; (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) &amp;&amp; (gf_IsGladiator(lp_kobold) == false)) {
                    lv_mainHandLevel = gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(lp_kobold)), lv_i);
                    lv_offhandLevel = gf_GetItemLevel(UnitGetType(gf_KoboldOffhand(lp_kobold)), lv_i);
                    lv_armorLevel = gf_GetItemLevel(UnitGetType(gf_KoboldArmor(lp_kobold)), lv_i);
                    if ((gv_questIndexActive == 11) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;IronShovel&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;IronShovel&quot;)) {
                        lv_needsItemType = &quot;IronShovel&quot;;
                    }
                    else if ((gv_skillArtisanship[lv_i] &gt;= 25) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (gf_GetItemLevel(&quot;LiquidatorSpellblade&quot;, lv_i) &gt; lv_mainHandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;LiquidatorSpellblade&quot;)) {
                        lv_needsItemType = &quot;LiquidatorSpellblade&quot;;
                    }
                    else if ((gv_skillArtisanship[lv_i] &gt;= 20) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;ViciousJavelin&quot;) == false) &amp;&amp; (gf_GetItemLevel(&quot;RepeatingCrossbow&quot;, lv_i) &gt; lv_mainHandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;RepeatingCrossbow&quot;)) {
                        lv_needsItemType = &quot;RepeatingCrossbow&quot;;
                    }
                    else if ((gv_skillArtisanship[lv_i] &gt;= 20) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == &quot;1&quot;) &amp;&amp; (gf_GetItemLevel(&quot;GoldenHauberk&quot;, lv_i) &gt; lv_armorLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;GoldenHauberk&quot;)) {
                        lv_needsItemType = &quot;GoldenHauberk&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 15) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 19)) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;ViciousJavelin&quot;) == false) &amp;&amp; (gf_GetItemLevel(&quot;ElderWand&quot;, lv_i) &gt; lv_mainHandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;ElderWand&quot;)) {
                        lv_needsItemType = &quot;ElderWand&quot;;
                    }
                    else if ((gv_skillArtisanship[lv_i] &gt;= 15) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == &quot;0&quot;) &amp;&amp; (gf_GetItemLevel(&quot;VengefulMurlocSkull&quot;, lv_i) &gt; lv_offhandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;VengefulMurlocSkull&quot;)) {
                        lv_needsItemType = &quot;VengefulMurlocSkull&quot;;
                    }
                    else if ((gv_skillArtisanship[lv_i] &gt;= 15) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == &quot;1&quot;) &amp;&amp; (gf_GetItemLevel(&quot;HeavyTowerShield&quot;, lv_i) &gt; lv_offhandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;HeavyTowerShield&quot;)) {
                        lv_needsItemType = &quot;HeavyTowerShield&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 15) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 19)) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == &quot;1&quot;) &amp;&amp; (gf_GetItemLevel(&quot;HeavyIronBreastplate&quot;, lv_i) &gt; lv_armorLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;HeavyIronBreastplate&quot;)) {
                        lv_needsItemType = &quot;HeavyIronBreastplate&quot;;
                    }
                    else if ((gv_skillArtisanship[lv_i] &gt;= 15) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 4, 4) == &quot;0&quot;) &amp;&amp; (gf_GetItemLevel(&quot;BearShamansShroud&quot;, lv_i) &gt; lv_armorLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;BearShamansShroud&quot;)) {
                        lv_needsItemType = &quot;BearShamansShroud&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 10) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 14)) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (gf_RangedWeapon(lp_kobold) == false) &amp;&amp; (gf_GetItemLevel(&quot;ViciousJavelin&quot;, lv_i) &gt; lv_offhandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;ViciousJavelin&quot;)) {
                        lv_needsItemType = &quot;ViciousJavelin&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 10) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 14)) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (gf_GetItemLevel(&quot;IronStuddedVest&quot;, lv_i) &gt; lv_armorLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;IronStuddedVest&quot;)) {
                        lv_needsItemType = &quot;IronStuddedVest&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 10) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 14)) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (gf_GetItemLevel(&quot;BerserkersBattleAxe&quot;, lv_i) &gt; lv_mainHandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;BerserkersBattleAxe&quot;)) {
                        lv_needsItemType = &quot;BerserkersBattleAxe&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 9)) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;ViciousJavelin&quot;) == false) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 5, 5) == &quot;0&quot;) &amp;&amp; (gf_GetItemLevel(&quot;CelestialOrb&quot;, lv_i) &gt; lv_mainHandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;CelestialOrb&quot;)) {
                        lv_needsItemType = &quot;CelestialOrb&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 9)) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;ViciousJavelin&quot;) == false) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 5, 5) == &quot;1&quot;) &amp;&amp; (gf_GetItemLevel(&quot;RoughBlunderbuss&quot;, lv_i) &gt; lv_mainHandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;RoughBlunderbuss&quot;)) {
                        lv_needsItemType = &quot;RoughBlunderbuss&quot;;
                    }
                    else if (((((gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 14)) &amp;&amp; (gf_RangedWeapon(lp_kobold) == true)) || (((gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 9)) &amp;&amp; (gf_RangedWeapon(lp_kobold) == false))) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 6, 6) == &quot;1&quot;) &amp;&amp; (gf_GetItemLevel(&quot;MysticsTribalShield&quot;, lv_i) &gt; lv_offhandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;MysticsTribalShield&quot;)) {
                        lv_needsItemType = &quot;MysticsTribalShield&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 14)) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 3, 3) == &quot;0&quot;) &amp;&amp; (gf_GetItemLevel(&quot;LeatherCoat&quot;, lv_i) &gt; lv_armorLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;LeatherCoat&quot;) &amp;&amp; (!(((UnitHasBehavior(lv_kobold, &quot;WarmWoolTunic&quot;) == true) &amp;&amp; (gv_skillArtisanship[lv_i] &gt;= 10)))) &amp;&amp; (true)) {
                        lv_needsItemType = &quot;LeatherCoat&quot;;
                    }
                    else if (((gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 14)) &amp;&amp; (lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 3, 3) == &quot;1&quot;) &amp;&amp; (gf_GetItemLevel(&quot;HuntsmansJacket&quot;, lv_i) &gt; lv_armorLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;HuntsmansJacket&quot;) &amp;&amp; (!(((UnitHasBehavior(lv_kobold, &quot;WarmWoolTunic&quot;) == true) &amp;&amp; (gv_skillArtisanship[lv_i] &gt;= 10))))) {
                        lv_needsItemType = &quot;HuntsmansJacket&quot;;
                    }
                    else if (((((gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 14)) &amp;&amp; (gf_RangedWeapon(lp_kobold) == true)) || (((gv_skillArtisanship[lv_i] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lv_i] &lt;= 9)) &amp;&amp; (gf_RangedWeapon(lp_kobold) == false))) &amp;&amp; (lp_craftingStation == &quot;Smithy&quot;) &amp;&amp; (StringSub(gv_aIData[lv_i].lv_customization, 6, 6) == &quot;0&quot;) &amp;&amp; (gf_GetItemLevel(&quot;IronBandedBuckler&quot;, lv_i) &gt; lv_offhandLevel) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;IronBandedBuckler&quot;)) {
                        lv_needsItemType = &quot;IronBandedBuckler&quot;;
                    }
                    else if ((lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;Lantern&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_lanterns)) {
                        lv_needsItemType = &quot;Lantern&quot;;
                    }
                    else if ((lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; ((gf_GetItemLevel(&quot;SturdyWoodenStick&quot;, lv_i) &gt; lv_mainHandLevel) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sturdyWoodenSticks, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_sturdyWoodenSticks)) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;SturdyWoodenStick&quot;)) {
                        lv_needsItemType = &quot;SturdyWoodenStick&quot;;
                    }
                    else if ((lp_craftingStation == &quot;Workbench&quot;) &amp;&amp; ((gf_GetItemLevel(&quot;WarmWoolTunic&quot;, lv_i) &gt; lv_armorLevel) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_warmWoolTunics, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_warmWoolTunics)) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;WarmWoolTunic&quot;)) {
                        lv_needsItemType = &quot;WarmWoolTunic&quot;;
                    }
                }
                else {
                }
                return lv_needsItemType;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EB4E0984">
        <ScriptCode>
            bool gf_HasMaterialsFor (unit lp_builder, string lp_unitType) {
                string auto3E61AAC5_val;
                // Variable Declarations
                int lv_i;
                bool lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_builder);
                // Implementation
                if ((UnitTypeTestAttribute(lp_unitType, c_unitAttributeStructure) == true)) {
                    auto3E61AAC5_val = lp_unitType;
                    if (auto3E61AAC5_val == &quot;Tent&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) + UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive)) &gt;= 1)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;CampfireLit&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;Workbench&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 1)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;Smithy&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 1)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;Farm&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;Tavern&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 2)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;StorageOutpost&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 3) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) + UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive)) &gt;= 2)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;HuntersLodge&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 3)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;AutomatedDefenseTurret&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;LorenorStatue&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 9) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 9)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else if (auto3E61AAC5_val == &quot;Fortress&quot;) {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 10) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 6)) {
                            lv_value = true;
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                else {
                    if ((lp_unitType == &quot;LiquidatorSpellblade&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;Nightwisp&quot;, lv_i, libNtve_gf_UnitsInUnitGroupWithCustomValue(gv_pets[lv_i], 0, 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;RepeatingCrossbow&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;GoldenHauberk&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt;= 3)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;ElderWand&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;VengefulMurlocSkull&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;CelestialOrb&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;RoughBlunderbuss&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;LeatherCoat&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;BerserkersBattleAxe&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;SturdyWoodenStick&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 2)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;WarmWoolTunic&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &gt;= 2)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;IronBandedBuckler&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;IronStuddedVest&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_warmWoolTunics, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;HeavyTowerShield&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;HeavyIronBreastplate&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt;= 2)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;BearShamansShroud&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;HuntsmansJacket&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;MysticsTribalShield&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;ObedienceRod&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;IronShovel&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;ViciousJavelin&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sturdyWoodenSticks, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;Lantern&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;FishingRod&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;StagStew&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawStag, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;RoastedPheasantWithBerrySauce&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;SpicedLambFeast&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawLamb, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;GrilledWolfEntrecote&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawWolf, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;BeerBraisedPheasant&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_beer, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                    else if ((lp_unitType == &quot;Kobold&quot;) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) &gt;= 1)) {
                        lv_value = true;
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5D0942AA">
        <ScriptCode>
            bool gf_AIWatchTower (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                int lv_t;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_t = gv_playerData[lv_i].lv_team;
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((gv_gameMode == 2)) {
                    if ((gf_UnitExists(gv_teamData[lv_t].lv_watchTower) == false)) {
                        if ((gv_teamData[lv_t].lv_aIWatchTowerBuilder == 0) &amp;&amp; ((TimerGetElapsed(gv_watchTowerTimer) &gt; 0.0) || (GameGetMissionTime() &gt; 300.0))) {
                            gv_teamData[lv_t].lv_aIWatchTowerBuilder = lv_i;
                            TextExpressionSetToken(&quot;Param/Expression/A458AC05&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                            TextExpressionSetToken(&quot;Param/Expression/A458AC05&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/2F1DF187&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/E33BF228&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/B403E9C0&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/E33BF228&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/A458AC05&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                            TextExpressionSetToken(&quot;Param/Expression/E33BF228&quot;, &quot;C&quot;, StringToText(gv_aIWatchTowerBuilder[RandomInt(1, gv_aIWatchTowerBuilderAmount)]));
                            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/E33BF228&quot;));
                        }
                        else {
                            lv_a = UnitGroup(&quot;Fortress&quot;, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) &amp;&amp; (libNtve_gf_UnitIsUnderConstruction(lv_b) == true) &amp;&amp; (lv_i == UnitGetOwner(lv_b))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                if ((gv_teamData[lv_t].lv_aIWatchTowerBuilder == lv_i) &amp;&amp; (gf_IsGladiator(lp_kobold) == false) &amp;&amp; ((gv_dayNight == 1) || (UnitHasBehavior(lp_kobold, &quot;Torch&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Lantern&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true)) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;Fortress&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 16), null)) {
                                }
                                else {
                                    if ((lv_i != gv_teamData[lv_t].lv_aIWatchTowerBuilder) &amp;&amp; (UnitHasBehavior(gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_kobold, &quot;Constructing&quot;) == false)) {
                                        if ((UnitGroupCount(gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_resources.lv_lumber, c_unitCountAlive) &lt; 4) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt; 1) &amp;&amp; gf_AIBringItemToUnit(lp_kobold, UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lumber, 1), gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_kobold)) {
                                        }
                                        else {
                                            if ((UnitGroupCount(gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_resources.lv_stone, c_unitCountAlive) &lt; 12) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt; 1) &amp;&amp; gf_AIBringItemToUnit(lp_kobold, UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_stone, 1), gv_playerData[gv_teamData[lv_t].lv_aIWatchTowerBuilder].lv_kobold)) {
                                            }
                                            else {
                                                lv_success = false;
                                            }
                                        }
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if ((UnitGetCustomValue(gv_teamData[lv_t].lv_watchTower, 1) &lt;= 10.0) &amp;&amp; (libNtve_gf_UnitIsUnderConstruction(gv_teamData[lv_t].lv_watchTower) == false) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1) || (UnitGroupCount(UnitGroupFilter(&quot;IronOre&quot;, c_playerAny, UnitInventoryGroup(gv_teamData[lv_t].lv_watchTower), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) &gt;= 1))) {
                            if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)) &lt;= gv_interactRadius)) {
                                gf_PlayerUseUnitAbility(lv_i, gv_teamData[lv_t].lv_watchTower, AbilityCommand(&quot;WatchTowerRefillAmmunition&quot;, 0));
                            }
                            else {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_teamData[lv_t].lv_watchTower)), c_orderQueueReplace);
                            }
                        }
                        else {
                            lv_success = false;
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="98844166">
        <ScriptCode>
            bool gf_AISmithy (unit lp_kobold, string lp_wantedItem) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((lp_wantedItem != null) &amp;&amp; (gf_UnitIsBusy(lp_kobold) == false) &amp;&amp; gf_HasMaterialsFor(lp_kobold, lp_wantedItem) &amp;&amp; ((gv_dayNight == 1) || (UnitHasBehavior(lp_kobold, &quot;Torch&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Lantern&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true))) {
                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Smithy&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b)) {
                        gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand(((&quot;Forge&quot; + (lp_wantedItem))), 0));
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Smithy&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        }
                        else {
                            if (gf_HasMaterialsFor(lp_kobold, &quot;Smithy&quot;) &amp;&amp; (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i)) {
                                if (gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 4), &quot;CampfireLit&quot;)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EB536D52">
        <ScriptCode>
            bool gf_AIWorkbench (unit lp_kobold, string lp_wantedItem) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((lp_wantedItem != null) &amp;&amp; (gf_UnitIsBusy(lp_kobold) == false) &amp;&amp; gf_HasMaterialsFor(lp_kobold, lp_wantedItem) &amp;&amp; ((gv_dayNight == 1) || (UnitHasBehavior(lp_kobold, &quot;Torch&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Lantern&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true))) {
                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Workbench&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b)) {
                        gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand(((&quot;Craft&quot; + (lp_wantedItem))), 0));
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Workbench&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 96)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        }
                        else {
                            if (gf_HasMaterialsFor(lp_kobold, &quot;Workbench&quot;) &amp;&amp; (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i)) {
                                if (gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 3), &quot;CampfireLit&quot;)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FEB776D7">
        <ScriptCode>
            bool gf_AISheep (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                bool lv_b_WantFood;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                lv_b_WantFood = gf_WantRawLamb(lp_kobold);
                // Implementation
                if (((lv_b_WantFood == true) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_wool))) {
                    if ((lv_b_WantFood == true) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;RawLamb&quot;)) {
                    }
                    else {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_wool) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Wool&quot;)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        }
                        else {
                            if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Wool&quot;, gv_aIData[lv_i].lv_supply.lv_wool, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                            }
                            else {
                                lv_a = UnitGroup(&quot;Sheep&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)))) {
                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                }
                                else {
                                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Farm&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                    if ((UnitGroupCount(lv_a, c_unitCountAlive) == 0) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;Farm&quot;) &amp;&amp; (gv_dayNight == 1) &amp;&amp; (GameGetMissionTime() &gt; 60.0) &amp;&amp; (AbsF((gv_dayDuration - libNtve_gf_DialogItemValue(gv_dayTimerProgress, lv_i))) &gt; 20.0)) {
                                        if (gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 2), &quot;CampfireLit&quot;)) {
                                        }
                                        else {
                                            lv_success = false;
                                        }
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="154AA6F8">
        <ScriptCode>
            bool gf_AIPhez (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_b_WantFood;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_b_WantFood = gf_WantRawBird(lp_kobold);
                lv_success = true;
                // Implementation
                if ((lv_b_WantFood == true)) {
                    if (gf_FindPickupItem(lp_kobold, &quot;RawPheasant&quot;)) {
                    }
                    else {
                        if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;Pheasant&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 128)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                        }
                        else {
                            if ((gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][3] == false) &amp;&amp; (gv_questIndexActive == 5) &amp;&amp; (gv_skillCooking[lv_i] &gt;= 10)) {
                                lv_a = UnitGroup(&quot;Pheasant&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            }
                            else {
                                lv_a = UnitGroup(&quot;Pheasant&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            }
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 128)) {
                                gv_aIData[lv_i].lv_focalNode = lv_b;
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DA0FCEB3">
        <ScriptCode>
            bool gf_AITrees (unit lp_kobold, int lp_priority) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                bool lv_b_WantLumber;
                bool lv_b_WantInfusedLumber;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                lv_b_WantLumber = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_lumber);
                lv_b_WantInfusedLumber = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_infusedLumber);
                // Implementation
                if ((GameGetMissionTime() &gt; 30.0) &amp;&amp; (UnitAbilityGetCooldown(lp_kobold, &quot;PlantTree&quot;, &quot;Abil/PlantTree&quot;) == 0.0) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;PlantTree&quot;, 0), null)) {
                }
                else {
                    if ((gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) &lt; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) + 1)) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;InfusedLumber&quot;)) {
                    }
                    else {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_lumber) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Lumber&quot;)) {
                        }
                        else {
                            if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Lumber&quot;, gv_aIData[lv_i].lv_supply.lv_lumber, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                            }
                            else {
                                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;InfusedLumber&quot;, gv_aIData[lv_i].lv_supply.lv_infusedLumber, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                }
                                else {
                                    if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (((UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;MapleTree&quot;) &amp;&amp; (lv_b_WantLumber == true)) || ((UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;ElderTree&quot;) &amp;&amp; ((lv_b_WantLumber == true) || (lv_b_WantInfusedLumber == true)))) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 64)) {
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                        if ((gv_skillForestry[lv_i] &gt;= 5)) {
                                            TimerStart(gv_aIData[lv_i].lv_lumberjackTimer, 2.0, false, c_timeGame);
                                        }
                                        else {
                                        }
                                    }
                                    else {
                                        lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup(&quot;MapleTree&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 1.0);
                                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                        if ((lp_priority == 1) &amp;&amp; gf_UnitExists(lv_b) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) == 0) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                            gv_aIData[lv_i].lv_focalNode = lv_b;
                                        }
                                        else {
                                            lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup(&quot;ElderTree&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 1.0);
                                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                            if ((lp_priority == 2) &amp;&amp; gf_UnitExists(lv_b) &amp;&amp; ((lv_b_WantLumber == true) || (lv_b_WantInfusedLumber == true)) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                                gv_aIData[lv_i].lv_focalNode = lv_b;
                                            }
                                            else {
                                                lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup(&quot;MapleTree&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 1.0);
                                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                                if ((lp_priority == 2) &amp;&amp; gf_UnitExists(lv_b) &amp;&amp; (lv_b_WantLumber == true) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                                    gv_aIData[lv_i].lv_focalNode = lv_b;
                                                }
                                                else {
                                                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;MapleTree&quot;, &quot;&quot;, &quot;&quot;, c_playerAny, -1, RegionCircle(UnitGetPosition(lp_kobold), StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Range[&quot; + IntToString(0) + &quot;]&quot;, lv_i))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                                    UnitGroupRemoveUnitGroup(lv_a, libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 1.0));
                                                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                                    if (gf_UnitExists(lv_b) &amp;&amp; (lv_b_WantLumber == true) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) &lt;= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Range[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (libNtve_gf_UnitIsVisibleToPlayer(lv_b, lv_i) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergyPercent, c_unitPropCurrent) &gt;= 90.0) &amp;&amp; (UnitGetPropertyFixed(lv_b, c_unitPropLifePercent, c_unitPropCurrent) &lt; 100.0) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;NaturesGrace&quot;, 0))) {
                                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;NaturesGrace&quot;, 0), lv_b), c_orderQueueReplace);
                                                    }
                                                    else {
                                                        lv_success = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C0D3CCC0">
        <ScriptCode>
            bool gf_AIStone (unit lp_kobold, int lp_priority) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((gv_playerData[lv_i].lv_stamina &gt;= 10.0) &amp;&amp; (((lp_priority == 1) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) == 0)) || ((lp_priority == 2) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_stone) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_ironOre) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_shadowstone))))) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_stone) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Stone&quot;)) {
                    }
                    else {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_ironOre) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;IronOre&quot;)) {
                        }
                        else {
                            if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_shadowstone) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Shadowstone&quot;)) {
                            }
                            else {
                                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Stone&quot;, gv_aIData[lv_i].lv_supply.lv_stone, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                }
                                else {
                                    if (gf_AITradeBuyWithdraw(lp_kobold, &quot;IronOre&quot;, gv_aIData[lv_i].lv_supply.lv_ironOre, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                    }
                                    else {
                                        if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Shadowstone&quot;, gv_aIData[lv_i].lv_supply.lv_shadowstone, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                        }
                                        else {
                                            if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;StoneDeposit&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 64)) {
                                                if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) &lt;= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;MineralTap&quot;, &quot;Range[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitHasBehavior(gv_aIData[lv_i].lv_focalNode, &quot;MineralTap&quot;) == false) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;MineralTap&quot;, 0))) {
                                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;MineralTap&quot;, 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueAddToEnd);
                                                }
                                                else {
                                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                                }
                                                UnitBehaviorAdd(lp_kobold, &quot;BriefPassivity&quot;, lp_kobold, 1);
                                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                                            }
                                            else {
                                                lv_a = UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                                if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                                    gv_aIData[lv_i].lv_focalNode = lv_b;
                                                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                                                }
                                                else {
                                                    lv_success = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="02E57D53">
        <ScriptCode>
            bool gf_AIGold (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;RadiantGem&quot;, gv_aIData[lv_i].lv_supply.lv_radiantGems, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    if ((gv_playerData[lv_i].lv_stamina &gt;= 25.0) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_radiantGems)) {
                        if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;GoldDeposit&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 64)) {
                            if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) &lt;= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;MineralTap&quot;, &quot;Range[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitHasBehavior(gv_aIData[lv_i].lv_focalNode, &quot;MineralTap&quot;) == false) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;MineralTap&quot;, 0))) {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;MineralTap&quot;, 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueAddToEnd);
                            }
                            else {
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                            }
                            UnitBehaviorAdd(lp_kobold, &quot;BriefPassivity&quot;, lp_kobold, 1);
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                        }
                        else {
                            lv_a = UnitGroup(&quot;GoldDeposit&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                gv_aIData[lv_i].lv_focalNode = lv_b;
                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                    else {
                        lv_success = false;
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="69BF9B09">
        <ScriptCode>
            bool gf_AIWolves (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_flee;
                bool lv_b_StrongerThanWolves;
                bool lv_b_WantBearPelt;
                bool lv_b_WantFood;
                bool lv_b_WantLeather;
                bool lv_b_WantFoodOrLeather;
                bool lv_b_WantTame;
                bool lv_b_LumberMoreImportant;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_b_StrongerThanWolves = gf_StrongerThanDirewolves(lp_kobold);
                lv_b_WantBearPelt = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_bearPelt);
                lv_b_WantFood = gf_WantRawWolf(lp_kobold);
                lv_b_WantLeather = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &lt; (gv_aIData[lv_i].lv_supply.lv_leather + gv_aIData[lv_i].lv_supply.lv_leatherBonus));
                lv_b_WantFoodOrLeather = (lv_b_WantFood || lv_b_WantLeather);
                lv_b_WantTame = ((UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) &lt; StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i))) &amp;&amp; (((UnitGroupCount(UnitGroupFilter(&quot;Dog&quot;, c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroupFilter(&quot;Lyote&quot;, c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) == 0) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_obedRods, c_unitCountAlive) &gt; 0)));
                lv_b_LumberMoreImportant = ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) == 0) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;Frostbite&quot;) || (gv_raining || (gv_winter || !(gv_b_Day)))));
                lv_success = true;
                // Implementation
                if ((lv_b_StrongerThanWolves == false) &amp;&amp; (gv_dayNight == 2)) {
                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;KoboldTestBuild&quot;, 30)), c_orderQueueReplace);
                    if (gf_AIQuickwarmth(lp_kobold)) {
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64) &amp;&amp; ((UnitGetType(gf_KoboldOffhand(lp_kobold)) == &quot;Torch&quot;) || (UnitGetType(gf_KoboldOffhand(lp_kobold)) == &quot;Lantern&quot;) || (UnitGetType(gf_KoboldOffhand(lp_kobold)) == &quot;FelFireTorch&quot;))) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                            if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;ShadowCloak&quot;, 0))) {
                                UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;ShadowCloak&quot;, 0)), c_orderQueueReplace);
                                TimerStart(gv_aIData[lv_i].lv_shadowCloakMinimum, 5.0, false, c_timeGame);
                            }
                            else {
                            }
                        }
                        else {
                            lv_a = UnitGroup(&quot;Lyote&quot;, 15, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b)) {
                                if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;GuardianSpirit&quot;, 0))) {
                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;GuardianSpirit&quot;, 0)), c_orderQueueReplace);
                                }
                                else {
                                    if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;SiphonLife&quot;, 0))) {
                                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;SiphonLife&quot;, 0)), c_orderQueueReplace);
                                    }
                                    else {
                                        if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;FrostArmor&quot;, 0))) {
                                            UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;FrostArmor&quot;, 0)), c_orderQueueReplace);
                                        }
                                        else {
                                            if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;Affliction&quot;, 0))) {
                                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;Affliction&quot;, 0), lv_b), c_orderQueueReplace);
                                            }
                                            else {
                                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    if ((lv_b_WantFood == true) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;RawWolfMeat&quot;)) {
                    }
                    else {
                        lv_b = UnitGroupRandomUnit(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive);
                        if (gf_UnitExists(lv_b) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_bearPelt)) {
                            gf_ItemBearPeltSplit(lp_kobold, lv_b, true);
                        }
                        else {
                            if (((lv_b_WantBearPelt == true) || (lv_b_WantLeather == true)) &amp;&amp; (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_bearPelts, c_unitCountAlive) &lt; (gv_aIData[lv_i].lv_supply.lv_bearPelt + 1)) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;BearPelt&quot;)) {
                            }
                            else {
                                if ((lv_b_WantLeather == true) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Leather&quot;)) {
                                }
                                else {
                                    if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Leather&quot;, (gv_aIData[lv_i].lv_supply.lv_leather + gv_aIData[lv_i].lv_supply.lv_leatherBonus), false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                    }
                                    else {
                                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Lyote&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0))) &amp;&amp; ((lv_b_WantFoodOrLeather == true) || (lv_b_WantTame == true)) &amp;&amp; ((UnitHasBehavior(lp_kobold, &quot;Running&quot;) == true) || ((UnitHasBehavior(lp_kobold, &quot;Torch&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;LanternLight&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;) == false)))) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                            if ((lv_b_WantTame == true)) {
                                                TimerStart(gv_aIData[lv_i].lv_tamingTime, 4.0, false, c_timeGame);
                                            }
                                            else {
                                                if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;SiphonLife&quot;, 0))) {
                                                    UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;SiphonLife&quot;, 0)), c_orderQueueReplace);
                                                }
                                                else {
                                                    if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;Affliction&quot;, 0))) {
                                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;Affliction&quot;, 0), lv_b), c_orderQueueReplace);
                                                    }
                                                    else {
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            lv_a = UnitGroup(&quot;Dog&quot;, 0, RegionCircle(UnitGetPosition(lp_kobold), (gv_playerData[lv_i].lv_stats.lv_sightRadius * 2.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                            if (gf_UnitExists(lv_b) &amp;&amp; (lv_b_LumberMoreImportant == false) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 4.0))) &amp;&amp; ((lv_b_WantFoodOrLeather == true) || (lv_b_WantTame == true)) &amp;&amp; ((UnitHasBehavior(lp_kobold, &quot;Running&quot;) == true) || ((UnitHasBehavior(lp_kobold, &quot;Torch&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;LanternLight&quot;) == false) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;) == false)))) {
                                                UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                                if ((lv_b_WantTame == true)) {
                                                    TimerStart(gv_aIData[lv_i].lv_tamingTime, 4.0, false, c_timeGame);
                                                }
                                                else {
                                                    if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;SiphonLife&quot;, 0))) {
                                                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;SiphonLife&quot;, 0)), c_orderQueueReplace);
                                                    }
                                                    else {
                                                    }
                                                }
                                            }
                                            else {
                                                lv_success = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="C03569C7">
        <ScriptCode>
            bool gf_AIResurrect (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unit lv_b;
                bool lv_b_ImFineLetsRess;
                int lv_reviveTarget;
                bool lv_succeed;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_b_ImFineLetsRess = (!((UnitHasBehavior(lp_kobold, &quot;Starving&quot;) || UnitHasBehavior(lp_kobold, &quot;Frostbite&quot;))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLifePercent, c_unitPropCurrent) &gt;= 30.0));
                lv_reviveTarget = gf_GetRandomDeadPlayerOnTeam(gv_playerData[lv_i].lv_team);
                lv_succeed = true;
                // Implementation
                if ((lv_b_ImFineLetsRess == true) &amp;&amp; ((lv_reviveTarget &gt;= 1) &amp;&amp; (lv_reviveTarget &lt;= gv_players)) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;Kobold&quot;)) {
                    if (gf_AIQuickwarmth(lp_kobold)) {
                    }
                    else {
                        if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; ((UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;ResurrectionShrine&quot;) || (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;ResurrectionShrineSouth&quot;))) {
                            if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) &lt;= gv_interactRadius)) {
                                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_radiantGem, 1));
                                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_shadowstone, 1));
                                gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_sunflowers, 1));
                                UnitCreateEffectUnit(lp_kobold, &quot;ResurrectingApply&quot;, lp_kobold);
                                gf_Resurrecting(lp_kobold, gv_aIData[lv_i].lv_focalNode, lv_reviveTarget, 15.0);
                            }
                            else {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)), c_orderQueueReplace);
                                if ((UnitHasBehavior(lp_kobold, &quot;SkipChatResurrect60&quot;) == false) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) &lt;= 32.0)) {
                                    TextExpressionSetToken(&quot;Param/Expression/476DA4F2&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                                    TextExpressionSetToken(&quot;Param/Expression/476DA4F2&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/44B8E68D&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/FD197A0A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/8407CBB0&quot;));
                                    TextExpressionSetToken(&quot;Param/Expression/FD197A0A&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/476DA4F2&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                                    TextExpressionSetToken(&quot;Param/Expression/FD197A0A&quot;, &quot;C&quot;, StringToText(gv_aIReviveString[RandomInt(1, gv_aIReviveStringAmount)]));
                                    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/FD197A0A&quot;));
                                    UnitBehaviorAdd(lp_kobold, &quot;SkipChatResurrect60&quot;, lp_kobold, 1);
                                }
                                else {
                                }
                            }
                        }
                        else {
                            lv_b = gf_GetClosestResurrectionShrine(lp_kobold, false);
                            if (gf_UnitExists(lv_b)) {
                                gv_aIData[lv_i].lv_focalNode = lv_b;
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                            }
                            else {
                                lv_succeed = false;
                            }
                        }
                    }
                }
                else {
                    lv_succeed = false;
                }
                return lv_succeed;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E816AD88">
        <ScriptCode>
            bool gf_AIBerries (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_b_WantHandfulOfBerries;
                bool lv_b_WantSageBerries;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_b_WantHandfulOfBerries = ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) == 0) &amp;&amp; (((gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) &gt; 0)) || ((gv_skillCooking[lv_i] &gt;= 20) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawStag, c_unitCountAlive) &gt; 0))));
                lv_b_WantSageBerries = (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_sageberry);
                lv_success = true;
                // Implementation
                if (((lv_b_WantHandfulOfBerries == true) || (lv_b_WantSageBerries == true))) {
                    if ((lv_b_WantHandfulOfBerries == true) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;HandfulofBerries&quot;)) {
                    }
                    else {
                        if ((lv_b_WantSageBerries == true) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Sageberry&quot;)) {
                        }
                        else {
                            if (gf_AITradeBuyWithdraw(lp_kobold, &quot;HandfulofBerries&quot;, 1, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                            }
                            else {
                                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Sageberry&quot;, gv_aIData[lv_i].lv_supply.lv_sageberry, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                }
                                else {
                                    if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;BerryBush&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 64)) {
                                        if ((UnitGetCustomValue(gv_aIData[lv_i].lv_focalNode, 0) &lt; 10.0) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) &lt;= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Range[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;NaturesGrace&quot;, 0))) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;NaturesGrace&quot;, 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueAddToEnd);
                                        }
                                        else {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                        }
                                        UnitBehaviorAdd(lp_kobold, &quot;BriefPassivity&quot;, lp_kobold, 1);
                                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                                    }
                                    else {
                                        lv_a = UnitGroup(&quot;BerryBush&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 64)) {
                                            gv_aIData[lv_i].lv_focalNode = lv_b;
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                                        }
                                        else {
                                            lv_success = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="26D19548">
        <ScriptCode>
            bool gf_AIHerbs (unit lp_kobold, int lp_priority) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                fixed lv_r;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((((lp_priority == 1) &amp;&amp; ((gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsAlive &lt; gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsTotal) || ((gv_questIndexActive == 5) &amp;&amp; (gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; ((gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][1] == false) || (gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][2] == false))))) || (lp_priority == 2)) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_spicyHerbs) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_sunflowers))) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_sunflowers) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;LambentSunflower&quot;)) {
                    }
                    else {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_spicyHerbs) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;SpicyHerbs&quot;)) {
                        }
                        else {
                            if (gf_AITradeBuyWithdraw(lp_kobold, &quot;LambentSunflower&quot;, gv_aIData[lv_i].lv_supply.lv_sunflowers, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                            }
                            else {
                                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;SpicyHerbs&quot;, gv_aIData[lv_i].lv_supply.lv_spicyHerbs, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                }
                                else {
                                    if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitGetType(gv_aIData[lv_i].lv_focalNode) == &quot;CulinaryHerbBush&quot;) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), 128)) {
                                        if ((UnitGetCustomValue(gv_aIData[lv_i].lv_focalNode, 0) &lt; 10.0) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(gv_aIData[lv_i].lv_focalNode)) &lt;= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Range[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;NaturesGrace&quot;, 0))) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;NaturesGrace&quot;, 0), gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                        }
                                        else {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                                        }
                                        UnitBehaviorAdd(lp_kobold, &quot;BriefPassivity&quot;, lp_kobold, 1);
                                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                                    }
                                    else {
                                        lv_a = UnitGroup(&quot;CulinaryHerbBush&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b) &amp;&amp; gf_PathableMaximum(lp_kobold, UnitGetPosition(lv_b), 128)) {
                                            gv_aIData[lv_i].lv_focalNode = lv_b;
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                                        }
                                        else {
                                            lv_success = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="05761D03">
        <ScriptCode>
            bool gf_AIStags (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_b_HuntStags;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_b_HuntStags = (gf_WantRawStag(lp_kobold) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_antlers));
                lv_success = true;
                // Implementation
                if ((gf_WantRawStag(lp_kobold) == true) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;RawStagMeat&quot;)) {
                }
                else {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_antlers) &amp;&amp; gf_FindPickupItem(lp_kobold, &quot;Antlers&quot;)) {
                    }
                    else {
                        if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Antlers&quot;, gv_aIData[lv_i].lv_supply.lv_antlers, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                        }
                        else {
                            if ((lv_b_HuntStags == true) &amp;&amp; ((UnitHasBehavior(lp_kobold, &quot;AIProwlsStag&quot;) == true) || (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;Affliction&quot;, 0)) &amp;&amp; gf_RangedWeapon(lp_kobold)) || gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;ShadowCloak&quot;, 0)))) {
                                lv_a = UnitGroup(&quot;Stag&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                if (gf_UnitExists(lv_b)) {
                                    if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;ShadowCloak&quot;, 0))) {
                                        UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;ShadowCloak&quot;, 0)), c_orderQueueReplace);
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                    }
                                    else {
                                        if (gf_AICanCastSpell(lp_kobold, AbilityCommand(&quot;Affliction&quot;, 0))) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;Affliction&quot;, 0), lv_b), c_orderQueueReplace);
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueAddToEnd);
                                        }
                                        else {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                        }
                                    }
                                    if ((UnitHasBehavior(lp_kobold, &quot;ShadowCloak&quot;) == true) &amp;&amp; gf_RangedWeapon(lp_kobold) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lv_b)) &gt; 2.0)) {
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), lv_b), c_orderQueueReplace);
                                    }
                                    else {
                                    }
                                    UnitBehaviorAdd(lp_kobold, &quot;AIProwlsStag&quot;, lp_kobold, 1);
                                }
                                else {
                                    lv_a = UnitGroup(&quot;Stag&quot;, c_playerAny, gf_WeightedInterestRegion(lp_kobold, 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                                    if (gf_UnitExists(lv_b)) {
                                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), lv_b), c_orderQueueReplace);
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="8C329EC4">
        <ScriptCode>
            bool gf_AINightwisp (unit lp_kobold) {
                // Variable Declarations
                int lv_h;
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt; 0)) {
                    lv_a = UnitGroupFilter(&quot;Nightwisp&quot;, lv_i, libNtve_gf_UnitsInUnitGroupWithCustomValue(gv_pets[lv_i], 0, 0.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupRandomUnit(lv_a, c_unitCountAlive);
                    if (gf_UnitExists(lv_b)) {
                        UnitIssueOrder(lv_b, Order(AbilityCommand(&quot;Synergy&quot;, 0)), c_orderQueueReplace);
                    }
                    else {
                        lv_success = false;
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="86C747D3">
        <ScriptCode>
            bool gf_AIMurlocs (unit lp_kobold) {
                int auto7D1F1FEF_ae;
                int auto7D1F1FEF_ai;
                // Variable Declarations
                int lv_h;
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_murlocSkulls)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, c_unitCountAlive) &gt;= 3)) {
                        auto7D1F1FEF_ae = 3;
                        auto7D1F1FEF_ai = 1;
                        lv_h = 1;
                        for ( ; ( (auto7D1F1FEF_ai &gt;= 0 &amp;&amp; lv_h &lt;= auto7D1F1FEF_ae) || (auto7D1F1FEF_ai &lt;= 0 &amp;&amp; lv_h &gt;= auto7D1F1FEF_ae) ) ; lv_h += auto7D1F1FEF_ai ) {
                            lv_b = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, 1);
                            gf_DropandRemove(lv_b);
                            UnitGroupRemove(gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, lv_b);
                        }
                        gf_CreateItemForUnit(lp_kobold, &quot;MurlocSkull&quot;, 1);
                    }
                    else {
                        if (gf_FindPickupItem(lp_kobold, &quot;MurlocSkull&quot;)) {
                        }
                        else {
                            if (gf_FindPickupItem(lp_kobold, &quot;MurlocSkullFragment&quot;)) {
                            }
                            else {
                                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;MurlocSkull&quot;, gv_aIData[lv_i].lv_supply.lv_murlocSkulls, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                }
                                else {
                                    if (gf_AITradeBuyWithdraw(lp_kobold, &quot;MurlocSkullFragment&quot;, 3, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                    }
                                    else {
                                        lv_b = UnitGroupClosestToPoint(gv_playerData[lv_i].lv_murlocSlaves, UnitGetPosition(lp_kobold));
                                        if (gf_UnitExists(lv_b)) {
                                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                                        }
                                        else {
                                            lv_success = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E675D948">
        <ScriptCode>
            bool gf_AITraps (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                const fixed lv_spikeTrapMaintenanceRadius = 32.0;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                if ((((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;SpikeTrap&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), lv_spikeTrapMaintenanceRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 1.0), c_unitCountAlive) &lt; 2) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) || ((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;SpikeTrap&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), lv_spikeTrapMaintenanceRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1)))) {
                    lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;SpikeTrap&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 0.0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1)) {
                        gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand(&quot;Sharpen&quot;, 0));
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;SpikeTrap&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), lv_spikeTrapMaintenanceRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 0.0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                        }
                        else {
                            if ((UnitHasBehavior(lp_kobold, &quot;AIGatheringToCraft&quot;) == false) &amp;&amp; (GameGetMissionTime() &gt; (gv_dayDuration + gv_nightDuration)) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0)) {
                                if (gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 7), &quot;AutomatedDefenseTurret&quot;)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="980DB17C">
        <ScriptCode>
            bool gf_AIADT (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;AutomatedDefenseTurret&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b) &amp;&amp; (UnitWeaponIsEnabled(lv_b, 1) == false) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                    gf_PlayerUseUnitAbility(lv_i, lv_b, AbilityCommand(&quot;RefillAmmunition&quot;, 0));
                }
                else {
                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;AutomatedDefenseTurret&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b) &amp;&amp; (libNtve_gf_UnitIsUnderConstruction(lv_b) == false) &amp;&amp; (UnitWeaponIsEnabled(lv_b, 1) == false) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                        UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                    }
                    else {
                        if (gf_UnitExists(lv_b) &amp;&amp; (libNtve_gf_UnitIsUnderConstruction(lv_b) == true) &amp;&amp; (lv_i == UnitGetOwner(lv_b))) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        }
                        else {
                            if ((GameGetMissionTime() &gt; (gv_dayDuration + gv_nightDuration))) {
                                if ((UnitHasBehavior(lp_kobold, &quot;AIGatheringToCraft&quot;) == false) &amp;&amp; (UnitGroupCount(UnitGroup(&quot;AutomatedDefenseTurret&quot;, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt; gv_aDTCapPlayer[lv_i]) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;AutomatedDefenseTurret&quot;) &amp;&amp; (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0) &amp;&amp; (gv_questIndexActive != 11) &amp;&amp; (gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) &amp;&amp; (gf_IsGladiator(lp_kobold) == false) &amp;&amp; ((gv_dayNight == 1) || (UnitHasBehavior(lp_kobold, &quot;Torch&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Lantern&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;FelFireTorch&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Heat&quot;) == true))) {
                                    if (gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 14), &quot;AutomatedDefenseTurret&quot;)) {
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FA1C7D39">
        <ScriptCode>
            bool gf_FindPickupItem (unit lp_unit, string lp_type) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_a = UnitGroupEmpty();
                // Implementation
                if (gf_UnitExists(gv_aIData[lv_i].lv_focalNode) &amp;&amp; (UnitFilterMatch(gv_aIData[lv_i].lv_focalNode, lv_i, UnitFilter((1 &lt;&lt; c_targetFilterItem), 0, 0, (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) &amp;&amp; gf_PathableMaximum(lp_unit, UnitGetPosition(gv_aIData[lv_i].lv_focalNode), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 1.5)))) {
                    UnitIssueOrder(lp_unit, OrderTargetingUnit(null, gv_aIData[lv_i].lv_focalNode), c_orderQueueReplace);
                    return true;
                }
                else {
                    lv_a = UnitGroup(lp_type, c_playerAny, RegionCircle(UnitGetPosition(lp_unit), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_unit));
                    if (gf_UnitExists(lv_b) &amp;&amp; gf_Allowedtopickup(lp_unit, lv_b) &amp;&amp; gf_PathableMaximum(lp_unit, UnitGetPosition(lv_b), FixedToInt((gv_playerData[lv_i].lv_stats.lv_sightRadius * 1.5)))) {
                        UnitIssueOrder(lp_unit, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        gv_aIData[lv_i].lv_focalNode = lv_b;
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DE726EF1">
        <ScriptCode>
            void gf_UpdateSupplies (int lp_player) {
                // Variable Declarations
                int lv_t;
                unit lv_unit;
                int lv_equipped_MainHand_Level;
                int lv_equipped_Offhand_Level;
                int lv_equipped_Armor_Level;
                bool lv_teammateDead;
                bool lv_b_LiquidatorSpellblade;
                bool lv_b_RepeatingCrossbow;
                bool lv_b_GoldenHauberk;
                bool lv_b_VengefulMurlocSkull;
                bool lv_b_BearShamShroud;
                bool lv_b_HeavyTowerShield;
                bool lv_b_HeavyIronBreastplate;
                bool lv_b_ElderWand;
                bool lv_b_BerserkerBattleAx;
                bool lv_b_ViciousJavelin;
                bool lv_b_IronStuddedVest;
                bool lv_b_CelestialOrb;
                bool lv_b_Blunderbuss;
                bool lv_b_MysticsTribalShield;
                bool lv_baseResources;
                // Variable Initialization
                lv_t = gv_playerData[lp_player].lv_team;
                lv_unit = gv_playerData[lp_player].lv_kobold;
                lv_equipped_MainHand_Level = gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(lv_unit)), lp_player);
                lv_equipped_Offhand_Level = gf_GetItemLevel(UnitGetType(gf_KoboldOffhand(lv_unit)), lp_player);
                lv_equipped_Armor_Level = gf_GetItemLevel(UnitGetType(gf_KoboldArmor(lv_unit)), lp_player);
                lv_teammateDead = (gv_teamData[lv_t].lv_koboldsAlive &lt; gv_teamData[lv_t].lv_koboldsTotal);
                lv_b_LiquidatorSpellblade = ((gv_skillArtisanship[lp_player] &gt;= 25) &amp;&amp; ((lv_equipped_MainHand_Level &lt; gf_GetItemLevel(&quot;LiquidatorSpellblade&quot;, lp_player)) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;Nightwisp&quot;, lp_player, gv_pets[lp_player], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0)));
                lv_b_RepeatingCrossbow = ((gv_skillArtisanship[lp_player] &gt;= 20) &amp;&amp; (!(UnitHasBehavior(lv_unit, &quot;ViciousJavelin&quot;)) &amp;&amp; (lv_equipped_MainHand_Level &lt; gf_GetItemLevel(&quot;RepeatingCrossbow&quot;, lp_player))));
                lv_b_GoldenHauberk = ((gv_skillArtisanship[lp_player] &gt;= 20) &amp;&amp; ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == &quot;1&quot;) &amp;&amp; (lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;GoldenHauberk&quot;, lp_player))));
                lv_b_VengefulMurlocSkull = ((gv_skillArtisanship[lp_player] &gt;= 15) &amp;&amp; ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == &quot;0&quot;) &amp;&amp; (lv_equipped_Offhand_Level &lt; gf_GetItemLevel(&quot;VengefulMurlocSkull&quot;, lp_player))));
                lv_b_BearShamShroud = ((gv_skillArtisanship[lp_player] &gt;= 15) &amp;&amp; ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == &quot;0&quot;) &amp;&amp; (lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;BearShamansShroud&quot;, lp_player))));
                lv_b_HeavyTowerShield = ((gv_skillArtisanship[lp_player] &gt;= 15) &amp;&amp; ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == &quot;1&quot;) &amp;&amp; (lv_equipped_Offhand_Level &lt; gf_GetItemLevel(&quot;HeavyTowerShield&quot;, lp_player))));
                lv_b_HeavyIronBreastplate = (((gv_skillArtisanship[lp_player] &gt;= 15) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 19)) &amp;&amp; ((StringSub(gv_aIData[lp_player].lv_customization, 4, 4) == &quot;1&quot;) &amp;&amp; (lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;HeavyIronBreastplate&quot;, lp_player))));
                lv_b_ElderWand = (((gv_skillArtisanship[lp_player] &gt;= 15) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 19)) &amp;&amp; (!(UnitHasBehavior(lv_unit, &quot;ViciousJavelin&quot;)) &amp;&amp; (lv_equipped_MainHand_Level &lt; gf_GetItemLevel(&quot;ElderWand&quot;, lp_player))));
                lv_b_BerserkerBattleAx = (((gv_skillArtisanship[lp_player] &gt;= 10) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 14)) &amp;&amp; (lv_equipped_MainHand_Level &lt; gf_GetItemLevel(&quot;BerserkersBattleAxe&quot;, lp_player)));
                lv_b_ViciousJavelin = (((gv_skillArtisanship[lp_player] &gt;= 10) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 14)) &amp;&amp; (!(gf_RangedWeapon(lv_unit)) &amp;&amp; (lv_equipped_Offhand_Level &lt; gf_GetItemLevel(&quot;ViciousJavelin&quot;, lp_player))));
                lv_b_IronStuddedVest = (((gv_skillArtisanship[lp_player] &gt;= 10) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 14)) &amp;&amp; (lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;IronStuddedVest&quot;, lp_player)));
                lv_b_CelestialOrb = (((gv_skillArtisanship[lp_player] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 9)) &amp;&amp; (!(UnitHasBehavior(lv_unit, &quot;ViciousJavelin&quot;)) &amp;&amp; ((StringSub(gv_aIData[lp_player].lv_customization, 5, 5) == &quot;0&quot;) &amp;&amp; (lv_equipped_MainHand_Level &lt; gf_GetItemLevel(&quot;CelestialOrb&quot;, lp_player)))));
                lv_b_Blunderbuss = (((gv_skillArtisanship[lp_player] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 9)) &amp;&amp; (!(UnitHasBehavior(lv_unit, &quot;ViciousJavelin&quot;)) &amp;&amp; ((StringSub(gv_aIData[lp_player].lv_customization, 5, 5) == &quot;1&quot;) &amp;&amp; (lv_equipped_MainHand_Level &lt; gf_GetItemLevel(&quot;RoughBlunderbuss&quot;, lp_player)))));
                lv_b_MysticsTribalShield = (((gv_skillArtisanship[lp_player] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 14)) &amp;&amp; ((StringSub(gv_aIData[lp_player].lv_customization, 6, 6) == &quot;1&quot;) &amp;&amp; (lv_equipped_Offhand_Level &lt; gf_GetItemLevel(&quot;MysticsTribalShield&quot;, lp_player))));
                lv_baseResources = ((UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1));
                // Implementation
                if ((gv_aIMonumentBuilder[lv_t] != lp_player) &amp;&amp; (gv_teamData[lv_t].lv_aIWatchTowerBuilder != lp_player)) {
                    if ((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_playerData[lp_player].lv_kobold), gv_aIData[lp_player].lv_tradeRoamRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAlive) == 0)) {
                        gv_aIData[lp_player].lv_supply.lv_lumber = 3;
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_lumber = 2;
                    }
                    if ((((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Tavern&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_playerData[lp_player].lv_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; (gf_AITavernWishlist(lp_player) != 0)) || (gv_questIndexActive == 13))) {
                        gv_aIData[lp_player].lv_supply.lv_stone = 2;
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_stone = 1;
                    }
                    if ((((gv_skillCooking[lp_player] &gt;= 5) &amp;&amp; ((UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lambFeast, c_unitCountAlive) == 0) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_wolfEntrecote, c_unitCountAlive) == 0))) || ((gv_skillCooking[lp_player] &gt;= 20) &amp;&amp; (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_rawStag, c_unitCountAlive) &gt; 0)) || ((gv_skillCooking[lp_player] &gt;= 5) &amp;&amp; (gv_questIndexActive == 5)) || (lv_b_MysticsTribalShield == true) || ((StringSub(gv_aIData[lp_player].lv_customization, 3, 3) == &quot;0&quot;) &amp;&amp; (lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;LeatherCoat&quot;, lp_player))))) {
                        if ((gv_questIndexActive == 5) &amp;&amp; (gv_skillCooking[lp_player] &gt;= 5)) {
                            gv_aIData[lp_player].lv_supply.lv_spicyHerbs = (2 - (libNtve_gf_ArithmeticIntClamp(UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lambFeast, c_unitCountAlive), 0, 1) + libNtve_gf_ArithmeticIntClamp(UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_wolfEntrecote, c_unitCountAlive), 0, 1)));
                        }
                        else {
                            gv_aIData[lp_player].lv_supply.lv_spicyHerbs = 1;
                        }
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_spicyHerbs = 0;
                    }
                    if (((lv_teammateDead == true) || (lv_b_CelestialOrb == true) || (lv_b_GoldenHauberk == true) || (lv_b_LiquidatorSpellblade == true) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lanterns, c_unitCountAlive) &lt; gv_aIData[lp_player].lv_supply.lv_lanterns))) {
                        if ((lv_b_GoldenHauberk == true)) {
                            gv_aIData[lp_player].lv_supply.lv_radiantGems = 3;
                        }
                        else {
                            gv_aIData[lp_player].lv_supply.lv_radiantGems = 1;
                        }
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_radiantGems = 0;
                    }
                    if (((lv_teammateDead == true) || (lv_b_ElderWand == true) || (lv_b_IronStuddedVest == true) || (lv_b_BearShamShroud == true) || ((gv_skillCooking[lp_player] &gt; 20) &amp;&amp; (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_rawStag, c_unitCountAlive) &gt; 0)))) {
                        gv_aIData[lp_player].lv_supply.lv_sunflowers = 1;
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_sunflowers = 0;
                    }
                    if ((gv_playerData[lp_player].lv_hasMainSpell == true) &amp;&amp; (gf_AIHuntersLodgeWishlist(lp_player) != 0) &amp;&amp; (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;HuntersLodge&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_playerData[lp_player].lv_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        gv_aIData[lp_player].lv_supply.lv_leatherBonus = (3 - gv_aIData[lp_player].lv_supply.lv_leather);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_leatherBonus = 0;
                    }
                    if (((lv_b_HeavyIronBreastplate == true) || (lv_b_LiquidatorSpellblade == true))) {
                        gv_aIData[lp_player].lv_supply.lv_shadowstone = 2;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        if (((lv_teammateDead == true) || (lv_b_BerserkerBattleAx == true) || (lv_b_HeavyTowerShield == true) || (lv_b_VengefulMurlocSkull == true) || (lv_b_Blunderbuss == true) || (StringSub(gv_learnedSpellsString[lp_player], 7, 7) == &quot;0&quot;))) {
                            gv_aIData[lp_player].lv_supply.lv_shadowstone = 1;
                            UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                        }
                        else {
                            gv_aIData[lp_player].lv_supply.lv_shadowstone = 0;
                        }
                    }
                    if (((lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;WarmWoolTunic&quot;, lp_player)) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_warmWoolTunics, c_unitCountAlive) &lt; gv_aIData[lp_player].lv_supply.lv_warmWoolTunics))) {
                        gv_aIData[lp_player].lv_supply.lv_wool = 2;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else if ((((gv_questIndexActive == 16) &amp;&amp; (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_fishingRods, c_unitCountAlive) == 0)) || (lv_b_CelestialOrb == true) || (lv_b_RepeatingCrossbow == true) || (lv_b_BearShamShroud == true))) {
                        gv_aIData[lp_player].lv_supply.lv_wool = 1;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else if (true) {
                        gv_aIData[lp_player].lv_supply.lv_wool = 0;
                    }
                    if (((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, lp_player, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_playerData[lp_player].lv_kobold), gv_aIData[lp_player].lv_tradeRoamRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAlive) == 0) || ((lv_baseResources == true) &amp;&amp; ((gv_skillArtisanship[lp_player] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 9)) &amp;&amp; (((StringSub(gv_aIData[lp_player].lv_customization, 3, 3) == &quot;0&quot;) &amp;&amp; (lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;LeatherCoat&quot;, lp_player))) || ((StringSub(gv_aIData[lp_player].lv_customization, 3, 3) == &quot;1&quot;) &amp;&amp; (lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;HuntsmansJacket&quot;, lp_player))))))) {
                        gv_aIData[lp_player].lv_supply.lv_leather = 2;
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_leather = 1;
                    }
                    if (((lv_b_BerserkerBattleAx == true) || (lv_b_HeavyIronBreastplate == true) || (lv_b_HeavyTowerShield == true) || (lv_b_RepeatingCrossbow == true) || (lv_b_GoldenHauberk == true) || (lv_b_ViciousJavelin == true))) {
                        gv_aIData[lp_player].lv_supply.lv_ironOre = 2;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_ironOre = 1;
                    }
                    if (((lv_b_MysticsTribalShield == true) || (lv_b_ElderWand == true))) {
                        gv_aIData[lp_player].lv_supply.lv_infusedLumber = 1;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_infusedLumber = 0;
                    }
                    if (((lv_b_BearShamShroud == true) || (((gv_skillArtisanship[lp_player] &gt;= 5) &amp;&amp; (gv_skillArtisanship[lp_player] &lt;= 9)) &amp;&amp; (StringSub(gv_aIData[lp_player].lv_customization, 3, 3) == &quot;1&quot;) &amp;&amp; (lv_equipped_Armor_Level &lt; gf_GetItemLevel(&quot;HuntsmansJacket&quot;, lp_player))))) {
                        gv_aIData[lp_player].lv_supply.lv_bearPelt = 1;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_bearPelt = 0;
                    }
                    if ((lv_b_BearShamShroud == true)) {
                        gv_aIData[lp_player].lv_supply.lv_sageberry = 1;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_sageberry = 0;
                    }
                    if (((lv_b_RepeatingCrossbow == true) || (lv_b_LiquidatorSpellblade == true))) {
                        gv_aIData[lp_player].lv_supply.lv_antlers = 1;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_antlers = 0;
                    }
                    if ((lv_b_VengefulMurlocSkull == true)) {
                        gv_aIData[lp_player].lv_supply.lv_murlocSkulls = 1;
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_murlocSkulls = 0;
                    }
                    if ((lv_b_ViciousJavelin == true)) {
                        gv_aIData[lp_player].lv_supply.lv_sturdyWoodenSticks = 1;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_sturdyWoodenSticks = 0;
                    }
                    if ((lv_b_IronStuddedVest == true)) {
                        gv_aIData[lp_player].lv_supply.lv_warmWoolTunics = 1;
                        UnitBehaviorAdd(lv_unit, &quot;AIGatheringToCraft&quot;, lv_unit, 1);
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_warmWoolTunics = 0;
                    }
                    if ((GameGetMissionTime() &gt;= (gv_dayDuration + gv_nightDuration))) {
                        if (((UnitHasBehavior(lv_unit, &quot;AIGatheringToCraft&quot;) == false) || (lv_unit == gv_challenger[1]) || (lv_unit == gv_challenger[2]))) {
                            gv_aIData[lp_player].lv_supply.lv_food = 6;
                            gv_aIData[lp_player].lv_supply.lv_candles = 2;
                        }
                        else {
                            gv_aIData[lp_player].lv_supply.lv_food = 3;
                            gv_aIData[lp_player].lv_supply.lv_candles = 1;
                        }
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_food = 1;
                    }
                    if ((gv_playerData[lp_player].lv_hasMainSpell == true)) {
                        gv_aIData[lp_player].lv_supply.lv_murlocSlaves = 1;
                    }
                    else {
                        gv_aIData[lp_player].lv_supply.lv_murlocSlaves = 0;
                    }
                }
                else {
                    gv_aIData[lp_player].lv_supply.lv_lumber = 0;
                    gv_aIData[lp_player].lv_supply.lv_stone = 0;
                    gv_aIData[lp_player].lv_supply.lv_candles = 0;
                    gv_aIData[lp_player].lv_supply.lv_food = 0;
                    gv_aIData[lp_player].lv_supply.lv_spicyHerbs = 0;
                    gv_aIData[lp_player].lv_supply.lv_sageberry = 0;
                    gv_aIData[lp_player].lv_supply.lv_radiantGems = 0;
                    gv_aIData[lp_player].lv_supply.lv_sunflowers = 0;
                    gv_aIData[lp_player].lv_supply.lv_leatherBonus = 0;
                    gv_aIData[lp_player].lv_supply.lv_shadowstone = 0;
                    gv_aIData[lp_player].lv_supply.lv_wool = 0;
                    gv_aIData[lp_player].lv_supply.lv_leather = 0;
                    gv_aIData[lp_player].lv_supply.lv_ironOre = 0;
                    gv_aIData[lp_player].lv_supply.lv_infusedLumber = 0;
                    gv_aIData[lp_player].lv_supply.lv_bearPelt = 0;
                    gv_aIData[lp_player].lv_supply.lv_antlers = 0;
                    gv_aIData[lp_player].lv_supply.lv_sturdyWoodenSticks = 0;
                    gv_aIData[lp_player].lv_supply.lv_warmWoolTunics = 0;
                    if ((gv_teamData[lv_t].lv_aIWatchTowerBuilder == lp_player)) {
                        gv_aIData[lp_player].lv_supply.lv_lumber = 10;
                        gv_aIData[lp_player].lv_supply.lv_stone = 6;
                        gv_aIData[lp_player].lv_supply.lv_food = 1;
                        gv_aIData[lp_player].lv_supply.lv_leather = 1;
                    }
                    else if ((gv_aIMonumentBuilder[lv_t] == lp_player)) {
                        gv_aIData[lp_player].lv_supply.lv_lumber = 9;
                        gv_aIData[lp_player].lv_supply.lv_stone = 9;
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="52545608">
        <ScriptCode>
            bool gf_WantRawLamb (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                bool lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawLamb, c_unitCountAlive) == 0) &amp;&amp; (((gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; (gv_questIndexActive == 5) &amp;&amp; (gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][1] == false) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsAlive == gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsTotal)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_food)) &amp;&amp; (((gv_skillCooking[lv_i] &gt;= 0) &amp;&amp; (gv_skillCooking[lv_i] &lt;= 4)) || ((gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lambFeast, c_unitCountAlive) == 0) || (gv_questIndexActive == 5))))) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7D6C2163">
        <ScriptCode>
            bool gf_WantRawWolf (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                bool lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawWolf, c_unitCountAlive) == 0) &amp;&amp; (((gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; (gv_questIndexActive == 5) &amp;&amp; (gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][2] == false) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsAlive == gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsTotal)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_food)) &amp;&amp; (((gv_skillCooking[lv_i] &gt;= 0) &amp;&amp; (gv_skillCooking[lv_i] &lt;= 4)) || ((gv_skillCooking[lv_i] &gt;= 5) &amp;&amp; ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfEntrecote, c_unitCountAlive) == 0) || (gv_questIndexActive == 5))))) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="19FC343B">
        <ScriptCode>
            bool gf_WantRawBird (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                bool lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((((gv_skillCooking[lv_i] &gt;= 10) &amp;&amp; (gv_questIndexActive == 5) &amp;&amp; (gv_feastCooked[gf_GetTeamOfPlayer(lv_i)][3] == false) &amp;&amp; (gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsAlive == gv_teamData[gv_playerData[lv_i].lv_team].lv_koboldsTotal) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) == 0)) || (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_food)) &amp;&amp; (gv_skillCooking[lv_i] &gt;= 5)) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="44BFAA2F">
        <ScriptCode>
            bool gf_WantRawStag (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                bool lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawStag, c_unitCountAlive) == 0) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &lt; gv_aIData[lv_i].lv_supply.lv_food) &amp;&amp; (gv_skillCooking[lv_i] &gt;= 20)) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="086B59D3">
        <ScriptCode>
            bool gf_AIGatherCandles (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_success = true;
                // Implementation
                lv_a = UnitGroup(&quot;Candle&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                if (gf_UnitExists(lv_b) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_candles, c_unitCountAlive) &lt; (gv_aIData[lv_i].lv_supply.lv_candles + 1))) {
                    UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Candle&quot;, gv_aIData[lv_i].lv_supply.lv_candles, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        lv_success = false;
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1DBC5F1F">
        <ScriptCode>
            bool gf_PathableMaximum (unit lp_unit, point lp_point, int lp_maximum) {
                // Implementation
                if ((AIPathingCostUnit(lp_unit, lp_point, c_ignoreEnemyBuildings) != -1) &amp;&amp; (AIPathingCostUnit(lp_unit, lp_point, c_ignoreEnemyBuildings) &lt;= lp_maximum)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="868B6BCD">
        <ScriptCode>
            bool gf_AIStorageCleaning (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_success = true;
                // Implementation
                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Stone&quot;, (gv_aIData[lv_i].lv_supply.lv_stone + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                }
                else {
                    if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Lumber&quot;, (gv_aIData[lv_i].lv_supply.lv_lumber + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        if (gf_AITradeBuyWithdraw(lp_kobold, &quot;IronOre&quot;, (gv_aIData[lv_i].lv_supply.lv_ironOre + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                        }
                        else {
                            if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Shadowstone&quot;, (gv_aIData[lv_i].lv_supply.lv_shadowstone + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                            }
                            else {
                                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;RadiantGem&quot;, (gv_aIData[lv_i].lv_supply.lv_radiantGems + 1), false, true, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A0D3B965">
        <ScriptCode>
            region gf_WeightedInterestRegion (unit lp_kobold, fixed lp_radius) {
                // Variable Declarations
                int lv_i;
                region lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                // Implementation
                if ((gv_aIData[lv_i].lv_weightedPOI != null)) {
                    lv_value = RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_kobold), (lp_radius / 3.0), gv_aIData[lv_i].lv_weightedPOI), lp_radius);
                }
                else {
                    lv_value = RegionCircle(UnitGetPosition(lp_kobold), lp_radius);
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7FC6B0BF">
        <ScriptCode>
            bool gf_AITavern (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                int lv_desiredService;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_desiredService = gf_AITavernWishlist(lv_i);
                lv_success = true;
                // Implementation
                if ((lv_desiredService != 0)) {
                    if ((lv_desiredService == -3) &amp;&amp; gf_AITradeBuyWithdraw(lp_kobold, &quot;SpellBook&quot;, 1, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Tavern&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b)) {
                            gf_AITavernInteract(lp_kobold, lv_b, lv_desiredService);
                        }
                        else {
                            lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Tavern&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                            if (gf_UnitExists(lv_b)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                            }
                            else {
                                if ((gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] != lv_i) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;Tavern&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 5), &quot;CampfireLit&quot;)) {
                                }
                                else {
                                    lv_success = false;
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="539DD3EB">
        <ScriptCode>
            void gf_AITavernInteract (unit lp_kobold, unit lp_tavern, int lp_desiredService) {
                // Variable Declarations
                int lv_i;
                bool lv_any;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                // Implementation
                if ((lp_desiredService == -3)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;BuySpellBook&quot;, 0));
                }
                else if ((lp_desiredService == 1)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;LearnNaturesGrace&quot;, 0));
                    lv_any = true;
                }
                else if ((lp_desiredService == 2)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;LearnMineralTap&quot;, 0));
                    lv_any = true;
                }
                else if ((lp_desiredService == 3)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;LearnClairvoyance&quot;, 0));
                    lv_any = true;
                }
                else if ((lp_desiredService == 4)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;LearnFrostArmor&quot;, 0));
                    lv_any = true;
                }
                else if ((lp_desiredService == 5)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;LearnSiphonLife&quot;, 0));
                    lv_any = true;
                }
                else if ((lp_desiredService == 6)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;LearnAffliction&quot;, 0));
                    lv_any = true;
                }
                else if ((lp_desiredService == 7)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;LearnShadowCloak&quot;, 0));
                    lv_any = true;
                }
                else if ((lp_desiredService == 8)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;LearnGuardianSpirit&quot;, 0));
                    lv_any = true;
                }
                else if ((lp_desiredService == -1)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;PurchaseNightwisp&quot;, 0));
                }
                else if ((lp_desiredService == -2)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;BuyBeer&quot;, 0));
                }
                else if ((lp_desiredService == -4)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_tavern, AbilityCommand(&quot;HireMurlocSlave&quot;, 0));
                }
                if ((lv_any == true)) {
                    if ((UnitHasBehavior(lp_kobold, &quot;SkipChatSpell60&quot;) == false) &amp;&amp; (gv_dayNight == 2)) {
                        TextExpressionSetToken(&quot;Param/Expression/1297B79C&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                        TextExpressionSetToken(&quot;Param/Expression/1297B79C&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/6D44DC17&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/7A6B449C&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/26949D24&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/7A6B449C&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/1297B79C&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken(&quot;Param/Expression/7A6B449C&quot;, &quot;C&quot;, StringToText(gv_aISpellString[RandomInt(1, gv_aISpellStringAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/7A6B449C&quot;));
                        UnitBehaviorAdd(lp_kobold, &quot;SkipChatSpell60&quot;, lp_kobold, 1);
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="834D763D">
        <ScriptCode>
            int gf_AITavernWishlist (int lp_player) {
                // Variable Declarations
                const fixed lv_spellDiffRatingReq = 25.0;
                int lv_value;
                // Variable Initialization
                // Implementation
                if ((gv_skillCooking[lp_player] &gt;= 10) &amp;&amp; (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_beer, c_unitCountAlive) == 0) &amp;&amp; (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_rawPheasant, c_unitCountAlive) &gt; 0) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 6)) {
                    lv_value = -2;
                }
                else if ((UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;SpellBook&quot;) == false) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;ConjurersCharm&quot;) == false) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;NecromancersNecklace&quot;) == false) &amp;&amp; (UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;TheMurlocket&quot;) == false) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 10)) {
                    lv_value = -3;
                }
                else if ((StringSub(gv_learnedSpellsString[lp_player], 6, 6) == &quot;0&quot;) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 60)) {
                    lv_value = 6;
                }
                else if ((StringSub(gv_learnedSpellsString[lp_player], 7, 7) == &quot;0&quot;) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 70) &amp;&amp; (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_shadowstone, c_unitCountAlive) &gt; 0)) {
                    lv_value = 7;
                }
                else if ((StringSub(gv_learnedSpellsString[lp_player], 5, 5) == &quot;0&quot;) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 50)) {
                    lv_value = 5;
                }
                else if ((StringSub(gv_learnedSpellsString[lp_player], 4, 4) == &quot;0&quot;) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 40)) {
                    lv_value = 4;
                }
                else if ((StringSub(gv_learnedSpellsString[lp_player], 1, 1) == &quot;0&quot;) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 20) &amp;&amp; (gv_playerData[lp_player].lv_hasMainSpell == true)) {
                    lv_value = 1;
                }
                else if ((StringSub(gv_learnedSpellsString[lp_player], 2, 2) == &quot;0&quot;) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 20) &amp;&amp; (gv_playerData[lp_player].lv_hasMainSpell == true)) {
                    lv_value = 2;
                }
                else if ((StringSub(gv_learnedSpellsString[lp_player], 8, 8) == &quot;0&quot;) &amp;&amp; ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 100) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_radiantGem, c_unitCountAlive) &gt;= 2))) {
                    lv_value = 8;
                }
                else if ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 30) &amp;&amp; (gv_learnedSpellsString[lp_player] == &quot;11011111&quot;)) {
                    lv_value = 3;
                }
                else if ((gv_playerData[lp_player].lv_hasMainSpell == true) &amp;&amp; (gv_dayNight == 2) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 45) &amp;&amp; ((UnitGroupCount(UnitGroupFilter(&quot;Dog&quot;, c_playerAny, gv_pets[lp_player], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroupFilter(&quot;Lyote&quot;, c_playerAny, gv_pets[lp_player], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) &gt; 0) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;Nightwisp&quot;, c_playerAny, gv_pets[lp_player], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; (UnitGroupCount(gv_pets[lp_player], c_unitCountAlive) &lt; StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lp_player)))) {
                    lv_value = -1;
                }
                else if ((UnitGroupCount(gv_playerData[lp_player].lv_murlocSlaves, c_unitCountAlive) &lt; gv_aIData[lp_player].lv_supply.lv_murlocSlaves) &amp;&amp; (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 45) &amp;&amp; (gv_questIndexActive != 7)) {
                    lv_value = -4;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0B55C20B">
        <ScriptCode>
            bool gf_AIHuntersLodge (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                int lv_desiredService;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_a = UnitGroupEmpty();
                lv_desiredService = gf_AIHuntersLodgeWishlist(lv_i);
                lv_success = true;
                // Implementation
                if ((lv_desiredService != 0)) {
                    lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;HuntersLodge&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                    if (gf_UnitExists(lv_b)) {
                        gf_AIHuntardLodgeInteract(lp_kobold, lv_b, lv_desiredService);
                    }
                    else {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;HuntersLodge&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kobold), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_b)), c_orderQueueReplace);
                        }
                        else {
                            if (gf_HasMaterialsFor(lp_kobold, &quot;HuntersLodge&quot;) &amp;&amp; gf_AIBuildStructure(lp_kobold, AbilityCommand(&quot;KoboldTestBuild&quot;, 8), &quot;CampfireLit&quot;)) {
                            }
                            else {
                                lv_success = false;
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A5D06656">
        <ScriptCode>
            void gf_AIHuntardLodgeInteract (unit lp_kobold, unit lp_huntersLodge, int lp_desiredService) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                // Implementation
                if ((lp_desiredService == 8)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand(&quot;CraftFishingRod&quot;, 0));
                    if ((UnitHasBehavior(lp_kobold, &quot;SkipChatQuest120&quot;) == false)) {
                        TextExpressionSetToken(&quot;Param/Expression/ED0087EF&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                        TextExpressionSetToken(&quot;Param/Expression/ED0087EF&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/04B37291&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/5B396BFA&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/F4D3D667&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/5B396BFA&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/ED0087EF&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken(&quot;Param/Expression/5B396BFA&quot;, &quot;C&quot;, StringToText(gv_aIFishingString[RandomInt(1, gv_aIFishingStringAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/5B396BFA&quot;));
                        UnitBehaviorAdd(lp_kobold, &quot;SkipChatQuest120&quot;, lp_kobold, 1);
                    }
                    else {
                    }
                }
                else if ((lp_desiredService == 1)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand(&quot;CraftObedienceRod&quot;, 0));
                    if ((UnitHasBehavior(lp_kobold, &quot;SkipChatPet120&quot;) == false)) {
                        TextExpressionSetToken(&quot;Param/Expression/855EF91C&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                        TextExpressionSetToken(&quot;Param/Expression/855EF91C&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/A9576B3C&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/EF84B591&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3DCF7A28&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/EF84B591&quot;, &quot;B&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/855EF91C&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken(&quot;Param/Expression/EF84B591&quot;, &quot;C&quot;, StringToText(gv_aIPetString[RandomInt(1, gv_aIPetStringAmount)]));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/EF84B591&quot;));
                        UnitBehaviorAdd(lp_kobold, &quot;SkipChatPet120&quot;, lp_kobold, 1);
                    }
                    else {
                    }
                }
                else if ((lp_desiredService == 2)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand(&quot;ThickHide&quot;, 0));
                }
                else if ((lp_desiredService == 3)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand(&quot;NaturalTenacity&quot;, 0));
                }
                else if ((lp_desiredService == 4)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand(&quot;Viciousness&quot;, 0));
                }
                else if ((lp_desiredService == 5)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand(&quot;InspirationalMaster&quot;, 0));
                }
                else if ((lp_desiredService == 6)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand(&quot;PredatoryKnowledge&quot;, 0));
                }
                else if ((lp_desiredService == 7)) {
                    gf_PlayerUseUnitAbility(lv_i, lp_huntersLodge, AbilityCommand(&quot;Companionship&quot;, 0));
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="5A6F204E">
        <ScriptCode>
            int gf_AIHuntersLodgeWishlist (int lp_player) {
                // Variable Declarations
                bool lv_allowUpgrades;
                int lv_value;
                // Variable Initialization
                lv_allowUpgrades = (gv_playerData[lp_player].lv_hasAllSpells &amp;&amp; !(UnitHasBehavior(gv_playerData[lp_player].lv_kobold, &quot;AIGatheringToCraft&quot;)));
                // Implementation
                if ((gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lp_player)] != lp_player)) {
                    if ((gv_questIndexActive == 16) &amp;&amp; gf_HasMaterialsFor(gv_playerData[lp_player].lv_kobold, &quot;FishingRod&quot;) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;FishingRod&quot;, c_playerAny, UnitInventoryGroup(gv_playerData[lp_player].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;EpicFishingRod&quot;, c_playerAny, UnitInventoryGroup(gv_playerData[lp_player].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) {
                        lv_value = 8;
                    }
                    else if (((gv_questIndexActive == 9) || (lv_allowUpgrades == true)) &amp;&amp; (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1) &amp;&amp; (UnitGroupCount(UnitGroupFilter(&quot;ObedienceRod&quot;, c_playerAny, UnitInventoryGroup(gv_playerData[lp_player].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) &amp;&amp; (UnitGroupCount(gv_pets[lp_player], c_unitCountAlive) &lt; StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lp_player)))) {
                        lv_value = 1;
                    }
                    else if ((lv_allowUpgrades == true) &amp;&amp; (StringSub(gv_taughtPetsString[lp_player], 1, 1) == &quot;0&quot;) &amp;&amp; ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 30) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) &gt;= 1))) {
                        lv_value = 2;
                    }
                    else if ((lv_allowUpgrades == true) &amp;&amp; (StringSub(gv_taughtPetsString[lp_player], 5, 5) == &quot;0&quot;) &amp;&amp; ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 30) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) &gt;= 1))) {
                        lv_value = 3;
                    }
                    else if ((lv_allowUpgrades == true) &amp;&amp; (StringSub(gv_taughtPetsString[lp_player], 6, 6) == &quot;0&quot;) &amp;&amp; ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 60) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) &gt;= 2))) {
                        lv_value = 4;
                    }
                    else if ((lv_allowUpgrades == true) &amp;&amp; (StringSub(gv_taughtPetsString[lp_player], 2, 2) == &quot;0&quot;) &amp;&amp; ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 60) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) &gt;= 2))) {
                        lv_value = 5;
                    }
                    else if ((lv_allowUpgrades == true) &amp;&amp; (StringSub(gv_taughtPetsString[lp_player], 4, 4) == &quot;0&quot;) &amp;&amp; ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 60) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) &gt;= 2))) {
                        lv_value = 6;
                    }
                    else if (((lv_allowUpgrades == true) || (gv_skillArtisanship[lp_player] &gt;= 25)) &amp;&amp; (StringSub(gv_taughtPetsString[lp_player], 3, 3) == &quot;0&quot;) &amp;&amp; ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) &gt;= 90) || (UnitGroupCount(gv_playerData[lp_player].lv_resources.lv_bearPelts, c_unitCountAlive) &gt;= 3))) {
                        lv_value = 7;
                    }
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E0430C8F">
        <ScriptCode>
            unitgroup gf_UnitsInUnitGroupWithoutBuff (unitgroup lp_group, string lp_buff) {
                // Variable Declarations
                unitgroup lv_group;
                // Variable Initialization
                lv_group = lp_group;
                // Implementation
                UnitGroupLoopBegin(lv_group);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitHasBehavior(UnitGroupLoopCurrent(), lp_buff) == true)) {
                        UnitGroupRemove(lv_group, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                return lv_group;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="EA7745F3">
        <ScriptCode>
            unitgroup gf_UnitsInUnitGroupWithBuff (unitgroup lp_group, string lp_buff) {
                // Variable Declarations
                unitgroup lv_group;
                // Variable Initialization
                lv_group = lp_group;
                // Implementation
                UnitGroupLoopBegin(lv_group);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitHasBehavior(UnitGroupLoopCurrent(), lp_buff) == false)) {
                        UnitGroupRemove(lv_group, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                return lv_group;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="FC7380A0">
        <ScriptCode>
            unitgroup gf_UnitsInUnitGroupWithLife (unitgroup lp_group, fixed lp_life) {
                // Variable Declarations
                unitgroup lv_group;
                // Variable Initialization
                lv_group = lp_group;
                // Implementation
                UnitGroupLoopBegin(lv_group);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) &gt; lp_life)) {
                        UnitGroupRemove(lv_group, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                return lv_group;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="7D5EBA10">
        <ScriptCode>
            unitgroup gf_GetEnemiesNearPoint (point lp_point, int lp_player, fixed lp_radius, bool lp_visible) {
                // Variable Declarations
                unitgroup lv_enemies;
                unitgroup lv_secondWave;
                // Variable Initialization
                lv_secondWave = UnitGroupEmpty();
                // Implementation
                lv_enemies = UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(lp_point, lp_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0);
                UnitGroupAddUnitGroup(lv_secondWave, lv_enemies);
                UnitGroupLoopBegin(lv_enemies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), lp_player) == true) || (lp_visible == false)) &amp;&amp; ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;) || (UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Tamed&quot;) == true))) {
                        UnitGroupAddUnitGroup(lv_secondWave, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), (lp_radius / 2.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0));
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(lv_secondWave);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), lp_player) == true) || (lp_visible == false)) &amp;&amp; ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Tamed&quot;) == true) || ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == true) &amp;&amp; gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 6)) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;MurlocChieftain&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Zulrogg&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;FrostWitch&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;DemonLordJaryx&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;RagingArcaneBeast&quot;) || ((UnitGetType(UnitGroupLoopCurrent()) == &quot;InfernalMinion&quot;) &amp;&amp; gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 4)) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;MurlocSlave&quot;) || ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Ghoul&quot;) &amp;&amp; gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 4)) || ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Bear&quot;) &amp;&amp; ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Tamed&quot;) == true) || gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 6))) || ((UnitGetType(UnitGroupLoopCurrent()) == &quot;FrostBear&quot;) &amp;&amp; ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Tamed&quot;) == true) || gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 6))) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;KingFurbeastIV&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;TombGuardian&quot;) || ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Monstrosity&quot;) &amp;&amp; gf_PathableMaximum(UnitGroupLoopCurrent(), lp_point, 6)) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Fortress&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;AutomatedDefenseTurret&quot;))) {
                    }
                    else {
                        UnitGroupRemove(lv_secondWave, UnitGroupLoopCurrent());
                    }
                }
                UnitGroupLoopEnd();
                return lv_secondWave;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="AB88B784">
        <ScriptCode>
            unitgroup gf_GetAlliesNearPoint (point lp_point, int lp_player, fixed lp_radius) {
                // Variable Declarations
                unitgroup lv_allies;
                // Variable Initialization
                // Implementation
                lv_allies = UnitGroupAlliance(lp_player, c_unitAllianceAlly, RegionCircle(lp_point, lp_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                UnitGroupLoopBegin(lv_allies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((((UnitGetType(UnitGroupLoopCurrent()) == &quot;Fortress&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;AutomatedDefenseTurret&quot;)) &amp;&amp; (UnitWeaponIsEnabled(UnitGroupLoopCurrent(), 1) == true) &amp;&amp; (libNtve_gf_UnitIsInvulnerable(UnitGroupLoopCurrent()) == false) &amp;&amp; (DistanceBetweenPoints(lp_point, UnitGetPosition(UnitGroupLoopCurrent())) &lt;= 4.0)) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;) || (UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Tamed&quot;) == true) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Ghoul&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;InfernalMinion&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;MurlocMilitia&quot;))) {
                    }
                    else {
                        UnitGroupRemove(lv_allies, UnitGroupLoopCurrent());
                    }
                }
                UnitGroupLoopEnd();
                return lv_allies;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A0721E42">
        <ScriptCode>
            unitgroup gf_GetNearbyEnemiesNoStructures (unit lp_unit) {
                // Variable Declarations
                fixed lv_radius;
                unitgroup lv_enemies;
                // Variable Initialization
                lv_radius = 12.0;
                // Implementation
                lv_enemies = UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                UnitGroupLoopBegin(lv_enemies);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), UnitGetOwner(lp_unit)) == true) &amp;&amp; ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Tamed&quot;) == true) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;MurlocChieftain&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Zulrogg&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;FrostWitch&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;DemonLordJaryx&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;RagingArcaneBeast&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;InfernalMinion&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;MurlocSlave&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Ghoul&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Bear&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;FrostBear&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;KingFurbeastIV&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;VeilGuardian&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;UndeadSavage&quot;))) {
                    }
                    else {
                        UnitGroupRemove(lv_enemies, UnitGroupLoopCurrent());
                    }
                }
                UnitGroupLoopEnd();
                return lv_enemies;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E9BAF4D2">
        <ScriptCode>
            unitgroup gf_GetNearbyDirewolves (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_enemies;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                lv_enemies = UnitGroup(&quot;Lyote&quot;, 15, RegionCircle(UnitGetPosition(lp_unit), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                return lv_enemies;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F9EDC01E">
        <ScriptCode>
            unit gf_GetClosestResurrectionShrine (unit lp_unit, bool lp_allowNearbyEnemies) {
                // Variable Declarations
                unitgroup lv_shrines;
                unit lv_value;
                unitgroup lv_enemies;
                // Variable Initialization
                lv_shrines = UnitGroupEmpty();
                lv_enemies = UnitGroupEmpty();
                // Implementation
                if (((UnitGroupCount(gf_GetEnemiesNearPoint(UnitGetPosition(UnitFromId(2745)), UnitGetOwner(lp_unit), 24.0, false), c_unitCountAlive) == 0) || (lp_allowNearbyEnemies == true))) {
                    UnitGroupAdd(lv_shrines, UnitFromId(2745));
                }
                else {
                }
                if (((UnitGroupCount(gf_GetEnemiesNearPoint(UnitGetPosition(UnitFromId(2316)), UnitGetOwner(lp_unit), 24.0, false), c_unitCountAlive) == 0) || (lp_allowNearbyEnemies == true))) {
                    UnitGroupAdd(lv_shrines, UnitFromId(2316));
                }
                else {
                }
                lv_value = UnitGroupClosestToPoint(lv_shrines, UnitGetPosition(lp_unit));
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2437AB55">
        <ScriptCode>
            int gf_GetRandomDeadPlayerOnTeam (int lp_team) {
                // Variable Declarations
                playergroup lv_deadUsers;
                playergroup lv_deadAI;
                int lv_value;
                // Variable Initialization
                lv_deadUsers = PlayerGroupEmpty();
                lv_deadAI = PlayerGroupEmpty();
                // Implementation
                PlayerGroupLoopBegin(gv_teamData[lp_team].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_dead[PlayerGroupLoopCurrent()] == true) &amp;&amp; (gv_beingResurrected[PlayerGroupLoopCurrent()] == false)) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_isAI == true)) {
                            PlayerGroupAdd(lv_deadAI, PlayerGroupLoopCurrent());
                        }
                        else {
                            PlayerGroupAdd(lv_deadUsers, PlayerGroupLoopCurrent());
                        }
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                if ((PlayerGroupCount(lv_deadUsers) &gt; 0)) {
                    lv_value = PlayerGroupPlayer(lv_deadUsers, RandomInt(1, PlayerGroupCount(lv_deadUsers)));
                }
                else {
                    if ((PlayerGroupCount(lv_deadAI) &gt; 0)) {
                        lv_value = PlayerGroupPlayer(lv_deadAI, RandomInt(1, PlayerGroupCount(lv_deadAI)));
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="3277C1C7">
        <ScriptCode>
            fixed gf_EvaluateThreat (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                fixed lv_life;
                fixed lv_armor;
                fixed lv_effectiveLife;
                fixed lv_damage;
                fixed lv_attackSpeed;
                int lv_willpower;
                fixed lv_energy;
                fixed lv_effectiveDPS;
                fixed lv_spellStrength;
                fixed lv_extraMultiplier;
                fixed lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                lv_attackSpeed = 1.0;
                lv_spellStrength = 1.0;
                lv_extraMultiplier = 1.0;
                // Implementation
                if (gf_UnitExists(lp_unit) &amp;&amp; ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeStructure) == false) || (UnitGetType(lp_unit) == &quot;AutomatedDefenseTurret&quot;) || (UnitGetType(lp_unit) == &quot;Fortress&quot;))) {
                    if ((UnitGetType(lp_unit) == &quot;Kobold&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MeleeDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;KoboldAttackMeleeBash&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        lv_energy += UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent);
                        lv_willpower += StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                        if ((gv_playerData[lv_i].lv_hasMainSpell == true)) {
                            lv_spellStrength += (lv_energy * (lv_willpower * 0.1));
                        }
                        else {
                        }
                        if ((UnitHasBehavior(lp_unit, &quot;KoboldCanEat&quot;) == true) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_food, c_unitCountAlive) &gt; 0)) {
                            lv_extraMultiplier += 0.1;
                        }
                        else {
                        }
                        if (((UnitHasBehavior(lp_unit, &quot;SiphonLife&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;FrostArmor&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;GuardianSpirit&quot;) == true))) {
                            lv_extraMultiplier += 0.25;
                        }
                        else {
                        }
                        if (gf_RangedWeapon(lp_unit)) {
                            lv_extraMultiplier += 0.1;
                        }
                        else {
                        }
                    }
                    else if ((UnitGetType(lp_unit) == &quot;MurlocSlave&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;MurlocSlave&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Smash&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;Smash&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                    }
                    else if ((UnitGetType(lp_unit) == &quot;Zulrogg&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Zulrogg&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;TrollBossDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;TrollBossWeapon&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        lv_extraMultiplier *= 0.75;
                    }
                    else if ((UnitGetType(lp_unit) == &quot;MurlocChieftain&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;MurlocChieftain&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MurlocDoomhammerDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;MurlocDoomhammer&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        lv_extraMultiplier *= 0.75;
                    }
                    else if ((UnitGetType(lp_unit) == &quot;Lyote&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Lyote&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;DirewolfBiteDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;DirewolfBite&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                    }
                    else if ((UnitGetType(lp_unit) == &quot;Dog&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Dog&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WolfBiteDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;WolfBite&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                    }
                    else if ((UnitGetType(lp_unit) == &quot;Ghoul&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Ghoul&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GhoulDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;GhoulClaws&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                    }
                    else if ((UnitGetType(lp_unit) == &quot;Bear&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Bear&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;BearMaulDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;BearMaul&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                    }
                    else if ((UnitGetType(lp_unit) == &quot;FrostBear&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;FrostBear&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;FrostBearMaulDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;FrostBearMaul&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                    }
                    else if ((UnitGetType(lp_unit) == &quot;Nightwisp&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Nightwisp&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;NightwispDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;NightwispAttack&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                    }
                    else if ((UnitGetType(lp_unit) == &quot;DemonLordJaryx&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;DemonLordJaryx&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;DemonLordJaryxAttackDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;DemonLordJaryxAttack&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        lv_extraMultiplier *= 0.5;
                    }
                    else if ((UnitGetType(lp_unit) == &quot;FrostWitch&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;FrostWitch&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;FrostWitchDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;FrostWitchWeapon&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        lv_extraMultiplier *= 0.75;
                    }
                    else if ((UnitGetType(lp_unit) == &quot;AutomatedDefenseTurret&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;AutomatedDefenseTurret&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;AutomatedDefenseTurretDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;HeavyAutomatedCrossbow&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        if (((UnitWeaponIsEnabled(lp_unit, 1) == false) || (libNtve_gf_UnitIsUnderConstruction(lp_unit) == true))) {
                            lv_extraMultiplier = 0.0;
                        }
                        else {
                            lv_extraMultiplier += 0.25;
                        }
                    }
                    else if ((UnitGetType(lp_unit) == &quot;Fortress&quot;)) {
                        lv_life += 500.0;
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WatchTowerDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;WatchTowerWeapon&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        if (((UnitWeaponIsEnabled(lp_unit, 1) == false) || (libNtve_gf_UnitIsUnderConstruction(lp_unit) == true))) {
                            lv_extraMultiplier = 0.0;
                        }
                        else {
                        }
                    }
                    else if ((UnitGetType(lp_unit) == &quot;TombGuardian&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;TombGuardian&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;FireballDamagePoint&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;Fireball&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                    }
                    else if ((UnitGetType(lp_unit) == &quot;Monstrosity&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Monstrosity&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MonstrousFistsDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;MonstrousFists&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        lv_extraMultiplier *= 0.75;
                    }
                    else if ((UnitGetType(lp_unit) == &quot;RagingArcaneBeast&quot;)) {
                        lv_life += UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
                        lv_armor += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;RagingArcaneBeast&quot;, &quot;LifeArmor&quot;, UnitGetOwner(lp_unit)));
                        lv_damage += StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArcanePulseDamage&quot;, &quot;Amount&quot;, UnitGetOwner(lp_unit)));
                        lv_attackSpeed += StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, &quot;ArcanePulse&quot;, &quot;Period&quot;, UnitGetOwner(lp_unit)));
                        lv_extraMultiplier *= 0.25;
                    }
                    if ((UnitHasBehavior(lp_unit, &quot;AutomatedDefenseTurretDazed&quot;) == true)) {
                        lv_extraMultiplier *= 0.8;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(lp_unit, &quot;SturdyWoodenStickSlow&quot;) == true)) {
                        lv_extraMultiplier *= 0.8;
                    }
                    else {
                    }
                    if ((UnitFilterMatch(lp_unit, UnitGetOwner(lp_unit), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true)) {
                        lv_extraMultiplier *= 0.5;
                    }
                    else {
                    }
                    if ((UnitHasBehavior(lp_unit, &quot;Unconscious&quot;) == true)) {
                        lv_extraMultiplier = 0.0;
                    }
                    else {
                    }
                    lv_effectiveDPS = (lv_damage / lv_attackSpeed);
                    lv_effectiveLife = (lv_life * (1.0 + ((lv_armor * gv_positiveArmorFactor) / (1.0 + (lv_armor * gv_positiveArmorFactor)))));
                    lv_value = ((((lv_effectiveDPS * 5.0) + lv_effectiveLife) + lv_spellStrength) * lv_extraMultiplier);
                }
                else {
                    lv_value = 0.0;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2D95F1CA">
        <ScriptCode>
            bool gf_AIBringItemToUnit (unit lp_kobold, unit lp_item, unit lp_target) {
                // Variable Declarations
                bool lv_success;
                // Variable Initialization
                lv_success = true;
                // Implementation
                if (gf_UnitExists(lp_item) &amp;&amp; gf_UnitExists(lp_target)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lp_kobold), UnitGetPosition(lp_target)) &lt;= 3.0)) {
                        UnitSetPosition(lp_item, UnitGetPosition(lp_target), false);
                        if ((gv_playerData[UnitGetOwner(lp_target)].lv_isAI == true)) {
                            UnitIssueOrder(lp_target, OrderTargetingUnit(null, lp_item), c_orderQueueAddToFront);
                        }
                        else {
                        }
                    }
                    else {
                        UnitIssueOrder(lp_kobold, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), lp_target), c_orderQueueReplace);
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6E9ACB35">
        <ScriptCode>
            bool gf_AICanCastSpell (unit lp_kobold, abilcmd lp_ability) {
                // Variable Declarations
                int lv_i;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                // Implementation
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/CCCC9C23&quot;), false);
                if (((UnitHasBehavior(lp_kobold, &quot;SpellBook&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;ConjurersCharm&quot;) == true))) {
                    if ((lp_ability == AbilityCommand(&quot;NaturesGrace&quot;, 0)) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;NaturesGrace&quot;, true) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergyPercent, c_unitPropCurrent) &gt;= 90.0)) {
                        lv_success = true;
                    }
                    else if ((lp_ability == AbilityCommand(&quot;MineralTap&quot;, 0)) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;MineralTap&quot;, true) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;MineralTap&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;MineralTap&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergyPercent, c_unitPropCurrent) &gt;= 90.0)) {
                        lv_success = true;
                    }
                    else if ((lp_ability == AbilityCommand(&quot;FrostArmor&quot;, 0)) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;FrostArmor&quot;, true) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;FrostArmor&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;FrostArmor&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;FrostArmor&quot;) == false)) {
                        lv_success = true;
                    }
                    else if ((lp_ability == AbilityCommand(&quot;SiphonLife&quot;, 0)) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;SiphonLife&quot;, true) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;SiphonLife&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;SiphonLife&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;SiphonLife&quot;) == false)) {
                        lv_success = true;
                    }
                    else if ((lp_ability == AbilityCommand(&quot;Affliction&quot;, 0)) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;Affliction&quot;, true) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;Affliction&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;Affliction&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lv_i)))) {
                        lv_success = true;
                    }
                    else if ((lp_ability == AbilityCommand(&quot;ShadowCloak&quot;, 0)) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;ShadowCloak&quot;, true) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) &gt; (StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;ShadowCloak&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i)) * 1.2)) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;ShadowCloak&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitAbilityGetCooldown(lp_kobold, &quot;ShadowCloak&quot;, &quot;Abil/ShadowCloak&quot;) == 0.0) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;ShadowCloak&quot;) == false)) {
                        lv_success = true;
                    }
                    else if ((lp_ability == AbilityCommand(&quot;GuardianSpirit&quot;, 0)) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;GuardianSpirit&quot;, true) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;GuardianSpirit&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;GuardianSpirit&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;GuardianSpirit&quot;) == false)) {
                        lv_success = true;
                    }
                    else if ((lp_ability == AbilityCommand(&quot;Clairvoyance&quot;, 0)) &amp;&amp; (UnitAbilityCheck(lp_kobold, &quot;Clairvoyance&quot;, true) == true) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropEnergy, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;Clairvoyance&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i))) &amp;&amp; (UnitGetPropertyFixed(lp_kobold, c_unitPropLife, c_unitPropCurrent) &gt; StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;Clairvoyance&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(0) + &quot;]&quot;, lv_i)))) {
                        lv_success = true;
                    }
                }
                else {
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/71FFA546&quot;), false);
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1070014D">
        <ScriptCode>
            bool gf_Allowedtopickup (unit lp_kobold, unit lp_item) {
                // Variable Declarations
                bool lv_value;
                // Variable Initialization
                lv_value = true;
                // Implementation
                if ((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(lp_kobold), c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lp_item), 3.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 5, 0.0), c_unitCountAlive) &gt; 0)) {
                    lv_value = false;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="1AE9A484">
        <ScriptCode>
            bool gf_StrongerThanDirewolves (unit lp_unit) {
                // Variable Declarations
                unitgroup lv_nearbyDirewolves;
                fixed lv_threatIndex;
                bool lv_value;
                // Variable Initialization
                lv_nearbyDirewolves = gf_GetNearbyDirewolves(lp_unit);
                // Implementation
                UnitGroupLoopBegin(lv_nearbyDirewolves);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_threatIndex += gf_EvaluateThreat(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                if (((UnitHasBehavior(lp_unit, &quot;Torch&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;Lantern&quot;) == true) || (UnitHasBehavior(lp_unit, &quot;FelFireTorch&quot;) == true) || ((lv_threatIndex * 1.1) &lt; gf_EvaluateThreat(lp_unit)))) {
                    lv_value = true;
                }
                else {
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="68B03BF3">
        <ScriptCode>
            bool gf_StrongestOnTeam (unit lp_unit) {
                // Variable Declarations
                unitgroup lv_alliedKobolds;
                bool lv_value;
                // Variable Initialization
                lv_alliedKobolds = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(lp_unit), c_unitAllianceAllyExcludeSelf, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_value = true;
                // Implementation
                UnitGroupLoopBegin(lv_alliedKobolds);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((gf_EvaluateThreat(UnitGroupLoopCurrent()) &gt; gf_EvaluateThreat(lp_unit))) {
                        lv_value = false;
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="B1104137">
        <ScriptCode>
            void gf_PlayerUseUnitAbility (int lp_player, unit lp_unit, abilcmd lp_ability) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((lp_player != lv_i)) {
                    UnitSetOwner(lp_unit, lp_player, false);
                    UnitIssueOrder(lp_unit, Order(lp_ability), c_orderQueueReplace);
                    UnitSetOwner(lp_unit, lv_i, false);
                }
                else {
                    UnitIssueOrder(lp_unit, Order(lp_ability), c_orderQueueReplace);
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="99017A0B">
        <ScriptCode>
            bool gf_OthersSelectingUnit (unit lp_unit, int lp_player) {
                int auto832B2931_ae;
                int auto832B2931_ai;
                // Variable Declarations
                int lv_a;
                bool lv_value;
                // Variable Initialization
                // Implementation
                auto832B2931_ae = gv_players;
                auto832B2931_ai = 1;
                lv_a = 1;
                for ( ; ( (auto832B2931_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto832B2931_ae) || (auto832B2931_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto832B2931_ae) ) ; lv_a += auto832B2931_ai ) {
                    if ((lv_a != lp_player) &amp;&amp; (UnitGroupHasUnit(gv_aISelected2[lv_a], lp_unit) == true)) {
                        lv_value = true;
                    }
                    else {
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="57FCE3CB">
        <ScriptCode>
            void gf_AIExcessItems (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_simpleSpellBook;
                unitgroup lv_artifacts;
                unitgroup lv_skeleFingers;
                unitgroup lv_shovels;
                unitgroup lv_obedRods;
                unitgroup lv_scrolls;
                unitgroup lv_boneTali;
                unit lv_drop;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_simpleSpellBook = UnitGroupFilter(&quot;SpellBook&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_artifacts = UnitGroupFilter(&quot;AncientArtifactFragment&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_skeleFingers = UnitGroupFilter(&quot;SkeletalFinger&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_shovels = UnitGroupFilter(&quot;IronShovel&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_obedRods = UnitGroupFilter(&quot;ObedienceRod&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_scrolls = UnitGroupFilter(&quot;ScrollofTransmutation&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_boneTali = UnitGroupFilter(&quot;BoneTalisman&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Implementation
                if ((gv_aIMonumentBuilder[gf_GetTeamOfPlayer(lv_i)] == lv_i)) {
                    UnitGroupLoopBegin(gv_aIData[lv_i].lv_tradeItems);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_kobold), 1.0)), false);
                        UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(gv_playerData[lv_i].lv_resources.lv_food);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_kobold), 1.0)), false);
                        UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                else {
                }
                if ((UnitGetType(gf_KoboldOffhand(lp_kobold)) == &quot;Torch&quot;) &amp;&amp; (gv_b_Day == true) &amp;&amp; (gv_winter == false)) {
                    UnitSetPosition(gf_KoboldOffhand(lp_kobold), UnitGetPosition(lp_kobold), false);
                    UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, gf_KoboldOffhand(lp_kobold));
                }
                else {
                }
                if ((UnitGroupCount(lv_simpleSpellBook, c_unitCountAlive) &gt; 0) &amp;&amp; ((UnitHasBehavior(lp_kobold, &quot;ConjurersCharm&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;NecromancersNecklace&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;TheMurlocket&quot;) == true))) {
                    UnitSetPosition(UnitGroupUnit(lv_simpleSpellBook, 1), UnitGetPosition(lp_kobold), false);
                    UnitGroupRemove(gv_aIData[lv_i].lv_tradeItems, UnitGroupUnit(lv_simpleSpellBook, 1));
                }
                else {
                }
                if ((UnitGroupCount(lv_obedRods, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) &gt;= StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i)))) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, lv_obedRods, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) &gt; 1)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_handfulofBerries, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) - 1)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_sageberry)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sageberries, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_sageberry)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_spicyHerbs)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_spicyHerbs, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_spicyHerbs)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_sunflowers)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sunflowers, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_sunflowers)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_lumber)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_lumber)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumberParts, c_unitCountAlive) &gt; 0)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, gv_playerData[lv_i].lv_resources.lv_lumberParts);
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_stone)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_stone)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) &gt; (gv_aIData[lv_i].lv_supply.lv_leather + gv_aIData[lv_i].lv_supply.lv_leatherBonus))) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_leather, c_unitCountAlive) - (gv_aIData[lv_i].lv_supply.lv_leather + gv_aIData[lv_i].lv_supply.lv_leatherBonus))));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_wool)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_wool)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_ironOre)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_ironOre)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_shadowstone)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_shadowstone)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_radiantGems)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_radiantGems)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_infusedLumber)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_infusedLumber, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_infusedLumber)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_sageberries, c_unitCountAlive) &gt; 0)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, gv_playerData[lv_i].lv_resources.lv_sageberries);
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_antlers)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_antlers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_antlers, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_antlers)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_murlocSkulls)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkulls, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_murlocSkulls)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_murlocSkulls, c_unitCountAlive) &gt;= gv_aIData[lv_i].lv_supply.lv_murlocSkulls)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments);
                }
                else {
                }
                if ((UnitGroupCount(lv_artifacts, c_unitCountAlive) &gt; 0)) {
                    UnitGroupAdd(gv_aIData[lv_i].lv_tradeItems, UnitGroupUnit(lv_artifacts, 1));
                }
                else {
                }
                if ((gv_questIndexActive != 11) &amp;&amp; (UnitGroupCount(lv_shovels, c_unitCountAlive) &gt; 0)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, lv_shovels);
                }
                else {
                }
                if ((gv_questIndexActive != 7) &amp;&amp; (UnitGroupCount(lv_boneTali, c_unitCountAlive) &gt; 0)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, lv_boneTali);
                }
                else {
                }
                if ((UnitGroupCount(lv_scrolls, c_unitCountAlive) &gt; 0)) {
                    if ((UnitGroupCount(UnitGroupFilter(&quot;Bear&quot;, c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0)) {
                        UnitCreateEffectUnit(lp_kobold, &quot;ScrollofTransmutation&quot;, UnitGroupRandomUnit(UnitGroupFilter(&quot;Bear&quot;, c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                        gf_DropandRemove(UnitGroupUnit(lv_scrolls, 1));
                    }
                    else {
                        UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, lv_scrolls);
                    }
                }
                else {
                }
                if ((UnitGroupCount(lv_skeleFingers, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGroupCount(lv_skeleFingers, c_unitCountAlive) &lt; 3) &amp;&amp; (UnitGroupCount(UnitGroup(&quot;SkeletalFinger&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, lv_skeleFingers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_candles, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_candles)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_candles, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_candles, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_candles)));
                }
                else {
                }
                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) &gt; gv_aIData[lv_i].lv_supply.lv_lanterns)) {
                    UnitGroupAddUnitGroup(gv_aIData[lv_i].lv_tradeItems, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lanterns, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), (UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lanterns, c_unitCountAlive) - gv_aIData[lv_i].lv_supply.lv_lanterns)));
                }
                else {
                }
                UnitGroupLoopBegin(UnitInventoryGroup(lp_kobold));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == gv_backpackSlot) &amp;&amp; (((gf_KoboldMainHand(lp_kobold) != null) &amp;&amp; (CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), &quot;Class&quot;, lv_i) == &quot;MainHand&quot;) &amp;&amp; (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) &lt;= gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(lp_kobold)), lv_i)) &amp;&amp; (UnitGetType(gf_KoboldMainHand(lp_kobold)) != &quot;ObedienceRod&quot;) &amp;&amp; ((gv_questIndexActive != 16) || ((UnitGetType(UnitGroupLoopCurrent()) != &quot;FishingRod&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;EpicFishingRod&quot;))) &amp;&amp; ((UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) &gt;= StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i))) || (UnitGetType(UnitGroupLoopCurrent()) != &quot;ObedienceRod&quot;)) &amp;&amp; ((gv_aIData[lv_i].lv_supply.lv_sturdyWoodenSticks == 0) || (UnitGetType(UnitGroupLoopCurrent()) != &quot;SturdyWoodenStick&quot;))) || ((gf_KoboldOffhand(lp_kobold) != null) &amp;&amp; (CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), &quot;Class&quot;, lv_i) == &quot;Offhand&quot;) &amp;&amp; (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) &lt;= gf_GetItemLevel(UnitGetType(gf_KoboldOffhand(lp_kobold)), lv_i)) &amp;&amp; (UnitGetType(gf_KoboldOffhand(lp_kobold)) != &quot;Torch&quot;) &amp;&amp; (UnitGetType(gf_KoboldOffhand(lp_kobold)) != &quot;Lantern&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;Lantern&quot;)) || ((gf_KoboldArmor(lp_kobold) != null) &amp;&amp; (CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), &quot;Class&quot;, lv_i) == &quot;Armor&quot;) &amp;&amp; (gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), lv_i) &lt;= gf_GetItemLevel(UnitGetType(gf_KoboldArmor(lp_kobold)), lv_i)) &amp;&amp; ((gv_aIData[lv_i].lv_supply.lv_warmWoolTunics == 0) || (UnitGetType(UnitGroupLoopCurrent()) != &quot;WarmWoolTunic&quot;))))) {
                        UnitGroupAdd(gv_aIData[lv_i].lv_tradeItems, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if (gf_UnitCanGetItem(lp_kobold, &quot;HandfulofBerries&quot;)) {
                }
                else {
                    if ((UnitGroupCount(gv_aIData[lv_i].lv_tradeItems, c_unitCountAlive) &gt; 0)) {
                        gf_DropItems(lp_kobold, gv_aIData[lv_i].lv_tradeItems);
                    }
                    else {
                        if ((((gv_aIMonumentBuilder[gv_playerData[lv_i].lv_team] == lv_i) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;LorenorStatue&quot;)) || ((gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder == lv_i) &amp;&amp; gf_HasMaterialsFor(lp_kobold, &quot;Fortress&quot;)))) {
                        }
                        else {
                            gf_DropAllItems(lp_kobold);
                        }
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="AE9047BE">
        <ScriptCode>
            int gf_GetExcessLimit (unit lp_unit) {
                // Variable Declarations
                int lv_i;
                int lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_unit);
                // Implementation
                if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(lp_unit), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_unit), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_value = 1;
                }
                else {
                    lv_value = 2;
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="F29E146A">
        <ScriptCode>
            void gf_AISpendSkillPoints (int lp_player) {
                int init_i;
                // Variable Declarations
                const int lv_maxlevel = 8;
                int lv_artisanshipAim;
                int[5] lv_exception;
                int lv_exceptionIndex;
                int lv_pointsMissing;
                // Variable Initialization
                lv_artisanshipAim = (5 * StringToInt(StringSub(gv_aIData[lp_player].lv_customization, 2, 2)));
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    lv_exception[init_i] = -1;
                }
                lv_exceptionIndex = 1;
                // Implementation
                if ((gv_playerData[lp_player].lv_alive == true) &amp;&amp; (gv_skillPointsPlayer[lp_player] &gt; 0)) {
                    lv_pointsMissing = (lv_artisanshipAim - gv_skillArtisanship[lp_player]);
                    if ((lv_pointsMissing &lt;= 0)) {
                        lv_exception[lv_exceptionIndex] = 5;
                        lv_exceptionIndex += 1;
                    }
                    else {
                        if ((lv_pointsMissing &gt; ((lv_maxlevel - UnitLevel(gv_playerData[lp_player].lv_kobold)) * 5))) {
                            gf_IncreaseSkillType(lp_player, 5, libNtve_gf_ArithmeticIntClamp(lv_pointsMissing, 1, gv_skillPointsPlayer[lp_player]));
                            lv_exception[lv_exceptionIndex] = 5;
                            lv_exceptionIndex += 1;
                        }
                        else {
                        }
                    }
                    gf_IncreaseSkillType(lp_player, gf_GetInteger15(lv_exception[1], lv_exception[2], lv_exception[3], lv_exception[4]), gv_skillPointsPlayer[lp_player]);
                    gf_UpdateSkillButton(lp_player);
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="99D163F0">
        <ScriptCode>
            int gf_GetInteger15 (int lp_exception1, int lp_exception2, int lp_exception3, int lp_exception4) {
                // Variable Declarations
                int lv_a;
                string lv_possibilities;
                int lv_index;
                int lv_value;
                // Variable Initialization
                lv_possibilities = &quot;12345&quot;;
                // Implementation
                while ((lv_value == 0)) {
                    lv_index = RandomInt(1, StringLength(lv_possibilities));
                    lv_value = StringToInt(StringSub(lv_possibilities, lv_index, lv_index));
                    if ((lv_value != lp_exception1) &amp;&amp; (lv_value != lp_exception2) &amp;&amp; (lv_value != lp_exception3) &amp;&amp; (lv_value != lp_exception4)) {
                    }
                    else {
                        lv_possibilities = StringReplace(lv_possibilities, StringSub(lv_possibilities, StringLength(lv_possibilities), StringLength(lv_possibilities)), lv_index, lv_index);
                        lv_possibilities = StringReplace(lv_possibilities, &quot;&quot;, StringLength(lv_possibilities), StringLength(lv_possibilities));
                        lv_value = 0;
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="0CBE70A1">
        <ScriptCode>
            void gf_AICustomization (int lp_player) {
                // Implementation
                gv_rewardState[lp_player][2][RandomInt(1, 8)] = RandomInt(2, 3);
                gv_rewardState[lp_player][3][1] = RandomInt(2, 3);
                gv_rewardState[lp_player][3][2] = RandomInt(2, 3);
                gv_rewardState[lp_player][3][4] = RandomInt(2, 3);
                gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 1, 1);
                gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(1, 4)), 2, 2);
                gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 3, 3);
                gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 4, 4);
                gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 5, 5);
                gv_aIData[lp_player].lv_customization = StringReplace(gv_aIData[lp_player].lv_customization, IntToString(RandomInt(0, 1)), 6, 6);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="ED992054">
        <ScriptCode>
            void gf_SetAIName (int lp_player) {
                // Variable Declarations
                int lv_r;
                // Variable Initialization
                // Implementation
                lv_r = RandomInt(1, (gv_numberofnames - gv_namestaken));
                gv_aIData[lp_player].lv_name = StringToText(gv_aINamePool[lv_r]);
                gv_aINamePool[lv_r] = gv_aINamePool[(gv_numberofnames - gv_namestaken)];
                gv_namestaken += 1;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="A386ABF9">
        <ScriptCode>
            bool gf_AIDiggyHole (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                int lv_t;
                unitgroup lv_shovels;
                unit lv_b;
                unitgroup lv_idleShovels;
                fixed lv_angleOffset;
                bool lv_success;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                lv_t = gf_GetTeamOfPlayer(lv_i);
                lv_shovels = UnitGroupFilter(&quot;IronShovel&quot;, c_playerAny, UnitInventoryGroup(lp_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                lv_idleShovels = UnitGroupEmpty();
                lv_angleOffset = libNtve_gf_ArithmeticRealClamp((35.0 - FixedToInt(gv_skillMining[lv_i])), 0.0, 35.0);
                lv_success = true;
                // Implementation
                if ((gv_questIndexActive == 11)) {
                    if ((UnitGroupCount(lv_shovels, c_unitCountAlive) &gt; 0)) {
                        if (((gv_aIPirateSearchT[lv_t] == null) || ((gv_aIPirateSearchP[lv_i] != null) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lp_kobold), gv_aIPirateSearchP[lv_i]) &lt;= (1.5 + (0.05 * gv_skillMining[lv_i])))))) {
                            gf_ItemShovelDig(lp_kobold, UnitGroupUnit(lv_shovels, 1), false);
                        }
                        else {
                            if ((gv_aIPirateSearchP[lv_i] == null)) {
                                gv_aIPirateSearchP[lv_i] = PointWithOffsetPolar(gv_aIPirateSearchT[lv_t], RandomFixed(2.0, 4.0), (AngleBetweenPoints(UnitGetPosition(lp_kobold), gv_piratesTreasureLocation) + RandomFixed((0.0 - lv_angleOffset), lv_angleOffset)));
                            }
                            else {
                            }
                            if (gf_PathableMaximum(lp_kobold, gv_aIPirateSearchP[lv_i], 200)) {
                                UnitIssueOrder(lp_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_aIPirateSearchP[lv_i]), c_orderQueueReplace);
                            }
                            else {
                                gv_aIPirateSearchP[lv_i] = gf_RandomPathablePoint(RegionCircle(gv_aIPirateSearchP[lv_i], 16.0));
                            }
                        }
                    }
                    else {
                        lv_idleShovels = UnitGroup(&quot;IronShovel&quot;, c_playerAny, RegionCircle(UnitGetPosition(lp_kobold), gv_playerData[lv_i].lv_stats.lv_sightRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_b = UnitGroupClosestToPoint(lv_idleShovels, UnitGetPosition(lp_kobold));
                        if (gf_UnitExists(lv_b)) {
                            UnitIssueOrder(lp_kobold, OrderTargetingUnit(null, lv_b), c_orderQueueReplace);
                        }
                        else {
                            if (gf_AITradeBuyWithdraw(lp_kobold, &quot;IronShovel&quot;, 1, false, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                            }
                            else {
                                if (gf_AITradeBuyWithdraw(lp_kobold, &quot;IronOre&quot;, 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                }
                                else {
                                    if (gf_AITradeBuyWithdraw(lp_kobold, &quot;Lumber&quot;, 1, true, false, gv_aIData[lv_i].lv_tradeRoamRadius)) {
                                    }
                                    else {
                                        lv_success = false;
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    lv_success = false;
                }
                return lv_success;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="2ECF0F30">
        <ScriptCode>
            string gf_AIPerks (int lp_player, int lp_points) {
                int auto69413521_ae;
                int auto69413521_ai;
                int auto30E45F55_ae;
                int auto30E45F55_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                int lv_r;
                int lv_i;
                string lv_s;
                int lv_perksPerTier;
                string lv_value;
                // Variable Initialization
                lv_s = &quot;&quot;;
                lv_value = &quot;0000000000000000000000000000000000000000&quot;;
                // Implementation
                gv_perkPointsSpent[lp_player] = 0;
                gv_accpp[lp_player] = libNtve_gf_ArithmeticIntClamp(lp_points, 0, 40);
                lv_perksPerTier = (gv_accpp[lp_player] / 4);
                auto69413521_ae = 3;
                auto69413521_ai = 1;
                lv_a = 0;
                for ( ; ( (auto69413521_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto69413521_ae) || (auto69413521_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto69413521_ae) ) ; lv_a += auto69413521_ai ) {
                    lv_s = &quot;0123456789&quot;;
                    auto30E45F55_ae = lv_perksPerTier;
                    auto30E45F55_ai = 1;
                    lv_b = 1;
                    for ( ; ( (auto30E45F55_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto30E45F55_ae) || (auto30E45F55_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto30E45F55_ae) ) ; lv_b += auto30E45F55_ai ) {
                        if ((gv_perkPointsSpent[lp_player] &lt; lp_points)) {
                            lv_r = RandomInt(1, StringLength(lv_s));
                            lv_i = (1 + StringToInt(StringSub(lv_s, lv_r, lv_r)));
                            lv_s = StringReplace(lv_s, &quot;&quot;, lv_r, lv_r);
                            lv_value = StringReplace(lv_value, &quot;1&quot;, ((lv_a * 10) + lv_i), ((lv_a * 10) + lv_i));
                            gv_perkPointsSpent[lp_player] += 1;
                            gv_accpp[lp_player] -= 1;
                        }
                        else {
                        }
                    }
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="36707373">
        <ScriptCode>
            void gf_AllAIsShareControlwithAllies () {
                int autoC4FFE31A_ae;
                int autoC4FFE31A_ai;
                int autoFE2147E7_ae;
                int autoFE2147E7_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                // Variable Initialization
                // Implementation
                autoC4FFE31A_ae = gv_players;
                autoC4FFE31A_ai = 1;
                lv_a = 1;
                for ( ; ( (autoC4FFE31A_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC4FFE31A_ae) || (autoC4FFE31A_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC4FFE31A_ae) ) ; lv_a += autoC4FFE31A_ai ) {
                    if ((gv_playerData[lv_a].lv_isAI == true)) {
                        autoFE2147E7_ae = gv_players;
                        autoFE2147E7_ai = 1;
                        lv_b = 1;
                        for ( ; ( (autoFE2147E7_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoFE2147E7_ae) || (autoFE2147E7_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoFE2147E7_ae) ) ; lv_b += autoFE2147E7_ai ) {
                            if ((PlayerType(lv_b) == c_playerTypeUser) &amp;&amp; (libNtve_gf_PlayerIsEnemy(lv_a, lv_b, 0) == true)) {
                                PlayerSetAlliance(lv_a, c_allianceIdControl, lv_b, true);
                            }
                            else {
                            }
                        }
                    }
                    else {
                    }
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="25878D01">
        <ScriptCode>
            void gf_UnstuckNudge (unit lp_kobold) {
                // Variable Declarations
                int lv_i;
                fixed lv_dist;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_kobold);
                // Implementation
                if (((lv_i &gt;= 0) &amp;&amp; (lv_i &lt;= gv_players))) {
                    if (gv_unstuckRating[lv_i] &gt;= 20) {
                        gv_unstuckRating[lv_i] = 1;
                    }
                    else {
                        gv_unstuckRating[lv_i] = gv_unstuckRating[lv_i] + 1;
                    }
                    if ((gv_unstuckPoint[lv_i] != null) &amp;&amp; (gv_unstuckPoint[lv_i] != Point(0.0, 0.0))) {
                        lv_dist = DistanceBetweenPoints(UnitGetPosition(lp_kobold), gv_unstuckPoint[lv_i]);
                    }
                    else {
                        lv_dist = 10.0;
                    }
                    if (((lv_dist &gt; 0.5) || (gf_UnitIsBusy(lp_kobold) == true) || (UnitHasBehavior(lp_kobold, &quot;Attacking&quot;) == true) || (UnitHasBehavior(lp_kobold, &quot;Constructing&quot;) == true))) {
                        gv_unstuckPoint[lv_i] = UnitGetPosition(lp_kobold);
                        gv_unstuckRating[lv_i] = 1;
                        UnitBehaviorRemove(lp_kobold, &quot;Nudgable&quot;, 1);
                    }
                    if ((gv_unstuckRating[lv_i] == 20)) {
                        if ((UnitHasBehavior(lp_kobold, &quot;KoboldBotNormal&quot;) == true) &amp;&amp; (UnitHasBehavior(lp_kobold, &quot;ToggleAI&quot;) == false)) {
                            UnitSetPosition(lp_kobold, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lp_kobold), gv_interactRadius)), false);
                            UnitIssueOrder(lp_kobold, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                        }
                        else {
                            UnitBehaviorAdd(lp_kobold, &quot;Nudgable&quot;, lp_kobold, 1);
                        }
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="5621422B">
        <Item Type="CustomScript" Id="F3E12EEC"/>
        <Item Type="CustomScript" Id="DED45DF3"/>
        <Item Type="CustomScript" Id="E302529B"/>
        <Item Type="CustomScript" Id="6F7C16C3"/>
        <Item Type="CustomScript" Id="44764389"/>
    </Element>
    <Element Type="CustomScript" Id="F3E12EEC">
        <ScriptCode>
            point gf_GetDropoffLocation (unit lp_murloc) {
                // Variable Declarations
                int lv_i;
                point lv_value;
                // Variable Initialization
                lv_i = UnitGetOwner(lp_murloc);
                // Implementation
                if (gf_UnitExists(gv_playerData[lv_i].lv_kobold) &amp;&amp; (UnitGetCustomValue(lp_murloc, 2) == 0.0)) {
                    lv_value = UnitGetPosition(gv_playerData[lv_i].lv_kobold);
                }
                else if ((UnitGetCustomValue(lp_murloc, 2) == 1.0)) {
                    lv_value = Point(UnitGetCustomValue(lp_murloc, 3), UnitGetCustomValue(lp_murloc, 4));
                }
                else if ((UnitGetCustomValue(lp_murloc, 2) == 2.0)) {
                    lv_value = Point(UnitGetCustomValue(lp_murloc, 3), UnitGetCustomValue(lp_murloc, 4));
                }
                return lv_value;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="DED45DF3">
        <ScriptCode>
            unit gf_GetMurlocFocalNode (unit lp_murloc) {
                // Variable Declarations
                point lv_p;
                unit lv_node;
                // Variable Initialization
                lv_p = Point(UnitGetCustomValue(lp_murloc, 5), UnitGetCustomValue(lp_murloc, 6));
                // Implementation
                lv_node = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionCircle(lv_p, 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), lv_p);
                if (gf_UnitExists(lv_node) &amp;&amp; gf_PathableMaximum(lp_murloc, UnitGetPosition(lv_node), 32) &amp;&amp; ((UnitGetType(lv_node) == &quot;StoneDeposit&quot;) || (UnitGetType(lv_node) == &quot;GoldDeposit&quot;) || (UnitGetType(lv_node) == &quot;BerryBush&quot;) || (UnitGetType(lv_node) == &quot;CulinaryHerbBush&quot;) || (UnitGetType(lv_node) == &quot;MapleTree&quot;) || (UnitGetType(lv_node) == &quot;ElderTree&quot;) || (UnitGetType(lv_node) == &quot;Sheep&quot;))) {
                }
                else {
                    lv_node = null;
                    UnitSetCustomValue(lp_murloc, 5, 0.0);
                    UnitSetCustomValue(lp_murloc, 6, 0.0);
                }
                return lv_node;
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E302529B">
        <ScriptCode>
            void gf_SetMurlocFocalNode (unit lp_murloc, unit lp_node) {
                // Implementation
                UnitSetCustomValue(lp_murloc, 5, PointGetX(UnitGetPosition(lp_node)));
                UnitSetCustomValue(lp_murloc, 6, PointGetY(UnitGetPosition(lp_node)));
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="6F7C16C3">
        <ScriptCode>
            void gf_MurlocResetOrders (unit lp_unit) {
                // Implementation
                UnitBehaviorRemove(lp_unit, &quot;MurlocFetchBerries&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;MurlocFetchGold&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;MurlocFetchHerbs&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;MurlocFetchLumber&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;MurlocFetchStone&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;MurlocChef&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;MurlocReturnItems&quot;, 1);
                UnitBehaviorRemove(lp_unit, &quot;MurlocForcedReturn&quot;, 1);
                UnitSetFacing(lp_unit, (UnitGetFacing(lp_unit) + 1.0), 0.0);
                UnitIssueOrder(lp_unit, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="44764389">
        <ScriptCode>
            void gf_MurlocSkin(unit murloc, int skinType){
                actor act = libNtve_gf_MainActorofUnit(murloc);
                string skinTexture = &quot;MurlocBlue&quot;;
                if (skinType == 1){
                    skinTexture = &quot;MurlocOrange&quot;;
                }
                else if(skinType == 2){
                    skinTexture = &quot;MurlocYellow&quot;;
                }
                else if(skinType == 3){
                    skinTexture = &quot;MurlocGray&quot;;
                }
                else if(skinType == 4){
                    skinTexture = &quot;MurlocWhite&quot;;
                }
                ActorSend(act, &quot;TextureSelectById &quot; + skinTexture);
            }
            bool MurlocSkin_Cheat(bool cond, bool actions){
                int p = EventPlayer();
                int skinType;
                unitgroup g;
                
                if (gv_admin[p]){
                    skinType = StringToInt(StringWord(EventChatMessage(false), 2));
                    g = UnitGroup(&quot;MurlocSlave&quot;, p, RegionPlayableMap(), null, c_noMaxCount);
                    for(UnitGroupLoopBegin(g);!UnitGroupLoopDone();UnitGroupLoopStep()){
                        gf_MurlocSkin(UnitGroupLoopCurrent(), skinType);
                    }UnitGroupLoopEnd();
                    g = UnitGroup(&quot;MurlocMilitia&quot;, p, RegionPlayableMap(), null, c_noMaxCount);
                    for(UnitGroupLoopBegin(g);!UnitGroupLoopDone();UnitGroupLoopStep()){
                        gf_MurlocSkin(UnitGroupLoopCurrent(), skinType);
                    }UnitGroupLoopEnd();
                }
                return true;
            }
            void MurlocSkin_Init(){
                TriggerAddEventChatMessage(TriggerCreate(&quot;MurlocSkin_Cheat&quot;), c_playerAny, &quot;-MurlocSkin &quot;, false);
            }
        </ScriptCode>
        <InitFunc>MurlocSkin_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="A9822A37">
        <Item Type="CustomScript" Id="EBB85095"/>
        <Item Type="CustomScript" Id="D18BBAC9"/>
        <Item Type="CustomScript" Id="60A6B0E7"/>
    </Element>
    <Element Type="CustomScript" Id="EBB85095">
        <ScriptCode>
            void gf_ShowTutorialText (int lp_index) {
                // Implementation
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gv_tutorialText[lp_index]);
                gv_transcript = (gv_transcript + StringExternal(&quot;Param/Value/4802CCD7&quot;) + gv_tutorialText[lp_index]);
                HelpPanelDestroyAllTips();
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/096829E1&quot;), 0), gv_transcript, StringExternal(&quot;Param/Value/D681952B&quot;), &quot;Icons\\Candle.dds&quot;);
                TipAlertPanelClear(PlayerGroupAll());
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="D18BBAC9">
        <ScriptCode>
            void gf_InGameHint (string lp_hint, int lp_player) {
                // Variable Declarations
                bool lv_changed;
                text lv_prefix;
                // Variable Initialization
                lv_prefix = StringExternal(&quot;Param/Value/9ADED528&quot;);
                // Implementation
                if ((PlayerType(lp_player) == c_playerTypeUser) &amp;&amp; (PlayerStatus(lp_player) == c_playerStatusActive) &amp;&amp; (gv_tutorial == false)) {
                    if ((lp_hint == &quot;start&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 1, 1) == &quot;0&quot;)) {
                        if ((StringSub(gv_hints[lp_player], 16, 16) == &quot;0&quot;)) {
                            TextExpressionSetToken(&quot;Param/Expression/943C2247&quot;, &quot;A&quot;, lv_prefix);
                            TextExpressionSetToken(&quot;Param/Expression/943C2247&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/5E93AF75&quot;));
                            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/943C2247&quot;));
                        }
                        else {
                            TextExpressionSetToken(&quot;Param/Expression/D0EF46EB&quot;, &quot;A&quot;, lv_prefix);
                            TextExpressionSetToken(&quot;Param/Expression/D0EF46EB&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/A4BDA356&quot;));
                            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/D0EF46EB&quot;));
                        }
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 1, 1);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;stone&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 2, 2) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/8A7013C2&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/8A7013C2&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/ACC9C4AE&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/8A7013C2&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 2, 2);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;tree&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 3, 3) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/CFFDC568&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/CFFDC568&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/8E107F63&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/CFFDC568&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 3, 3);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;rezz&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 4, 4) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/75D7409C&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/75D7409C&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/6896372C&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/75D7409C&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 4, 4);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;postgame&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 5, 5) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/0978FA8C&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/0978FA8C&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/98E730F7&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/0978FA8C&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 5, 5);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;gold&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 6, 6) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/5F2DE0C5&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/5F2DE0C5&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/D55E78F5&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/5F2DE0C5&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 6, 6);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;bear&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 7, 7) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/5924F54E&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/5924F54E&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/84FE7456&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/5924F54E&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 7, 7);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;level&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 8, 8) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/2A940331&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/2A940331&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/8CB2CF1A&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/2A940331&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 8, 8);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;smithy&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 9, 9) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/B8CC0240&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/B8CC0240&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/1D46968D&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/B8CC0240&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 9, 9);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;outpost&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 10, 10) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/111B15AA&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/111B15AA&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/F4C828B0&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/111B15AA&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 10, 10);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;stamina&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 11, 11) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/2825266D&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/2825266D&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/7929F469&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/2825266D&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 11, 11);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;warmth&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 12, 12) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/0E1DFC8A&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/0E1DFC8A&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/6A1560E1&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/0E1DFC8A&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 12, 12);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;hunger&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 13, 13) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/F5CC6816&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/F5CC6816&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/F9AF7F62&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/F5CC6816&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 13, 13);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;rain&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 14, 14) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/5BD9B1AB&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/5BD9B1AB&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/F7C072A6&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/5BD9B1AB&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 14, 14);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;night&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 15, 15) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/C90801D6&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/C90801D6&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/A6A12D9D&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/C90801D6&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 15, 15);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;berry&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 17, 17) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/DAB82CCB&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/DAB82CCB&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/62B06E36&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/DAB82CCB&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 17, 17);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;herb&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 18, 18) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/F2A26BA2&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/F2A26BA2&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/CE0F250A&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/F2A26BA2&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 18, 18);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;hunter&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 19, 19) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/A3A12C28&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/A3A12C28&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/FE3825EE&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/A3A12C28&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 19, 19);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;perks&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 20, 20) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/E753EDE6&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/E753EDE6&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/A7038A11&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/E753EDE6&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 20, 20);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;patch&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 21, 21) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/1C610A0C&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/1C610A0C&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/53B0CC42&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/1C610A0C&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 21, 21);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;death&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 22, 22) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/AEDCD381&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/AEDCD381&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/00E94E18&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/AEDCD381&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 22, 22);
                        lv_changed = true;
                    }
                    else if ((lp_hint == &quot;defense&quot;) &amp;&amp; (StringSub(gv_hints[lp_player], 23, 23) == &quot;0&quot;)) {
                        TextExpressionSetToken(&quot;Param/Expression/56AD67D4&quot;, &quot;A&quot;, lv_prefix);
                        TextExpressionSetToken(&quot;Param/Expression/56AD67D4&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/D1ABC150&quot;));
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/56AD67D4&quot;));
                        gv_hints[lp_player] = StringReplace(gv_hints[lp_player], &quot;1&quot;, 23, 23);
                        lv_changed = true;
                    }
                    if ((lv_changed == true)) {
                        BankLoad(&quot;nostrobskalufs&quot;, lp_player);
                        BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;IU8eR7g&quot;, gv_hints[lp_player]);
                        BankSave(BankLastCreated());
                    }
                    else {
                    }
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="60A6B0E7">
        <ScriptCode>
            void gf_AdminSetup (int lp_player) {
                // Implementation
                if (gv_handle[lp_player] == &quot;2-S2-1-313986&quot; || // Qancakes Euro
                    gv_handle[lp_player] == &quot;1-S2-1-3931630&quot; || //Qancakes Na
                    gv_handle[lp_player] == &quot;2-S2-1-4691978&quot; || // Broot Euro
                    gv_handle[lp_player] == &quot;1-S2-1-4047328&quot;) { // Broot Na
                    gv_admin[lp_player] = true;
                }
                else {
                }
            }
        </ScriptCode>
    </Element>
    <Element Type="Category" Id="ADBA1467">
        <Item Type="Category" Id="C93CC0F1"/>
        <Item Type="Category" Id="C41A7BF0"/>
        <Item Type="Category" Id="A6FE3DCF"/>
        <Item Type="Category" Id="EEDFEED6"/>
        <Item Type="Category" Id="7E044C8B"/>
        <Item Type="Category" Id="5A4BB6DF"/>
        <Item Type="Category" Id="693D7148"/>
        <Item Type="Category" Id="75A45589"/>
        <Item Type="Category" Id="7FEF4937"/>
        <Item Type="Category" Id="ABCC6245"/>
        <Item Type="Category" Id="2117A073"/>
        <Item Type="Category" Id="271F4DEB"/>
        <Item Type="Category" Id="CC27E44D"/>
        <Item Type="Category" Id="6FB42C00"/>
        <Item Type="Category" Id="46B3D12C"/>
        <Item Type="Category" Id="4DD99B33"/>
        <Item Type="Category" Id="F12EEFCA"/>
        <Item Type="Category" Id="83B85816"/>
        <Item Type="Category" Id="B5D85B6E"/>
        <Item Type="Category" Id="D49614B1"/>
        <Item Type="Category" Id="5B662C82"/>
        <Item Type="Category" Id="6BBD6982"/>
        <Item Type="Category" Id="28414858"/>
        <Item Type="Category" Id="40858476"/>
        <Item Type="Category" Id="04CA129D"/>
        <Item Type="Category" Id="F4108F7E"/>
        <Item Type="Category" Id="3F427E36"/>
        <Item Type="Category" Id="9BE61B8C"/>
    </Element>
    <Element Type="Category" Id="C93CC0F1">
        <Item Type="CustomScript" Id="7DDEBDEA"/>
        <Item Type="CustomScript" Id="81B02E43"/>
        <Item Type="CustomScript" Id="046EBAAA"/>
        <Item Type="CustomScript" Id="90DD6433"/>
        <Item Type="CustomScript" Id="90070A18"/>
        <Item Type="CustomScript" Id="35FC527F"/>
        <Item Type="CustomScript" Id="BEA20964"/>
        <Item Type="CustomScript" Id="F3D1678F"/>
        <Item Type="CustomScript" Id="3E8F91BA"/>
        <Item Type="CustomScript" Id="8E025869"/>
        <Item Type="CustomScript" Id="392E7870"/>
        <Item Type="CustomScript" Id="4C1FB9B7"/>
        <Item Type="CustomScript" Id="F8BA060F"/>
        <Item Type="CustomScript" Id="62CF3FBA"/>
        <Item Type="CustomScript" Id="0848C25F"/>
    </Element>
    <Element Type="CustomScript" Id="7DDEBDEA">
        <ScriptCode>
            bool gt_PreInitialization_Func (bool testConds, bool runActions) {
                int autoDB0FDAC4_ae;
                int autoDB0FDAC4_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerDebugEnableType(1, false);
                GameSetSpeedValue(c_gameSpeedNormal);
                GameSetSpeedLocked(true);
                if ((GameAttributeGameValue(&quot;1&quot;) == &quot;0001&quot;)) {
                    gv_gameMode = 1;
                }
                else if ((GameAttributeGameValue(&quot;1&quot;) == &quot;0002&quot;)) {
                    gv_gameMode = 2;
                }
                else if ((GameAttributeGameValue(&quot;1&quot;) == &quot;0003&quot;)) {
                    gv_tutorial = true;
                    TriggerExecute(gt_SetupTutorial1, true, true);
                }
                TriggerExecute(gt_ReprimandedListInfo, true, true);
                TriggerExecute(gt_InitializeText, true, true);
                TriggerExecute(gt_SetupAIChatStrings, true, true);
                TriggerExecute(gt_InitializeDialogs, true, false);
                TriggerExecute(gt_InitializeEnvironment, true, false);
                TriggerExecute(gt_InitializePerks, true, false);
                TriggerExecute(gt_SetupRewardData, true, false);
                CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
                autoDB0FDAC4_ae = gv_players;
                autoDB0FDAC4_ai = 1;
                lv_a = 1;
                for ( ; ( (autoDB0FDAC4_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoDB0FDAC4_ae) || (autoDB0FDAC4_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoDB0FDAC4_ae) ) ; lv_a += autoDB0FDAC4_ai ) {
                    gv_handle[lv_a] = PlayerHandle(lv_a);
                    if ((gv_handle[lv_a] == &quot;&quot;)) {
                        gv_handle[lv_a] = &quot;UnknownHandle&quot;;
                    }
                    else {
                    }
                    gv_reprimanded[lv_a] = gf_ReprimandedPlayer(lv_a);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PreInitialization_Init () {
                gt_PreInitialization = TriggerCreate(&quot;gt_PreInitialization_Func&quot;);
                TriggerAddEventMapInit(gt_PreInitialization);
            }
        </ScriptCode>
        <InitFunc>gt_PreInitialization_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="81B02E43">
        <ScriptCode>
            bool gt_Initialization_Func (bool testConds, bool runActions) {
                int auto4B09C9CF_ae;
                int auto4B09C9CF_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                int lv_c;
                int[gv_maxTeams + 1] lv_offset;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_SyncBanks, true, true);
                TriggerExecute(gt_LoadBank, true, true);
                TriggerExecute(gt_InitializeTeams, true, true);
                UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
                UISetResourceTradingMinorStep(c_resourceTypeMinerals, 25);
                UISetResourceTradingMajorStep(c_resourceTypeMinerals, 50);
                gv_averagePlayerLevel = gf_AveragePlayerLevel(PlayerGroupActive());
                auto4B09C9CF_ae = 14;
                auto4B09C9CF_ai = 1;
                lv_a = 1;
                for ( ; ( (auto4B09C9CF_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto4B09C9CF_ae) || (auto4B09C9CF_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto4B09C9CF_ae) ) ; lv_a += auto4B09C9CF_ai ) {
                    if (((PlayerType(lv_a) == c_playerTypeUser) || (PlayerType(lv_a) == c_playerTypeComputer) || ((gv_aIFFATestingOverride == true) &amp;&amp; (lv_a &lt;= 12)))) {
                        gv_playerData[lv_a].lv_team = gf_GetTeamOfPlayer(lv_a);
                        gv_teamData[gv_playerData[lv_a].lv_team].lv_koboldsTotal += 1;
                        gv_teamData[gv_playerData[lv_a].lv_team].lv_koboldsAlive += 1;
                        PlayerOptionOverride(lv_a, &quot;simplecommandcard&quot;, &quot;0&quot;);
                        PlayerOptionOverride(lv_a, &quot;selectuncontrolable&quot;, &quot;1&quot;);
                        lv_p = gf_GetTeamStart(lv_a);
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Kobold&quot;, 0, lv_a, PointWithOffsetPolar(lv_p, 2.0, (IntToFixed(lv_offset[gv_playerData[lv_a].lv_team]) * (360.0 / libNtve_gf_ArithmeticIntClamp(PlayerGroupCount(gv_teamData[gv_playerData[lv_a].lv_team].lv_members), 1, 100)))), lv_p);
                        lv_offset[gv_playerData[lv_a].lv_team] += 1;
                        gv_playerData[lv_a].lv_kobold = UnitLastCreated();
                        gv_unstuckPoint[lv_a] = UnitGetPosition(gv_playerData[lv_a].lv_kobold);
                        gv_playerData[lv_a].lv_alive = true;
                        CameraPan(lv_a, UnitGetPosition(gv_playerData[lv_a].lv_kobold), 0.0, -1, 10, false);
                        UnitSelect(gv_playerData[lv_a].lv_kobold, lv_a, true);
                        UnitControlGroupAddUnit(lv_a, 1, gv_playerData[lv_a].lv_kobold);
                        gf_ClearResourceReserves(lv_a);
                        gf_SetupAI(gv_playerData[lv_a].lv_kobold);
                        gf_SetupStartingSpells(gv_playerData[lv_a].lv_kobold);
                        gf_SetupStartingItems(gv_playerData[lv_a].lv_kobold, false);
                        gf_SetupPerkBonusi(gv_playerData[lv_a].lv_kobold, false);
                        gf_UpdateSpellCosts(lv_a);
                        gf_UpdateBuildingStats(lv_a);
                        gf_UpdateSkillButton(lv_a);
                        gf_UpdateSkillWindow(lv_a);
                        gf_UpdateWatchTowerGoldCost(lv_a);
                        gf_UpdateForestry(lv_a);
                        gf_UpdateMining(lv_a);
                        gf_UpdateCooking(lv_a);
                        gf_UpdateForaging(lv_a);
                        gf_UpdateArtisanship(lv_a);
                        gf_UpdateStatsAll(lv_a);
                        gf_AdminSetup(lv_a);
                        gf_CheckSeasonalRequirements(lv_a);
                    }
                    else {
                    }
                }
                TriggerExecute(gt_SetupTutorial2, true, true);
                gf_SpawnResources();
                gf_SwapResourceNodes();
                TriggerExecute(gt_InitializeAddon, true, false);
                TriggerExecute(gt_SpecialRewardsList, true, true);
                gv_banksInitialized = true;
                gv_gameStarted = true;
                if ((gf_LastTeamStanding() != -1)) {
                    gf_Endgame(false, false);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Initialization_Init () {
                gt_Initialization = TriggerCreate(&quot;gt_Initialization_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Initialization, 0.125, c_timeGame);
            }
        </ScriptCode>
        <InitFunc>gt_Initialization_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="046EBAAA">
        <ScriptCode>
            bool gt_FadeIn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_VanquisherStart(PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                gv_championGame = gf_ChampionGame();
                CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FadeIn_Init () {
                gt_FadeIn = TriggerCreate(&quot;gt_FadeIn_Func&quot;);
                TriggerAddEventTimeElapsed(gt_FadeIn, 0.5, c_timeGame);
            }
        </ScriptCode>
        <InitFunc>gt_FadeIn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="90DD6433">
        <ScriptCode>
            bool gt_InitializeText_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_tribeNamePool[1] = &quot;Aquilae Tribe&quot;;
                gv_tribeNamePool[2] = &quot;Alnath Tribe&quot;;
                gv_tribeNamePool[3] = &quot;Axanar Tribe&quot;;
                gv_tribeNamePool[4] = &quot;Chysule Tribe&quot;;
                gv_tribeNamePool[5] = &quot;Eridani Tribe&quot;;
                gv_tribeNamePool[6] = &quot;Hawthorn Tribe&quot;;
                gv_tribeNamePool[7] = &quot;Koltaari Tribe&quot;;
                gv_tribeNamePool[8] = &quot;Lorina Tribe&quot;;
                gv_tribeNamePool[9] = &quot;Selay Tribe&quot;;
                gv_tribeNamePool[10] = &quot;Zadar Tribe&quot;;
                gv_tribeNamePool[11] = &quot;Frostburn Tribe&quot;;
                gv_tribeNamePool[12] = &quot;Duskglow Tribe&quot;;
                gv_tribeNamePool[13] = &quot;Happy Tribe&quot;;
                gv_tribeNamePool[14] = &quot;Elder Tribe&quot;;
                gv_tribeNamePool[15] = &quot;Grimwhisker Tribe&quot;;
                gv_tribeNamePool[16] = &quot;Eastmoor Tribe&quot;;
                gv_tribeNamePool[17] = &quot;Westmarch Tribe&quot;;
                gv_tribeNamePool[18] = &quot;Nephalem Tribe&quot;;
                gv_tribeNamePool[19] = &quot;Skovos Tribe&quot;;
                gv_tribeNamePool[20] = &quot;Askari Tribe&quot;;
                gv_tribeNamePool[21] = &quot;Kethryes Tribe&quot;;
                gv_tribeNamePool[22] = &quot;Mage Tribe&quot;;
                gv_tribeNamePool[23] = &quot;Bramwell Tribe&quot;;
                gv_tribeNamePool[24] = &quot;Rakkis Tribe&quot;;
                gv_tribeNamePool[25] = &quot;Sentinel Tribe&quot;;
                gv_tribeNamePool[26] = &quot;Gold Coast Tribe&quot;;
                gv_tribeNamePool[27] = &quot;Blue Candle Tribe&quot;;
                gv_tribeNamePool[28] = &quot;Raven Tribe&quot;;
                gv_tribeNamePool[29] = &quot;Dark Owl Tribe&quot;;
                gv_tribeNamePool[30] = &quot;Stonewatch Tribe&quot;;
                gv_tribeNamePool[31] = &quot;Murloc-slaying Tribe&quot;;
                gv_tribeNamePool[32] = &quot;Deadwind Tribe&quot;;
                gv_tribeNamePool[33] = &quot;Ironfist Tribe&quot;;
                gv_tribeNamePool[34] = &quot;Stormhammer Tribe&quot;;
                gv_tribeNamePool[35] = &quot;Drywhisker Tribe&quot;;
                gv_tribeNamePool[36] = &quot;Noggrin Tribe&quot;;
                gv_tribeNamePool[37] = &quot;Gogger Tribe&quot;;
                gv_tribeNamePool[38] = &quot;Gravelsnout Tribe&quot;;
                gv_tribeNamePool[39] = &quot;Whitewhisker Tribe&quot;;
                gv_tribeNamePool[40] = &quot;Windshear Tribe&quot;;
                gv_tribeNamePool[41] = &quot;Splintertree Tribe&quot;;
                gv_tribeNamePool[42] = &quot;Silverwind Tribe&quot;;
                gv_tribeNamePool[43] = &quot;Greybeard Tribe&quot;;
                gv_tribeNamePool[44] = &quot;Thistlewhisker Tribe&quot;;
                gv_tribeNamePool[45] = &quot;Greensnout Tribe&quot;;
                gv_tribeNamePool[46] = &quot;Thundersong Tribe&quot;;
                gv_tribeNamePool[47] = &quot;Scorn Tribe&quot;;
                gv_tribeNamePool[48] = &quot;Scorched Tribe&quot;;
                gv_tribeNamePool[49] = &quot;Rustmaul Tribe&quot;;
                gv_tribeNamePool[50] = &quot;Dreadmonger Tribe&quot;;
                gv_tribeNamePool[51] = &quot;Deepcave Tribe&quot;;
                gv_tribeNamePool[52] = &quot;Spelunker Tribe&quot;;
                gv_tribeNamePool[53] = &quot;Sunbaked Tribe&quot;;
                gv_tribeNamePool[54] = &quot;Stonecrag Tribe&quot;;
                gv_tribeNamePool[55] = &quot;Charred Tribe&quot;;
                gv_tribeNamePool[56] = &quot;Sirocco Tribe&quot;;
                gv_tribeNamePool[57] = &quot;Coldsnout Tribe&quot;;
                gv_tribeNamePool[58] = &quot;Meinhoff Tribe&quot;;
                gv_tribeNamePool[59] = &quot;Proudwater Tribe&quot;;
                gv_tribeNamePool[60] = &quot;Mistlake Tribe&quot;;
                gv_tribeNamePool[61] = &quot;Nozzlepot Tribe&quot;;
                gv_tribeNamePool[62] = &quot;Friends-with-cats Tribe&quot;;
                gv_tribeNamePool[63] = &quot;Warrior Tribe&quot;;
                gv_tribeNamePool[64] = &quot;Hunter Tribe&quot;;
                gv_tribeNamePool[65] = &quot;Digger Tribe&quot;;
                gv_tribeNamePool[66] = &quot;Tribe of Giants&quot;;
                gv_tribeNamePool[67] = &quot;Mourn&apos;s Stool Tribe&quot;;
                gv_tribeNamePool[68] = &quot;Terok Nor Tribe&quot;;
                gv_tribeNamePool[69] = &quot;Dawn Tribe&quot;;
                gv_tribeNamePool[70] = &quot;Dusk Tribe&quot;;
                gv_tribeNamePool[71] = &quot;Autumn Tribe&quot;;
                gv_tribeNamePool[72] = &quot;Corrine Tribe&quot;;
                gv_tribeNamePool[73] = &quot;White Rose Tribe&quot;;
                gv_tribeNamePool[74] = &quot;Corimont Tribe&quot;;
                gv_tribeNamePool[75] = &quot;Forsaken Tribe&quot;;
                gv_tribeNamePool[76] = &quot;Borg Tribe&quot;;
                gv_tribeNamePool[77] = &quot;Tirana Tribe&quot;;
                gv_tribeNamePool[78] = &quot;Makkara Tribe&quot;;
                gv_tribeNamePool[79] = &quot;Coldheart Tribe&quot;;
                gv_tribeNamePool[80] = &quot;Stoneheart Tribe&quot;;
                gv_tribeNamePool[81] = &quot;Aventine Tribe&quot;;
                gv_tribeNamePool[82] = &quot;Vesta Tribe&quot;;
                gv_tribeNamePool[83] = &quot;Rio Grande Tribe&quot;;
                gv_tribeNamePool[84] = &quot;Bacco Tribe&quot;;
                gv_tribeNamePool[85] = &quot;Kamemor Tribe&quot;;
                gv_tribeNamePool[86] = &quot;Pouting Tribe&quot;;
                gv_teamColorPool[1] = libNtve_gf_ConvertPlayerColorToColor(1);
                gv_teamColorPool[2] = libNtve_gf_ConvertPlayerColorToColor(2);
                gv_teamColorPool[3] = libNtve_gf_ConvertPlayerColorToColor(3);
                gv_teamColorPool[4] = libNtve_gf_ConvertPlayerColorToColor(4);
                gv_teamColorPool[5] = libNtve_gf_ConvertPlayerColorToColor(5);
                gv_teamColorPool[6] = libNtve_gf_ConvertPlayerColorToColor(6);
                gv_teamColorPool[7] = libNtve_gf_ConvertPlayerColorToColor(7);
                gv_teamColorPool[8] = libNtve_gf_ConvertPlayerColorToColor(8);
                gv_teamColorPool[9] = libNtve_gf_ConvertPlayerColorToColor(9);
                gv_teamColorPool[10] = libNtve_gf_ConvertPlayerColorToColor(10);
                gv_teamColorPool[11] = libNtve_gf_ConvertPlayerColorToColor(11);
                gv_teamColorPool[12] = libNtve_gf_ConvertPlayerColorToColor(12);
                gv_teamColorPool[13] = libNtve_gf_ConvertPlayerColorToColor(13);
                gv_teamColorPool[14] = libNtve_gf_ConvertPlayerColorToColor(14);
                gv_teamColorPool[15] = libNtve_gf_ConvertPlayerColorToColor(15);
                gv_aINamePool[1] = &quot;Qanbot&quot;;
                gv_aINamePool[2] = &quot;Nizius&quot;;
                gv_aINamePool[3] = &quot;Crabbo&quot;;
                gv_aINamePool[4] = &quot;Koddum&quot;;
                gv_aINamePool[5] = &quot;Bokkum&quot;;
                gv_aINamePool[6] = &quot;Toghson&quot;;
                gv_aINamePool[7] = &quot;Nubbet&quot;;
                gv_aINamePool[8] = &quot;Kyx&quot;;
                gv_aINamePool[9] = &quot;Nisse&quot;;
                gv_aINamePool[10] = &quot;Nostrob&quot;;
                gv_aINamePool[11] = &quot;Peikko&quot;;
                gv_aINamePool[12] = &quot;Kahvimies&quot;;
                gv_aINamePool[13] = &quot;Sigurd&quot;;
                gv_aINamePool[14] = &quot;Gilgamesh&quot;;
                gv_aINamePool[15] = &quot;Ragnar&quot;;
                gv_aINamePool[16] = &quot;Burjar&quot;;
                gv_aINamePool[17] = &quot;Flintdagger&quot;;
                gv_aINamePool[18] = &quot;Goldtooth&quot;;
                gv_aINamePool[19] = &quot;Narg&quot;;
                gv_aINamePool[20] = &quot;Ruklar&quot;;
                gv_aINamePool[21] = &quot;Grizlak&quot;;
                gv_aINamePool[22] = &quot;Snivvle&quot;;
                gv_aINamePool[23] = &quot;Afvaldr&quot;;
                gv_aINamePool[24] = &quot;Ogmundr&quot;;
                gv_aINamePool[25] = &quot;Brynjulfr&quot;;
                gv_aINamePool[26] = &quot;Farmann&quot;;
                gv_aINamePool[27] = &quot;Glogg&quot;;
                gv_aINamePool[28] = &quot;Ulfric Stormsnout&quot;;
                gv_aINamePool[29] = &quot;Temba Widepaw&quot;;
                gv_aINamePool[30] = &quot;Brownbeard&quot;;
                gv_aINamePool[31] = &quot;Arngeir&quot;;
                gv_aINamePool[32] = &quot;Jarl&quot;;
                gv_aINamePool[33] = &quot;General Galmar&quot;;
                gv_aINamePool[34] = &quot;Richbold&quot;;
                gv_aINamePool[35] = &quot;Overseer Mogh&quot;;
                gv_aINamePool[36] = &quot;Mourn&quot;;
                gv_aINamePool[37] = &quot;Meekwhisker&quot;;
                gv_aINamePool[38] = &quot;Cruelwhisker&quot;;
                gv_aINamePool[39] = &quot;Eru&apos;dak&quot;;
                gv_aINamePool[40] = &quot;T&apos;prakz&quot;;
                gv_aINamePool[41] = &quot;Earhammer&quot;;
                gv_aINamePool[42] = &quot;Eyegouger&quot;;
                gv_aINamePool[43] = &quot;Darmok&quot;;
                gv_aINamePool[44] = &quot;Barthas&quot;;
                gv_aINamePool[45] = &quot;Tik&quot;;
                gv_aINamePool[46] = &quot;Zek&quot;;
                gv_aINamePool[47] = &quot;Nagus Kolx&quot;;
                gv_aINamePool[48] = &quot;Grim Magnus&quot;;
                gv_aINamePool[49] = &quot;Stormrunner&quot;;
                gv_aINamePool[50] = &quot;Magtheridus&quot;;
                gv_aINamePool[51] = &quot;Inflated&quot;;
                gv_aINamePool[52] = &quot;Solidifire&quot;;
                gv_aINamePool[53] = &quot;Private Dexter Grif&quot;;
                gv_aINamePool[54] = &quot;Craftor&quot;;
                gv_aINamePool[55] = &quot;WindFish&quot;;
                gv_aINamePool[56] = &quot;pox&quot;;
                gv_aINamePool[57] = &quot;Fnurkz&quot;;
                gv_aINamePool[58] = &quot;Cyriaque&quot;;
                gv_aINamePool[59] = &quot;Elfiki&quot;;
                gv_aINamePool[60] = &quot;Pyrithi&quot;;
                gv_aINamePool[61] = &quot;Esperanza&quot;;
                gv_aINamePool[62] = &quot;Thelm&quot;;
                gv_aINamePool[63] = &quot;Hjolard&quot;;
                gv_aINamePool[64] = &quot;Ogmann&quot;;
                gv_aINamePool[65] = &quot;Rorthor&quot;;
                gv_aINamePool[66] = &quot;Jorunn&quot;;
                gv_aINamePool[67] = &quot;Nedrek&quot;;
                gv_aINamePool[68] = &quot;Alvor&quot;;
                gv_aINamePool[69] = &quot;Horming&quot;;
                gv_aINamePool[70] = &quot;Berj&quot;;
                gv_aINamePool[71] = &quot;Saborm&quot;;
                gv_aINamePool[72] = &quot;Red-Boot&quot;;
                gv_aINamePool[73] = &quot;Ergrod&quot;;
                gv_aINamePool[74] = &quot;Otalvor&quot;;
                gv_aINamePool[75] = &quot;Arvild&quot;;
                gv_aINamePool[76] = &quot;Lothgar&quot;;
                gv_aINamePool[77] = &quot;Vestrek&quot;;
                gv_aINamePool[78] = &quot;Jeggi&quot;;
                gv_aINamePool[79] = &quot;Gap-Tooth&quot;;
                gv_aINamePool[80] = &quot;Marvin&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializeText_Init () {
                gt_InitializeText = TriggerCreate(&quot;gt_InitializeText_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializeText_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="90070A18">
        <ScriptCode>
            bool gt_InitializeDialogs_Func (bool testConds, bool runActions) {
                int auto05B4DD58_ae;
                int auto05B4DD58_ai;
                int auto4BCF03FF_ae;
                int auto4BCF03FF_ai;
                int autoCCF7BB74_ae;
                int autoCCF7BB74_ai;
                int auto3A1045B3_ae;
                int auto3A1045B3_ai;
                int auto972AA107_ae;
                int auto972AA107_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_SetupPGSWindow, true, true);
                TriggerExecute(gt_SetupRewardsDialog, true, true);
                TriggerExecute(gt_InitializeDayTimerDialog, true, true);
                TriggerExecute(gt_DTConfigSetup, true, true);
                DialogCreate(1200, 540, c_anchorCenter, 0, -125, true);
                gv_perkWindow = DialogLastCreated();
                DialogSetVisible(gv_perkWindow, PlayerGroupAll(), false);
                DialogSetTransparency(gv_perkWindow, 0.0);
                libNtve_gf_CreateDialogItemLabel(gv_perkWindow, 250, 50, c_anchorTopLeft, 250, 50, StringExternal(&quot;Param/Value/91FE84CC&quot;), Color(100,100,100), false, 2.0);
                gv_perkTitle = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_perkWindow, 160, 45, c_anchorTopRight, 170, 40, StringExternal(&quot;Param/Value/2A71178A&quot;), StringExternal(&quot;Param/Value/4E2469CE&quot;), &quot;&quot;);
                gv_perkReset = DialogControlLastCreated();
                auto05B4DD58_ae = 4;
                auto05B4DD58_ai = 1;
                lv_b = 1;
                for ( ; ( (auto05B4DD58_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto05B4DD58_ae) || (auto05B4DD58_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto05B4DD58_ae) ) ; lv_b += auto05B4DD58_ai ) {
                    libNtve_gf_CreateDialogItemLabel(gv_perkWindow, 60, 50, c_anchorTopLeft, 100, (25 + (lv_b * 100)), StringExternal(&quot;Param/Value/A88514B9&quot;), Color(100,100,100), false, 2.0);
                    gv_perkTierLabel[lv_b] = DialogControlLastCreated();
                    auto4BCF03FF_ae = 10;
                    auto4BCF03FF_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto4BCF03FF_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto4BCF03FF_ae) || (auto4BCF03FF_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto4BCF03FF_ae) ) ; lv_a += auto4BCF03FF_ai ) {
                        libNtve_gf_CreateDialogItemButton(gv_perkWindow, 76, 76, c_anchorTopLeft, (200 + ((lv_a - 1) * 89)), (0 + (lv_b * 100)), StringExternal(&quot;Param/Value/1B3D6AEB&quot;), StringExternal(&quot;Param/Value/0EB3E41F&quot;), &quot;&quot;);
                        gv_perkButton[lv_b][lv_a] = DialogControlLastCreated();
                        libNtve_gf_CreateDialogItemImage(gv_perkWindow, 76, 76, c_anchorTopLeft, (200 + ((lv_a - 1) * 89)), (0 + (lv_b * 100)), StringExternal(&quot;Param/Value/B9294FF8&quot;), &quot;Assets\\Textures\\white32.dds&quot;, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                        gv_perkImage[lv_b][lv_a] = DialogControlLastCreated();
                        libNtve_gf_CreateDialogItemImage(gv_perkWindow, 140, 140, c_anchorTopLeft, 25, 25, StringExternal(&quot;Param/Value/939930B8&quot;), &quot;Assets\\Textures\\ui_research_button_protoss_researched.dds&quot;, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                        gv_perkMarker[lv_b][lv_a] = DialogControlLastCreated();
                        DialogControlSetVisible(gv_perkMarker[lv_b][lv_a], PlayerGroupAll(), false);
                        libNtve_gf_SetDialogItemRenderPriority(gv_perkMarker[lv_b][lv_a], 513, PlayerGroupAll());
                        DialogControlSetPositionRelative(gv_perkMarker[lv_b][lv_a], PlayerGroupAll(), c_anchorCenter, gv_perkButton[lv_b][lv_a], c_anchorCenter, 0, 0);
                        libNtve_gf_SetDialogItemBlendMode(gv_perkMarker[lv_b][lv_a], c_triggerBlendModeNormal, PlayerGroupAll());
                    }
                }
                DialogCreate(260, 65, c_anchorCenter, -720, -245, true);
                gv_perkDialogSmall = DialogLastCreated();
                DialogSetVisible(gv_perkDialogSmall, PlayerGroupAll(), false);
                DialogSetTransparency(gv_perkDialogSmall, 10.0);
                libNtve_gf_CreateDialogItemButton(gv_perkDialogSmall, 220, 32, c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/99C93ABE&quot;), StringExternal(&quot;Param/Value/1DC6FB0C&quot;), &quot;&quot;);
                gv_perkDialogSmallBTN = DialogControlLastCreated();
                DialogCreate(700, 170, c_anchorCenter, 0, -250, true);
                gv_rezzDialog = DialogLastCreated();
                DialogSetVisible(gv_rezzDialog, PlayerGroupAll(), false);
                DialogSetTransparency(gv_rezzDialog, 10.0);
                libNtve_gf_CreateDialogItemLabel(gv_rezzDialog, 350, 50, c_anchorTopLeft, 215, 45, StringExternal(&quot;Param/Value/E4301301&quot;), Color(100,100,100), false, 2.0);
                gv_rezzDialogTitle = DialogControlLastCreated();
                autoCCF7BB74_ae = 4;
                autoCCF7BB74_ai = 1;
                lv_a = 1;
                for ( ; ( (autoCCF7BB74_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoCCF7BB74_ae) || (autoCCF7BB74_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoCCF7BB74_ae) ) ; lv_a += autoCCF7BB74_ai ) {
                    libNtve_gf_CreateDialogItemButton(gv_rezzDialog, 150, 50, c_anchorTopLeft, (50 + ((lv_a - 1) * 150)), 75, StringExternal(&quot;Param/Value/7800084B&quot;), StringExternal(&quot;Param/Value/EEFC45E8&quot;), &quot;&quot;);
                    gv_rezzDialogBTN[lv_a] = DialogControlLastCreated();
                }
                DialogCreate(200, 250, c_anchorBottomRight, 423, -5, true);
                gv_statusDialog = DialogLastCreated();
                DialogSetVisible(gv_statusDialog, PlayerGroupAll(), true);
                DialogSetTransparency(gv_statusDialog, 25.0);
                libNtve_gf_CreateDialogItemLabel(gv_statusDialog, 150, 50, c_anchorTop, 28, 55, StringExternal(&quot;Param/Value/A7752C27&quot;), ColorWithAlpha(0,0,0,0), false, 0.0);
                gv_warmthItem = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_statusDialog, 150, 50, c_anchorTop, 28, 110, StringExternal(&quot;Param/Value/DC6D9395&quot;), ColorWithAlpha(0,0,0,0), false, 0.0);
                gv_hungerItem = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_statusDialog, 150, 50, c_anchorTop, 28, 165, StringExternal(&quot;Param/Value/2676BD03&quot;), ColorWithAlpha(0,0,0,0), false, 0.0);
                gv_fatigueItem = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_statusDialog, 50, 50, c_anchorBottomRight, 0, -2, StringExternal(&quot;Param/Value/B76656EC&quot;), ColorWithAlpha(0,0,0,0), false, 0.0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal(&quot;Param/Value/2507D9A8&quot;), PlayerGroupAll());
                DialogCreate(200, 65, c_anchorBottomRight, 423, 230, true);
                gv_skillWindowSmall = DialogLastCreated();
                DialogSetVisible(gv_skillWindowSmall, PlayerGroupAll(), true);
                DialogSetTransparency(gv_skillWindowSmall, 10.0);
                libNtve_gf_CreateDialogItemButton(gv_skillWindowSmall, 160, 32, c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/0E27E203&quot;), StringExternal(&quot;Param/Value/C38CB4E9&quot;), &quot;&quot;);
                gv_skillButton = DialogControlLastCreated();
                DialogCreate(300, 310, c_anchorBottomRight, 375, 283, true);
                gv_skillWindowBig = DialogLastCreated();
                DialogSetVisible(gv_skillWindowBig, PlayerGroupAll(), false);
                DialogSetTransparency(gv_skillWindowBig, 10.0);
                libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 50, (StringExternal(&quot;Param/Value/A355D14A&quot;) + IntToText(0)), Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal(&quot;Param/Value/BC64D793&quot;), PlayerGroupAll());
                gv_skillLabel[1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 90, (StringExternal(&quot;Param/Value/5C3A8B43&quot;) + IntToText(0)), Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal(&quot;Param/Value/7759EA82&quot;), PlayerGroupAll());
                gv_skillLabel[2] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 130, (StringExternal(&quot;Param/Value/EBE656F6&quot;) + IntToText(0)), Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal(&quot;Param/Value/58B4BBAD&quot;), PlayerGroupAll());
                gv_skillLabel[3] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 170, (StringExternal(&quot;Param/Value/75D794FE&quot;) + IntToText(0)), Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal(&quot;Param/Value/F7BC9EAB&quot;), PlayerGroupAll());
                gv_skillLabel[4] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTopLeft, 50, 210, (StringExternal(&quot;Param/Value/2B12FD93&quot;) + IntToText(0)), Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal(&quot;Param/Value/DFB326AE&quot;), PlayerGroupAll());
                gv_skillLabel[5] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_skillWindowBig, 200, 50, c_anchorTop, 20, 250, (StringExternal(&quot;Param/Value/4B46B8EE&quot;) + IntToText(0)), Color(100,100,100), false, 2.0);
                gv_skillLabel[6] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 40, StringExternal(&quot;Param/Value/7579D239&quot;), StringExternal(&quot;Param/Value/BD65CBB0&quot;), &quot;&quot;);
                gv_bTNSkillIncrease[1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 80, StringExternal(&quot;Param/Value/158E297A&quot;), StringExternal(&quot;Param/Value/D0387AA4&quot;), &quot;&quot;);
                gv_bTNSkillIncrease[2] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 120, StringExternal(&quot;Param/Value/288F920A&quot;), StringExternal(&quot;Param/Value/12FFBE22&quot;), &quot;&quot;);
                gv_bTNSkillIncrease[3] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 160, StringExternal(&quot;Param/Value/D998387A&quot;), StringExternal(&quot;Param/Value/DFE5827F&quot;), &quot;&quot;);
                gv_bTNSkillIncrease[4] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_skillWindowBig, 40, 40, c_anchorTopRight, 40, 200, StringExternal(&quot;Param/Value/9962E7BB&quot;), StringExternal(&quot;Param/Value/859BD04A&quot;), &quot;&quot;);
                gv_bTNSkillIncrease[5] = DialogControlLastCreated();
                DialogCreate(210, 65, c_anchorBottomRight, 433, 260, true);
                gv_minimalistSkillDialog = DialogLastCreated();
                DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupAll(), true);
                DialogSetImage(gv_minimalistSkillDialog, &quot;Assets\\Textures\\blank.dds&quot;);
                libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 40, 5, StringExternal(&quot;Param/Value/763EE2D4&quot;), StringExternal(&quot;Param/Value/ED5E8978&quot;), &quot;&quot;);
                gv_minimalistSkillDialogItem[1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 72, 5, StringExternal(&quot;Param/Value/15BA58FF&quot;), StringExternal(&quot;Param/Value/8306A585&quot;), &quot;&quot;);
                gv_minimalistSkillDialogItem[2] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 104, 5, StringExternal(&quot;Param/Value/9514C062&quot;), StringExternal(&quot;Param/Value/3F3369C2&quot;), &quot;&quot;);
                gv_minimalistSkillDialogItem[3] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 136, 5, StringExternal(&quot;Param/Value/15E306B2&quot;), StringExternal(&quot;Param/Value/0B702CB8&quot;), &quot;&quot;);
                gv_minimalistSkillDialogItem[4] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_minimalistSkillDialog, 34, 34, c_anchorTopLeft, 167, 5, StringExternal(&quot;Param/Value/422DDE49&quot;), StringExternal(&quot;Param/Value/00FAA468&quot;), &quot;&quot;);
                gv_minimalistSkillDialogItem[5] = DialogControlLastCreated();
                auto3A1045B3_ae = 5;
                auto3A1045B3_ai = 1;
                lv_a = 1;
                for ( ; ( (auto3A1045B3_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto3A1045B3_ae) || (auto3A1045B3_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto3A1045B3_ae) ) ; lv_a += auto3A1045B3_ai ) {
                    DialogControlFadeTransparency(gv_minimalistSkillDialogItem[lv_a], PlayerGroupAll(), 0.0, 10.0);
                }
                DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
                DialogSetImageVisible(DialogLastCreated(), false);
                DialogSetFullscreen(DialogLastCreated(), true);
                gv_woundedFlash = DialogLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/1D7115EA&quot;), &quot;Assets\\Textures\\ui_ingame_effects_splash2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_woundedFlashImage = DialogControlLastCreated();
                DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
                DialogCreate(300, 80, c_anchorLeft, 0, -100, false);
                gv_observeRequest = DialogLastCreated();
                DialogSetVisible(gv_observeRequest, PlayerGroupAll(), false);
                libNtve_gf_CreateDialogItemButton(gv_observeRequest, 250, 40, c_anchorTopLeft, 25, 20, StringExternal(&quot;Param/Value/78914B16&quot;), StringExternal(&quot;Param/Value/537E3DCA&quot;), &quot;&quot;);
                gv_observeRequestBtn = DialogControlLastCreated();
                auto972AA107_ae = gv_players;
                auto972AA107_ai = 1;
                lv_a = 1;
                for ( ; ( (auto972AA107_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto972AA107_ae) || (auto972AA107_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto972AA107_ae) ) ; lv_a += auto972AA107_ai ) {
                    DialogCreate(380, 80, c_anchorRight, 0, -100, false);
                    gv_observeAnswer[lv_a] = DialogLastCreated();
                    DialogSetVisible(gv_observeAnswer[lv_a], PlayerGroupAll(), false);
                    TextExpressionSetToken(&quot;Param/Expression/145BC7E7&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/05BB6ADD&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/145BC7E7&quot;, &quot;B&quot;, PlayerName(lv_a));
                    TextExpressionSetToken(&quot;Param/Expression/145BC7E7&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/ECB5AF49&quot;));
                    libNtve_gf_CreateDialogItemButton(gv_observeAnswer[lv_a], 265, 40, c_anchorTopLeft, 25, 20, StringExternal(&quot;Param/Value/6149DA39&quot;), TextExpressionAssemble(&quot;Param/Expression/145BC7E7&quot;), &quot;&quot;);
                    gv_observeAnswerBtnYes[lv_a] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_observeAnswer[lv_a], 70, 40, c_anchorTopRight, 25, 20, StringExternal(&quot;Param/Value/EFE81291&quot;), StringExternal(&quot;Param/Value/DCB2CA2A&quot;), &quot;&quot;);
                    gv_observeAnswerBtnNo[lv_a] = DialogControlLastCreated();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializeDialogs_Init () {
                gt_InitializeDialogs = TriggerCreate(&quot;gt_InitializeDialogs_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializeDialogs_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="35FC527F">
        <ScriptCode>
            bool gt_InitializeEnvironment_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                unitgroup lv_temp;
                unitgroup lv_temp2;
                unitgroup lv_temp3;
                unit lv_pick;
                point lv_p;
                // Variable Initialization
                lv_temp = UnitGroupEmpty();
                lv_temp2 = UnitGroupEmpty();
                lv_temp3 = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/3A69C6B0&quot;), 0), StringExternal(&quot;Param/Value/06977190&quot;), StringExternal(&quot;Param/Value/3DF8EB68&quot;), &quot;PerkIcons\\PerkListener.dds&quot;);
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/78B654ED&quot;), 0), StringExternal(&quot;Param/Value/FD23247A&quot;), StringExternal(&quot;Param/Value/893386C1&quot;), &quot;PerkIcons\\PerkCombatTraining.dds&quot;);
                TipAlertPanelClear(PlayerGroupAll());
                GameSetLighting(&quot;Haven&quot;, 0.0);
                GameTimeOfDaySet(&quot;12:00:00&quot;);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
                UnitSetInfoText(UnitFromId(2745), StringExternal(&quot;Param/Value/1A5E4F86&quot;), StringExternal(&quot;Param/Value/DEEAA519&quot;), StringExternal(&quot;Param/Value/75483908&quot;));
                UnitSetInfoText(UnitFromId(2316), StringExternal(&quot;Param/Value/712255A2&quot;), StringExternal(&quot;Param/Value/9F5B8587&quot;), StringExternal(&quot;Param/Value/7718234E&quot;));
                gv_sheepQuota = 100;
                gv_blueJunglefowlQuota = 80;
                gv_wolfQuota = 40;
                gv_direWolfQuota = 20;
                gv_birdQuota = 35;
                gv_elderTreeQuota = 20;
                gv_bearQuota = 15;
                gv_frostBearQuota = 45;
                gv_stagQuota = 15;
                gv_multiTeamStart[1] = PointFromId(3816);
                gv_multiTeamStart[2] = PointFromId(3818);
                gv_multiTeamStart[3] = PointFromId(3819);
                gv_multiTeamStart[4] = PointFromId(3820);
                gv_multiTeamStart[5] = PointFromId(3822);
                gv_multiTeamStart[6] = PointFromId(3817);
                gv_multiTeamStart[7] = PointFromId(3823);
                gv_multiTeamStart[8] = PointFromId(3824);
                gv_multiTeamStart[9] = PointFromId(3825);
                gv_multiTeamStart[10] = PointFromId(3826);
                gv_multiTeamStart[11] = PointFromId(4238);
                gv_multiTeamStart[12] = PointFromId(4239);
                gv_multiTeamStart[13] = PointFromId(4240);
                gv_multiTeamStart[14] = PointFromId(4241);
                gv_arenaSpectator[0] = PointFromId(3932);
                gv_arenaSpectator[1] = PointFromId(3923);
                gv_arenaSpectator[2] = PointFromId(3924);
                gv_arenaSpectator[3] = PointFromId(3925);
                gv_arenaSpectator[4] = PointFromId(3926);
                gv_arenaSpectator[5] = PointFromId(3927);
                gv_arenaSpectator[6] = PointFromId(3928);
                gv_arenaSpectator[7] = PointFromId(3929);
                gv_arenaSpectator[8] = PointFromId(3930);
                gv_arenaSpectator[9] = PointFromId(3931);
                gf_SetScaledStats(&quot;Bear&quot;, 15);
                gf_SetScaledStats(&quot;Dog&quot;, 0);
                TriggerExecute(gt_SetupFishData, true, false);
                TriggerExecute(gt_ExpeditionData, true, false);
                if ((gv_tutorial == false)) {
                    if ((gv_activeTeams &gt; 2)) {
                        TimerStart(gv_questDelayTimer, (gv_questInitialDelay / 2.0), false, c_timeGame);
                    }
                    else {
                        TimerStart(gv_questDelayTimer, gv_questInitialDelay, false, c_timeGame);
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializeEnvironment_Init () {
                gt_InitializeEnvironment = TriggerCreate(&quot;gt_InitializeEnvironment_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializeEnvironment_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BEA20964">
        <ScriptCode>
            bool gt_InitializeAddon_Func (bool testConds, bool runActions) {
                int autoCB5CF6F8_ae;
                int autoCB5CF6F8_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                autoCB5CF6F8_ae = gv_players;
                autoCB5CF6F8_ai = 1;
                lv_a = 1;
                for ( ; ( (autoCB5CF6F8_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoCB5CF6F8_ae) || (autoCB5CF6F8_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoCB5CF6F8_ae) ) ; lv_a += autoCB5CF6F8_ai ) {
                    if ((gv_playerData[lv_a].lv_alive == true)) {
                        gv_playerData[lv_a].lv_warmth += 100.0;
                        gv_playerData[lv_a].lv_hunger += 100.0;
                        gv_playerData[lv_a].lv_stamina += 100.0;
                        gf_UpdateHighlightTooltip(lv_a);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializeAddon_Init () {
                gt_InitializeAddon = TriggerCreate(&quot;gt_InitializeAddon_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializeAddon_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F3D1678F">
        <ScriptCode>
            bool gt_StartHint_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_lastVersion;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_reprimanded[PlayerGroupLoopCurrent()] == true)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E3E38666&quot;));
                    }
                    else {
                    }
                    if ((StringSub(gv_hints[PlayerGroupLoopCurrent()], 1, 1) == &quot;0&quot;)) {
                        gf_InGameHint(&quot;start&quot;, PlayerGroupLoopCurrent());
                    }
                    else {
                    }
                    if ((gv_gameMode == 2) &amp;&amp; (StringSub(gv_hints[PlayerGroupLoopCurrent()], 23, 23) == &quot;0&quot;)) {
                        gf_InGameHint(&quot;defense&quot;, PlayerGroupLoopCurrent());
                    }
                    else {
                    }
                    if ((gv_winterHolidays == true)) {
                        VisExploreArea(PlayerGroupLoopCurrent(), RegionCircle(PointFromId(4279), 4.0), true, false);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartHint_Init () {
                gt_StartHint = TriggerCreate(&quot;gt_StartHint_Func&quot;);
                TriggerAddEventTimeElapsed(gt_StartHint, 2.0, c_timeGame);
            }
        </ScriptCode>
        <InitFunc>gt_StartHint_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3E8F91BA">
        <ScriptCode>
            bool gt_StartPatch_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_gameVersion != gv_lastGameVersion[PlayerGroupLoopCurrent()])) {
                        SoundPlay(SoundLink(&quot;UI_TerranNewTechAvailable&quot;, -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/27BC7167&quot;));
                        BankLoad(&quot;nostrobskalufs&quot;, PlayerGroupLoopCurrent());
                        BankValueSetFromFixed(BankLastCreated(), &quot;stats&quot;, &quot;LGVP&quot;, gv_gameVersion);
                        BankSave(BankLastCreated());
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartPatch_Init () {
                gt_StartPatch = TriggerCreate(&quot;gt_StartPatch_Func&quot;);
                TriggerAddEventTimeElapsed(gt_StartPatch, 15.0, c_timeGame);
            }
        </ScriptCode>
        <InitFunc>gt_StartPatch_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8E025869">
        <ScriptCode>
            bool gt_TheBigPeriod_Func (bool testConds, bool runActions) {
                int auto106F2693_ae;
                int auto106F2693_ai;
                int auto5ECBA2F4_ae;
                int auto5ECBA2F4_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                unit lv_target;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_gameOver == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gv_periodCycle &gt;= 100) {
                    gv_periodCycle = 1;
                }
                else {
                    gv_periodCycle = gv_periodCycle + 1;
                }
                TriggerDebugOutput(1, (StringExternal(&quot;Param/Value/B026812D&quot;) + (IntToText(gv_periodCycle) + StringExternal(&quot;Param/Value/751881D6&quot;))), false);
                if ((gv_gameDuration &lt; 3600.0)) {
                    gv_gameDuration += gv_periodInterval;
                }
                else {
                }
                if (gf_DayNightCyclePaused()) {
                }
                else {
                    gf_DayNightCycle();
                }
                gf_RainLoop();
                gf_WinterLoop();
                auto106F2693_ae = gv_players;
                auto106F2693_ai = 1;
                lv_a = 1;
                for ( ; ( (auto106F2693_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto106F2693_ae) || (auto106F2693_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto106F2693_ae) ) ; lv_a += auto106F2693_ai ) {
                    if ((gv_playerData[lv_a].lv_alive == true)) {
                        TriggerDebugOutput(1, (StringExternal(&quot;Param/Value/156F62D6&quot;) + (IntToText(lv_a) + StringExternal(&quot;Param/Value/9AA11BAB&quot;))), false);
                        gf_KoboldHealthStatus(gv_playerData[lv_a].lv_kobold);
                        TriggerDebugOutput(1, StringExternal(&quot;Param/Value/73222C8D&quot;), false);
                        if ((UnitHasBehavior(gv_playerData[lv_a].lv_kobold, &quot;Stationary&quot;) == true) &amp;&amp; (gf_UnitIsBusy(gv_playerData[lv_a].lv_kobold) == false)) {
                            lv_target = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_playerData[lv_a].lv_kobold), 1.0, UnitGetFacing(gv_playerData[lv_a].lv_kobold)), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterEnemy) | (1 &lt;&lt; c_targetFilterArmored) | (1 &lt;&lt; c_targetFilterBiological) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHover) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 1);
                            if (gf_UnitExists(lv_target) &amp;&amp; (AngleBetweenPoints(UnitGetPosition(gv_playerData[lv_a].lv_kobold), UnitGetPosition(lv_target)) == UnitGetFacing(gv_playerData[lv_a].lv_kobold)) &amp;&amp; (UnitHasBehavior(lv_target, &quot;NodeGatherDelay&quot;) == false)) {
                                UnitBehaviorAdd(lv_target, &quot;NodeGatherDelay&quot;, lv_target, 1);
                                UnitCreateEffectUnit(gv_playerData[lv_a].lv_kobold, &quot;GatheringResourcesStart&quot;, lv_target);
                            }
                            else {
                            }
                        }
                        else {
                        }
                        UnitGroupLoopBegin(gv_playerData[lv_a].lv_murlocSlaves);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            if ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Stationary&quot;) == true) &amp;&amp; (gf_UnitIsBusy(UnitGroupLoopCurrent()) == false)) {
                                lv_target = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 1.0, UnitGetFacing(UnitGroupLoopCurrent())), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterEnemy) | (1 &lt;&lt; c_targetFilterArmored) | (1 &lt;&lt; c_targetFilterBiological) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHover) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 1);
                                if (gf_UnitExists(lv_target) &amp;&amp; (AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_target)) == UnitGetFacing(UnitGroupLoopCurrent())) &amp;&amp; (UnitHasBehavior(lv_target, &quot;NodeGatherDelay&quot;) == false)) {
                                    UnitBehaviorAdd(lv_target, &quot;NodeGatherDelay&quot;, lv_target, 1);
                                    UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;GatheringResourcesStart&quot;, lv_target);
                                }
                                else {
                                }
                            }
                            else {
                            }
                        }
                        UnitGroupLoopEnd();
                    }
                    else {
                    }
                }
                if ((ModI(gv_periodCycle, 10) == 0)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/BC57FE87&quot;), false);
                    gf_SpawnResources();
                }
                else {
                }
                if ((ModI(gv_periodCycle, 2) == 0)) {
                    UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;FelFireTorchGracePeriod&quot;) == false)) {
                            gf_ModifyTorchIntensity(UnitGetOwner(UnitGroupLoopCurrent()), -0.5);
                        }
                        else {
                        }
                        gf_UnstuckNudge(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                else {
                }
                if ((ModI(gv_periodCycle, 20) == 0)) {
                    auto5ECBA2F4_ae = gv_players;
                    auto5ECBA2F4_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto5ECBA2F4_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto5ECBA2F4_ae) || (auto5ECBA2F4_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto5ECBA2F4_ae) ) ; lv_a += auto5ECBA2F4_ai ) {
                        gf_SetScaledStats(&quot;MurlocSlave&quot;, lv_a);
                        gf_NormalizePrices(lv_a);
                        if (gf_UnitExists(gv_playerData[lv_a].lv_kobold)) {
                            lv_b = gf_GetItemLevel(UnitGetType(gf_KoboldMainHand(gv_playerData[lv_a].lv_kobold)), 0);
                            TriggerDebugOutput(1, (StringExternal(&quot;Param/Value/4A736773&quot;) + (IntToText(lv_b) + StringExternal(&quot;Param/Value/0C87E83B&quot;))), false);
                            if ((lv_b == -1)) {
                                lv_b = 100;
                            }
                            else {
                            }
                            gv_favouriteWeaponRating[lv_b][lv_a] += 1;
                        }
                        else {
                        }
                    }
                }
                else {
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/B250752E&quot;), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TheBigPeriod_Init () {
                gt_TheBigPeriod = TriggerCreate(&quot;gt_TheBigPeriod_Func&quot;);
                TriggerAddEventTimePeriodic(gt_TheBigPeriod, gv_periodInterval, c_timeGame);
            }
        </ScriptCode>
        <InitFunc>gt_TheBigPeriod_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="392E7870">
        <ScriptCode>
            bool gt_InitializeTeams_Func (bool testConds, bool runActions) {
                int auto14F1C40C_ae;
                int auto14F1C40C_ai;
                int autoB813A59D_ae;
                int autoB813A59D_ai;
                int autoBFBDAA07_ae;
                int autoBFBDAA07_ai;
                // Variable Declarations
                int lv_a;
                playergroup lv_t;
                int lv_startlocationindexoffset;
                int lv_c;
                string lv_teamString;
                int lv_r;
                int lv_s;
                string lv_spawnIndexes;
                // Variable Initialization
                lv_t = PlayerGroupEmpty();
                lv_startlocationindexoffset = RandomInt(1, 10);
                lv_teamString = &quot;&quot;;
                lv_spawnIndexes = &quot;010203040506070809101112&quot;;
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_SetPlayerGroupAlliance(PlayerGroupActive(), 5);
                auto14F1C40C_ae = gv_maxTeams;
                auto14F1C40C_ai = 1;
                lv_a = 1;
                for ( ; ( (auto14F1C40C_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto14F1C40C_ae) || (auto14F1C40C_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto14F1C40C_ae) ) ; lv_a += auto14F1C40C_ai ) {
                    if ((gv_aIFFATestingOverride == true) &amp;&amp; (lv_a &lt;= 12)) {
                        lv_t = PlayerGroupSingle(lv_a);
                    }
                    else {
                        lv_t = GameAttributePlayersForTeam(lv_a);
                    }
                    if ((PlayerGroupCount(lv_t) &gt; 0)) {
                        gv_activeTeams += 1;
                        gv_teamData[gv_activeTeams].lv_members = lv_t;
                        lv_teamString = (lv_teamString + IntToString(gv_activeTeams));
                        libNtve_gf_SetPlayerGroupAlliance(gv_teamData[gv_activeTeams].lv_members, 1);
                        gv_teamData[lv_a].lv_aICustomization = StringReplace(gv_teamData[lv_a].lv_aICustomization, IntToString(RandomInt(0, 1)), 1, 1);
                    }
                    else {
                    }
                }
                if ((gv_activeTeams == 2)) {
                    gv_teamStartLocation[1] = PointFromId(1);
                    gv_teamStartLocation[2] = PointFromId(22);
                }
                else {
                    autoB813A59D_ae = gv_activeTeams;
                    autoB813A59D_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoB813A59D_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoB813A59D_ae) || (autoB813A59D_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoB813A59D_ae) ) ; lv_a += autoB813A59D_ai ) {
                        lv_r = (1 + (RandomInt(0, ((StringLength(lv_spawnIndexes) - 2) / 2)) * 2));
                        lv_s = StringToInt(StringSub(lv_spawnIndexes, lv_r, (lv_r + 1)));
                        gv_teamStartLocation[lv_a] = gv_multiTeamStart[lv_s];
                        lv_spawnIndexes = StringReplace(lv_spawnIndexes, &quot;&quot;, lv_r, (lv_r + 1));
                    }
                }
                if ((gv_activeTeams == 2)) {
                    gv_teamData[1].lv_name = StringExternal(&quot;Param/Value/0F1FEB49&quot;);
                    gv_teamData[1].lv_color = Color(0.00, 50.20, 75.29);
                    gv_teamData[2].lv_name = StringExternal(&quot;Param/Value/B1C4C778&quot;);
                    gv_teamData[2].lv_color = Color(83.53, 83.53, 0.00);
                }
                else {
                    autoBFBDAA07_ae = gv_activeTeams;
                    autoBFBDAA07_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoBFBDAA07_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoBFBDAA07_ae) || (autoBFBDAA07_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoBFBDAA07_ae) ) ; lv_a += autoBFBDAA07_ai ) {
                        lv_r = RandomInt(1, (gv_tribeNamesCount - gv_tribeNamesTaken));
                        gv_teamData[lv_a].lv_name = StringToText(gv_tribeNamePool[lv_r]);
                        gv_tribeNamePool[lv_r] = gv_tribeNamePool[(gv_tribeNamesCount - gv_tribeNamesTaken)];
                        gv_tribeNamesTaken += 1;
                        gv_teamData[lv_a].lv_color = gv_teamColorPool[lv_a];
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializeTeams_Init () {
                gt_InitializeTeams = TriggerCreate(&quot;gt_InitializeTeams_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializeTeams_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4C1FB9B7">
        <ScriptCode>
            //--------------------------------------------------------------------------------------------------
            // Trigger: Stamina Wake
            //--------------------------------------------------------------------------------------------------
            bool gt_StaminaWake_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;AnimSetPaused {derp death} 0&quot;);
                libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;AnimSetCompletion {derp death} 100.000000&quot;);
                if ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;Running&quot;) == true)) {
                    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), Order(AbilityCommand(&quot;Run&quot;, 1)), c_orderQueueReplace);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StaminaWake_Init () {
                gt_StaminaWake = TriggerCreate(&quot;gt_StaminaWake_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_StaminaWake, c_playerAny, &quot;UnconsciousEndTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_StaminaWake_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F8BA060F">
        <ScriptCode>
            bool gt_SyncBanks_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerType(1) == c_playerTypeUser) &amp;&amp; (PlayerStatus(1) == c_playerStatusActive)) {
                    gv_bankSynced[1] = true;
                }
                else {
                }
                if ((PlayerType(2) == c_playerTypeUser) &amp;&amp; (PlayerStatus(2) == c_playerStatusActive)) {
                    gv_bankSynced[2] = true;
                }
                else {
                }
                if ((PlayerType(3) == c_playerTypeUser) &amp;&amp; (PlayerStatus(3) == c_playerStatusActive)) {
                    gv_bankSynced[3] = true;
                }
                else {
                }
                if ((PlayerType(4) == c_playerTypeUser) &amp;&amp; (PlayerStatus(4) == c_playerStatusActive)) {
                    gv_bankSynced[4] = true;
                }
                else {
                }
                if ((PlayerType(5) == c_playerTypeUser) &amp;&amp; (PlayerStatus(5) == c_playerStatusActive)) {
                    gv_bankSynced[5] = true;
                }
                else {
                }
                if ((PlayerType(6) == c_playerTypeUser) &amp;&amp; (PlayerStatus(6) == c_playerStatusActive)) {
                    gv_bankSynced[6] = true;
                }
                else {
                }
                if ((PlayerType(7) == c_playerTypeUser) &amp;&amp; (PlayerStatus(7) == c_playerStatusActive)) {
                    gv_bankSynced[7] = true;
                }
                else {
                }
                if ((PlayerType(8) == c_playerTypeUser) &amp;&amp; (PlayerStatus(8) == c_playerStatusActive)) {
                    gv_bankSynced[8] = true;
                }
                else {
                }
                if ((PlayerType(9) == c_playerTypeUser) &amp;&amp; (PlayerStatus(9) == c_playerStatusActive)) {
                    gv_bankSynced[9] = true;
                }
                else {
                }
                if ((PlayerType(10) == c_playerTypeUser) &amp;&amp; (PlayerStatus(10) == c_playerStatusActive)) {
                    gv_bankSynced[10] = true;
                }
                else {
                }
                if ((PlayerType(11) == c_playerTypeUser) &amp;&amp; (PlayerStatus(11) == c_playerStatusActive)) {
                    gv_bankSynced[11] = true;
                }
                else {
                }
                if ((PlayerType(12) == c_playerTypeUser) &amp;&amp; (PlayerStatus(12) == c_playerStatusActive)) {
                    gv_bankSynced[12] = true;
                }
                else {
                }
                if ((PlayerType(13) == c_playerTypeUser) &amp;&amp; (PlayerStatus(13) == c_playerStatusActive)) {
                    gv_bankSynced[13] = true;
                }
                else {
                }
                if ((PlayerType(14) == c_playerTypeUser) &amp;&amp; (PlayerStatus(14) == c_playerStatusActive)) {
                    gv_bankSynced[14] = true;
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SyncBanks_Init () {
                gt_SyncBanks = TriggerCreate(&quot;gt_SyncBanks_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SyncBanks_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="62CF3FBA">
        <Disabled/>
        <ScriptCode>
            bool gt_LoadBank_Func (bool testConds, bool runActions) {
                int auto090EDF9B_ae;
                int auto090EDF9B_ai;
                // Variable Declarations
                int lv_i;
                bank lv_b;
                int lv_a;
                int lv_temp;
                string lv_tempStr;
                bool lv_perkOverflowDetected;
                // Variable Initialization
                lv_tempStr = &quot;&quot;;
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_i = PlayerGroupLoopCurrent();
                    if ((PlayerType(lv_i) == c_playerTypeUser) &amp;&amp; (gv_bankSynced[lv_i] == true)) {
                        lv_perkOverflowDetected = false;
                        BankLoad(&quot;nostrobskalufs&quot;, lv_i);
                        lv_b = BankLastCreated();
                        BankOptionSet(lv_b, c_bankOptionSignature, true);
                        gv_acclvl[lv_i] = gf_LoadAccountLevel(lv_i, lv_b);
                        gv_accxp[lv_i] = gf_LoadAccountXP(lv_i, lv_b);
                        gv_accwins[lv_i] = gf_LoadAccountWins(lv_i, lv_b);
                        gv_acclosses[lv_i] = gf_LoadAccountLosses(lv_i, lv_b);
                        gv_kobkills[lv_i] = gf_LoadKoboldKills(lv_i, lv_b);
                        gv_kobdeaths[lv_i] = gf_LoadKoboldDeaths(lv_i, lv_b);
                        gv_ratingvalue[lv_i] = gf_LoadRatingValue(lv_i, lv_b);
                        gv_ratinggames[lv_i] = gf_LoadRatingGames(lv_i, lv_b);
                        if ((BankVerify(lv_b) == true) &amp;&amp; (BankKeyExists(lv_b, &quot;booles&quot;, &quot;rezhintshown&quot;) == true)) {
                            gv_rezhintshown[lv_i] = BankValueGetAsFlag(lv_b, &quot;booles&quot;, &quot;rezhintshown&quot;);
                        }
                        else {
                            gv_rezhintshown[lv_i] = false;
                        }
                        if ((BankVerify(lv_b) == true) &amp;&amp; (BankKeyExists(lv_b, &quot;stats&quot;, &quot;RiBktos&quot;) == true)) {
                            gv_matchhistory[PlayerGroupLoopCurrent()] = BankValueGetAsString(BankLastCreated(), &quot;stats&quot;, &quot;RiBktos&quot;);
                        }
                        else {
                            gv_matchhistory[PlayerGroupLoopCurrent()] = &quot;&quot;;
                        }
                        if ((BankVerify(lv_b) == true) &amp;&amp; (BankKeyExists(lv_b, &quot;stats&quot;, &quot;perks&quot;) == true) &amp;&amp; (gv_reprimanded[lv_i] == false)) {
                            gv_perks[lv_i] = BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;perks&quot;);
                        }
                        else {
                            gv_perks[lv_i] = &quot;0000000000000000000000000000000000000000&quot;;
                        }
                        auto090EDF9B_ae = 40;
                        auto090EDF9B_ai = 1;
                        lv_a = 1;
                        for ( ; ( (auto090EDF9B_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto090EDF9B_ae) || (auto090EDF9B_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto090EDF9B_ae) ) ; lv_a += auto090EDF9B_ai ) {
                            if ((StringSub(gv_perks[lv_i], lv_a, lv_a) == &quot;1&quot;)) {
                                if ((gv_perkPointsSpent[lv_i] &lt; 20)) {
                                    gv_perkPointsSpent[lv_i] += 1;
                                }
                                else {
                                    gv_perks[lv_i] = StringReplace(gv_perks[lv_i], &quot;0&quot;, lv_a, lv_a);
                                    lv_perkOverflowDetected = true;
                                }
                            }
                            else {
                            }
                        }
                        if ((lv_perkOverflowDetected == true)) {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/C211E324&quot;));
                        }
                        else {
                        }
                        if ((BankVerify(lv_b) == true) &amp;&amp; (BankKeyExists(lv_b, &quot;stats&quot;, &quot;IU8eR7g&quot;) == true)) {
                            gv_hints[lv_i] = BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;IU8eR7g&quot;);
                        }
                        else {
                            gv_hints[lv_i] = &quot;0000000000000000000000000000000000000000&quot;;
                        }
                        if ((BankVerify(lv_b) == true) &amp;&amp; (BankKeyExists(lv_b, &quot;stats&quot;, &quot;LGVP&quot;) == true)) {
                            gv_lastGameVersion[lv_i] = BankValueGetAsFixed(lv_b, &quot;stats&quot;, &quot;LGVP&quot;);
                        }
                        else {
                            gv_lastGameVersion[lv_i] = gv_gameVersion;
                        }
                        if ((BankVerify(lv_b) == true) &amp;&amp; (gf_BankChecksOut(&quot;gTl8zbk&quot;, &quot;stats&quot;, 8) == true) &amp;&amp; (gv_reprimanded[lv_i] == false)) {
                            gv_gladSpree[lv_i] = gf_DecryptInt(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;gTl8zbk&quot;), StringToInt(StringSub(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 7), (gv_trollz - 7))), StringToInt(StringSub(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 8, 8)));
                        }
                        else {
                            gv_gladSpree[lv_i] = 0;
                        }
                        if ((BankVerify(lv_b) == true) &amp;&amp; (gf_BankChecksOut(&quot;Uut1s3t&quot;, &quot;stats&quot;, 7) == true) &amp;&amp; (gv_reprimanded[lv_i] == false)) {
                            gv_conqpoints[lv_i] = gf_DecryptInt(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;Uut1s3t&quot;), StringToInt(StringSub(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 6), (gv_trollz - 6))), StringToInt(StringSub(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 7, 7)));
                        }
                        else {
                            gv_conqpoints[lv_i] = 0;
                        }
                        gf_LoadRewards(lv_i, lv_b);
                        gv_requirementString[1][lv_i] = gf_BankLoadEncryptedString(&quot;tKlz8mi&quot;, &quot;stats&quot;, lv_i);
                        gv_requirementString[2][lv_i] = gf_BankLoadEncryptedString(&quot;BuGr21z&quot;, &quot;stats&quot;, lv_i);
                        gv_requirementString[3][lv_i] = gf_BankLoadEncryptedString(&quot;K128saz&quot;, &quot;stats&quot;, lv_i);
                        gf_LoadDamageText(lv_i, lv_b);
                        BankSave(lv_b);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LoadBank_Init () {
                gt_LoadBank = TriggerCreate(&quot;gt_LoadBank_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_LoadBank_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0848C25F">
        <ScriptCode>
            bool gt_LoadBank_Func (bool testConds, bool runActions) {
                int auto090EDF9B_ae;
                int auto090EDF9B_ai;
                // Variable Declarations
                int lv_i;
                bank lv_b;
                int lv_a;
                int lv_temp;
                string lv_tempStr;
                bool lv_perkOverflowDetected;
                // Variable Initialization
                lv_tempStr = &quot;&quot;;
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_i = PlayerGroupLoopCurrent();
                    if ((PlayerType(lv_i) == c_playerTypeUser) &amp;&amp; (gv_bankSynced[lv_i] == true)) {
                        lv_perkOverflowDetected = false;
                        BankLoad(&quot;nostrobskalufs&quot;, lv_i);
                        lv_b = BankLastCreated();
                        BankOptionSet(lv_b, c_bankOptionSignature, true);
                        gv_acclvl[lv_i] = gf_LoadAccountLevel(lv_i, lv_b);
                        gv_accxp[lv_i] = gf_LoadAccountXP(lv_i, lv_b);
                        gv_accwins[lv_i] = gf_LoadAccountWins(lv_i, lv_b);
                        gv_acclosses[lv_i] = gf_LoadAccountLosses(lv_i, lv_b);
                        gv_kobkills[lv_i] = gf_LoadKoboldKills(lv_i, lv_b);
                        gv_kobdeaths[lv_i] = gf_LoadKoboldDeaths(lv_i, lv_b);
                        gv_ratingvalue[lv_i] = gf_LoadRatingValue(lv_i, lv_b);
                        gv_ratinggames[lv_i] = gf_LoadRatingGames(lv_i, lv_b);
                        if ((BankKeyExists(lv_b, &quot;booles&quot;, &quot;rezhintshown&quot;) == true)) {
                            gv_rezhintshown[lv_i] = BankValueGetAsFlag(lv_b, &quot;booles&quot;, &quot;rezhintshown&quot;);
                        }
                        else {
                            gv_rezhintshown[lv_i] = false;
                        }
                        if ((BankKeyExists(lv_b, &quot;stats&quot;, &quot;RiBktos&quot;) == true)) {
                            gv_matchhistory[PlayerGroupLoopCurrent()] = BankValueGetAsString(BankLastCreated(), &quot;stats&quot;, &quot;RiBktos&quot;);
                        }
                        else {
                            gv_matchhistory[PlayerGroupLoopCurrent()] = &quot;&quot;;
                        }
                        if ((BankKeyExists(lv_b, &quot;stats&quot;, &quot;perks&quot;) == true) &amp;&amp; (gv_reprimanded[lv_i] == false)) {
                            gv_perks[lv_i] = BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;perks&quot;);
                        }
                        else {
                            gv_perks[lv_i] = &quot;0000000000000000000000000000000000000000&quot;;
                        }
                        auto090EDF9B_ae = 40;
                        auto090EDF9B_ai = 1;
                        lv_a = 1;
                        for ( ; ( (auto090EDF9B_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto090EDF9B_ae) || (auto090EDF9B_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto090EDF9B_ae) ) ; lv_a += auto090EDF9B_ai ) {
                            if ((StringSub(gv_perks[lv_i], lv_a, lv_a) == &quot;1&quot;)) {
                                if ((gv_perkPointsSpent[lv_i] &lt; 20)) {
                                    gv_perkPointsSpent[lv_i] += 1;
                                }
                                else {
                                    gv_perks[lv_i] = StringReplace(gv_perks[lv_i], &quot;0&quot;, lv_a, lv_a);
                                    lv_perkOverflowDetected = true;
                                }
                            }
                            else {
                            }
                        }
                        if ((lv_perkOverflowDetected == true)) {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/C211E324&quot;));
                        }
                        else {
                        }
                        if ((BankKeyExists(lv_b, &quot;stats&quot;, &quot;IU8eR7g&quot;) == true)) {
                            gv_hints[lv_i] = BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;IU8eR7g&quot;);
                        }
                        else {
                            gv_hints[lv_i] = &quot;0000000000000000000000000000000000000000&quot;;
                        }
                        if ((BankKeyExists(lv_b, &quot;stats&quot;, &quot;LGVP&quot;) == true)) {
                            gv_lastGameVersion[lv_i] = BankValueGetAsFixed(lv_b, &quot;stats&quot;, &quot;LGVP&quot;);
                        }
                        else {
                            gv_lastGameVersion[lv_i] = gv_gameVersion;
                        }
                        if ((gf_BankChecksOut(&quot;gTl8zbk&quot;, &quot;stats&quot;, 8) == true) &amp;&amp; (gv_reprimanded[lv_i] == false)) {
                            gv_gladSpree[lv_i] = gf_DecryptInt(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;gTl8zbk&quot;), StringToInt(StringSub(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 7), (gv_trollz - 7))), StringToInt(StringSub(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 8, 8)));
                        }
                        else {
                            gv_gladSpree[lv_i] = 0;
                        }
                        if ((gf_BankChecksOut(&quot;Uut1s3t&quot;, &quot;stats&quot;, 7) == true) &amp;&amp; (gv_reprimanded[lv_i] == false)) {
                            gv_conqpoints[lv_i] = gf_DecryptInt(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;Uut1s3t&quot;), StringToInt(StringSub(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;7HuRb8gn&quot;), (gv_trollz - 6), (gv_trollz - 6))), StringToInt(StringSub(BankValueGetAsString(lv_b, &quot;stats&quot;, &quot;Jyr8GxL&quot;), 7, 7)));
                        }
                        else {
                            gv_conqpoints[lv_i] = 0;
                        }
                        gf_LoadRewards(lv_i, lv_b);
                        gv_requirementString[1][lv_i] = gf_BankLoadEncryptedString(&quot;tKlz8mi&quot;, &quot;stats&quot;, lv_i);
                        gv_requirementString[2][lv_i] = gf_BankLoadEncryptedString(&quot;BuGr21z&quot;, &quot;stats&quot;, lv_i);
                        gv_requirementString[3][lv_i] = gf_BankLoadEncryptedString(&quot;K128saz&quot;, &quot;stats&quot;, lv_i);
                        gf_LoadDamageText(lv_i, lv_b);
                        BankSave(lv_b);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LoadBank_Init () {
                gt_LoadBank = TriggerCreate(&quot;gt_LoadBank_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_LoadBank_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="C41A7BF0">
        <Item Type="CustomScript" Id="216C6D75"/>
        <Item Type="CustomScript" Id="AB72335A"/>
        <Item Type="CustomScript" Id="EEC103E0"/>
        <Item Type="CustomScript" Id="3433FAFF"/>
        <Item Type="CustomScript" Id="B517630B"/>
        <Item Type="CustomScript" Id="A11C17B3"/>
        <Item Type="CustomScript" Id="1D35C1A3"/>
        <Item Type="CustomScript" Id="8BE103D3"/>
        <Item Type="CustomScript" Id="E9AE4246"/>
        <Item Type="CustomScript" Id="257AAF56"/>
        <Item Type="CustomScript" Id="5FB7CC71"/>
        <Item Type="CustomScript" Id="53560275"/>
        <Item Type="CustomScript" Id="22237A2A"/>
        <Item Type="CustomScript" Id="139554B5"/>
        <Item Type="CustomScript" Id="DAB26DDD"/>
        <Item Type="CustomScript" Id="4F4CE77B"/>
        <Item Type="CustomScript" Id="B6DA6CE6"/>
        <Item Type="CustomScript" Id="78B93796"/>
    </Element>
    <Element Type="CustomScript" Id="216C6D75">
        <ScriptCode>
            bool gt_InitializePerks_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_InitializePerkImages, true, false);
                TriggerExecute(gt_InitializePerkTooltips, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializePerks_Init () {
                gt_InitializePerks = TriggerCreate(&quot;gt_InitializePerks_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializePerks_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AB72335A">
        <ScriptCode>
            bool gt_InitializePerkImages_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_perkImageFile[1][1] = &quot;PerkIcons\\PerkScholar.dds&quot;;
                gv_perkImageFile[1][2] = &quot;PerkIcons\\AnimalHandler.dds&quot;;
                gv_perkImageFile[1][3] = &quot;PerkIcons\\PerkExcavating.dds&quot;;
                gv_perkImageFile[1][4] = &quot;PerkIcons\\PerkNaturalForager.dds&quot;;
                gv_perkImageFile[1][5] = &quot;PerkIcons\\PerkListener.dds&quot;;
                gv_perkImageFile[1][6] = &quot;PerkIcons\\PerkSecondWind.dds&quot;;
                gv_perkImageFile[1][7] = &quot;PerkIcons\\PerkBrawler.dds&quot;;
                gv_perkImageFile[1][8] = &quot;PerkIcons\\PerkThickSkin.dds&quot;;
                gv_perkImageFile[1][9] = &quot;PerkIcons\\PerkKoboldAgility.dds&quot;;
                gv_perkImageFile[1][10] = &quot;PerkIcons\\PerkSurvivalist.dds&quot;;
                gv_perkImageFile[2][1] = &quot;Icons\\Lumber.dds&quot;;
                gv_perkImageFile[2][2] = &quot;Icons\\MurlocSlave.dds&quot;;
                gv_perkImageFile[2][3] = &quot;Icons\\SpellBook.dds&quot;;
                gv_perkImageFile[2][4] = &quot;Icons\\TravelingWizard.dds&quot;;
                gv_perkImageFile[2][5] = &quot;Icons\\Alt Wool.dds&quot;;
                gv_perkImageFile[2][6] = &quot;PerkIcons\\PerkCombatTraining.dds&quot;;
                gv_perkImageFile[2][7] = &quot;PerkIcons\\PerkMysticism.dds&quot;;
                gv_perkImageFile[2][8] = &quot;Icons\\Torch.dds&quot;;
                gv_perkImageFile[2][9] = &quot;PerkIcons\\PerkFastLearner.dds&quot;;
                gv_perkImageFile[2][10] = &quot;PerkIcons\\PerkBudgetMage.dds&quot;;
                gv_perkImageFile[3][1] = &quot;Icons\\Alt Pick.dds&quot;;
                gv_perkImageFile[3][2] = &quot;Icons\\IronOre.dds&quot;;
                gv_perkImageFile[3][3] = &quot;Icons\\Leather.dds&quot;;
                gv_perkImageFile[3][4] = &quot;Icons\\Radiant Gem.dds&quot;;
                gv_perkImageFile[3][5] = &quot;PerkIcons\\PerkGoldenHands.dds&quot;;
                gv_perkImageFile[3][6] = &quot;PerkIcons\\PerkMartialArtist.dds&quot;;
                gv_perkImageFile[3][7] = &quot;PerkIcons\\PerkGoodHost.dds&quot;;
                gv_perkImageFile[3][8] = &quot;PerkIcons\\PerkSuperstition.dds&quot;;
                gv_perkImageFile[3][9] = &quot;Icons\\BearStrength.dds&quot;;
                gv_perkImageFile[3][10] = &quot;Icons\\RunWalk.dds&quot;;
                gv_perkImageFile[4][1] = &quot;Icons\\HandfulofBerries.dds&quot;;
                gv_perkImageFile[4][2] = &quot;Icons\\NaturesGrace.dds&quot;;
                gv_perkImageFile[4][3] = &quot;Icons\\MineralTap.dds&quot;;
                gv_perkImageFile[4][4] = &quot;PerkIcons\\PerkHerbalist.dds&quot;;
                gv_perkImageFile[4][5] = &quot;Icons\\Candle.dds&quot;;
                gv_perkImageFile[4][6] = &quot;PerkIcons\\PerkSprint.dds&quot;;
                gv_perkImageFile[4][7] = &quot;Icons\\Units\\Beaver.dds&quot;;
                gv_perkImageFile[4][8] = &quot;Icons\\Crossbow.dds&quot;;
                gv_perkImageFile[4][9] = &quot;PerkIcons\\PerkSharp.dds&quot;;
                gv_perkImageFile[4][10] = &quot;PerkIcons\\PerkFireMaster.dds&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializePerkImages_Init () {
                gt_InitializePerkImages = TriggerCreate(&quot;gt_InitializePerkImages_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializePerkImages_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="EEC103E0">
        <ScriptCode>
            bool gt_InitializePerkTooltips_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_perkTooltip[1][1] = StringExternal(&quot;Param/Value/5C3C68C1&quot;);
                gv_perkTooltip[1][2] = StringExternal(&quot;Param/Value/D3761C00&quot;);
                gv_perkTooltip[1][3] = StringExternal(&quot;Param/Value/1D18618C&quot;);
                gv_perkTooltip[1][4] = StringExternal(&quot;Param/Value/4AA2D8AB&quot;);
                gv_perkTooltip[1][5] = StringExternal(&quot;Param/Value/7A573960&quot;);
                gv_perkTooltip[1][6] = StringExternal(&quot;Param/Value/15625720&quot;);
                gv_perkTooltip[1][7] = StringExternal(&quot;Param/Value/6C921AD7&quot;);
                gv_perkTooltip[1][8] = StringExternal(&quot;Param/Value/6BEB32C9&quot;);
                gv_perkTooltip[1][9] = StringExternal(&quot;Param/Value/AFC1A16D&quot;);
                gv_perkTooltip[1][10] = StringExternal(&quot;Param/Value/10E61718&quot;);
                gv_perkTooltip[2][1] = StringExternal(&quot;Param/Value/C2A3BD63&quot;);
                gv_perkTooltip[2][2] = StringExternal(&quot;Param/Value/6E800B51&quot;);
                gv_perkTooltip[2][3] = StringExternal(&quot;Param/Value/354BC0DC&quot;);
                gv_perkTooltip[2][4] = StringExternal(&quot;Param/Value/F7037D32&quot;);
                gv_perkTooltip[2][5] = StringExternal(&quot;Param/Value/566A3626&quot;);
                gv_perkTooltip[2][6] = StringExternal(&quot;Param/Value/B0B9C41B&quot;);
                gv_perkTooltip[2][7] = StringExternal(&quot;Param/Value/F2E0AE71&quot;);
                gv_perkTooltip[2][8] = StringExternal(&quot;Param/Value/35F0629B&quot;);
                gv_perkTooltip[2][9] = StringExternal(&quot;Param/Value/2CF9449C&quot;);
                gv_perkTooltip[2][10] = StringExternal(&quot;Param/Value/568DE1B7&quot;);
                gv_perkTooltip[3][1] = StringExternal(&quot;Param/Value/9EBF2D90&quot;);
                gv_perkTooltip[3][2] = StringExternal(&quot;Param/Value/43712DCD&quot;);
                gv_perkTooltip[3][3] = StringExternal(&quot;Param/Value/5120FC20&quot;);
                gv_perkTooltip[3][4] = StringExternal(&quot;Param/Value/7CFD9B01&quot;);
                gv_perkTooltip[3][5] = StringExternal(&quot;Param/Value/0A37360F&quot;);
                gv_perkTooltip[3][6] = StringExternal(&quot;Param/Value/5940572B&quot;);
                gv_perkTooltip[3][7] = StringExternal(&quot;Param/Value/C3D1CB51&quot;);
                gv_perkTooltip[3][8] = StringExternal(&quot;Param/Value/FC9CDBAD&quot;);
                gv_perkTooltip[3][9] = StringExternal(&quot;Param/Value/5FBE2436&quot;);
                gv_perkTooltip[3][10] = StringExternal(&quot;Param/Value/10B34466&quot;);
                gv_perkTooltip[4][1] = StringExternal(&quot;Param/Value/6B050219&quot;);
                gv_perkTooltip[4][2] = StringExternal(&quot;Param/Value/C0FEE850&quot;);
                gv_perkTooltip[4][3] = StringExternal(&quot;Param/Value/880725E3&quot;);
                gv_perkTooltip[4][4] = StringExternal(&quot;Param/Value/983F518C&quot;);
                gv_perkTooltip[4][5] = StringExternal(&quot;Param/Value/6CC674A5&quot;);
                gv_perkTooltip[4][6] = StringExternal(&quot;Param/Value/1C3E5BCA&quot;);
                gv_perkTooltip[4][7] = StringExternal(&quot;Param/Value/13674E4D&quot;);
                gv_perkTooltip[4][8] = StringExternal(&quot;Param/Value/AE378338&quot;);
                gv_perkTooltip[4][9] = StringExternal(&quot;Param/Value/D42A68DD&quot;);
                gv_perkTooltip[4][10] = StringExternal(&quot;Param/Value/D6C28171&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializePerkTooltips_Init () {
                gt_InitializePerkTooltips = TriggerCreate(&quot;gt_InitializePerkTooltips_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializePerkTooltips_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3433FAFF">
        <ScriptCode>
            bool gt_ShowPerkWindow_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventDialogControl() == gv_perkDialogSmallBTN))) {
                        return false;
                    }
                    if (!((DialogIsVisible(gv_perkWindow, EventPlayer()) == false))) {
                        return false;
                    }
                    if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogSetVisible(gv_pGSWindowLarge, PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_rewardsMainWindow, PlayerGroupSingle(EventPlayer()), false);
                gf_UpdatePerkWindow(EventPlayer());
                DialogSetVisible(gv_perkWindow, PlayerGroupSingle(EventPlayer()), true);
                libNtve_gf_SetDialogItemText(gv_perkDialogSmallBTN, StringExternal(&quot;Param/Value/8A5CCFD2&quot;), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_pGSWindowSmallBTN, StringExternal(&quot;Param/Value/116F2343&quot;), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_rewardsOpenerItem, gf_RewardsOpenerText(EventPlayer()), PlayerGroupSingle(EventPlayer()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShowPerkWindow_Init () {
                gt_ShowPerkWindow = TriggerCreate(&quot;gt_ShowPerkWindow_Func&quot;);
                TriggerAddEventDialogControl(gt_ShowPerkWindow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_ShowPerkWindow_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B517630B">
        <ScriptCode>
            bool gt_SelectPerk_Func (bool testConds, bool runActions) {
                int auto395A5EA3_ae;
                int auto395A5EA3_ai;
                int auto76C2E3CB_ae;
                int auto76C2E3CB_ai;
                int autoED71B2E7_ae;
                int autoED71B2E7_ai;
                int auto8E2292E5_ae;
                int auto8E2292E5_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                int lv_c;
                int lv_d;
                int lv_strIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((DialogControlGetDialog(EventDialogControl()) == gv_perkWindow))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((EventDialogControl() != gv_perkReset)) {
                    autoED71B2E7_ae = 4;
                    autoED71B2E7_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoED71B2E7_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoED71B2E7_ae) || (autoED71B2E7_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoED71B2E7_ae) ) ; lv_a += autoED71B2E7_ai ) {
                        auto8E2292E5_ae = 10;
                        auto8E2292E5_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto8E2292E5_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto8E2292E5_ae) || (auto8E2292E5_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto8E2292E5_ae) ) ; lv_b += auto8E2292E5_ai ) {
                            if ((EventDialogControl() == gv_perkButton[lv_a][lv_b])) {
                                lv_c = lv_a;
                                lv_d = lv_b;
                                lv_a = 4;
                                lv_b = 10;
                            }
                            else {
                            }
                        }
                    }
                    lv_strIndex = (lv_d + ((lv_c - 1) * 10));
                    if ((StringSub(gv_perks[EventPlayer()], lv_strIndex, lv_strIndex) == &quot;0&quot;)) {
                        if ((gv_accpp[EventPlayer()] &gt; 0)) {
                            if ((gv_bankSynced[EventPlayer()] == true)) {
                                gv_perks[EventPlayer()] = StringReplace(gv_perks[EventPlayer()], &quot;1&quot;, lv_strIndex, lv_strIndex);
                                gv_perkPointsSpent[EventPlayer()] += 1;
                                gv_accpp[EventPlayer()] -= 1;
                                BankLoad(&quot;nostrobskalufs&quot;, EventPlayer());
                                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;perks&quot;, gv_perks[EventPlayer()]);
                                BankSave(BankLastCreated());
                            }
                            else {
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal(&quot;Param/Value/2B8836FD&quot;));
                        }
                    }
                    else {
                        if ((gv_bankSynced[EventPlayer()] == true)) {
                            gv_perks[EventPlayer()] = StringReplace(gv_perks[EventPlayer()], &quot;0&quot;, lv_strIndex, lv_strIndex);
                            gv_perkPointsSpent[EventPlayer()] -= 1;
                            gv_accpp[EventPlayer()] += 1;
                            BankLoad(&quot;nostrobskalufs&quot;, EventPlayer());
                            BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;perks&quot;, gv_perks[EventPlayer()]);
                            BankSave(BankLastCreated());
                        }
                        else {
                        }
                    }
                }
                else {
                    auto395A5EA3_ae = 4;
                    auto395A5EA3_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto395A5EA3_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto395A5EA3_ae) || (auto395A5EA3_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto395A5EA3_ae) ) ; lv_a += auto395A5EA3_ai ) {
                        auto76C2E3CB_ae = 10;
                        auto76C2E3CB_ai = 1;
                        lv_b = 1;
                        for ( ; ( (auto76C2E3CB_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto76C2E3CB_ae) || (auto76C2E3CB_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto76C2E3CB_ae) ) ; lv_b += auto76C2E3CB_ai ) {
                            DialogControlSetVisible(gv_perkMarker[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        }
                    }
                    if ((gv_bankSynced[EventPlayer()] == true)) {
                        gv_perks[EventPlayer()] = &quot;0000000000000000000000000000000000000000&quot;;
                        gv_perkPointsSpent[EventPlayer()] = 0;
                        gv_accpp[EventPlayer()] = gv_acclvl[EventPlayer()];
                        gf_UpdatePerkWindow(EventPlayer());
                        BankLoad(&quot;nostrobskalufs&quot;, EventPlayer());
                        BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;perks&quot;, gv_perks[EventPlayer()]);
                        BankSave(BankLastCreated());
                    }
                    else {
                    }
                }
                gf_UpdatePerkWindow(EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SelectPerk_Init () {
                gt_SelectPerk = TriggerCreate(&quot;gt_SelectPerk_Func&quot;);
                TriggerAddEventDialogControl(gt_SelectPerk, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_SelectPerk_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A11C17B3">
        <ScriptCode>
            bool gt_GoodHostSpawn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((StringSub(gv_perks[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], 27, 27) == &quot;1&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;GoodHostTent&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GoodHostSpawn_Init () {
                gt_GoodHostSpawn = TriggerCreate(&quot;gt_GoodHostSpawn_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GoodHostSpawn, c_playerAny, &quot;TentSpawnTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GoodHostSpawn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1D35C1A3">
        <ScriptCode>
            bool gt_SetupPGSWindow_Func (bool testConds, bool runActions) {
                int auto88D213E7_ae;
                int auto88D213E7_ai;
                int auto92AFF2E9_ae;
                int auto92AFF2E9_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogCreate(260, 65, c_anchorCenter, -720, -300, true);
                gv_pGSWindowSmall = DialogLastCreated();
                DialogSetVisible(gv_pGSWindowSmall, PlayerGroupAll(), false);
                DialogSetTransparency(gv_pGSWindowSmall, 10.0);
                libNtve_gf_CreateDialogItemButton(gv_pGSWindowSmall, 220, 32, c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/1B6B217F&quot;), StringExternal(&quot;Param/Value/E780C352&quot;), &quot;&quot;);
                gv_pGSWindowSmallBTN = DialogControlLastCreated();
                DialogCreate(1200, 540, c_anchorCenter, 0, -125, true);
                gv_pGSWindowLarge = DialogLastCreated();
                DialogSetVisible(gv_pGSWindowLarge, PlayerGroupAll(), false);
                DialogSetTransparency(gv_pGSWindowLarge, 0.0);
                libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 200, 50, c_anchorTopLeft, 95, 50, StringExternal(&quot;Param/Value/E2ACB3F9&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModLeftSize16&quot;, PlayerGroupAll());
                gv_pGSWinLossLabel[1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 200, 50, c_anchorTopLeft, 100, 75, StringExternal(&quot;Param/Value/5BDB6EA8&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModLeftSize20Bold&quot;, PlayerGroupAll());
                libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 100, 50, c_anchorTopLeft, 415, 80, StringExternal(&quot;Param/Value/966F952A&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModLeftSize16&quot;, PlayerGroupAll());
                libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 200, 50, c_anchorTopRight, 95, 50, StringExternal(&quot;Param/Value/7232B7AE&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModRightSize16&quot;, PlayerGroupAll());
                gv_pGSWinLossLabel[2] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 200, 50, c_anchorTopRight, 100, 75, StringExternal(&quot;Param/Value/0B9B7418&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModRightSize20Bold&quot;, PlayerGroupAll());
                libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 100, 50, c_anchorTopRight, 415, 80, StringExternal(&quot;Param/Value/D1DFB055&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModRightSize16&quot;, PlayerGroupAll());
                auto88D213E7_ae = 10;
                auto88D213E7_ai = 1;
                lv_a = 1;
                for ( ; ( (auto88D213E7_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto88D213E7_ae) || (auto88D213E7_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto88D213E7_ae) ) ; lv_a += auto88D213E7_ai ) {
                    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorTopLeft, 60, (85 + (lv_a * 40)), StringExternal(&quot;Param/Value/13CE47AE&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModLeftSize16&quot;, PlayerGroupAll());
                    gv_pGSPlayerLabelT1[lv_a] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 100, 50, c_anchorTopLeft, 395, (90 + (lv_a * 40)), StringExternal(&quot;Param/Value/6B6B9DA3&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModCenterSize16&quot;, PlayerGroupAll());
                    gv_pGSWinLabelT1[lv_a] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 75, 50, c_anchorTopLeft, 465, (95 + (lv_a * 40)), StringExternal(&quot;Param/Value/ED818B25&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModCenterSize16&quot;, PlayerGroupAll());
                    gv_pGSLossLabelT1[lv_a] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 350, 50, c_anchorTopRight, 60, (85 + (lv_a * 40)), StringExternal(&quot;Param/Value/71F6BE20&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModRightSize16&quot;, PlayerGroupAll());
                    gv_pGSPlayerLabelT2[lv_a] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 100, 50, c_anchorTopRight, 395, (90 + (lv_a * 40)), StringExternal(&quot;Param/Value/BA38BA5B&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModCenterSize16&quot;, PlayerGroupAll());
                    gv_pGSWinLabelT2[lv_a] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_pGSWindowLarge, 75, 50, c_anchorTopRight, 465, (95 + (lv_a * 40)), StringExternal(&quot;Param/Value/890B629C&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;ModCenterSize16&quot;, PlayerGroupAll());
                    gv_pGSLossLabelT2[lv_a] = DialogControlLastCreated();
                }
                DialogCreate(1200, 540, c_anchorCenter, 0, -125, true);
                gv_pGSMultiMainWindow = DialogLastCreated();
                DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupAll(), false);
                DialogSetTransparency(gv_pGSMultiMainWindow, 0.0);
                auto92AFF2E9_ae = gv_maxTeams;
                auto92AFF2E9_ai = 1;
                lv_a = 1;
                for ( ; ( (auto92AFF2E9_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto92AFF2E9_ae) || (auto92AFF2E9_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto92AFF2E9_ae) ) ; lv_a += auto92AFF2E9_ai ) {
                    libNtve_gf_CreateDialogItemLabel(gv_pGSMultiMainWindow, 350, 50, c_anchorTopLeft, 0, 0, StringExternal(&quot;Param/Value/B85F9D49&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_pGSMultiTeamLabel[lv_a] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_pGSMultiTeamLabel[lv_a], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(gv_pGSMultiMainWindow, 350, 50, c_anchorTopLeft, 0, 0, StringExternal(&quot;Param/Value/FC1F61A8&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_pGSMultiPlayerLabel[lv_a] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_pGSMultiPlayerLabel[lv_a], PlayerGroupAll(), false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupPGSWindow_Init () {
                gt_SetupPGSWindow = TriggerCreate(&quot;gt_SetupPGSWindow_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SetupPGSWindow_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8BE103D3">
        <ScriptCode>
            bool gt_ShowPGSWindow_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventDialogControl() == gv_pGSWindowSmallBTN))) {
                        return false;
                    }
                    if (!((DialogIsVisible(gv_pGSWindowLarge, EventPlayer()) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogSetVisible(gv_perkWindow, PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_rewardsMainWindow, PlayerGroupSingle(EventPlayer()), false);
                if ((gv_activeTeams == 2)) {
                    DialogSetVisible(gv_pGSWindowLarge, PlayerGroupSingle(EventPlayer()), true);
                }
                else {
                    DialogSetVisible(gv_pGSMultiMainWindow, PlayerGroupSingle(EventPlayer()), true);
                }
                libNtve_gf_SetDialogItemText(gv_pGSWindowSmallBTN, StringExternal(&quot;Param/Value/E40C3DE5&quot;), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_perkDialogSmallBTN, StringExternal(&quot;Param/Value/D06992EB&quot;), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_rewardsOpenerItem, gf_RewardsOpenerText(EventPlayer()), PlayerGroupSingle(EventPlayer()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShowPGSWindow_Init () {
                gt_ShowPGSWindow = TriggerCreate(&quot;gt_ShowPGSWindow_Func&quot;);
                TriggerAddEventDialogControl(gt_ShowPGSWindow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_ShowPGSWindow_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E9AE4246">
        <ScriptCode>
            bool gt_SetupRewardData_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_rewardTitle[1][1] = StringExternal(&quot;Param/Value/9BB94B5E&quot;);
                gv_rewardTitle[1][2] = StringExternal(&quot;Param/Value/B143745C&quot;);
                gv_rewardTitle[1][3] = StringExternal(&quot;Param/Value/005F00C3&quot;);
                gv_rewardTitle[1][4] = StringExternal(&quot;Param/Value/1231A443&quot;);
                gv_rewardTitle[1][5] = StringExternal(&quot;Param/Value/ECBF0623&quot;);
                gv_rewardTitle[1][6] = StringExternal(&quot;Param/Value/045096BD&quot;);
                gv_rewardTitle[1][7] = StringExternal(&quot;Param/Value/181421BE&quot;);
                gv_rewardTitle[1][8] = StringExternal(&quot;Param/Value/CB82C041&quot;);
                gv_rewardTitle[1][9] = StringExternal(&quot;Param/Value/30BB307D&quot;);
                gv_rewardTitle[1][10] = StringExternal(&quot;Param/Value/DF490859&quot;);
                gv_rewardTitle[1][11] = StringExternal(&quot;Param/Value/A0C3BBC3&quot;);
                gv_rewardTitle[1][12] = StringExternal(&quot;Param/Value/8CFC0462&quot;);
                gv_rewardTitle[1][13] = StringExternal(&quot;Param/Value/55FF8D25&quot;);
                gv_rewardTitle[1][14] = StringExternal(&quot;Param/Value/BAE2A9F3&quot;);
                gv_rewardTitle[1][15] = StringExternal(&quot;Param/Value/53C39117&quot;);
                gv_rewardTitle[1][16] = StringExternal(&quot;Param/Value/C622CF68&quot;);
                gv_rewardTitle[1][17] = StringExternal(&quot;Param/Value/09324480&quot;);
                gv_rewardTitle[1][18] = StringExternal(&quot;Param/Value/887C4947&quot;);
                gv_rewardTitle[1][19] = StringExternal(&quot;Param/Value/3B156E90&quot;);
                gv_rewardTitle[1][20] = StringExternal(&quot;Param/Value/DB37DD1A&quot;);
                gv_rewardTitle[1][21] = StringExternal(&quot;Param/Value/842F98D6&quot;);
                gv_rewardTitle[1][22] = StringExternal(&quot;Param/Value/14CA2CC1&quot;);
                gv_rewardTitle[1][23] = StringExternal(&quot;Param/Value/945684F6&quot;);
                gv_rewardTitle[1][24] = StringExternal(&quot;Param/Value/5F742DC5&quot;);
                gv_rewardTitle[1][25] = StringExternal(&quot;Param/Value/F45A3C95&quot;);
                gv_rewardTitle[1][26] = StringExternal(&quot;Param/Value/B86F6F0C&quot;);
                gv_rewardTitle[1][27] = StringExternal(&quot;Param/Value/46584720&quot;);
                gv_rewardTitle[1][28] = StringExternal(&quot;Param/Value/38688B9D&quot;);
                gv_rewardsTitleStyle[3] = 2;
                gv_rewardsTitleStyle[4] = 2;
                gv_rewardsTitleStyle[5] = 2;
                gv_rewardsTitleStyle[6] = 2;
                gv_rewardsTitleStyle[9] = 2;
                gv_rewardsTitleStyle[14] = 2;
                gv_rewardsTitleStyle[15] = 2;
                gv_rewardsTitleStyle[16] = 2;
                gv_rewardsTitleStyle[18] = 2;
                gv_rewardsTitleStyle[19] = 2;
                gv_rewardsTitleStyle[22] = 2;
                gv_rewardsTitleStyle[24] = 2;
                gv_rewardCost[1][1] = 750;
                gv_rewardCost[1][2] = 750;
                gv_rewardCost[1][3] = 750;
                gv_rewardCost[1][4] = 750;
                gv_rewardCost[1][5] = 750;
                gv_rewardCost[1][6] = 1500;
                gv_rewardCost[1][7] = 1500;
                gv_rewardCost[1][8] = 1500;
                gv_rewardCost[1][9] = 2500;
                gv_rewardCost[1][10] = 2500;
                gv_rewardCost[1][11] = 2500;
                gv_rewardCost[1][12] = 5000;
                gv_rewardCost[1][13] = 5000;
                gv_rewardCost[1][14] = 7500;
                gv_rewardCost[1][15] = 7500;
                gv_rewardCost[1][16] = 7500;
                gv_rewardCost[1][17] = 10000;
                gv_rewardCost[1][18] = 15000;
                gv_rewardCost[1][19] = 15000;
                gv_rewardCost[1][20] = 15000;
                gv_rewardCost[1][21] = 17500;
                gv_rewardCost[1][22] = 17500;
                gv_rewardCost[1][23] = 17500;
                gv_rewardCost[1][24] = 20000;
                gv_rewardCost[1][25] = 20000;
                gv_rewardCost[1][26] = 35000;
                gv_rewardCost[1][27] = 0;
                gv_rewardCost[1][28] = 0;
                gv_rewardReq[1][9] = StringExternal(&quot;Param/Value/61129994&quot;);
                gv_rewardReq[1][10] = StringExternal(&quot;Param/Value/7CE7CB2C&quot;);
                gv_rewardReq[1][11] = StringExternal(&quot;Param/Value/66FFC962&quot;);
                gv_rewardReq[1][12] = StringExternal(&quot;Param/Value/71BA9112&quot;);
                gv_rewardReq[1][13] = StringExternal(&quot;Param/Value/B0B04595&quot;);
                gv_rewardReq[1][14] = StringExternal(&quot;Param/Value/B1FF4E07&quot;);
                gv_rewardReq[1][15] = StringExternal(&quot;Param/Value/BAB7C0DA&quot;);
                gv_rewardReq[1][16] = StringExternal(&quot;Param/Value/B8F37DFD&quot;);
                TextExpressionSetToken(&quot;Param/Expression/E4CF0F47&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/AE51143C&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E4CF0F47&quot;, &quot;B&quot;, IntToText(0));
                TextExpressionSetToken(&quot;Param/Expression/E4CF0F47&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/5384F83A&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E4CF0F47&quot;, &quot;D&quot;, IntToText(5));
                TextExpressionSetToken(&quot;Param/Expression/E4CF0F47&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/B1E4C1B8&quot;));
                gv_rewardReq[1][17] = TextExpressionAssemble(&quot;Param/Expression/E4CF0F47&quot;);
                gv_rewardReq[1][18] = StringExternal(&quot;Param/Value/DDCBE370&quot;);
                gv_rewardReq[1][19] = StringExternal(&quot;Param/Value/B3948E78&quot;);
                gv_rewardReq[1][20] = StringExternal(&quot;Param/Value/EA9E2A4E&quot;);
                gv_rewardReq[1][21] = StringExternal(&quot;Param/Value/5B7ADD94&quot;);
                gv_rewardReq[1][22] = StringExternal(&quot;Param/Value/4412CD9C&quot;);
                gv_rewardReq[1][23] = StringExternal(&quot;Param/Value/10212B4F&quot;);
                gv_rewardReq[1][24] = StringExternal(&quot;Param/Value/57F48BCF&quot;);
                gv_rewardReq[1][25] = StringExternal(&quot;Param/Value/69DD661D&quot;);
                gv_rewardReq[1][26] = StringExternal(&quot;Param/Value/62FE5EB7&quot;);
                gv_rewardReq[1][27] = StringExternal(&quot;Param/Value/70959859&quot;);
                gv_rewardReq[1][28] = StringExternal(&quot;Param/Value/8FF6A9AB&quot;);
                gv_rewardReqExists[1][9] = true;
                gv_rewardReqExists[1][10] = true;
                gv_rewardReqExists[1][11] = true;
                gv_rewardReqExists[1][12] = true;
                gv_rewardReqExists[1][13] = true;
                gv_rewardReqExists[1][14] = true;
                gv_rewardReqExists[1][15] = true;
                gv_rewardReqExists[1][16] = true;
                gv_rewardReqExists[1][17] = true;
                gv_rewardReqExists[1][18] = true;
                gv_rewardReqExists[1][19] = true;
                gv_rewardReqExists[1][20] = true;
                gv_rewardReqExists[1][21] = true;
                gv_rewardReqExists[1][22] = true;
                gv_rewardReqExists[1][23] = true;
                gv_rewardReqExists[1][24] = true;
                gv_rewardReqExists[1][25] = true;
                gv_rewardReqExists[1][26] = true;
                gv_rewardReqExists[1][27] = true;
                gv_rewardReqExists[1][28] = true;
                gv_rewardHideIfReqIncomplete[1][27] = true;
                gv_rewardHideIfReqIncomplete[1][28] = true;
                gv_rewardTitle[2][1] = StringExternal(&quot;Param/Value/EB1DF8E9&quot;);
                gv_rewardTitle[2][2] = StringExternal(&quot;Param/Value/ED8D8F6A&quot;);
                gv_rewardTitle[2][3] = StringExternal(&quot;Param/Value/66CDBCB8&quot;);
                gv_rewardTitle[2][4] = StringExternal(&quot;Param/Value/64063B5A&quot;);
                gv_rewardTitle[2][5] = StringExternal(&quot;Param/Value/BECF4C47&quot;);
                gv_rewardTitle[2][6] = StringExternal(&quot;Param/Value/FDC5BBB4&quot;);
                gv_rewardTitle[2][7] = StringExternal(&quot;Param/Value/4442732C&quot;);
                gv_rewardTitle[2][8] = StringExternal(&quot;Param/Value/B745CD41&quot;);
                gv_rewardTitle[2][9] = StringExternal(&quot;Param/Value/0BB102A6&quot;);
                gv_rewardTitle[2][27] = StringExternal(&quot;Param/Value/6951B6DE&quot;);
                gv_rewardTitle[2][28] = StringExternal(&quot;Param/Value/B2176861&quot;);
                gv_rewardCost[2][1] = 2500;
                gv_rewardCost[2][2] = 2500;
                gv_rewardCost[2][3] = 5000;
                gv_rewardCost[2][4] = 5000;
                gv_rewardCost[2][5] = 7500;
                gv_rewardCost[2][6] = 7500;
                gv_rewardCost[2][7] = 7500;
                gv_rewardCost[2][8] = 7500;
                gv_rewardCost[2][9] = 10000;
                gv_rewardCost[2][27] = 0;
                gv_rewardCost[2][28] = 0;
                gv_rewardTooltip[2][1] = StringExternal(&quot;Param/Value/F47798C3&quot;);
                gv_rewardTooltip[2][2] = StringExternal(&quot;Param/Value/613188CE&quot;);
                gv_rewardTooltip[2][3] = StringExternal(&quot;Param/Value/9B6B69F3&quot;);
                gv_rewardTooltip[2][4] = StringExternal(&quot;Param/Value/F6C5577E&quot;);
                gv_rewardTooltip[2][5] = StringExternal(&quot;Param/Value/B69FBD27&quot;);
                gv_rewardTooltip[2][6] = StringExternal(&quot;Param/Value/AFF9D081&quot;);
                gv_rewardTooltip[2][7] = StringExternal(&quot;Param/Value/830ED0F2&quot;);
                gv_rewardTooltip[2][8] = StringExternal(&quot;Param/Value/2E7D630D&quot;);
                gv_rewardTooltip[2][9] = StringExternal(&quot;Param/Value/EEB2DD38&quot;);
                gv_rewardTooltip[2][27] = StringExternal(&quot;Param/Value/2433645B&quot;);
                gv_rewardTooltip[2][28] = StringExternal(&quot;Param/Value/FE640A06&quot;);
                gv_rewardReq[2][2] = StringExternal(&quot;Param/Value/D23C549C&quot;);
                gv_rewardReq[2][5] = StringExternal(&quot;Param/Value/5B2CAFFA&quot;);
                gv_rewardReq[2][6] = StringExternal(&quot;Param/Value/FA2C8287&quot;);
                gv_rewardReq[2][8] = StringExternal(&quot;Param/Value/6009899E&quot;);
                gv_rewardReq[2][9] = StringExternal(&quot;Param/Value/F00D1F5C&quot;);
                gv_rewardReq[2][27] = StringExternal(&quot;Param/Value/41CEF562&quot;);
                gv_rewardReq[2][28] = StringExternal(&quot;Param/Value/628AEA03&quot;);
                gv_rewardReqExists[2][2] = true;
                gv_rewardReqExists[2][5] = true;
                gv_rewardReqExists[2][6] = true;
                gv_rewardReqExists[2][8] = true;
                gv_rewardReqExists[2][9] = true;
                gv_rewardReqExists[2][27] = true;
                gv_rewardReqExists[2][28] = true;
                gv_rewardHideIfReqIncomplete[2][27] = true;
                gv_rewardHideIfReqIncomplete[2][28] = true;
                gv_rewardTitle[3][1] = StringExternal(&quot;Param/Value/6A9B9402&quot;);
                gv_rewardTitle[3][2] = StringExternal(&quot;Param/Value/A6DEE159&quot;);
                gv_rewardTitle[3][3] = StringExternal(&quot;Param/Value/9B6456E6&quot;);
                gv_rewardTitle[3][4] = StringExternal(&quot;Param/Value/5266414A&quot;);
                gv_rewardTitle[3][5] = StringExternal(&quot;Param/Value/12C374DE&quot;);
                gv_rewardCost[3][1] = 4000;
                gv_rewardCost[3][2] = 4000;
                gv_rewardCost[3][3] = 10000;
                gv_rewardCost[3][4] = 15000;
                gv_rewardCost[3][5] = 15000;
                gv_rewardTooltip[3][1] = StringExternal(&quot;Param/Value/BA058DA5&quot;);
                gv_rewardTooltip[3][2] = StringExternal(&quot;Param/Value/AD8F1391&quot;);
                gv_rewardTooltip[3][3] = StringExternal(&quot;Param/Value/9ADD45F8&quot;);
                gv_rewardTooltip[3][4] = StringExternal(&quot;Param/Value/C3B758AE&quot;);
                gv_rewardTooltip[3][5] = StringExternal(&quot;Param/Value/B437C95C&quot;);
                gv_rewardReq[3][2] = StringExternal(&quot;Param/Value/92A8A7B6&quot;);
                gv_rewardReq[3][3] = StringExternal(&quot;Param/Value/52E5EB8B&quot;);
                gv_rewardReq[3][4] = StringExternal(&quot;Param/Value/E4B04AF9&quot;);
                gv_rewardReq[3][5] = StringExternal(&quot;Param/Value/FE4B8323&quot;);
                gv_rewardReqExists[3][2] = true;
                gv_rewardReqExists[3][3] = true;
                gv_rewardReqExists[3][4] = true;
                gv_rewardReqExists[3][5] = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupRewardData_Init () {
                gt_SetupRewardData = TriggerCreate(&quot;gt_SetupRewardData_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SetupRewardData_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="257AAF56">
        <ScriptCode>
            bool gt_SetupRewardsDialog_Func (bool testConds, bool runActions) {
                int auto2820C9B2_ae;
                int auto2820C9B2_ai;
                int auto3986868D_ae;
                int auto3986868D_ai;
                // Variable Declarations
                int lv_x;
                int lv_y;
                int lv_i;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogCreate(260, 65, c_anchorCenter, -720, -190, true);
                gv_rewardsOpenerDialog = DialogLastCreated();
                DialogSetVisible(gv_rewardsOpenerDialog, PlayerGroupAll(), false);
                DialogSetTransparency(gv_rewardsOpenerDialog, 10.0);
                libNtve_gf_CreateDialogItemButton(gv_rewardsOpenerDialog, 220, 32, c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/583DD6A1&quot;), StringExternal(&quot;Param/Value/A22BC165&quot;), &quot;&quot;);
                gv_rewardsOpenerItem = DialogControlLastCreated();
                DialogCreate(1200, 540, c_anchorCenter, 0, -125, true);
                gv_rewardsMainWindow = DialogLastCreated();
                DialogSetVisible(gv_rewardsMainWindow, PlayerGroupAll(), false);
                libNtve_gf_CreateDialogItemLabel(gv_rewardsMainWindow, 250, 50, c_anchorTopLeft, 75, 75, StringExternal(&quot;Param/Value/398D1D0C&quot;), Color(100,100,100), false, 2.0);
                gv_conqpointsLabel = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_rewardsMainWindow, 220, 50, c_anchorTopLeft, 75, 125, StringExternal(&quot;Param/Value/AA0A072B&quot;), StringExternal(&quot;Param/Value/10C2DE53&quot;), &quot;&quot;);
                gv_rewardsCatBTN[1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_rewardsMainWindow, 220, 50, c_anchorTopLeft, 75, 175, StringExternal(&quot;Param/Value/0D73B971&quot;), StringExternal(&quot;Param/Value/38C24E7A&quot;), &quot;&quot;);
                gv_rewardsCatBTN[2] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_rewardsMainWindow, 220, 50, c_anchorTopLeft, 75, 225, StringExternal(&quot;Param/Value/5B3E6BC0&quot;), StringExternal(&quot;Param/Value/1E5F4FBD&quot;), &quot;&quot;);
                gv_rewardsCatBTN[3] = DialogControlLastCreated();
                auto2820C9B2_ae = 7;
                auto2820C9B2_ai = 1;
                lv_y = 1;
                for ( ; ( (auto2820C9B2_ai &gt;= 0 &amp;&amp; lv_y &lt;= auto2820C9B2_ae) || (auto2820C9B2_ai &lt;= 0 &amp;&amp; lv_y &gt;= auto2820C9B2_ae) ) ; lv_y += auto2820C9B2_ai ) {
                    auto3986868D_ae = 4;
                    auto3986868D_ai = 1;
                    lv_x = 1;
                    for ( ; ( (auto3986868D_ai &gt;= 0 &amp;&amp; lv_x &lt;= auto3986868D_ae) || (auto3986868D_ai &lt;= 0 &amp;&amp; lv_x &gt;= auto3986868D_ae) ) ; lv_x += auto3986868D_ai ) {
                        lv_i += 1;
                        TextExpressionSetToken(&quot;Param/Expression/A2EFDF1C&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/2E5EF66E&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/A2EFDF1C&quot;, &quot;B&quot;, IntToText(lv_y));
                        TextExpressionSetToken(&quot;Param/Expression/A2EFDF1C&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/6BC0FF44&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/A2EFDF1C&quot;, &quot;D&quot;, IntToText(lv_x));
                        TextExpressionSetToken(&quot;Param/Expression/A2EFDF1C&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/35F3E661&quot;));
                        libNtve_gf_CreateDialogItemButton(gv_rewardsMainWindow, 180, 40, c_anchorTopLeft, (150 + (lv_x * 200)), (30 + (lv_y * 55)), StringExternal(&quot;Param/Value/6B0CEF15&quot;), TextExpressionAssemble(&quot;Param/Expression/A2EFDF1C&quot;), &quot;&quot;);
                        gv_rewardButton[lv_i] = DialogControlLastCreated();
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupRewardsDialog_Init () {
                gt_SetupRewardsDialog = TriggerCreate(&quot;gt_SetupRewardsDialog_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SetupRewardsDialog_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5FB7CC71">
        <ScriptCode>
            bool gt_RewardsDialogInteract_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((EventDialogControl() == gv_rewardsOpenerItem)) {
                    gf_ShowRewardsDialog(EventPlayer());
                    gf_UpdateRewardsDialog(EventPlayer());
                }
                else if ((EventDialogControl() == gv_rewardsCatBTN[1])) {
                    gv_rewardsCatSelect[EventPlayer()] = 1;
                    gf_UpdateRewardsDialog(EventPlayer());
                }
                else if ((EventDialogControl() == gv_rewardsCatBTN[2])) {
                    gv_rewardsCatSelect[EventPlayer()] = 2;
                    gf_UpdateRewardsDialog(EventPlayer());
                }
                else if ((EventDialogControl() == gv_rewardsCatBTN[3])) {
                    gv_rewardsCatSelect[EventPlayer()] = 3;
                    gf_UpdateRewardsDialog(EventPlayer());
                }
                else if ((gf_RewardButtonClicked(EventDialogControl()) == true)) {
                    lv_a = gf_GetRewardButtonIndex(EventDialogControl());
                    if (((gv_rewardReqExists[gv_rewardsCatSelect[EventPlayer()]][lv_a] == false) || (gf_RequirementCompleted(EventPlayer(), gv_rewardsCatSelect[EventPlayer()], lv_a) == true))) {
                        if (((gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 1) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 4) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 7))) {
                            if ((gv_conqpoints[EventPlayer()] &gt;= gv_rewardCost[gv_rewardsCatSelect[EventPlayer()]][lv_a])) {
                                gv_conqpoints[EventPlayer()] -= gv_rewardCost[gv_rewardsCatSelect[EventPlayer()]][lv_a];
                                gf_SaveResources(EventPlayer());
                                gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] = gf_GetUnlockedVariable(3);
                                gf_DeactivateConflictingRewards(EventPlayer(), gv_rewardsCatSelect[EventPlayer()], lv_a);
                                gf_SaveRewards(EventPlayer());
                                gf_UpdateRewardsDialog(EventPlayer());
                                SoundPlay(SoundLink(&quot;UI_Achievement&quot;, -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                                TextExpressionSetToken(&quot;Param/Expression/4589585B&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/FF5B0BE4&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/4589585B&quot;, &quot;A&quot;, gv_rewardTitle[gv_rewardsCatSelect[EventPlayer()]][lv_a]);
                                TextExpressionSetToken(&quot;Param/Expression/4589585B&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/562738DF&quot;));
                                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/4589585B&quot;));
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal(&quot;Param/Value/62473311&quot;));
                            }
                        }
                        else if (((gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 2) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 5) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 8))) {
                            gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] = gf_GetUnlockedVariable(3);
                            gf_DeactivateConflictingRewards(EventPlayer(), gv_rewardsCatSelect[EventPlayer()], lv_a);
                            gf_SaveRewards(EventPlayer());
                            gf_UpdateRewardsDialog(EventPlayer());
                        }
                        else if (((gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 3) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 6) || (gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] == 9))) {
                            gv_rewardState[EventPlayer()][gv_rewardsCatSelect[EventPlayer()]][lv_a] = gf_GetUnlockedVariable(2);
                            gf_SaveRewards(EventPlayer());
                            gf_UpdateRewardsDialog(EventPlayer());
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal(&quot;Param/Value/7B3D3CB6&quot;));
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RewardsDialogInteract_Init () {
                gt_RewardsDialogInteract = TriggerCreate(&quot;gt_RewardsDialogInteract_Func&quot;);
                TriggerAddEventDialogControl(gt_RewardsDialogInteract, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_RewardsDialogInteract_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="53560275">
        <ScriptCode>
            bool gt_AfflictionTrigger_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_UnlockRequirement(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1, 11);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AfflictionTrigger_Init () {
                gt_AfflictionTrigger = TriggerCreate(&quot;gt_AfflictionTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AfflictionTrigger, c_playerAny, &quot;AfflictionAchievementTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AfflictionTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="22237A2A">
        <ScriptCode>
            bool gt_AristocratFail_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_aristocrat[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AristocratFail_Init () {
                gt_AristocratFail = TriggerCreate(&quot;gt_AristocratFail_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AristocratFail, c_playerAny, &quot;AristocratRequirementRemove&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AristocratFail_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="139554B5">
        <ScriptCode>
            bool gt_HunterRequirement_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_UnlockRequirement(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 1, 22);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HunterRequirement_Init () {
                gt_HunterRequirement = TriggerCreate(&quot;gt_HunterRequirement_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_HunterRequirement, c_playerAny, &quot;HunterRequirement&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_HunterRequirement_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DAB26DDD">
        <ScriptCode>
            bool gt_CollectorRequirement_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_UnlockRequirement(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CollectorRequirement_Init () {
                gt_CollectorRequirement = TriggerCreate(&quot;gt_CollectorRequirement_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_CollectorRequirement, c_playerAny, &quot;CollectorRequirement&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_CollectorRequirement_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4F4CE77B">
        <ScriptCode>
            bool gt_SlavemasterRequirement_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_UnlockRequirement(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1, 25);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SlavemasterRequirement_Init () {
                gt_SlavemasterRequirement = TriggerCreate(&quot;gt_SlavemasterRequirement_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_SlavemasterRequirement, c_playerAny, &quot;SlavemasterRequirement&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SlavemasterRequirement_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B6DA6CE6">
        <ScriptCode>
            bool gt_SpecialRewardsList_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_AddSpecialReward(&quot;1-S2-1-3931630&quot;, &quot;tournamentWin0002a&quot;, StringExternal(&quot;Param/Value/04BD10CC&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-3931630&quot;, &quot;tournamentWin0002b&quot;, StringExternal(&quot;Param/Value/B0921768&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-3931630&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/C46F48F4&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-313986&quot;, &quot;tournamentWin0002a&quot;, StringExternal(&quot;Param/Value/07175D58&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-313986&quot;, &quot;tournamentWin0002b&quot;, StringExternal(&quot;Param/Value/05572D9C&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-313986&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/49CAD12B&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-1881435&quot;, &quot;tournamentWin0002b&quot;, StringExternal(&quot;Param/Value/082BDBB4&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-1065370&quot;, &quot;tournamentWin0002b&quot;, StringExternal(&quot;Param/Value/3CC52069&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-1948976&quot;, &quot;tournamentWin0002b&quot;, StringExternal(&quot;Param/Value/589F8640&quot;));
                gf_AddSpecialReward(&quot;PLACEHOLDER&quot;, &quot;tournamentWin0002a&quot;, StringExternal(&quot;Param/Value/8CA1CFBE&quot;));
                gf_AddSpecialReward(&quot;PLACEHOLDER&quot;, &quot;tournamentWin0002a&quot;, StringExternal(&quot;Param/Value/43E8E9C0&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-3632156&quot;, &quot;tournamentWin0002a&quot;, StringExternal(&quot;Param/Value/2C4BA1CB&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-2583714&quot;, &quot;tournamentWin0002a&quot;, StringExternal(&quot;Param/Value/83D4B61B&quot;));
                gf_AddSpecialReward(&quot;PLACEHOLDER&quot;, &quot;tournamentWin0002a&quot;, StringExternal(&quot;Param/Value/B5C9946F&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-3962877&quot;, &quot;tournamentWin0002a&quot;, StringExternal(&quot;Param/Value/F243BEFB&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-4297629&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/4627125E&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-1854249&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/475E9459&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-4309763&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/97F16338&quot;));
                gf_AddSpecialReward(&quot;2-S2-2-488074&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/9074E490&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-4315539&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/2B9A6736&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-236197&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/21D5CAEF&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-2021139&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/FA300935&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-5100676&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/8733B7D1&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-4149377&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/591BEBF1&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-3468638&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/824DA49D&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-4641268&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/35A82913&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-2616365&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/89FBAB39&quot;));
                gf_AddSpecialReward(&quot;2-S2-1-189001&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/812555AD&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-1709040&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/5A479E5C&quot;));
                gf_AddSpecialReward(&quot;1-S2-1-3517129&quot;, &quot;tournamentWin0002c&quot;, StringExternal(&quot;Param/Value/29AFE25E&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpecialRewardsList_Init () {
                gt_SpecialRewardsList = TriggerCreate(&quot;gt_SpecialRewardsList_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SpecialRewardsList_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="78B93796">
        <ScriptCode>
            bool gt_ReprimandedListInfo_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReprimandedListInfo_Init () {
                gt_ReprimandedListInfo = TriggerCreate(&quot;gt_ReprimandedListInfo_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ReprimandedListInfo_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="A6FE3DCF">
        <Item Type="CustomScript" Id="F9007B21"/>
        <Item Type="CustomScript" Id="49E8F8F1"/>
        <Item Type="CustomScript" Id="5F93BCDC"/>
        <Item Type="CustomScript" Id="98FA266E"/>
        <Item Type="CustomScript" Id="897BAA80"/>
        <Item Type="CustomScript" Id="80B5D266"/>
        <Item Type="CustomScript" Id="C37E4819"/>
        <Item Type="CustomScript" Id="47609B75"/>
        <Item Type="CustomScript" Id="896A96B0"/>
        <Item Type="CustomScript" Id="56D89BDD"/>
        <Item Type="CustomScript" Id="103E2D54"/>
        <Item Type="CustomScript" Id="17A447EB"/>
        <Item Type="CustomScript" Id="4FF5B479"/>
        <Item Type="CustomScript" Id="230D478B"/>
        <Item Type="CustomScript" Id="D520EFD2"/>
        <Item Type="CustomScript" Id="58358D98"/>
        <Item Type="CustomScript" Id="70D83580"/>
        <Item Type="CustomScript" Id="83BEC490"/>
        <Item Type="CustomScript" Id="B9911F8C"/>
        <Item Type="CustomScript" Id="EA847D04"/>
        <Item Type="CustomScript" Id="B66CD5AC"/>
        <Item Type="CustomScript" Id="E5DFA5AC"/>
        <Item Type="CustomScript" Id="3E01F138"/>
        <Item Type="CustomScript" Id="6231E1BE"/>
        <Item Type="CustomScript" Id="558EFBA7"/>
        <Item Type="CustomScript" Id="12D36632"/>
        <Item Type="CustomScript" Id="E46C3EAF"/>
        <Item Type="CustomScript" Id="6026B437"/>
        <Item Type="CustomScript" Id="C1A32D2B"/>
        <Item Type="CustomScript" Id="F0745725"/>
        <Item Type="CustomScript" Id="1F72EABA"/>
        <Item Type="CustomScript" Id="ECE64642"/>
        <Item Type="CustomScript" Id="A7FDEF32"/>
        <Item Type="CustomScript" Id="20E23CBC"/>
        <Item Type="CustomScript" Id="AE869BB1"/>
        <Item Type="CustomScript" Id="B88C3F45"/>
        <Item Type="CustomScript" Id="4DCA0824"/>
        <Item Type="CustomScript" Id="5224CF1A"/>
        <Item Type="CustomScript" Id="4DD908E7"/>
        <Item Type="CustomScript" Id="494D8D44"/>
        <Item Type="CustomScript" Id="3DEFB89D"/>
        <Item Type="CustomScript" Id="66E35C39"/>
        <Item Type="CustomScript" Id="4122FA9E"/>
        <Item Type="CustomScript" Id="FD446453"/>
        <Item Type="CustomScript" Id="5F898108"/>
        <Item Type="CustomScript" Id="7BA90906"/>
        <Item Type="CustomScript" Id="DC97A53A"/>
        <Item Type="CustomScript" Id="25024A35"/>
        <Item Type="CustomScript" Id="58CA20F1"/>
        <Item Type="CustomScript" Id="DC17AED4"/>
        <Item Type="CustomScript" Id="53C76019"/>
        <Item Type="CustomScript" Id="145E8799"/>
        <Item Type="CustomScript" Id="169D9A23"/>
        <Item Type="CustomScript" Id="7C88979C"/>
        <Item Type="CustomScript" Id="547102FA"/>
        <Item Type="CustomScript" Id="61685DAC"/>
        <Item Type="CustomScript" Id="AFCEAA85"/>
        <Item Type="CustomScript" Id="C33728E1"/>
        <Item Type="CustomScript" Id="91B66594"/>
        <Item Type="CustomScript" Id="BD30F35F"/>
        <Item Type="CustomScript" Id="C8DB6D9D"/>
        <Item Type="CustomScript" Id="81D10EA9"/>
        <Item Type="CustomScript" Id="5C1C8F52"/>
        <Item Type="CustomScript" Id="C7B950B9"/>
        <Item Type="CustomScript" Id="9608BD4C"/>
        <Item Type="CustomScript" Id="3A52F100"/>
        <Item Type="CustomScript" Id="95AF4B71"/>
        <Item Type="CustomScript" Id="39B9E96B"/>
        <Item Type="CustomScript" Id="48FB83BB"/>
        <Item Type="CustomScript" Id="B2FEE479"/>
    </Element>
    <Element Type="CustomScript" Id="F9007B21">
        <ScriptCode>
            bool gt_QuestTimer_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_InitializeQuest(0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_QuestTimer_Init () {
                gt_QuestTimer = TriggerCreate(&quot;gt_QuestTimer_Func&quot;);
                TriggerAddEventTimer(gt_QuestTimer, gv_questDelayTimer);
            }
        </ScriptCode>
        <InitFunc>gt_QuestTimer_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="49E8F8F1">
        <ScriptCode>
            bool gt_QuestTimerUpdate_Func (bool testConds, bool runActions) {
                int auto3FA9ED3A_ae;
                int auto3FA9ED3A_ai;
                int auto02A3BBEC_ae;
                int auto02A3BBEC_ai;
                // Variable Declarations
                int lv_a;
                fixed lv_remainingTime;
                text lv_timerAddon;
                text lv_extraAddon;
                // Variable Initialization
                lv_remainingTime = TimerGetRemaining(gv_questTimer);
                // Conditions
                if (testConds) {
                    if (!((gv_questActive == true))) {
                        return false;
                    }
                    if (!((lv_remainingTime &gt; 0.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((lv_remainingTime &gt;= 30.0)) {
                    TextExpressionSetToken(&quot;Param/Expression/CB3C71BD&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/791098B6&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/CB3C71BD&quot;, &quot;B&quot;, TextTimeFormat(StringToText(&quot;&lt;mintotal/&gt;:&lt;sec2/&gt;&quot;), FixedToInt(lv_remainingTime)));
                    TextExpressionSetToken(&quot;Param/Expression/CB3C71BD&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/41691093&quot;));
                    lv_timerAddon = TextExpressionAssemble(&quot;Param/Expression/CB3C71BD&quot;);
                }
                else {
                    TextExpressionSetToken(&quot;Param/Expression/A5E1739B&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/EB2DA203&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/A5E1739B&quot;, &quot;B&quot;, TextTimeFormat(StringToText(&quot;&lt;mintotal/&gt;:&lt;sec2/&gt;&quot;), FixedToInt(lv_remainingTime)));
                    TextExpressionSetToken(&quot;Param/Expression/A5E1739B&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/018DB6B3&quot;));
                    lv_timerAddon = TextExpressionAssemble(&quot;Param/Expression/A5E1739B&quot;);
                }
                if ((gv_questIndexActive == 4)) {
                    lv_extraAddon = StringExternal(&quot;Param/Value/C2A5BFD7&quot;);
                    auto3FA9ED3A_ae = gv_activeTeams;
                    auto3FA9ED3A_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto3FA9ED3A_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto3FA9ED3A_ae) || (auto3FA9ED3A_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto3FA9ED3A_ae) ) ; lv_a += auto3FA9ED3A_ai ) {
                        if ((gv_teamData[lv_a].lv_allDead == false)) {
                            TextExpressionSetToken(&quot;Param/Expression/285BD276&quot;, &quot;F&quot;, lv_extraAddon);
                            TextExpressionSetToken(&quot;Param/Expression/285BD276&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/FD8CAB7D&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/285BD276&quot;, &quot;A&quot;, gf_GetTribeTextOfTeam(lv_a));
                            TextExpressionSetToken(&quot;Param/Expression/285BD276&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/49AB34A5&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/285BD276&quot;, &quot;C&quot;, IntToText(gv_grownTreesTeam[lv_a]));
                            lv_extraAddon = TextExpressionAssemble(&quot;Param/Expression/285BD276&quot;);
                        }
                        else {
                        }
                    }
                    if ((gv_grownTreesLeadingTeam != 0)) {
                        TextExpressionSetToken(&quot;Param/Expression/D6E7E9E6&quot;, &quot;A&quot;, lv_extraAddon);
                        TextExpressionSetToken(&quot;Param/Expression/D6E7E9E6&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/AD6FD5C5&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/D6E7E9E6&quot;, &quot;C&quot;, gf_GetTribeTextOfTeam(gv_grownTreesLeadingTeam));
                        lv_extraAddon = TextExpressionAssemble(&quot;Param/Expression/D6E7E9E6&quot;);
                    }
                    else {
                    }
                }
                else if ((gv_questIndexActive == 5)) {
                    lv_extraAddon = gf_FeastProgressText();
                }
                else if ((gv_questIndexActive == 6)) {
                    TextExpressionSetToken(&quot;Param/Expression/5430B19F&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/1A5B981D&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/5430B19F&quot;, &quot;B&quot;, gf_GetTeamChallengerName(1));
                    TextExpressionSetToken(&quot;Param/Expression/5430B19F&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/F43B2F7B&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/5430B19F&quot;, &quot;D&quot;, gf_GetTeamChallengerName(2));
                    TextExpressionSetToken(&quot;Param/Expression/5430B19F&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/779FD30D&quot;));
                    lv_extraAddon = TextExpressionAssemble(&quot;Param/Expression/5430B19F&quot;);
                }
                else if ((gv_questIndexActive == 9)) {
                    lv_extraAddon = StringExternal(&quot;Param/Value/B87A643B&quot;);
                    auto02A3BBEC_ae = gv_activeTeams;
                    auto02A3BBEC_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto02A3BBEC_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto02A3BBEC_ae) || (auto02A3BBEC_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto02A3BBEC_ae) ) ; lv_a += auto02A3BBEC_ai ) {
                        if ((gv_teamData[lv_a].lv_allDead == false)) {
                            TextExpressionSetToken(&quot;Param/Expression/44642923&quot;, &quot;F&quot;, lv_extraAddon);
                            TextExpressionSetToken(&quot;Param/Expression/44642923&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/F78856C8&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/44642923&quot;, &quot;A&quot;, gf_GetTribeTextOfTeam(lv_a));
                            TextExpressionSetToken(&quot;Param/Expression/44642923&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/E4534C22&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/44642923&quot;, &quot;C&quot;, IntToText(gv_trufflesFound[lv_a]));
                            lv_extraAddon = TextExpressionAssemble(&quot;Param/Expression/44642923&quot;);
                        }
                        else {
                        }
                    }
                    if ((gv_truffleLeadingTeam != 0)) {
                        TextExpressionSetToken(&quot;Param/Expression/9A790C6F&quot;, &quot;A&quot;, lv_extraAddon);
                        TextExpressionSetToken(&quot;Param/Expression/9A790C6F&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/569114BF&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/9A790C6F&quot;, &quot;C&quot;, gf_GetTribeTextOfTeam(gv_truffleLeadingTeam));
                        lv_extraAddon = TextExpressionAssemble(&quot;Param/Expression/9A790C6F&quot;);
                    }
                    else {
                    }
                }
                else if ((gv_questIndexActive == 10) &amp;&amp; (gv_witchSummoned == false)) {
                    TextExpressionSetToken(&quot;Param/Expression/72312767&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/BA739526&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/72312767&quot;, &quot;B&quot;, IntToText(gv_bearsKilled));
                    TextExpressionSetToken(&quot;Param/Expression/72312767&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/6BE85037&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/72312767&quot;, &quot;D&quot;, IntToText(gv_witchSpawnReq));
                    TextExpressionSetToken(&quot;Param/Expression/72312767&quot;, &quot;E&quot;, StringExternal(&quot;Param/Value/54262A80&quot;));
                    lv_extraAddon = TextExpressionAssemble(&quot;Param/Expression/72312767&quot;);
                }
                else if ((gv_questIndexActive == 16)) {
                    lv_extraAddon = gf_ExpeditionProgressText();
                }
                if ((gv_questIndexActive == 6) &amp;&amp; ((TimerGetRemaining(gv_questTimer) &gt;= 1) &amp;&amp; (TimerGetRemaining(gv_questTimer) &lt;= 5))) {
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                }
                TextExpressionSetToken(&quot;Param/Expression/0280AA6D&quot;, &quot;A&quot;, gv_questText);
                TextExpressionSetToken(&quot;Param/Expression/0280AA6D&quot;, &quot;B&quot;, lv_timerAddon);
                TextExpressionSetToken(&quot;Param/Expression/0280AA6D&quot;, &quot;C&quot;, lv_extraAddon);
                ObjectiveSetName(gv_questObjective, TextExpressionAssemble(&quot;Param/Expression/0280AA6D&quot;));
                TimerStart(gv_questTimerUpdate, 1.0, false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_QuestTimerUpdate_Init () {
                gt_QuestTimerUpdate = TriggerCreate(&quot;gt_QuestTimerUpdate_Func&quot;);
                TriggerAddEventTimer(gt_QuestTimerUpdate, gv_questTimerUpdate);
            }
        </ScriptCode>
        <InitFunc>gt_QuestTimerUpdate_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5F93BCDC">
        <ScriptCode>
            bool gt_ChiefExpire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_p;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_p = UnitGetPosition(gv_murlocChief);
                gv_questIndexActive = 0;
                gv_questActive = false;
                SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/94AEE95B&quot;));
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_chiefPing);
                UnitRemove(gv_murlocChief);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ChiefExpire_Init () {
                gt_ChiefExpire = TriggerCreate(&quot;gt_ChiefExpire_Func&quot;);
                TriggerAddEventTimer(gt_ChiefExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_ChiefExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="98FA266E">
        <ScriptCode>
            bool gt_ChiefCharge_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_distance;
                fixed lv_angle;
                // Variable Initialization
                lv_distance = DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
                lv_angle = AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.0);
                gf_Charge(EventPlayerEffectUsedUnit(c_effectUnitCaster), PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), (10.0 - lv_distance), lv_angle), 1.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ChiefCharge_Init () {
                gt_ChiefCharge = TriggerCreate(&quot;gt_ChiefCharge_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ChiefCharge, c_playerAny, &quot;MurlocRushTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ChiefCharge_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="897BAA80">
        <ScriptCode>
            bool gt_ChiefEnrage_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;MurlocRush&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.TimeUse&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString(4.0, 0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ChiefEnrage_Init () {
                gt_ChiefEnrage = TriggerCreate(&quot;gt_ChiefEnrage_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ChiefEnrage, c_playerAny, &quot;MurlocFrenzyApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ChiefEnrage_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="80B5D266">
        <ScriptCode>
            bool gt_ChiefDerage_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;MurlocRush&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.TimeUse&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString(7.0, 0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ChiefDerage_Init () {
                gt_ChiefDerage = TriggerCreate(&quot;gt_ChiefDerage_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ChiefDerage, c_playerAny, &quot;MurlocFrenzyRemove&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ChiefDerage_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C37E4819">
        <ScriptCode>
            bool gt_TreasureExpire_Func (bool testConds, bool runActions) {
                int autoC9C4173E_ae;
                int autoC9C4173E_ai;
                // Variable Declarations
                int lv_a;
                point lv_p;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[2] = true;
                UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
                SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                ObjectiveDestroy(gv_questObjective);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/FC8D301C&quot;));
                autoC9C4173E_ae = 20;
                autoC9C4173E_ai = 1;
                lv_a = 1;
                for ( ; ( (autoC9C4173E_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC9C4173E_ae) || (autoC9C4173E_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC9C4173E_ae) ) ; lv_a += autoC9C4173E_ai ) {
                    PingDestroy(gv_treasurePing[lv_a]);
                }
                UnitGroupLoopBegin(gv_treasureChests);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;KingsReward&quot;) == false)) {
                        UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TreasureExpire_Init () {
                gt_TreasureExpire = TriggerCreate(&quot;gt_TreasureExpire_Func&quot;);
                TriggerAddEventTimer(gt_TreasureExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_TreasureExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="47609B75">
        <ScriptCode>
            bool gt_Retrieved_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                point lv_p;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                lv_p = UnitGetPosition(gv_merchant);
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Actions
                if (!runActions) {
                    return true;
                }
                TextExpressionSetToken(&quot;Param/Expression/7C267A37&quot;, &quot;A&quot;, TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                TextExpressionSetToken(&quot;Param/Expression/7C267A37&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/9F020F5E&quot;));
                TextExpressionSetToken(&quot;Param/Expression/7C267A37&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_i));
                TextExpressionSetToken(&quot;Param/Expression/7C267A37&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/A41D2C13&quot;));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/7C267A37&quot;));
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[3] = true;
                TimerPause(gv_questTimer, true);
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_shipmentPing);
                PingDestroy(gv_merchantPing);
                gf_DropandRemove(gv_shipment);
                UnitRemove(gv_merchant);
                gf_RetrieveRewards(lv_p);
                lv_questWinners = gv_teamData[gv_playerData[lv_i].lv_team].lv_members;
                libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Retrieved_Init () {
                gt_Retrieved = TriggerCreate(&quot;gt_Retrieved_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_Retrieved, 0, &quot;FindCrabTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_Retrieved_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="896A96B0">
        <ScriptCode>
            bool gt_RetrieveExpire_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 3))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/B5707E6E&quot;));
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_shipmentPing);
                PingDestroy(gv_merchantPing);
                gf_DropandRemove(gv_shipment);
                UnitRemove(gv_merchant);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RetrieveExpire_Init () {
                gt_RetrieveExpire = TriggerCreate(&quot;gt_RetrieveExpire_Func&quot;);
                TriggerAddEventTimer(gt_RetrieveExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_RetrieveExpire_Init </InitFunc>
    </Element>
    <Element Type="CustomScript" Id="56D89BDD">
        <ScriptCode>
            bool gt_PlantEnd_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                int lv_mostPlantedTeam;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 4))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[4] = true;
                ObjectiveDestroy(gv_questObjective);
                if ((gv_grownTreesLeadingTeam != 0)) {
                    lv_questWinners = gv_teamData[gv_grownTreesLeadingTeam].lv_members;
                    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                    TextExpressionSetToken(&quot;Param/Expression/2508B556&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/60F5B409&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/2508B556&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(gv_grownTreesLeadingTeam));
                    TextExpressionSetToken(&quot;Param/Expression/2508B556&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/88B537EA&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/2508B556&quot;));
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/A0CFAF7D&quot;));
                }
                if (((gv_grownTreesLeadingTeam &gt;= 1) &amp;&amp; (gv_grownTreesLeadingTeam &lt;= gv_players))) {
                    PlayerGroupLoopBegin(lv_questWinners);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/56AB984F&quot;));
                        gv_skillPointsPlayer[PlayerGroupLoopCurrent()] += 5;
                        gf_IncreaseSkillType(PlayerGroupLoopCurrent(), 1, 5);
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                            gf_Quicktag(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, StringExternal(&quot;Param/Value/8934A9A1&quot;), 5.0, 24);
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;GrandForesterDuration&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString(480.0, 0));
                            UnitBehaviorAdd(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;GrandForestersFavoured&quot;, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, 1);
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                }
                else {
                }
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlantEnd_Init () {
                gt_PlantEnd = TriggerCreate(&quot;gt_PlantEnd_Func&quot;);
                TriggerAddEventTimer(gt_PlantEnd, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_PlantEnd_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="103E2D54">
        <ScriptCode>
            bool gt_PlantUpdateBuff_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_time;
                // Variable Initialization
                lv_time = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GrandForesterDuration&quot;, &quot;Amount&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;GrandForesterDuration&quot;, &quot;Amount&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_time - 1.0), 0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlantUpdateBuff_Init () {
                gt_PlantUpdateBuff = TriggerCreate(&quot;gt_PlantUpdateBuff_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_PlantUpdateBuff, c_playerAny, &quot;GrandForesterUpdate&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_PlantUpdateBuff_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="17A447EB">
        <ScriptCode>
            bool gt_FeastExpire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_p;
                int lv_a;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 5))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_p = UnitGetPosition(gv_feastChef);
                gv_questIndexActive = 0;
                gv_questActive = false;
                SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E917DD1A&quot;));
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_feastChefPing);
                UnitRemove(gv_feastChef);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FeastExpire_Init () {
                gt_FeastExpire = TriggerCreate(&quot;gt_FeastExpire_Func&quot;);
                TriggerAddEventTimer(gt_FeastExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_FeastExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4FF5B479">
        <ScriptCode>
            bool gt_FeastTutelageOn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Quicktag(EventUnit(), StringExternal(&quot;Param/Value/189C4CB1&quot;), 2.0, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FeastTutelageOn_Init () {
                gt_FeastTutelageOn = TriggerCreate(&quot;gt_FeastTutelageOn_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_FeastTutelageOn, null, &quot;TheGastronomistsTutelage&quot;, c_unitBehaviorChangeCreate);
            }
        </ScriptCode>
        <InitFunc>gt_FeastTutelageOn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="230D478B">
        <ScriptCode>
            bool gt_FeastTutelageOff_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Quicktag(EventUnit(), StringExternal(&quot;Param/Value/E8DA5E51&quot;), 2.0, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FeastTutelageOff_Init () {
                gt_FeastTutelageOff = TriggerCreate(&quot;gt_FeastTutelageOff_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_FeastTutelageOff, null, &quot;TheGastronomistsTutelage&quot;, c_unitBehaviorChangeDestroy);
            }
        </ScriptCode>
        <InitFunc>gt_FeastTutelageOff_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D520EFD2">
        <ScriptCode>
            bool gt_GladiatorEndPhase1_Func (bool testConds, bool runActions) {
                int auto7EAF0CE6_ae;
                int auto7EAF0CE6_ai;
                int auto84BFFAB5_ae;
                int auto84BFFAB5_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                int lv_i;
                // Variable Initialization
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 6))) {
                        return false;
                    }
                    if (!((gv_gladiatorPhase == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitRemove(gv_zoneChecker[1]);
                UnitRemove(gv_zoneChecker[2]);
                PingDestroy(gv_zonePing[1]);
                PingDestroy(gv_zonePing[2]);
                ObjectiveDestroy(gv_questObjective);
                if ((!((gf_UnitExists(gv_challenger[1]) || gf_UnitExists(gv_challenger[2]))))) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/BC84B02D&quot;));
                    gv_questIndexActive = 0;
                    gv_questActive = false;
                    ObjectiveDestroy(gv_questObjective);
                    SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                }
                else if (((gf_UnitExists(gv_challenger[1]) &amp;&amp; (!(gf_UnitExists(gv_challenger[2])))) || (gf_UnitExists(gv_challenger[2]) &amp;&amp; (!(gf_UnitExists(gv_challenger[1])))))) {
                    lv_i = gf_GetTeamOfPlayer(UnitGetOwner(gf_RemainingDuelist()));
                    lv_questWinners = gv_teamData[lv_i].lv_members;
                    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                    TextExpressionSetToken(&quot;Param/Expression/513F7E53&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/947EFA66&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/513F7E53&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lv_i));
                    TextExpressionSetToken(&quot;Param/Expression/513F7E53&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/2BA8E88F&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/513F7E53&quot;));
                    PlayerGroupLoopBegin(lv_questWinners);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_dead[PlayerGroupLoopCurrent()] == false)) {
                            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, 75);
                            UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, PlayerGroupLoopCurrent(), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;Coward&quot;, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, 1);
                            }
                            UnitGroupLoopEnd();
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    gv_questIndexActive = 0;
                    gv_gladiatorPhase = 0;
                    gv_questActive = false;
                    gv_questCompleted[6] = true;
                    auto7EAF0CE6_ae = gv_challengers;
                    auto7EAF0CE6_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto7EAF0CE6_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto7EAF0CE6_ae) || (auto7EAF0CE6_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto7EAF0CE6_ae) ) ; lv_a += auto7EAF0CE6_ai ) {
                        gv_challenger[lv_a] = null;
                    }
                    ObjectiveDestroy(gv_questObjective);
                    SoundPlay(SoundLink(&quot;UI_ObjectiveComplete&quot;, -1), lv_questWinners, 100.0, 0.0);
                    SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), lv_questLosers, 100.0, 0.0);
                    gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                }
                else if (gf_UnitExists(gv_challenger[1]) &amp;&amp; gf_UnitExists(gv_challenger[2])) {
                    gv_gladiatorPhase = 2;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F61CF148&quot;));
                    auto84BFFAB5_ae = gv_challengers;
                    auto84BFFAB5_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto84BFFAB5_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto84BFFAB5_ae) || (auto84BFFAB5_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto84BFFAB5_ae) ) ; lv_a += auto84BFFAB5_ai ) {
                        lv_b = UnitGetOwner(gv_challenger[lv_a]);
                        gv_returnPoint[lv_a] = UnitGetPosition(gv_challenger[lv_a]);
                        UnitSetPosition(gv_challenger[lv_a], gv_gladiatorStart[lv_a], false);
                        UnitGroupLoopBegin(gv_pets[lv_b]);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitSetPosition(UnitGroupLoopCurrent(), gv_gladiatorStart[lv_a], false);
                            UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;SynergyProc&quot;, 1);
                        }
                        UnitGroupLoopEnd();
                        UnitIssueOrder(gv_challenger[lv_a], Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                        UnitSetPropertyFixed(gv_challenger[lv_a], c_unitPropLifePercent, 100.0);
                        UnitSetPropertyFixed(gv_challenger[lv_a], c_unitPropEnergyPercent, 100.0);
                        gv_playerData[lv_b].lv_warmth = 100.0;
                        gv_playerData[lv_b].lv_hunger = 100.0;
                        gv_playerData[lv_b].lv_stamina = 100.0;
                        UnitBehaviorRemove(gv_challenger[lv_a], &quot;Unconscious&quot;, 1);
                        UnitBehaviorRemove(gv_challenger[lv_a], &quot;Fishing&quot;, 1);
                        UnitBehaviorRemove(gv_challenger[lv_a], &quot;GuardianSpirit&quot;, 1);
                        UnitBehaviorRemove(gv_challenger[lv_a], &quot;GuardianSpiritLingering&quot;, 1);
                        UnitBehaviorRemove(gv_challenger[lv_a], &quot;FrostArmor&quot;, 1);
                        UnitBehaviorRemove(gv_challenger[lv_a], &quot;ShadowCloak&quot;, 1);
                        UnitBehaviorRemove(gv_challenger[lv_a], &quot;SiphonLife&quot;, 3);
                        CameraPan(lv_b, PointFromId(2592), 0.0, -1, 10.0, false);
                    }
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingObjective&quot;, PointFromId(2592), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 5.0, 270.0);
                    PlayerGroupLoopBegin(PlayerGroupAll());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        VisRevealerCreate(PlayerGroupLoopCurrent(), gv_regionArena);
                        gv_arenaRevealer[PlayerGroupLoopCurrent()] = VisRevealerLastCreated();
                    }
                    PlayerGroupLoopEnd();
                    SoundPlay(SoundLink(&quot;UI_MissionComplete&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    TriggerEnable(gt_GladiatorCrowd, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GladiatorEndPhase1_Init () {
                gt_GladiatorEndPhase1 = TriggerCreate(&quot;gt_GladiatorEndPhase1_Func&quot;);
                TriggerAddEventTimer(gt_GladiatorEndPhase1, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_GladiatorEndPhase1_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="58358D98">
        <ScriptCode>
            bool gt_GladiatorCrowd_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_r;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringLength(gv_previousSpectators) &gt; 5)) {
                    gv_previousSpectators = StringSub(gv_previousSpectators, 2, StringLength(gv_previousSpectators));
                }
                else {
                }
                while (true) {
                    lv_r = RandomInt(0, 9);
                    if ((StringSub(gv_previousSpectators, 1, 1) != IntToString(lv_r)) &amp;&amp; (StringSub(gv_previousSpectators, 2, 2) != IntToString(lv_r)) &amp;&amp; (StringSub(gv_previousSpectators, 3, 3) != IntToString(lv_r)) &amp;&amp; (StringSub(gv_previousSpectators, 4, 4) != IntToString(lv_r)) &amp;&amp; (StringSub(gv_previousSpectators, 5, 5) != IntToString(lv_r))) {
                        break;
                    }
                    else {
                    }
                }
                gv_previousSpectators = (gv_previousSpectators + IntToString(lv_r));
                TextTagCreate(gf_ArenaCheer(), 18, gv_arenaSpectator[lv_r], 2.0, true, false, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.5);
                if ((RandomInt(1, 8) == 1)) {
                    UnitCreate(1, &quot;HandfulofBerries&quot;, c_unitCreateIgnorePlacement, 0, gv_arenaSpectator[lv_r], libNtve_gf_RandomAngle());
                    UnitSetHeight(UnitLastCreated(), PointGetHeight(gv_arenaSpectator[lv_r]), 0.0);
                    UnitCreateEffectPoint(UnitLastCreated(), &quot;LootFountainEffect&quot;, RegionRandomPoint(gv_regionArenaThrowArea));
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GladiatorCrowd_Init () {
                gt_GladiatorCrowd = TriggerCreate(&quot;gt_GladiatorCrowd_Func&quot;);
                TriggerEnable(gt_GladiatorCrowd, false);
                TriggerAddEventTimePeriodic(gt_GladiatorCrowd, 1.0, c_timeGame);
            }
        </ScriptCode>
        <InitFunc>gt_GladiatorCrowd_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="70D83580">
        <ScriptCode>
            bool gt_GladiatorFind_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_zone;
                int lv_zoneIndex;
                unit lv_newChallenger;
                int lv_newChallengerPlayer;
                int lv_otherZoneIndex;
                // Variable Initialization
                lv_zone = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_zoneIndex = FixedToInt(UnitGetCustomValue(lv_zone, 0));
                lv_newChallenger = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_newChallengerPlayer = UnitGetOwner(lv_newChallenger);
                lv_otherZoneIndex = lv_zoneIndex;
                // Conditions
                if (testConds) {
                    if (!((gv_challenger[1] != EventPlayerEffectUsedUnit(c_effectUnitTarget)))) {
                        return false;
                    }
                    if (!((gv_challenger[2] != EventPlayerEffectUsedUnit(c_effectUnitTarget)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (lv_otherZoneIndex &gt;= 2) {
                    lv_otherZoneIndex = 1;
                }
                else {
                    lv_otherZoneIndex = lv_otherZoneIndex + 1;
                }
                if (((gf_UnitExists(gv_challenger[lv_otherZoneIndex]) == false) || (gv_playerData[UnitGetOwner(gv_challenger[lv_otherZoneIndex])].lv_team != gv_playerData[lv_newChallengerPlayer].lv_team))) {
                    if ((TimerGetRemaining(gv_questTimer) &lt; 30.0)) {
                        TimerStart(gv_questTimer, (TimerGetRemaining(gv_questTimer) + 10.0), false, c_timeGame);
                    }
                    else {
                    }
                    TextExpressionSetToken(&quot;Param/Expression/02862444&quot;, &quot;A&quot;, gf_GetTribeTextOfPlayer(lv_newChallengerPlayer));
                    TextExpressionSetToken(&quot;Param/Expression/02862444&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/BCDD1632&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/02862444&quot;, &quot;C&quot;, TextWithColor(gf_GetPlayerName(lv_newChallengerPlayer, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_newChallengerPlayer, false))));
                    TextExpressionSetToken(&quot;Param/Expression/02862444&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/7CD0C6A8&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/02862444&quot;));
                    SoundPlay(SoundLink(&quot;UI_CampaignHintNotify&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    gv_challenger[lv_zoneIndex] = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                    gv_aIData[lv_newChallengerPlayer].lv_benchDesire = null;
                    gv_aIData[lv_newChallengerPlayer].lv_smithyDesire = null;
                    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;ChallengeBannerCheckSuppress&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_newChallengerPlayer), c_messageAreaError, StringExternal(&quot;Param/Value/DA74D261&quot;));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GladiatorFind_Init () {
                gt_GladiatorFind = TriggerCreate(&quot;gt_GladiatorFind_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GladiatorFind, c_playerAny, &quot;ChallengeBannerTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GladiatorFind_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="83BEC490">
        <ScriptCode>
            bool gt_EnterArena_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventUnit(), &quot;ArenaCombatant&quot;, EventUnit(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnterArena_Init () {
                gt_EnterArena = TriggerCreate(&quot;gt_EnterArena_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnterArena, null, gv_regionArena, true);
            }
        </ScriptCode>
        <InitFunc>gt_EnterArena_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B9911F8C">
        <ScriptCode>
            bool gt_LeaveArena_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorRemove(EventUnit(), &quot;ArenaCombatant&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LeaveArena_Init () {
                gt_LeaveArena = TriggerCreate(&quot;gt_LeaveArena_Func&quot;);
                TriggerAddEventUnitRegion(gt_LeaveArena, null, gv_regionArena, false);
            }
        </ScriptCode>
        <InitFunc>gt_LeaveArena_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="EA847D04">
        <ScriptCode>
            bool gt_BlinkStalker_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_stalker;
                int lv_targetplayer;
                point lv_p;
                // Variable Initialization
                lv_stalker = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_targetplayer = FixedToInt(UnitGetCustomValue(lv_stalker, 0));
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gv_playerData[lv_targetplayer].lv_kobold)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_stalker), UnitGetPosition(gv_playerData[lv_targetplayer].lv_kobold)) &gt; gv_monstrosityLeashRadius)) {
                        lv_p = gf_BlinkLocation(gv_playerData[lv_targetplayer].lv_kobold);
                        if ((lv_p != null)) {
                            UnitSetPosition(lv_stalker, lv_p, false);
                        }
                        else {
                            UnitIssueOrder(lv_stalker, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(gv_playerData[lv_targetplayer].lv_kobold)), c_orderQueueReplace);
                        }
                    }
                    else {
                        UnitIssueOrder(lv_stalker, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(gv_playerData[lv_targetplayer].lv_kobold)), c_orderQueueReplace);
                    }
                }
                else {
                    gf_MonstrosityAcquireTarget(lv_stalker);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BlinkStalker_Init () {
                gt_BlinkStalker = TriggerCreate(&quot;gt_BlinkStalker_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BlinkStalker, c_playerAny, &quot;BlinkStalker&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BlinkStalker_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B66CD5AC">
        <ScriptCode>
            bool gt_WarlordExpire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_p;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 8))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_p = UnitGetPosition(gv_warlord);
                gv_questIndexActive = 0;
                gv_questActive = false;
                SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/A5226121&quot;));
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_warlordPing);
                UnitRemove(gv_warlord);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WarlordExpire_Init () {
                gt_WarlordExpire = TriggerCreate(&quot;gt_WarlordExpire_Func&quot;);
                TriggerAddEventTimer(gt_WarlordExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_WarlordExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E5DFA5AC">
        <ScriptCode>
            bool gt_WarlordBlades_Func (bool testConds, bool runActions) {
                int auto2D3F301C_ae;
                int auto2D3F301C_ai;
                int auto443E971A_ae;
                int auto443E971A_ai;
                int auto68996286_ae;
                int auto68996286_ai;
                // Variable Declarations
                unit lv_caster;
                int lv_i;
                fixed lv_accelerate;
                int lv_a;
                unit[5][3] lv_blade;
                fixed[3] lv_globalcycle;
                fixed[3] lv_localcycle;
                fixed lv_innerdistance;
                fixed lv_outerdistance;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_i = UnitGetOwner(lv_caster);
                lv_innerdistance = RandomFixed(2.0, 2.5);
                lv_outerdistance = RandomFixed(6.0, 6.5);
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(lv_caster, 0.0);
                auto2D3F301C_ae = 4;
                auto2D3F301C_ai = 1;
                lv_a = 1;
                for ( ; ( (auto2D3F301C_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto2D3F301C_ae) || (auto2D3F301C_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto2D3F301C_ae) ) ; lv_a += auto2D3F301C_ai ) {
                    UnitCreate(1, &quot;RotatingBlade&quot;, 0, lv_i, UnitGetPosition(lv_caster), 270.0);
                    lv_blade[lv_a][1] = UnitLastCreated();
                    UnitSetPosition(lv_blade[lv_a][1], PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_innerdistance, (lv_globalcycle[1] + (90.0 * lv_a))), false);
                    UnitSetState(UnitLastCreated(), c_unitStateIgnoreTerrainZ, true);
                    UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lv_caster)) + 0.5), 0.0);
                    UnitCreate(1, &quot;RotatingBlade&quot;, 0, lv_i, UnitGetPosition(lv_caster), 270.0);
                    lv_blade[lv_a][2] = UnitLastCreated();
                    UnitSetPosition(lv_blade[lv_a][2], PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_outerdistance, (lv_globalcycle[2] + (90.0 * lv_a))), false);
                    UnitSetState(UnitLastCreated(), c_unitStateIgnoreTerrainZ, true);
                    UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lv_caster)) + 0.5), 0.0);
                }
                while (gf_UnitExists(lv_caster) &amp;&amp; (UnitHasBehavior(lv_caster, &quot;WhirlingBlades&quot;) == true)) {
                    if ((lv_accelerate &lt; 1)) {
                        lv_accelerate += (1.0 / 8.0);
                    }
                    else {
                    }
                    lv_globalcycle[1] += ((360.0 / 48.0) * lv_accelerate);
                    lv_localcycle[1] -= ((360.0 / 4.0) * lv_accelerate);
                    lv_globalcycle[2] -= ((360.0 / 96.0) * lv_accelerate);
                    lv_localcycle[2] += ((360.0 / 4.0) * lv_accelerate);
                    auto443E971A_ae = 4;
                    auto443E971A_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto443E971A_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto443E971A_ae) || (auto443E971A_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto443E971A_ae) ) ; lv_a += auto443E971A_ai ) {
                        UnitSetPosition(lv_blade[lv_a][1], PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_innerdistance, (lv_globalcycle[1] + (90.0 * lv_a))), true);
                        UnitSetPosition(lv_blade[lv_a][2], PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_outerdistance, (lv_globalcycle[2] + (90.0 * lv_a))), true);
                    }
                    if ((lv_globalcycle[1] &gt;= 360.0)) {
                        lv_globalcycle[1] = 0.0;
                    }
                    else {
                    }
                    if ((lv_localcycle[1] &lt;= -360.0)) {
                        lv_localcycle[1] = 0.0;
                    }
                    else {
                    }
                    if ((lv_globalcycle[2] &lt;= -360.0)) {
                        lv_globalcycle[2] = 0.0;
                    }
                    else {
                    }
                    if ((lv_localcycle[2] &gt;= 360.0)) {
                        lv_localcycle[2] = 0.0;
                    }
                    else {
                    }
                    Wait(0.0625, c_timeGame);
                }
                auto68996286_ae = 4;
                auto68996286_ai = 1;
                lv_a = 1;
                for ( ; ( (auto68996286_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto68996286_ae) || (auto68996286_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto68996286_ae) ) ; lv_a += auto68996286_ai ) {
                    UnitKill(lv_blade[lv_a][1]);
                    UnitKill(lv_blade[lv_a][2]);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WarlordBlades_Init () {
                gt_WarlordBlades = TriggerCreate(&quot;gt_WarlordBlades_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WarlordBlades, c_playerAny, &quot;WhirlingBladesTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WarlordBlades_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3E01F138">
        <ScriptCode>
            bool gt_TrollGroundSpikesStart_Func (bool testConds, bool runActions) {
                int autoC7BD8DF7_ae;
                int autoC7BD8DF7_ai;
                // Variable Declarations
                int lv_a;
                const int lv_spikes = 3;
                unit lv_caster;
                int lv_i;
                point lv_p;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_i = UnitGetOwner(lv_caster);
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(lv_caster, 0.0);
                autoC7BD8DF7_ae = lv_spikes;
                autoC7BD8DF7_ai = 1;
                lv_a = 1;
                for ( ; ( (autoC7BD8DF7_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC7BD8DF7_ae) || (autoC7BD8DF7_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC7BD8DF7_ae) ) ; lv_a += autoC7BD8DF7_ai ) {
                    lv_p = PointWithOffsetPolar(UnitGetPosition(lv_caster), 2.0, (lv_a * (360.0 / lv_spikes)));
                    UnitCreate(1, &quot;TrollGroundSpike&quot;, c_unitCreateIgnorePlacement, lv_i, lv_p, AngleBetweenPoints(UnitGetPosition(lv_caster), lv_p));
                    UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
                    UnitBehaviorAdd(UnitLastCreated(), &quot;TrollGroundSpikeSeek&quot;, UnitLastCreated(), 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TrollGroundSpikesStart_Init () {
                gt_TrollGroundSpikesStart = TriggerCreate(&quot;gt_TrollGroundSpikesStart_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesStart, c_playerAny, &quot;TrollGroundSpikeTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TrollGroundSpikesStart_Init </InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6231E1BE">
        <ScriptCode>
            bool gt_TrollGroundSpikesSeek_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_spike;
                int lv_i;
                fixed lv_angle;
                point lv_p;
                unit lv_target;
                // Variable Initialization
                lv_spike = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_i = UnitGetOwner(lv_spike);
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_target = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_spike), 12.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_spike));
                if ((lv_target == null)) {
                    lv_target = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAnyExcludeSelf, RegionCircle(UnitGetPosition(lv_spike), 12.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_spike));
                }
                else {
                }
                if ((lv_target != null)) {
                    if ((AngleBetweenPoints(UnitGetPosition(lv_spike), UnitGetPosition(lv_target)) &gt;= UnitGetFacing(lv_spike))) {
                        lv_angle = ((UnitGetFacing(lv_spike) + 9.0) + RandomFixed(-5.0, 5.0));
                        lv_p = PointWithOffsetPolar(UnitGetPosition(lv_spike), RandomFixed(0.45, 0.9), lv_angle);
                    }
                    else {
                        lv_angle = ((UnitGetFacing(lv_spike) - 9.0) + RandomFixed(-5.0, 5.0));
                        lv_p = PointWithOffsetPolar(UnitGetPosition(lv_spike), RandomFixed(0.45, 0.9), lv_angle);
                    }
                }
                else {
                    lv_p = PointWithOffsetPolar(UnitGetPosition(lv_spike), RandomFixed(0.45, 0.9), (UnitGetFacing(lv_spike) + RandomFixed(-45.0, 45.0)));
                }
                if ((RegionContainsPoint(RegionEntireMap(), lv_p) == true)) {
                    UnitCreate(1, &quot;TrollGroundSpike&quot;, c_unitCreateIgnorePlacement, lv_i, lv_p, lv_angle);
                    UnitSetCustomValue(UnitLastCreated(), 0, (UnitGetCustomValue(lv_spike, 0) + 1.0));
                    if ((UnitGetCustomValue(UnitLastCreated(), 0) &lt; 60.0)) {
                        UnitBehaviorAdd(UnitLastCreated(), &quot;TrollGroundSpikeSeek&quot;, UnitLastCreated(), 1);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TrollGroundSpikesSeek_Init () {
                gt_TrollGroundSpikesSeek = TriggerCreate(&quot;gt_TrollGroundSpikesSeek_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesSeek, c_playerAny, &quot;TrollGroundSpikeSeek&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TrollGroundSpikesSeek_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="558EFBA7">
        <ScriptCode>
            bool gt_TrollGroundSpikesSpring_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_spike;
                const fixed lv_springHeight = 1.0;
                // Variable Initialization
                lv_spike = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(lv_spike, c_unitStateIgnoreTerrainZ, true);
                UnitSetHeight(lv_spike, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_spike)) + lv_springHeight), 0.0);
                UnitBehaviorAdd(lv_spike, &quot;TrollGroundSpikePeak&quot;, lv_spike, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TrollGroundSpikesSpring_Init () {
                gt_TrollGroundSpikesSpring = TriggerCreate(&quot;gt_TrollGroundSpikesSpring_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesSpring, c_playerAny, &quot;TrollGroundSpikeSearch&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TrollGroundSpikesSpring_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="12D36632">
        <ScriptCode>
            bool gt_TrollGroundSpikesSink_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_spike;
                fixed lv_sinkHeight;
                // Variable Initialization
                lv_spike = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_sinkHeight = -1.0;
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetHeight(lv_spike, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_spike)) + lv_sinkHeight), 0.625);
                UnitBehaviorAdd(lv_spike, &quot;TrollGroundSpikeTimedLife&quot;, lv_spike, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TrollGroundSpikesSink_Init () {
                gt_TrollGroundSpikesSink = TriggerCreate(&quot;gt_TrollGroundSpikesSink_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesSink, c_playerAny, &quot;TrollGroundSpikePeak&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TrollGroundSpikesSink_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E46C3EAF">
        <ScriptCode>
            bool gt_TrollGroundSpikesKnock_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeStructure) == false))) {
                        return false;
                    }
                    if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeArmored) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Upyougo(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0.7);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TrollGroundSpikesKnock_Init () {
                gt_TrollGroundSpikesKnock = TriggerCreate(&quot;gt_TrollGroundSpikesKnock_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TrollGroundSpikesKnock, c_playerAny, &quot;TrollGroundSpikeDamage&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TrollGroundSpikesKnock_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6026B437">
        <ScriptCode>
            bool gt_TruffleFind_Func (bool testConds, bool runActions) {
                // Variable Declarations
                text lv_textAddon;
                int lv_a;
                int lv_i;
                int lv_t;
                bool lv_newLeader;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                lv_t = gf_GetTeamOfPlayer(lv_i);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((libNtve_gf_RandomPercent() &gt;= (50.0 - (gv_skillForaging[lv_i] * 2.0)))) {
                    if ((gv_truffleSkillBonus[lv_i] &lt; 5)) {
                        gv_skillPointsPlayer[lv_i] += 1;
                        gf_IncreaseSkillType(lv_i, 4, 1);
                        lv_textAddon = StringExternal(&quot;Param/Value/482E1DB5&quot;);
                        gv_truffleSkillBonus[lv_i] += 1;
                    }
                    else {
                    }
                    TextExpressionSetToken(&quot;Param/Expression/4D163015&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/5F064BC0&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/4D163015&quot;, &quot;B&quot;, lv_textAddon);
                    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), TextExpressionAssemble(&quot;Param/Expression/4D163015&quot;), 3.0, 24);
                    gv_trufflesFound[lv_t] += 1;
                    if ((gv_trufflesFound[lv_t] &gt; gv_trufflesFound[gv_truffleLeadingTeam])) {
                        gv_truffleLeadingTeam = lv_t;
                    }
                    else {
                    }
                }
                else {
                    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/25086A4E&quot;), 2.0, 24);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TruffleFind_Init () {
                gt_TruffleFind = TriggerCreate(&quot;gt_TruffleFind_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TruffleFind, c_playerAny, &quot;FindTruffle&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TruffleFind_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C1A32D2B">
        <ScriptCode>
            bool gt_TruffleEnd_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                fixed lv_t;
                int lv_mostTrufflesTeam;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 9))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[9] = true;
                ObjectiveDestroy(gv_questObjective);
                if ((gv_truffleLeadingTeam != 0)) {
                    lv_questWinners = gv_teamData[gv_truffleLeadingTeam].lv_members;
                    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                    TextExpressionSetToken(&quot;Param/Expression/7EC101D1&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/953A1FDD&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/7EC101D1&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(gv_truffleLeadingTeam));
                    TextExpressionSetToken(&quot;Param/Expression/7EC101D1&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/0A767366&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/7EC101D1&quot;));
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/B3EAEEAA&quot;));
                }
                PlayerGroupLoopBegin(lv_questWinners);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent()));
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, PlayerGroupLoopCurrent(), FixedToString((lv_t + 1.0), 0));
                }
                PlayerGroupLoopEnd();
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TruffleEnd_Init () {
                gt_TruffleEnd = TriggerCreate(&quot;gt_TruffleEnd_Func&quot;);
                TriggerAddEventTimer(gt_TruffleEnd, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_TruffleEnd_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F0745725">
        <ScriptCode>
            bool gt_LightsOut_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroup(&quot;CampfireLit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_LightsOutImpact(UnitGetPosition(UnitGroupLoopCurrent()));
                    UnitCreateEffectUnit(EventUnit(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Torch&quot;, c_playerAny, RegionEntireMap(), UnitFilter((1 &lt;&lt; c_targetFilterItem), 0, 0, 0), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_LightsOutImpact(UnitGetPosition(UnitGroupLoopCurrent()));
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LightsOut_Init () {
                gt_LightsOut = TriggerCreate(&quot;gt_LightsOut_Func&quot;);
                TriggerAddEventUnitAbility(gt_LightsOut, null, AbilityCommand(&quot;LightsOut&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LightsOut_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1F72EABA">
        <ScriptCode>
            bool gt_PermafrostStart_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_caster;
                unit lv_target;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(lv_caster, 0.0);
                UnitCreate(1, &quot;Nightwisp&quot;, 0, 15, PointWithOffsetPolar(UnitGetPosition(lv_caster), 2.5, AngleBetweenPoints(UnitGetPosition(lv_caster), UnitGetPosition(lv_target))), libNtve_gf_RandomAngle());
                libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
                UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
                UnitSetHeight(UnitLastCreated(), 1.6, 0.0);
                UnitCreateEffectUnit(UnitLastCreated(), &quot;Permafrost&quot;, lv_target);
                UnitBehaviorAdd(lv_caster, &quot;PermafrostVisualTimer&quot;, lv_caster, 1);
                SoundPlayOnUnit(SoundLink(&quot;FrostWitchSpell&quot;, -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PermafrostStart_Init () {
                gt_PermafrostStart = TriggerCreate(&quot;gt_PermafrostStart_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_PermafrostStart, c_playerAny, &quot;PermafrostTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_PermafrostStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="ECE64642">
        <ScriptCode>
            bool gt_PermafrostDrain_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == &quot;Kobold&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_warmth -= 3.0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PermafrostDrain_Init () {
                gt_PermafrostDrain = TriggerCreate(&quot;gt_PermafrostDrain_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_PermafrostDrain, c_playerAny, &quot;PermafrostDamage&quot;);
                TriggerAddEventPlayerEffectUsed(gt_PermafrostDrain, c_playerAny, &quot;PermafrostDamageSecondary&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_PermafrostDrain_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A7FDEF32">
        <ScriptCode>
            bool gt_PiratesExpire_Func (bool testConds, bool runActions) {
                int auto5A8F09A7_ae;
                int auto5A8F09A7_ai;
                // Variable Declarations
                int lv_a;
                point lv_p;
                int lv_winner;
                int lv_loser;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 11))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                ObjectiveDestroy(gv_questObjective);
                SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4FEFDC1C&quot;));
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;ShovelKnowledge&quot;, 1);
                }
                UnitGroupLoopEnd();
                auto5A8F09A7_ae = gv_players;
                auto5A8F09A7_ai = 1;
                lv_a = 1;
                for ( ; ( (auto5A8F09A7_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto5A8F09A7_ae) || (auto5A8F09A7_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto5A8F09A7_ae) ) ; lv_a += auto5A8F09A7_ai ) {
                    if ((StringSub(gv_perks[lv_a], 5, 5) == &quot;1&quot;)) {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;BeerCost&quot;, &quot;Amount&quot;, lv_a, FixedToString(5.0, 0));
                    }
                    else {
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;BeerCost&quot;, &quot;Amount&quot;, lv_a, FixedToString(6.0, 0));
                    }
                }
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PiratesExpire_Init () {
                gt_PiratesExpire = TriggerCreate(&quot;gt_PiratesExpire_Func&quot;);
                TriggerAddEventTimer(gt_PiratesExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_PiratesExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="20E23CBC">
        <ScriptCode>
            bool gt_WizardExpire_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 12))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupActive(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/CCB88CD0&quot;));
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_wizardPing);
                UnitRemove(gv_wizard);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WizardExpire_Init () {
                gt_WizardExpire = TriggerCreate(&quot;gt_WizardExpire_Func&quot;);
                TriggerAddEventTimer(gt_WizardExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_WizardExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AE869BB1">
        <ScriptCode>
            bool gt_BuilderExpire_Func (bool testConds, bool runActions) {
                int autoE7AF8E13_ae;
                int autoE7AF8E13_ai;
                // Variable Declarations
                int lv_a;
                point lv_p;
                unitgroup lv_monuments;
                fixed lv_timerExtension;
                // Variable Initialization
                lv_monuments = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 13))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_monuments = UnitGroup(&quot;LorenorStatue&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 &lt;&lt; (c_targetFilterUnderConstruction - 32)), (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_monuments, c_unitCountAlive) &gt; 0) &amp;&amp; (gv_extensionAllowed == true)) {
                    gv_extensionAllowed = false;
                    lv_timerExtension = gf_LeastConstructionProgress(lv_monuments, 45.0);
                    TimerStart(gv_questTimer, lv_timerExtension, false, c_timeGame);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/A8CB8CAA&quot;));
                    SoundPlay(SoundLink(&quot;UI_TerranHint&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                    gv_questIndexActive = 0;
                    gv_questActive = false;
                    SoundPlay(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/34C60779&quot;));
                    UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;BarnetsMonument&quot;, 1);
                        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand(&quot;KoboldTestBuild&quot;, 30)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(UnitGroup(&quot;LorenorStatue&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 &lt;&lt; (c_targetFilterUnderConstruction - 32)), (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    autoE7AF8E13_ae = gv_maxTeams;
                    autoE7AF8E13_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoE7AF8E13_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE7AF8E13_ae) || (autoE7AF8E13_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE7AF8E13_ae) ) ; lv_a += autoE7AF8E13_ai ) {
                        gv_aIMonumentBuilder[lv_a] = 0;
                    }
                    ObjectiveDestroy(gv_questObjective);
                    TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuilderExpire_Init () {
                gt_BuilderExpire = TriggerCreate(&quot;gt_BuilderExpire_Func&quot;);
                TriggerAddEventTimer(gt_BuilderExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_BuilderExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B88C3F45">
        <ScriptCode>
            bool gt_BuilderFinish_Func (bool testConds, bool runActions) {
                int auto1B36423F_ae;
                int auto1B36423F_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                int lv_winningTeam;
                int lv_losingTeam;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnitProgressUnit()) == &quot;LorenorStatue&quot;))) {
                        return false;
                    }
                    if (!((gv_questIndexActive == 13))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_StaminaOnCraft(EventUnit());
                gf_AddExperience(EventUnit(), 100.0);
                UnitBehaviorRemove(EventUnitProgressUnit(), &quot;BarnetConstruction&quot;, 1);
                lv_winningTeam = gf_GetTeamOfPlayer(UnitGetOwner(EventUnitProgressUnit()));
                lv_questWinners = gv_teamData[lv_winningTeam].lv_members;
                libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[13] = true;
                TimerPause(gv_questTimer, true);
                ObjectiveDestroy(gv_questObjective);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                UnitGroupLoopBegin(UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;BarnetsMonument&quot;, 1);
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand(&quot;KoboldTestBuild&quot;, 30)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;LorenorStatue&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 &lt;&lt; (c_targetFilterUnderConstruction - 32)), (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                auto1B36423F_ae = gv_activeTeams;
                auto1B36423F_ai = 1;
                lv_a = 1;
                for ( ; ( (auto1B36423F_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto1B36423F_ae) || (auto1B36423F_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto1B36423F_ae) ) ; lv_a += auto1B36423F_ai ) {
                    gv_aIMonumentBuilder[lv_a] = 0;
                }
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(UnitGetOwner(EventUnit()), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal(&quot;Param/Value/59A62958&quot;) + (gf_GetTribeTextOfPlayer(UnitGetOwner(EventUnit())) + StringExternal(&quot;Param/Value/A4C879B2&quot;)))));
                PlayerGroupLoopBegin(lv_questWinners);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/302E7D35&quot;));
                    gv_skillPointsPlayer[PlayerGroupLoopCurrent()] += 5;
                    gf_IncreaseSkillType(PlayerGroupLoopCurrent(), 5, 5);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuilderFinish_Init () {
                gt_BuilderFinish = TriggerCreate(&quot;gt_BuilderFinish_Func&quot;);
                TriggerAddEventUnitConstructProgress(gt_BuilderFinish, null, c_unitProgressStageComplete);
            }
        </ScriptCode>
        <InitFunc>gt_BuilderFinish_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4DCA0824">
        <ScriptCode>
            bool gt_ExileDefendVictory_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 14))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[14] = true;
                UnitRemove(gv_exile);
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_exilePing);
                TextExpressionSetToken(&quot;Param/Expression/A22BCBEC&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/D6F70620&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A22BCBEC&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(gv_defenders));
                TextExpressionSetToken(&quot;Param/Expression/A22BCBEC&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/399A82AA&quot;));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/A22BCBEC&quot;));
                UIDisplayMessage(gv_teamData[gv_defenders].lv_members, c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E8E6B47E&quot;));
                PlayerGroupLoopBegin(gv_teamData[gv_defenders].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gv_skillPointsPlayer[PlayerGroupLoopCurrent()] += 5;
                    if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true) &amp;&amp; (gv_playerData[PlayerGroupLoopCurrent()].lv_isAI == true)) {
                        gf_AISpendSkillPoints(PlayerGroupLoopCurrent());
                    }
                    else {
                        gf_UpdateSkillButton(PlayerGroupLoopCurrent());
                    }
                }
                PlayerGroupLoopEnd();
                gf_QuestFinishEvents(gv_teamData[gv_defenders].lv_members, gv_teamData[gv_attackers].lv_members);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ExileDefendVictory_Init () {
                gt_ExileDefendVictory = TriggerCreate(&quot;gt_ExileDefendVictory_Func&quot;);
                TriggerAddEventTimer(gt_ExileDefendVictory, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_ExileDefendVictory_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5224CF1A">
        <ScriptCode>
            bool gt_ExileAttackVictory_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_victors;
                point lv_point;
                // Variable Initialization
                lv_victors = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 14))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[14] = true;
                TimerPause(gv_questTimer, true);
                ObjectiveDestroy(gv_questObjective);
                PingDestroy(gv_exilePing);
                TextExpressionSetToken(&quot;Param/Expression/108310E3&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/B4502278&quot;));
                TextExpressionSetToken(&quot;Param/Expression/108310E3&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(gv_attackers));
                TextExpressionSetToken(&quot;Param/Expression/108310E3&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/577E9710&quot;));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/108310E3&quot;));
                UIDisplayMessage(gv_teamData[gv_attackers].lv_members, c_messageAreaSubtitle, StringExternal(&quot;Param/Value/BB5D2C15&quot;));
                PlayerGroupLoopBegin(gv_teamData[gv_attackers].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_UnlockRequirement(PlayerGroupLoopCurrent(), 1, 20);
                    if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                        UnitGroupAdd(lv_victors, gv_playerData[PlayerGroupLoopCurrent()].lv_kobold);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                if ((UnitGroupCount(lv_victors, c_unitCountAlive) &gt; 0)) {
                    lv_point = gf_RandomPathablePoint(RegionCircle(UnitGroupCenterOfGroup(lv_victors), 16.0));
                }
                else {
                    lv_point = PointFromId(2850);
                }
                UnitCreate(1, &quot;TreasureChest&quot;, 0, 0, lv_point, RandomFixed(230.0, 310.0));
                UnitBehaviorAdd(UnitLastCreated(), &quot;KingsReward&quot;, UnitLastCreated(), 1);
                UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
                PingDestroy(gv_exileRewardPing);
                libNtve_gf_CreatePingFacingAngle(gv_teamData[gv_attackers].lv_members, &quot;PingObjective&quot;, UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
                gv_exileRewardPing = PingLastCreated();
                PingSetUnit(gv_exileRewardPing, UnitLastCreated());
                PlayerGroupLoopBegin(gv_teamData[gv_attackers].lv_members);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                gf_QuestFinishEvents(gv_teamData[gv_attackers].lv_members, gv_teamData[gv_defenders].lv_members);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ExileAttackVictory_Init () {
                gt_ExileAttackVictory = TriggerCreate(&quot;gt_ExileAttackVictory_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ExileAttackVictory_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4DD908E7">
        <ScriptCode>
            bool gt_ExileTransfer_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_nextStrongest;
                // Variable Initialization
                lv_nextStrongest = gf_GetStrongestOnTeam(gv_defenders);
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(lv_nextStrongest)) {
                    UnitSetOwner(gv_exile, UnitGetOwner(lv_nextStrongest), false);
                    UnitIssueOrder(gv_exile, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), lv_nextStrongest), c_orderQueueReplace);
                }
                else {
                    UnitCreateEffectUnit(gv_exile, &quot;KillWithDamage&quot;, gv_exile);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ExileTransfer_Init () {
                gt_ExileTransfer = TriggerCreate(&quot;gt_ExileTransfer_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ExileTransfer_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="494D8D44">
        <ScriptCode>
            bool gt_VeilExpire_Func (bool testConds, bool runActions) {
                int autoF928A8E6_ae;
                int autoF928A8E6_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                point lv_p;
                int lv_winner;
                int lv_loser;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                TimerPause(gv_veilGuardianTimer, true);
                UnitGroupLoopBegin(UnitGroup(&quot;TombGuardian&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;MysteriousShrine&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_a = FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0));
                    PingDestroy(gv_veilShrinePing[lv_a]);
                    autoF928A8E6_ae = 6;
                    autoF928A8E6_ai = 1;
                    lv_b = 1;
                    for ( ; ( (autoF928A8E6_ai &gt;= 0 &amp;&amp; lv_b &lt;= autoF928A8E6_ae) || (autoF928A8E6_ai &lt;= 0 &amp;&amp; lv_b &gt;= autoF928A8E6_ae) ) ; lv_b += autoF928A8E6_ai ) {
                        UnitRemove(gv_veilShrinePad[lv_a][lv_b]);
                    }
                    UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                gv_questCompleted[15] = true;
                ObjectiveDestroy(gv_questObjective);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilExpire_Init () {
                gt_VeilExpire = TriggerCreate(&quot;gt_VeilExpire_Func&quot;);
                TriggerAddEventTimer(gt_VeilExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_VeilExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3DEFB89D">
        <ScriptCode>
            bool gt_VeilSpawnGuardian_Func (bool testConds, bool runActions) {
                // Variable Declarations
                region lv_region;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroup(&quot;MysteriousShrine&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_region = RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 16.0);
                    if ((UnitGroupCount(UnitGroup(&quot;TombGuardian&quot;, c_playerAny, lv_region, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 4)) {
                        UnitCreate(1, &quot;TombGuardian&quot;, 0, 15, gf_RandomPathablePoint(lv_region), libNtve_gf_RandomAngle());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                TimerStart(gv_veilGuardianTimer, RandomFixed(20.0, 25.0), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilSpawnGuardian_Init () {
                gt_VeilSpawnGuardian = TriggerCreate(&quot;gt_VeilSpawnGuardian_Func&quot;);
                TriggerAddEventTimer(gt_VeilSpawnGuardian, gv_veilGuardianTimer);
            }
        </ScriptCode>
        <InitFunc>gt_VeilSpawnGuardian_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="66E35C39">
        <ScriptCode>
            bool gt_VeilShrineInvestigate_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_shrine;
                // Variable Initialization
                lv_shrine = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetInfoText(lv_shrine, StringExternal(&quot;Param/Value/FE564CEF&quot;), StringExternal(&quot;Param/Value/2CAF6609&quot;), StringExternal(&quot;Param/Value/13D4353E&quot;));
                UnitSetCustomValue(lv_shrine, 2, 1.0);
                UnitSetCustomValue(lv_shrine, 3, 1.0);
                UnitSetCustomValue(lv_shrine, 4, 0.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilShrineInvestigate_Init () {
                gt_VeilShrineInvestigate = TriggerCreate(&quot;gt_VeilShrineInvestigate_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_VeilShrineInvestigate, c_playerAny, &quot;VeilShrineActive&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_VeilShrineInvestigate_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4122FA9E">
        <ScriptCode>
            bool gt_VeilShrinePreview_Func (bool testConds, bool runActions) {
                int auto45895904_ae;
                int auto45895904_ai;
                // Variable Declarations
                unit lv_shrine;
                int lv_shrineIndex;
                int lv_previewStage;
                unit lv_u;
                int lv_a;
                // Variable Initialization
                lv_shrine = EventPlayerEffectUsedUnit(c_effectUnitOuter);
                lv_shrineIndex = FixedToInt(UnitGetCustomValue(lv_shrine, 0));
                lv_previewStage = FixedToInt(UnitGetCustomValue(lv_shrine, 2));
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((lv_previewStage &lt;= 5)) {
                    lv_u = gv_veilShrinePad[lv_shrineIndex][StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], lv_previewStage, lv_previewStage))];
                    UnitBehaviorAdd(lv_u, &quot;VeilShrinePadFlash&quot;, lv_shrine, 1);
                    UnitCreateEffectUnit(lv_shrine, &quot;VeilShrineFlashBeamStart&quot;, lv_u);
                    lv_u = gv_veilShrinePad[lv_shrineIndex][StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], (lv_previewStage + 1), (lv_previewStage + 1)))];
                    UnitBehaviorAdd(lv_u, &quot;VeilShrinePadFlash&quot;, lv_shrine, 1);
                    UnitCreateEffectUnit(lv_shrine, &quot;VeilShrineFlashBeamStart&quot;, lv_u);
                    UnitSetCustomValue(lv_shrine, 2, (lv_previewStage + 2));
                }
                else {
                    gf_Alltag(lv_shrine, StringExternal(&quot;Param/Value/35CB4E13&quot;), 2.0, 24);
                    auto45895904_ae = 6;
                    auto45895904_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto45895904_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto45895904_ae) || (auto45895904_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto45895904_ae) ) ; lv_a += auto45895904_ai ) {
                        UnitBehaviorAdd(gv_veilShrinePad[lv_shrineIndex][lv_a], &quot;VeilShrinePadActive&quot;, gv_veilShrinePad[lv_shrineIndex][lv_a], 1);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilShrinePreview_Init () {
                gt_VeilShrinePreview = TriggerCreate(&quot;gt_VeilShrinePreview_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_VeilShrinePreview, c_playerAny, &quot;VeilShrinePreviewTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_VeilShrinePreview_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="FD446453">
        <ScriptCode>
            bool gt_VeilEnergizedStart_Func (bool testConds, bool runActions) {
                int autoB0773D1B_ae;
                int autoB0773D1B_ai;
                // Variable Declarations
                unit lv_pad;
                int lv_padIndex;
                int lv_shrineIndex;
                unit lv_shrine;
                int lv_progress;
                int lv_a;
                point lv_p;
                // Variable Initialization
                lv_pad = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_padIndex = FixedToInt(UnitGetCustomValue(lv_pad, 1));
                lv_shrineIndex = FixedToInt(UnitGetCustomValue(lv_pad, 0));
                lv_shrine = gv_veilShrine[lv_shrineIndex];
                lv_progress = FixedToInt(UnitGetCustomValue(lv_shrine, 3));
                lv_p = UnitGetPosition(lv_shrine);
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((lv_padIndex == StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], lv_progress, lv_progress))) || (lv_padIndex == StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], (lv_progress + 1), (lv_progress + 1)))))) {
                    UnitSetCustomValue(lv_shrine, 4, (UnitGetCustomValue(lv_shrine, 4) + 1.0));
                    if ((UnitGetCustomValue(lv_shrine, 4) == 2.0)) {
                        UnitSetCustomValue(lv_shrine, 4, 0.0);
                        UnitSetCustomValue(lv_shrine, 3, (UnitGetCustomValue(lv_shrine, 3) + 2.0));
                        UnitBehaviorRemove(gv_veilShrinePad[lv_shrineIndex][StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], lv_progress, lv_progress))], &quot;VeilShrinePadActive&quot;, 1);
                        UnitBehaviorRemove(gv_veilShrinePad[lv_shrineIndex][StringToInt(StringSub(gv_veilShrineSequence[lv_shrineIndex], (lv_progress + 1), (lv_progress + 1)))], &quot;VeilShrinePadActive&quot;, 1);
                        SoundPlayOnUnit(SoundLink(&quot;VeilShrinePadActivate&quot;, -1), PlayerGroupAll(), lv_shrine, 1.0, 100.0, 0.0);
                    }
                    else {
                    }
                    if ((UnitGetCustomValue(lv_shrine, 3) &gt;= 7.0)) {
                        gf_Alltag(lv_shrine, StringExternal(&quot;Param/Value/D70A1067&quot;), 2.0, 24);
                        UnitBehaviorRemove(lv_shrine, &quot;VeilShrineActive&quot;, 1);
                        libNtve_gf_CreateExplosionAtPoint(0, 1, UnitGetPosition(lv_shrine));
                        UnitRemove(gv_veilShrine[lv_shrineIndex]);
                        PingDestroy(gv_veilShrinePing[lv_shrineIndex]);
                        autoB0773D1B_ae = 6;
                        autoB0773D1B_ai = 1;
                        lv_a = 1;
                        for ( ; ( (autoB0773D1B_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoB0773D1B_ae) || (autoB0773D1B_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoB0773D1B_ae) ) ; lv_a += autoB0773D1B_ai ) {
                            UnitRemove(gv_veilShrinePad[lv_shrineIndex][lv_a]);
                        }
                        gf_VeilLoot(lv_p);
                        TriggerExecute(gt_VeilEndPrematurely, true, false);
                    }
                    else {
                    }
                }
                else {
                    gf_VeilShrineFail(lv_shrine);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilEnergizedStart_Init () {
                gt_VeilEnergizedStart = TriggerCreate(&quot;gt_VeilEnergizedStart_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_VeilEnergizedStart, c_playerAny, &quot;VeilShrineEnergizedStart&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_VeilEnergizedStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5F898108">
        <ScriptCode>
            bool gt_VeilEnergizedEnd_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_pad;
                int lv_padIndex;
                int lv_shrineIndex;
                unit lv_shrine;
                // Variable Initialization
                lv_pad = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_padIndex = FixedToInt(UnitGetCustomValue(lv_pad, 1));
                lv_shrineIndex = FixedToInt(UnitGetCustomValue(lv_pad, 0));
                lv_shrine = gv_veilShrine[lv_shrineIndex];
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(lv_shrine, 4, libNtve_gf_ArithmeticRealClamp((UnitGetCustomValue(lv_shrine, 4) - 1.0), 0.0, 2.0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilEnergizedEnd_Init () {
                gt_VeilEnergizedEnd = TriggerCreate(&quot;gt_VeilEnergizedEnd_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_VeilEnergizedEnd, c_playerAny, &quot;VeilShrineEnergizedEnd&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_VeilEnergizedEnd_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7BA90906">
        <ScriptCode>
            bool gt_VeilShrineExpire_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_VeilShrineFail(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilShrineExpire_Init () {
                gt_VeilShrineExpire = TriggerCreate(&quot;gt_VeilShrineExpire_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_VeilShrineExpire, c_playerAny, &quot;VeilShrineActiveExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_VeilShrineExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DC97A53A">
        <ScriptCode>
            bool gt_VeilEndPrematurely_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(&quot;MysteriousShrine&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                TimerPause(gv_veilGuardianTimer, true);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicAmbient&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                TimerStart(gv_veilofDarknessTimer, 0.0, false, c_timeGame);
                UnitGroupLoopBegin(UnitGroup(&quot;TombGuardian&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                gv_questCompleted[15] = true;
                ObjectiveDestroy(gv_questObjective);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilEndPrematurely_Init () {
                gt_VeilEndPrematurely = TriggerCreate(&quot;gt_VeilEndPrematurely_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_VeilEndPrematurely_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="25024A35">
        <ScriptCode>
            bool gt_VeilofDarknessCont_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) != 0))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) != 15))) {
                        return false;
                    }
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32)))) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_veilofDarknessActive[gv_playerData[UnitGetOwner(EventUnit())].lv_team] == true)) {
                    if ((UnitGetType(EventUnit()) == &quot;Kobold&quot;)) {
                        UnitBehaviorAdd(EventUnit(), &quot;VeilofDarkness&quot;, EventUnit(), 1);
                        UnitBehaviorAdd(EventUnit(), &quot;OrbofDarknessDenied&quot;, EventUnit(), 1);
                    }
                    else {
                        if ((UnitGetType(EventUnit()) != &quot;MurlocSlave&quot;)) {
                            UnitBehaviorAdd(EventUnit(), &quot;VeilofDarknessGeneral&quot;, EventUnit(), 1);
                        }
                        else {
                        }
                    }
                }
                else {
                    if ((UnitGetType(EventUnit()) == &quot;Kobold&quot;)) {
                        UnitBehaviorAdd(EventUnit(), &quot;OrbofDarknessDenied&quot;, EventUnit(), 1);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilofDarknessCont_Init () {
                gt_VeilofDarknessCont = TriggerCreate(&quot;gt_VeilofDarknessCont_Func&quot;);
                TriggerEnable(gt_VeilofDarknessCont, false);
                TriggerAddEventUnitRegion(gt_VeilofDarknessCont, null, RegionPlayableMap(), true);
            }
        </ScriptCode>
        <InitFunc>gt_VeilofDarknessCont_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="58CA20F1">
        <ScriptCode>
            bool gt_VeilofDarknessEnd_Func (bool testConds, bool runActions) {
                int auto1C71EC85_ae;
                int auto1C71EC85_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_VeilofDarknessCont, false);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterArmored) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Kobold&quot;)) {
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;VeilofDarkness&quot;, 1);
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;OrbofDarknessDenied&quot;, 1);
                    }
                    else {
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;VeilofDarknessGeneral&quot;, 1);
                    }
                }
                UnitGroupLoopEnd();
                auto1C71EC85_ae = gv_activeTeams;
                auto1C71EC85_ai = 1;
                lv_a = 1;
                for ( ; ( (auto1C71EC85_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto1C71EC85_ae) || (auto1C71EC85_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto1C71EC85_ae) ) ; lv_a += auto1C71EC85_ai ) {
                    gv_veilofDarknessActive[lv_a] = false;
                    libNtve_gf_SetPlayerGroupAlliance(gv_teamData[lv_a].lv_members, 1);
                }
                gf_AllAIsShareControlwithAllies();
                CutsceneFade(true, 1.0, Color(0,0,0), 25.0, PlayerGroupAll(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VeilofDarknessEnd_Init () {
                gt_VeilofDarknessEnd = TriggerCreate(&quot;gt_VeilofDarknessEnd_Func&quot;);
                TriggerAddEventTimer(gt_VeilofDarknessEnd, gv_veilofDarknessTimer);
            }
        </ScriptCode>
        <InitFunc>gt_VeilofDarknessEnd_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DC17AED4">
        <ScriptCode>
            bool gt_ExpeditionData_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_expeditionPoint[1][1] = PointFromId(3933);
                gv_expeditionPoint[1][2] = PointFromId(3934);
                gv_expeditionPoint[1][3] = PointFromId(3935);
                gv_expeditionPoint[2][1] = PointFromId(3936);
                gv_expeditionPoint[2][2] = PointFromId(3937);
                gv_expeditionPoint[2][3] = PointFromId(3938);
                gv_expeditionPoint[3][1] = PointFromId(3939);
                gv_expeditionPoint[3][2] = PointFromId(3940);
                gv_expeditionPoint[3][3] = PointFromId(3941);
                gv_expeditionPoint[4][1] = PointFromId(3942);
                gv_expeditionPoint[4][2] = PointFromId(3943);
                gv_expeditionPoint[4][3] = PointFromId(3944);
                gv_expeditionPoint[5][1] = PointFromId(3945);
                gv_expeditionPoint[5][2] = PointFromId(3946);
                gv_expeditionPoint[5][3] = PointFromId(3947);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ExpeditionData_Init () {
                gt_ExpeditionData = TriggerCreate(&quot;gt_ExpeditionData_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ExpeditionData_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="53C76019">
        <ScriptCode>
            bool gt_ExpeditionExpire_Func (bool testConds, bool runActions) {
                int auto14966BE6_ae;
                int auto14966BE6_ai;
                int auto4B75AD98_ae;
                int auto4B75AD98_ai;
                int auto2AD6F4E2_ae;
                int auto2AD6F4E2_ai;
                // Variable Declarations
                int lv_a;
                int lv_b;
                playergroup lv_questWinners;
                playergroup lv_questLosers;
                // Variable Initialization
                lv_questWinners = PlayerGroupEmpty();
                lv_questLosers = PlayerGroupActive();
                // Conditions
                if (testConds) {
                    if (!((gv_questIndexActive == 16))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_questIndexActive = 0;
                gv_questActive = false;
                gv_questCompleted[16] = true;
                ObjectiveDestroy(gv_questObjective);
                auto14966BE6_ae = gv_expeditionAreas;
                auto14966BE6_ai = 1;
                lv_a = 1;
                for ( ; ( (auto14966BE6_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto14966BE6_ae) || (auto14966BE6_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto14966BE6_ae) ) ; lv_a += auto14966BE6_ai ) {
                    UnitRemove(gv_expeditionRing[lv_a]);
                }
                auto4B75AD98_ae = gv_maxTeams;
                auto4B75AD98_ai = 1;
                lv_a = 1;
                for ( ; ( (auto4B75AD98_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto4B75AD98_ae) || (auto4B75AD98_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto4B75AD98_ae) ) ; lv_a += auto4B75AD98_ai ) {
                    auto2AD6F4E2_ae = gv_expeditionAreas;
                    auto2AD6F4E2_ai = 1;
                    lv_b = 1;
                    for ( ; ( (auto2AD6F4E2_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto2AD6F4E2_ae) || (auto2AD6F4E2_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto2AD6F4E2_ae) ) ; lv_b += auto2AD6F4E2_ai ) {
                        PingDestroy(gv_expeditionPing[lv_a][lv_b]);
                    }
                }
                if ((gv_expeditionLeadingTeam != 0)) {
                    lv_questWinners = gv_teamData[gv_expeditionLeadingTeam].lv_members;
                    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_questWinners, lv_questLosers);
                    TextExpressionSetToken(&quot;Param/Expression/4E8F484F&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3D148A35&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/4E8F484F&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(gv_expeditionLeadingTeam));
                    TextExpressionSetToken(&quot;Param/Expression/4E8F484F&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/15E0BCD9&quot;));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/4E8F484F&quot;));
                    PlayerGroupLoopBegin(lv_questWinners);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true)) {
                            gf_Quicktag(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, StringExternal(&quot;Param/Value/A4A7216A&quot;), 3.0, 24);
                            gf_CreateItemForUnit(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;EpicFishingRod&quot;, 1);
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                }
                else {
                }
                gf_QuestFinishEvents(lv_questWinners, lv_questLosers);
                TimerStart(gv_questDelayTimer, gf_GetNextQuestDelay(), false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ExpeditionExpire_Init () {
                gt_ExpeditionExpire = TriggerCreate(&quot;gt_ExpeditionExpire_Func&quot;);
                TriggerAddEventTimer(gt_ExpeditionExpire, gv_questTimer);
            }
        </ScriptCode>
        <InitFunc>gt_ExpeditionExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="145E8799">
        <ScriptCode>
            bool gt_DLJRHint1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_player;
                // Variable Initialization
                lv_player = UnitGetOwner(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                // Conditions
                if (testConds) {
                    if (!((gv_dLJRHintShown[lv_player] == false))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroupFilter(&quot;AncientArtifactFragment&quot;, c_playerAny, UnitInventoryGroup(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_dLJRHintShown[lv_player] = true;
                UIDisplayMessage(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/D99A9C0A&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DLJRHint1_Init () {
                gt_DLJRHint1 = TriggerCreate(&quot;gt_DLJRHint1_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DLJRHint1, c_playerAny, &quot;SummonsTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DLJRHint1_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="169D9A23">
        <ScriptCode>
            bool gt_DLJRHint2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_summoner;
                unitgroup lv_fragments;
                // Variable Initialization
                lv_summoner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                lv_fragments = UnitGroupFilter(&quot;AncientArtifactFragment&quot;, c_playerAny, UnitInventoryGroup(EventPlayerEffectUsedUnit(c_effectUnitTarget)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2);
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(lv_fragments, c_unitCountAlive) == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(lv_fragments);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_DropandRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                Wait(0.0625, c_timeGame);
                UIDisplayMessage(PlayerGroupSingle(lv_summoner), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/55AA764C&quot;));
                gf_CreateItemForUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;DemonicSoulPrison&quot;, 1);
                SoundPlay(SoundLink(&quot;SkeletalTransmutation&quot;, -1), PlayerGroupSingle(lv_summoner), 100.0, 0.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DLJRHint2_Init () {
                gt_DLJRHint2 = TriggerCreate(&quot;gt_DLJRHint2_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DLJRHint2, c_playerAny, &quot;SkeletalFingersTransmuteTrig&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DLJRHint2_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7C88979C">
        <ScriptCode>
            bool gt_DLJRSummon_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DLJRSpawn(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DLJRSummon_Init () {
                gt_DLJRSummon = TriggerCreate(&quot;gt_DLJRSummon_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DLJRSummon, c_playerAny, &quot;DemonicSummon&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DLJRSummon_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="547102FA">
        <ScriptCode>
            bool gt_DLJRFirestorm_Func (bool testConds, bool runActions) {
                int auto3BDE391C_ae;
                int auto3BDE391C_ai;
                int auto8E26873E_ae;
                int auto8E26873E_ai;
                int auto404EA087_ae;
                int auto404EA087_ai;
                // Variable Declarations
                unit lv_caster;
                int lv_i;
                const int lv_flamesPerBranch = 25;
                const int lv_branches = 5;
                const fixed lv_flameOffset = 0.6;
                const fixed lv_branchingOffset = 40.0;
                int lv_a;
                int lv_b;
                fixed lv_angleOffset;
                unit lv_closestKobold;
                point lv_source;
                point[lv_flamesPerBranch + 1][lv_branches + 1] lv_point;
                point[lv_branches + 1] lv_targetPoint;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_i = UnitGetOwner(lv_caster);
                lv_closestKobold = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_caster), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(lv_caster));
                lv_source = UnitGetPosition(lv_caster);
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(lv_closestKobold)) {
                    lv_angleOffset = AngleBetweenPoints(UnitGetPosition(lv_caster), UnitGetPosition(lv_closestKobold));
                }
                else {
                }
                gf_SpellCast(lv_caster, 0.0);
                UnitBehaviorAdd(lv_caster, &quot;JaryxFirestormCast&quot;, lv_caster, 1);
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;FirestormContinuousSound&quot;, &quot;Duration&quot;, UnitGetOwner(lv_caster), FixedToString(8.5, 1));
                UnitBehaviorAdd(lv_caster, &quot;FirestormContinuousSound&quot;, lv_caster, 1);
                auto3BDE391C_ae = lv_branches;
                auto3BDE391C_ai = 1;
                lv_a = 1;
                for ( ; ( (auto3BDE391C_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto3BDE391C_ae) || (auto3BDE391C_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto3BDE391C_ae) ) ; lv_a += auto3BDE391C_ai ) {
                    lv_targetPoint[lv_a] = PointWithOffsetPolar(lv_source, 16.0, (lv_angleOffset + (lv_a * (360.0 / lv_branches))));
                    lv_point[1][lv_a] = PointWithOffsetPolar(lv_source, 1.5, (AngleBetweenPoints(lv_source, lv_targetPoint[lv_a]) + RandomFixed((0.0 - lv_branchingOffset), lv_branchingOffset)));
                    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;FirestormPersistent&quot;, lv_point[1][lv_a]);
                }
                auto8E26873E_ae = lv_flamesPerBranch;
                auto8E26873E_ai = 1;
                lv_a = 2;
                for ( ; ( (auto8E26873E_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto8E26873E_ae) || (auto8E26873E_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto8E26873E_ae) ) ; lv_a += auto8E26873E_ai ) {
                    auto404EA087_ae = lv_branches;
                    auto404EA087_ai = 1;
                    lv_b = 1;
                    for ( ; ( (auto404EA087_ai &gt;= 0 &amp;&amp; lv_b &lt;= auto404EA087_ae) || (auto404EA087_ai &lt;= 0 &amp;&amp; lv_b &gt;= auto404EA087_ae) ) ; lv_b += auto404EA087_ai ) {
                        lv_point[lv_a][lv_b] = PointWithOffsetPolar(lv_point[(lv_a - 1)][lv_b], lv_flameOffset, ((AngleBetweenPoints(lv_source, lv_targetPoint[lv_b]) + RandomFixed((0.0 - (lv_branchingOffset / 2.0)), (lv_branchingOffset / 2.0))) + RandomFixed((0.0 - lv_branchingOffset), lv_branchingOffset)));
                        lv_point[lv_a][lv_b] = PointWithOffsetPolar(lv_point[(lv_a - 1)][lv_b], lv_flameOffset, (AngleBetweenPoints(lv_source, lv_targetPoint[lv_b]) + RandomFixed((0.0 - lv_branchingOffset), lv_branchingOffset)));
                        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;FirestormPersistent&quot;, lv_point[lv_a][lv_b]);
                    }
                    Wait(0.1875, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DLJRFirestorm_Init () {
                gt_DLJRFirestorm = TriggerCreate(&quot;gt_DLJRFirestorm_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DLJRFirestorm, c_playerAny, &quot;FirestormTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DLJRFirestorm_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="61685DAC">
        <ScriptCode>
            bool gt_DLJRRocks_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_fallDuration;
                // Variable Initialization
                lv_fallDuration = RandomFixed(7.0, 14.0);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;MoltenSphere&quot;, 0, 15, RegionRandomPoint(RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 12.0)), libNtve_gf_RandomAngle());
                UnitSetHeight(UnitLastCreated(), 20.0, 0.0);
                UnitSetHeight(UnitLastCreated(), 0.0, lv_fallDuration);
                CatalogFieldValueSet(c_gameCatalogBehavior, &quot;MoltenSphereTimed&quot;, &quot;Duration&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString(lv_fallDuration, 1));
                UnitBehaviorAdd(UnitLastCreated(), &quot;MoltenSphereTimed&quot;, UnitLastCreated(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DLJRRocks_Init () {
                gt_DLJRRocks = TriggerCreate(&quot;gt_DLJRRocks_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DLJRRocks, c_playerAny, &quot;MoltenSphereTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DLJRRocks_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AFCEAA85">
        <ScriptCode>
            bool gt_DLJRMinions_Func (bool testConds, bool runActions) {
                int auto552C95FE_ae;
                int auto552C95FE_ai;
                // Variable Declarations
                int lv_a;
                unitgroup lv_kobolds;
                int lv_minionCount;
                point lv_p;
                unit lv_u;
                // Variable Initialization
                lv_kobolds = UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 12.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0);
                lv_minionCount = (RandomInt(2, 3) + UnitGroupCount(lv_kobolds, c_unitCountAlive));
                // Actions
                if (!runActions) {
                    return true;
                }
                auto552C95FE_ae = lv_minionCount;
                auto552C95FE_ai = 1;
                lv_a = 1;
                for ( ; ( (auto552C95FE_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto552C95FE_ae) || (auto552C95FE_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto552C95FE_ae) ) ; lv_a += auto552C95FE_ai ) {
                    lv_p = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 6.0));
                    lv_u = UnitGroupClosestToPoint(lv_kobolds, lv_p);
                    UnitCreate(1, &quot;InfernalMinion&quot;, 0, 15, lv_p, libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_u), c_orderQueueReplace);
                    UnitGroupRemove(lv_kobolds, lv_u);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DLJRMinions_Init () {
                gt_DLJRMinions = TriggerCreate(&quot;gt_DLJRMinions_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DLJRMinions, c_playerAny, &quot;SummonMinions&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DLJRMinions_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C33728E1">
        <ScriptCode>
            bool gt_DLJRTether_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;Tether&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DLJRTether_Init () {
                gt_DLJRTether = TriggerCreate(&quot;gt_DLJRTether_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DLJRTether, c_playerAny, &quot;TetherTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DLJRTether_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="91B66594">
        <ScriptCode>
            bool gt_DLJRDemonicGrowth_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_stacks;
                fixed lv_scale;
                const fixed lv_duration = 0.25;
                // Variable Initialization
                lv_stacks = IntToFixed(UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;DemonicGrowth&quot;));
                lv_scale = (1.0 + (lv_stacks * 0.02));
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), libNtve_gf_SetScale(lv_scale, lv_scale, lv_scale, lv_duration));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DLJRDemonicGrowth_Init () {
                gt_DLJRDemonicGrowth = TriggerCreate(&quot;gt_DLJRDemonicGrowth_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DLJRDemonicGrowth, c_playerAny, &quot;DemonicGrowthApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DLJRDemonicGrowth_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BD30F35F">
        <ScriptCode>
            bool gt_RABHint_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/53989F88&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RABHint_Init () {
                gt_RABHint = TriggerCreate(&quot;gt_RABHint_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_RABHint, null, &quot;UnlimitedPower&quot;, c_unitBehaviorChangeActivate);
            }
        </ScriptCode>
        <InitFunc>gt_RABHint_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C8DB6D9D">
        <ScriptCode>
            bool gt_RABSummoningStart_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_spellCost;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;MysteriousArcaneRitual&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, lv_i));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventUnit(), lv_spellCost);
                UnitBehaviorAdd(EventUnit(), &quot;MysteriousArcaneRitual&quot;, EventUnit(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RABSummoningStart_Init () {
                gt_RABSummoningStart = TriggerCreate(&quot;gt_RABSummoningStart_Func&quot;);
                TriggerAddEventUnitAbility(gt_RABSummoningStart, null, AbilityCommand(&quot;MysteriousArcaneRitual&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_RABSummoningStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="81D10EA9">
        <ScriptCode>
            bool gt_RABSummoningCancel_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(EventUnit()), &quot;Channel&quot;);
                UnitAbilityReset(EventUnit(), AbilityCommand(&quot;MysteriousArcaneRitual&quot;, 0), c_spendLocationAbility);
                UnitBehaviorRemove(EventUnit(), &quot;MysteriousArcaneRitual&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RABSummoningCancel_Init () {
                gt_RABSummoningCancel = TriggerCreate(&quot;gt_RABSummoningCancel_Func&quot;);
                TriggerAddEventUnitAbility(gt_RABSummoningCancel, null, AbilityCommand(&quot;MysteriousArcaneRitual&quot;, 0), c_unitAbilStageCancel, false);
            }
        </ScriptCode>
        <InitFunc>gt_RABSummoningCancel_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5C1C8F52">
        <ScriptCode>
            bool gt_RABSummoningFinish_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(EventUnit()), &quot;Channel&quot;);
                gf_RABSpawn(UnitGetPosition(EventUnit()), UnitGetOwner(EventUnit()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RABSummoningFinish_Init () {
                gt_RABSummoningFinish = TriggerCreate(&quot;gt_RABSummoningFinish_Func&quot;);
                TriggerAddEventUnitAbility(gt_RABSummoningFinish, null, AbilityCommand(&quot;MysteriousArcaneRitual&quot;, 0), c_abilEffectStageFinish, false);
            }
        </ScriptCode>
        <InitFunc>gt_RABSummoningFinish_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C7B950B9">
        <ScriptCode>
            bool gt_ArcaneEruptionStart_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_energyCost;
                // Variable Initialization
                lv_energyCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;ArcaneEruption&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventUnit())));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventUnit(), lv_energyCost);
                UnitSetCustomValue(EventUnit(), 0, 1.0);
                UnitBehaviorAdd(EventUnit(), &quot;ArcaneEruptionTimer&quot;, EventUnit(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ArcaneEruptionStart_Init () {
                gt_ArcaneEruptionStart = TriggerCreate(&quot;gt_ArcaneEruptionStart_Func&quot;);
                TriggerAddEventUnitAbility(gt_ArcaneEruptionStart, null, AbilityCommand(&quot;ArcaneEruption&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_ArcaneEruptionStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9608BD4C">
        <ScriptCode>
            bool gt_ArcaneEruptionTrigger_Func (bool testConds, bool runActions) {
                int auto4E48BBBF_ae;
                int auto4E48BBBF_ai;
                // Variable Declarations
                unit lv_boss;
                point lv_p;
                const int lv_c = 5;
                int lv_phase;
                const fixed lv_offset = 1.75;
                int lv_a;
                point lv_k;
                region lv_deadzone;
                // Variable Initialization
                lv_boss = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_p = UnitGetPosition(lv_boss);
                lv_phase = FixedToInt(UnitGetCustomValue(lv_boss, 0));
                lv_deadzone = RegionCircle(lv_p, ((lv_phase * lv_offset) + (lv_offset / 2.0)));
                // Actions
                if (!runActions) {
                    return true;
                }
                RegionAddCircle(lv_deadzone, false, lv_p, ((lv_phase * lv_offset) - (lv_offset / 2.0)));
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_deadzone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) != &quot;UnstableAnomaly&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;TheWoundedWizard&quot;)) {
                        UnitCreateEffectUnit(lv_boss, &quot;SpellAbsorbCheckArcaneEruption&quot;, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                auto4E48BBBF_ae = (lv_c * lv_phase);
                auto4E48BBBF_ai = 1;
                lv_a = 1;
                for ( ; ( (auto4E48BBBF_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto4E48BBBF_ae) || (auto4E48BBBF_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto4E48BBBF_ae) ) ; lv_a += auto4E48BBBF_ai ) {
                    lv_k = PointWithOffsetPolar(lv_p, (lv_phase * lv_offset), (lv_a * (360.0 / (lv_c * lv_phase))));
                    libNtve_gf_CreateExplosionAtPoint(1, 1, lv_k);
                }
                UnitSetCustomValue(lv_boss, 0, (lv_phase + 1.0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ArcaneEruptionTrigger_Init () {
                gt_ArcaneEruptionTrigger = TriggerCreate(&quot;gt_ArcaneEruptionTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ArcaneEruptionTrigger, c_playerAny, &quot;ArcaneEruptionTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ArcaneEruptionTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3A52F100">
        <ScriptCode>
            bool gt_AnnihilateTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                const int lv_distance = 12;
                unit lv_boss;
                unit lv_target;
                point lv_k;
                // Variable Initialization
                lv_boss = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(lv_boss))) {
                        return false;
                    }
                    if (!(gf_UnitExists(lv_target))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreateEffectPoint(lv_boss, &quot;AnnihilateLaunch&quot;, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_boss), lv_distance, UnitGetPosition(lv_target)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AnnihilateTrigger_Init () {
                gt_AnnihilateTrigger = TriggerCreate(&quot;gt_AnnihilateTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AnnihilateTrigger, c_playerAny, &quot;AnnihilateTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AnnihilateTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="95AF4B71">
        <ScriptCode>
            bool gt_LightningCloudWander_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_cloud;
                unit lv_boss;
                point lv_p;
                // Variable Initialization
                lv_cloud = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_boss = UnitGroupClosestToPoint(UnitGroup(&quot;RagingArcaneBeast&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_cloud));
                lv_p = UnitGetPosition(lv_boss);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(lv_cloud, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_cloud), 4.0, RegionRandomPoint(RegionCircle(UnitGetPosition(lv_boss), 16.0)))), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LightningCloudWander_Init () {
                gt_LightningCloudWander = TriggerCreate(&quot;gt_LightningCloudWander_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_LightningCloudWander, c_playerAny, &quot;LightningCloudWander&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_LightningCloudWander_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="39B9E96B">
        <ScriptCode>
            bool gt_UnstableAnomalySpawner_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_boss;
                unitgroup lv_hostileKobolds;
                unitgroup lv_unstableAnomalies;
                const fixed lv_energyCost = 5.0;
                // Variable Initialization
                lv_boss = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_hostileKobolds = UnitGroup(&quot;Kobold&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_boss), 12.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_unstableAnomalies = UnitGroup(&quot;UnstableAnomaly&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_boss), 12.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitGetPropertyFixed(lv_boss, c_unitPropEnergy, c_unitPropCurrent) &gt;= lv_energyCost))) {
                        return false;
                    }
                    if (!((UnitGroupCount(lv_hostileKobolds, c_unitCountAlive) &gt; UnitGroupCount(lv_unstableAnomalies, c_unitCountAlive)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPropertyFixed(lv_boss, c_unitPropEnergy, (UnitGetPropertyFixed(lv_boss, c_unitPropEnergy, c_unitPropCurrent) - lv_energyCost));
                UnitCreate(1, &quot;UnstableAnomaly&quot;, c_unitCreateIgnorePlacement, 15, gf_RandomPathablePoint(RegionCircle(UnitGetPosition(lv_boss), 8.0)), libNtve_gf_RandomAngle());
                UnitSetHeight(UnitLastCreated(), 0.25, 0.0);
                UnitSetCustomValue(UnitLastCreated(), 0, 0.5);
                UnitGroupLoopBegin(lv_hostileKobolds);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, UnitGetOwner(UnitGroupLoopCurrent()));
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UnstableAnomalySpawner_Init () {
                gt_UnstableAnomalySpawner = TriggerCreate(&quot;gt_UnstableAnomalySpawner_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_UnstableAnomalySpawner, c_playerAny, &quot;UnstableAnomalySpawner&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_UnstableAnomalySpawner_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="48FB83BB">
        <ScriptCode>
            bool gt_UnstableAnomalyDescent_Func (bool testConds, bool runActions) {
                // Variable Declarations
                const fixed lv_interval = 0.25;
                const fixed lv_deltaZ = 0.005;
                const fixed lv_maxHeight = 8.0;
                unit lv_anomaly;
                fixed lv_currentHeight;
                fixed lv_verticalForce;
                point lv_p;
                // Variable Initialization
                lv_anomaly = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_currentHeight = UnitGetHeight(lv_anomaly);
                lv_verticalForce = UnitGetCustomValue(lv_anomaly, 0);
                lv_p = UnitGetPosition(lv_anomaly);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((lv_currentHeight &lt;= 0.0)) {
                    UnitSetHeight(lv_anomaly, 0.5, 0.0);
                    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_anomaly), 12.0), UnitFilter((1 &lt;&lt; c_targetFilterBiological), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGetType(UnitGroupLoopCurrent()) != &quot;RagingArcaneBeast&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;UnstableAnomaly&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;TheWoundedWizard&quot;)) {
                            UnitCreateEffectUnit(lv_anomaly, &quot;UnstableAnomalySet&quot;, UnitGroupLoopCurrent());
                            VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(UnitGetPosition(lv_anomaly), 2.0), 2.0, false);
                        }
                        else {
                        }
                    }
                    UnitGroupLoopEnd();
                    UnitCreateEffectUnit(lv_anomaly, &quot;UnstableAnomalySet&quot;, lv_anomaly);
                    UnitKill(lv_anomaly);
                }
                else {
                    if (((lv_verticalForce - lv_deltaZ) &gt; -0.2)) {
                        lv_verticalForce -= lv_deltaZ;
                    }
                    else {
                    }
                    if ((lv_currentHeight &gt;= 8.0) &amp;&amp; (lv_verticalForce &gt; 0.0)) {
                        lv_verticalForce /= 2.0;
                    }
                    else {
                    }
                    UnitSetHeight(lv_anomaly, (lv_currentHeight + lv_verticalForce), lv_interval);
                    UnitSetCustomValue(lv_anomaly, 0, lv_verticalForce);
                    libNtve_gf_SendActorMessageToUnit(lv_anomaly, libNtve_gf_SetTintColor(Color(100.0, ((lv_currentHeight / (lv_maxHeight * 2.0)) * 100.0), 0.0), 1.0, lv_interval));
                    if ((lv_currentHeight &lt;= gv_uAMeleeHeight)) {
                        UnitBehaviorAdd(lv_anomaly, &quot;Nearground&quot;, lv_anomaly, 1);
                    }
                    else {
                        UnitBehaviorRemove(lv_anomaly, &quot;Nearground&quot;, 1);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UnstableAnomalyDescent_Init () {
                gt_UnstableAnomalyDescent = TriggerCreate(&quot;gt_UnstableAnomalyDescent_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_UnstableAnomalyDescent, c_playerAny, &quot;UnstableAnomaly&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_UnstableAnomalyDescent_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B2FEE479">
        <ScriptCode>
            bool gt_RABKill_Func (bool testConds, bool runActions) {
                int auto7CC7A07C_val;
                // Variable Declarations
                int lv_r;
                // Variable Initialization
                lv_r = RandomInt(1, 5);
                // Conditions
                if (testConds) {
                    if (!((TimerGetRemaining(gv_rABKillTimer) == 0.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerStart(gv_rABKillTimer, 10.0, false, c_timeGame);
                auto7CC7A07C_val = lv_r;
                if (auto7CC7A07C_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F17FFBF2&quot;));
                    SoundPlay(SoundLink(&quot;RagingArcaneBeastKill1&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else if (auto7CC7A07C_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/CBBAFF3E&quot;));
                    SoundPlay(SoundLink(&quot;RagingArcaneBeastKill2&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else if (auto7CC7A07C_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5707E8EF&quot;));
                    SoundPlay(SoundLink(&quot;RagingArcaneBeastKill3&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else if (auto7CC7A07C_val == 4) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/1E88ACDB&quot;));
                    SoundPlay(SoundLink(&quot;RagingArcaneBeastKill4&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else if (auto7CC7A07C_val == 5) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/768D5FF4&quot;));
                    SoundPlay(SoundLink(&quot;RagingArcaneBeastKill5&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RABKill_Init () {
                gt_RABKill = TriggerCreate(&quot;gt_RABKill_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_RABKill_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="EEDFEED6">
        <Item Type="CustomScript" Id="F7512155"/>
        <Item Type="CustomScript" Id="90A75740"/>
        <Item Type="CustomScript" Id="76060864"/>
        <Item Type="CustomScript" Id="A35039F3"/>
        <Item Type="CustomScript" Id="AA9F47B7"/>
        <Item Type="CustomScript" Id="13179ECC"/>
        <Item Type="CustomScript" Id="E4FFFD10"/>
        <Item Type="CustomScript" Id="74B37211"/>
        <Item Type="CustomScript" Id="1F6FDD9C"/>
        <Item Type="CustomScript" Id="03F52F38"/>
    </Element>
    <Element Type="CustomScript" Id="F7512155">
        <ScriptCode>
            bool gt_ShowSkillWindow_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventDialogControl() == gv_skillButton))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DialogIsVisible(gv_skillWindowBig, EventPlayer()) == false)) {
                    DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(EventPlayer()), false);
                    gf_UpdateSkillWindow(EventPlayer());
                    DialogSetVisible(gv_skillWindowBig, PlayerGroupSingle(EventPlayer()), true);
                }
                else {
                    DialogSetVisible(gv_skillWindowBig, PlayerGroupSingle(EventPlayer()), false);
                    if ((gv_skillPointsPlayer[EventPlayer()] &gt; 0)) {
                        DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(EventPlayer()), true);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShowSkillWindow_Init () {
                gt_ShowSkillWindow = TriggerCreate(&quot;gt_ShowSkillWindow_Func&quot;);
                TriggerAddEventDialogControl(gt_ShowSkillWindow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_ShowSkillWindow_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="90A75740">
        <ScriptCode>
            bool gt_LevelUp_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_levelGained;
                int lv_a;
                fixed lv_temp;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_levelGained = UnitLevel(EventUnit());
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitHasBehavior(EventUnit(), &quot;RecentlyResurrected&quot;) == false)) {
                    if ((StringSub(gv_perks[lv_i], 35, 35) == &quot;1&quot;) &amp;&amp; (lv_levelGained == 10)) {
                        gv_skillPointsPlayer[UnitGetOwner(EventUnit())] += 8;
                    }
                    else {
                        gv_skillPointsPlayer[UnitGetOwner(EventUnit())] += 5;
                    }
                    gf_UpdateSkillButton(lv_i);
                    gf_InGameHint(&quot;level&quot;, lv_i);
                    UnitCreateEffectUnit(EventUnit(), &quot;LevelUp&quot;, EventUnit());
                    if ((gv_playerData[lv_i].lv_isAI == true)) {
                        gf_AISpendSkillPoints(lv_i);
                    }
                    else {
                    }
                }
                else {
                }
                gf_UpdateSkillWindow(lv_i);
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_temp + 1.0), 0));
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString((lv_temp + 1.0), 0));
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i, FixedToString((lv_temp + 1.0), 0));
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_temp + 1.0), 0));
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString((lv_temp + 1.0), 0));
                gf_UpdateStatsAll(lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LevelUp_Init () {
                gt_LevelUp = TriggerCreate(&quot;gt_LevelUp_Func&quot;);
                TriggerAddEventUnitGainLevel(gt_LevelUp, null);
            }
        </ScriptCode>
        <InitFunc>gt_LevelUp_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="76060864">
        <ScriptCode>
            bool gt_SpendSkillPoint_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_skillPointsPlayer[EventPlayer()] &gt; 0))) {
                        return false;
                    }
                    if (!(((DialogControlGetDialog(EventDialogControl()) == gv_skillWindowBig) || (DialogControlGetDialog(EventDialogControl()) == gv_minimalistSkillDialog)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((EventDialogControl() == gv_bTNSkillIncrease[1]) || (EventDialogControl() == gv_minimalistSkillDialogItem[1]))) {
                    gf_IncreaseSkillType(EventPlayer(), 1, 1);
                }
                else if (((EventDialogControl() == gv_bTNSkillIncrease[2]) || (EventDialogControl() == gv_minimalistSkillDialogItem[2]))) {
                    gf_IncreaseSkillType(EventPlayer(), 2, 1);
                }
                else if (((EventDialogControl() == gv_bTNSkillIncrease[3]) || (EventDialogControl() == gv_minimalistSkillDialogItem[3]))) {
                    gf_IncreaseSkillType(EventPlayer(), 3, 1);
                }
                else if (((EventDialogControl() == gv_bTNSkillIncrease[4]) || (EventDialogControl() == gv_minimalistSkillDialogItem[4]))) {
                    gf_IncreaseSkillType(EventPlayer(), 4, 1);
                }
                else if (((EventDialogControl() == gv_bTNSkillIncrease[5]) || (EventDialogControl() == gv_minimalistSkillDialogItem[5]))) {
                    gf_IncreaseSkillType(EventPlayer(), 5, 1);
                }
                gf_UpdateSkillButton(EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpendSkillPoint_Init () {
                gt_SpendSkillPoint = TriggerCreate(&quot;gt_SpendSkillPoint_Func&quot;);
                TriggerAddEventDialogControl(gt_SpendSkillPoint, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_SpendSkillPoint_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A35039F3">
        <ScriptCode>
            bool gt_ArtisanRepair_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Advancedtag(EventPlayerEffectUsedUnit(c_effectUnitTarget), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), StringExternal(&quot;Param/Value/89FDCDD6&quot;), 2.0, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ArtisanRepair_Init () {
                gt_ArtisanRepair = TriggerCreate(&quot;gt_ArtisanRepair_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ArtisanRepair, c_playerAny, &quot;ArtisanshipRepairTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ArtisanRepair_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AA9F47B7">
        <ScriptCode>
            bool gt_DetectSmoke_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_radius;
                unitgroup lv_campfires;
                bool lv_found;
                // Variable Initialization
                lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;AttributeBonus[Hover]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                lv_campfires = UnitGroup(&quot;CampfireLit&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((gv_dayNight == 1))) {
                        return false;
                    }
                    if (!((UnitGroupCount(lv_campfires, c_unitCountAlive) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_campfires = UnitGroupFilterAlliance(lv_campfires, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAllianceEnemy, 0);
                UnitGroupLoopBegin(lv_campfires);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == false)) {
                        lv_found = true;
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))), &quot;PingSimple&quot;, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(UnitGroupLoopCurrent()), false)), 5.0, 270.0);
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                    else {
                    }
                    VisRevealArea(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 2.0), 3.0, false);
                }
                UnitGroupLoopEnd();
                if ((lv_found == true)) {
                    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/507F1BC6&quot;), 2.0, 24);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DetectSmoke_Init () {
                gt_DetectSmoke = TriggerCreate(&quot;gt_DetectSmoke_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DetectSmoke, c_playerAny, &quot;SmokeDetectionTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DetectSmoke_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="13179ECC">
        <ScriptCode>
            bool gt_DetectGold_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_radius;
                unitgroup lv_goldDeposits;
                bool lv_found;
                // Variable Initialization
                lv_radius = 25.0;
                lv_goldDeposits = UnitGroup(&quot;GoldDeposit&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(lv_goldDeposits, c_unitCountAlive) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(lv_goldDeposits);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == false)) {
                        lv_found = true;
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))), &quot;PingSimple&quot;, UnitGetPosition(UnitGroupLoopCurrent()), Color(97.25, 68.63, 2.75), 2.0, 270.0);
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                    else {
                    }
                    VisRevealArea(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 2.0), 3.0, false);
                }
                UnitGroupLoopEnd();
                if ((lv_found == true)) {
                    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/AB905187&quot;), 2.0, 24);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DetectGold_Init () {
                gt_DetectGold = TriggerCreate(&quot;gt_DetectGold_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DetectGold, c_playerAny, &quot;GoldScoutTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DetectGold_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E4FFFD10">
        <ScriptCode>
            bool gt_DetectWolvesBears_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_player;
                const fixed lv_radius = 25.0;
                // Variable Initialization
                lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupAddUnitGroup(gv_animalVisionGroup[lv_player], UnitGroup(&quot;Bear&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(gv_animalVisionGroup[lv_player], UnitGroup(&quot;FrostBear&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(gv_animalVisionGroup[lv_player], UnitGroup(&quot;Dog&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(gv_animalVisionGroup[lv_player], UnitGroup(&quot;Lyote&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                UnitGroupLoopBegin(gv_animalVisionGroup[lv_player]);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), lv_player) == false) &amp;&amp; (gv_veilofDarknessActive[lv_player] == false)) {
                        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, lv_player);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_player), &quot;PingSimple&quot;, UnitGetPosition(UnitGroupLoopCurrent()), Color(25.10, 50.20, 50.20), 2.0, 270.0);
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                    else {
                        if (((DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(UnitGroupLoopCurrent())) &gt; 25.0) || (gv_veilofDarknessActive[lv_player] == true))) {
                            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, lv_player);
                            UnitGroupRemove(gv_animalVisionGroup[lv_player], UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DetectWolvesBears_Init () {
                gt_DetectWolvesBears = TriggerCreate(&quot;gt_DetectWolvesBears_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_DetectWolvesBears, c_playerAny, &quot;AnimalScoutTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DetectWolvesBears_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="74B37211">
        <ScriptCode>
            bool gt_Salvage_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                point lv_point;
                // Variable Initialization
                lv_type = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                lv_point = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal(&quot;Param/Value/9434CCE7&quot;), 2.0, 24);
                UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;KillWithDamage&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget));
                gf_CreateSalvageResources(lv_type, lv_point);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Salvage_Init () {
                gt_Salvage = TriggerCreate(&quot;gt_Salvage_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_Salvage, c_playerAny, &quot;SalvageStructure&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_Salvage_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1F6FDD9C">
        <ScriptCode>
            bool gt_AdrenalineRushTimer_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_BoostAdrenalineRush(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), &quot;Kobold&quot;, -1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AdrenalineRushTimer_Init () {
                gt_AdrenalineRushTimer = TriggerCreate(&quot;gt_AdrenalineRushTimer_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AdrenalineRushTimer, c_playerAny, &quot;AdrenalineRushTimer&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AdrenalineRushTimer_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="03F52F38">
        <ScriptCode>
            bool gt_AdrenalineRushOn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorRemove(EventUnit(), &quot;Frostbite&quot;, 1);
                UnitBehaviorRemove(EventUnit(), &quot;FrostbitePositive&quot;, 1);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;Run&quot;, 0)), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AdrenalineRushOn_Init () {
                gt_AdrenalineRushOn = TriggerCreate(&quot;gt_AdrenalineRushOn_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_AdrenalineRushOn, null, &quot;AdrenalineRush&quot;, c_unitBehaviorChangeCreate);
            }
        </ScriptCode>
        <InitFunc>gt_AdrenalineRushOn_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="7E044C8B">
        <Item Type="CustomScript" Id="43318AE6"/>
        <Item Type="CustomScript" Id="C3DEB65D"/>
        <Item Type="CustomScript" Id="56467F1F"/>
        <Item Type="CustomScript" Id="66BDED39"/>
        <Item Type="CustomScript" Id="149B3C47"/>
        <Item Type="CustomScript" Id="134E73D5"/>
        <Item Type="CustomScript" Id="3E81EF69"/>
        <Item Type="CustomScript" Id="2CE69B93"/>
        <Item Type="CustomScript" Id="44A83EDD"/>
        <Item Type="CustomScript" Id="44DF1219"/>
        <Item Type="CustomScript" Id="36964CFA"/>
        <Item Type="CustomScript" Id="6894CCEA"/>
        <Item Type="CustomScript" Id="2B308D89"/>
        <Item Type="CustomScript" Id="D1E39EBC"/>
        <Item Type="CustomScript" Id="2D0F94C7"/>
        <Item Type="CustomScript" Id="6070E3A9"/>
        <Item Type="CustomScript" Id="1331DE69"/>
        <Item Type="CustomScript" Id="BFCF4B25"/>
        <Item Type="CustomScript" Id="77FAC915"/>
        <Item Type="CustomScript" Id="960F2DF0"/>
        <Item Type="CustomScript" Id="A483AFFE"/>
        <Item Type="CustomScript" Id="1BBC6A2F"/>
        <Item Type="CustomScript" Id="7D70DE92"/>
        <Item Type="CustomScript" Id="D08A5002"/>
    </Element>
    <Element Type="CustomScript" Id="43318AE6">
        <ScriptCode>
            bool gt_LearnNaturesGrace_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_learnedSpellsString[lv_i], 1, 1) == &quot;0&quot;)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= 20)) {
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 20);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/3D9EE9D5&quot;), 3.0, 24);
                                gf_LearnSpell(1, lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnNaturesGrace_Init () {
                gt_LearnNaturesGrace = TriggerCreate(&quot;gt_LearnNaturesGrace_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnNaturesGrace, null, AbilityCommand(&quot;LearnNaturesGrace&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnNaturesGrace_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C3DEB65D">
        <ScriptCode>
            bool gt_LearnMineralTap_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_learnedSpellsString[lv_i], 2, 2) == &quot;0&quot;)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= 20)) {
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 20);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/A2F22A0A&quot;), 3.0, 24);
                                gf_LearnSpell(2, lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnMineralTap_Init () {
                gt_LearnMineralTap = TriggerCreate(&quot;gt_LearnMineralTap_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnMineralTap, null, AbilityCommand(&quot;LearnMineralTap&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnMineralTap_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="56467F1F">
        <ScriptCode>
            bool gt_LearnClairvoyance_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_learnedSpellsString[lv_i], 3, 3) == &quot;0&quot;)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= 30)) {
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 30);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/508A7927&quot;), 3.0, 24);
                                gf_LearnSpell(3, lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnClairvoyance_Init () {
                gt_LearnClairvoyance = TriggerCreate(&quot;gt_LearnClairvoyance_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnClairvoyance, null, AbilityCommand(&quot;LearnClairvoyance&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnClairvoyance_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="66BDED39">
        <ScriptCode>
            bool gt_LearnFrostArmor_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_learnedSpellsString[lv_i], 4, 4) == &quot;0&quot;)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= 40)) {
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 40);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/220B7A50&quot;), 3.0, 24);
                                gf_LearnSpell(4, lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnFrostArmor_Init () {
                gt_LearnFrostArmor = TriggerCreate(&quot;gt_LearnFrostArmor_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnFrostArmor, null, AbilityCommand(&quot;LearnFrostArmor&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnFrostArmor_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="149B3C47">
        <ScriptCode>
            bool gt_LearnSiphonLife_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_learnedSpellsString[lv_i], 5, 5) == &quot;0&quot;)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= 50)) {
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 50);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/77F99D29&quot;), 3.0, 24);
                                gf_LearnSpell(5, lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnSiphonLife_Init () {
                gt_LearnSiphonLife = TriggerCreate(&quot;gt_LearnSiphonLife_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnSiphonLife, null, AbilityCommand(&quot;LearnSiphonLife&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnSiphonLife_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="134E73D5">
        <ScriptCode>
            bool gt_LearnAffliction_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 60;
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_learnedSpellsString[lv_i], 6, 6) == &quot;0&quot;)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/1A542137&quot;), 3.0, 24);
                                gf_LearnSpell(6, lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnAffliction_Init () {
                gt_LearnAffliction = TriggerCreate(&quot;gt_LearnAffliction_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnAffliction, null, AbilityCommand(&quot;LearnAffliction&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnAffliction_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3E81EF69">
        <ScriptCode>
            bool gt_LearnShadowCloak_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 70;
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_learnedSpellsString[lv_i], 7, 7) == &quot;0&quot;)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_shadowstone, c_unitCountAlive) &gt;= 1)) {
                                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                    SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                    gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_shadowstone, 1));
                                    gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/95E16F8B&quot;), 3.0, 24);
                                    gf_LearnSpell(7, lv_i);
                                }
                                else {
                                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                                }
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnShadowCloak_Init () {
                gt_LearnShadowCloak = TriggerCreate(&quot;gt_LearnShadowCloak_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnShadowCloak, null, AbilityCommand(&quot;LearnShadowCloak&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnShadowCloak_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="2CE69B93">
        <ScriptCode>
            bool gt_LearnGuardianSpirit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_radiants;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_radiants = UnitGroupFilter(&quot;RadiantGem&quot;, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_learnedSpellsString[lv_i], 8, 8) == &quot;0&quot;)) {
                            if ((UnitGroupCount(lv_radiants, c_unitCountAlive) == 2)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_radiants);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                            }
                            else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= 100)) {
                                lv_thru = true;
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 100);
                            }
                            if ((lv_thru == true)) {
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/C1C8DF94&quot;), 3.0, 24);
                                gf_LearnSpell(8, lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_spellAlreadyLearned);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnGuardianSpirit_Init () {
                gt_LearnGuardianSpirit = TriggerCreate(&quot;gt_LearnGuardianSpirit_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnGuardianSpirit, null, AbilityCommand(&quot;LearnGuardianSpirit&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnGuardianSpirit_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="44A83EDD">
        <ScriptCode>
            bool gt_NaturesGrace_Func (bool testConds, bool runActions) {
                int autoF8F6B406_ae;
                int autoF8F6B406_ai;
                int auto0CB82B79_ae;
                int auto0CB82B79_ai;
                // Variable Declarations
                int lv_a;
                unit lv_target;
                unit lv_caster;
                fixed lv_missinglife;
                fixed lv_treeRestore;
                fixed lv_bushRestore;
                fixed lv_cost;
                // Variable Initialization
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_missinglife = (100.0 - UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent));
                lv_treeRestore = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;NaturesGraceStats&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                lv_bushRestore = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;NaturesGraceStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                lv_cost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;NaturesGrace&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_bushRestore = Round(lv_bushRestore);
                gf_SpellCast(lv_caster, lv_cost);
                if ((UnitGetType(lv_target) == &quot;MapleTree&quot;)) {
                    if ((lv_treeRestore &gt; lv_missinglife)) {
                        lv_treeRestore = lv_missinglife;
                    }
                    else {
                    }
                    UnitSetPropertyFixed(lv_target, c_unitPropLifePercent, (UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) + lv_treeRestore));
                    if ((gv_skillForestry[UnitGetOwner(lv_caster)] &gt;= 25)) {
                        gf_HealUnit(lv_caster, lv_caster, (UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) * (lv_treeRestore * 0.01)), true);
                    }
                    else {
                    }
                    if ((UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) &gt;= (UnitGetCustomValue(lv_target, 0) * 100.0))) {
                        UnitSetCustomValue(lv_target, 0, (UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) * 0.01));
                        UnitSetCustomValue(lv_target, 1, (UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) * 0.01));
                        UnitSetCustomValue(lv_target, 2, (UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent) * 0.01));
                        libNtve_gf_SendActorMessageToUnit(lv_target, libNtve_gf_SetScale(UnitGetCustomValue(lv_target, 0), UnitGetCustomValue(lv_target, 1), UnitGetCustomValue(lv_target, 2), 0.0));
                    }
                    else {
                    }
                    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;GrowingTreeRemove&quot;, lv_target);
                }
                else if ((UnitGetType(lv_target) == &quot;BerryBush&quot;)) {
                    autoF8F6B406_ae = FixedToInt(lv_bushRestore);
                    autoF8F6B406_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoF8F6B406_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoF8F6B406_ae) || (autoF8F6B406_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoF8F6B406_ae) ) ; lv_a += autoF8F6B406_ai ) {
                        UnitCreate(1, &quot;Berry&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_target), RandomFixed(0.3, 0.6), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                        UnitSetHeight(UnitLastCreated(), RandomFixed(0.6, 1.0), 0.0);
                        UnitSetCustomValue(lv_target, 0, (UnitGetCustomValue(lv_target, 0) + 1.0));
                    }
                    gf_UpdateResourceTooltip(lv_target);
                }
                else if ((UnitGetType(lv_target) == &quot;CulinaryHerbBush&quot;)) {
                    auto0CB82B79_ae = FixedToInt(lv_bushRestore);
                    auto0CB82B79_ai = 1;
                    lv_a = 1;
                    for ( ; ( (auto0CB82B79_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto0CB82B79_ae) || (auto0CB82B79_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto0CB82B79_ae) ) ; lv_a += auto0CB82B79_ai ) {
                        UnitCreate(1, &quot;CulinaryHerb&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_target), RandomFixed(0.4, 0.5), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                        UnitSetHeight(UnitLastCreated(), RandomFixed(0.6, 1.6), 0.0);
                        UnitSetCustomValue(lv_target, 0, (UnitGetCustomValue(lv_target, 0) + 1.0));
                    }
                    gf_UpdateResourceTooltip(lv_target);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NaturesGrace_Init () {
                gt_NaturesGrace = TriggerCreate(&quot;gt_NaturesGrace_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_NaturesGrace, c_playerAny, &quot;NaturesGraceTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_NaturesGrace_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="44DF1219">
        <ScriptCode>
            bool gt_MineralTap_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_spellCost;
                // Variable Initialization
                lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;MineralTap&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MineralTap_Init () {
                gt_MineralTap = TriggerCreate(&quot;gt_MineralTap_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MineralTap, c_playerAny, &quot;MineralTapApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MineralTap_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="36964CFA">
        <ScriptCode>
            bool gt_Clairvoyance_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_spellCost;
                // Variable Initialization
                lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;Clairvoyance&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Clairvoyance_Init () {
                gt_Clairvoyance = TriggerCreate(&quot;gt_Clairvoyance_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_Clairvoyance, c_playerAny, &quot;ClairvoyancePersistent&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_Clairvoyance_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6894CCEA">
        <ScriptCode>
            bool gt_FrostArmorCast_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_spellCost;
                // Variable Initialization
                lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;FrostArmor&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FrostArmorCast_Init () {
                gt_FrostArmorCast = TriggerCreate(&quot;gt_FrostArmorCast_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FrostArmorCast, c_playerAny, &quot;FrostArmorApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FrostArmorCast_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="2B308D89">
        <ScriptCode>
            bool gt_FrostArmorExtend_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_frostArmoredUnit;
                fixed lv_duration;
                // Variable Initialization
                lv_frostArmoredUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_duration = UnitBehaviorDuration(lv_frostArmoredUnit, &quot;FrostArmor&quot;);
                // Conditions
                if (testConds) {
                    if (!((lv_duration &lt; 30.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorSetDurationRemaining(lv_frostArmoredUnit, &quot;FrostArmor&quot;, (UnitBehaviorDuration(lv_frostArmoredUnit, &quot;FrostArmor&quot;) + 1.0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FrostArmorExtend_Init () {
                gt_FrostArmorExtend = TriggerCreate(&quot;gt_FrostArmorExtend_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FrostArmorExtend, c_playerAny, &quot;FrostArmorDamage&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FrostArmorExtend_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D1E39EBC">
        <ScriptCode>
            bool gt_SiphonLifeInitial_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_spellCost;
                // Variable Initialization
                lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;SiphonLife&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SiphonLifeInitial_Init () {
                gt_SiphonLifeInitial = TriggerCreate(&quot;gt_SiphonLifeInitial_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_SiphonLifeInitial, c_playerAny, &quot;SiphonLifeApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SiphonLifeInitial_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="2D0F94C7">
        <ScriptCode>
            bool gt_SiphonLifeTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_stealFullAmount;
                // Variable Initialization
                lv_stealFullAmount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;SiphonLifeStats&quot;, &quot;Amount&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitDamage(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;SiphonLifeDummyDamage&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_stealFullAmount);
                gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_stealFullAmount, true);
                gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_hunger += (lv_stealFullAmount * 0.5);
                if ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;NecromancersNecklace&quot;) == true) &amp;&amp; (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;FrostBarrier&quot;) == false)) {
                    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_warmth += (lv_stealFullAmount * 0.5);
                }
                else {
                }
                if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == &quot;Kobold&quot;)) {
                    gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_hunger -= (lv_stealFullAmount * 0.5);
                    if ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;NecromancersNecklace&quot;) == true)) {
                        gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_warmth -= (lv_stealFullAmount * 0.5);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SiphonLifeTrigger_Init () {
                gt_SiphonLifeTrigger = TriggerCreate(&quot;gt_SiphonLifeTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_SiphonLifeTrigger, c_playerAny, &quot;SiphonLifeTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SiphonLifeTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6070E3A9">
        <ScriptCode>
            bool gt_AfflictionInitial_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_spellCost;
                // Variable Initialization
                lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;Affliction&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AfflictionInitial_Init () {
                gt_AfflictionInitial = TriggerCreate(&quot;gt_AfflictionInitial_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AfflictionInitial, c_playerAny, &quot;AfflictionApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AfflictionInitial_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1331DE69">
        <ScriptCode>
            bool gt_AfflictionDrain_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_amount;
                // Variable Initialization
                lv_amount = EventUnitDamageAmount();
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                    if (!((UnitHasBehavior(EventUnit(), &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_playerData[UnitGetOwner(EventUnit())].lv_stamina -= (0.1 * lv_amount);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AfflictionDrain_Init () {
                gt_AfflictionDrain = TriggerCreate(&quot;gt_AfflictionDrain_Func&quot;);
                TriggerAddEventUnitDamaged(gt_AfflictionDrain, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, &quot;AfflictionDamage&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AfflictionDrain_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BFCF4B25">
        <ScriptCode>
            bool gt_ShadowCloakInitial_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_spellCost;
                // Variable Initialization
                lv_spellCost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;ShadowCloak&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_spellCost);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShadowCloakInitial_Init () {
                gt_ShadowCloakInitial = TriggerCreate(&quot;gt_ShadowCloakInitial_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ShadowCloakInitial, c_playerAny, &quot;ShadowCloakStopAttack&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ShadowCloakInitial_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="77FAC915">
        <ScriptCode>
            bool gt_ShadowCloakEnd_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;ShadowCloak&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.TimeUse&quot;, UnitGetOwner(EventUnit()), FixedToString(2.5, 0));
                UnitAbilitySpend(EventUnit(), AbilityCommand(&quot;ShadowCloak&quot;, 0), c_spendLocationAbility);
                CatalogFieldValueSet(c_gameCatalogAbil, &quot;ShadowCloak&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Cooldown.TimeUse&quot;, UnitGetOwner(EventUnit()), FixedToString(0.25, 2));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShadowCloakEnd_Init () {
                gt_ShadowCloakEnd = TriggerCreate(&quot;gt_ShadowCloakEnd_Func&quot;);
                TriggerAddEventUnitAbility(gt_ShadowCloakEnd, null, AbilityCommand(&quot;ShadowCloak&quot;, 1), c_unitAbilStageExecute, false);
            }
        </ScriptCode>
        <InitFunc>gt_ShadowCloakEnd_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="960F2DF0">
        <ScriptCode>
            bool gt_GuardianSpiritInitial_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_cost;
                // Variable Initialization
                lv_cost = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, &quot;GuardianSpirit&quot;, &quot;Cost[&quot; + IntToString(0) + &quot;].Vital[&quot; + IntToString(2) + &quot;]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SpellCast(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_cost);
                gf_GuardianSpiritLoop(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GuardianSpiritInitial_Init () {
                gt_GuardianSpiritInitial = TriggerCreate(&quot;gt_GuardianSpiritInitial_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GuardianSpiritInitial, c_playerAny, &quot;GuardianSpiritApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GuardianSpiritInitial_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A483AFFE">
        <ScriptCode>
            bool gt_GuardianSpiritTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_regenC;
                fixed lv_regen;
                // Variable Initialization
                lv_regenC = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GuardianSpiritStats&quot;, &quot;Amount&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                lv_regen = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GuardianSpiritStats&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_regen = (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropLifeMax, c_unitPropCurrent) * (lv_regen * 0.01));
                gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitCaster), (lv_regen + lv_regenC), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GuardianSpiritTrigger_Init () {
                gt_GuardianSpiritTrigger = TriggerCreate(&quot;gt_GuardianSpiritTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GuardianSpiritTrigger, c_playerAny, &quot;GuardianSpiritTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GuardianSpiritTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1BBC6A2F">
        <ScriptCode>
            bool gt_GuardianSpiritLingeringTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_heal;
                // Variable Initialization
                lv_heal = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GuardianSpiritStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_heal *= 0.08;
                gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_heal, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GuardianSpiritLingeringTrigger_Init () {
                gt_GuardianSpiritLingeringTrigger = TriggerCreate(&quot;gt_GuardianSpiritLingeringTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GuardianSpiritLingeringTrigger, c_playerAny, &quot;GuardianSpiritLingeringHeal&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GuardianSpiritLingeringTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7D70DE92">
        <ScriptCode>
            bool gt_WhirlwindRotate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster), (UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster)) + (360.0 / 4.0)), 0.0625);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WhirlwindRotate_Init () {
                gt_WhirlwindRotate = TriggerCreate(&quot;gt_WhirlwindRotate_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WhirlwindRotate, c_playerAny, &quot;WhirlwindRotate&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WhirlwindRotate_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D08A5002">
        <ScriptCode>
            bool gt_SpellAbsorb_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_blocker;
                unit lv_attacker;
                int lv_i;
                // Variable Initialization
                lv_blocker = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_i = UnitGetOwner(lv_blocker);
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Advancedtag(lv_blocker, UnitGetOwner(lv_blocker), StringExternal(&quot;Param/Value/84ECB4CB&quot;), 2.0, 24);
                gf_Advancedtag(lv_blocker, UnitGetOwner(lv_attacker), StringExternal(&quot;Param/Value/3ABF98D0&quot;), 2.0, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpellAbsorb_Init () {
                gt_SpellAbsorb = TriggerCreate(&quot;gt_SpellAbsorb_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_SpellAbsorb, c_playerAny, &quot;SpellAbsorbSet&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SpellAbsorb_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="5A4BB6DF">
        <Item Type="CustomScript" Id="07055565"/>
        <Item Type="CustomScript" Id="0BEC8642"/>
        <Item Type="CustomScript" Id="B9493003"/>
        <Item Type="CustomScript" Id="A0079B9E"/>
        <Item Type="CustomScript" Id="E19F70A0"/>
        <Item Type="CustomScript" Id="737A32ED"/>
        <Item Type="CustomScript" Id="B48559BE"/>
        <Item Type="CustomScript" Id="6D3DE3E7"/>
        <Item Type="CustomScript" Id="670507B7"/>
        <Item Type="CustomScript" Id="FEDF1D1C"/>
        <Item Type="CustomScript" Id="B1D8094E"/>
        <Item Type="CustomScript" Id="97584E99"/>
        <Item Type="CustomScript" Id="2D61F4EF"/>
        <Item Type="CustomScript" Id="77337B47"/>
        <Item Type="CustomScript" Id="95DCB60D"/>
        <Item Type="CustomScript" Id="07C5CF10"/>
        <Item Type="CustomScript" Id="0F45685F"/>
        <Item Type="CustomScript" Id="A4F0EDE9"/>
        <Item Type="CustomScript" Id="F451A6D8"/>
        <Item Type="CustomScript" Id="86641D64"/>
    </Element>
    <Element Type="CustomScript" Id="07055565">
        <ScriptCode>
            bool gt_InitializeDayTimerDialog_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogCreate(230, 50, c_anchorBottomLeft, 5, 300, true);
                gv_dayTimerDialog = DialogLastCreated();
                DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
                gv_dayTimerProgress = DialogControlLastCreated();
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 20, 15);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 190, 20);
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitializeDayTimerDialog_Init () {
                gt_InitializeDayTimerDialog = TriggerCreate(&quot;gt_InitializeDayTimerDialog_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_InitializeDayTimerDialog_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0BEC8642">
        <ScriptCode>
            bool gt_LanternTrigger_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_dayNight == 2) &amp;&amp; (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;LanternLight&quot;) == false)) {
                    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;LanternLightApply&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget));
                }
                else if (((gv_dayNight == 1) || (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;Lantern&quot;) == false)) &amp;&amp; (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;LanternLight&quot;) == true)) {
                    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;LanternLightRemove&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LanternTrigger_Init () {
                gt_LanternTrigger = TriggerCreate(&quot;gt_LanternTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_LanternTrigger, c_playerAny, &quot;LanternTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_LanternTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B9493003">
        <ScriptCode>
            bool gt_WolfsbanePassive_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_dayNight == 2) &amp;&amp; (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;WolfsbanePassive&quot;) == false) &amp;&amp; (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;WolfsbanePassiveStronger&quot;) == false)) {
                    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;WolfsbaneApply&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget));
                }
                else if (((gv_dayNight == 1) || (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;Wolfsbane&quot;) == false)) &amp;&amp; ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;WolfsbanePassive&quot;) == true) || (UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;WolfsbanePassiveStronger&quot;) == true))) {
                    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;WolfsbaneRemoveSet&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WolfsbanePassive_Init () {
                gt_WolfsbanePassive = TriggerCreate(&quot;gt_WolfsbanePassive_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WolfsbanePassive, c_playerAny, &quot;WolfsbaneTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WolfsbanePassive_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A0079B9E">
        <ScriptCode>
            bool gt_CoiffureCareCounter_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_gameStats.lv_rainAvoided += 1;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CoiffureCareCounter_Init () {
                gt_CoiffureCareCounter = TriggerCreate(&quot;gt_CoiffureCareCounter_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_CoiffureCareCounter, c_playerAny, &quot;CoiffureCareCounter&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_CoiffureCareCounter_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E19F70A0">
        <ScriptCode>
            bool gt_StagEvasion_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_stag;
                unitgroup lv_hostiles;
                fixed lv_alarmRadius;
                point lv_p;
                // Variable Initialization
                lv_stag = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_hostiles = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_stag), gv_stagAlarmRadius), UnitFilter((1 &lt;&lt; c_targetFilterGround) | (1 &lt;&lt; c_targetFilterBiological), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0);
                lv_alarmRadius = gv_stagAlarmRadius;
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(lv_hostiles);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;Sheep&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Pheasant&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Stag&quot;))) {
                        UnitGroupRemove(lv_hostiles, UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if ((UnitHasBehavior(lv_stag, &quot;StagInjuredAlert&quot;) == false)) {
                    UnitGroupLoopBegin(lv_hostiles);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        lv_alarmRadius -= (gv_skillForaging[UnitGetOwner(UnitGroupLoopCurrent())] / 5.0);
                        if (((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Running&quot;) == false) || (UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Stationary&quot;) == true))) {
                            lv_alarmRadius -= 4.0;
                        }
                        else {
                        }
                        if ((UnitHasBehavior(UnitGroupLoopCurrent(), &quot;Beast&quot;) == true)) {
                            lv_alarmRadius -= 8.0;
                        }
                        else {
                        }
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_stag), UnitGetPosition(UnitGroupLoopCurrent())) &gt; libNtve_gf_ArithmeticRealClamp(lv_alarmRadius, 4.0, 9.0)) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;MurlocSlave&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;Ghoul&quot;)) {
                            UnitGroupRemove(lv_hostiles, UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    UnitGroupLoopEnd();
                }
                else {
                }
                if ((UnitGroupCount(lv_hostiles, c_unitCountAlive) &gt; 0)) {
                    UnitBehaviorAdd(lv_stag, &quot;StagSprint&quot;, lv_stag, 1);
                    lv_p = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_stag), -22.0, UnitGroupCenterOfGroup(lv_hostiles));
                    lv_p = gf_RandomPathablePoint(RegionCircle(lv_p, 8.0));
                    if (gf_PathableMaximum(lv_stag, lv_p, 32)) {
                    }
                    else {
                        if ((((UnitGetCustomValue(lv_stag, 0) == 0.0) &amp;&amp; (UnitGetCustomValue(lv_stag, 1) == 0.0)) || (DistanceBetweenPoints(UnitGetPosition(lv_stag), Point(UnitGetCustomValue(lv_stag, 0), UnitGetCustomValue(lv_stag, 1))) &lt;= 4.0))) {
                            lv_p = gf_RandomPathablePoint(RegionPlayableMap());
                        }
                        else {
                            lv_p = Point(UnitGetCustomValue(lv_stag, 0), UnitGetCustomValue(lv_stag, 1));
                        }
                        UnitBehaviorAdd(lv_stag, &quot;StagBlindDash&quot;, lv_stag, 1);
                    }
                    UnitIssueOrder(lv_stag, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_p), c_orderQueueReplace);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StagEvasion_Init () {
                gt_StagEvasion = TriggerCreate(&quot;gt_StagEvasion_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_StagEvasion, c_playerAny, &quot;StagEvasionTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_StagEvasion_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="737A32ED">
        <ScriptCode>
            bool gt_GainResource_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_gameOver == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(EventUnit()) == &quot;Kobold&quot;)) {
                    gv_aIData[UnitGetOwner(EventUnit())].lv_focalNode = null;
                    gf_UpdateResourceReservesSingle(EventUnit(), EventUnitInventoryItem(), false);
                }
                else if ((UnitGetType(EventUnit()) == &quot;StorageOutpost&quot;)) {
                    gf_UpdateOutpostVisual(EventUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;PackBeaver&quot;) &amp;&amp; (UnitHasBehavior(EventUnit(), &quot;BeaverScavenger&quot;) == true) &amp;&amp; gf_UnitExists(gv_teamData[gv_playerData[UnitGetOwner(EventUnit())].lv_team].lv_watchTower)) {
                    UnitBehaviorRemove(EventUnit(), &quot;BeaverScavenger&quot;, 1);
                    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand(&quot;GiveAllItemsToTarget&quot;, 0), gv_teamData[gv_playerData[UnitGetOwner(EventUnit())].lv_team].lv_watchTower), c_orderQueueReplace);
                    UnitBehaviorAdd(EventUnit(), &quot;BeaverCargo&quot;, EventUnit(), 1);
                    UnitSetInfoText(EventUnit(), StringExternal(&quot;Param/Value/0461DF37&quot;), UnitTypeGetName(UnitGetType(UnitGroupUnit(UnitInventoryGroup(EventUnit()), 1))), StringExternal(&quot;Param/Value/D8E2116B&quot;));
                }
                if ((UnitGetType(EventUnitInventoryItem()) == &quot;GoldPurse&quot;)) {
                    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(UnitGetCustomValue(EventUnitInventoryItem(), 0)));
                    gv_playerData[UnitGetOwner(EventUnit())].lv_gameStats.lv_goldEarned += FixedToInt(UnitGetCustomValue(EventUnitInventoryItem(), 0));
                    SoundPlayOnUnit(SoundLink(&quot;GoldPickup&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
                    gf_Quicktag(EventUnit(), (StringExternal(&quot;Param/Value/6137EF46&quot;) + (FixedToText(UnitGetCustomValue(EventUnitInventoryItem(), 0), 0) + StringExternal(&quot;Param/Value/BB77D3D5&quot;))), 2.0, 24);
                    gf_DropandRemove(EventUnitInventoryItem());
                }
                else {
                }
                if ((gv_tutorial == true)) {
                    if (((UnitGetType(EventUnitInventoryItem()) == &quot;IronOre&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;Shadowstone&quot;))) {
                        TriggerExecute(gt_TutorialPart55, true, false);
                    }
                    else {
                    }
                    if ((UnitGetType(EventUnitInventoryItem()) == &quot;Stone&quot;)) {
                        TriggerExecute(gt_TutorialPart6, true, false);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GainResource_Init () {
                gt_GainResource = TriggerCreate(&quot;gt_GainResource_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_GainResource, null, c_unitInventoryChangeGains, null);
            }
        </ScriptCode>
        <InitFunc>gt_GainResource_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B48559BE">
        <ScriptCode>
            bool gt_LoseResource_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_gameOver == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(EventUnit()) == &quot;Kobold&quot;)) {
                    gf_UpdateResourceReservesSingle(EventUnit(), EventUnitInventoryItem(), true);
                }
                else if ((UnitGetType(EventUnit()) == &quot;StorageOutpost&quot;)) {
                    gf_UpdateOutpostVisual(EventUnit());
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LoseResource_Init () {
                gt_LoseResource = TriggerCreate(&quot;gt_LoseResource_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_LoseResource, null, c_unitInventoryChangeLoses, null);
            }
        </ScriptCode>
        <InitFunc>gt_LoseResource_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6D3DE3E7">
        <ScriptCode>
            bool gt_TreeLoot_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_warmthandFatigueGain;
                fixed lv_autogrowChance;
                fixed lv_heal;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitGetType(EventUnit()) == &quot;MapleTree&quot;) || (UnitGetType(EventUnit()) == &quot;ElderTree&quot;)))) {
                        return false;
                    }
                    if (!(((UnitGetCustomValue(EventUnit(), 0) == 0.0) || (UnitGetCustomValue(EventUnit(), 0) &gt;= 1.0)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(EventUnit()) == &quot;ElderTree&quot;)) {
                    gf_AddExperience(EventUnitDamageSourceUnit(), 75.0);
                    UnitCreate(1, &quot;InfusedLumber&quot;, 0, 0, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, PointWithOffset(UnitGetPosition(EventUnit()), RandomFixed(-0.25, 0.25), RandomFixed(-0.25, 0.25)), libNtve_gf_RandomAngle());
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, PointWithOffset(UnitGetPosition(EventUnit()), RandomFixed(-0.25, 0.25), RandomFixed(-0.25, 0.25)), libNtve_gf_RandomAngle());
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, PointWithOffset(UnitGetPosition(EventUnit()), RandomFixed(-0.25, 0.25), RandomFixed(-0.25, 0.25)), libNtve_gf_RandomAngle());
                }
                else {
                    gf_AddExperience(EventUnitDamageSourceUnit(), 20.0);
                    UnitCreate(1, &quot;Lumber&quot;, 0, 0, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
                }
                if ((UnitGetType(EventUnitDamageSourceUnit()) == &quot;Kobold&quot;)) {
                    gv_playerData[UnitGetOwner(EventUnitDamageSourceUnit())].lv_gameStats.lv_treesFelled += 1;
                    lv_warmthandFatigueGain = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventUnitDamageSourceUnit())));
                    if ((lv_warmthandFatigueGain &gt; 0.0)) {
                        if (((UnitHasBehavior(EventUnitDamageSourceUnit(), &quot;FrostBarrier&quot;) == true) || (UnitHasBehavior(EventUnitDamageSourceUnit(), &quot;FrostArmor&quot;) == true))) {
                            gv_playerData[UnitGetOwner(EventUnitDamageSourceUnit())].lv_stamina += lv_warmthandFatigueGain;
                            TextExpressionSetToken(&quot;Param/Expression/ED2887A5&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/13F10214&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/ED2887A5&quot;, &quot;B&quot;, FixedToText(lv_warmthandFatigueGain, 0));
                            TextExpressionSetToken(&quot;Param/Expression/ED2887A5&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/B6A2A256&quot;));
                            gf_Quicktag(EventUnitDamageSourceUnit(), TextExpressionAssemble(&quot;Param/Expression/ED2887A5&quot;), 2.0, 24);
                        }
                        else {
                            gv_playerData[UnitGetOwner(EventUnitDamageSourceUnit())].lv_warmth += lv_warmthandFatigueGain;
                            gv_playerData[UnitGetOwner(EventUnitDamageSourceUnit())].lv_stamina += lv_warmthandFatigueGain;
                            TextExpressionSetToken(&quot;Param/Expression/A9D518A1&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/50ED146A&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/A9D518A1&quot;, &quot;E&quot;, FixedToText(lv_warmthandFatigueGain, 0));
                            TextExpressionSetToken(&quot;Param/Expression/A9D518A1&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/C982DBB0&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/A9D518A1&quot;, &quot;B&quot;, FixedToText(lv_warmthandFatigueGain, 0));
                            TextExpressionSetToken(&quot;Param/Expression/A9D518A1&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/C6546BC6&quot;));
                            gf_Quicktag(EventUnitDamageSourceUnit(), TextExpressionAssemble(&quot;Param/Expression/A9D518A1&quot;), 2.0, 24);
                        }
                    }
                    else {
                    }
                    lv_autogrowChance = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;AutogrowStat&quot;, &quot;Amount&quot;, UnitGetOwner(EventUnitDamageSourceUnit())));
                    if ((((UnitHasBehavior(EventUnitDamageSourceUnit(), &quot;GrandForestersFavoured&quot;) == true) &amp;&amp; (libNtve_gf_RandomPercent() &lt; lv_autogrowChance)) || ((gv_skillForestry[UnitGetOwner(EventUnitDamageSourceUnit())] &gt;= 15) &amp;&amp; (libNtve_gf_RandomPercent() &lt; 30.0)))) {
                        UnitCreateEffectPoint(EventUnitDamageSourceUnit(), &quot;PlantTree&quot;, UnitGetPosition(EventUnit()));
                    }
                    else {
                    }
                }
                else {
                }
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_playerData[PlayerGroupLoopCurrent()].lv_alive == true) &amp;&amp; (UnitHasBehavior(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;GrandForestersFavoured&quot;) == true)) {
                        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(UnitGetPosition(EventUnit()), 3.0), 3.0, false);
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TreeLoot_Init () {
                gt_TreeLoot = TriggerCreate(&quot;gt_TreeLoot_Func&quot;);
                TriggerAddEventUnitDamaged(gt_TreeLoot, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
            }
        </ScriptCode>
        <InitFunc>gt_TreeLoot_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="670507B7">
        <ScriptCode>
            bool WildBearAI_Periodic(bool cond, bool actions){
                unit animal = EventUnitCreatedUnit();
                int owner = UnitGetOwner(animal);
                string type = UnitGetType(animal);
                point lPoint;
                point cPoint;
                point rPoint;
                fixed dist;
                fixed fac;
                int resetLeash = 0;
                
                if (owner == 15){
                    if (type == &quot;Bear&quot; || type == &quot;WhiteBear&quot;){
                        lPoint = UnitGetPosition(animal);
                        while (gf_UnitExists(animal)){
                            if (!UnitHasBehavior(animal, &quot;BeastLeash&quot;)){
                                cPoint = UnitGetPosition(animal);
                                dist = DistanceBetweenPoints(cPoint, lPoint);
                                if (dist &gt; 9.){
                                    fac = AngleBetweenPoints(cPoint, lPoint);
                                    UnitBehaviorAdd(animal, &quot;BeastLeash&quot;, animal, 7);
                                    rPoint = PointWithOffsetPolar(cPoint, RandomFixed(.35*dist, .75*dist), fac);
                                    UnitIssueOrder(animal, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), rPoint), c_orderQueueReplace);
                                    lPoint = rPoint;
                                }
                                else {
                                    resetLeash +=1;
                            
                                    if (resetLeash &gt; 3){
                                        resetLeash = 0;
                                        lPoint = cPoint;
                                    }
                                }
                            }
                            Wait(3., c_timeGame);
                        }
                    }
                }
                return true;
            }
            void WildBearAI_Init(){
                TriggerAddEventUnitCreated(TriggerCreate(&quot;WildBearAI_Periodic&quot;), null, null, null);
            }
        </ScriptCode>
        <InitFunc>WildBearAI_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="FEDF1D1C">
        <ScriptCode>
            bool gt_UpdateGold_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_UpdateGold(EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UpdateGold_Init () {
                gt_UpdateGold = TriggerCreate(&quot;gt_UpdateGold_Func&quot;);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 1, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 2, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 3, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 4, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 5, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 6, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 7, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 8, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 9, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 10, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 11, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 12, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 13, c_playerPropMinerals);
                TriggerAddEventPlayerPropChange(gt_UpdateGold, 14, c_playerPropMinerals);
            }
        </ScriptCode>
        <InitFunc>gt_UpdateGold_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B1D8094E">
        <ScriptCode>
            bool gt_BushGrowTrigger_Func (bool testConds, bool runActions) {
                string autoD70EE206_val;
                // Variable Declarations
                unit lv_bush;
                // Variable Initialization
                lv_bush = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetCustomValue(lv_bush, 1) &gt; 0.0)) {
                    UnitSetCustomValue(lv_bush, 0, (UnitGetCustomValue(lv_bush, 0) + 1.0));
                    UnitSetCustomValue(lv_bush, 1, (UnitGetCustomValue(lv_bush, 1) - 1.0));
                    autoD70EE206_val = UnitGetType(lv_bush);
                    if (autoD70EE206_val == &quot;BerryBush&quot;) {
                        UnitCreate(1, &quot;Berry&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_bush), RandomFixed(0.3, 0.6), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                        UnitSetHeight(UnitLastCreated(), RandomFixed(0.9, 1.1), 0.0);
                    }
                    else if (autoD70EE206_val == &quot;CulinaryHerbBush&quot;) {
                        UnitCreate(1, &quot;CulinaryHerb&quot;, c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_bush), RandomFixed(0.3, 0.4), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
                        UnitSetHeight(UnitLastCreated(), RandomFixed(0.5, 1.5), 0.0);
                    }
                    else {
                    }
                    gf_UpdateResourceTooltip(lv_bush);
                    gf_Alltag(lv_bush, StringExternal(&quot;Param/Value/7EC77AD6&quot;), 2.0, 24);
                    if ((UnitGetCustomValue(lv_bush, 1) &gt; 0.0)) {
                        UnitBehaviorAdd(lv_bush, &quot;BushRegrowth&quot;, lv_bush, 1);
                    }
                    else {
                    }
                }
                else {
                    UnitBehaviorRemove(lv_bush, &quot;BushRegrowth&quot;, 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BushGrowTrigger_Init () {
                gt_BushGrowTrigger = TriggerCreate(&quot;gt_BushGrowTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BushGrowTrigger, c_playerAny, &quot;BushRegrowthTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BushGrowTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="97584E99">
        <ScriptCode>
            bool gt_StopGatheringImmediately_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitHasBehavior(EventUnit(), &quot;MiningStoneSmart&quot;) == true) || (UnitHasBehavior(EventUnit(), &quot;MiningGoldSmart&quot;) == true) || (UnitHasBehavior(EventUnit(), &quot;PickingBerriesSmart&quot;) == true) || (UnitHasBehavior(EventUnit(), &quot;PickingHerbsSmart&quot;) == true) || (UnitHasBehavior(EventUnit(), &quot;UnlockingChestSmart&quot;) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_GatherStop(EventUnit());
                UnitSetFacing(EventUnit(), (UnitGetFacing(EventUnit()) + 1.0), 0.0);
                libNtve_gf_SendActorMessageToUnit(EventUnit(), &quot;AnimClear Mining&quot;);
                libNtve_gf_SendActorMessageToUnit(EventUnit(), &quot;AnimClear Spell&quot;);
                libNtve_gf_SendActorMessageToUnit(EventUnit(), &quot;AnimClear Attack&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StopGatheringImmediately_Init () {
                gt_StopGatheringImmediately = TriggerCreate(&quot;gt_StopGatheringImmediately_Func&quot;);
                TriggerAddEventUnitOrder(gt_StopGatheringImmediately, null, AbilityCommand(&quot;stop&quot;, 0));
            }
        </ScriptCode>
        <InitFunc>gt_StopGatheringImmediately_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="2D61F4EF">
        <ScriptCode>
            bool gt_GatherStart_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_gatherer;
                unit lv_node;
                bool lv_thru;
                // Variable Initialization
                lv_gatherer = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_node = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(lv_node) == &quot;StoneDeposit&quot;) &amp;&amp; (UnitHasBehavior(lv_gatherer, &quot;MiningStoneSmart&quot;) == false)) {
                    UnitBehaviorAdd(lv_gatherer, &quot;MiningStoneSmart&quot;, lv_node, 1);
                    gf_Quicktag(lv_gatherer, StringExternal(&quot;Param/Value/7815E8F9&quot;), 2.0, 24);
                    lv_thru = true;
                }
                else if ((UnitGetType(lv_node) == &quot;GoldDeposit&quot;) &amp;&amp; (UnitHasBehavior(lv_gatherer, &quot;MiningGoldSmart&quot;) == false)) {
                    UnitBehaviorAdd(lv_gatherer, &quot;MiningGoldSmart&quot;, lv_node, 1);
                    gf_Quicktag(lv_gatherer, StringExternal(&quot;Param/Value/30EE3D18&quot;), 2.0, 24);
                    lv_thru = true;
                }
                else if ((UnitGetType(lv_node) == &quot;BerryBush&quot;) &amp;&amp; (UnitHasBehavior(lv_gatherer, &quot;PickingBerriesSmart&quot;) == false)) {
                    UnitBehaviorAdd(lv_gatherer, &quot;PickingBerriesSmart&quot;, lv_node, 1);
                    gf_Quicktag(lv_gatherer, StringExternal(&quot;Param/Value/E3650CE0&quot;), 2.0, 24);
                    lv_thru = true;
                }
                else if ((UnitGetType(lv_node) == &quot;CulinaryHerbBush&quot;) &amp;&amp; (UnitHasBehavior(lv_gatherer, &quot;PickingHerbsSmart&quot;) == false)) {
                    UnitBehaviorAdd(lv_gatherer, &quot;PickingHerbsSmart&quot;, lv_node, 1);
                    gf_Quicktag(lv_gatherer, StringExternal(&quot;Param/Value/18189E78&quot;), 2.0, 24);
                    lv_thru = true;
                }
                else if ((UnitGetType(lv_node) == &quot;TreasureChest&quot;) &amp;&amp; (UnitHasBehavior(lv_gatherer, &quot;UnlockingChestSmart&quot;) == false)) {
                    UnitBehaviorAdd(lv_gatherer, &quot;UnlockingChestSmart&quot;, lv_node, 1);
                    gf_Quicktag(lv_gatherer, StringExternal(&quot;Param/Value/FEEBDC4B&quot;), 3.0, 24);
                    lv_thru = true;
                }
                if ((lv_thru == true)) {
                    UnitIssueOrder(lv_gatherer, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                    UnitSetCustomValue(lv_node, 3, IntToFixed(0));
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GatherStart_Init () {
                gt_GatherStart = TriggerCreate(&quot;gt_GatherStart_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GatherStart, c_playerAny, &quot;GatheringResourcesStart&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GatherStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="77337B47">
        <ScriptCode>
            bool gt_GatherProgress_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_gatherer;
                unit lv_node;
                int lv_type;
                int lv_cap;
                int lv_cV;
                // Variable Initialization
                lv_gatherer = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_node = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_type = gf_GatherType(lv_gatherer);
                lv_cap = gf_GatherCap(lv_gatherer, lv_node, lv_type);
                lv_cV = FixedToInt(UnitGetCustomValue(lv_gatherer, 0));
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((lv_node != null) &amp;&amp; (UnitHasBehavior(lv_gatherer, &quot;Stationary&quot;) == true) &amp;&amp; (UnitHasBehavior(lv_gatherer, &quot;Unconscious&quot;) == false) &amp;&amp; (UnitHasBehavior(lv_gatherer, &quot;SleepingBag&quot;) == false) &amp;&amp; (AngleBetweenPoints(UnitGetPosition(lv_gatherer), UnitGetPosition(lv_node)) == UnitGetFacing(lv_gatherer))) {
                    gf_GatherAnimation(lv_gatherer, lv_cV, lv_type, lv_cap);
                    if ((UnitGetCustomValue(lv_gatherer, 1) &gt;= 7.0)) {
                        UnitSetCustomValue(lv_gatherer, 1, 0.0);
                    }
                    else {
                        UnitSetCustomValue(lv_gatherer, 1, (UnitGetCustomValue(lv_gatherer, 1) + 1.0));
                    }
                    if ((lv_cV &gt;= lv_cap)) {
                        gf_GatherResult(lv_gatherer, lv_node, lv_type);
                        UnitSetCustomValue(lv_gatherer, 0, IntToFixed(0));
                    }
                    else {
                        UnitSetCustomValue(lv_gatherer, 0, IntToFixed((lv_cV + 1)));
                    }
                }
                else {
                    gf_GatherStop(lv_gatherer);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GatherProgress_Init () {
                gt_GatherProgress = TriggerCreate(&quot;gt_GatherProgress_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GatherProgress, c_playerAny, &quot;GatheringResourcesProgress&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GatherProgress_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="95DCB60D">
        <ScriptCode>
            bool gt_PlantTree_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_owner;
                // Variable Initialization
                lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_playerData[lv_owner].lv_gameStats.lv_treesPlanted += 1;
                gf_AddExperience(EventPlayerEffectUsedUnit(c_effectUnitCaster), 10.0);
                libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
                UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0, 0.15);
                UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1, 0.15);
                UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2, 0.15);
                UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 3, IntToFixed(lv_owner));
                libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), libNtve_gf_SetScale(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2), 0.0));
                if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != 0)) {
                    UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0, false);
                }
                else {
                }
                if ((gv_skillForestry[lv_owner] &gt;= 25)) {
                    UnitBehaviorAdd(gv_playerData[lv_owner].lv_kobold, &quot;ForestConnection&quot;, gv_playerData[lv_owner].lv_kobold, 1);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlantTree_Init () {
                gt_PlantTree = TriggerCreate(&quot;gt_PlantTree_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_PlantTree, c_playerAny, &quot;GrowingTreeSet&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_PlantTree_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="07C5CF10">
        <ScriptCode>
            bool gt_GrowTree_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_growthPerSecond;
                fixed lv_estimatedGrowthIntervalsLeft;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(EventPlayerEffectUsedUnit(c_effectUnitCaster))) {
                    if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) != 100.0)) {
                        lv_growthPerSecond = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;GrowingTreeModify&quot;, &quot;VitalArray[Life].Change[0]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                        if ((lv_growthPerSecond != 0.0)) {
                            lv_estimatedGrowthIntervalsLeft = ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, c_unitPropCurrent)) / lv_growthPerSecond);
                            if ((lv_estimatedGrowthIntervalsLeft != 0.0)) {
                                if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) &gt;= (100.0 * UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0)))) {
                                    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0, (UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0) + ((1.0 - UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0)) / lv_estimatedGrowthIntervalsLeft)));
                                    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1, (UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1) + ((1.0 - UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1)) / lv_estimatedGrowthIntervalsLeft)));
                                    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2, (UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2) + ((1.0 - UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2)) / lv_estimatedGrowthIntervalsLeft)));
                                    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), libNtve_gf_SetScale(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1), UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 2), 5.0));
                                }
                                else {
                                }
                            }
                            else {
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                else {
                    UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GrowTree_Init () {
                gt_GrowTree = TriggerCreate(&quot;gt_GrowTree_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GrowTree, c_playerAny, &quot;GrowingTreeSetPeriodic&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GrowTree_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0F45685F">
        <ScriptCode>
            bool gt_FinishTree_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_tree;
                int lv_i;
                int lv_t;
                // Variable Initialization
                lv_tree = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_i = FixedToInt(UnitGetCustomValue(lv_tree, 3));
                lv_t = gv_playerData[lv_i].lv_team;
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(lv_tree, 0, 1.0);
                UnitSetCustomValue(lv_tree, 1, 1.0);
                UnitSetCustomValue(lv_tree, 2, 1.0);
                if (gf_UnitExists(gv_playerData[lv_i].lv_kobold)) {
                    gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
                    if ((gv_skillForestry[lv_i] &gt;= 25)) {
                        UnitBehaviorAdd(gv_playerData[lv_i].lv_kobold, &quot;ForestConnectionEnergy&quot;, gv_playerData[lv_i].lv_kobold, 1);
                    }
                    else {
                    }
                }
                else {
                }
                if ((gv_questIndexActive == 4) &amp;&amp; (lv_i != 0) &amp;&amp; (lv_i != 15)) {
                    gv_grownTreesTeam[lv_t] += 1;
                    if ((gv_grownTreesTeam[lv_t] &gt; gv_grownTreesTeam[gv_grownTreesLeadingTeam])) {
                        gv_grownTreesLeadingTeam = lv_t;
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FinishTree_Init () {
                gt_FinishTree = TriggerCreate(&quot;gt_FinishTree_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FinishTree, c_playerAny, &quot;GrowingTreeRemove&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FinishTree_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A4F0EDE9">
        <ScriptCode>
            bool gt_LightTorch_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        UnitAbilityEnable(EventUnit(), &quot;LightTorch&quot;, false);
                        gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/CC7D7F41&quot;), 2.0, 24);
                        gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, &quot;Torch&quot;, 1);
                        if ((gv_tutorial == true)) {
                            TriggerExecute(gt_TutorialPart13, true, false);
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LightTorch_Init () {
                gt_LightTorch = TriggerCreate(&quot;gt_LightTorch_Func&quot;);
                TriggerAddEventUnitAbility(gt_LightTorch, null, AbilityCommand(&quot;LightTorch&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LightTorch_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F451A6D8">
        <ScriptCode>
            bool gt_TorchFade_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DropandRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TorchFade_Init () {
                gt_TorchFade = TriggerCreate(&quot;gt_TorchFade_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TorchFade, c_playerAny, &quot;TorchTimedLifeTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TorchFade_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="86641D64">
        <ScriptCode>
            bool gt_FireWardTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_scarecrow;
                unit lv_animal;
                // Variable Initialization
                lv_scarecrow = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_animal = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(lv_animal), RandomFixed(2.0, 5.0), (AngleBetweenPoints(UnitGetPosition(lv_scarecrow), UnitGetPosition(lv_animal)) + RandomFixed(-25.0, 25.0)))), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FireWardTrigger_Init () {
                gt_FireWardTrigger = TriggerCreate(&quot;gt_FireWardTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FireWardTrigger, c_playerAny, &quot;FireWardTrigger&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FireWardTrigger, c_playerAny, &quot;FrightenWolvesAndBears&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FireWardTrigger_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="693D7148">
        <Item Type="CustomScript" Id="B7DCBF31"/>
        <Item Type="CustomScript" Id="E76F1BDE"/>
        <Item Type="CustomScript" Id="34378772"/>
        <Item Type="CustomScript" Id="CC990BEC"/>
        <Item Type="CustomScript" Id="509A2302"/>
        <Item Type="CustomScript" Id="EC39468E"/>
        <Item Type="CustomScript" Id="8C7B9C62"/>
        <Item Type="CustomScript" Id="217EA2D3"/>
        <Item Type="CustomScript" Id="D3F1572C"/>
        <Item Type="CustomScript" Id="919B07D4"/>
        <Item Type="CustomScript" Id="7DFE28F0"/>
        <Item Type="CustomScript" Id="F5D03088"/>
        <Item Type="CustomScript" Id="A180C6C6"/>
        <Item Type="CustomScript" Id="45FA0602"/>
        <Item Type="CustomScript" Id="25ECC777"/>
        <Item Type="CustomScript" Id="CE82F216"/>
        <Item Type="CustomScript" Id="3CB3EA60"/>
        <Item Type="CustomScript" Id="738F8899"/>
    </Element>
    <Element Type="CustomScript" Id="B7DCBF31">
        <ScriptCode>
            bool gt_BuildingSpawned_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_unit;
                // Variable Initialization
                lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(lv_unit) == &quot;Tent&quot;)) {
                    gf_BuildTent(lv_unit);
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/4C346FC0&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/1ED03F8F&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;CampfireLit&quot;)) {
                    if ((UnitHasBehavior(lv_unit, &quot;CampfireSpecialRequirement&quot;) == false)) {
                        gf_BuildCampfire(lv_unit);
                    }
                    else {
                    }
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/33584294&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/6C5D14D2&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;Campfire&quot;)) {
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/42D872C9&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/31FD175A&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;Farm&quot;)) {
                    gf_BuildFarm(lv_unit);
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/D8D6DB7E&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/6F9904F1&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;Workbench&quot;)) {
                    gf_BuildWorkbench(lv_unit);
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/AC8DACCB&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/1DA559F0&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;Smithy&quot;)) {
                    gf_BuildSmithy(lv_unit);
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/38F34B63&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/CA784FC1&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;Tavern&quot;)) {
                    gf_BuildTavern(lv_unit);
                    gf_TavernSpawn(lv_unit);
                }
                else if ((UnitGetType(lv_unit) == &quot;StorageOutpost&quot;)) {
                    gf_BuildOutpost(lv_unit);
                    gf_UpdateOutpostVisual(lv_unit);
                }
                else if ((UnitGetType(lv_unit) == &quot;SpikeTrap&quot;)) {
                    gf_BuildSpikeTrap(lv_unit);
                    TextExpressionSetToken(&quot;Param/Expression/87824D16&quot;, &quot;A&quot;, gf_GetPlayerName(UnitGetOwner(lv_unit), 0));
                    TextExpressionSetToken(&quot;Param/Expression/87824D16&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/E75C755D&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/87824D16&quot;, &quot;C&quot;, IntToText(3));
                    TextExpressionSetToken(&quot;Param/Expression/87824D16&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/32FFFCB4&quot;));
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/8AC1EBCD&quot;), TextExpressionAssemble(&quot;Param/Expression/87824D16&quot;), StringExternal(&quot;Param/Value/C77C63B7&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;HuntersLodge&quot;)) {
                    gf_BuildLodge(lv_unit);
                    gf_HuntersLodgeSpawn(lv_unit);
                }
                else if ((UnitGetType(lv_unit) == &quot;Palisade&quot;)) {
                    gf_BuildPalisade(lv_unit);
                }
                else if ((UnitGetType(lv_unit) == &quot;LorenorStatue&quot;)) {
                    gf_BuildMonument(lv_unit);
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/DCFAF046&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/33FB3FB2&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;AutomatedDefenseTurret&quot;)) {
                    gf_BuildADT(lv_unit);
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/003026CA&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/5412A87E&quot;));
                }
                else if ((UnitGetType(lv_unit) == &quot;Fortress&quot;)) {
                    gf_BuildWatchTower(lv_unit);
                    UnitSetInfoText(lv_unit, StringExternal(&quot;Param/Value/60818C49&quot;), gf_GetPlayerName(UnitGetOwner(lv_unit), 0), StringExternal(&quot;Param/Value/95E98650&quot;));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuildingSpawned_Init () {
                gt_BuildingSpawned = TriggerCreate(&quot;gt_BuildingSpawned_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BuildingSpawned, c_playerAny, &quot;UpdateBuildingTooltip&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BuildingSpawned_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E76F1BDE">
        <ScriptCode>
            bool gt_ConstructionStart_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/8F52C2B6&quot;), false);
                UnitBehaviorAdd(EventUnit(), &quot;Constructing&quot;, EventUnit(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ConstructionStart_Init () {
                gt_ConstructionStart = TriggerCreate(&quot;gt_ConstructionStart_Func&quot;);
                TriggerAddEventUnitConstructProgress(gt_ConstructionStart, null, c_unitProgressStageStart);
                TriggerAddEventUnitConstructProgress(gt_ConstructionStart, null, c_unitProgressStageResume);
            }
        </ScriptCode>
        <InitFunc>gt_ConstructionStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="34378772">
        <ScriptCode>
            bool gt_ConstructionStop_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/215C7D83&quot;), false);
                UnitBehaviorRemove(gv_playerData[UnitGetOwner(EventUnitProgressUnit())].lv_kobold, &quot;Constructing&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ConstructionStop_Init () {
                gt_ConstructionStop = TriggerCreate(&quot;gt_ConstructionStop_Func&quot;);
                TriggerAddEventUnitConstructProgress(gt_ConstructionStop, null, c_unitProgressStageCancel);
                TriggerAddEventUnitConstructProgress(gt_ConstructionStop, null, c_unitProgressStagePause);
            }
        </ScriptCode>
        <InitFunc>gt_ConstructionStop_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="CC990BEC">
        <ScriptCode>
            bool gt_BuildingFinish_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_playerData[lv_i].lv_gameStats.lv_buildingsCreated += 1;
                if ((UnitGetType(EventUnitProgressUnit()) == &quot;Palisade&quot;)) {
                    gf_StaminaOnCraft(EventUnit());
                    gf_AddExperience(EventUnit(), 10.0);
                    if (gf_RewardCatIndexActive(lv_i, 3, 5)) {
                        UnitBehaviorAdd(EventUnitProgressUnit(), &quot;PalisadeCandle&quot;, EventUnitProgressUnit(), 1);
                    }
                    else {
                    }
                    gf_PalisadeMutability(EventUnitProgressUnit(), UnitGroupEmpty(), 1);
                }
                else if ((UnitGetType(EventUnitProgressUnit()) == &quot;AutomatedDefenseTurret&quot;)) {
                    gf_StaminaOnCraft(EventUnit());
                    gf_AddExperience(EventUnit(), 25.0);
                    UnitSetCustomValue(EventUnitProgressUnit(), 0, IntToFixed(lv_i));
                    UnitSetCustomValue(EventUnitProgressUnit(), 1, 5.0);
                    UnitSetCustomValue(EventUnitProgressUnit(), 2, IntToFixed(gv_aDTIndex[lv_i]));
                    UnitSetCustomValue(EventUnitProgressUnit(), 3, 5.0);
                    gf_ADTUpdateAmmo(EventUnitProgressUnit());
                    UnitBehaviorAdd(EventUnitProgressUnit(), &quot;FullAmmo&quot;, EventUnitProgressUnit(), 1);
                }
                else if ((UnitGetType(EventUnitProgressUnit()) == &quot;Fortress&quot;)) {
                    gf_StaminaOnCraft(EventUnit());
                    gf_AddExperience(EventUnit(), 500.0);
                    UnitBehaviorRemove(EventUnitProgressUnit(), &quot;WatchTowerConstruction&quot;, 1);
                    gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTower = EventUnitProgressUnit();
                    gv_teamData[gv_playerData[lv_i].lv_team].lv_aIWatchTowerBuilder = 0;
                    UnitSetCustomValue(EventUnitProgressUnit(), 1, 20.0);
                    UnitBehaviorAdd(EventUnitProgressUnit(), &quot;WatchTowerFullAmmo&quot;, EventUnitProgressUnit(), 1);
                    gf_WTUpdateTooltip(EventUnitProgressUnit());
                    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Fortress&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, 0, (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGroupLoopCurrent() != EventUnitProgressUnit())) {
                            UnitCreateEffectUnit(UnitGroupLoopCurrent(), &quot;KillWithDamage&quot;, UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    UnitGroupLoopEnd();
                    PlayerGroupLoopBegin(gv_teamData[gv_playerData[lv_i].lv_team].lv_members);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold)) {
                            UnitBehaviorRemove(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold, &quot;CanBuildWatchTower&quot;, 1);
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_i), c_messageAreaSubtitle, (TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal(&quot;Param/Value/FFA4F132&quot;)));
                    if ((gv_activeTeams == 2)) {
                        TextExpressionSetToken(&quot;Param/Expression/D2C5DE96&quot;, &quot;A&quot;, TextWithColor(gf_GetPlayerName(lv_i, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
                        TextExpressionSetToken(&quot;Param/Expression/D2C5DE96&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/49DCE854&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/D2C5DE96&quot;, &quot;C&quot;, gf_GetTribeTextOfPlayer(lv_i));
                        TextExpressionSetToken(&quot;Param/Expression/D2C5DE96&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/49D69BFF&quot;));
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupEnemy, lv_i), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/D2C5DE96&quot;));
                    }
                    else {
                        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupEnemy, lv_i), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5C52EEF7&quot;));
                    }
                    SoundPlay(SoundLink(&quot;WatchTowerWhat&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    TriggerExecute(gt_WatchTowerTimerStart, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuildingFinish_Init () {
                gt_BuildingFinish = TriggerCreate(&quot;gt_BuildingFinish_Func&quot;);
                TriggerAddEventUnitConstructProgress(gt_BuildingFinish, null, c_unitProgressStageComplete);
            }
        </ScriptCode>
        <InitFunc>gt_BuildingFinish_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="509A2302">
        <ScriptCode>
            bool gt_StructureDeath_Func (bool testConds, bool runActions) {
                string autoD68E5C8F_val;
                // Variable Declarations
                fixed lv_angle;
                unit lv_destroyer;
                unit lv_structure;
                string lv_type;
                fixed lv_xP;
                // Variable Initialization
                lv_destroyer = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_structure = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_type = UnitGetType(lv_structure);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(lv_structure, c_unitStateIgnoreTerrainZ, true);
                UnitSetState(lv_structure, c_unitStateTooltipable, false);
                UnitSetState(lv_structure, c_unitStateCursorable, false);
                UnitSetState(lv_structure, c_unitStateStatusBar, false);
                UnitSetState(lv_structure, c_unitStateRadarable, false);
                UnitSetHeight(lv_structure, WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)), 0.0);
                autoD68E5C8F_val = lv_type;
                if (autoD68E5C8F_val == &quot;Fortress&quot;) {
                    lv_xP = 1000.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 5.0), 10.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustMassive&quot;, UnitGetPosition(lv_structure));
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathSoundMassivePersistent&quot;, UnitGetPosition(lv_structure));
                    UnitCreateEffectPoint(lv_structure, &quot;WatchTowerDeathSound&quot;, UnitGetPosition(lv_structure));
                    gf_DropAllItems(lv_structure);
                    if ((UnitHasBehavior(lv_structure, &quot;WatchTowerConstruction&quot;) == false) &amp;&amp; (lv_structure == gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lv_structure))].lv_watchTower)) {
                        TextExpressionSetToken(&quot;Param/Expression/491757B4&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(gf_GetTeamOfPlayer(UnitGetOwner(lv_structure))));
                        TextExpressionSetToken(&quot;Param/Expression/491757B4&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/C4BFC4D1&quot;));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/491757B4&quot;));
                        SoundPlay(SoundLink(&quot;UI_TerranMissionFailed&quot;, 0), PlayerGroupAll(), 100.0, 0.0);
                        gf_WatchTowerDefeatTeam(gf_GetTeamOfPlayer(UnitGetOwner(lv_structure)));
                    }
                    else {
                    }
                }
                else if (autoD68E5C8F_val == &quot;LorenorStatue&quot;) {
                    lv_xP = 100.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.5), 3.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustLarge&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;HuntersLodge&quot;) {
                    lv_xP = 100.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.0), 3.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustLarge&quot;, UnitGetPosition(lv_structure));
                    UnitBehaviorRemove(lv_structure, &quot;AntlersStack&quot;, 100);
                    UnitBehaviorRemove(lv_structure, &quot;BoneTalismanStack&quot;, 100);
                    UnitBehaviorRemove(lv_structure, &quot;TrollNoseBoneStack&quot;, 100);
                    UnitBehaviorRemove(lv_structure, &quot;WhiteBearToothStack&quot;, 100);
                }
                else if (autoD68E5C8F_val == &quot;Tavern&quot;) {
                    lv_xP = 75.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 4.0), 3.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustLarge&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;Tent&quot;) {
                    lv_xP = 50.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 3.5), 3.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustLarge&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;StorageOutpost&quot;) {
                    lv_xP = 100.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 3.0), 3.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustLarge&quot;, UnitGetPosition(lv_structure));
                    UnitCreateEffectPoint(lv_structure, &quot;ShooBirds&quot;, UnitGetPosition(lv_structure));
                    gf_DropAllItems(lv_structure);
                }
                else if (autoD68E5C8F_val == &quot;Smithy&quot;) {
                    lv_xP = 50.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 1.25), 2.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustMedium&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;Farm&quot;) {
                    lv_xP = 50.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 1.8), 2.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustMedium&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;Trebuchet&quot;) {
                    lv_xP = 50.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.5), 2.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustMedium&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;AutomatedDefenseTurret&quot;) {
                    lv_xP = 50.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.5), 2.0);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustMedium&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;Workbench&quot;) {
                    lv_xP = 50.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 0.75), 1.5);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustSmall&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;Palisade&quot;) {
                    lv_xP = 25.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 1.5), 1.5);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustSmall&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;PalisadeGateClosed&quot;) {
                    lv_xP = 25.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.0), 1.5);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustSmall&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;PalisadeGateOpen&quot;) {
                    lv_xP = 25.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 2.0), 1.5);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustSmall&quot;, UnitGetPosition(lv_structure));
                }
                else if (autoD68E5C8F_val == &quot;Campfire&quot;) {
                    lv_xP = 25.0;
                    UnitSetHeight(lv_structure, (WorldHeight(c_heightMapGround, UnitGetPosition(lv_structure)) - 1.25), 1.5);
                    UnitCreateEffectPoint(lv_structure, &quot;StructureDeathDustSmall&quot;, UnitGetPosition(lv_structure));
                }
                else {
                }
                if ((UnitGetOwner(lv_destroyer) != UnitGetOwner(lv_structure))) {
                    gf_AddExperience(lv_destroyer, lv_xP);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StructureDeath_Init () {
                gt_StructureDeath = TriggerCreate(&quot;gt_StructureDeath_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, &quot;StructureDeathAnimationSmallApply&quot;);
                TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, &quot;StructureDeathAnimationMediumApply&quot;);
                TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, &quot;StructureDeathAnimationLargeApply&quot;);
                TriggerAddEventPlayerEffectUsed(gt_StructureDeath, c_playerAny, &quot;StructureDeathAnimationMassiveApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_StructureDeath_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="EC39468E">
        <ScriptCode>
            bool gt_KoboldBuildFacing_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(0.125, c_timeGame);
                UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster), AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))), 0.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KoboldBuildFacing_Init () {
                gt_KoboldBuildFacing = TriggerCreate(&quot;gt_KoboldBuildFacing_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_KoboldBuildFacing, c_playerAny, &quot;KoboldTestBuildFacing&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_KoboldBuildFacing_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8C7B9C62">
        <ScriptCode>
            bool gt_SpringSpikeTrap_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_trap;
                unit lv_target;
                int lv_charges;
                fixed lv_height;
                // Variable Initialization
                lv_trap = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_charges = UnitBehaviorCount(lv_trap, &quot;SpikeTrapCharges&quot;);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetInfoText(lv_trap, StringExternal(&quot;Param/Value/40A34C46&quot;), (gf_GetPlayerName(UnitGetOwner(lv_trap), 0) + gf_SpikeTrapSuffix(lv_charges)), StringExternal(&quot;Param/Value/BFA7AACE&quot;));
                gv_playerData[UnitGetOwner(lv_trap)].lv_gameStats.lv_trapsTriggered += 1;
                gf_AddExperience(lv_trap, 2.0);
                if ((UnitFilterMatch(lv_target, UnitGetOwner(lv_target), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, 0, 0)) == true)) {
                    gf_Upyougo(lv_target, 0.45);
                }
                else {
                    gf_Upyougo(lv_target, 0.65);
                }
                lv_height = 1.5;
                libNtve_gf_SendActorMessageToUnit(lv_trap, libNtve_gf_SetHeight(lv_height));
                if ((gv_skillArtisanship[UnitGetOwner(lv_trap)] &gt;= 20)) {
                    UnitBehaviorAdd(lv_target, &quot;ArmorShredSpikeTrap&quot;, lv_trap, 1);
                    UnitBehaviorAdd(lv_target, &quot;SlowSpikeTrap&quot;, lv_trap, 1);
                }
                else {
                }
                Wait(1.0, c_timeGame);
                while ((lv_height &gt; 0.0)) {
                    lv_height -= 0.1;
                    libNtve_gf_SendActorMessageToUnit(lv_trap, libNtve_gf_SetHeight(lv_height));
                    Wait(0.0625, c_timeGame);
                }
                libNtve_gf_SendActorMessageToUnit(lv_trap, libNtve_gf_SetHeight(0.0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpringSpikeTrap_Init () {
                gt_SpringSpikeTrap = TriggerCreate(&quot;gt_SpringSpikeTrap_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_SpringSpikeTrap, c_playerAny, &quot;SpikeTrapDamage&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SpringSpikeTrap_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="217EA2D3">
        <ScriptCode>
            bool gt_SpikeTrapDepleted_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0, 0.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpikeTrapDepleted_Init () {
                gt_SpikeTrapDepleted = TriggerCreate(&quot;gt_SpikeTrapDepleted_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_SpikeTrapDepleted, c_playerAny, &quot;SpikeTrapApplyDull&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SpikeTrapDepleted_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D3F1572C">
        <ScriptCode>
            bool gt_SharpenSpike_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1)) {
                        if ((UnitBehaviorCount(EventUnit(), &quot;SpikeTrapCharges&quot;) &lt; 3)) {
                            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_stone, 1));
                            gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
                            UnitCreateEffectUnit(EventUnit(), &quot;SpikeTrapSharpen&quot;, EventUnit());
                            UnitSetCustomValue(EventUnit(), 0, 1.0);
                            TextExpressionSetToken(&quot;Param/Expression/9EABA2C5&quot;, &quot;A&quot;, gf_GetPlayerName(UnitGetOwner(EventUnit()), 0));
                            TextExpressionSetToken(&quot;Param/Expression/9EABA2C5&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/ADA8273D&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/9EABA2C5&quot;, &quot;C&quot;, IntToText(3));
                            TextExpressionSetToken(&quot;Param/Expression/9EABA2C5&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/3E48DF61&quot;));
                            UnitSetInfoText(EventUnit(), StringExternal(&quot;Param/Value/3D83489C&quot;), TextExpressionAssemble(&quot;Param/Expression/9EABA2C5&quot;), StringExternal(&quot;Param/Value/1E370A55&quot;));
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SharpenSpike_Init () {
                gt_SharpenSpike = TriggerCreate(&quot;gt_SharpenSpike_Func&quot;);
                TriggerAddEventUnitAbility(gt_SharpenSpike, null, AbilityCommand(&quot;Sharpen&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SharpenSpike_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="919B07D4">
        <ScriptCode>
            bool gt_SpikeTrapPadding_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wool, c_unitCountAlive) &gt;= 1)) {
                        gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_wool, 1));
                        gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
                        UnitAbilityEnable(EventUnit(), &quot;WoolPadding&quot;, false);
                        UnitBehaviorAdd(EventUnit(), &quot;WoolPadding&quot;, EventUnit(), 1);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpikeTrapPadding_Init () {
                gt_SpikeTrapPadding = TriggerCreate(&quot;gt_SpikeTrapPadding_Func&quot;);
                TriggerAddEventUnitAbility(gt_SpikeTrapPadding, null, AbilityCommand(&quot;WoolPadding&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SpikeTrapPadding_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7DFE28F0">
        <ScriptCode>
            bool gt_LightCampfire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                        gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lumber, 1));
                        gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
                        UnitCreateEffectUnit(EventUnit(), &quot;LightCampfireSet&quot;, EventUnit());
                        SoundPlayOnUnit(SoundLink(&quot;CampfireRefresh&quot;, -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LightCampfire_Init () {
                gt_LightCampfire = TriggerCreate(&quot;gt_LightCampfire_Func&quot;);
                TriggerAddEventUnitAbility(gt_LightCampfire, null, AbilityCommand(&quot;LightCampfire&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LightCampfire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F5D03088">
        <ScriptCode>
            bool gt_LightCampfireSelect_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitClearSelection(lv_i);
                UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_i, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LightCampfireSelect_Init () {
                gt_LightCampfireSelect = TriggerCreate(&quot;gt_LightCampfireSelect_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_LightCampfireSelect, c_playerAny, &quot;LightCampfireSelect&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_LightCampfireSelect_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A180C6C6">
        <ScriptCode>
            bool gt_UnitSelected_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) != EventPlayer()))) {
                        return false;
                    }
                    if (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius))) {
                        return false;
                    }
                    if (!((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, EventPlayer(), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), gv_interactRadius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(EventUnit()) == &quot;Campfire&quot;)) {
                    UnitSetOwner(EventUnit(), EventPlayer(), false);
                    UnitSetInfoText(EventUnit(), StringExternal(&quot;Param/Value/4F7FBFD1&quot;), gf_GetPlayerName(EventPlayer(), 0), StringExternal(&quot;Param/Value/90B989A5&quot;));
                    gf_Quicktag(EventUnit(), StringExternal(&quot;Param/Value/5703B049&quot;), 2.0, 24);
                }
                else if ((UnitGetType(EventUnit()) == &quot;LorenorStatue&quot;) &amp;&amp; (UnitGetOwner(EventUnit()) == 0)) {
                    UnitSetOwner(EventUnit(), EventPlayer(), false);
                    UnitSetInfoText(EventUnit(), StringExternal(&quot;Param/Value/C0C94206&quot;), gf_GetPlayerName(EventPlayer(), 0), StringExternal(&quot;Param/Value/FCE89BBD&quot;));
                    gf_Quicktag(EventUnit(), StringExternal(&quot;Param/Value/FC7A1BA9&quot;), 3.0, 24);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UnitSelected_Init () {
                gt_UnitSelected = TriggerCreate(&quot;gt_UnitSelected_Func&quot;);
                TriggerAddEventUnitSelected(gt_UnitSelected, null, c_playerAny, true);
            }
        </ScriptCode>
        <InitFunc>gt_UnitSelected_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="45FA0602">
        <ScriptCode>
            bool gt_RefreshCampfire_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RefreshCampfire(EventUnit(), EventPlayer(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RefreshCampfire_Init () {
                gt_RefreshCampfire = TriggerCreate(&quot;gt_RefreshCampfire_Func&quot;);
                TriggerAddEventUnitAbility(gt_RefreshCampfire, null, AbilityCommand(&quot;RefreshCampfire&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_RefreshCampfire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="25ECC777">
        <ScriptCode>
            bool gt_RefreshCampfireExpert_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RefreshCampfire(EventUnit(), EventPlayer(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RefreshCampfireExpert_Init () {
                gt_RefreshCampfireExpert = TriggerCreate(&quot;gt_RefreshCampfireExpert_Func&quot;);
                TriggerAddEventUnitAbility(gt_RefreshCampfireExpert, null, AbilityCommand(&quot;RefreshCampfireExpert&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_RefreshCampfireExpert_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="CE82F216">
        <ScriptCode>
            bool gt_ADTLaunch_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_turret;
                // Variable Initialization
                lv_turret = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(lv_turret, 1, (UnitGetCustomValue(lv_turret, 1) - 1.0));
                UnitBehaviorRemove(lv_turret, &quot;FullAmmo&quot;, 1);
                gf_ADTUpdateAmmo(lv_turret);
                if ((UnitGetCustomValue(lv_turret, 1) == 0.0)) {
                    gf_Alltag(null, StringExternal(&quot;Param/Value/464A45DA&quot;), 2.0, 28);
                    UnitBehaviorAdd(lv_turret, &quot;TurretOutOfAmmo&quot;, lv_turret, 1);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ADTLaunch_Init () {
                gt_ADTLaunch = TriggerCreate(&quot;gt_ADTLaunch_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ADTLaunch, c_playerAny, &quot;AutomatedDefenseTurretLM&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ADTLaunch_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3CB3EA60">
        <ScriptCode>
            bool gt_ADTRefil_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_refillamount;
                fixed lv_maxammo;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_maxammo = UnitGetCustomValue(EventUnit(), 3);
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                        gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_ironOre, 1));
                        lv_refillamount = libNtve_gf_ArithmeticRealClamp((lv_maxammo - UnitGetCustomValue(EventUnit(), 1)), 0.0, 5.0);
                        UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + lv_refillamount));
                        UnitBehaviorRemove(EventUnit(), &quot;TurretOutOfAmmo&quot;, 1);
                        TextExpressionSetToken(&quot;Param/Expression/1949A52A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/A7A0ADB8&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/1949A52A&quot;, &quot;B&quot;, FixedToText(lv_refillamount, 0));
                        TextExpressionSetToken(&quot;Param/Expression/1949A52A&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/30E5DF7D&quot;));
                        gf_Advancedtag(EventUnit(), lv_i, TextExpressionAssemble(&quot;Param/Expression/1949A52A&quot;), 3.0, 28);
                        SoundPlayOnUnit(SoundLink(&quot;CraftingStart&quot;, -1), PlayerGroupSingle(lv_i), EventUnit(), 0.0, 100.0, 0.0);
                        if ((UnitGetCustomValue(EventUnit(), 1) == lv_maxammo)) {
                            UnitBehaviorAdd(EventUnit(), &quot;FullAmmo&quot;, EventUnit(), 1);
                        }
                        else {
                        }
                        gf_ADTUpdateAmmo(EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ADTRefil_Init () {
                gt_ADTRefil = TriggerCreate(&quot;gt_ADTRefil_Func&quot;);
                TriggerAddEventUnitAbility(gt_ADTRefil, null, AbilityCommand(&quot;RefillAmmunition&quot;, 0), c_unitAbilStageExecute, false);
            }
        </ScriptCode>
        <InitFunc>gt_ADTRefil_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="738F8899">
        <ScriptCode>
            bool gt_PalisadeGateCreate_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_c;
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lumber, c_unitCountAlive) &gt;= 1)) {
                        gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lumber, 1));
                        libNtve_gf_ReplaceUnit(EventUnit(), &quot;PalisadeGateOpen&quot;, 1);
                        if ((DistanceBetweenPoints(UnitGetPosition(gv_playerData[lv_i].lv_kobold), UnitGetPosition(EventUnit())) &gt; DistanceBetweenPoints(UnitGetPosition(gv_playerData[lv_i].lv_kobold), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.25, UnitGetFacing(EventUnit()))))) {
                            UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, 1.0);
                        }
                        else {
                            UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, 0.0);
                        }
                        SoundPlayOnUnit(SoundLink(&quot;CraftingStart&quot;, -1), PlayerGroupSingle(lv_i), libNtve_gf_LastReplacedUnit(), 0.0, 100.0, 0.0);
                        gf_AddExperience(libNtve_gf_LastReplacedUnit(), 20.0);
                        gf_PalisadeMutability(libNtve_gf_LastReplacedUnit(), UnitGroupEmpty(), 1);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PalisadeGateCreate_Init () {
                gt_PalisadeGateCreate = TriggerCreate(&quot;gt_PalisadeGateCreate_Func&quot;);
                TriggerAddEventUnitAbility(gt_PalisadeGateCreate, null, AbilityCommand(&quot;CreatePalisadeGate&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_PalisadeGateCreate_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="75A45589">
        <Item Type="CustomScript" Id="61F6AA3A"/>
        <Item Type="CustomScript" Id="CBDD48B7"/>
        <Item Type="CustomScript" Id="1156E149"/>
        <Item Type="CustomScript" Id="0968D274"/>
        <Item Type="CustomScript" Id="46C8CD2F"/>
        <Item Type="CustomScript" Id="D03060F9"/>
        <Item Type="CustomScript" Id="4C74A9A5"/>
        <Item Type="CustomScript" Id="EA7ADD63"/>
        <Item Type="CustomScript" Id="3B782E88"/>
        <Item Type="CustomScript" Id="5B2CA9AA"/>
        <Item Type="CustomScript" Id="D8E15144"/>
        <Item Type="CustomScript" Id="6CE95B92"/>
        <Item Type="CustomScript" Id="56D1968D"/>
        <Item Type="CustomScript" Id="C4DE76AA"/>
        <Item Type="CustomScript" Id="4F7C5FE3"/>
        <Item Type="CustomScript" Id="0F792012"/>
        <Item Type="CustomScript" Id="3DD58C83"/>
        <Item Type="CustomScript" Id="072EBC16"/>
        <Item Type="CustomScript" Id="80C6F59C"/>
        <Item Type="CustomScript" Id="77BC652A"/>
        <Item Type="CustomScript" Id="E54BD544"/>
        <Item Type="CustomScript" Id="552E2D1B"/>
    </Element>
    <Element Type="CustomScript" Id="61F6AA3A">
        <ScriptCode>
            bool gt_FastFood_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_food;
                unit lv_thisbeeating;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_food = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(EventUnit(), &quot;KoboldCanEat&quot;) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_food = UnitInventoryGroup(EventUnit());
                if ((UnitGroupCount(UnitGroupFilter(&quot;WaterScorpion&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;WaterScorpion&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;SmokedLambSirloin&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;SmokedLambSirloin&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_beerPhez, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_beerPhez, 1);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;RoastedPheasantWithBerrySauce&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;RoastedPheasantWithBerrySauce&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;AlbinoCavefish&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;AlbinoCavefish&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;StagStew&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;StagStew&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_lambFeast, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_lambFeast, 1);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;SlipperyEel&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;SlipperyEel&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfEntrecote, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_wolfEntrecote, 1);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;GiantSunfish&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;GiantSunfish&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;HighlandGuppy&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;HighlandGuppy&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_roastedLamb, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_roastedLamb, 1);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;RawStagMeat&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;RawStagMeat&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;ForestTrout&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;ForestTrout&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_wolfSteak, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_wolfSteak, 1);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;FireAmmonite&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;FireAmmonite&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;JewelDanio&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;JewelDanio&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;BlindRainfish&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;BlindRainfish&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_beer, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_beer, 1);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, 1);
                }
                else if ((UnitGroupCount(UnitGroupFilter(&quot;StripedLurker&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupRandomUnit(UnitGroupFilter(&quot;StripedLurker&quot;, c_playerAny, lv_food, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawPheasant, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_rawPheasant, 1);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawWolf, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_rawWolf, 1);
                }
                else if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_rawLamb, c_unitCountAlive) &gt; 0)) {
                    lv_thisbeeating = UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_rawLamb, 1);
                }
                if ((lv_thisbeeating == null)) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal(&quot;Param/Value/9DAE2012&quot;));
                }
                else {
                    gf_EatFood(EventUnit(), lv_thisbeeating, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FastFood_Init () {
                gt_FastFood = TriggerCreate(&quot;gt_FastFood_Func&quot;);
                TriggerAddEventUnitAbility(gt_FastFood, null, AbilityCommand(&quot;Eatasnack&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_FastFood_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="CBDD48B7">
        <ScriptCode>
            bool gt_RoastedLamb_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawLamb, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 1)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;RoastedLamb&quot;, 5.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RoastedLamb_Init () {
                gt_RoastedLamb = TriggerCreate(&quot;gt_RoastedLamb_Func&quot;);
                TriggerAddEventUnitAbility(gt_RoastedLamb, null, AbilityCommand(&quot;CookingRoastedLamb&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_RoastedLamb_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1156E149">
        <ScriptCode>
            bool gt_SpicedLambFeast_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawLamb, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;SpicedLambFeast&quot;, 10.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpicedLambFeast_Init () {
                gt_SpicedLambFeast = TriggerCreate(&quot;gt_SpicedLambFeast_Func&quot;);
                TriggerAddEventUnitAbility(gt_SpicedLambFeast, null, AbilityCommand(&quot;CookingSpicedLambFeast&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SpicedLambFeast_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0968D274">
        <ScriptCode>
            bool gt_SmokedLambSirloin_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawLamb, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;SmokedLambSirloin&quot;, 25.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmokedLambSirloin_Init () {
                gt_SmokedLambSirloin = TriggerCreate(&quot;gt_SmokedLambSirloin_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmokedLambSirloin, null, AbilityCommand(&quot;CookingSmokedLambSirloin&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmokedLambSirloin_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="46C8CD2F">
        <ScriptCode>
            bool gt_RoastedPheasant_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawPheasant, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_handfulofBerries, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;RoastedPheasantWithBerrySauce&quot;, 8.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RoastedPheasant_Init () {
                gt_RoastedPheasant = TriggerCreate(&quot;gt_RoastedPheasant_Func&quot;);
                TriggerAddEventUnitAbility(gt_RoastedPheasant, null, AbilityCommand(&quot;CookingRoastedPheasantWithBlueberrySauce&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_RoastedPheasant_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D03060F9">
        <ScriptCode>
            bool gt_BeerBraisedPheasant_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawPheasant, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_beer, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;BeerBraisedPheasant&quot;, 18.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BeerBraisedPheasant_Init () {
                gt_BeerBraisedPheasant = TriggerCreate(&quot;gt_BeerBraisedPheasant_Func&quot;);
                TriggerAddEventUnitAbility(gt_BeerBraisedPheasant, null, AbilityCommand(&quot;CookingBeerBraisedPheasant&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BeerBraisedPheasant_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4C74A9A5">
        <ScriptCode>
            bool gt_WolfSteak_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawWolf, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 1)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;WolfSteak&quot;, 6.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WolfSteak_Init () {
                gt_WolfSteak = TriggerCreate(&quot;gt_WolfSteak_Func&quot;);
                TriggerAddEventUnitAbility(gt_WolfSteak, null, AbilityCommand(&quot;CookingWolfSteak&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WolfSteak_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="EA7ADD63">
        <ScriptCode>
            bool gt_GrilledWolfEntrecote_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawWolf, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;GrilledWolfEntrecote&quot;, 12.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GrilledWolfEntrecote_Init () {
                gt_GrilledWolfEntrecote = TriggerCreate(&quot;gt_GrilledWolfEntrecote_Func&quot;);
                TriggerAddEventUnitAbility(gt_GrilledWolfEntrecote, null, AbilityCommand(&quot;CookingGrilledWolfEntrecote&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_GrilledWolfEntrecote_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3B782E88">
        <ScriptCode>
            bool gt_StagStew_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawStag, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_handfulofBerries, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;StagStew&quot;, 30.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StagStew_Init () {
                gt_StagStew = TriggerCreate(&quot;gt_StagStew_Func&quot;);
                TriggerAddEventUnitAbility(gt_StagStew, null, AbilityCommand(&quot;CookingStagStew&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_StagStew_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5B2CA9AA">
        <ScriptCode>
            bool gt_CleansingDraught_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                lv_bank = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gf_GetCookingNode(EventUnit())) &amp;&amp; (gf_UnitIsBusy(EventUnit()) == false)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sageberries, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                        UnitGroupLoopBegin(lv_bank);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_DropandRemove(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        gf_Cooking(EventUnit(), &quot;CleansingDraught&quot;, 10.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughIngredients);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CleansingDraught_Init () {
                gt_CleansingDraught = TriggerCreate(&quot;gt_CleansingDraught_Func&quot;);
                TriggerAddEventUnitAbility(gt_CleansingDraught, null, AbilityCommand(&quot;CookingCleansingDraught&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_CleansingDraught_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D8E15144">
        <ScriptCode>
            bool gt_WellFedEnduranceInit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 5.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WellFedEnduranceInit_Init () {
                gt_WellFedEnduranceInit = TriggerCreate(&quot;gt_WellFedEnduranceInit_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WellFedEnduranceInit, c_playerAny, &quot;WellFedEnduranceInitial&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WellFedEnduranceInit_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6CE95B92">
        <ScriptCode>
            bool gt_WellFedEnduranceExp_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 5.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WellFedEnduranceExp_Init () {
                gt_WellFedEnduranceExp = TriggerCreate(&quot;gt_WellFedEnduranceExp_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WellFedEnduranceExp, c_playerAny, &quot;WellFedEnduranceExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WellFedEnduranceExp_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="56D1968D">
        <ScriptCode>
            bool gt_WellFedStrengthInit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 5.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WellFedStrengthInit_Init () {
                gt_WellFedStrengthInit = TriggerCreate(&quot;gt_WellFedStrengthInit_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WellFedStrengthInit, c_playerAny, &quot;WellFedStrengthInitial&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WellFedStrengthInit_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C4DE76AA">
        <ScriptCode>
            bool gt_WellFedStrengthExp_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 5.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WellFedStrengthExp_Init () {
                gt_WellFedStrengthExp = TriggerCreate(&quot;gt_WellFedStrengthExp_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WellFedStrengthExp, c_playerAny, &quot;WellFedStrengthExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WellFedStrengthExp_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4F7C5FE3">
        <ScriptCode>
            bool gt_WellFedDexInit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 5.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WellFedDexInit_Init () {
                gt_WellFedDexInit = TriggerCreate(&quot;gt_WellFedDexInit_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WellFedDexInit, c_playerAny, &quot;WellFedDexInitial&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WellFedDexInit_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0F792012">
        <ScriptCode>
            bool gt_WellFedDexExp_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 5.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WellFedDexExp_Init () {
                gt_WellFedDexExp = TriggerCreate(&quot;gt_WellFedDexExp_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WellFedDexExp, c_playerAny, &quot;WellFedDexExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WellFedDexExp_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3DD58C83">
        <ScriptCode>
            bool gt_WellFedBeerInit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 2.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WellFedBeerInit_Init () {
                gt_WellFedBeerInit = TriggerCreate(&quot;gt_WellFedBeerInit_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WellFedBeerInit, c_playerAny, &quot;WellFedBeerInitial&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WellFedBeerInit_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="072EBC16">
        <ScriptCode>
            bool gt_WellFedBeerExp_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 2.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WellFedBeerExp_Init () {
                gt_WellFedBeerExp = TriggerCreate(&quot;gt_WellFedBeerExp_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WellFedBeerExp, c_playerAny, &quot;WellFedBeerExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WellFedBeerExp_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="80C6F59C">
        <ScriptCode>
            bool gt_UnlivingStrengthInit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 10.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UnlivingStrengthInit_Init () {
                gt_UnlivingStrengthInit = TriggerCreate(&quot;gt_UnlivingStrengthInit_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_UnlivingStrengthInit, c_playerAny, &quot;UnlivingStrengthInitial&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_UnlivingStrengthInit_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="77BC652A">
        <ScriptCode>
            bool gt_UnlivingStrengthExp_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 10.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UnlivingStrengthExp_Init () {
                gt_UnlivingStrengthExp = TriggerCreate(&quot;gt_UnlivingStrengthExp_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_UnlivingStrengthExp, c_playerAny, &quot;UnlivingStrengthExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_UnlivingStrengthExp_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E54BD544">
        <ScriptCode>
            bool gt_HappyChefInit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 5.0), 0));
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp + 25.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                gf_UpdateCooking(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HappyChefInit_Init () {
                gt_HappyChefInit = TriggerCreate(&quot;gt_HappyChefInit_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_HappyChefInit, c_playerAny, &quot;CookingExpertiseIIIInitial&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_HappyChefInit_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="552E2D1B">
        <ScriptCode>
            bool gt_HappyChefExp_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_temp;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 5.0), 0));
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;AttributeBonus[Biological]&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), FixedToString((lv_temp - 25.0), 0));
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                gf_UpdateCooking(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HappyChefExp_Init () {
                gt_HappyChefExp = TriggerCreate(&quot;gt_HappyChefExp_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_HappyChefExp, c_playerAny, &quot;CookingExpertiseIIIFinal&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_HappyChefExp_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="7FEF4937">
        <Item Type="CustomScript" Id="4A09CAD4"/>
        <Item Type="CustomScript" Id="42A9C851"/>
        <Item Type="CustomScript" Id="7B18186D"/>
        <Item Type="CustomScript" Id="ADBB4819"/>
        <Item Type="CustomScript" Id="4C0063C3"/>
        <Item Type="CustomScript" Id="177EB729"/>
        <Item Type="CustomScript" Id="FF7948D3"/>
        <Item Type="CustomScript" Id="387F8A7A"/>
        <Item Type="CustomScript" Id="BF5AB24F"/>
        <Item Type="CustomScript" Id="A30351F2"/>
        <Item Type="CustomScript" Id="9134EA09"/>
        <Item Type="CustomScript" Id="3CA8E2E6"/>
        <Item Type="CustomScript" Id="60A30CC4"/>
        <Item Type="CustomScript" Id="C389EC3A"/>
        <Item Type="CustomScript" Id="03461D6C"/>
        <Item Type="CustomScript" Id="9FBC124A"/>
        <Item Type="CustomScript" Id="0887B7C0"/>
        <Item Type="CustomScript" Id="0BD926CF"/>
        <Item Type="CustomScript" Id="8F51980B"/>
        <Item Type="CustomScript" Id="0AF84859"/>
        <Item Type="CustomScript" Id="91D3BBD3"/>
    </Element>
    <Element Type="CustomScript" Id="4A09CAD4">
        <ScriptCode>
            bool gt_WorkbenchWarmWoolTunic_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;WarmWoolTunic&quot;, 12.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchWarmWoolTunic_Init () {
                gt_WorkbenchWarmWoolTunic = TriggerCreate(&quot;gt_WorkbenchWarmWoolTunic_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchWarmWoolTunic, null, AbilityCommand(&quot;CraftWarmWoolTunic&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchWarmWoolTunic_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="42A9C851">
        <ScriptCode>
            bool gt_WorkbenchLeatherCoat_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 5)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;LeatherCoat&quot;, 24.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchLeatherCoat_Init () {
                gt_WorkbenchLeatherCoat = TriggerCreate(&quot;gt_WorkbenchLeatherCoat_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchLeatherCoat, null, AbilityCommand(&quot;CraftLeatherCoat&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchLeatherCoat_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7B18186D">
        <ScriptCode>
            bool gt_WorkbenchSturdyWoodenStick_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                if ((gv_tutorial == true)) {
                                    gf_ShowTutorialText(37);
                                }
                                else {
                                }
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;SturdyWoodenStick&quot;, 18.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchSturdyWoodenStick_Init () {
                gt_WorkbenchSturdyWoodenStick = TriggerCreate(&quot;gt_WorkbenchSturdyWoodenStick_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchSturdyWoodenStick, null, AbilityCommand(&quot;CraftSturdyWoodenStick&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchSturdyWoodenStick_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="ADBB4819">
        <ScriptCode>
            bool gt_WorkbenchMysticsTribalShield_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 5)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_spicyHerbs, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;MysticsTribalShield&quot;, 25.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchMysticsTribalShield_Init () {
                gt_WorkbenchMysticsTribalShield = TriggerCreate(&quot;gt_WorkbenchMysticsTribalShield_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchMysticsTribalShield, null, AbilityCommand(&quot;CraftMysticsTribalShield&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchMysticsTribalShield_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4C0063C3">
        <ScriptCode>
            bool gt_WorkbenchLantern_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;Lantern&quot;, 20.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchLantern_Init () {
                gt_WorkbenchLantern = TriggerCreate(&quot;gt_WorkbenchLantern_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchLantern, null, AbilityCommand(&quot;CraftLantern&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchLantern_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="177EB729">
        <ScriptCode>
            bool gt_WorkbenchBlunderbuss_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 5)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;RoughBlunderbuss&quot;, 24.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchBlunderbuss_Init () {
                gt_WorkbenchBlunderbuss = TriggerCreate(&quot;gt_WorkbenchBlunderbuss_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchBlunderbuss, null, AbilityCommand(&quot;CraftRoughBlunderbuss&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchBlunderbuss_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="FF7948D3">
        <ScriptCode>
            bool gt_WorkbenchVengefulMurlocSkull_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkulls, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;VengefulMurlocSkull&quot;, 18.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchVengefulMurlocSkull_Init () {
                gt_WorkbenchVengefulMurlocSkull = TriggerCreate(&quot;gt_WorkbenchVengefulMurlocSkull_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchVengefulMurlocSkull, null, AbilityCommand(&quot;CraftVengefulMurlocSkull&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchVengefulMurlocSkull_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="387F8A7A">
        <ScriptCode>
            bool gt_WorkbenchElderWand_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;ElderWand&quot;, 38.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchElderWand_Init () {
                gt_WorkbenchElderWand = TriggerCreate(&quot;gt_WorkbenchElderWand_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchElderWand, null, AbilityCommand(&quot;CraftElderWand&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchElderWand_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BF5AB24F">
        <ScriptCode>
            bool gt_WorkbenchEnigmaticStaff_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 10)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;EnigmaticStaff&quot;, 32.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchEnigmaticStaff_Init () {
                gt_WorkbenchEnigmaticStaff = TriggerCreate(&quot;gt_WorkbenchEnigmaticStaff_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchEnigmaticStaff, null, AbilityCommand(&quot;CraftEnigmaticStaff&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchEnigmaticStaff_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A30351F2">
        <ScriptCode>
            bool gt_WorkbenchHuntsmansJacket_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 5)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;HuntsmansJacket&quot;, 24.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchHuntsmansJacket_Init () {
                gt_WorkbenchHuntsmansJacket = TriggerCreate(&quot;gt_WorkbenchHuntsmansJacket_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchHuntsmansJacket, null, AbilityCommand(&quot;CraftHuntsmansJacket&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchHuntsmansJacket_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9134EA09">
        <ScriptCode>
            bool gt_WorkbenchVenomousArbalest_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 25)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 7)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;VenomousArbalest&quot;, 60.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchVenomousArbalest_Init () {
                gt_WorkbenchVenomousArbalest = TriggerCreate(&quot;gt_WorkbenchVenomousArbalest_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchVenomousArbalest, null, AbilityCommand(&quot;CraftVenomousArbalest&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchVenomousArbalest_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3CA8E2E6">
        <ScriptCode>
            bool gt_WorkbenchBearShamansShroud_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sageberries, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;BearShamansShroud&quot;, 45.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchBearShamansShroud_Init () {
                gt_WorkbenchBearShamansShroud = TriggerCreate(&quot;gt_WorkbenchBearShamansShroud_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchBearShamansShroud, null, AbilityCommand(&quot;CraftBearShamansShroud&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchBearShamansShroud_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="60A30CC4">
        <ScriptCode>
            bool gt_WorkbenchLightLeatherShield_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;LightLeatherShield&quot;, 13.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchLightLeatherShield_Init () {
                gt_WorkbenchLightLeatherShield = TriggerCreate(&quot;gt_WorkbenchLightLeatherShield_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchLightLeatherShield, null, AbilityCommand(&quot;CraftLightLeatherShield&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchLightLeatherShield_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C389EC3A">
        <ScriptCode>
            bool gt_WorkbenchCelestialOrb_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 5)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;CelestialOrb&quot;, 25.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchCelestialOrb_Init () {
                gt_WorkbenchCelestialOrb = TriggerCreate(&quot;gt_WorkbenchCelestialOrb_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchCelestialOrb, null, AbilityCommand(&quot;CraftCelestialOrb&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchCelestialOrb_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="03461D6C">
        <ScriptCode>
            bool gt_WorkbenchWarlocksVestments_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 10)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawLamb, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_rawStag, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sageberries, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 8)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;WarlocksVestments&quot;, 35.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchWarlocksVestments_Init () {
                gt_WorkbenchWarlocksVestments = TriggerCreate(&quot;gt_WorkbenchWarlocksVestments_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchWarlocksVestments, null, AbilityCommand(&quot;CraftWarlocksVestments&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchWarlocksVestments_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9FBC124A">
        <ScriptCode>
            bool gt_WorkbenchHighRangersChainmail_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 20)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_huntsmansJackets, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;MasterRangersMaille&quot;, 50.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchHighRangersChainmail_Init () {
                gt_WorkbenchHighRangersChainmail = TriggerCreate(&quot;gt_WorkbenchHighRangersChainmail_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchHighRangersChainmail, null, AbilityCommand(&quot;CraftMasterRangersMaille&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchHighRangersChainmail_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0887B7C0">
        <ScriptCode>
            bool gt_WorkbenchGravesingersClaw_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 20)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;GravesingersClaw&quot;, 44.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchGravesingersClaw_Init () {
                gt_WorkbenchGravesingersClaw = TriggerCreate(&quot;gt_WorkbenchGravesingersClaw_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchGravesingersClaw, null, AbilityCommand(&quot;CraftGravesingersClaw&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchGravesingersClaw_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0BD926CF">
        <ScriptCode>
            bool gt_WorkbenchRepeatingCrossbow_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 20)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_antlers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 6)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;RepeatingCrossbow&quot;, 40.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchRepeatingCrossbow_Init () {
                gt_WorkbenchRepeatingCrossbow = TriggerCreate(&quot;gt_WorkbenchRepeatingCrossbow_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchRepeatingCrossbow, null, AbilityCommand(&quot;CraftRepeatingCrossbow&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchRepeatingCrossbow_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8F51980B">
        <ScriptCode>
            bool gt_WorkbenchStormwizardsRobes_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 25)) {
                            if (((gv_raining || gv_winter) == true)) {
                                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                                UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3));
                                if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                                    UnitGroupLoopBegin(lv_bank);
                                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                        gf_DropandRemove(UnitGroupLoopCurrent());
                                    }
                                    UnitGroupLoopEnd();
                                    gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;StormwizardsRobes&quot;, 57.0);
                                }
                                else {
                                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                                }
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_rainOrWinter);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchStormwizardsRobes_Init () {
                gt_WorkbenchStormwizardsRobes = TriggerCreate(&quot;gt_WorkbenchStormwizardsRobes_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchStormwizardsRobes, null, AbilityCommand(&quot;CraftStormwizardsRobes&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchStormwizardsRobes_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0AF84859">
        <ScriptCode>
            bool gt_WorkbenchTrebuchet_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;TrebuchetPacked&quot;, 20.0);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchTrebuchet_Init () {
                gt_WorkbenchTrebuchet = TriggerCreate(&quot;gt_WorkbenchTrebuchet_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchTrebuchet, null, AbilityCommand(&quot;CraftTrebuchet&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchTrebuchet_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="91D3BBD3">
        <ScriptCode>
            bool gt_WorkbenchIronbarkArmor_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;IronbarkArmor&quot;, 45.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WorkbenchIronbarkArmor_Init () {
                gt_WorkbenchIronbarkArmor = TriggerCreate(&quot;gt_WorkbenchIronbarkArmor_Func&quot;);
                TriggerAddEventUnitAbility(gt_WorkbenchIronbarkArmor, null, AbilityCommand(&quot;CraftIronbarkArmor&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WorkbenchIronbarkArmor_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="ABCC6245">
        <Item Type="CustomScript" Id="C1EE3C24"/>
        <Item Type="CustomScript" Id="352EF1E4"/>
        <Item Type="CustomScript" Id="23971CD9"/>
        <Item Type="CustomScript" Id="C5559A4E"/>
        <Item Type="CustomScript" Id="40BD737D"/>
        <Item Type="CustomScript" Id="B983064C"/>
        <Item Type="CustomScript" Id="E0AA9ADC"/>
        <Item Type="CustomScript" Id="E572EBB4"/>
        <Item Type="CustomScript" Id="3853F115"/>
        <Item Type="CustomScript" Id="8C30AE6F"/>
        <Item Type="CustomScript" Id="E213F0DC"/>
        <Item Type="CustomScript" Id="A2E5356D"/>
        <Item Type="CustomScript" Id="368203D9"/>
        <Item Type="CustomScript" Id="4EECECBE"/>
        <Item Type="CustomScript" Id="447D7834"/>
        <Item Type="CustomScript" Id="C08B9B85"/>
        <Item Type="CustomScript" Id="5442DB38"/>
    </Element>
    <Element Type="CustomScript" Id="C1EE3C24">
        <ScriptCode>
            bool gt_SmithyHeavyIronBreastplate_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;HeavyIronBreastplate&quot;, 30.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyHeavyIronBreastplate_Init () {
                gt_SmithyHeavyIronBreastplate = TriggerCreate(&quot;gt_SmithyHeavyIronBreastplate_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyHeavyIronBreastplate, null, AbilityCommand(&quot;ForgeHeavyIronBreastplate&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyHeavyIronBreastplate_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="352EF1E4">
        <ScriptCode>
            bool gt_SmithySharpIronPickaxe_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;SharpIronPickaxe&quot;, 26.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithySharpIronPickaxe_Init () {
                gt_SmithySharpIronPickaxe = TriggerCreate(&quot;gt_SmithySharpIronPickaxe_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithySharpIronPickaxe, null, AbilityCommand(&quot;ForgeSharpIronPickaxe&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithySharpIronPickaxe_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="23971CD9">
        <ScriptCode>
            bool gt_SmithyGleamingSpear_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 5)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;GoldenPolearm&quot;, 28.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyGleamingSpear_Init () {
                gt_SmithyGleamingSpear = TriggerCreate(&quot;gt_SmithyGleamingSpear_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyGleamingSpear, null, AbilityCommand(&quot;ForgeGoldenPolearm&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyGleamingSpear_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C5559A4E">
        <ScriptCode>
            bool gt_SmithyBattleAxe_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 10)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;BerserkersBattleAxe&quot;, 30.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyBattleAxe_Init () {
                gt_SmithyBattleAxe = TriggerCreate(&quot;gt_SmithyBattleAxe_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyBattleAxe, null, AbilityCommand(&quot;ForgeBerserkersBattleAxe&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyBattleAxe_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="40BD737D">
        <ScriptCode>
            bool gt_SmithyIronBandedBuckler_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 5)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;IronBandedBuckler&quot;, 15.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyIronBandedBuckler_Init () {
                gt_SmithyIronBandedBuckler = TriggerCreate(&quot;gt_SmithyIronBandedBuckler_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyIronBandedBuckler, null, AbilityCommand(&quot;ForgeIronBandedBuckler&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyIronBandedBuckler_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B983064C">
        <ScriptCode>
            bool gt_SmithyHeavyTowerShield_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;HeavyTowerShield&quot;, 30.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyHeavyTowerShield_Init () {
                gt_SmithyHeavyTowerShield = TriggerCreate(&quot;gt_SmithyHeavyTowerShield_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyHeavyTowerShield, null, AbilityCommand(&quot;ForgeHeavyTowerShield&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyHeavyTowerShield_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E0AA9ADC">
        <ScriptCode>
            bool gt_SmithyWolfsbane_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0) &amp;&amp; (gv_wolfsbanePlayer == lv_i)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 8));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 12)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;Wolfsbane&quot;, 33.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyWolfsbane_Init () {
                gt_SmithyWolfsbane = TriggerCreate(&quot;gt_SmithyWolfsbane_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyWolfsbane, null, AbilityCommand(&quot;ForgeWolfsbane&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyWolfsbane_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E572EBB4">
        <ScriptCode>
            bool gt_SmithyDreadplateArmor_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 25)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 8)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;DreadplateArmor&quot;, 60.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyDreadplateArmor_Init () {
                gt_SmithyDreadplateArmor = TriggerCreate(&quot;gt_SmithyDreadplateArmor_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyDreadplateArmor, null, AbilityCommand(&quot;ForgeDreadplateArmor&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyDreadplateArmor_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3853F115">
        <ScriptCode>
            bool gt_SmithyIronStuddedVest_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 10)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(&quot;WarmWoolTunic&quot;, c_playerAny, UnitInventoryGroup(gv_playerData[lv_i].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;IronStuddedVest&quot;, 20.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyIronStuddedVest_Init () {
                gt_SmithyIronStuddedVest = TriggerCreate(&quot;gt_SmithyIronStuddedVest_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyIronStuddedVest, null, AbilityCommand(&quot;ForgeIronStuddedVest&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyIronStuddedVest_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8C30AE6F">
        <ScriptCode>
            bool gt_SmithyIronShovel_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;IronShovel&quot;, 5.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyIronShovel_Init () {
                gt_SmithyIronShovel = TriggerCreate(&quot;gt_SmithyIronShovel_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyIronShovel, null, AbilityCommand(&quot;ForgeIronShovel&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyIronShovel_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E213F0DC">
        <ScriptCode>
            bool gt_SmithyOutlandishHeartpiercer_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 25)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_whiteBearFangs, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkullFragments, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 6)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;OutlandishHeartpiercer&quot;, 60.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyOutlandishHeartpiercer_Init () {
                gt_SmithyOutlandishHeartpiercer = TriggerCreate(&quot;gt_SmithyOutlandishHeartpiercer_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyOutlandishHeartpiercer, null, AbilityCommand(&quot;ForgeOutlandishHeartpiercer&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyOutlandishHeartpiercer_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A2E5356D">
        <ScriptCode>
            bool gt_SmithyGoldenHauberk_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 20)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;GoldenHauberk&quot;, 40.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyGoldenHauberk_Init () {
                gt_SmithyGoldenHauberk = TriggerCreate(&quot;gt_SmithyGoldenHauberk_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyGoldenHauberk, null, AbilityCommand(&quot;ForgeGoldenHauberk&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyGoldenHauberk_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="368203D9">
        <ScriptCode>
            bool gt_SmithyJudgmentGavel_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;JudgmentGavel&quot;, 40.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyJudgmentGavel_Init () {
                gt_SmithyJudgmentGavel = TriggerCreate(&quot;gt_SmithyJudgmentGavel_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyJudgmentGavel, null, AbilityCommand(&quot;ForgeJudgmentGavel&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyJudgmentGavel_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4EECECBE">
        <ScriptCode>
            bool gt_SmithyViciousJavelin_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 10)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sturdyWoodenSticks, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;ViciousJavelin&quot;, 25.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyViciousJavelin_Init () {
                gt_SmithyViciousJavelin = TriggerCreate(&quot;gt_SmithyViciousJavelin_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyViciousJavelin, null, AbilityCommand(&quot;ForgeViciousJavelin&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyViciousJavelin_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="447D7834">
        <ScriptCode>
            bool gt_SmithyDemonward_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 20)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_murlocSkulls, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;Demonward&quot;, 40.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyDemonward_Init () {
                gt_SmithyDemonward = TriggerCreate(&quot;gt_SmithyDemonward_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyDemonward, null, AbilityCommand(&quot;ForgeDemonward&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyDemonward_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C08B9B85">
        <ScriptCode>
            bool gt_SmithyLiquidatorSpellblade_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                unitgroup lv_bankSecondary;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                lv_bankSecondary = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 25)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_antlers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bankSecondary, gf_UnitsInUnitGroupWithBuff(UnitGroupFilter(&quot;Nightwisp&quot;, c_playerAny, gv_pets[lv_i], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), &quot;SynergyPassive&quot;));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4) &amp;&amp; (UnitGroupCount(lv_bankSecondary, c_unitCountAlive) &gt; 0)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                UnitKill(UnitGroupRandomUnit(lv_bankSecondary, c_unitCountAlive));
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;LiquidatorSpellblade&quot;, 60.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyLiquidatorSpellblade_Init () {
                gt_SmithyLiquidatorSpellblade = TriggerCreate(&quot;gt_SmithyLiquidatorSpellblade_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyLiquidatorSpellblade, null, AbilityCommand(&quot;ForgeLiquidatorSpellblade&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyLiquidatorSpellblade_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5442DB38">
        <ScriptCode>
            bool gt_SmithyTwinThrowingAxes_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 20)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_berserkersBattleAxes, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;TwinThrowingAxes&quot;, 30.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmithyTwinThrowingAxes_Init () {
                gt_SmithyTwinThrowingAxes = TriggerCreate(&quot;gt_SmithyTwinThrowingAxes_Func&quot;);
                TriggerAddEventUnitAbility(gt_SmithyTwinThrowingAxes, null, AbilityCommand(&quot;ForgeTwinThrowingAxes&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SmithyTwinThrowingAxes_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="2117A073">
        <Item Type="CustomScript" Id="AE4811E4"/>
        <Item Type="CustomScript" Id="CA3A9013"/>
        <Item Type="CustomScript" Id="D81FD93A"/>
        <Item Type="CustomScript" Id="213F9842"/>
        <Item Type="CustomScript" Id="B1FE09D2"/>
        <Item Type="CustomScript" Id="C717A53A"/>
        <Item Type="CustomScript" Id="8E250495"/>
        <Item Type="CustomScript" Id="0D01776B"/>
        <Item Type="CustomScript" Id="DC2002E3"/>
        <Item Type="CustomScript" Id="7C680F42"/>
        <Item Type="CustomScript" Id="D0CA504B"/>
        <Item Type="CustomScript" Id="B5C58311"/>
        <Item Type="CustomScript" Id="1179E54B"/>
        <Item Type="CustomScript" Id="3F5D137D"/>
        <Item Type="CustomScript" Id="32775E1E"/>
        <Item Type="CustomScript" Id="1D407905"/>
        <Item Type="CustomScript" Id="3CE65CCA"/>
        <Item Type="CustomScript" Id="D1B8D555"/>
        <Item Type="CustomScript" Id="618C65BE"/>
        <Item Type="CustomScript" Id="0C419393"/>
    </Element>
    <Element Type="CustomScript" Id="AE4811E4">
        <ScriptCode>
            bool gt_HuntersLodgeObedienceRod_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 1)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;ObedienceRod&quot;, 15.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HuntersLodgeObedienceRod_Init () {
                gt_HuntersLodgeObedienceRod = TriggerCreate(&quot;gt_HuntersLodgeObedienceRod_Func&quot;);
                TriggerAddEventUnitAbility(gt_HuntersLodgeObedienceRod, null, AbilityCommand(&quot;CraftObedienceRod&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_HuntersLodgeObedienceRod_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="CA3A9013">
        <ScriptCode>
            bool gt_HuntersLodgeSleepingBag_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 1)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;SleepingBag&quot;, 10.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HuntersLodgeSleepingBag_Init () {
                gt_HuntersLodgeSleepingBag = TriggerCreate(&quot;gt_HuntersLodgeSleepingBag_Func&quot;);
                TriggerAddEventUnitAbility(gt_HuntersLodgeSleepingBag, null, AbilityCommand(&quot;CraftSleepingBag&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_HuntersLodgeSleepingBag_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D81FD93A">
        <ScriptCode>
            bool gt_HuntersLodgeFishingRod_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                        if ((gv_skillArtisanship[lv_i] &gt;= 0)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                gf_Crafting(gv_playerData[lv_i].lv_kobold, EventUnit(), &quot;FishingRod&quot;, 15.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HuntersLodgeFishingRod_Init () {
                gt_HuntersLodgeFishingRod = TriggerCreate(&quot;gt_HuntersLodgeFishingRod_Func&quot;);
                TriggerAddEventUnitAbility(gt_HuntersLodgeFishingRod, null, AbilityCommand(&quot;CraftFishingRod&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_HuntersLodgeFishingRod_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="213F9842">
        <ScriptCode>
            bool gt_TamedAITrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_animal;
                unit lv_master;
                int lv_i;
                bool lv_onthesamepage;
                fixed lv_leashrange;
                fixed lv_engageEnemyLimit;
                fixed lv_engageDirewolfLimit;
                unitgroup lv_enemies;
                unitgroup lv_direwolves;
                point lv_point;
                unit lv_u;
                // Variable Initialization
                lv_animal = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_master = UnitBehaviorEffectUnit(lv_animal, &quot;Tamed&quot;, c_effectUnitCaster, 0);
                lv_i = UnitGetOwner(lv_master);
                lv_onthesamepage = gf_UnitFacingGeneralDirection(lv_master, lv_animal);
                lv_leashrange = 4.0;
                lv_engageEnemyLimit = 25.0;
                lv_engageDirewolfLimit = 50.0;
                lv_enemies = gf_GetNearbyEnemiesNoStructures(lv_animal);
                lv_direwolves = gf_GetNearbyDirewolves(lv_animal);
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(lv_master)) {
                    if (((lv_onthesamepage == true) || ((UnitHasBehavior(lv_animal, &quot;NaturalTenacity&quot;) == true) &amp;&amp; ((UnitOrder(lv_animal, 0) != Order(AbilityCommand(&quot;move&quot;, 2))) || (UnitHasBehavior(lv_animal, &quot;PetDodging&quot;) == true)) &amp;&amp; (UnitHasBehavior(lv_master, &quot;Annihilate&quot;) == false) &amp;&amp; (UnitHasBehavior(lv_master, &quot;EmpoweredLightning&quot;) == false)))) {
                        if ((UnitHasBehavior(lv_animal, &quot;TigerRage&quot;) == true)) {
                            lv_leashrange = 17.0;
                        }
                        else {
                            lv_leashrange = 12.0;
                        }
                    }
                    else {
                    }
                    lv_leashrange *= (0.5 + ((UnitGetPropertyFixed(lv_animal, c_unitPropLifePercent, c_unitPropCurrent) * 0.5) * 0.01));
                    if ((StringSub(gv_taughtPetsString[lv_i], 1, 1) == &quot;1&quot;)) {
                        UnitCreateEffectUnit(lv_animal, &quot;ThickHideOOCRegen&quot;, lv_animal);
                    }
                    else {
                    }
                    if ((UnitHasBehavior(lv_animal, &quot;DiggingTruffles&quot;) == false)) {
                        if ((UnitHasBehavior(lv_animal, &quot;NaturalTenacity&quot;) == true) &amp;&amp; gf_AIDodgeBossAbilities(lv_animal)) {
                        }
                        else {
                            if ((UnitOrder(lv_animal, 0) != Order(AbilityCommand(&quot;move&quot;, 2))) &amp;&amp; (UnitGroupCount(lv_enemies, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGetPropertyFixed(lv_animal, c_unitPropLifePercent, c_unitPropCurrent) &gt; lv_engageEnemyLimit) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lv_master), UnitGetPosition(lv_animal)) &lt;= lv_leashrange)) {
                                UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGroupCenterOfGroup(lv_enemies)), c_orderQueueReplace);
                            }
                            else {
                                if ((gv_questIndexActive == 9) &amp;&amp; (libNtve_gf_UnitInRegion(lv_animal, gv_noTrufflesEre) == false) &amp;&amp; (UnitHasBehavior(lv_animal, &quot;DiggingTruffles&quot;) == false) &amp;&amp; ((UnitGetType(lv_animal) == &quot;Dog&quot;) || (UnitGetType(lv_animal) == &quot;Lyote&quot;))) {
                                    gf_Quicktag(lv_animal, StringExternal(&quot;Param/Value/3537BACC&quot;), 2.0, 24);
                                    UnitCreateEffectUnit(lv_animal, &quot;DiggingTruffles&quot;, lv_animal);
                                    RegionAddCircle(gv_noTrufflesEre, true, UnitGetPosition(lv_animal), RandomFixed(4.0, 6.0));
                                }
                                else {
                                    if ((UnitOrder(lv_animal, 0) != Order(AbilityCommand(&quot;move&quot;, 2))) &amp;&amp; (UnitGroupCount(lv_direwolves, c_unitCountAlive) &gt; 0) &amp;&amp; ((UnitGetPropertyFixed(lv_animal, c_unitPropLifePercent, c_unitPropCurrent) &gt; lv_engageDirewolfLimit) || (UnitHasBehavior(lv_master, &quot;LazyCozyKobold&quot;) == false)) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lv_master), UnitGetPosition(lv_animal)) &lt;= lv_leashrange)) {
                                        UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGroupCenterOfGroup(lv_direwolves)), c_orderQueueReplace);
                                    }
                                    else {
                                        if ((UnitOrder(lv_animal, 0) != Order(AbilityCommand(&quot;move&quot;, 2))) &amp;&amp; ((DistanceBetweenPoints(UnitGetPosition(lv_animal), UnitGetPosition(lv_master)) &gt;= 4.0) || (UnitHasBehavior(lv_master, &quot;Stationary&quot;) == false))) {
                                            if ((UnitGroupUnit(gv_pets[lv_i], 1) == lv_animal)) {
                                                lv_point = PointWithOffsetPolar(UnitGetPosition(lv_master), RandomFixed(1.5, 2.0), (UnitGetFacing(lv_master) - RandomFixed(70.0, 90.0)));
                                            }
                                            else if ((UnitGroupUnit(gv_pets[lv_i], 2) == lv_animal)) {
                                                lv_point = PointWithOffsetPolar(UnitGetPosition(lv_master), RandomFixed(1.5, 2.0), (UnitGetFacing(lv_master) + RandomFixed(70.0, 90.0)));
                                            }
                                            else if ((UnitGroupUnit(gv_pets[lv_i], 3) == lv_animal)) {
                                                lv_point = PointWithOffsetPolar(UnitGetPosition(lv_master), RandomFixed(1.5, 2.0), (UnitGetFacing(lv_master) + RandomFixed(170.0, 190.0)));
                                            }
                                            else if (true) {
                                                lv_point = PointWithOffsetPolar(UnitGetPosition(lv_master), RandomFixed(2.5, 3.0), (UnitGetFacing(lv_master) + RandomFixed(120.0, 240.0)));
                                            }
                                            if ((DistanceBetweenPoints(UnitGetPosition(lv_animal), lv_point) &gt; 1.0)) {
                                                UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_point), c_orderQueueReplace);
                                            }
                                            else {
                                            }
                                        }
                                        else {
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                    }
                }
                else {
                    if ((gv_playerData[UnitGetOwner(lv_animal)].lv_reincarnation == true) &amp;&amp; gf_UnitExists(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lv_animal))].lv_watchTower)) {
                        UnitIssueOrder(lv_animal, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lv_animal))].lv_watchTower)), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TamedAITrigger_Init () {
                gt_TamedAITrigger = TriggerCreate(&quot;gt_TamedAITrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TamedAITrigger, c_playerAny, &quot;TamedAITrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TamedAITrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B1FE09D2">
        <ScriptCode>
            bool gt_TamedApply_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_master;
                unit lv_animal;
                int lv_i;
                // Variable Initialization
                lv_master = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_animal = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_i = UnitGetOwner(lv_master);
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(lv_animal))) {
                        return false;
                    }
                    if (!(((UnitGetType(gf_KoboldMainHand(lv_master)) == &quot;ObedienceRod&quot;) || ((UnitGetType(gf_KoboldMainHand(lv_master)) == null) &amp;&amp; (UnitGetType(gf_KoboldArmor(lv_master)) == &quot;MasterRangersMaille&quot;))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) &lt; StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i)))) {
                    if ((UnitGetType(gf_KoboldMainHand(lv_master)) == &quot;ObedienceRod&quot;)) {
                        gf_DropandRemove(gf_KoboldMainHand(lv_master));
                    }
                    else {
                    }
                    gf_AddExperience(lv_master, 50.0);
                    gf_TameAnimal(lv_master, lv_animal);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_tameError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TamedApply_Init () {
                gt_TamedApply = TriggerCreate(&quot;gt_TamedApply_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TamedApply, c_playerAny, &quot;TamedSet&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TamedApply_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C717A53A">
        <ScriptCode>
            bool gt_LearnThickHide_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_t;
                int lv_c;
                bool lv_thru;
                unitgroup lv_pelts;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 30;
                lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_taughtPetsString[lv_i], 1, 1) == &quot;0&quot;)) {
                            if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 1)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_pelts);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            if ((lv_thru == true)) {
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/A7F42BAF&quot;), 3.0, 24);
                                gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], &quot;1&quot;, 1, 1);
                                UnitGroupLoopBegin(UnitGroup(&quot;HuntersLodge&quot;, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                TechTreeUpgradeAddLevel(lv_i, &quot;PetUpgradeThickHide&quot;, 1);
                                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i));
                                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i, FixedToString((lv_t + 1.0), 2));
                                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Hover]&quot;, lv_i));
                                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Hover]&quot;, lv_i, FixedToString((lv_t + 2.0), 2));
                                gf_UpdatePetStats(lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnThickHide_Init () {
                gt_LearnThickHide = TriggerCreate(&quot;gt_LearnThickHide_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnThickHide, null, AbilityCommand(&quot;ThickHide&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnThickHide_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8E250495">
        <ScriptCode>
            bool gt_LearnNaturalTenacity_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_t;
                int lv_c;
                bool lv_thru;
                unitgroup lv_pelts;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 30;
                lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1);
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_taughtPetsString[lv_i], 5, 5) == &quot;0&quot;)) {
                            if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 1)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_pelts);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            if ((lv_thru == true)) {
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/C114FC6D&quot;), 3.0, 24);
                                gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], &quot;1&quot;, 5, 5);
                                UnitGroupLoopBegin(UnitGroup(&quot;HuntersLodge&quot;, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                UnitGroupLoopBegin(gv_pets[lv_i]);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_ApplyPetBehaviors(UnitGroupLoopCurrent(), gv_playerData[lv_i].lv_kobold);
                                }
                                UnitGroupLoopEnd();
                                TechTreeUpgradeAddLevel(lv_i, &quot;PetUpgradeNaturalTenacity&quot;, 1);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnNaturalTenacity_Init () {
                gt_LearnNaturalTenacity = TriggerCreate(&quot;gt_LearnNaturalTenacity_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnNaturalTenacity, null, AbilityCommand(&quot;NaturalTenacity&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnNaturalTenacity_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0D01776B">
        <ScriptCode>
            bool gt_LearnViciousness_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_t;
                int lv_c;
                bool lv_thru;
                unitgroup lv_pelts;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 60;
                lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2);
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_taughtPetsString[lv_i], 6, 6) == &quot;0&quot;)) {
                            if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 2)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_pelts);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            if ((lv_thru == true)) {
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/53E068F1&quot;), 3.0, 24);
                                gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], &quot;1&quot;, 6, 6);
                                UnitGroupLoopBegin(UnitGroup(&quot;HuntersLodge&quot;, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                TechTreeUpgradeAddLevel(lv_i, &quot;PetUpgradeViciousness&quot;, 1);
                                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Light]&quot;, lv_i));
                                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Light]&quot;, lv_i, FixedToString((lv_t + 25.0), 0));
                                gf_UpdatePetStats(lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnViciousness_Init () {
                gt_LearnViciousness = TriggerCreate(&quot;gt_LearnViciousness_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnViciousness, null, AbilityCommand(&quot;Viciousness&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnViciousness_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DC2002E3">
        <ScriptCode>
            bool gt_LearnInspirationalMaster_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_t;
                int lv_c;
                bool lv_thru;
                unitgroup lv_pelts;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 60;
                lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2);
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_taughtPetsString[lv_i], 2, 2) == &quot;0&quot;)) {
                            if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 2)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_pelts);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            if ((lv_thru == true)) {
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/F54F2812&quot;), 3.0, 24);
                                gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], &quot;1&quot;, 2, 2);
                                UnitGroupLoopBegin(UnitGroup(&quot;HuntersLodge&quot;, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                TechTreeUpgradeAddLevel(lv_i, &quot;PetUpgradeInspirationalMaster&quot;, 1);
                                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_t + 0.1), 2));
                                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString((lv_t + 1.0), 2));
                                gf_UpdatePetStats(lv_i);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnInspirationalMaster_Init () {
                gt_LearnInspirationalMaster = TriggerCreate(&quot;gt_LearnInspirationalMaster_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnInspirationalMaster, null, AbilityCommand(&quot;InspirationalMaster&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnInspirationalMaster_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7C680F42">
        <ScriptCode>
            bool gt_LearnPredatoryKnowledge_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_t;
                int lv_c;
                bool lv_thru;
                unitgroup lv_pelts;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 60;
                lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2);
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_taughtPetsString[lv_i], 4, 4) == &quot;0&quot;)) {
                            if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 2)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_pelts);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            if ((lv_thru == true)) {
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/773A1387&quot;), 3.0, 24);
                                gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], &quot;1&quot;, 4, 4);
                                UnitGroupLoopBegin(UnitGroup(&quot;HuntersLodge&quot;, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                UnitGroupLoopBegin(gv_pets[lv_i]);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_ApplyPetBehaviors(UnitGroupLoopCurrent(), gv_playerData[lv_i].lv_kobold);
                                }
                                UnitGroupLoopEnd();
                                TechTreeUpgradeAddLevel(lv_i, &quot;PetUpgradePredatoryKnowledge&quot;, 1);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnPredatoryKnowledge_Init () {
                gt_LearnPredatoryKnowledge = TriggerCreate(&quot;gt_LearnPredatoryKnowledge_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnPredatoryKnowledge, null, AbilityCommand(&quot;PredatoryKnowledge&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnPredatoryKnowledge_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D0CA504B">
        <ScriptCode>
            bool gt_LearnCompanionship_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_t;
                int lv_c;
                bool lv_thru;
                unitgroup lv_pelts;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 90;
                lv_pelts = UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_bearPelts, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3);
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((StringSub(gv_taughtPetsString[lv_i], 3, 3) == &quot;0&quot;)) {
                            if ((UnitGroupCount(lv_pelts, c_unitCountAlive) == 3)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_pelts);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            if ((lv_thru == true)) {
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/4474782E&quot;), 3.0, 24);
                                gv_taughtPetsString[lv_i] = StringReplace(gv_taughtPetsString[lv_i], &quot;1&quot;, 3, 3);
                                UnitGroupLoopBegin(UnitGroup(&quot;HuntersLodge&quot;, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_HuntersLodgeSpawn(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                TechTreeUpgradeAddLevel(lv_i, &quot;PetUpgradeCompanionship&quot;, 1);
                                lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i));
                                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i, FixedToString((lv_t + 1.0), 0));
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_alreadyHaveUpgrade);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnCompanionship_Init () {
                gt_LearnCompanionship = TriggerCreate(&quot;gt_LearnCompanionship_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnCompanionship, null, AbilityCommand(&quot;Companionship&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_LearnCompanionship_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B5C58311">
        <ScriptCode>
            bool gt_PredatoryKnowledge_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_i;
                // Variable Initialization
                lv_type = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((lv_type == &quot;Dog&quot;) || (lv_type == &quot;Lyote&quot;)) &amp;&amp; (gv_predatoryKnowledgeStacks[1][lv_i] &lt; 10)) {
                    gv_predatoryKnowledgeStacks[1][lv_i] += 1;
                    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal(&quot;Param/Value/419A9534&quot;), 2.0, 24);
                }
                else if (((lv_type == &quot;Bear&quot;) || (lv_type == &quot;FrostBear&quot;)) &amp;&amp; (gv_predatoryKnowledgeStacks[2][lv_i] &lt; 10)) {
                    gv_predatoryKnowledgeStacks[2][lv_i] += 1;
                    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal(&quot;Param/Value/90A25AA3&quot;), 2.0, 24);
                }
                else if ((lv_type == &quot;Nightwisp&quot;) &amp;&amp; (gv_predatoryKnowledgeStacks[3][lv_i] &lt; 10)) {
                    gv_predatoryKnowledgeStacks[3][lv_i] += 1;
                    gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal(&quot;Param/Value/3051A876&quot;), 2.0, 24);
                }
                gf_UpdatePetStats(lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PredatoryKnowledge_Init () {
                gt_PredatoryKnowledge = TriggerCreate(&quot;gt_PredatoryKnowledge_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_PredatoryKnowledge, c_playerAny, &quot;PredatoryKnowledge1min&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_PredatoryKnowledge_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1179E54B">
        <ScriptCode>
            bool gt_WhiteBearFangCollect_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_lodgeOwner;
                int lv_collector;
                fixed lv_t;
                // Variable Initialization
                lv_lodgeOwner = UnitGetOwner(EventUnit());
                lv_collector = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_collector].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_collector].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_collector].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((UnitGroupCount(gv_playerData[lv_collector].lv_resources.lv_whiteBearFangs, c_unitCountAlive) &gt;= 1)) {
                            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_collector].lv_resources.lv_whiteBearFangs, 1));
                            if ((lv_collector == lv_lodgeOwner)) {
                                gf_Advancedtag(EventUnit(), lv_collector, StringExternal(&quot;Param/Value/B7064B88&quot;), 2.0, 24);
                            }
                            else {
                                gf_Advancedtag(EventUnit(), lv_collector, StringExternal(&quot;Param/Value/E3179ED6&quot;), 2.0, 24);
                            }
                            SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_collector), gv_playerData[lv_collector].lv_kobold, 0.0, 100.0, 0.0);
                            UnitBehaviorAdd(EventUnit(), &quot;WhiteBearToothStack&quot;, gv_playerData[lv_lodgeOwner].lv_kobold, 1);
                            lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_lodgeOwner));
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_lodgeOwner, FixedToString((lv_t + 0.02), 2));
                            gf_UpdatePetStats(lv_lodgeOwner);
                            gf_HuntersLodgeSpawn(EventUnit());
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_trophiesError);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WhiteBearFangCollect_Init () {
                gt_WhiteBearFangCollect = TriggerCreate(&quot;gt_WhiteBearFangCollect_Func&quot;);
                TriggerAddEventUnitAbility(gt_WhiteBearFangCollect, null, AbilityCommand(&quot;CollectTrophyWhiteBearFang&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WhiteBearFangCollect_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3F5D137D">
        <ScriptCode>
            bool gt_WhiteBearFangExpire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_temp;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_CreateLoot(&quot;WhiteBearFang&quot;, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 2.0, true, 100, 0);
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_temp - 0.02), 2));
                gf_UpdatePetStats(lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WhiteBearFangExpire_Init () {
                gt_WhiteBearFangExpire = TriggerCreate(&quot;gt_WhiteBearFangExpire_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WhiteBearFangExpire, c_playerAny, &quot;WhiteBearFangExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WhiteBearFangExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="32775E1E">
        <ScriptCode>
            bool gt_BoneTalismanCollect_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_lodgeOwner;
                int lv_collector;
                fixed lv_t;
                // Variable Initialization
                lv_lodgeOwner = UnitGetOwner(EventUnit());
                lv_collector = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_collector].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_collector].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_collector].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((UnitGroupCount(gv_playerData[lv_collector].lv_resources.lv_boneTalismans, c_unitCountAlive) &gt;= 1)) {
                            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_collector].lv_resources.lv_boneTalismans, 1));
                            if ((lv_collector == lv_lodgeOwner)) {
                                gf_Advancedtag(EventUnit(), lv_collector, StringExternal(&quot;Param/Value/7B624272&quot;), 2.0, 24);
                            }
                            else {
                                gf_Advancedtag(EventUnit(), lv_collector, StringExternal(&quot;Param/Value/AF3EC12D&quot;), 2.0, 24);
                            }
                            SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_collector), gv_playerData[lv_collector].lv_kobold, 0.0, 100.0, 0.0);
                            UnitBehaviorAdd(EventUnit(), &quot;BoneTalismanStack&quot;, gv_playerData[lv_lodgeOwner].lv_kobold, 1);
                            lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_lodgeOwner));
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_lodgeOwner, FixedToString((lv_t + 0.2), 2));
                            gf_UpdatePetStats(lv_lodgeOwner);
                            gf_HuntersLodgeSpawn(EventUnit());
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_trophiesError);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BoneTalismanCollect_Init () {
                gt_BoneTalismanCollect = TriggerCreate(&quot;gt_BoneTalismanCollect_Func&quot;);
                TriggerAddEventUnitAbility(gt_BoneTalismanCollect, null, AbilityCommand(&quot;CollectTrophyBoneTalisman&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BoneTalismanCollect_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1D407905">
        <ScriptCode>
            bool gt_BoneTalismanExpire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_temp;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_CreateLoot(&quot;BoneTalisman&quot;, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 2.0, true, 100, 0);
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString((lv_temp - 0.2), 2));
                gf_UpdatePetStats(lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BoneTalismanExpire_Init () {
                gt_BoneTalismanExpire = TriggerCreate(&quot;gt_BoneTalismanExpire_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BoneTalismanExpire, c_playerAny, &quot;BoneTalismanExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BoneTalismanExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3CE65CCA">
        <ScriptCode>
            bool gt_TrollNoseBoneCollect_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_lodgeOwner;
                int lv_collector;
                fixed lv_t;
                // Variable Initialization
                lv_lodgeOwner = UnitGetOwner(EventUnit());
                lv_collector = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_collector].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_collector].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_collector].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((UnitGroupCount(gv_playerData[lv_collector].lv_resources.lv_trollNoseBones, c_unitCountAlive) &gt;= 1)) {
                            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_collector].lv_resources.lv_trollNoseBones, 1));
                            if ((lv_collector == lv_lodgeOwner)) {
                                gf_Advancedtag(EventUnit(), lv_collector, StringExternal(&quot;Param/Value/92671A8C&quot;), 2.0, 24);
                            }
                            else {
                                gf_Advancedtag(EventUnit(), lv_collector, StringExternal(&quot;Param/Value/8E0DA5B8&quot;), 2.0, 24);
                            }
                            SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_collector), gv_playerData[lv_collector].lv_kobold, 0.0, 100.0, 0.0);
                            UnitBehaviorAdd(EventUnit(), &quot;TrollNoseBoneStack&quot;, gv_playerData[lv_lodgeOwner].lv_kobold, 1);
                            lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Light]&quot;, lv_lodgeOwner));
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Light]&quot;, lv_lodgeOwner, FixedToString((lv_t + 10.0), 2));
                            gf_UpdatePetStats(lv_lodgeOwner);
                            gf_HuntersLodgeSpawn(EventUnit());
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_trophiesError);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TrollNoseBoneCollect_Init () {
                gt_TrollNoseBoneCollect = TriggerCreate(&quot;gt_TrollNoseBoneCollect_Func&quot;);
                TriggerAddEventUnitAbility(gt_TrollNoseBoneCollect, null, AbilityCommand(&quot;CollectTrophyTrollNoseBone&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_TrollNoseBoneCollect_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D1B8D555">
        <ScriptCode>
            bool gt_TrollNoseBoneExpire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_temp;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_CreateLoot(&quot;TrollNoseBone&quot;, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 2.0, true, 100, 0);
                lv_temp = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Light]&quot;, lv_i));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;AttributeBonus[Light]&quot;, lv_i, FixedToString((lv_temp - 10.0), 2));
                gf_UpdatePetStats(lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TrollNoseBoneExpire_Init () {
                gt_TrollNoseBoneExpire = TriggerCreate(&quot;gt_TrollNoseBoneExpire_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TrollNoseBoneExpire, c_playerAny, &quot;TrollNoseBoneExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TrollNoseBoneExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="618C65BE">
        <ScriptCode>
            bool gt_AntlersCollect_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_lodgeOwner;
                int lv_collector;
                fixed lv_t;
                // Variable Initialization
                lv_lodgeOwner = UnitGetOwner(EventUnit());
                lv_collector = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_collector].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_collector].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_collector].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((UnitGroupCount(gv_playerData[lv_collector].lv_resources.lv_antlers, c_unitCountAlive) &gt;= 1)) {
                            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_collector].lv_resources.lv_antlers, 1));
                            if ((lv_collector == lv_lodgeOwner)) {
                                gf_Advancedtag(EventUnit(), lv_collector, StringExternal(&quot;Param/Value/7977C4F5&quot;), 2.0, 24);
                            }
                            else {
                                gf_Advancedtag(EventUnit(), lv_collector, StringExternal(&quot;Param/Value/39F38F20&quot;), 2.0, 24);
                            }
                            SoundPlayOnUnit(SoundLink(&quot;LeatherSpend&quot;, -1), PlayerGroupSingle(lv_collector), gv_playerData[lv_collector].lv_kobold, 0.0, 100.0, 0.0);
                            UnitBehaviorAdd(EventUnit(), &quot;AntlersStack&quot;, gv_playerData[lv_lodgeOwner].lv_kobold, 1);
                            gv_antlerStacks[lv_lodgeOwner] += 1;
                            gf_UpdatePetStats(lv_lodgeOwner);
                            gf_HuntersLodgeSpawn(EventUnit());
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_trophiesError);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_collector), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AntlersCollect_Init () {
                gt_AntlersCollect = TriggerCreate(&quot;gt_AntlersCollect_Func&quot;);
                TriggerAddEventUnitAbility(gt_AntlersCollect, null, AbilityCommand(&quot;CollectTrophyAntlers&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_AntlersCollect_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0C419393">
        <ScriptCode>
            bool gt_AntlersExpire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_temp;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_CreateLoot(&quot;Antlers&quot;, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 2.0, true, 100, 0);
                gv_antlerStacks[lv_i] -= 1;
                gf_UpdatePetStats(lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AntlersExpire_Init () {
                gt_AntlersExpire = TriggerCreate(&quot;gt_AntlersExpire_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AntlersExpire, c_playerAny, &quot;AntlersExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AntlersExpire_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="271F4DEB">
        <Item Type="CustomScript" Id="81604EF9"/>
        <Item Type="CustomScript" Id="9B1B6677"/>
        <Item Type="CustomScript" Id="E58A0E2A"/>
        <Item Type="CustomScript" Id="33660E59"/>
        <Item Type="CustomScript" Id="6CC134B3"/>
    </Element>
    <Element Type="CustomScript" Id="81604EF9">
        <ScriptCode>
            bool gt_UpdateStatsTrigger_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == &quot;Kobold&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_UpdateStatsAll(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UpdateStatsTrigger_Init () {
                gt_UpdateStatsTrigger = TriggerCreate(&quot;gt_UpdateStatsTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_UpdateStatsTrigger, c_playerAny, &quot;UpdateCombatStats&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_UpdateStatsTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9B1B6677">
        <ScriptCode>
            bool gt_BuffMainStat_Func (bool testConds, bool runActions) {
                string auto9ADB2F72_val;
                // Variable Declarations
                unit lv_unit;
                int lv_i;
                fixed lv_strength;
                fixed lv_deltaStrength;
                fixed lv_dex;
                fixed lv_deltaDexterity;
                fixed lv_endurance;
                fixed lv_deltaEndurance;
                fixed lv_intelligence;
                fixed lv_deltaIntelligence;
                fixed lv_willpower;
                fixed lv_deltaWillpower;
                // Variable Initialization
                lv_unit = EventUnit();
                lv_i = UnitGetOwner(lv_unit);
                lv_strength = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                lv_dex = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                lv_endurance = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i));
                lv_intelligence = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                lv_willpower = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i));
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(lv_unit) == &quot;Kobold&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto9ADB2F72_val = EventUnitBehavior();
                if (auto9ADB2F72_val == &quot;MasterRangersMailleStrDex&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
                        lv_deltaStrength = 2.0;
                        lv_deltaDexterity = 2.0;
                    }
                    else {
                        lv_deltaStrength = -2.0;
                        lv_deltaDexterity = -2.0;
                    }
                }
                else if (auto9ADB2F72_val == &quot;MasterRangersMailleStrEnd&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
                        lv_deltaStrength = 2.0;
                        lv_deltaEndurance = 2.0;
                    }
                    else {
                        lv_deltaStrength = -2.0;
                        lv_deltaEndurance = -2.0;
                    }
                }
                else if (auto9ADB2F72_val == &quot;MasterRangersMailleIntWil&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
                        lv_deltaIntelligence = 2.0;
                        lv_deltaWillpower = 2.0;
                    }
                    else {
                        lv_deltaIntelligence = -2.0;
                        lv_deltaWillpower = -2.0;
                    }
                }
                else if (auto9ADB2F72_val == &quot;Candle&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
                        lv_deltaStrength = 2.0;
                        lv_deltaDexterity = 2.0;
                        lv_deltaEndurance = 2.0;
                        lv_deltaIntelligence = 2.0;
                        lv_deltaWillpower = 2.0;
                    }
                    else {
                        lv_deltaStrength = -2.0;
                        lv_deltaDexterity = -2.0;
                        lv_deltaEndurance = -2.0;
                        lv_deltaIntelligence = -2.0;
                        lv_deltaWillpower = -2.0;
                    }
                }
                else if (auto9ADB2F72_val == &quot;WarHorn&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
                        lv_deltaStrength = 5.0;
                        lv_deltaDexterity = 5.0;
                        lv_deltaEndurance = 5.0;
                        lv_deltaIntelligence = 5.0;
                        lv_deltaWillpower = 5.0;
                    }
                    else {
                        lv_deltaStrength = -5.0;
                        lv_deltaDexterity = -5.0;
                        lv_deltaEndurance = -5.0;
                        lv_deltaIntelligence = -5.0;
                        lv_deltaWillpower = -5.0;
                    }
                }
                else if (auto9ADB2F72_val == &quot;IronbarkArmorTreeStack&quot;) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;IronbarkArmorStrengthBonus&quot;, &quot;Amount&quot;, lv_i, FixedToString((UnitBehaviorCount(lv_unit, &quot;IronbarkArmorTreeStack&quot;) + (3.0 * UnitBehaviorCount(lv_unit, &quot;IronbarkArmorElderTreeStack&quot;))), 0));
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
                        lv_deltaStrength = 1.0;
                    }
                    else {
                        lv_deltaStrength = -1.0;
                    }
                }
                else if (auto9ADB2F72_val == &quot;IronbarkArmorElderTreeStack&quot;) {
                    CatalogFieldValueSet(c_gameCatalogEffect, &quot;IronbarkArmorStrengthBonus&quot;, &quot;Amount&quot;, lv_i, FixedToString((UnitBehaviorCount(lv_unit, &quot;IronbarkArmorTreeStack&quot;) + (3.0 * UnitBehaviorCount(lv_unit, &quot;IronbarkArmorElderTreeStack&quot;))), 0));
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
                        lv_deltaStrength = 3.0;
                    }
                    else {
                        lv_deltaStrength = -3.0;
                    }
                }
                else {
                }
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_strength + lv_deltaStrength), 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString((lv_dex + lv_deltaDexterity), 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Heroic]&quot;, lv_i, FixedToString((lv_endurance + lv_deltaEndurance), 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_intelligence + lv_deltaIntelligence), 0));
                CatalogFieldValueSet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i, FixedToString((lv_willpower + lv_deltaWillpower), 0));
                gf_UpdateStatsAll(lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuffMainStat_Init () {
                gt_BuffMainStat = TriggerCreate(&quot;gt_BuffMainStat_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;MasterRangersMailleStrDex&quot;, c_unitBehaviorChangeIncrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;MasterRangersMailleStrDex&quot;, c_unitBehaviorChangeDecrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;MasterRangersMailleStrEnd&quot;, c_unitBehaviorChangeIncrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;MasterRangersMailleStrEnd&quot;, c_unitBehaviorChangeDecrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;MasterRangersMailleIntWil&quot;, c_unitBehaviorChangeIncrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;MasterRangersMailleIntWil&quot;, c_unitBehaviorChangeDecrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;Candle&quot;, c_unitBehaviorChangeIncrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;Candle&quot;, c_unitBehaviorChangeDecrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;WarHorn&quot;, c_unitBehaviorChangeIncrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;WarHorn&quot;, c_unitBehaviorChangeDecrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;IronbarkArmorTreeStack&quot;, c_unitBehaviorChangeIncrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;IronbarkArmorTreeStack&quot;, c_unitBehaviorChangeDecrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;IronbarkArmorElderTreeStack&quot;, c_unitBehaviorChangeIncrease);
                TriggerAddEventUnitBehaviorChange(gt_BuffMainStat, null, &quot;IronbarkArmorElderTreeStack&quot;, c_unitBehaviorChangeDecrease);
            }
        </ScriptCode>
        <InitFunc>gt_BuffMainStat_Init </InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E58A0E2A">
        <ScriptCode>
            bool gt_TemporaryBuffs_Func (bool testConds, bool runActions) {
                string autoAC9E4E7D_val;
                // Variable Declarations
                unit lv_unit;
                unit lv_source;
                int lv_i;
                fixed lv_unitArmor;
                fixed lv_unitSight;
                fixed lv_deltaArmor;
                fixed lv_deltaSight;
                fixed lv_frostArmorPower;
                fixed lv_t;
                // Variable Initialization
                lv_unit = EventUnit();
                lv_source = UnitBehaviorEffectUnit(lv_unit, EventUnitBehavior(), c_effectUnitCaster, 0);
                lv_i = UnitGetOwner(lv_unit);
                lv_unitArmor = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lv_i));
                lv_unitSight = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;Sight&quot;, lv_i));
                lv_frostArmorPower = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;FrostArmorDamage&quot;, &quot;AttributeBonus[Robotic]&quot;, lv_i));
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(lv_unit) == &quot;Kobold&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/A68E225B&quot;), false);
                autoAC9E4E7D_val = EventUnitBehavior();
                if (autoAC9E4E7D_val == &quot;ChefsInspiration&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
                        lv_deltaArmor = 5.0;
                    }
                    else {
                        lv_deltaArmor = -5.0;
                    }
                }
                else if (autoAC9E4E7D_val == &quot;FrostArmor&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
                        lv_deltaArmor = lv_frostArmorPower;
                        gv_frostArmorBonus[lv_i] = lv_deltaArmor;
                    }
                    else {
                        lv_deltaArmor = (-1.0 * gv_frostArmorBonus[lv_i]);
                        gv_frostArmorBonus[lv_i] = 0.0;
                    }
                }
                else if (autoAC9E4E7D_val == &quot;HolyArmor&quot;) {
                    lv_t = libNtve_gf_ArithmeticRealClamp((UnitGetPropertyFixed(lv_source, c_unitPropLifeMax, c_unitPropCurrent) * 0.015), 0.0, 15.0);
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
                        lv_deltaArmor = lv_t;
                        UnitSetCustomValue(lv_unit, 3, lv_deltaArmor);
                    }
                    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeRefresh)) {
                        lv_deltaArmor = (lv_t - UnitGetCustomValue(lv_unit, 3));
                        UnitSetCustomValue(lv_unit, 3, (UnitGetCustomValue(lv_unit, 3) + lv_deltaArmor));
                    }
                    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
                        lv_deltaArmor = (-1.0 * UnitGetCustomValue(lv_unit, 3));
                        UnitSetCustomValue(lv_unit, 3, 0.0);
                    }
                }
                else if (autoAC9E4E7D_val == &quot;MiningExpertise&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
                        lv_deltaArmor = 2.0;
                    }
                    else {
                        lv_deltaArmor = -2.0;
                    }
                }
                else if (autoAC9E4E7D_val == &quot;AlbinoCavefish&quot;) {
                    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
                        lv_deltaArmor = 8.0;
                        lv_deltaSight = -2.0;
                    }
                    else {
                        lv_deltaArmor = -8.0;
                        lv_deltaSight = 2.0;
                    }
                }
                else {
                }
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;Kobold&quot;, &quot;LifeArmor&quot;, lv_i, FixedToString((lv_unitArmor + lv_deltaArmor), 1));
                gf_ModifyUnitSight(&quot;Kobold&quot;, lv_i, lv_deltaSight);
                gf_UpdatePetStats(lv_i);
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/F4A25B9D&quot;), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TemporaryBuffs_Init () {
                gt_TemporaryBuffs = TriggerCreate(&quot;gt_TemporaryBuffs_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;FrostArmor&quot;, c_unitBehaviorChangeCreate);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;FrostArmor&quot;, c_unitBehaviorChangeDestroy);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;ChefsInspiration&quot;, c_unitBehaviorChangeCreate);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;ChefsInspiration&quot;, c_unitBehaviorChangeDestroy);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;HolyArmor&quot;, c_unitBehaviorChangeCreate);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;HolyArmor&quot;, c_unitBehaviorChangeRefresh);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;HolyArmor&quot;, c_unitBehaviorChangeDestroy);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;MiningExpertise&quot;, c_unitBehaviorChangeActivate);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;MiningExpertise&quot;, c_unitBehaviorChangeDeactivate);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;AlbinoCavefish&quot;, c_unitBehaviorChangeActivate);
                TriggerAddEventUnitBehaviorChange(gt_TemporaryBuffs, null, &quot;AlbinoCavefish&quot;, c_unitBehaviorChangeDeactivate);
            }
        </ScriptCode>
        <InitFunc>gt_TemporaryBuffs_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="33660E59">
        <ScriptCode>
            bool gt_TriggeredAttackEffects_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_attacker;
                unit lv_target;
                int lv_i;
                fixed lv_r;
                // Variable Initialization
                lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_i = UnitGetOwner(lv_attacker);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(gf_KoboldMainHand(lv_attacker)) == &quot;JudgmentGavel&quot;)) {
                    UnitDamage(lv_attacker, &quot;MagicalDamageDummy&quot;, lv_target, libNtve_gf_ArithmeticRealClamp((UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) * 0.03), 0.0, 30.0));
                    UnitBehaviorAdd(lv_attacker, &quot;HolyArmor&quot;, lv_target, 1);
                }
                else {
                }
                if ((UnitGetType(gf_KoboldArmor(lv_attacker)) == &quot;SpellbreakerArmor&quot;) &amp;&amp; (UnitHasBehavior(lv_target, &quot;Spellbroken&quot;) == true)) {
                    UnitCreateEffectUnit(lv_attacker, &quot;SpellbreakerImpact&quot;, lv_target);
                    UnitDamage(lv_attacker, &quot;MagicalDamageDummy&quot;, lv_target, (2.0 * StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Wit&quot;, &quot;AttributeBonus[Biological]&quot;, lv_i))));
                    gf_HealUnit(lv_attacker, lv_attacker, (UnitGetPropertyFixed(lv_attacker, c_unitPropLifeMax, c_unitPropCurrent) * 0.1), true);
                    UnitSetPropertyFixed(lv_attacker, c_unitPropEnergy, (UnitGetPropertyFixed(lv_attacker, c_unitPropEnergy, c_unitPropCurrent) + (UnitGetPropertyFixed(lv_attacker, c_unitPropEnergyMax, c_unitPropCurrent) * 0.1)));
                    UnitBehaviorRemove(lv_target, &quot;Spellbroken&quot;, 1);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TriggeredAttackEffects_Init () {
                gt_TriggeredAttackEffects = TriggerCreate(&quot;gt_TriggeredAttackEffects_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TriggeredAttackEffects, c_playerAny, &quot;TriggeredAttackEffects&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TriggeredAttackEffects_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6CC134B3">
        <ScriptCode>
            bool gt_DamageTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                bool lv_assistedDmg;
                // Variable Initialization
                lv_assistedDmg = ((EventUnitDamageEffect() == &quot;MeleeDamageDummyNoText&quot;) || (EventUnitDamageEffect() == &quot;RangedDamageDummyNoText&quot;));
                // Conditions
                if (testConds) {
                    if (!((lv_assistedDmg == false))) {
                        return false;
                    }
                    if (!((EventUnitDamageEffect() != &quot;KillWithDamage&quot;))) {
                        return false;
                    }
                    if (!((EventUnitDamageSourceUnit() != null))) {
                        return false;
                    }
                    if (!((EventUnit() != null))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_noDamage = false;
                gv_damageTaken = EventUnitDamageAmount();
                gv_damageRaw = EventUnitDamageAbsorbed();
                gf_BlunderbussShotgun(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageEffect());
                gf_PailsadeRangedProtection(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageEffect());
                gf_Forestry20Heal(EventUnitDamageSourceUnit(), EventUnit(), gv_damageTaken, EventUnitDamageEffect());
                gf_WoundedFlash(EventUnit(), gv_damageTaken);
                gf_UnstableAnomalyAscent(EventUnit(), gv_damageTaken);
                gf_DamageText(EventUnitDamageSourceUnit(), EventUnit(), gv_damageTaken, (gv_damageRaw - gv_damageTaken), EventUnitDamageEffect());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DamageTrigger_Init () {
                gt_DamageTrigger = TriggerCreate(&quot;gt_DamageTrigger_Func&quot;);
                TriggerAddEventUnitDamaged(gt_DamageTrigger, null, c_unitDamageTypeAny, c_unitDamageEither, null);
            }
        </ScriptCode>
        <InitFunc>gt_DamageTrigger_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="CC27E44D">
        <Item Type="CustomScript" Id="FBA68E7B"/>
        <Item Type="CustomScript" Id="04865C51"/>
        <Item Type="CustomScript" Id="7AEDD740"/>
        <Item Type="CustomScript" Id="FB76EA3E"/>
        <Item Type="CustomScript" Id="59BCE49A"/>
        <Item Type="CustomScript" Id="4E67F6B3"/>
        <Item Type="CustomScript" Id="BECEB122"/>
        <Item Type="CustomScript" Id="0F0A7716"/>
        <Item Type="CustomScript" Id="131CA565"/>
        <Item Type="CustomScript" Id="C5101758"/>
        <Item Type="CustomScript" Id="01800AA1"/>
        <Item Type="CustomScript" Id="403AB498"/>
        <Item Type="CustomScript" Id="4ED25982"/>
        <Item Type="CustomScript" Id="0841B894"/>
        <Item Type="CustomScript" Id="46CB8756"/>
        <Item Type="CustomScript" Id="8C0905E2"/>
        <Item Type="CustomScript" Id="A913C580"/>
        <Item Type="CustomScript" Id="AE8A16BE"/>
        <Item Type="CustomScript" Id="0DAFC1F9"/>
        <Item Type="CustomScript" Id="82A8B21E"/>
        <Item Type="CustomScript" Id="31F20A1F"/>
        <Item Type="CustomScript" Id="BFDADE7D"/>
        <Item Type="CustomScript" Id="A2896A3B"/>
        <Item Type="CustomScript" Id="7CE18CEF"/>
        <Item Type="CustomScript" Id="290362F2"/>
        <Item Type="CustomScript" Id="FD4D2777"/>
        <Item Type="CustomScript" Id="3823731E"/>
        <Item Type="CustomScript" Id="C5E9F240"/>
        <Item Type="CustomScript" Id="E421B345"/>
        <Item Type="CustomScript" Id="E73E122E"/>
        <Item Type="CustomScript" Id="14CFC691"/>
        <Item Type="CustomScript" Id="8D423C36"/>
        <Item Type="CustomScript" Id="920D2C87"/>
        <Item Type="CustomScript" Id="70C59C64"/>
    </Element>
    <Element Type="CustomScript" Id="FBA68E7B">
        <ScriptCode>
            bool gt_ItemSets_Func (bool testConds, bool runActions) {
                string set = EventUnitBehavior();
                unit lv_unit = EventUnit();
                int lv_i = UnitGetOwner(lv_unit);
                fixed lv_t;
                bool activate = EventUnitBehaviorChange() == c_unitBehaviorChangeActivate;
                color txtColor = Color(100, 0,0);
                string setName = &quot;Set bonus lost: &quot;;
                if(activate){
                    txtColor = Color(0, 100, 0);
                    setName = &quot;Set bonus acquired: &quot;;
                }
                if (set == &quot;SetHeavyIron&quot;) {
                    setName += &quot;Heavy Iron&quot;;
                    lv_t = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                    if (activate) {
                        CatalogFieldValueSet(c_gameCatalogButton, &quot;HeavyIronBreastplate&quot;, &quot;Tooltip&quot;, lv_i, &quot;This heavy plate provides excellent protection against most kinds of dangers. Combined with a heavy tower shield you will become nigh invincible!&lt;n/&gt;&lt;s val=\&quot;TechDescription\&quot;&gt;+14 Endurance&lt;n/&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Increases armor by +6.&lt;/n&gt;&lt;/n&gt;&lt;c val=\&quot;00FF00\&quot;&gt;Set bonus: +3 Strength, +8% Attack speed.&lt;/c&gt;&quot;);
                        CatalogFieldValueSet(c_gameCatalogButton, &quot;HeavyTowerShield&quot;, &quot;Tooltip&quot;, lv_i, &quot;Provides excellent protection against those pesky archers and makes you feel reinvigorated every time the shield protects you from a projectile.&lt;n/&gt;&lt;s val=\&quot;TechDescription\&quot;&gt;+8 Endurance&lt;n/&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Increases armor by +5.&lt;n/&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Ranged attacks against you deal &lt;d ref=\&quot;1-Behavior,HeavyTowerShield,DamageResponse.ModifyFraction * 100\&quot; precision=\&quot;2\&quot;/&gt;% less damage and restore +1 stamina.&lt;/s&gt;&lt;/n&gt;&lt;/n&gt;&lt;c val=\&quot;00FF00\&quot;&gt;Set bonus: +3 Strength, +8% Attack speed.&lt;/c&gt;&quot;);
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_t + 3.0), 0));
                    }
                    else {
                        CatalogFieldValueSet(c_gameCatalogButton, &quot;HeavyIronBreastplate&quot;, &quot;Tooltip&quot;, lv_i, &quot;This heavy plate provides excellent protection against most kinds of dangers. Combined with a heavy tower shield you will become nigh invincible!&lt;n/&gt;&lt;s val=\&quot;TechDescription\&quot;&gt;+14 Endurance&lt;n/&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Increases armor by +6.&lt;/n&gt;&lt;/n&gt;&lt;c val=\&quot;C0C0C0\&quot;&gt;Set bonus: +3 Strength, +8% Attack speed.&lt;/n&gt;(Requires Heavy Tower Shield)&lt;/c&gt;&quot;);
                        CatalogFieldValueSet(c_gameCatalogButton, &quot;HeavyTowerShield&quot;, &quot;Tooltip&quot;, lv_i, &quot;Provides excellent protection against those pesky archers and makes you feel reinvigorated every time the shield protects you from a projectile.&lt;n/&gt;&lt;s val=\&quot;TechDescription\&quot;&gt;+8 Endurance&lt;n/&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Increases armor by +5.&lt;n/&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Ranged attacks against you deal &lt;d ref=\&quot;1-Behavior,HeavyTowerShield,DamageResponse.ModifyFraction * 100\&quot; precision=\&quot;2\&quot;/&gt;% less damage and restore +1 stamina.&lt;/s&gt;&lt;/n&gt;&lt;/n&gt;&lt;c val=\&quot;C0C0C0\&quot;&gt;Set bonus: +3 Strength, +8% Attack speed.&lt;/n&gt;(Requires Heavy Iron Breastplate)&lt;/c&gt;&quot;);
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i, FixedToString((lv_t - 3.0), 0));
                    }
                }
                else if(set == &quot;SetRepeater&quot;){
                    setName += &quot;Repeater&quot;;
                    if (activate) {
                        CatalogFieldValueSet(c_gameCatalogButton, &quot;RepeatingCrossbow&quot;, &quot;Tooltip&quot;, lv_i, &quot;An engineering masterpiece. Miniaturized split chambers allows for several bolts to be fired in rapid succession, at the cost of some firepower and reload speed however.&lt;/n&gt;&lt;s val=\&quot;TechDescription\&quot;&gt;+3 Strength&lt;/n&gt;+3 Dexterity&lt;/n&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Increases your attack range to 4.5.&lt;/n&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Fires 2 additional bolts at enemies near the target, but your attacks only deal 50% damage and your base attack speed is reduced.&lt;/s&gt;&lt;/n&gt;&lt;/n&gt;&lt;c val=\&quot;00FF00\&quot;&gt;Set bonus: &lt;d ref=\&quot;Effect,RepeaterStats,Amount\&quot;/&gt;% Chance to fire 1 extra bolt.&lt;/n&gt;Each point in Foraging adds 1.2%&lt;/n&gt;Each point in Forestry adds .6%&quot;);
                        CatalogFieldValueSet(c_gameCatalogButton, &quot;BearShamansShroud&quot;, &quot;Tooltip&quot;, lv_i, &quot;The ancient kobold shamans lived in harmony with all the beasts in the forest. Together they protected their realm against all kinds of evil being for hundreds of years.&lt;n/&gt;&lt;s val=\&quot;TechDescription\&quot;&gt;+4 Endurance&lt;n/&gt;+5 Intelligence&lt;n/&gt;+5 Willpower (+&lt;d ref=\&quot;Effect,BearShamanWillpower,Amount\&quot;/&gt;)&lt;n/&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Increases armor by +3.&lt;/n&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Bear pets gain +2 armor.&lt;/n&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Gain additional Willpower equal to 10% of your attack damage.&lt;/s&gt;&lt;/n&gt;&lt;/n&gt;&lt;c val=\&quot;00FF00\&quot;&gt;Set bonus: &lt;d ref=\&quot;Effect,RepeaterStats,Amount\&quot;/&gt;% Chance to fire 1 extra bolt.&lt;/n&gt;Each point in Foraging adds 1.2%&lt;/n&gt;Each point in Forestry adds .6%&quot;);
                    }
                    else {
                        CatalogFieldValueSet(c_gameCatalogButton, &quot;RepeatingCrossbow&quot;, &quot;Tooltip&quot;, lv_i, &quot;An engineering masterpiece. Miniaturized split chambers allows for several bolts to be fired in rapid succession, at the cost of some firepower and reload speed however.&lt;/n&gt;&lt;s val=\&quot;TechDescription\&quot;&gt;+3 Strength&lt;/n&gt;+3 Dexterity&lt;/n&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Increases your attack range to 4.5.&lt;/n&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Fires 2 additional bolts at enemies near the target, but your attacks only deal 50% damage and your base attack speed is reduced.&lt;/s&gt;&lt;/n&gt;&lt;/n&gt;&lt;c val=\&quot;C0C0C0\&quot;&gt;Set bonus: &lt;d ref=\&quot;Effect,RepeaterStats,Amount\&quot;/&gt;% Chance to fire 1 extra bolt.&lt;/n&gt;Each point in Foraging adds 1.2%&lt;/n&gt;Each point in Forestry adds .6%&lt;/n&gt;(Requires Bear Shaman&apos;s Shroud)&lt;/c&gt;&quot;);
                        CatalogFieldValueSet(c_gameCatalogButton, &quot;BearShamansShroud&quot;, &quot;Tooltip&quot;, lv_i, &quot;The ancient kobold shamans lived in harmony with all the beasts in the forest. Together they protected their realm against all kinds of evil being for hundreds of years.&lt;n/&gt;&lt;s val=\&quot;TechDescription\&quot;&gt;+4 Endurance&lt;n/&gt;+5 Intelligence&lt;n/&gt;+5 Willpower (+&lt;d ref=\&quot;Effect,BearShamanWillpower,Amount\&quot;/&gt;)&lt;n/&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Increases armor by +3.&lt;/n&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Bear pets gain +2 armor.&lt;/n&gt;&lt;c val=\&quot;FFFF80\&quot;&gt;Passive:&lt;/c&gt; Gain additional Willpower equal to 10% of your attack damage.&lt;/s&gt;&lt;/n&gt;&lt;/n&gt;&lt;c val=\&quot;C0C0C0\&quot;&gt;Set bonus: &lt;d ref=\&quot;Effect,RepeaterStats,Amount\&quot;/&gt;% Chance to fire 1 extra bolt.&lt;/n&gt;Each point in Foraging adds 1.2%&lt;/n&gt;Each point in Forestry adds .6%&lt;/n&gt;(Requires Repeating Crossbow)&lt;/c&gt;&quot;);
                    }
                }
                gf_Quicktag(lv_unit, TextWithColor(StringToText(setName), txtColor), 2.0, 24);
                gf_UpdateStatsAll(lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ItemSets_Init () {
                gt_ItemSets = TriggerCreate(&quot;gt_ItemSets_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_ItemSets, null, &quot;SetHeavyIron&quot;, c_unitBehaviorChangeActivate);
                TriggerAddEventUnitBehaviorChange(gt_ItemSets, null, &quot;SetHeavyIron&quot;, c_unitBehaviorChangeDeactivate);
                TriggerAddEventUnitBehaviorChange(gt_ItemSets, null, &quot;SetRepeater&quot;, c_unitBehaviorChangeActivate);
                TriggerAddEventUnitBehaviorChange(gt_ItemSets, null, &quot;SetRepeater&quot;, c_unitBehaviorChangeDeactivate);
            }
        </ScriptCode>
        <InitFunc>gt_ItemSets_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="04865C51">
        <ScriptCode>
            bool ItemDynamicTooltip_Periodic(bool cond, bool actions){
                fixed foraging;
                fixed mining;
                fixed forestry;
                fixed cooking;
                fixed artisan;
                int i = 0;
                for(;i&lt;10; i+=1){
                    if (PlayerStatus(i) == c_playerStatusActive){
                        foraging = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForagingStats&quot;, &quot;Amount&quot;, i));
                        mining = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ExcavatingStats&quot;, &quot;Amount&quot;, i));
                        forestry = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ForestingStats&quot;, &quot;Amount&quot;, i));
                        cooking = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CheffingStats&quot;, &quot;Amount&quot;, i));
                        artisan = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ArtisanshipStats&quot;, &quot;Amount&quot;, i));
                        // Repeater Set
                        CatalogFieldValueSet(c_gameCatalogEffect, &quot;RepeaterStats&quot;, &quot;Amount&quot;, i, FixedToString(10 + (forestry*.6 + foraging*1.2),0));
                    }
                }
                return true;
            }
            void ItemDynamicTooltip_Init(){
                TriggerAddEventTimePeriodic(TriggerCreate(&quot;ItemDynamicTooltip_Periodic&quot;), 1.5, c_timeGame);
            }
        </ScriptCode>
        <InitFunc>ItemDynamicTooltip_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7AEDD740">
        <ScriptCode>
            bool gt_GenericUseItem_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(EventUnit()) == &quot;Kobold&quot;) &amp;&amp; ((UnitGetType(EventUnitInventoryItem()) == &quot;RawLamb&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;RawWolfMeat&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;RawPheasant&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;RawStagMeat&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;RoastedLamb&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;WolfSteak&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;RoastedPheasantWithBerrySauce&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;SpicedLambFeast&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;GrilledWolfEntrecote&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;BeerBraisedPheasant&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;SmokedLambSirloin&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;StagStew&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;GiantSunfish&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;SlipperyEel&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;ToxicFrog&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;ForestTrout&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;HighlandGuppy&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;AlbinoCavefish&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;StripedLurker&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;JewelDanio&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;WaterScorpion&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;FireAmmonite&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;BlindRainfish&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;TigerGourami&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;MurlocTreat&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;HandfulofBerries&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;Beer&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;Sageberry&quot;))) {
                    gf_EatFood(EventUnit(), EventUnitInventoryItem(), true);
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;Nightcrawler&quot;)) {
                    gf_ItemNightcrawler(EventUnit(), EventUnitInventoryItem(), true);
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;LumberParts&quot;)) {
                    gf_ItemLumberParts(EventUnit(), EventUnitInventoryItem());
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;CleansingDraught&quot;)) {
                    gf_ItemCleansingPotion(EventUnit(), EventUnitInventoryItem(), true);
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;BearPelt&quot;)) {
                    gf_ItemBearPeltSplit(EventUnit(), EventUnitInventoryItem(), true);
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;ReapersHand&quot;)) {
                    gf_ItemRaiseDead(EventUnit(), EventUnitInventoryItem(), true);
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;IronShovel&quot;)) {
                    gf_ItemShovelDig(EventUnit(), EventUnitInventoryItem(), true);
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;MurlocDoomhammer&quot;)) {
                    gf_ItemMurlocDoomhammer(EventUnit(), EventUnitInventoryItem());
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;GoldenHauberk&quot;)) {
                    gf_ItemGoldenHauberk(EventUnit(), EventUnitInventoryItem());
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;Demonward&quot;)) {
                    gf_ItemDemonward(EventUnit(), EventUnitInventoryItem());
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;OrbofDarkness&quot;)) {
                    gf_ItemOrbofDarkness(EventUnit(), EventUnitInventoryItem(), true);
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;LiquidatorSpellblade&quot;)) {
                    gf_ItemLiquidatorSpellblade(EventUnit());
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;ViciousJavelin&quot;)) {
                    gf_ItemJavelin(EventUnit());
                }
                else if ((UnitGetType(EventUnitInventoryItem()) == &quot;KoboldFireworks&quot;)) {
                    gf_ItemFireworks(EventUnit(), EventUnitInventoryItem());
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GenericUseItem_Init () {
                gt_GenericUseItem = TriggerCreate(&quot;gt_GenericUseItem_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_GenericUseItem, null, c_unitInventoryChangeUses, null);
            }
        </ScriptCode>
        <InitFunc>gt_GenericUseItem_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="FB76EA3E">
        <ScriptCode>
            bool gt_EquipmentGain_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                    if (!((UnitInventoryContainer(EventUnitInventoryItem()) != gv_backpackSlot))) {
                        return false;
                    }
                    if (!((UnitIsAlive(EventUnit()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextExpressionSetToken(&quot;Param/Expression/699539F1&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/B702D98B&quot;));
                TextExpressionSetToken(&quot;Param/Expression/699539F1&quot;, &quot;B&quot;, UnitTypeGetName(UnitGetType(EventUnitInventoryItem())));
                TextExpressionSetToken(&quot;Param/Expression/699539F1&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/F923D8E9&quot;));
                TriggerDebugOutput(1, TextExpressionAssemble(&quot;Param/Expression/699539F1&quot;), false);
                gf_EquipmentChange(UnitGetOwner(EventUnit()), EventUnitInventoryItem(), false, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EquipmentGain_Init () {
                gt_EquipmentGain = TriggerCreate(&quot;gt_EquipmentGain_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_EquipmentGain, null, c_unitInventoryChangeGains, null);
            }
        </ScriptCode>
        <InitFunc>gt_EquipmentGain_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="59BCE49A">
        <ScriptCode>
            bool gt_EquipmentMoveIn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                    if (!((UnitInventoryContainer(EventUnitInventoryItem()) != gv_backpackSlot))) {
                        return false;
                    }
                    if (!((UnitIsAlive(EventUnit()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextExpressionSetToken(&quot;Param/Expression/820E5BBB&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/E92BA087&quot;));
                TextExpressionSetToken(&quot;Param/Expression/820E5BBB&quot;, &quot;B&quot;, UnitTypeGetName(UnitGetType(EventUnitInventoryItem())));
                TextExpressionSetToken(&quot;Param/Expression/820E5BBB&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/7DD19647&quot;));
                TriggerDebugOutput(1, TextExpressionAssemble(&quot;Param/Expression/820E5BBB&quot;), false);
                gf_EquipmentChange(UnitGetOwner(EventUnit()), EventUnitInventoryItem(), false, 2);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EquipmentMoveIn_Init () {
                gt_EquipmentMoveIn = TriggerCreate(&quot;gt_EquipmentMoveIn_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_EquipmentMoveIn, null, c_unitInventoryChangeMoves, null);
            }
        </ScriptCode>
        <InitFunc>gt_EquipmentMoveIn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4E67F6B3">
        <ScriptCode>
            bool gt_EquipmentMoveOut_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(EventUnit());
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                    if (!((EventUnitInventoryItemContainer() != gv_backpackSlot))) {
                        return false;
                    }
                    if (!((UnitIsAlive(EventUnit()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextExpressionSetToken(&quot;Param/Expression/4478EC45&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/2F2176E3&quot;));
                TextExpressionSetToken(&quot;Param/Expression/4478EC45&quot;, &quot;B&quot;, UnitTypeGetName(UnitGetType(EventUnitInventoryItem())));
                TextExpressionSetToken(&quot;Param/Expression/4478EC45&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/A01473A4&quot;));
                TriggerDebugOutput(1, TextExpressionAssemble(&quot;Param/Expression/4478EC45&quot;), false);
                gf_EquipmentChange(UnitGetOwner(EventUnit()), EventUnitInventoryItem(), true, 3);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EquipmentMoveOut_Init () {
                gt_EquipmentMoveOut = TriggerCreate(&quot;gt_EquipmentMoveOut_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_EquipmentMoveOut, null, c_unitInventoryChangeMoves, null);
            }
        </ScriptCode>
        <InitFunc>gt_EquipmentMoveOut_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BECEB122">
        <ScriptCode>
            bool gt_EquipmentLose_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                    if (!((EventUnitInventoryItemContainer() != gv_backpackSlot))) {
                        return false;
                    }
                    if (!((UnitIsAlive(EventUnit()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextExpressionSetToken(&quot;Param/Expression/1F19A392&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/1392725B&quot;));
                TextExpressionSetToken(&quot;Param/Expression/1F19A392&quot;, &quot;B&quot;, UnitTypeGetName(UnitGetType(EventUnitInventoryItem())));
                TextExpressionSetToken(&quot;Param/Expression/1F19A392&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/B7B1B99A&quot;));
                TriggerDebugOutput(1, TextExpressionAssemble(&quot;Param/Expression/1F19A392&quot;), false);
                gf_EquipmentChange(UnitGetOwner(EventUnit()), EventUnitInventoryItem(), true, 4);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EquipmentLose_Init () {
                gt_EquipmentLose = TriggerCreate(&quot;gt_EquipmentLose_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_EquipmentLose, null, c_unitInventoryChangeLoses, null);
            }
        </ScriptCode>
        <InitFunc>gt_EquipmentLose_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0F0A7716">
        <ScriptCode>
            const string c_repeatingCrossbowBonus = &quot;&lt;c val=\&quot;80,80,125\&quot;&gt;Extra bolt!&lt;/c&gt;&quot;;
            bool RepeatingCrossbow_OnEffect(bool cond, bool actions){
                unit cast = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                unit targ = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                int cPlayer = UnitGetOwner(cast);
                fixed chance = .1 + .006 * gv_skillForestry[cPlayer] + .012 * gv_skillForaging[cPlayer];
                string effect = &quot;RepeatingCrossbowPersistent&quot;;
                if (RandomFixed(0,1) &lt;= chance &amp;&amp; UnitHasBehavior(cast, &quot;SetRepeater&quot;)){
                    effect = &quot;RepeatingCrossbowPersistentSetBonus&quot;;
                    gf_Quicktag(cast, StringToText(c_repeatingCrossbowBonus), 2.5, 15);
                }
                
                UnitCreateEffectUnit(cast, effect, targ);
                return true;
            }
            void RepeatingCrossbow_Init(){
                TriggerAddEventPlayerEffectUsed(TriggerCreate(&quot;RepeatingCrossbow_OnEffect&quot;), c_playerAny, &quot;RepeatingCrossbowSet&quot;);
            }
        </ScriptCode>
        <InitFunc>RepeatingCrossbow_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="131CA565">
        <ScriptCode>
            bool gt_ScutumJoy_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                // Conditions
                if (testConds) {
                    if (!((gv_scutumExclaimed[lv_i] == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_scutumExclaimed[lv_i] = true;
                TextExpressionSetToken(&quot;Param/Expression/1D6E9D4B&quot;, &quot;A&quot;, gf_GetPlayerName(lv_i, 0));
                TextExpressionSetToken(&quot;Param/Expression/1D6E9D4B&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/ED1BAF35&quot;));
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, (TextWithColor(TextExpressionAssemble(&quot;Param/Expression/1D6E9D4B&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal(&quot;Param/Value/9E4C6762&quot;)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ScutumJoy_Init () {
                gt_ScutumJoy = TriggerCreate(&quot;gt_ScutumJoy_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ScutumJoy, c_playerAny, &quot;SpikedShadowstoneScutumExclamation&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ScutumJoy_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C5101758">
        <ScriptCode>
            bool gt_SleepingBag_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;AnimPlay Sleep Death&quot;);
                Wait(1.0, c_timeGame);
                libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;AnimSetPaused Sleep&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SleepingBag_Init () {
                gt_SleepingBag = TriggerCreate(&quot;gt_SleepingBag_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_SleepingBag, c_playerAny, &quot;SleepingBagDelayApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SleepingBag_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="01800AA1">
        <ScriptCode>
            bool gt_BlunderbussCounter_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_gameStats.lv_boomstickTime += 1;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BlunderbussCounter_Init () {
                gt_BlunderbussCounter = TriggerCreate(&quot;gt_BlunderbussCounter_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BlunderbussCounter, c_playerAny, &quot;BlunderbussTimeCounter&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BlunderbussCounter_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="403AB498">
        <ScriptCode>
            bool gt_WandProcDmg_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_energyBurn;
                fixed lv_damage;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_energyBurn = (0.04 * UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergyMax, c_unitPropCurrent));
                lv_damage = (2.5 * libNtve_gf_ArithmeticRealClamp(UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, c_unitPropCurrent), 0.0, lv_energyBurn));
                UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, c_unitPropCurrent) - lv_energyBurn));
                UnitDamage(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;ElderWandBonusDamage&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_damage);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WandProcDmg_Init () {
                gt_WandProcDmg = TriggerCreate(&quot;gt_WandProcDmg_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WandProcDmg, c_playerAny, &quot;ElderWandTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WandProcDmg_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4ED25982">
        <ScriptCode>
            bool gt_ReapersHandCombine_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_inventory = UnitInventoryGroup(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_inventory = UnitGroupFilter(&quot;SkeletalFinger&quot;, c_playerAny, lv_inventory, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt;= 3)) {
                    lv_inventory = UnitGroupFilter(&quot;SkeletalFinger&quot;, c_playerAny, lv_inventory, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3);
                    UnitGroupLoopBegin(lv_inventory);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_CreateItemForUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;ReapersHand&quot;, 1);
                    SoundPlay(SoundLink(&quot;SkeletalTransmutation&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))), 100.0, 0.0);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReapersHandCombine_Init () {
                gt_ReapersHandCombine = TriggerCreate(&quot;gt_ReapersHandCombine_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ReapersHandCombine, c_playerAny, &quot;SkeletalFingersTransmuteTrig&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ReapersHandCombine_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0841B894">
        <ScriptCode>
            bool gt_HeavyTowerShieldTrg_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_stamina += 1.0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeavyTowerShieldTrg_Init () {
                gt_HeavyTowerShieldTrg = TriggerCreate(&quot;gt_HeavyTowerShieldTrg_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_HeavyTowerShieldTrg, c_playerAny, &quot;HeavyTowerShieldTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_HeavyTowerShieldTrg_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="46CB8756">
        <ScriptCode>
            bool gt_FearTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_target;
                unit lv_caster;
                point lv_sourcePoint;
                // Variable Initialization
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_caster = UnitBehaviorEffectUnit(lv_target, &quot;Fear&quot;, c_effectUnitCaster, 0);
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(lv_caster))) {
                        return false;
                    }
                    if (!(gf_UnitExists(lv_target))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_sourcePoint = UnitGetPosition(lv_caster);
                if ((lv_sourcePoint == null)) {
                    lv_sourcePoint = PointWithOffsetPolar(UnitGetPosition(lv_target), 1.0, libNtve_gf_RandomAngle());
                }
                else {
                }
                UnitIssueOrder(lv_target, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(lv_target), RandomFixed(1.0, 1.5), (AngleBetweenPoints(lv_sourcePoint, UnitGetPosition(lv_target)) + RandomFixed(-50.0, 50.0)))), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FearTrigger_Init () {
                gt_FearTrigger = TriggerCreate(&quot;gt_FearTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FearTrigger, c_playerAny, &quot;FearTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FearTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8C0905E2">
        <ScriptCode>
            bool gt_BloodthirstyGreed_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 1);
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BloodthirstyGreed_Init () {
                gt_BloodthirstyGreed = TriggerCreate(&quot;gt_BloodthirstyGreed_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BloodthirstyGreed, c_playerAny, &quot;BloodthirstyPirateGreed&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BloodthirstyGreed_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A913C580">
        <ScriptCode>
            bool gt_ScrollofTransmutation_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_t;
                point lv_p;
                fixed lv_a;
                int lv_o;
                int lv_petOwner;
                int lv_stacks;
                // Variable Initialization
                lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_p = UnitGetPosition(lv_t);
                lv_a = UnitGetFacing(lv_t);
                lv_o = UnitGetOwner(lv_t);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(lv_t) == &quot;StoneDeposit&quot;)) {
                    UnitRemove(lv_t);
                    UnitCreate(1, &quot;GoldDeposit&quot;, c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
                    UnitSetCustomValue(UnitLastCreated(), 0, RandomInt(80, 120));
                    gf_UpdateResourceTooltip(UnitLastCreated());
                }
                else if ((UnitGetType(lv_t) == &quot;MapleTree&quot;)) {
                    UnitRemove(lv_t);
                    UnitCreate(1, &quot;ElderTree&quot;, c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
                    UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
                }
                else if ((UnitGetType(lv_t) == &quot;BerryBush&quot;)) {
                    UnitRemove(lv_t);
                    UnitGroupLoopBegin(UnitGroup(&quot;Berry&quot;, c_playerAny, RegionCircle(lv_p, 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UnitCreate(1, &quot;CulinaryHerbBush&quot;, c_unitCreateIgnorePlacement, 0, lv_p, libNtve_gf_RandomAngle());
                    gf_SpawnHerbs(UnitLastCreated());
                }
                else if ((UnitGetType(lv_t) == &quot;Bear&quot;)) {
                    if ((UnitHasBehavior(lv_t, &quot;Tamed&quot;) == true)) {
                        lv_petOwner = UnitGetOwner(lv_t);
                    }
                    else {
                    }
                    lv_stacks = UnitBehaviorCount(lv_t, &quot;PredatoryStrength&quot;);
                    gf_SetScaledStats(&quot;FrostBear&quot;, lv_o);
                    UnitRemove(lv_t);
                    UnitCreate(1, &quot;FrostBear&quot;, c_unitCreateIgnorePlacement, lv_o, lv_p, lv_a);
                    UnitBehaviorAdd(UnitLastCreated(), &quot;PredatoryStrength&quot;, UnitLastCreated(), lv_stacks);
                    if ((lv_petOwner != 0)) {
                        UnitCreateEffectUnit(gv_playerData[lv_o].lv_kobold, &quot;TamedApply&quot;, UnitLastCreated());
                        UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/1C61D891&quot;), gf_GetPlayerName(lv_o, 0), StringExternal(&quot;Param/Value/DE60C76A&quot;));
                        UnitGroupAdd(gv_pets[lv_o], UnitLastCreated());
                        gf_UpdatePetStats(lv_o);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ScrollofTransmutation_Init () {
                gt_ScrollofTransmutation = TriggerCreate(&quot;gt_ScrollofTransmutation_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ScrollofTransmutation, c_playerAny, &quot;ScrollofTransmutation&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ScrollofTransmutation_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AE8A16BE">
        <ScriptCode>
            bool gt_MurlocSkullFragments_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_fragments;
                // Variable Initialization
                lv_fragments = UnitGroupFilter(&quot;MurlocSkullFragment&quot;, c_playerAny, UnitInventoryGroup(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupCount(lv_fragments, c_unitCountAlive) == 3)) {
                    UnitGroupLoopBegin(lv_fragments);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_DropandRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    gf_CreateItemForUnit(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)), &quot;MurlocSkull&quot;, 1);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)))), c_messageAreaError, StringExternal(&quot;Param/Value/B41E2EA7&quot;));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocSkullFragments_Init () {
                gt_MurlocSkullFragments = TriggerCreate(&quot;gt_MurlocSkullFragments_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocSkullFragments, c_playerAny, &quot;MurlocSkullFragments&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocSkullFragments_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0DAFC1F9">
        <ScriptCode>
            bool gt_FelFlamesTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                const fixed lv_stealValue = 3.0;
                unit lv_caster;
                unit lv_target;
                fixed lv_intensity;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_intensity = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;FelFireTorchIntensity&quot;, &quot;Amount&quot;, UnitGetOwner(lv_caster)));
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(lv_target) == &quot;Kobold&quot;)) {
                    gv_playerData[UnitGetOwner(lv_target)].lv_warmth -= lv_stealValue;
                }
                else {
                }
                if ((lv_intensity &gt;= 35.0)) {
                    UnitBehaviorAdd(lv_target, &quot;FelFlames&quot;, lv_caster, 1);
                }
                else {
                }
                gf_ModifyTorchIntensity(UnitGetOwner(lv_caster), lv_stealValue);
                UnitBehaviorAdd(lv_caster, &quot;FelFireTorchGracePeriod&quot;, lv_caster, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FelFlamesTrigger_Init () {
                gt_FelFlamesTrigger = TriggerCreate(&quot;gt_FelFlamesTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FelFlamesTrigger, c_playerAny, &quot;FelFlamesTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FelFlamesTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="82A8B21E">
        <ScriptCode>
            bool gt_BloodcleaverDamage_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_caster;
                unit lv_target;
                fixed lv_powerFactor;
                fixed lv_targetDamage;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_powerFactor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;BloodcleaverStats&quot;, &quot;Amount&quot;, UnitGetOwner(lv_caster)));
                lv_targetDamage = (lv_powerFactor * (0.04 * UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent)));
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitDamage(lv_caster, &quot;BloodcleaverDamageDummy&quot;, lv_caster, ((UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent) * 0.01) * lv_powerFactor));
                UnitDamage(lv_caster, &quot;BloodcleaverDamageDummy&quot;, lv_target, lv_targetDamage);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BloodcleaverDamage_Init () {
                gt_BloodcleaverDamage = TriggerCreate(&quot;gt_BloodcleaverDamage_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BloodcleaverDamage, c_playerAny, &quot;BloodcleaverTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BloodcleaverDamage_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="31F20A1F">
        <ScriptCode>
            bool gt_BloodcleaverDrain_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_caster;
                unit lv_target;
                fixed lv_powerFactor;
                fixed lv_heals;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_powerFactor = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;BloodcleaverStats&quot;, &quot;Amount&quot;, UnitGetOwner(lv_caster)));
                lv_heals = (UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) * (0.2 * lv_powerFactor));
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(lv_caster, &quot;BloodcleaverHaste&quot;, lv_caster, 1);
                lv_heals = libNtve_gf_ArithmeticRealClamp(lv_heals, 0.0, 200.0);
                if ((lv_heals &gt;= 1)) {
                    gf_HealUnit(lv_caster, lv_caster, lv_heals, true);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BloodcleaverDrain_Init () {
                gt_BloodcleaverDrain = TriggerCreate(&quot;gt_BloodcleaverDrain_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BloodcleaverDrain, c_playerAny, &quot;BloodcleaverDrain&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BloodcleaverDrain_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BFDADE7D">
        <ScriptCode>
            bool gt_FrostNeedleTransform_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnitInventoryItem()) == &quot;FrostNeedle&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DropandRemove(EventUnitInventoryItem());
                gf_CreateItemForUnit(EventUnit(), &quot;FrostBarrier&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FrostNeedleTransform_Init () {
                gt_FrostNeedleTransform = TriggerCreate(&quot;gt_FrostNeedleTransform_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_FrostNeedleTransform, null, c_unitInventoryChangeUses, null);
            }
        </ScriptCode>
        <InitFunc>gt_FrostNeedleTransform_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A2896A3B">
        <ScriptCode>
            bool gt_FrostBarrierTransform_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnitInventoryItem()) == &quot;FrostBarrier&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DropandRemove(EventUnitInventoryItem());
                gf_CreateItemForUnit(EventUnit(), &quot;FrostNeedle&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FrostBarrierTransform_Init () {
                gt_FrostBarrierTransform = TriggerCreate(&quot;gt_FrostBarrierTransform_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_FrostBarrierTransform, null, c_unitInventoryChangeUses, null);
            }
        </ScriptCode>
        <InitFunc>gt_FrostBarrierTransform_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7CE18CEF">
        <ScriptCode>
            bool gt_ScutumBlock_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_blocker;
                unit lv_attacker;
                int lv_i;
                fixed lv_damage;
                // Variable Initialization
                lv_blocker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_i = UnitGetOwner(lv_blocker);
                lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Advancedtag(lv_blocker, UnitGetOwner(lv_blocker), StringExternal(&quot;Param/Value/32F4C75C&quot;), 2.0, 24);
                gf_Advancedtag(lv_blocker, UnitGetOwner(lv_attacker), StringExternal(&quot;Param/Value/4DFFF1B3&quot;), 2.0, 24);
                if ((DistanceBetweenPoints(UnitGetPosition(lv_blocker), UnitGetPosition(lv_attacker)) &lt;= gv_meleeRange)) {
                    UnitDamage(lv_blocker, &quot;MeleeDamageDummy&quot;, lv_attacker, lv_damage);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ScutumBlock_Init () {
                gt_ScutumBlock = TriggerCreate(&quot;gt_ScutumBlock_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_ScutumBlock, c_playerAny, &quot;SpikedShadowstoneScutumBlockerRemove&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_ScutumBlock_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="290362F2">
        <ScriptCode>
            bool gt_BucklerBlock_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_blocker;
                unit lv_attacker;
                int lv_i;
                fixed lv_damage;
                // Variable Initialization
                lv_blocker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_i = UnitGetOwner(lv_blocker);
                lv_damage = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;Physique&quot;, &quot;AttributeBonus[Armored]&quot;, lv_i)) * 0.5);
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Advancedtag(lv_blocker, UnitGetOwner(lv_blocker), StringExternal(&quot;Param/Value/3F3B73B0&quot;), 2.0, 24);
                gf_Advancedtag(lv_blocker, UnitGetOwner(lv_attacker), StringExternal(&quot;Param/Value/3D29D8D7&quot;), 2.0, 24);
                if ((DistanceBetweenPoints(UnitGetPosition(lv_blocker), UnitGetPosition(lv_attacker)) &lt;= gv_meleeRange)) {
                    UnitDamage(lv_blocker, &quot;MeleeDamageDummy&quot;, lv_attacker, lv_damage);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BucklerBlock_Init () {
                gt_BucklerBlock = TriggerCreate(&quot;gt_BucklerBlock_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BucklerBlock, c_playerAny, &quot;IronBandedBucklerBlockerRemove&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BucklerBlock_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="FD4D2777">
        <ScriptCode>
            bool gt_GoldenHauberkHeal_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_haels;
                // Variable Initialization
                lv_haels = (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent) * (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StatsGoldenHauberkHeal&quot;, &quot;Amount&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)))) * 0.01));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_haels, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GoldenHauberkHeal_Init () {
                gt_GoldenHauberkHeal = TriggerCreate(&quot;gt_GoldenHauberkHeal_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GoldenHauberkHeal, c_playerAny, &quot;GoldenHauberkHealTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GoldenHauberkHeal_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3823731E">
        <ScriptCode>
            bool gt_LightLeatherShieldTrigger_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_stamina -= 5.0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LightLeatherShieldTrigger_Init () {
                gt_LightLeatherShieldTrigger = TriggerCreate(&quot;gt_LightLeatherShieldTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_LightLeatherShieldTrigger, c_playerAny, &quot;LightLeatherShieldTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_LightLeatherShieldTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C5E9F240">
        <ScriptCode>
            bool gt_CelestialOrbHeal_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_amount;
                // Variable Initialization
                lv_amount = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;CelestialOrbHealAmount&quot;, &quot;Amount&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;CelestialOrbCooldown&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
                gf_HealUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_amount, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CelestialOrbHeal_Init () {
                gt_CelestialOrbHeal = TriggerCreate(&quot;gt_CelestialOrbHeal_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_CelestialOrbHeal, c_playerAny, &quot;CelestialOrbHeal&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_CelestialOrbHeal_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="E421B345">
        <ScriptCode>
            bool gt_JavelinDummyCooldown_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_caster;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitAbilitySpend(lv_caster, AbilityCommand(&quot;JavelinCooldown&quot;, 0), c_spendLocationPlayer);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_JavelinDummyCooldown_Init () {
                gt_JavelinDummyCooldown = TriggerCreate(&quot;gt_JavelinDummyCooldown_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_JavelinDummyCooldown, c_playerAny, &quot;ViciousJavelinLM&quot;);
            }
        </ScriptCode>
    </Element>
    <Element Type="CustomScript" Id="E73E122E">
        <ScriptCode>
            bool gt_LiquidatorSpellblade_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_caster;
                unit lv_target;
                // Variable Initialization
                lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_CreateModelAtPoint(&quot;LiquidatorSpellbladeLaunch&quot;, UnitGetPosition(lv_caster));
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((AngleBetweenPoints(UnitGetPosition(lv_caster), UnitGetPosition(lv_target)) + 90.0)));
                UnitSetPosition(lv_caster, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_target), (UnitGetPropertyFixed(lv_caster, c_unitPropRadius, c_unitPropCurrent) + UnitGetPropertyFixed(lv_target, c_unitPropRadius, c_unitPropCurrent)), UnitGetPosition(lv_caster)), false);
                libNtve_gf_CreateModelAtPoint(&quot;LiquidatorSpellbladeImpact&quot;, UnitGetPosition(lv_caster));
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((AngleBetweenPoints(UnitGetPosition(lv_target), UnitGetPosition(lv_caster)) + 90.0)));
                UnitAbilitySpend(lv_caster, AbilityCommand(&quot;LiquidatorSpellbladeCooldown&quot;, 0), c_spendLocationPlayer);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LiquidatorSpellblade_Init () {
                gt_LiquidatorSpellblade = TriggerCreate(&quot;gt_LiquidatorSpellblade_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_LiquidatorSpellblade, c_playerAny, &quot;LiquidatorSpellbladeTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_LiquidatorSpellblade_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="14CFC691">
        <ScriptCode>
            bool gt_GravesingerGhoulSpawn_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SetScaledStats(&quot;Ghoul&quot;, lv_i);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GravesingerGhoulSpawn_Init () {
                gt_GravesingerGhoulSpawn = TriggerCreate(&quot;gt_GravesingerGhoulSpawn_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GravesingerGhoulSpawn, c_playerAny, &quot;SummonGhoul&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GravesingerGhoulSpawn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8D423C36">
        <ScriptCode>
            bool gt_MurlocketOn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(gv_playerData[UnitGetOwner(EventUnit())].lv_murlocSlaves);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;MurlocRebelSpirit&quot;, UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocketOn_Init () {
                gt_MurlocketOn = TriggerCreate(&quot;gt_MurlocketOn_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_MurlocketOn, null, &quot;TheMurlocket&quot;, c_unitBehaviorChangeActivate);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocketOn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="920D2C87">
        <ScriptCode>
            bool gt_MurlocketOff_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(gv_playerData[UnitGetOwner(EventUnit())].lv_murlocSlaves);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), &quot;MurlocRebelSpirit&quot;, 1);
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocketOff_Init () {
                gt_MurlocketOff = TriggerCreate(&quot;gt_MurlocketOff_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_MurlocketOff, null, &quot;TheMurlocket&quot;, c_unitBehaviorChangeDeactivate);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocketOff_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="70C59C64">
        <ScriptCode>
            bool gt_TwinThrowingAxesFrenzy_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_attacker;
                unit lv_target;
                int lv_i;
                // Variable Initialization
                lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_i = UnitGetOwner(lv_attacker);
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(gv_playerData[lv_i].lv_twinThrowingAxesFocus)) {
                    if ((gv_playerData[lv_i].lv_twinThrowingAxesFocus == lv_target)) {
                        UnitBehaviorAdd(lv_attacker, &quot;ThrowingFrenzy&quot;, lv_attacker, 1);
                    }
                    else {
                        gv_playerData[lv_i].lv_twinThrowingAxesFocus = lv_target;
                        UnitBehaviorRemove(lv_attacker, &quot;ThrowingFrenzy&quot;, 5);
                    }
                }
                else {
                    gv_playerData[lv_i].lv_twinThrowingAxesFocus = lv_target;
                    UnitBehaviorAdd(lv_attacker, &quot;ThrowingFrenzy&quot;, lv_attacker, 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TwinThrowingAxesFrenzy_Init () {
                gt_TwinThrowingAxesFrenzy = TriggerCreate(&quot;gt_TwinThrowingAxesFrenzy_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TwinThrowingAxesFrenzy, c_playerAny, &quot;TwinThrowingAxesLaunchLeft&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TwinThrowingAxesFrenzy, c_playerAny, &quot;TwinThrowingAxesLaunchRight&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TwinThrowingAxesFrenzy_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="6FB42C00">
        <Item Type="CustomScript" Id="0F28D391"/>
        <Item Type="CustomScript" Id="CAA346FE"/>
        <Item Type="CustomScript" Id="CF246CEC"/>
        <Item Type="CustomScript" Id="B5E63BE6"/>
    </Element>
    <Element Type="CustomScript" Id="0F28D391">
        <ScriptCode>
            bool gt_SetupFishData_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_fishRegion[1] = gv_regionFishMarSara001;
                RegionAddRegion(gv_fishRegion[1], gv_regionFishMarSara001);
                gv_fishRegionEleveation[1] = 2.0;
                gv_fishRegion[2] = gv_regionFishBelShir001;
                RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir002);
                RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir003);
                RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir004);
                RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir005);
                RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir006);
                RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir007);
                RegionAddRegion(gv_fishRegion[2], gv_regionFishBelShir008);
                gv_fishRegionEleveation[2] = 6.0;
                gv_fishRegion[3] = gv_regionFishShakuras001;
                RegionAddRegion(gv_fishRegion[3], gv_regionFishShakuras002);
                RegionAddRegion(gv_fishRegion[3], gv_regionFishShakuras003);
                gv_fishRegionEleveation[3] = 6.0;
                gv_fishRegion[4] = gv_regionFishSouthlands2001;
                RegionAddRegion(gv_fishRegion[4], gv_regionFishSouthlands2002);
                gv_fishRegionEleveation[4] = 7.65;
                gv_fishRegion[5] = gv_regionFishSouthlands3001;
                RegionAddRegion(gv_fishRegion[5], gv_regionFishSouthlands3002);
                gv_fishRegionEleveation[5] = 11.5;
                gv_fishRegion[6] = gv_regionFishZhakulDas001;
                RegionAddRegion(gv_fishRegion[6], gv_regionFishZhakulDas002);
                gv_fishRegionEleveation[6] = 11.0;
                gv_fishReward[1] = &quot;GiantSunfish&quot;;
                gv_fishReward[2] = &quot;SlipperyEel&quot;;
                gv_fishReward[3] = &quot;ToxicFrog&quot;;
                gv_fishReward[4] = &quot;ForestTrout&quot;;
                gv_fishReward[5] = &quot;HighlandGuppy&quot;;
                gv_fishReward[6] = &quot;AlbinoCavefish&quot;;
                gv_fishReward[7] = &quot;StripedLurker&quot;;
                gv_fishReward[8] = &quot;JewelDanio&quot;;
                gv_fishReward[9] = &quot;WaterScorpion&quot;;
                gv_fishReward[10] = &quot;FireAmmonite&quot;;
                gv_fishReward[11] = &quot;BlindRainfish&quot;;
                gv_fishReward[12] = &quot;TigerGourami&quot;;
                gv_fishReward[13] = &quot;MurlocTreat&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupFishData_Init () {
                gt_SetupFishData = TriggerCreate(&quot;gt_SetupFishData_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SetupFishData_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="CAA346FE">
        <ScriptCode>
            bool gt_FishingRodUse_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(gf_FishingStart(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)))) {
                        return false;
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FishingRodUse_Init () {
                gt_FishingRodUse = TriggerCreate(&quot;gt_FishingRodUse_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FishingRodUse, c_playerAny, &quot;FishingRodSet&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FishingRodUse_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="CF246CEC">
        <ScriptCode>
            bool gt_FishingTargetBob_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_fishingTarget;
                fixed lv_targetH;
                // Variable Initialization
                lv_fishingTarget = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_targetH = UnitGetHeight(lv_fishingTarget);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetCustomValue(lv_fishingTarget, 0) == 0.0)) {
                    UnitSetCustomValue(lv_fishingTarget, 0, 1.0);
                    UnitSetHeight(lv_fishingTarget, (lv_targetH - 0.05), 1.0);
                }
                else {
                    UnitSetCustomValue(lv_fishingTarget, 0, 0.0);
                    UnitSetHeight(lv_fishingTarget, (lv_targetH + 0.05), 1.0);
                }
                UnitSetFacing(lv_fishingTarget, (UnitGetFacing(lv_fishingTarget) + 15.0), 1.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FishingTargetBob_Init () {
                gt_FishingTargetBob = TriggerCreate(&quot;gt_FishingTargetBob_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FishingTargetBob, c_playerAny, &quot;FishingTargetBob&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FishingTargetBob_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B5E63BE6">
        <ScriptCode>
            bool gt_FishingSuccess_Func (bool testConds, bool runActions) {
                int auto04DBA9BC_ae;
                int auto04DBA9BC_ai;
                // Variable Declarations
                int lv_a;
                int lv_e;
                int lv_t;
                int lv_c;
                unit lv_fisherman;
                string lv_reward;
                // Variable Initialization
                lv_fisherman = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                // Conditions
                if (testConds) {
                    if (!((lv_fisherman != null))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_e = BoolToInt((UnitHasBehavior(lv_fisherman, &quot;EpicFishingRod&quot;) &amp;&amp; (RandomInt(1, 4) == 1)));
                auto04DBA9BC_ae = (lv_e + 1);
                auto04DBA9BC_ai = 1;
                lv_a = 1;
                for ( ; ( (auto04DBA9BC_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto04DBA9BC_ae) || (auto04DBA9BC_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto04DBA9BC_ae) ) ; lv_a += auto04DBA9BC_ai ) {
                    lv_reward = gf_GetFishReward(lv_fisherman);
                    gf_CreateItemForUnit(lv_fisherman, lv_reward, 1);
                    TextExpressionSetToken(&quot;Param/Expression/41E116C5&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/4906400E&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/41E116C5&quot;, &quot;B&quot;, UnitTypeGetName(lv_reward));
                    gf_Quicktag(lv_fisherman, TextExpressionAssemble(&quot;Param/Expression/41E116C5&quot;), 3.0, 22);
                    gv_playerData[UnitGetOwner(lv_fisherman)].lv_fishCaught += 1;
                }
                if ((gv_playerData[UnitGetOwner(lv_fisherman)].lv_fishCaught &gt;= 30) &amp;&amp; (gv_gameDuration &lt;= 600.0)) {
                    gf_UnlockRequirement(UnitGetOwner(lv_fisherman), 1, 23);
                }
                else {
                }
                if ((UnitGetType(lv_fisherman) == &quot;Kobold&quot;)) {
                    gf_AddExperience(lv_fisherman, 100.0);
                }
                else {
                }
                if ((gv_questIndexActive == 16)) {
                    lv_t = gf_GetTeamOfPlayer(UnitGetOwner(lv_fisherman));
                    lv_c = FixedToInt(UnitGetCustomValue(lv_fisherman, 7));
                    if ((lv_t != 0) &amp;&amp; (lv_c != 0) &amp;&amp; (gv_expeditionProgress[lv_t][lv_c] == false)) {
                        gv_expeditionProgress[lv_t][lv_c] = true;
                        PingSetColor(gv_expeditionPing[lv_t][lv_c], Color(0.00, 100.00, 0.00));
                        gv_expeditionProgressCount[lv_t] += 1;
                        if ((gv_expeditionProgressCount[lv_t] &gt; gv_expeditionProgressCount[gv_expeditionLeadingTeam])) {
                            gv_expeditionLeadingTeam = lv_t;
                        }
                        else {
                        }
                        gf_Quicktag(lv_fisherman, StringExternal(&quot;Param/Value/FF0C8F63&quot;), 3.0, 24);
                        PlayerModifyPropertyInt(UnitGetOwner(lv_fisherman), c_playerPropMinerals, c_playerPropOperAdd, 50);
                        gf_ExpeditionProgress(lv_t);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FishingSuccess_Init () {
                gt_FishingSuccess = TriggerCreate(&quot;gt_FishingSuccess_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FishingSuccess, c_playerAny, &quot;FishingSuccess&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FishingSuccess_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="46B3D12C">
        <Item Type="CustomScript" Id="83917B3C"/>
        <Item Type="CustomScript" Id="78068E9B"/>
        <Item Type="CustomScript" Id="B17FACB5"/>
        <Item Type="CustomScript" Id="545E3B42"/>
        <Item Type="CustomScript" Id="3BB24B68"/>
        <Item Type="CustomScript" Id="DC495198"/>
    </Element>
    <Element Type="CustomScript" Id="83917B3C">
        <ScriptCode>
            bool gt_BirdScoutFindOutpost_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_bird;
                unit lv_outpost;
                // Variable Initialization
                lv_bird = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_outpost = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(lv_bird))) {
                        return false;
                    }
                    if (!(gf_UnitExists(lv_outpost))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_BirdScoutLand(lv_bird, lv_outpost);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BirdScoutFindOutpost_Init () {
                gt_BirdScoutFindOutpost = TriggerCreate(&quot;gt_BirdScoutFindOutpost_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BirdScoutFindOutpost, 0, &quot;BirdLookingForNestFound&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BirdScoutFindOutpost_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="78068E9B">
        <ScriptCode>
            bool gt_BirdScoutTameBird_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                unit lv_bird;
                // Variable Initialization
                lv_bird = UnitBehaviorEffectUnit(EventUnit(), &quot;OutpostGotBird&quot;, c_effectUnitCaster, 0);
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_AddExperience(EventUnit(), 20.0);
                gv_playerData[UnitGetOwner(EventUnit())].lv_gameStats.lv_birdsScouts += 1;
                UnitSetOwner(lv_bird, UnitGetOwner(EventUnit()), false);
                UnitBehaviorAdd(lv_bird, &quot;BirdScouting&quot;, lv_bird, 1);
                UnitBehaviorRemove(EventUnit(), &quot;OutpostGotBird&quot;, 1);
                UnitBehaviorRemove(lv_bird, &quot;BirdNesting&quot;, 1);
                UnitIssueOrder(lv_bird, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), EventUnitTargetPoint()), c_orderQueueReplace);
                gf_BirdScoutTakeOff(lv_bird, EventUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BirdScoutTameBird_Init () {
                gt_BirdScoutTameBird = TriggerCreate(&quot;gt_BirdScoutTameBird_Func&quot;);
                TriggerAddEventUnitAbility(gt_BirdScoutTameBird, null, AbilityCommand(&quot;TameBird&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BirdScoutTameBird_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B17FACB5">
        <ScriptCode>
            bool gt_BirdScoutLockOn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitStateFidget, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BirdScoutLockOn_Init () {
                gt_BirdScoutLockOn = TriggerCreate(&quot;gt_BirdScoutLockOn_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BirdScoutLockOn, c_playerAny, &quot;BirdScoutFind&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BirdScoutLockOn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="545E3B42">
        <ScriptCode>
            bool gt_BirdScoutStalk_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_target;
                unit lv_stalker;
                point lv_p;
                // Variable Initialization
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_stalker = UnitBehaviorEffectUnit(lv_target, &quot;Stalked&quot;, c_effectUnitCaster, 0);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitHasBehavior(lv_stalker, &quot;BirdScouting&quot;) == true) &amp;&amp; (UnitHasBehavior(lv_target, &quot;Stalked&quot;) == true)) {
                    lv_p = PointWithOffsetPolar(UnitGetPosition(lv_target), (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Bird&quot;, &quot;Sight&quot;, UnitGetOwner(lv_stalker))) - ((BoolToInt(!(gv_b_Day)) * 2.0) + RandomFixed(0.0, 2.0))), (AngleBetweenPoints(UnitGetPosition(lv_target), UnitGetPosition(lv_stalker)) + RandomFixed(-90.0, 90.0)));
                    UnitIssueOrder(lv_stalker, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_p), c_orderQueueReplace);
                }
                else {
                    UnitBehaviorRemove(lv_stalker, &quot;BirdScouting&quot;, 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BirdScoutStalk_Init () {
                gt_BirdScoutStalk = TriggerCreate(&quot;gt_BirdScoutStalk_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BirdScoutStalk, c_playerAny, &quot;StalkedTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BirdScoutStalk_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3BB24B68">
        <ScriptCode>
            bool gt_BirdScoutExpire_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_target;
                // Variable Initialization
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(lv_target, &quot;BirdLookingForNest&quot;, lv_target, 1);
                UnitSetOwner(lv_target, 0, false);
                UnitSetState(lv_target, c_unitStateFidget, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BirdScoutExpire_Init () {
                gt_BirdScoutExpire = TriggerCreate(&quot;gt_BirdScoutExpire_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BirdScoutExpire, c_playerAny, &quot;BirdServiceExpire&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BirdScoutExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DC495198">
        <ScriptCode>
            bool gt_BirdScoutShooBirds_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_bird;
                unit lv_outpost;
                // Variable Initialization
                lv_bird = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_outpost = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorRemove(lv_bird, &quot;BirdNesting&quot;, 1);
                UnitBehaviorAdd(lv_bird, &quot;BirdLookingForNest&quot;, lv_bird, 1);
                gf_BirdScoutTakeOff(lv_bird, lv_outpost);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BirdScoutShooBirds_Init () {
                gt_BirdScoutShooBirds = TriggerCreate(&quot;gt_BirdScoutShooBirds_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_BirdScoutShooBirds, c_playerAny, &quot;ShooBirdsTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_BirdScoutShooBirds_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="4DD99B33">
        <Item Type="CustomScript" Id="88184C80"/>
        <Item Type="CustomScript" Id="04925582"/>
        <Item Type="CustomScript" Id="AA75DF02"/>
        <Item Type="CustomScript" Id="CF393F04"/>
        <Item Type="CustomScript" Id="A21D3AB1"/>
        <Item Type="CustomScript" Id="89FB8E3C"/>
        <Item Type="CustomScript" Id="1EBB5EDE"/>
        <Item Type="CustomScript" Id="BDDED607"/>
        <Item Type="CustomScript" Id="F8E33425"/>
        <Item Type="CustomScript" Id="3DA62B5C"/>
        <Item Type="CustomScript" Id="C2AF06F5"/>
        <Item Type="CustomScript" Id="8A946A2F"/>
        <Item Type="CustomScript" Id="C6E3D88C"/>
        <Item Type="CustomScript" Id="731DE8AD"/>
        <Item Type="CustomScript" Id="614DC569"/>
        <Item Type="CustomScript" Id="1EB2C505"/>
        <Item Type="CustomScript" Id="C9F1CACA"/>
        <Item Type="CustomScript" Id="6F863CD4"/>
        <Item Type="CustomScript" Id="ED6605A6"/>
        <Item Type="CustomScript" Id="9B89B183"/>
        <Item Type="CustomScript" Id="A6CAE53F"/>
    </Element>
    <Element Type="CustomScript" Id="88184C80">
        <ScriptCode>
            bool gt_StorageMove_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;StorageOutpost&quot;))) {
                        return false;
                    }
                    if (!(gf_UnitExists(EventUnit()))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_UpdateShipmentAvailability(EventUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StorageMove_Init () {
                gt_StorageMove = TriggerCreate(&quot;gt_StorageMove_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_StorageMove, null, c_unitInventoryChangeMoves, null);
            }
        </ScriptCode>
        <InitFunc>gt_StorageMove_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="04925582">
        <ScriptCode>
            bool gt_SellLumber_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_type = &quot;Lumber&quot;;
                lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt; 0)) {
                        gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellLumber_Init () {
                gt_SellLumber = TriggerCreate(&quot;gt_SellLumber_Func&quot;);
                TriggerAddEventUnitAbility(gt_SellLumber, null, AbilityCommand(&quot;SellLumber&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SellLumber_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AA75DF02">
        <ScriptCode>
            bool gt_SellStone_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_type = &quot;Stone&quot;;
                lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt; 0)) {
                        gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellStone_Init () {
                gt_SellStone = TriggerCreate(&quot;gt_SellStone_Func&quot;);
                TriggerAddEventUnitAbility(gt_SellStone, null, AbilityCommand(&quot;SellStone&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SellStone_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="CF393F04">
        <ScriptCode>
            bool gt_SellWool_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_type = &quot;Wool&quot;;
                lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt; 0)) {
                        gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellWool_Init () {
                gt_SellWool = TriggerCreate(&quot;gt_SellWool_Func&quot;);
                TriggerAddEventUnitAbility(gt_SellWool, null, AbilityCommand(&quot;SellWool&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SellWool_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A21D3AB1">
        <ScriptCode>
            bool gt_SellLeather_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_type = &quot;Leather&quot;;
                lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt; 0)) {
                        gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellLeather_Init () {
                gt_SellLeather = TriggerCreate(&quot;gt_SellLeather_Func&quot;);
                TriggerAddEventUnitAbility(gt_SellLeather, null, AbilityCommand(&quot;SellLeather&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SellLeather_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="89FB8E3C">
        <ScriptCode>
            bool gt_SellIronOre_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_type = &quot;IronOre&quot;;
                lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt; 0)) {
                        gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellIronOre_Init () {
                gt_SellIronOre = TriggerCreate(&quot;gt_SellIronOre_Func&quot;);
                TriggerAddEventUnitAbility(gt_SellIronOre, null, AbilityCommand(&quot;SellIronOre&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SellIronOre_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1EBB5EDE">
        <ScriptCode>
            bool gt_SellShadowstone_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_type = &quot;Shadowstone&quot;;
                lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt; 0)) {
                        gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellShadowstone_Init () {
                gt_SellShadowstone = TriggerCreate(&quot;gt_SellShadowstone_Func&quot;);
                TriggerAddEventUnitAbility(gt_SellShadowstone, null, AbilityCommand(&quot;SellShadowstone&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SellShadowstone_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BDDED607">
        <ScriptCode>
            bool gt_SellInfusedLumber_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_type = &quot;InfusedLumber&quot;;
                lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt; 0)) {
                        gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellInfusedLumber_Init () {
                gt_SellInfusedLumber = TriggerCreate(&quot;gt_SellInfusedLumber_Func&quot;);
                TriggerAddEventUnitAbility(gt_SellInfusedLumber, null, AbilityCommand(&quot;SellInfusedLumber&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SellInfusedLumber_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F8E33425">
        <ScriptCode>
            bool gt_SellRadiantGem_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                unitgroup lv_inventory;
                // Variable Initialization
                lv_type = &quot;RadiantGem&quot;;
                lv_inventory = UnitGroupFilter(lv_type, c_playerAny, UnitInventoryGroup(gv_playerData[EventPlayer()].lv_kobold), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Unconscious&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_inventory, c_unitCountAlive) &gt; 0)) {
                        gf_SellResource(UnitGroupUnit(lv_inventory, 1), EventPlayer(), EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellRadiantGem_Init () {
                gt_SellRadiantGem = TriggerCreate(&quot;gt_SellRadiantGem_Func&quot;);
                TriggerAddEventUnitAbility(gt_SellRadiantGem, null, AbilityCommand(&quot;SellRadiantGem&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_SellRadiantGem_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3DA62B5C">
        <ScriptCode>
            bool gt_BuyLumber_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                lv_type = &quot;Lumber&quot;;
                lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LumberBuyPrice&quot;, &quot;Amount&quot;, EventPlayer()));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                        if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, &quot;Lumber&quot;)) {
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyLumber_Init () {
                gt_BuyLumber = TriggerCreate(&quot;gt_BuyLumber_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyLumber, null, AbilityCommand(&quot;BuyLumber&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyLumber_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C2AF06F5">
        <ScriptCode>
            bool gt_BuyStone_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                lv_type = &quot;Stone&quot;;
                lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;StoneBuyPrice&quot;, &quot;Amount&quot;, EventPlayer()));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                        if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, &quot;Stone&quot;)) {
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyStone_Init () {
                gt_BuyStone = TriggerCreate(&quot;gt_BuyStone_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyStone, null, AbilityCommand(&quot;BuyStone&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyStone_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8A946A2F">
        <ScriptCode>
            bool gt_BuyWool_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                lv_type = &quot;Wool&quot;;
                lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WoolBuyPrice&quot;, &quot;Amount&quot;, EventPlayer()));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                        if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, &quot;Wool&quot;)) {
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyWool_Init () {
                gt_BuyWool = TriggerCreate(&quot;gt_BuyWool_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyWool, null, AbilityCommand(&quot;BuyWool&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyWool_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C6E3D88C">
        <ScriptCode>
            bool gt_BuyLeather_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                lv_type = &quot;Leather&quot;;
                lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;LeatherBuyPrice&quot;, &quot;Amount&quot;, EventPlayer()));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                        if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, &quot;Leather&quot;)) {
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyLeather_Init () {
                gt_BuyLeather = TriggerCreate(&quot;gt_BuyLeather_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyLeather, null, AbilityCommand(&quot;BuyLeather&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyLeather_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="731DE8AD">
        <ScriptCode>
            bool gt_BuyIronOre_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                lv_type = &quot;IronOre&quot;;
                lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;IronOreBuyPrice&quot;, &quot;Amount&quot;, EventPlayer()));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                        if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, &quot;IronOre&quot;)) {
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyIronOre_Init () {
                gt_BuyIronOre = TriggerCreate(&quot;gt_BuyIronOre_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyIronOre, null, AbilityCommand(&quot;BuyIronOre&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyIronOre_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="614DC569">
        <ScriptCode>
            bool gt_BuyShadowstone_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                lv_type = &quot;Shadowstone&quot;;
                lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;ShadowstoneBuyPrice&quot;, &quot;Amount&quot;, EventPlayer()));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                        if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, &quot;Shadowstone&quot;)) {
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyShadowstone_Init () {
                gt_BuyShadowstone = TriggerCreate(&quot;gt_BuyShadowstone_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyShadowstone, null, AbilityCommand(&quot;BuyShadowstone&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyShadowstone_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1EB2C505">
        <ScriptCode>
            bool gt_BuyInfusedLumber_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                lv_type = &quot;InfusedLumber&quot;;
                lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;InfusedLumberBuyPrice&quot;, &quot;Amount&quot;, EventPlayer()));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                        if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, &quot;InfusedLumber&quot;)) {
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyInfusedLumber_Init () {
                gt_BuyInfusedLumber = TriggerCreate(&quot;gt_BuyInfusedLumber_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyInfusedLumber, null, AbilityCommand(&quot;BuyInfusedLumber&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyInfusedLumber_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C9F1CACA">
        <ScriptCode>
            bool gt_BuyRadiantGem_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_type;
                int lv_amount;
                // Variable Initialization
                lv_type = &quot;RadiantGem&quot;;
                lv_amount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;RadiantGemBuyPrice&quot;, &quot;Amount&quot;, EventPlayer()));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                        if (gf_BuyResource(gv_playerData[EventPlayer()].lv_kobold, &quot;RadiantGem&quot;)) {
                        }
                        else {
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyRadiantGem_Init () {
                gt_BuyRadiantGem = TriggerCreate(&quot;gt_BuyRadiantGem_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyRadiantGem, null, AbilityCommand(&quot;BuyRadiantGem&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyRadiantGem_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6F863CD4">
        <ScriptCode>
            bool gt_LockOutpost_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(EventUnit(), 1, 1.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LockOutpost_Init () {
                gt_LockOutpost = TriggerCreate(&quot;gt_LockOutpost_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_LockOutpost, null, &quot;Locked&quot;, c_unitBehaviorChangeActivate);
            }
        </ScriptCode>
        <InitFunc>gt_LockOutpost_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="ED6605A6">
        <ScriptCode>
            bool gt_UnlockOutpost_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(EventUnit(), 1, 0.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UnlockOutpost_Init () {
                gt_UnlockOutpost = TriggerCreate(&quot;gt_UnlockOutpost_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_UnlockOutpost, null, &quot;Locked&quot;, c_unitBehaviorChangeDeactivate);
            }
        </ScriptCode>
        <InitFunc>gt_UnlockOutpost_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9B89B183">
        <ScriptCode>
            bool gt_StorageHutCaravanStart_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_inventory;
                unit lv_horsieShipment;
                string lv_shipmentType;
                // Variable Initialization
                lv_inventory = UnitInventoryGroup(EventUnit());
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(lv_inventory);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
                        lv_horsieShipment = UnitGroupLoopCurrent();
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                lv_shipmentType = UnitGetType(lv_horsieShipment);
                if (((UnitGetType(lv_horsieShipment) == &quot;CrabShipment&quot;))) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal(&quot;Param/Value/B175DF93&quot;));
                }
                else {
                    if (gf_UnitExists(lv_horsieShipment)) {
                        gf_DropandRemove(lv_horsieShipment);
                        gf_SendBeaver(EventUnit(), EventUnitTargetPoint(), null, lv_shipmentType, EventPlayer());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal(&quot;Param/Value/E2C7FA6F&quot;));
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StorageHutCaravanStart_Init () {
                gt_StorageHutCaravanStart = TriggerCreate(&quot;gt_StorageHutCaravanStart_Func&quot;);
                TriggerAddEventUnitAbility(gt_StorageHutCaravanStart, null, AbilityCommand(&quot;SendPackBeaver&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_StorageHutCaravanStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A6CAE53F">
        <ScriptCode>
            bool gt_ShipmentArrived_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPosition(UnitInventoryItem(EventUnit(), 1), UnitGetPosition(EventUnit()), false);
                UnitRemove(EventUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShipmentArrived_Init () {
                gt_ShipmentArrived = TriggerCreate(&quot;gt_ShipmentArrived_Func&quot;);
                TriggerAddEventUnitAbility(gt_ShipmentArrived, null, AbilityCommand(&quot;ShipmentArrived&quot;, 0), c_unitAbilStageExecute, false);
            }
        </ScriptCode>
        <InitFunc>gt_ShipmentArrived_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="F12EEFCA">
        <Item Type="CustomScript" Id="9DD0DDC3"/>
        <Item Type="CustomScript" Id="94E988F2"/>
        <Item Type="CustomScript" Id="21004294"/>
        <Item Type="CustomScript" Id="4B69040A"/>
        <Item Type="CustomScript" Id="4618D52D"/>
    </Element>
    <Element Type="CustomScript" Id="9DD0DDC3">
        <ScriptCode>
            bool gt_DomesticatedSheep_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 5;
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                        PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                        UnitAbilityEnable(EventUnit(), &quot;DomesticatedSheep&quot;, false);
                        UnitBehaviorAdd(EventUnit(), &quot;DomesticFarm&quot;, EventUnit(), 1);
                        gf_Advancedtag(EventUnit(), lv_i, StringExternal(&quot;Param/Value/DBC4858D&quot;), 4.0, 24);
                        SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DomesticatedSheep_Init () {
                gt_DomesticatedSheep = TriggerCreate(&quot;gt_DomesticatedSheep_Func&quot;);
                TriggerAddEventUnitAbility(gt_DomesticatedSheep, null, AbilityCommand(&quot;DomesticatedSheep&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_DomesticatedSheep_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="94E988F2">
        <ScriptCode>
            bool gt_SheepLeash_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_farm;
                unit lv_sheep;
                // Variable Initialization
                lv_farm = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_sheep = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(lv_farm)) {
                    UnitIssueOrder(lv_sheep, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(lv_farm)), c_orderQueueReplace);
                }
                else {
                    UnitBehaviorRemove(lv_sheep, &quot;SheepLeash&quot;, 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SheepLeash_Init () {
                gt_SheepLeash = TriggerCreate(&quot;gt_SheepLeash_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_SheepLeash, c_playerAny, &quot;SheepLeashTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SheepLeash_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="21004294">
        <ScriptCode>
            bool gt_FarmSpawn_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_nearbyFarms;
                unitgroup lv_nearbySheep;
                // Variable Initialization
                lv_nearbyFarms = UnitGroup(&quot;Farm&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 16.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_nearbySheep = UnitGroup(&quot;Sheep&quot;, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 16.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!(((UnitGroupCount(lv_nearbyFarms, c_unitCountAlive) * 3) &gt; UnitGroupCount(lv_nearbySheep, c_unitCountAlive)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_AddExperience(gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_kobold, 2.0);
                UnitCreate(1, &quot;Sheep&quot;, 0, 0, PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1.0, 225.0), libNtve_gf_RandomAngle());
                UnitBehaviorAdd(UnitLastCreated(), &quot;SheepLeash&quot;, EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
                gv_playerData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_gameStats.lv_sheepBred += 1;
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/DE2C67E2&quot;), 2.0, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FarmSpawn_Init () {
                gt_FarmSpawn = TriggerCreate(&quot;gt_FarmSpawn_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FarmSpawn, c_playerAny, &quot;FarmSpawnTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FarmSpawn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4B69040A">
        <ScriptCode>
            bool gt_FowlBait_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, c_unitCountAlive) &gt;= 1)) {
                        gf_AddExperience(gv_playerData[lv_i].lv_kobold, 20.0);
                        gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_handfulofBerries, 1));
                        UnitBehaviorAdd(EventUnit(), &quot;FowlBait&quot;, EventUnit(), 1);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FowlBait_Init () {
                gt_FowlBait = TriggerCreate(&quot;gt_FowlBait_Func&quot;);
                TriggerAddEventUnitAbility(gt_FowlBait, null, AbilityCommand(&quot;PheasantBait&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_FowlBait_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4618D52D">
        <ScriptCode>
            bool gt_FowlMove_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_fowl;
                unit lv_farm;
                // Variable Initialization
                lv_fowl = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_farm = UnitBehaviorEffectUnit(lv_fowl, &quot;BaitedFowl&quot;, c_effectUnitCaster, 0);
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(lv_farm)) {
                    if ((UnitHasBehavior(lv_farm, &quot;FowlBait&quot;) == true) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(lv_farm), UnitGetPosition(lv_fowl)) &gt; 5.0)) {
                        UnitIssueOrder(lv_fowl, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), lv_farm), c_orderQueueReplace);
                        UnitBehaviorAdd(lv_fowl, &quot;FowlStopDelay&quot;, lv_fowl, 1);
                    }
                    else {
                    }
                }
                else {
                    UnitBehaviorRemove(lv_fowl, &quot;BaitedFowl&quot;, 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FowlMove_Init () {
                gt_FowlMove = TriggerCreate(&quot;gt_FowlMove_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FowlMove, c_playerAny, &quot;FowlBaitTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FowlMove_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="83B85816">
        <Item Type="CustomScript" Id="82A7C0CD"/>
        <Item Type="CustomScript" Id="6280B4FC"/>
        <Item Type="CustomScript" Id="42E35BEE"/>
        <Item Type="CustomScript" Id="015A3313"/>
        <Item Type="CustomScript" Id="07038FEE"/>
        <Item Type="CustomScript" Id="BCC62D72"/>
        <Item Type="CustomScript" Id="DE6392D1"/>
        <Item Type="CustomScript" Id="61C84695"/>
        <Item Type="CustomScript" Id="942BA049"/>
    </Element>
    <Element Type="CustomScript" Id="82A7C0CD">
        <ScriptCode>
            bool gt_BuySpellBook_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true) &amp;&amp; ((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= 10)) {
                            gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/D4E85C49&quot;), 2.0, 24);
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 10);
                            gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, &quot;SpellBook&quot;, 1);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuySpellBook_Init () {
                gt_BuySpellBook = TriggerCreate(&quot;gt_BuySpellBook_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuySpellBook, null, AbilityCommand(&quot;BuySpellBook&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuySpellBook_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6280B4FC">
        <ScriptCode>
            bool gt_BuyScrollofTransmutation_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 100;
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true) &amp;&amp; ((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/A1D15AA9&quot;), 2.0, 24);
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, &quot;ScrollofTransmutation&quot;, 1);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyScrollofTransmutation_Init () {
                gt_BuyScrollofTransmutation = TriggerCreate(&quot;gt_BuyScrollofTransmutation_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyScrollofTransmutation, null, AbilityCommand(&quot;BuyScrollofTransmutation&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyScrollofTransmutation_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="42E35BEE">
        <ScriptCode>
            bool gt_BuyBeer_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;BeerCost&quot;, &quot;Amount&quot;, UnitGetOwner(EventUnit())));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/1A6016A1&quot;), 2.0, 24);
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, &quot;Beer&quot;, 1);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyBeer_Init () {
                gt_BuyBeer = TriggerCreate(&quot;gt_BuyBeer_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyBeer, null, AbilityCommand(&quot;BuyBeer&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyBeer_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="015A3313">
        <ScriptCode>
            bool gt_BuyRoastedLamb_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;RoastedLambCost&quot;, &quot;Amount&quot;, UnitGetOwner(EventUnit())));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/E91AE0C7&quot;), 2.0, 24);
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            gf_CreateItemForUnit(gv_playerData[lv_i].lv_kobold, &quot;RoastedLamb&quot;, 1);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyRoastedLamb_Init () {
                gt_BuyRoastedLamb = TriggerCreate(&quot;gt_BuyRoastedLamb_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyRoastedLamb, null, AbilityCommand(&quot;BuyRoastedLamb&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyRoastedLamb_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="07038FEE">
        <ScriptCode>
            bool gt_BuyGossip_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;Unconscious&quot;) == false)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= 1)) {
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, 1);
                            gf_Gossip(lv_i, true);
                            gf_AddExperience(gv_playerData[lv_i].lv_kobold, 1.0);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyGossip_Init () {
                gt_BuyGossip = TriggerCreate(&quot;gt_BuyGossip_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyGossip, null, AbilityCommand(&quot;Gossip&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyGossip_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BCC62D72">
        <ScriptCode>
            bool gt_HireMurlocSlave_Func (bool testConds, bool runActions) {
                int autoAB086206_val;
                // Variable Declarations
                int lv_i;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;MurlocSlaveCost&quot;, &quot;Amount&quot;, lv_i));
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/AFFD16A6&quot;), 2.0, 24);
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            UnitCreate(1, &quot;MurlocSlave&quot;, 0, lv_i, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, 310.0), 270.0);
                            UnitGroupAdd(gv_playerData[lv_i].lv_murlocSlaves, UnitLastCreated());
                            UnitControlGroupAddUnit(lv_i, 8, UnitLastCreated());
                            UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/94A4B816&quot;), gf_GetPlayerName(UnitGetOwner(UnitLastCreated()), 0), StringExternal(&quot;Param/Value/FDE585C2&quot;));
                            if ((UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;TheMurlocket&quot;) == true)) {
                                UnitBehaviorAdd(UnitLastCreated(), &quot;MurlocRebelSpirit&quot;, UnitLastCreated(), 1);
                            }
                            else {
                            }
                            if (gf_RewardCatIndexActive(lv_i, 3, 4)) {
                                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_TextureSelectByID(&quot;MurlocOrange&quot;));
                            }
                            else {
                            }
                            if ((UnitGroupCount(gv_playerData[lv_i].lv_murlocSlaves, c_unitCountAlive) &gt;= 50)) {
                                gf_UnlockRequirement(lv_i, 3, 4);
                            }
                            else {
                            }
                            if ((gv_playerData[lv_i].lv_isAI == true)) {
                                if (gv_aIData[lv_i].lv_cycleSlaveJob &gt;= 3) {
                                    gv_aIData[lv_i].lv_cycleSlaveJob = 1;
                                }
                                else {
                                    gv_aIData[lv_i].lv_cycleSlaveJob = gv_aIData[lv_i].lv_cycleSlaveJob + 1;
                                }
                                autoAB086206_val = gv_aIData[lv_i].lv_cycleSlaveJob;
                                if (autoAB086206_val == 1) {
                                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;MurlocOrderMineGold&quot;, 0)), c_orderQueueReplace);
                                }
                                else if (autoAB086206_val == 2) {
                                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;MurlocOrderMineStone&quot;, 0)), c_orderQueueReplace);
                                }
                                else if (autoAB086206_val == 3) {
                                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;MurlocOrderGatherLumber&quot;, 0)), c_orderQueueReplace);
                                }
                                else {
                                }
                            }
                            else {
                            }
                            gv_playerData[lv_i].lv_gameStats.lv_murlocsHired += 1;
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HireMurlocSlave_Init () {
                gt_HireMurlocSlave = TriggerCreate(&quot;gt_HireMurlocSlave_Func&quot;);
                TriggerAddEventUnitAbility(gt_HireMurlocSlave, null, AbilityCommand(&quot;HireMurlocSlave&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_HireMurlocSlave_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DE6392D1">
        <ScriptCode>
            bool gt_EquipMurloc_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_t;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 10;
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                    PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                    UnitBehaviorAdd(EventUnit(), &quot;MurlocEquipment&quot;, EventUnit(), 1);
                    UnitAbilityEnable(EventUnit(), &quot;EquipMurloc&quot;, false);
                    gf_Quicktag(EventUnit(), StringExternal(&quot;Param/Value/69A8820F&quot;), 2.0, 24);
                    SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EquipMurloc_Init () {
                gt_EquipMurloc = TriggerCreate(&quot;gt_EquipMurloc_Func&quot;);
                TriggerAddEventUnitAbility(gt_EquipMurloc, null, AbilityCommand(&quot;EquipMurloc&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_EquipMurloc_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="61C84695">
        <ScriptCode>
            bool gt_BuyNightwisp_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = 45;
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true) &amp;&amp; ((UnitHasBehavior(EventUnit(), &quot;TavernWizard&quot;) == true) || (UnitHasBehavior(gv_playerData[lv_i].lv_kobold, &quot;KoboldBotNormal&quot;) == true))) {
                    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            if ((UnitGroupCount(gv_pets[lv_i], c_unitCountAlive) &lt; StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, &quot;PetStats&quot;, &quot;Amount&quot;, lv_i)))) {
                                gf_Quicktag(gv_playerData[lv_i].lv_kobold, StringExternal(&quot;Param/Value/8106470E&quot;), 2.0, 24);
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                                UnitCreate(1, &quot;Nightwisp&quot;, 0, lv_i, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, 310.0), 270.0);
                                UnitCreateEffectUnit(gv_playerData[lv_i].lv_kobold, &quot;TamedApply&quot;, UnitLastCreated());
                                UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/D1CD62B3&quot;), gf_GetPlayerName(UnitGetOwner(UnitLastCreated()), 0), StringExternal(&quot;Param/Value/2B335C42&quot;));
                                UnitGroupAdd(gv_pets[lv_i], UnitLastCreated());
                                gf_AcquirePet(lv_i, UnitGetType(UnitLastCreated()));
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_tameError);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuyNightwisp_Init () {
                gt_BuyNightwisp = TriggerCreate(&quot;gt_BuyNightwisp_Func&quot;);
                TriggerAddEventUnitAbility(gt_BuyNightwisp, null, AbilityCommand(&quot;PurchaseNightwisp&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_BuyNightwisp_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="942BA049">
        <ScriptCode>
            bool gt_Synergy_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[lv_i].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitAbilityCheck(gv_playerData[lv_i].lv_kobold, &quot;KoboldBackpack&quot;, true) == true)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_radiantGem, c_unitCountAlive) &gt;= 1)) {
                        gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_radiantGem, 1));
                        UnitAbilityEnable(EventUnit(), &quot;Synergy&quot;, false);
                        UnitBehaviorAdd(EventUnit(), &quot;SynergyPassive&quot;, EventUnit(), 1);
                        UnitSetCustomValue(EventUnit(), 0, 1.0);
                        UnitCreateEffectUnit(gv_playerData[lv_i].lv_kobold, &quot;SynergyImpact&quot;, gv_playerData[lv_i].lv_kobold);
                        UnitCreateEffectUnit(gv_playerData[lv_i].lv_kobold, &quot;SynergyBeam&quot;, EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Synergy_Init () {
                gt_Synergy = TriggerCreate(&quot;gt_Synergy_Func&quot;);
                TriggerAddEventUnitAbility(gt_Synergy, null, AbilityCommand(&quot;Synergy&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_Synergy_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="B5D85B6E">
        <Item Type="CustomScript" Id="AD755530"/>
        <Item Type="CustomScript" Id="DFC63421"/>
    </Element>
    <Element Type="CustomScript" Id="AD755530">
        <ScriptCode>
            bool gt_TrebuchetLoadStone_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = EventPlayer();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_stone, c_unitCountAlive) &gt;= 1)) {
                        gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_stone, 1));
                        gf_Advancedtag(EventUnit(), lv_i, StringExternal(&quot;Param/Value/629033C2&quot;), 2.0, 24);
                        UnitBehaviorAdd(EventUnit(), &quot;TrebuchetLoadedStone&quot;, EventUnit(), 1);
                        UnitBehaviorAdd(EventUnit(), &quot;TrebuchetLoadedAddonStone&quot;, EventUnit(), 1);
                        SoundPlayOnUnit(SoundLink(&quot;CraftingStart&quot;, -1), PlayerGroupSingle(lv_i), EventUnit(), 0.0, 100.0, 0.0);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TrebuchetLoadStone_Init () {
                gt_TrebuchetLoadStone = TriggerCreate(&quot;gt_TrebuchetLoadStone_Func&quot;);
                TriggerAddEventUnitAbility(gt_TrebuchetLoadStone, null, AbilityCommand(&quot;TrebuchetLoadStone&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_TrebuchetLoadStone_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DFC63421">
        <ScriptCode>
            bool gt_PackTrebuchet_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_ReplaceUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), &quot;TrebuchetPacked&quot;, 3);
                UnitSetOwner(libNtve_gf_LastReplacedUnit(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PackTrebuchet_Init () {
                gt_PackTrebuchet = TriggerCreate(&quot;gt_PackTrebuchet_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_PackTrebuchet, c_playerAny, &quot;PackTrebuchet&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_PackTrebuchet_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="D49614B1">
        <Item Type="CustomScript" Id="73E51D07"/>
        <Item Type="CustomScript" Id="F92A89DA"/>
        <Item Type="CustomScript" Id="1F96BA35"/>
        <Item Type="CustomScript" Id="24F81D86"/>
        <Item Type="CustomScript" Id="92CF3C88"/>
        <Item Type="CustomScript" Id="A0765348"/>
        <Item Type="CustomScript" Id="4BCE5859"/>
        <Item Type="CustomScript" Id="6898E673"/>
        <Item Type="CustomScript" Id="EABAE51C"/>
        <Item Type="CustomScript" Id="1D58891B"/>
        <Item Type="CustomScript" Id="EEED5420"/>
        <Item Type="CustomScript" Id="DDCFE03D"/>
        <Item Type="CustomScript" Id="8CACD600"/>
        <Item Type="CustomScript" Id="F2A73B5A"/>
        <Item Type="CustomScript" Id="5A200F6F"/>
        <Item Type="CustomScript" Id="95A9295E"/>
        <Item Type="CustomScript" Id="C004AA3D"/>
        <Item Type="CustomScript" Id="A4A2E932"/>
        <Item Type="CustomScript" Id="A39555BD"/>
        <Item Type="CustomScript" Id="7350C2EB"/>
        <Item Type="CustomScript" Id="904A9FE7"/>
        <Item Type="CustomScript" Id="1BF3ED16"/>
        <Item Type="CustomScript" Id="5C6D1CEA"/>
        <Item Type="CustomScript" Id="33E2D34D"/>
        <Item Type="CustomScript" Id="C990F7DF"/>
        <Item Type="CustomScript" Id="655C895A"/>
        <Item Type="CustomScript" Id="AEEA9217"/>
        <Item Type="CustomScript" Id="58C6989C"/>
    </Element>
    <Element Type="CustomScript" Id="73E51D07">
        <ScriptCode>
            bool gt_WTStructuralReinforcement_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/8F2930FD&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerStructuralReinforcement = true;
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerStructuralReinforcement&quot;, EventUnit(), 1);
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                            gf_UpdateBuildingStats(lv_i);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTStructuralReinforcement_Init () {
                gt_WTStructuralReinforcement = TriggerCreate(&quot;gt_WTStructuralReinforcement_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTStructuralReinforcement, null, AbilityCommand(&quot;StructuralReinforcement&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTStructuralReinforcement_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F92A89DA">
        <ScriptCode>
            bool gt_WTInfirmary_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 6)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/CB176B83&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerInfirmary&quot;, EventUnit(), 1);
                            gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerInfirmary = true;
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                            PlayerGroupLoopBegin(gv_teamData[gv_playerData[lv_i].lv_team].lv_members);
                            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                                if (gf_UnitExists(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold)) {
                                    gf_UpdateStatsAll(PlayerGroupLoopCurrent());
                                }
                                else {
                                }
                            }
                            PlayerGroupLoopEnd();
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTInfirmary_Init () {
                gt_WTInfirmary = TriggerCreate(&quot;gt_WTInfirmary_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTInfirmary, null, AbilityCommand(&quot;Infirmary&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTInfirmary_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1F96BA35">
        <ScriptCode>
            bool gt_WTBarracks_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 6)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/29ED28CD&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                            gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerBarracks = true;
                            PlayerGroupLoopBegin(gv_teamData[gv_playerData[lv_i].lv_team].lv_members);
                            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                                CatalogFieldValueSet(c_gameCatalogAbil, &quot;WatchTowerGarrison&quot;, &quot;TotalCargoSpace&quot;, PlayerGroupLoopCurrent(), IntToString(4));
                            }
                            PlayerGroupLoopEnd();
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTBarracks_Init () {
                gt_WTBarracks = TriggerCreate(&quot;gt_WTBarracks_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTBarracks, null, AbilityCommand(&quot;WatchTowerBarracks&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTBarracks_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="24F81D86">
        <ScriptCode>
            bool gt_WTStorage_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 5)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/4248AA76&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerStorage&quot;, EventUnit(), 1);
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                            gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerStorage = true;
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTStorage_Init () {
                gt_WTStorage = TriggerCreate(&quot;gt_WTStorage_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTStorage, null, AbilityCommand(&quot;Storage&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTStorage_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="92CF3C88">
        <ScriptCode>
            bool gt_WTCanteen_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gv_skillCooking[lv_i] &gt;= 15)) {
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 8)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else {
                            }
                            if ((lv_thru == true)) {
                                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/853C7E13&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                                UnitBehaviorAdd(EventUnit(), &quot;WatchTowerCanteen&quot;, EventUnit(), 1);
                                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                                gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerCanteen = true;
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTCanteen_Init () {
                gt_WTCanteen = TriggerCreate(&quot;gt_WTCanteen_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTCanteen, null, AbilityCommand(&quot;Canteen&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTCanteen_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A0765348">
        <ScriptCode>
            bool gt_WTLookout_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/C548E5FA&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerLookout&quot;, EventUnit(), 1);
                            gf_ModifyUnitSight(UnitGetType(EventUnit()), lv_i, 4.0);
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;GroundskeeperSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;Sight&quot;, UnitGetOwner(EventUnit())));
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;InfirmarySearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;Sight&quot;, UnitGetOwner(EventUnit())));
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;WarHornSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;Sight&quot;, UnitGetOwner(EventUnit())));
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;MunitionsSquadBonusAmmoSearch&quot;, &quot;AreaArray[&quot; + IntToString(0) + &quot;].Radius&quot;, UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;Sight&quot;, UnitGetOwner(EventUnit())));
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                            if ((gv_b_Day == false)) {
                                UnitBehaviorAdd(EventUnit(), &quot;WatchTowerNightLight&quot;, EventUnit(), 1);
                            }
                            else {
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTLookout_Init () {
                gt_WTLookout = TriggerCreate(&quot;gt_WTLookout_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTLookout, null, AbilityCommand(&quot;Lookout&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTLookout_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4BCE5859">
        <ScriptCode>
            bool gt_WTBallista_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 6));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 6));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_wool, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 4));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 16)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/4184A2F3&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerBallista&quot;, EventUnit(), 1);
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTBallista_Init () {
                gt_WTBallista = TriggerCreate(&quot;gt_WTBallista_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTBallista, null, AbilityCommand(&quot;Ballista&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTBallista_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6898E673">
        <ScriptCode>
            bool gt_WTGroundskeeper_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_stone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/0243368B&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerGroundskeeper&quot;, EventUnit(), 1);
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTGroundskeeper_Init () {
                gt_WTGroundskeeper = TriggerCreate(&quot;gt_WTGroundskeeper_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTGroundskeeper, null, AbilityCommand(&quot;Groundskeeper&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTGroundskeeper_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="EABAE51C">
        <ScriptCode>
            bool gt_WTGroundskeeperTrap_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_watchTower;
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                fixed lv_radius;
                point lv_p;
                // Variable Initialization
                lv_watchTower = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_i = UnitGetOwner(lv_watchTower);
                lv_a = UnitGroupEmpty();
                lv_radius = (UnitGetPropertyFixed(lv_watchTower, c_unitPropRadius, c_unitPropCurrent) + 8.0);
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;SpikeTrap&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_watchTower), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 0.0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_watchTower));
                if (gf_UnitExists(lv_b)) {
                    UnitCreateEffectUnit(lv_b, &quot;SpikeTrapSharpen&quot;, lv_b);
                    UnitSetCustomValue(lv_b, 0, 1.0);
                    TextExpressionSetToken(&quot;Param/Expression/E8BB2240&quot;, &quot;A&quot;, gf_GetPlayerName(UnitGetOwner(lv_b), 0));
                    TextExpressionSetToken(&quot;Param/Expression/E8BB2240&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/58A34302&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/E8BB2240&quot;, &quot;C&quot;, IntToText(3));
                    TextExpressionSetToken(&quot;Param/Expression/E8BB2240&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/802E6C69&quot;));
                    UnitSetInfoText(lv_b, StringExternal(&quot;Param/Value/EB7C75ED&quot;), TextExpressionAssemble(&quot;Param/Expression/E8BB2240&quot;), StringExternal(&quot;Param/Value/6591A834&quot;));
                }
                else {
                    if ((UnitGroupCount(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;SpikeTrap&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_watchTower), lv_radius), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 1.0), c_unitCountAlive) &lt; 10)) {
                        lv_p = gf_GetBuildLocation2x2(RegionCircle(UnitGetPosition(lv_watchTower), lv_radius));
                        if ((lv_p != null)) {
                            UnitCreate(1, &quot;SpikeTrap&quot;, 0, lv_i, lv_p, libNtve_gf_RandomAngle());
                            UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
                            TextExpressionSetToken(&quot;Param/Expression/09FF5EC0&quot;, &quot;A&quot;, gf_GetPlayerName(UnitGetOwner(UnitLastCreated()), 0));
                            TextExpressionSetToken(&quot;Param/Expression/09FF5EC0&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/588DEDE9&quot;));
                            TextExpressionSetToken(&quot;Param/Expression/09FF5EC0&quot;, &quot;C&quot;, IntToText(3));
                            TextExpressionSetToken(&quot;Param/Expression/09FF5EC0&quot;, &quot;D&quot;, StringExternal(&quot;Param/Value/9C794E3A&quot;));
                            UnitSetInfoText(UnitLastCreated(), StringExternal(&quot;Param/Value/78650D04&quot;), TextExpressionAssemble(&quot;Param/Expression/09FF5EC0&quot;), StringExternal(&quot;Param/Value/260C903D&quot;));
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTGroundskeeperTrap_Init () {
                gt_WTGroundskeeperTrap = TriggerCreate(&quot;gt_WTGroundskeeperTrap_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WTGroundskeeperTrap, c_playerAny, &quot;GroundskeeperSpikeTrapPlace&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WTGroundskeeperTrap_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1D58891B">
        <ScriptCode>
            bool gt_WTRefillAmmo_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                fixed lv_refillamount;
                fixed lv_maxammo;
                unitgroup lv_storedIron;
                bool lv_success;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_maxammo = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WatchTowerAmmoMax&quot;, &quot;Amount&quot;, UnitGetOwner(EventUnit())));
                lv_storedIron = UnitGroupFilter(&quot;IronOre&quot;, c_playerAny, UnitInventoryGroup(EventUnit()), UnitFilter(0, 0, 0, 0), 1);
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((UnitGroupCount(lv_storedIron, c_unitCountAlive) &gt;= 1)) {
                        gf_DropandRemove(UnitGroupUnit(lv_storedIron, 1));
                        lv_success = true;
                    }
                    else {
                        if ((UnitGroupCount(gv_playerData[lv_i].lv_resources.lv_ironOre, c_unitCountAlive) &gt;= 1)) {
                            gf_DropandRemove(UnitGroupUnit(gv_playerData[lv_i].lv_resources.lv_ironOre, 1));
                            lv_success = true;
                        }
                        else {
                        }
                    }
                    if ((lv_success == true)) {
                        lv_refillamount = libNtve_gf_ArithmeticRealClamp((lv_maxammo - UnitGetCustomValue(EventUnit(), 1)), 0.0, 10.0);
                        UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + lv_refillamount));
                        UnitBehaviorRemove(EventUnit(), &quot;WatchTowerNoAmmo&quot;, 1);
                        TextExpressionSetToken(&quot;Param/Expression/09D03745&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/C7634A9F&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/09D03745&quot;, &quot;B&quot;, FixedToText(lv_refillamount, 0));
                        TextExpressionSetToken(&quot;Param/Expression/09D03745&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/9BFA6065&quot;));
                        gf_Advancedtag(EventUnit(), lv_i, TextExpressionAssemble(&quot;Param/Expression/09D03745&quot;), 3.0, 28);
                        SoundPlayOnUnit(SoundLink(&quot;CraftingStart&quot;, -1), PlayerGroupSingle(lv_i), EventUnit(), 0.0, 100.0, 0.0);
                        if ((UnitGetCustomValue(EventUnit(), 1) == lv_maxammo)) {
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerFullAmmo&quot;, EventUnit(), 1);
                        }
                        else {
                        }
                        gf_WTUpdateTooltip(EventUnit());
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTRefillAmmo_Init () {
                gt_WTRefillAmmo = TriggerCreate(&quot;gt_WTRefillAmmo_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTRefillAmmo, null, AbilityCommand(&quot;WatchTowerRefillAmmunition&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTRefillAmmo_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="EEED5420">
        <ScriptCode>
            bool gt_WTUseAmmo_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1, (UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1) - 1.0));
                UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;WatchTowerFullAmmo&quot;, 1);
                gf_WTUpdateTooltip(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                if ((UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1) == 0.0)) {
                    gf_Alltag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/505A1C38&quot;), 2.0, 28);
                    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;WatchTowerNoAmmo&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTUseAmmo_Init () {
                gt_WTUseAmmo = TriggerCreate(&quot;gt_WTUseAmmo_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WTUseAmmo, c_playerAny, &quot;WatchTowerLaunchMissile&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WTUseAmmo_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DDCFE03D">
        <ScriptCode>
            bool gt_WTMurlocMilitia_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                        lv_thru = true;
                        PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                        SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                    }
                    else {
                    }
                    if ((lv_thru == true)) {
                        gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/CBDE3419&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                        UnitBehaviorAdd(EventUnit(), &quot;WatchTowerMurlocMilitia&quot;, EventUnit(), 1);
                        UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTMurlocMilitia_Init () {
                gt_WTMurlocMilitia = TriggerCreate(&quot;gt_WTMurlocMilitia_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTMurlocMilitia, null, AbilityCommand(&quot;WatchTowerMurlocMilitia&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTMurlocMilitia_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="8CACD600">
        <ScriptCode>
            bool gt_WTMurlocMilitiaIntel_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_b;
                unit lv_murlocMilitia;
                unit lv_watchTower;
                // Variable Initialization
                lv_murlocMilitia = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_watchTower = gv_teamData[gf_GetTeamOfPlayer(UnitGetOwner(lv_murlocMilitia))].lv_watchTower;
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(lv_watchTower))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitHasBehavior(lv_murlocMilitia, &quot;MurlocMilitiaJavelin&quot;) == true)) {
                    lv_b = UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lv_watchTower), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_watchTower), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, &quot;Fortress&quot;, &quot;Sight&quot;, UnitGetOwner(lv_watchTower)))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(lv_watchTower));
                    if (gf_UnitExists(lv_b)) {
                        UnitIssueOrder(lv_murlocMilitia, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_b), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_murlocMilitia), UnitGetPosition(lv_watchTower)) &lt;= (UnitGetPropertyFixed(lv_watchTower, c_unitPropRadius, c_unitPropCurrent) + 1.0))) {
                        UnitBehaviorAdd(lv_murlocMilitia, &quot;MurlocMilitiaJavelin&quot;, lv_murlocMilitia, 1);
                    }
                    else {
                        UnitIssueOrder(lv_murlocMilitia, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), lv_watchTower), c_orderQueueReplace);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTMurlocMilitiaIntel_Init () {
                gt_WTMurlocMilitiaIntel = TriggerCreate(&quot;gt_WTMurlocMilitiaIntel_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WTMurlocMilitiaIntel, c_playerAny, &quot;MurlocMilitiaIntelligenceTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WTMurlocMilitiaIntel_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F2A73B5A">
        <ScriptCode>
            bool gt_WTCalltoArms_Func (bool testConds, bool runActions) {
                int autoEBCE9047_ae;
                int autoEBCE9047_ai;
                // Variable Declarations
                const int lv_militiaNumber = 3;
                int lv_a;
                point lv_p;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundPlayAtPoint(SoundLink(&quot;MurlocChieftainEnrage&quot;, -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
                gf_SetScaledStats(&quot;MurlocMilitia&quot;, UnitGetOwner(EventUnit()));
                autoEBCE9047_ae = lv_militiaNumber;
                autoEBCE9047_ai = 1;
                lv_a = 1;
                for ( ; ( (autoEBCE9047_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoEBCE9047_ae) || (autoEBCE9047_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoEBCE9047_ae) ) ; lv_a += autoEBCE9047_ai ) {
                    lv_p = PointWithOffsetPolar(UnitGetPosition(EventUnit()), UnitGetPropertyFixed(EventUnit(), c_unitPropRadius, c_unitPropCurrent), (60.0 + (lv_a * (360.0 / lv_militiaNumber))));
                    UnitCreate(1, &quot;MurlocMilitia&quot;, 0, UnitGetOwner(EventUnit()), lv_p, AngleBetweenPoints(UnitGetPosition(EventUnit()), lv_p));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTCalltoArms_Init () {
                gt_WTCalltoArms = TriggerCreate(&quot;gt_WTCalltoArms_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTCalltoArms, null, AbilityCommand(&quot;CalltoArms&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTCalltoArms_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5A200F6F">
        <ScriptCode>
            bool gt_WTWarHorn_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 4)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/8F1D22D3&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerWarHorn&quot;, EventUnit(), 1);
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTWarHorn_Init () {
                gt_WTWarHorn = TriggerCreate(&quot;gt_WTWarHorn_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTWarHorn, null, AbilityCommand(&quot;WatchTowerWarHorn&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTWarHorn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="95A9295E">
        <ScriptCode>
            bool gt_WTTunnelerCrew_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gv_skillMining[lv_i] &gt;= 15)) {
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sharpIronPickaxe, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 2));
                        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 2)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else {
                            }
                            if ((lv_thru == true)) {
                                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/FD1538F4&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                                UnitBehaviorAdd(EventUnit(), &quot;WatchTowerTunnelerCrew&quot;, EventUnit(), 1);
                                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTTunnelerCrew_Init () {
                gt_WTTunnelerCrew = TriggerCreate(&quot;gt_WTTunnelerCrew_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTTunnelerCrew, null, AbilityCommand(&quot;TunnelerCrew&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTTunnelerCrew_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C004AA3D">
        <ScriptCode>
            bool gt_WTTunnelerCrewProduce_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_b;
                unit lv_fortress;
                string lv_type;
                // Variable Initialization
                lv_fortress = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_type = gf_ProduceStone(lv_fortress);
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitCanGetItem(lv_fortress, lv_type)) {
                    gf_CreateItemForUnit(lv_fortress, lv_type, 1);
                    TextExpressionSetToken(&quot;Param/Expression/6C6C7B35&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/BDC2DABF&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/6C6C7B35&quot;, &quot;B&quot;, UnitTypeGetName(lv_type));
                    TextExpressionSetToken(&quot;Param/Expression/6C6C7B35&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/DD0C6AF0&quot;));
                    gf_Quicktag(lv_fortress, TextExpressionAssemble(&quot;Param/Expression/6C6C7B35&quot;), 3.0, 24);
                }
                else {
                    lv_b = UnitGroupClosestToPoint(libNtve_gf_UnitsInUnitGroupWithCustomValue(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;StorageOutpost&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(lv_fortress), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 0.0), UnitGetPosition(lv_fortress));
                    if (gf_UnitExists(lv_b) &amp;&amp; (UnitHasBehavior(lv_fortress, &quot;BeaverPen&quot;) == true)) {
                        gf_SendBeaver(lv_fortress, UnitGetPosition(lv_b), lv_b, lv_type, UnitGetOwner(lv_fortress));
                    }
                    else {
                        UnitCreate(1, lv_type, 0, 0, PointWithOffsetPolar(UnitGetPosition(lv_fortress), 3.0, RandomFixed(240.0, 300.0)), libNtve_gf_RandomAngle());
                        TextExpressionSetToken(&quot;Param/Expression/4EE6A418&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/FE467808&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/4EE6A418&quot;, &quot;B&quot;, UnitTypeGetName(lv_type));
                        TextExpressionSetToken(&quot;Param/Expression/4EE6A418&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/5A3A8597&quot;));
                        gf_Quicktag(lv_fortress, TextExpressionAssemble(&quot;Param/Expression/4EE6A418&quot;), 3.0, 24);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTTunnelerCrewProduce_Init () {
                gt_WTTunnelerCrewProduce = TriggerCreate(&quot;gt_WTTunnelerCrewProduce_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WTTunnelerCrewProduce, c_playerAny, &quot;WatchTowerTunnelerCrewApply&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WTTunnelerCrewProduce_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A4A2E932">
        <ScriptCode>
            bool gt_WTArmory_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 15)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else {
                            }
                            if ((lv_thru == true)) {
                                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/F8E12A36&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                                UnitBehaviorAdd(EventUnit(), &quot;WatchTowerArmory&quot;, EventUnit(), 1);
                                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                                gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArmory = true;
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTArmory_Init () {
                gt_WTArmory = TriggerCreate(&quot;gt_WTArmory_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTArmory, null, AbilityCommand(&quot;WatchTowerArmory&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTArmory_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A39555BD">
        <ScriptCode>
            bool gt_WTArcaneSanctum_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gv_skillArtisanship[lv_i] &gt;= 15)) {
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_infusedLumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 3));
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 8)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else {
                            }
                            if ((lv_thru == true)) {
                                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/BB16D92C&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                                UnitBehaviorAdd(EventUnit(), &quot;WatchTowerArcaneSanctum&quot;, EventUnit(), 1);
                                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                                gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerArcaneSanctum = true;
                                UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Tavern&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;TavernWizard&quot;, UnitGroupLoopCurrent(), 1);
                                }
                                UnitGroupLoopEnd();
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTArcaneSanctum_Init () {
                gt_WTArcaneSanctum = TriggerCreate(&quot;gt_WTArcaneSanctum_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTArcaneSanctum, null, AbilityCommand(&quot;ArcaneSanctum&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTArcaneSanctum_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7350C2EB">
        <ScriptCode>
            bool gt_WTBeaverPen_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    if ((gv_skillForaging[lv_i] &gt;= 15)) {
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_lumber, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                        UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                        if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                            if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                                lv_thru = true;
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                                SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                            }
                            else {
                            }
                            if ((lv_thru == true)) {
                                gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/A28DB6C3&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                                UnitBehaviorAdd(EventUnit(), &quot;BeaverPen&quot;, EventUnit(), 1);
                                UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                                gv_teamData[gv_playerData[lv_i].lv_team].lv_watchTowerBeaverPen = true;
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_skillReq);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTBeaverPen_Init () {
                gt_WTBeaverPen = TriggerCreate(&quot;gt_WTBeaverPen_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTBeaverPen, null, AbilityCommand(&quot;BeaverPen&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTBeaverPen_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="904A9FE7">
        <ScriptCode>
            bool gt_WTMunitionsSquad_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_c;
                unitgroup lv_bank;
                bool lv_thru;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_c = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), &quot;SmartPriority&quot;, lv_i));
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(gv_playerData[lv_i].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[lv_i].lv_kobold)) &lt;= gv_interactRadius)) {
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_leather, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                    UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_ironOre, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 5));
                    if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 10)) {
                        if ((PlayerGetPropertyInt(lv_i, c_playerPropMinerals) &gt;= lv_c)) {
                            lv_thru = true;
                            UnitGroupLoopBegin(lv_bank);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                gf_DropandRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSubtract, lv_c);
                            SoundPlayOnUnit(SoundLink(&quot;GoldSpend&quot;, -1), PlayerGroupSingle(lv_i), gv_playerData[lv_i].lv_kobold, 0.0, 100.0, 0.0);
                        }
                        else {
                        }
                        if ((lv_thru == true)) {
                            gf_Advancedtag(EventUnit(), lv_i, TextWithColor(StringExternal(&quot;Param/Value/5B735D70&quot;), Color(0.00, 100.00, 0.00)), 4.0, 32);
                            UnitBehaviorAdd(EventUnit(), &quot;WatchTowerMunitionsSquad&quot;, EventUnit(), 1);
                            UnitAbilityEnable(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), false);
                            CatalogFieldValueSet(c_gameCatalogEffect, &quot;WatchTowerAmmoMax&quot;, &quot;Amount&quot;, UnitGetOwner(EventUnit()), FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, &quot;WatchTowerAmmoMax&quot;, &quot;Amount&quot;, UnitGetOwner(EventUnit()))) + 10.0), 0));
                            UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + 10.0));
                            UnitBehaviorRemove(EventUnit(), &quot;WatchTowerNoAmmo&quot;, 1);
                            gf_WTUpdateTooltip(EventUnit());
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughGold);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTMunitionsSquad_Init () {
                gt_WTMunitionsSquad = TriggerCreate(&quot;gt_WTMunitionsSquad_Func&quot;);
                TriggerAddEventUnitAbility(gt_WTMunitionsSquad, null, AbilityCommand(&quot;MunitionsSquad&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTMunitionsSquad_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1BF3ED16">
        <ScriptCode>
            bool gt_WTMunitionsSquadADTs_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + 5.0));
                UnitSetCustomValue(EventUnit(), 3, (UnitGetCustomValue(EventUnit(), 3) + 5.0));
                UnitBehaviorRemove(EventUnit(), &quot;TurretOutOfAmmo&quot;, 1);
                gf_ADTUpdateAmmo(EventUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTMunitionsSquadADTs_Init () {
                gt_WTMunitionsSquadADTs = TriggerCreate(&quot;gt_WTMunitionsSquadADTs_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_WTMunitionsSquadADTs, null, &quot;MunitionsSquadBonusAmmo&quot;, c_unitBehaviorChangeCreate);
            }
        </ScriptCode>
        <InitFunc>gt_WTMunitionsSquadADTs_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="5C6D1CEA">
        <ScriptCode>
            bool gt_WTAttackedAlert_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIAlertUnit(&quot;WatchTowerAttacked&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), StringExternal(&quot;Param/Value/DEE36565&quot;), null, EventPlayerEffectUsedUnit(c_effectUnitCaster));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTAttackedAlert_Init () {
                gt_WTAttackedAlert = TriggerCreate(&quot;gt_WTAttackedAlert_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WTAttackedAlert, c_playerAny, &quot;WatchTowerAttackAlert&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WTAttackedAlert_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="33E2D34D">
        <ScriptCode>
            bool gt_WTDamagedAlert_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIAlertUnit(&quot;WatchTowerDamaged&quot;, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), StringExternal(&quot;Param/Value/BFB111C6&quot;), null, EventPlayerEffectUsedUnit(c_effectUnitCaster));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTDamagedAlert_Init () {
                gt_WTDamagedAlert = TriggerCreate(&quot;gt_WTDamagedAlert_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_WTDamagedAlert, c_playerAny, &quot;WatchTowerDamagedAlert&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WTDamagedAlert_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C990F7DF">
        <ScriptCode>
            bool gt_WTUnloadAutoSelect_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Fortress&quot;))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnitCargo()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitClearSelection(UnitGetOwner(EventUnitCargo()));
                UnitSelect(EventUnitCargo(), UnitGetOwner(EventUnitCargo()), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WTUnloadAutoSelect_Init () {
                gt_WTUnloadAutoSelect = TriggerCreate(&quot;gt_WTUnloadAutoSelect_Func&quot;);
                TriggerAddEventUnitCargo(gt_WTUnloadAutoSelect, null, false);
            }
        </ScriptCode>
        <InitFunc>gt_WTUnloadAutoSelect_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="655C895A">
        <ScriptCode>
            bool gt_WatchTowerTimerStart_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((TimerGetElapsed(gv_watchTowerTimer) &gt; 0.0) &amp;&amp; gf_AllLivingTeamsHaveWT()) {
                    TimerPause(gv_watchTowerTimer, true);
                    TimerPause(gv_watchTowerTimerUpdate, true);
                    ObjectiveDestroy(gv_watchTowerObjective);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/C69A4947&quot;));
                }
                else {
                    if ((TimerGetElapsed(gv_watchTowerTimer) == 0.0) &amp;&amp; (gf_AllLivingTeamsHaveWT() == false)) {
                        gv_watchTowerObjectiveText = StringExternal(&quot;Param/Value/E7DA3DB1&quot;);
                        TimerStart(gv_watchTowerTimer, 300.0, false, c_timeGame);
                        ObjectiveCreate(gv_watchTowerObjectiveText, StringExternal(&quot;Param/Value/69AE86DE&quot;), c_objectiveStateActive, true);
                        gv_watchTowerObjective = ObjectiveLastCreated();
                        TimerStart(gv_watchTowerTimerUpdate, gv_questTimerUpdateDelay, false, c_timeGame);
                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;KoboldMusicTower&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WatchTowerTimerStart_Init () {
                gt_WatchTowerTimerStart = TriggerCreate(&quot;gt_WatchTowerTimerStart_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_WatchTowerTimerStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AEEA9217">
        <ScriptCode>
            bool gt_WatchTowerTimerLoop_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_remainingTime;
                text lv_timerAddon;
                // Variable Initialization
                lv_remainingTime = TimerGetRemaining(gv_watchTowerTimer);
                // Conditions
                if (testConds) {
                    if (!((lv_remainingTime &gt; 0.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((lv_remainingTime &gt;= 30.0)) {
                    TextExpressionSetToken(&quot;Param/Expression/8B88A4A7&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/687319E1&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/8B88A4A7&quot;, &quot;B&quot;, TextTimeFormat(StringToText(&quot;&lt;mintotal/&gt;:&lt;sec2/&gt;&quot;), FixedToInt(lv_remainingTime)));
                    TextExpressionSetToken(&quot;Param/Expression/8B88A4A7&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/F9B4394D&quot;));
                    lv_timerAddon = TextExpressionAssemble(&quot;Param/Expression/8B88A4A7&quot;);
                }
                else {
                    TextExpressionSetToken(&quot;Param/Expression/98F70F86&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/F1AEF1F4&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/98F70F86&quot;, &quot;B&quot;, TextTimeFormat(StringToText(&quot;&lt;mintotal/&gt;:&lt;sec2/&gt;&quot;), FixedToInt(lv_remainingTime)));
                    TextExpressionSetToken(&quot;Param/Expression/98F70F86&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/7049E9E7&quot;));
                    lv_timerAddon = TextExpressionAssemble(&quot;Param/Expression/98F70F86&quot;);
                }
                if (((TimerGetRemaining(gv_questTimer) &gt;= 1) &amp;&amp; (TimerGetRemaining(gv_questTimer) &lt;= 5))) {
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                }
                TextExpressionSetToken(&quot;Param/Expression/81EA46E9&quot;, &quot;A&quot;, gv_watchTowerObjectiveText);
                TextExpressionSetToken(&quot;Param/Expression/81EA46E9&quot;, &quot;B&quot;, lv_timerAddon);
                ObjectiveSetName(gv_watchTowerObjective, TextExpressionAssemble(&quot;Param/Expression/81EA46E9&quot;));
                TimerStart(gv_watchTowerTimerUpdate, 1.0, false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WatchTowerTimerLoop_Init () {
                gt_WatchTowerTimerLoop = TriggerCreate(&quot;gt_WatchTowerTimerLoop_Func&quot;);
                TriggerAddEventTimer(gt_WatchTowerTimerLoop, gv_watchTowerTimerUpdate);
            }
        </ScriptCode>
        <InitFunc>gt_WatchTowerTimerLoop_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="58C6989C">
        <ScriptCode>
            bool gt_WatchTowerTimerExpire_Func (bool testConds, bool runActions) {
                int autoE9CC7FD7_ae;
                int autoE9CC7FD7_ai;
                // Variable Declarations
                int lv_a;
                unitgroup lv_watchTowers;
                fixed lv_timerExtension;
                // Variable Initialization
                lv_watchTowers = UnitGroup(&quot;Fortress&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 &lt;&lt; (c_targetFilterUnderConstruction - 32)), (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupCount(lv_watchTowers, c_unitCountAlive) &gt; 0) &amp;&amp; (gv_watchTowerTimerExtendable == true)) {
                    gv_watchTowerTimerExtendable = false;
                    lv_timerExtension = gf_LeastConstructionProgress(lv_watchTowers, 30.0);
                    TimerStart(gv_watchTowerTimer, lv_timerExtension, false, c_timeGame);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/1EB34B69&quot;));
                    SoundPlay(SoundLink(&quot;UI_TerranHint&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                    ObjectiveDestroy(gv_watchTowerObjective);
                    TimerPause(gv_watchTowerTimerUpdate, true);
                    SoundPlay(SoundLink(&quot;UI_TerranMissionFailed&quot;, 0), PlayerGroupAll(), 100.0, 0.0);
                    autoE9CC7FD7_ae = gv_activeTeams;
                    autoE9CC7FD7_ai = 1;
                    lv_a = 1;
                    for ( ; ( (autoE9CC7FD7_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoE9CC7FD7_ae) || (autoE9CC7FD7_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoE9CC7FD7_ae) ) ; lv_a += autoE9CC7FD7_ai ) {
                        if ((gf_UnitExists(gv_teamData[lv_a].lv_watchTower) == false)) {
                            TextExpressionSetToken(&quot;Param/Expression/700366F4&quot;, &quot;B&quot;, gf_GetTribeTextOfTeam(lv_a));
                            TextExpressionSetToken(&quot;Param/Expression/700366F4&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/E4EF46C6&quot;));
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/700366F4&quot;));
                            gf_WatchTowerDefeatTeam(lv_a);
                        }
                        else {
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WatchTowerTimerExpire_Init () {
                gt_WatchTowerTimerExpire = TriggerCreate(&quot;gt_WatchTowerTimerExpire_Func&quot;);
                TriggerAddEventTimer(gt_WatchTowerTimerExpire, gv_watchTowerTimer);
            }
        </ScriptCode>
        <InitFunc>gt_WatchTowerTimerExpire_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="5B662C82">
        <Item Type="CustomScript" Id="123B51AC"/>
        <Item Type="CustomScript" Id="4B81CF5D"/>
        <Item Type="CustomScript" Id="62785F31"/>
    </Element>
    <Element Type="CustomScript" Id="123B51AC">
        <ScriptCode>
            bool gt_FortressShareVision_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Fortress&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_ShareVisionofUnit(EventUnit(), true, UnitGetOwner(EventUnitCargo()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FortressShareVision_Init () {
                gt_FortressShareVision = TriggerCreate(&quot;gt_FortressShareVision_Func&quot;);
                TriggerAddEventUnitCargo(gt_FortressShareVision, null, true);
            }
        </ScriptCode>
        <InitFunc>gt_FortressShareVision_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4B81CF5D">
        <ScriptCode>
            bool gt_FortressUnshareVision_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Fortress&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_ShareVisionofUnit(EventUnit(), false, UnitGetOwner(EventUnitCargo()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FortressUnshareVision_Init () {
                gt_FortressUnshareVision = TriggerCreate(&quot;gt_FortressUnshareVision_Func&quot;);
                TriggerAddEventUnitCargo(gt_FortressUnshareVision, null, false);
            }
        </ScriptCode>
        <InitFunc>gt_FortressUnshareVision_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="62785F31">
        <ScriptCode>
            bool gt_FortressBeaverScavengerTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_bestitem;
                int lv_bestitemlevel;
                // Variable Initialization
                lv_bestitemlevel = -1;
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 12.0), UnitFilter((1 &lt;&lt; c_targetFilterItem), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), 0) &gt; lv_bestitemlevel)) {
                        lv_bestitem = UnitGroupLoopCurrent();
                        lv_bestitemlevel = gf_GetItemLevel(UnitGetType(UnitGroupLoopCurrent()), 0);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if (gf_UnitExists(lv_bestitem)) {
                    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingUnit(null, lv_bestitem), c_orderQueueReplace);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FortressBeaverScavengerTrigger_Init () {
                gt_FortressBeaverScavengerTrigger = TriggerCreate(&quot;gt_FortressBeaverScavengerTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_FortressBeaverScavengerTrigger, c_playerAny, &quot;BeaverScavengerTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_FortressBeaverScavengerTrigger_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="6BBD6982">
        <Item Type="CustomScript" Id="53ED0E2B"/>
        <Item Type="CustomScript" Id="45825FA1"/>
        <Item Type="CustomScript" Id="0FF88F94"/>
        <Item Type="CustomScript" Id="27F65FBF"/>
        <Item Type="CustomScript" Id="A66AD86C"/>
        <Item Type="CustomScript" Id="20A24223"/>
        <Item Type="CustomScript" Id="451E68FC"/>
        <Item Type="CustomScript" Id="BB17BDEA"/>
        <Item Type="CustomScript" Id="C39D8359"/>
        <Item Type="CustomScript" Id="851DC124"/>
        <Item Type="CustomScript" Id="885A5D37"/>
        <Item Type="CustomScript" Id="9C5B86E2"/>
        <Item Type="CustomScript" Id="9C067181"/>
        <Item Type="CustomScript" Id="F11E1AD9"/>
        <Item Type="CustomScript" Id="D48A8004"/>
        <Item Type="CustomScript" Id="BBE47CFA"/>
        <Item Type="CustomScript" Id="73D22352"/>
        <Item Type="CustomScript" Id="1B6D56E2"/>
        <Item Type="CustomScript" Id="C737F5A0"/>
    </Element>
    <Element Type="CustomScript" Id="53ED0E2B">
        <ScriptCode>
            bool gt_AnyUnitDies_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(EventUnit()) == &quot;Kobold&quot;)) {
                    gf_KoboldDeath(UnitGetPosition(EventUnit()), EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Sheep&quot;)) {
                    gf_SheepDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Dog&quot;)) {
                    gf_WolfDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Lyote&quot;)) {
                    gf_DirewolfDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if (((UnitGetType(EventUnit()) == &quot;Bear&quot;) || (UnitGetType(EventUnit()) == &quot;FrostBear&quot;))) {
                    gf_BearDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Nightwisp&quot;)) {
                    gf_NightwispDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Pheasant&quot;)) {
                    gf_PheasantDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Stag&quot;)) {
                    gf_StagDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;MurlocSlave&quot;)) {
                    gf_MurlocDeath(EventUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;MurlocChieftain&quot;)) {
                    gf_ChiefDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;DemonLordJaryx&quot;)) {
                    gf_DLJRDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Zulrogg&quot;)) {
                    gf_WarlordDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;FrostWitch&quot;)) {
                    gf_FrostWitchDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;CampfireLit&quot;)) {
                    gf_CampfireDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Ghoul&quot;)) {
                    gf_GhoulDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;TombGuardian&quot;) &amp;&amp; (gv_questIndexActive == 15)) {
                    gf_DeathTombGuardian(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Monstrosity&quot;) &amp;&amp; (gv_questIndexActive == 7)) {
                    gf_DeathMonstrosity(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;UndeadSavage&quot;)) {
                    gf_UndeadSavageDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;VeilGuardian&quot;)) {
                    gf_VeilGuardianDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((EventUnit() == gv_exile)) {
                    TriggerExecute(gt_ExileAttackVictory, true, false);
                }
                else if ((UnitGetType(EventUnit()) == &quot;RagingArcaneBeast&quot;)) {
                    gf_RABDeath(EventUnit(), libNtve_gf_KillingUnit());
                }
                else if ((UnitGetType(EventUnit()) == &quot;TheWoundedWizard&quot;)) {
                    TriggerExecute(gt_WizardExpire, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AnyUnitDies_Init () {
                gt_AnyUnitDies = TriggerCreate(&quot;gt_AnyUnitDies_Func&quot;);
                TriggerAddEventUnitDied(gt_AnyUnitDies, null);
            }
        </ScriptCode>
        <InitFunc>gt_AnyUnitDies_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="45825FA1">
        <ScriptCode>
            bool gt_InteractRezShrine_Func (bool testConds, bool runActions) {
                // Variable Declarations
                playergroup lv_deadPlayers;
                // Variable Initialization
                lv_deadPlayers = PlayerGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((gv_gameMode == 1))) {
                        return false;
                    }
                    if (!(((UnitGetType(EventUnit()) == &quot;ResurrectionShrine&quot;) || (UnitGetType(EventUnit()) == &quot;ResurrectionShrineSouth&quot;)))) {
                        return false;
                    }
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                    if (!((DialogIsVisible(gv_rezzDialog, EventPlayer()) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold)) &lt;= gv_interactRadius)) {
                    PlayerGroupLoopBegin(gv_teamData[gf_GetTeamOfPlayer(EventPlayer())].lv_members);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if (((gv_playerData[PlayerGroupLoopCurrent()].lv_kobold == null) || (UnitIsAlive(gv_playerData[PlayerGroupLoopCurrent()].lv_kobold) == false))) {
                            PlayerGroupAdd(lv_deadPlayers, PlayerGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    PlayerGroupLoopEnd();
                    if ((PlayerGroupCount(lv_deadPlayers) &gt; 0)) {
                        gv_selectedShrine[EventPlayer()] = EventUnit();
                        gf_UpdateRezShrine(EventPlayer());
                        DialogSetVisible(gv_rezzDialog, PlayerGroupSingle(EventPlayer()), true);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_busyError);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InteractRezShrine_Init () {
                gt_InteractRezShrine = TriggerCreate(&quot;gt_InteractRezShrine_Func&quot;);
                TriggerAddEventUnitSelected(gt_InteractRezShrine, null, c_playerAny, true);
            }
        </ScriptCode>
        <InitFunc>gt_InteractRezShrine_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0FF88F94">
        <ScriptCode>
            bool gt_DeselectRezShrine_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetType(EventUnit()) == &quot;ResurrectionShrine&quot;) || (UnitGetType(EventUnit()) == &quot;ResurrectionShrineSouth&quot;)))) {
                        return false;
                    }
                    if (!((DialogIsVisible(gv_rezzDialog, EventPlayer()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogSetVisible(gv_rezzDialog, PlayerGroupSingle(EventPlayer()), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DeselectRezShrine_Init () {
                gt_DeselectRezShrine = TriggerCreate(&quot;gt_DeselectRezShrine_Func&quot;);
                TriggerAddEventUnitSelected(gt_DeselectRezShrine, null, c_playerAny, false);
            }
        </ScriptCode>
        <InitFunc>gt_DeselectRezShrine_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="27F65FBF">
        <ScriptCode>
            bool gt_ClickRezzBTN_Func (bool testConds, bool runActions) {
                int auto305566B9_ae;
                int auto305566B9_ai;
                // Variable Declarations
                int lv_i;
                unitgroup lv_bank;
                int lv_a;
                int lv_clickedIndex;
                // Variable Initialization
                lv_i = EventPlayer();
                lv_bank = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((DialogControlGetDialog(EventDialogControl()) == gv_rezzDialog))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto305566B9_ae = 4;
                auto305566B9_ai = 1;
                lv_a = 1;
                for ( ; ( (auto305566B9_ai &gt;= 0 &amp;&amp; lv_a &lt;= auto305566B9_ae) || (auto305566B9_ai &lt;= 0 &amp;&amp; lv_a &gt;= auto305566B9_ae) ) ; lv_a += auto305566B9_ai ) {
                    if ((EventDialogControl() == gv_rezzDialogBTN[lv_a])) {
                        lv_clickedIndex = lv_a;
                    }
                    else {
                    }
                }
                if ((gv_dead[gv_rezzBTNTargetPlayer[lv_clickedIndex][lv_i]] == true) &amp;&amp; (gv_beingResurrected[gv_rezzBTNTargetPlayer[lv_clickedIndex][lv_i]] == false)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(gv_playerData[lv_i].lv_kobold), UnitGetPosition(gv_selectedShrine[lv_i])) &lt;= gv_interactRadius)) {
                        if ((gf_UnitIsBusy(gv_playerData[lv_i].lv_kobold) == false)) {
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_radiantGem, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_shadowstone, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            UnitGroupAddUnitGroup(lv_bank, UnitGroupFilter(null, c_playerAny, gv_playerData[lv_i].lv_resources.lv_sunflowers, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 1));
                            if ((UnitGroupCount(lv_bank, c_unitCountAlive) == 3)) {
                                UnitGroupLoopBegin(lv_bank);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    gf_DropandRemove(UnitGroupLoopCurrent());
                                }
                                UnitGroupLoopEnd();
                                DialogSetVisible(gv_rezzDialog, PlayerGroupSingle(lv_i), false);
                                UnitCreateEffectUnit(gv_playerData[lv_i].lv_kobold, &quot;ResurrectingApply&quot;, gv_playerData[lv_i].lv_kobold);
                                gf_Resurrecting(gv_playerData[lv_i].lv_kobold, gv_selectedShrine[EventPlayer()], gv_rezzBTNTargetPlayer[lv_clickedIndex][EventPlayer()], 15.0);
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_notEnoughResources);
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_outOfRange);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, gv_errorMessage.lv_busyError);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ClickRezzBTN_Init () {
                gt_ClickRezzBTN = TriggerCreate(&quot;gt_ClickRezzBTN_Func&quot;);
                TriggerAddEventDialogControl(gt_ClickRezzBTN, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_ClickRezzBTN_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A66AD86C">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish001_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[1]);
                gf_ReincarnatePlayerFinish(1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish001_Init () {
                gt_ReincarnatePlayerFinish001 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish001_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish001, gv_reincarnationTimer[1]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish001_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="20A24223">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish002_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[2]);
                gf_ReincarnatePlayerFinish(2);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish002_Init () {
                gt_ReincarnatePlayerFinish002 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish002_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish002, gv_reincarnationTimer[2]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish002_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="451E68FC">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish003_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[3]);
                gf_ReincarnatePlayerFinish(3);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish003_Init () {
                gt_ReincarnatePlayerFinish003 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish003_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish003, gv_reincarnationTimer[3]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish003_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BB17BDEA">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish004_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[4]);
                gf_ReincarnatePlayerFinish(4);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish004_Init () {
                gt_ReincarnatePlayerFinish004 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish004_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish004, gv_reincarnationTimer[4]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish004_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C39D8359">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish005_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[5]);
                gf_ReincarnatePlayerFinish(5);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish005_Init () {
                gt_ReincarnatePlayerFinish005 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish005_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish005, gv_reincarnationTimer[5]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish005_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="851DC124">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish006_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[6]);
                gf_ReincarnatePlayerFinish(6);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish006_Init () {
                gt_ReincarnatePlayerFinish006 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish006_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish006, gv_reincarnationTimer[6]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish006_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="885A5D37">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish007_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[7]);
                gf_ReincarnatePlayerFinish(7);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish007_Init () {
                gt_ReincarnatePlayerFinish007 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish007_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish007, gv_reincarnationTimer[7]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish007_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9C5B86E2">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish008_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[8]);
                gf_ReincarnatePlayerFinish(8);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish008_Init () {
                gt_ReincarnatePlayerFinish008 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish008_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish008, gv_reincarnationTimer[8]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish008_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9C067181">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish009_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[9]);
                gf_ReincarnatePlayerFinish(9);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish009_Init () {
                gt_ReincarnatePlayerFinish009 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish009_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish009, gv_reincarnationTimer[9]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish009_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F11E1AD9">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish010_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[10]);
                gf_ReincarnatePlayerFinish(10);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish010_Init () {
                gt_ReincarnatePlayerFinish010 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish010_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish010, gv_reincarnationTimer[10]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish010_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D48A8004">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish011_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[11]);
                gf_ReincarnatePlayerFinish(11);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish011_Init () {
                gt_ReincarnatePlayerFinish011 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish011_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish011, gv_reincarnationTimer[11]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish011_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BBE47CFA">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish012_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[12]);
                gf_ReincarnatePlayerFinish(12);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish012_Init () {
                gt_ReincarnatePlayerFinish012 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish012_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish012, gv_reincarnationTimer[12]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish012_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="73D22352">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish013_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[13]);
                gf_ReincarnatePlayerFinish(13);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish013_Init () {
                gt_ReincarnatePlayerFinish013 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish013_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish013, gv_reincarnationTimer[13]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish013_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1B6D56E2">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish014_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[14]);
                gf_ReincarnatePlayerFinish(14);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish014_Init () {
                gt_ReincarnatePlayerFinish014 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish014_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish014, gv_reincarnationTimer[14]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish014_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C737F5A0">
        <ScriptCode>
            bool gt_ReincarnatePlayerFinish015_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerWindowDestroy(gv_reincarnationTimerWindow[15]);
                gf_ReincarnatePlayerFinish(15);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReincarnatePlayerFinish015_Init () {
                gt_ReincarnatePlayerFinish015 = TriggerCreate(&quot;gt_ReincarnatePlayerFinish015_Func&quot;);
                TriggerAddEventTimer(gt_ReincarnatePlayerFinish015, gv_reincarnationTimer[15]);
            }
        </ScriptCode>
        <InitFunc>gt_ReincarnatePlayerFinish015_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="28414858">
        <Item Type="CustomScript" Id="015FB73F"/>
        <Item Type="CustomScript" Id="7F67D68B"/>
        <Item Type="CustomScript" Id="AADA52AB"/>
        <Item Type="CustomScript" Id="BAC023B9"/>
        <Item Type="CustomScript" Id="029FCF8D"/>
        <Item Type="CustomScript" Id="C7F6510F"/>
        <Item Type="CustomScript" Id="F7185FDB"/>
    </Element>
    <Element Type="CustomScript" Id="015FB73F">
        <ScriptCode>
            bool gt_ObservationRequest_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventDialogControl() == gv_observeRequestBtn))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogSetVisible(gv_observeRequest, PlayerGroupSingle(EventPlayer()), false);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_allDead == false) &amp;&amp; (gv_teamData[gv_playerData[PlayerGroupLoopCurrent()].lv_team].lv_watchTowerDefeat == false)) {
                        if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                            DialogSetVisible(gv_observeAnswer[EventPlayer()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            SoundPlay(SoundLink(&quot;UI_TerranHint&quot;, -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
                        }
                        else {
                            if ((PlayerGroupLoopCurrent() != 0) &amp;&amp; (PlayerGroupLoopCurrent() != 15)) {
                                libNtve_gf_SetAllianceOneWay(PlayerGroupLoopCurrent(), EventPlayer(), 6);
                            }
                            else {
                            }
                        }
                    }
                    else {
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObservationRequest_Init () {
                gt_ObservationRequest = TriggerCreate(&quot;gt_ObservationRequest_Func&quot;);
                TriggerAddEventDialogControl(gt_ObservationRequest, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_ObservationRequest_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="7F67D68B">
        <ScriptCode>
            bool gt_ObservationAnswer_Func (bool testConds, bool runActions) {
                int autoC67B6720_ae;
                int autoC67B6720_ai;
                // Variable Declarations
                int lv_a;
                bool lv_something;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                autoC67B6720_ae = gv_players;
                autoC67B6720_ai = 1;
                lv_a = 1;
                for ( ; ( (autoC67B6720_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoC67B6720_ae) || (autoC67B6720_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoC67B6720_ae) ) ; lv_a += autoC67B6720_ai ) {
                    if ((EventDialogControl() == gv_observeAnswerBtnYes[lv_a])) {
                        lv_something = true;
                        libNtve_gf_SetAllianceOneWay(EventPlayer(), lv_a, 6);
                    }
                    else {
                    }
                    if ((EventDialogControl() == gv_observeAnswerBtnNo[lv_a])) {
                        lv_something = true;
                    }
                    else {
                    }
                }
                if ((lv_something == true)) {
                    DialogSetVisible(DialogControlGetDialog(EventDialogControl()), PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObservationAnswer_Init () {
                gt_ObservationAnswer = TriggerCreate(&quot;gt_ObservationAnswer_Func&quot;);
                TriggerAddEventDialogControl(gt_ObservationAnswer, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_ObservationAnswer_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AADA52AB">
        <ScriptCode>
            bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_tutorial == false)) {
                    if ((gv_gameStarted == true) &amp;&amp; (gv_gameOver == false)) {
                        if ((gv_banksInitialized == true) &amp;&amp; (gv_bankSynced[EventPlayer()] == true)) {
                            gv_acclosses[EventPlayer()] += 1;
                            if ((gv_rated == true) &amp;&amp; (gv_validRatedGame == true)) {
                                gf_UpdatePlayerRating(EventPlayer(), 0);
                            }
                            else {
                            }
                            gf_ModifyMatchHistory(EventPlayer(), &quot;D&quot;);
                            gf_SaveResources(EventPlayer());
                        }
                        else {
                        }
                        if ((gf_LastTeamStanding() != -1)) {
                            gf_Endgame(false, false);
                        }
                        else if ((gv_activeTeams == 1) &amp;&amp; gf_AllDeadOnTeam(gf_GetTeamOfPlayer(EventPlayer()), false)) {
                            gf_Endgame(false, true);
                        }
                        else if (true) {
                            gv_playerData[EventPlayer()].lv_isAI = true;
                            UnitSetCustomValue(gv_playerData[EventPlayer()].lv_kobold, 5, 1.0);
                            gf_AICustomization(EventPlayer());
                            if ((gv_playerData[EventPlayer()].lv_alive == true)) {
                                UnitBehaviorAdd(gv_playerData[EventPlayer()].lv_kobold, &quot;KoboldBotInitialDelay&quot;, gv_playerData[EventPlayer()].lv_kobold, 1);
                                TextExpressionSetToken(&quot;Param/Expression/784232F7&quot;, &quot;A&quot;, PlayerName(EventPlayer()));
                                TextExpressionSetToken(&quot;Param/Expression/784232F7&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/1D66AD48&quot;));
                                TextExpressionSetToken(&quot;Param/Expression/F55BB0D8&quot;, &quot;A&quot;, TextWithColor(TextExpressionAssemble(&quot;Param/Expression/784232F7&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
                                TextExpressionSetToken(&quot;Param/Expression/F55BB0D8&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/1E811A68&quot;));
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble(&quot;Param/Expression/F55BB0D8&quot;));
                                gf_DropAllItems(gv_playerData[EventPlayer()].lv_kobold);
                                gf_AISpendSkillPoints(EventPlayer());
                            }
                            else {
                            }
                        }
                    }
                    else {
                        if ((gv_gameOver == true) &amp;&amp; (gf_GetTeamOfPlayer(EventPlayer()) == gv_winningTeam)) {
                            GameOver(EventPlayer(), c_gameOverVictory, false, true);
                        }
                        else {
                        }
                    }
                }
                else {
                    GameOver(EventPlayer(), c_gameOverVictory, false, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerLeaves_Init () {
                gt_PlayerLeaves = TriggerCreate(&quot;gt_PlayerLeaves_Func&quot;);
                TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
            }
        </ScriptCode>
        <InitFunc>gt_PlayerLeaves_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="BAC023B9">
        <ScriptCode>
            bool gt_DTConfigShow_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DialogIsVisible(gv_dTConfigWindow, EventPlayer()) == false)) {
                    if ((gv_dTDamageDoneOn[EventPlayer()] == true)) {
                        libNtve_gf_SetDialogItemChecked(gv_dTCheckbox[1], true, PlayerGroupSingle(EventPlayer()));
                    }
                    else {
                    }
                    if ((gv_dTDamageTakenOn[EventPlayer()] == true)) {
                        libNtve_gf_SetDialogItemChecked(gv_dTCheckbox[2], true, PlayerGroupSingle(EventPlayer()));
                    }
                    else {
                    }
                    libNtve_gf_SetDialogItemCurrentValue(gv_dTScaleSlider, gv_dTScaleValue[EventPlayer()], PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemCurrentValue(gv_dTDurationSlider, gv_dTDurationValue[EventPlayer()], PlayerGroupSingle(EventPlayer()));
                    DialogSetVisible(gv_dTConfigWindow, PlayerGroupSingle(EventPlayer()), true);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DTConfigShow_Init () {
                gt_DTConfigShow = TriggerCreate(&quot;gt_DTConfigShow_Func&quot;);
                TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, &quot;-dt&quot;, true);
                TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, &quot;-damagetext&quot;, true);
                TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, &quot;-dtconfig&quot;, true);
                TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, &quot;-dton&quot;, true);
                TriggerAddEventChatMessage(gt_DTConfigShow, c_playerAny, &quot;-dtoff&quot;, true);
            }
        </ScriptCode>
        <InitFunc>gt_DTConfigShow_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="029FCF8D">
        <ScriptCode>
            bool gt_DTConfigSetup_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogCreate(650, 250, c_anchorCenter, 0, -125, true);
                gv_dTConfigWindow = DialogLastCreated();
                DialogSetVisible(gv_dTConfigWindow, PlayerGroupAll(), false);
                libNtve_gf_CreateDialogItemCheckBox(gv_dTConfigWindow, 50, 50, c_anchorTopLeft, 50, 50, StringExternal(&quot;Param/Value/71EB1DE9&quot;), false);
                gv_dTCheckbox[1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemCheckBox(gv_dTConfigWindow, 50, 50, c_anchorTopLeft, 50, 100, StringExternal(&quot;Param/Value/344B41F7&quot;), false);
                gv_dTCheckbox[2] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_dTConfigWindow, 250, 50, c_anchorTopLeft, 100, 65, StringExternal(&quot;Param/Value/A6640A11&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_dTConfigWindow, 250, 50, c_anchorTopLeft, 100, 115, StringExternal(&quot;Param/Value/4262AB6D&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_dTConfigWindow, 275, 50, c_anchorTopRight, 25, 65, StringExternal(&quot;Param/Value/948A24F7&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_dTScaleText = DialogControlLastCreated();
                DialogControlCreate(gv_dTConfigWindow, c_triggerControlTypeSlider);
                gv_dTScaleSlider = DialogControlLastCreated();
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 1.5, PlayerGroupAll());
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.75, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 50, 75);
                libNtve_gf_CreateDialogItemLabel(gv_dTConfigWindow, 275, 50, c_anchorTopRight, 25, 140, StringExternal(&quot;Param/Value/21DD75E2&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_dTDurationText = DialogControlLastCreated();
                DialogControlCreate(gv_dTConfigWindow, c_triggerControlTypeSlider);
                gv_dTDurationSlider = DialogControlLastCreated();
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 1.5, PlayerGroupAll());
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.75, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 50, 150);
                libNtve_gf_CreateDialogItemButton(gv_dTConfigWindow, 250, 45, c_anchorBottomLeft, 50, 50, StringExternal(&quot;Param/Value/152B7C17&quot;), StringExternal(&quot;Param/Value/E2ECDD6B&quot;), &quot;&quot;);
                gv_dTClose = DialogControlLastCreated();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DTConfigSetup_Init () {
                gt_DTConfigSetup = TriggerCreate(&quot;gt_DTConfigSetup_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_DTConfigSetup_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="C7F6510F">
        <ScriptCode>
            bool gt_DTSliderChange_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((EventDialogControl() == gv_dTScaleSlider)) {
                    if ((AbsF((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) - 1.0)) &lt;= 0.005)) {
                        TextExpressionSetToken(&quot;Param/Expression/F5CC08D8&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/CBD5DBA5&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/F5CC08D8&quot;, &quot;B&quot;, FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 2));
                        TextExpressionSetToken(&quot;Param/Expression/F5CC08D8&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/0D972C1D&quot;));
                        libNtve_gf_SetDialogItemText(gv_dTScaleText, TextExpressionAssemble(&quot;Param/Expression/F5CC08D8&quot;), PlayerGroupSingle(EventPlayer()));
                    }
                    else {
                        TextExpressionSetToken(&quot;Param/Expression/BCC8566F&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/8AB0ABEA&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/BCC8566F&quot;, &quot;B&quot;, FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 2));
                        libNtve_gf_SetDialogItemText(gv_dTScaleText, TextExpressionAssemble(&quot;Param/Expression/BCC8566F&quot;), PlayerGroupSingle(EventPlayer()));
                    }
                }
                else if ((EventDialogControl() == gv_dTDurationSlider)) {
                    if ((AbsF((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) - 1.0)) &lt;= 0.005)) {
                        TextExpressionSetToken(&quot;Param/Expression/FCE8E1F7&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/59D007AE&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/FCE8E1F7&quot;, &quot;B&quot;, FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 2));
                        TextExpressionSetToken(&quot;Param/Expression/FCE8E1F7&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/A8538B25&quot;));
                        libNtve_gf_SetDialogItemText(gv_dTDurationText, TextExpressionAssemble(&quot;Param/Expression/FCE8E1F7&quot;), PlayerGroupSingle(EventPlayer()));
                    }
                    else {
                        TextExpressionSetToken(&quot;Param/Expression/D5B4EE3F&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/25DAB760&quot;));
                        TextExpressionSetToken(&quot;Param/Expression/D5B4EE3F&quot;, &quot;B&quot;, FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 2));
                        libNtve_gf_SetDialogItemText(gv_dTDurationText, TextExpressionAssemble(&quot;Param/Expression/D5B4EE3F&quot;), PlayerGroupSingle(EventPlayer()));
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DTSliderChange_Init () {
                gt_DTSliderChange = TriggerCreate(&quot;gt_DTSliderChange_Func&quot;);
                TriggerAddEventDialogControl(gt_DTSliderChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
            }
        </ScriptCode>
        <InitFunc>gt_DTSliderChange_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F7185FDB">
        <ScriptCode>
            bool gt_DTSaveClose_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventDialogControl() == gv_dTClose))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogSetVisible(gv_dTConfigWindow, PlayerGroupSingle(EventPlayer()), false);
                if ((libNtve_gf_DialogItemIsChecked(gv_dTCheckbox[1], EventPlayer()) == true)) {
                    gv_dTDamageDoneOn[EventPlayer()] = true;
                }
                else {
                    gv_dTDamageDoneOn[EventPlayer()] = false;
                }
                if ((libNtve_gf_DialogItemIsChecked(gv_dTCheckbox[2], EventPlayer()) == true)) {
                    gv_dTDamageTakenOn[EventPlayer()] = true;
                }
                else {
                    gv_dTDamageTakenOn[EventPlayer()] = false;
                }
                gv_dTScaleValue[EventPlayer()] = libNtve_gf_DialogItemValue(gv_dTScaleSlider, EventPlayer());
                gv_dTDurationValue[EventPlayer()] = libNtve_gf_DialogItemValue(gv_dTDurationSlider, EventPlayer());
                BankLoad(&quot;nostrobskalufs&quot;, EventPlayer());
                BankValueSetFromFlag(BankLastCreated(), &quot;Settings&quot;, &quot;DamageTextEnabled&quot;, gv_dTDamageDoneOn[EventPlayer()]);
                BankValueSetFromFlag(BankLastCreated(), &quot;Settings&quot;, &quot;DamageText2Enabled&quot;, gv_dTDamageTakenOn[EventPlayer()]);
                BankValueSetFromFixed(BankLastCreated(), &quot;Settings&quot;, &quot;DamageTextScale&quot;, gv_dTScaleValue[EventPlayer()]);
                BankValueSetFromFixed(BankLastCreated(), &quot;Settings&quot;, &quot;DamageTextDuration&quot;, gv_dTDurationValue[EventPlayer()]);
                BankSave(BankLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DTSaveClose_Init () {
                gt_DTSaveClose = TriggerCreate(&quot;gt_DTSaveClose_Func&quot;);
                TriggerAddEventDialogControl(gt_DTSaveClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
        </ScriptCode>
        <InitFunc>gt_DTSaveClose_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="40858476">
        <Item Type="CustomScript" Id="934CEB1A"/>
        <Item Type="CustomScript" Id="720BDEE4"/>
        <Item Type="CustomScript" Id="AAB83029"/>
        <Item Type="CustomScript" Id="3D12F692"/>
        <Item Type="CustomScript" Id="331E727C"/>
        <Item Type="CustomScript" Id="9AEBBC92"/>
        <Item Type="CustomScript" Id="FD04F295"/>
        <Item Type="CustomScript" Id="6BF20ED1"/>
        <Item Type="CustomScript" Id="FA14F0CA"/>
        <Item Type="CustomScript" Id="A79F58AC"/>
        <Item Type="CustomScript" Id="4215AA42"/>
        <Item Type="CustomScript" Id="2C10E407"/>
    </Element>
    <Element Type="CustomScript" Id="934CEB1A">
        <ScriptCode>
            bool gt_HuntKobolds_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_hunter;
                unitgroup lv_targets;
                unitgroup lv_nearbyTargets;
                // Variable Initialization
                lv_hunter = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_targets = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;Fortress&quot;, &quot;&quot;, UnitGetOwner(lv_hunter), c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0);
                lv_nearbyTargets = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(lv_targets, c_unitCountAlive) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_nearbyTargets = UnitGroupFilterRegion(lv_targets, RegionCircle(UnitGetPosition(lv_hunter), 16.0), 0);
                if (((UnitGetType(lv_hunter) == &quot;RagingArcaneBeast&quot;) || (UnitGetType(lv_hunter) == &quot;DemonLordJaryx&quot;))) {
                    UnitIssueOrder(lv_hunter, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(UnitGroupClosestToPoint(lv_targets, UnitGetPosition(lv_hunter)))), c_orderQueueReplace);
                }
                else if ((UnitGroupCount(lv_nearbyTargets, c_unitCountAlive) &gt; 0) &amp;&amp; ((UnitGetType(lv_hunter) == &quot;MurlocChieftain&quot;) || (UnitGetType(lv_hunter) == &quot;Zulrogg&quot;) || (UnitGetType(lv_hunter) == &quot;FrostWitch&quot;))) {
                    UnitIssueOrder(lv_hunter, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyTargets, UnitGetPosition(lv_hunter)))), c_orderQueueReplace);
                }
                else if (((UnitGetType(lv_hunter) == &quot;Dog&quot;) || (UnitGetType(lv_hunter) == &quot;Lyote&quot;) || (UnitGetType(lv_hunter) == &quot;Ghoul&quot;) || (UnitGetType(lv_hunter) == &quot;InfernalMinion&quot;) || (UnitGetType(lv_hunter) == &quot;UndeadSavage&quot;))) {
                    UnitIssueOrder(lv_hunter, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(UnitGroupRandomUnit(lv_targets, c_unitCountAlive))), c_orderQueueReplace);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HuntKobolds_Init () {
                gt_HuntKobolds = TriggerCreate(&quot;gt_HuntKobolds_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_HuntKobolds, c_playerAny, &quot;HuntKoboldsTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_HuntKobolds_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="720BDEE4">
        <ScriptCode>
            bool gt_CowardlyArcher_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_unit;
                fixed lv_cooldown;
                unitgroup lv_enemies;
                // Variable Initialization
                lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_cooldown = gf_AttackCooldown(lv_unit);
                lv_enemies = UnitGroupAlliance(UnitGetOwner(lv_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_unit), (UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropCurrent) + 2.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                // Conditions
                if (testConds) {
                    if (!((lv_cooldown &gt;= 0.5))) {
                        return false;
                    }
                    if (!((UnitGroupCount(lv_enemies, c_unitCountAlive) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointWithOffsetPolar(UnitGetPosition(lv_unit), (lv_cooldown * UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropCurrent)), AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lv_unit)))), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CowardlyArcher_Init () {
                gt_CowardlyArcher = TriggerCreate(&quot;gt_CowardlyArcher_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_CowardlyArcher, c_playerAny, &quot;CowardlyArcherTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_CowardlyArcher_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="AAB83029">
        <ScriptCode>
            bool gt_SetupAIChatStrings_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_aIRetreatString[1] = &quot;Retreat!&quot;;
                gv_aIRetreatString[2] = &quot;Fall back!&quot;;
                gv_aIRetreatString[3] = &quot;Time for a tactical withdrawl.&quot;;
                gv_aIRetreatString[4] = &quot;We&apos;re being overwhelmed!&quot;;
                gv_aIRetreatString[5] = &quot;We are outmatched!&quot;;
                gv_aIRetreatString[6] = &quot;They are too strong!&quot;;
                gv_aIRetreatString[7] = &quot;We must regroup at a safer location!&quot;;
                gv_aIRetreatString[8] = &quot;I have underestimated the enemy. Flee!&quot;;
                gv_aIReviveString[1] = &quot;I&apos;m on my way to a resurrection shrine!&quot;;
                gv_aIReviveString[2] = &quot;Hold on, I&apos;m heading to a resurrection shrine.&quot;;
                gv_aIReviveString[3] = &quot;Just a moment, I&apos;m going to revive someone.&quot;;
                gv_aIQuestKillString[1] = &quot;Let&apos;s rid the forest of that foul beast!&quot;;
                gv_aIQuestKillString[2] = &quot;That monster will not take our candles!&quot;;
                gv_aIQuestKillString[3] = &quot;That opponent over there must have wonderful treasure!&quot;;
                gv_aIQuestKillString[4] = &quot;What a monstrous creature!&quot;;
                gv_aIQuestKillString[5] = &quot;We must defend the forest against the invader.&quot;;
                gv_aIQuestKillString[6] = &quot;A mighty foe!&quot;;
                gv_aIQuestKillString[7] = &quot;Glory awaits!&quot;;
                gv_aIQuestLootString[1] = &quot;I smell... loot?&quot;;
                gv_aIQuestLootString[2] = &quot;Treasure!&quot;;
                gv_aIQuestLootString[3] = &quot;Hands off! I saw it first.&quot;;
                gv_aIQuestLootString[4] = &quot;Oooh, shinies!&quot;;
                gv_aIQuestLootString[5] = &quot;It&apos;s looting time!&quot;;
                gv_aIQuestLootString[6] = &quot;Don&apos;t let our enemies get their hands on the treasure!&quot;;
                gv_aIQuestString[1] = &quot;Let&apos;s do this!&quot;;
                gv_aIQuestString[2] = &quot;Let&apos;s go complete the quest.&quot;;
                gv_aIQuestString[3] = &quot;I will bring honor to our tribe!&quot;;
                gv_aIQuestString[4] = &quot;We&apos;ll beat the enemy tribe to it!&quot;;
                gv_aIQuestString[5] = &quot;To arms!&quot;;
                gv_aIQuestString[6] = &quot;They no take candle!&quot;;
                gv_aIQuestString[7] = &quot;We should prevent the enemy from completing this task.&quot;;
                gv_aIQuestGladiatorString[1] = &quot;I am the strongest member of our tribe! I will go.&quot;;
                gv_aIQuestGladiatorString[2] = &quot;I believe I can defeat anyone from the other tribe.&quot;;
                gv_aIQuestGladiatorString[3] = &quot;Wish me luck... I think I&apos;ll need it.&quot;;
                gv_aIQuestDeadnightString[1] = &quot;I have a bad feeling about this.&quot;;
                gv_aIQuestDeadnightString[2] = &quot;What in the name of the candle is going on?&quot;;
                gv_aIQuestDeadnightString[3] = &quot;Wait... what is happening?&quot;;
                gv_aIQuestDeadnightString[4] = &quot;Oh no!&quot;;
                gv_aISpellString[1] = &quot;I have learned a new spell.&quot;;
                gv_aISpellString[2] = &quot;I&apos;m on my way to becoming a powerful shaman!&quot;;
                gv_aISpellString[3] = &quot;This wizard just taught me a new trick. I can&apos;t wait to try it out.&quot;;
                gv_aISpellString[4] = &quot;I know some new magicks! My enemies will tremble.&quot;;
                gv_aISpellString[5] = &quot;These wizards sure know some fancy stuff!&quot;;
                gv_aITrapsString[1] = &quot;I&apos;m putting down some spike traps over here.&quot;;
                gv_aITrapsString[2] = &quot;Preparing some traps here, remember to lure the enemy into them if they attack.&quot;;
                gv_aITrapsString[3] = &quot;Our enemies are in for a spiky surprise if they come by this way!&quot;;
                gv_aITauntString[1] = &quot;Hah! Your tribe is weak!&quot;;
                gv_aITauntString[2] = &quot;We will rule this forest!&quot;;
                gv_aITauntString[3] = &quot;I took your fallen comrade&apos;s candle, how do you like that?&quot;;
                gv_aITauntString[4] = &quot;You&apos;re pathetic!&quot;;
                gv_aITauntString[5] = &quot;I didn&apos;t even break a sweat.&quot;;
                gv_aITauntString[6] = &quot;Leave this forest while you still can!&quot;;
                gv_aITauntString[7] = &quot;You cannot hide from us!&quot;;
                gv_aITauntString[8] = &quot;Run away you cowards!&quot;;
                gv_aIMonumentString[1] = &quot;We must not let them finish the monument!&quot;;
                gv_aIMonumentString[2] = &quot;Attack them, now!&quot;;
                gv_aIMonumentString[3] = &quot;Let&apos;s go burn down their camp!&quot;;
                gv_aIMonumentString[4] = &quot;The time to strike is now!&quot;;
                gv_aIMonumentBuildString[1] = &quot;I will gather some resources and build the monument!&quot;;
                gv_aIMonumentBuildString[2] = &quot;Help me gather some resources and I will construct a monument in honor of Barnet!&quot;;
                gv_aIExileString[1] = &quot;Time to kill the king!&quot;;
                gv_aIExileString[2] = &quot;Let us go end this fallen monarch&apos;s miserable life.&quot;;
                gv_aIExileString[3] = &quot;We should earn the favor of the new king by hunting down his predecessor!&quot;;
                gv_aIExileString[4] = &quot;How the mighty have fallen. Let&apos;s go end this!&quot;;
                gv_aIPirateString[1] = &quot;Diggy diggy hole.&quot;;
                gv_aIPirateString[2] = &quot;I&apos;m a kobold and I&apos;m digging a hole!&quot;;
                gv_aIPirateString[3] = &quot;Where is the treasure!&quot;;
                gv_aIPirateString[4] = &quot;I know it&apos;s around here somewhere.&quot;;
                gv_aIPirateString[5] = &quot;Help me find the treasure!&quot;;
                gv_aIPetString[1] = &quot;Time to go hunting!&quot;;
                gv_aIPetString[2] = &quot;I&apos;m going to tame some pets.&quot;;
                gv_aIPetString[3] = &quot;I&apos;m making an obedience rod!&quot;;
                gv_aIChefQuestString[1] = &quot;I&apos;m a good chef, and I will try to satisfy the gastronomist!&quot;;
                gv_aIChefQuestString[2] = &quot;I will attempt to make the food that he wants.&quot;;
                gv_aIEnemySighted[1] = &quot;I have engaged the enemy.&quot;;
                gv_aIEnemySighted[2] = &quot;Enemies!&quot;;
                gv_aIEnemySighted[3] = &quot;I have found our rivals.&quot;;
                gv_aIEnemySighted[4] = &quot;Today is a good day to die!&quot;;
                gv_aIEnemySighted[5] = &quot;Let&apos;s fight!&quot;;
                gv_aIEnemySighted[6] = &quot;Over here!&quot;;
                gv_aIEnemySighted[7] = &quot;I will take their candle!&quot;;
                gv_aIEnemySighted[8] = &quot;Join me in battle!&quot;;
                gv_aIEnemySighted[9] = &quot;To arms!&quot;;
                gv_aIEnemySighted[10] = &quot;Kill them!&quot;;
                gv_aIWatchTowerBuilder[1] = &quot;I will build a Watch Tower for us.&quot;;
                gv_aIWatchTowerBuilder[2] = &quot;I&apos;m gathering resources for a Watch Tower. Please assist me.&quot;;
                gv_aIWatchTowerBuilder[3] = &quot;We should build a Watch Tower.&quot;;
                gv_aIFishingString[1] = &quot;Let&apos;s go on a fishing expedition!&quot;;
                gv_aIFishingString[2] = &quot;I&apos;m going to see if I can catch some fish.&quot;;
                gv_aIFishingString[3] = &quot;Let&apos;s see what fish we can find.&quot;;
                gv_aIFishingString[4] = &quot;I&apos;m making a fishing rod.&quot;;
                gv_aIFishingString[5] = &quot;Flee you fool fish, for here comes ferocious I to catch you all!&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupAIChatStrings_Init () {
                gt_SetupAIChatStrings = TriggerCreate(&quot;gt_SetupAIChatStrings_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SetupAIChatStrings_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3D12F692">
        <ScriptCode>
            bool gt_AIMainThread_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_kobold;
                int lv_i;
                point lv_p;
                unitgroup lv_g;
                // Variable Initialization
                lv_kobold = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_i = UnitGetOwner(lv_kobold);
                lv_g = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_aIData[lv_i].lv_logicInProgress = true;
                if (gv_aIData[lv_i].lv_cycle &gt;= 100) {
                    gv_aIData[lv_i].lv_cycle = 1;
                }
                else {
                    gv_aIData[lv_i].lv_cycle = gv_aIData[lv_i].lv_cycle + 1;
                }
                TextExpressionSetToken(&quot;Param/Expression/A5EA6E2A&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/2AAD3141&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A5EA6E2A&quot;, &quot;B&quot;, IntToText(gv_aIData[lv_i].lv_cycle));
                TextExpressionSetToken(&quot;Param/Expression/A5EA6E2A&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/EE43454B&quot;));
                TriggerDebugOutput(1, TextExpressionAssemble(&quot;Param/Expression/A5EA6E2A&quot;), false);
                if ((ModI(gv_aIData[lv_i].lv_cycle, 10) == 0)) {
                    gf_AIExcessItems(lv_kobold);
                }
                else {
                }
                gf_AIRunWalk(lv_kobold);
                if (gf_AIEquipment(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/040EEAE7&quot;), false);
                }
                else if (gf_AIRetreat(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/C76FBA48&quot;), false);
                }
                else if (gf_AIQuestingImperative(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/469D9840&quot;), false);
                }
                else if (gf_AICombat(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/D0AB2416&quot;), false);
                }
                else if (gf_AITakeABreath(lv_kobold)) {
                }
                else if (gf_AIEarlyExploring(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/49EAF99F&quot;), false);
                }
                else if (gf_AIFood(lv_kobold, false, gv_playerData[lv_i].lv_hunger, false)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/A3BE3602&quot;), false);
                }
                else if (gf_AIStamina(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/7618E936&quot;), false);
                }
                else if (gf_AICampfire(lv_kobold, gv_playerData[lv_i].lv_warmth, null, false)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/65127227&quot;), false);
                }
                else if (gf_AIQuestingHighPriority(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/B1F9840E&quot;), false);
                }
                else if (gf_AIResurrect(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/C423D109&quot;), false);
                }
                else if (gf_AIHelpAlly(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/F757DA57&quot;), false);
                }
                else if (gf_AIWolves(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/C64A49F4&quot;), false);
                }
                else if (gf_AITradeSellStore(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/CDA0E5FF&quot;), false);
                }
                else if (gf_AIMurlocs(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/FC243E38&quot;), false);
                }
                else if (gf_AITavern(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/57A6D80F&quot;), false);
                }
                else if (gf_AIWatchTower(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/1B69EDE4&quot;), false);
                }
                else if (gf_AIADT(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/725BCBCD&quot;), false);
                }
                else if (gf_AISmithy(lv_kobold, gv_aIData[lv_i].lv_smithyDesire)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/5DE7B309&quot;), false);
                }
                else if (gf_AIWorkbench(lv_kobold, gv_aIData[lv_i].lv_benchDesire)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/550BECE0&quot;), false);
                }
                else if (gf_AIHuntersLodge(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/F8CCD237&quot;), false);
                }
                else if (gf_AITrees(lv_kobold, 1)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/53608861&quot;), false);
                }
                else if (gf_AIStone(lv_kobold, 1)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/F40C68F3&quot;), false);
                }
                else if (gf_AIPhez(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/ECE395E7&quot;), false);
                }
                else if (gf_AISheep(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/E2255BC5&quot;), false);
                }
                else if (gf_AIRepairFortress(lv_kobold)) {
                }
                else if (gf_AIHerbs(lv_kobold, 1)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/4F3A39BE&quot;), false);
                }
                else if (gf_AIStags(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/42507937&quot;), false);
                }
                else if (gf_AIQuestingNormal(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/A391879D&quot;), false);
                }
                else if (gf_AITrees(lv_kobold, 2)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/E9E0C8BD&quot;), false);
                }
                else if (gf_AIStone(lv_kobold, 2)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/55685202&quot;), false);
                }
                else if (gf_AIStone(lv_kobold, 3)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/E61D1DB0&quot;), false);
                }
                else if (gf_AIHerbs(lv_kobold, 2)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/9FCF16CB&quot;), false);
                }
                else if (gf_AIBerries(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/71055701&quot;), false);
                }
                else if (gf_AINightwisp(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/113E61F4&quot;), false);
                }
                else if (gf_AIStorageCleaning(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/1F98C27C&quot;), false);
                }
                else if (gf_AIGold(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/6276CF00&quot;), false);
                }
                else if (gf_AITraps(lv_kobold)) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/64C0307D&quot;), false);
                }
                else if (true) {
                    TriggerDebugOutput(1, StringExternal(&quot;Param/Value/21A3E8BC&quot;), false);
                    if ((gv_aIData[lv_i].lv_weightedPOI != null)) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_kobold), gv_aIData[lv_i].lv_weightedPOI) &lt;= 6.0) &amp;&amp; gf_PathableMaximum(lv_kobold, gv_aIData[lv_i].lv_weightedPOI, 60)) {
                            gv_aIData[lv_i].lv_weightedPOI = null;
                        }
                        else {
                            UnitIssueOrder(lv_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_aIData[lv_i].lv_weightedPOI), c_orderQueueReplace);
                        }
                    }
                    else {
                        lv_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Kobold&quot;, &quot;Fortress&quot;, &quot;&quot;, lv_i, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        if ((UnitGroupCount(lv_g, c_unitCountAlive) &gt; 0)) {
                            lv_p = PointWithOffsetPolar(UnitGetPosition(lv_kobold), 32.0, (AngleBetweenPoints(UnitGetPosition(lv_kobold), UnitGetPosition(UnitGroupRandomUnit(lv_g, c_unitCountAlive))) + RandomFixed(-45.0, 45.0)));
                        }
                        else {
                            lv_p = RegionRandomPoint(RegionPlayableMap());
                        }
                        if ((UnitGroupCount(lv_g, c_unitCountAlive) &gt; 0) &amp;&amp; (UnitGetPropertyFixed(lv_kobold, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0) &amp;&amp; gf_AICanCastSpell(lv_kobold, AbilityCommand(&quot;Clairvoyance&quot;, 0))) {
                            UnitIssueOrder(lv_kobold, OrderTargetingPoint(AbilityCommand(&quot;Clairvoyance&quot;, 0), RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(lv_g), 64.0))), c_orderQueueReplace);
                        }
                        else {
                            if (gf_PathableMaximum(lv_kobold, lv_p, 500)) {
                                UnitIssueOrder(lv_kobold, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_p), c_orderQueueReplace);
                                gv_aIData[lv_i].lv_weightedPOI = lv_p;
                            }
                            else {
                            }
                        }
                    }
                }
                gv_aIData[lv_i].lv_logicInProgress = false;
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/10E0D061&quot;), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIMainThread_Init () {
                gt_AIMainThread = TriggerCreate(&quot;gt_AIMainThread_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AIMainThread, c_playerAny, &quot;KoboldBotTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AIMainThread_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="331E727C">
        <ScriptCode>
            bool gt_AIHelperEnemyStart_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupAdd(gv_aIData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_enemies, EventPlayerEffectUsedUnit(c_effectUnitTarget));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIHelperEnemyStart_Init () {
                gt_AIHelperEnemyStart = TriggerCreate(&quot;gt_AIHelperEnemyStart_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AIHelperEnemyStart, c_playerAny, &quot;AIHelperEnemyInitial&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AIHelperEnemyStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9AEBBC92">
        <ScriptCode>
            bool gt_AIHelperEnemyEnd_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(EventPlayerEffectUsedUnit(c_effectUnitCaster)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_aIData[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_enemies, EventPlayerEffectUsedUnit(c_effectUnitTarget));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIHelperEnemyEnd_Init () {
                gt_AIHelperEnemyEnd = TriggerCreate(&quot;gt_AIHelperEnemyEnd_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_AIHelperEnemyEnd, c_playerAny, &quot;AIHelperEnemyTriggerEnd&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AIHelperEnemyEnd_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="FD04F295">
        <ScriptCode>
            bool gt_AIRecentCombatExpire_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(EventUnit(), gv_aIStatusIndex, IntToFixed(0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIRecentCombatExpire_Init () {
                gt_AIRecentCombatExpire = TriggerCreate(&quot;gt_AIRecentCombatExpire_Func&quot;);
                TriggerAddEventUnitBehaviorChange(gt_AIRecentCombatExpire, null, &quot;AIRecentCombat&quot;, c_unitBehaviorChangeDeactivate);
            }
        </ScriptCode>
        <InitFunc>gt_AIRecentCombatExpire_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6BF20ED1">
        <ScriptCode>
            bool gt_AIBuildPlacement_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(EventUnit(), &quot;KoboldBotNormal&quot;) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerDebugOutput(1, StringExternal(&quot;Param/Value/AD09E1CC&quot;), false);
                TimerStart(gv_aIData[UnitGetOwner(EventUnit())].lv_buildPlacement, 2.0, false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIBuildPlacement_Init () {
                gt_AIBuildPlacement = TriggerCreate(&quot;gt_AIBuildPlacement_Func&quot;);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 1), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 0), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 2), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 3), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 4), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 5), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 7), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 8), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 6), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 14), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 9), c_abilBuildStageApproach, false);
                TriggerAddEventUnitAbility(gt_AIBuildPlacement, null, AbilityCommand(&quot;KoboldTestBuild&quot;, 16), c_abilBuildStageApproach, false);
            }
        </ScriptCode>
        <InitFunc>gt_AIBuildPlacement_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="FA14F0CA">
        <ScriptCode>
            bool gt_AISelectionDisable_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
                        return false;
                    }
                    if (!((EventPlayer() != UnitGetOwner(EventUnit())))) {
                        return false;
                    }
                    if (!((UnitHasBehavior(EventUnit(), &quot;KoboldBotNormal&quot;) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), EventPlayer(), 0) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupAdd(gv_aISelected2[EventPlayer()], EventUnit());
                if ((UnitHasBehavior(EventUnit(), &quot;ToggleAI&quot;) == false)) {
                    UnitBehaviorAdd(EventUnit(), &quot;ToggleAI&quot;, EventUnit(), 1);
                    gf_Advancedtag(EventUnit(), EventPlayer(), StringExternal(&quot;Param/Value/99962DFE&quot;), 3.0, 24);
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AISelectionDisable_Init () {
                gt_AISelectionDisable = TriggerCreate(&quot;gt_AISelectionDisable_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_AISelectionDisable_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A79F58AC">
        <ScriptCode>
            bool gt_AISelectionEnable_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
                        return false;
                    }
                    if (!((EventPlayer() != UnitGetOwner(EventUnit())))) {
                        return false;
                    }
                    if (!((UnitHasBehavior(EventUnit(), &quot;KoboldBotNormal&quot;) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), EventPlayer(), 0) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_aISelected2[EventPlayer()], EventUnit());
                if ((UnitHasBehavior(EventUnit(), &quot;ToggleAI&quot;) == true) &amp;&amp; (gf_OthersSelectingUnit(EventUnit(), EventPlayer()) == false)) {
                    UnitBehaviorRemove(EventUnit(), &quot;ToggleAI&quot;, 1);
                    gf_Advancedtag(EventUnit(), EventPlayer(), StringExternal(&quot;Param/Value/D5A03610&quot;), 3.0, 24);
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AISelectionEnable_Init () {
                gt_AISelectionEnable = TriggerCreate(&quot;gt_AISelectionEnable_Func&quot;);
                TriggerAddEventUnitSelected(gt_AISelectionEnable, null, c_playerAny, false);
            }
        </ScriptCode>
        <InitFunc>gt_AISelectionEnable_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4215AA42">
        <ScriptCode>
            bool gt_NonAIinCombatStart_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_aIStatusIndex, IntToFixed(2));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NonAIinCombatStart_Init () {
                gt_NonAIinCombatStart = TriggerCreate(&quot;gt_NonAIinCombatStart_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_NonAIinCombatStart, c_playerAny, &quot;AICombatTriggerStart&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_NonAIinCombatStart_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="2C10E407">
        <ScriptCode>
            bool gt_NonAIinCombatEnd_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_aIStatusIndex, IntToFixed(0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NonAIinCombatEnd_Init () {
                gt_NonAIinCombatEnd = TriggerCreate(&quot;gt_NonAIinCombatEnd_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_NonAIinCombatEnd, c_playerAny, &quot;AICombatTriggerEnd&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_NonAIinCombatEnd_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="04CA129D">
        <Item Type="CustomScript" Id="78DA2326"/>
        <Item Type="CustomScript" Id="F58C98F0"/>
        <Item Type="CustomScript" Id="0F7FF7DC"/>
        <Item Type="CustomScript" Id="FA299619"/>
        <Item Type="CustomScript" Id="F4C5D47F"/>
        <Item Type="CustomScript" Id="50C9BF28"/>
        <Item Type="CustomScript" Id="B325AB37"/>
        <Item Type="CustomScript" Id="999CB012"/>
        <Item Type="CustomScript" Id="4F340855"/>
        <Item Type="CustomScript" Id="3CAEDFF4"/>
        <Item Type="CustomScript" Id="651BBEA7"/>
        <Item Type="CustomScript" Id="4CAA07AF"/>
    </Element>
    <Element Type="CustomScript" Id="78DA2326">
        <ScriptCode>
            bool gt_MurlocSlaveEnd_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DropAllItems(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocSlaveEnd_Init () {
                gt_MurlocSlaveEnd = TriggerCreate(&quot;gt_MurlocSlaveEnd_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocSlaveEnd, c_playerAny, &quot;MurlocContractTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocSlaveEnd_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F58C98F0">
        <ScriptCode>
            bool gt_MurlocAction_Func (bool testConds, bool runActions) {
                int auto7B8F5ED2_val;
                // Variable Declarations
                unit lv_murloc;
                int lv_i;
                unitgroup lv_a;
                unit lv_b;
                unit lv_u;
                point lv_c;
                int lv_index;
                int lv_integerG;
                point lv_dropoffLoc;
                unit lv_fNode;
                // Variable Initialization
                lv_murloc = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_i = UnitGetOwner(lv_murloc);
                lv_a = UnitGroupEmpty();
                lv_fNode = gf_GetMurlocFocalNode(lv_murloc);
                // Conditions
                if (testConds) {
                    if (!((UnitHasBehavior(lv_murloc, &quot;Cooking&quot;) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;CampfireLit&quot;, &quot;&quot;, &quot;&quot;, lv_i, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_murloc), 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                if ((gv_playerData[lv_i].lv_isAI == true) &amp;&amp; (gv_b_Day == false) &amp;&amp; (UnitGroupCount(UnitGroup(&quot;Lyote&quot;, 15, RegionCircle(UnitGetPosition(lv_murloc), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_murloc), &quot;Sight&quot;, lv_i))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; 0) &amp;&amp; gf_UnitExists(lv_b)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_murloc), UnitGetPosition(lv_b)) &lt;= 4.0)) {
                        UnitIssueOrder(lv_murloc, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(lv_murloc, OrderTargetingUnit(AbilityCommand(&quot;move&quot;, 0), lv_b), c_orderQueueReplace);
                    }
                }
                else {
                    lv_a = UnitInventoryGroup(lv_murloc);
                    if ((UnitHasBehavior(lv_murloc, &quot;MurlocChef&quot;) == true)) {
                        UnitGroupLoopBegin(lv_a);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            if ((UnitGetType(UnitGroupLoopCurrent()) != &quot;RawLamb&quot;) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) != &quot;RawWolfMeat&quot;)) {
                            }
                            else {
                                UnitGroupRemove(lv_a, UnitGroupLoopCurrent());
                            }
                        }
                        UnitGroupLoopEnd();
                    }
                    else {
                    }
                    if (((UnitGroupCount(lv_a, c_unitCountAlive) &gt;= 4) || ((UnitGroupCount(lv_a, c_unitCountAlive) &gt;= 1) &amp;&amp; (gv_playerData[lv_i].lv_isAI == true) &amp;&amp; (UnitHasBehavior(lv_murloc, &quot;MurlocContract&quot;) == true) &amp;&amp; (UnitBehaviorDuration(lv_murloc, &quot;MurlocContract&quot;) &lt;= ((IntToFixed(AIPathingCostUnit(lv_murloc, gf_GetDropoffLocation(lv_murloc), c_ignoreEnemyBuildings)) / 1.5) + 5.0))))) {
                        if ((gv_playerData[lv_i].lv_isAI == true) &amp;&amp; (UnitHasBehavior(lv_murloc, &quot;MurlocReturnItems&quot;) == false)) {
                            lv_a = libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup(&quot;StorageOutpost&quot;, lv_i, RegionCircle(UnitGetPosition(lv_murloc), 64.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), 0, 0.0);
                            lv_b = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                            if (gf_UnitExists(lv_b)) {
                                UnitSetCustomValue(lv_murloc, 2, 2.0);
                                UnitSetCustomValue(lv_murloc, 3, PointGetX(UnitGetPosition(lv_b)));
                                UnitSetCustomValue(lv_murloc, 4, PointGetY(UnitGetPosition(lv_b)));
                            }
                            else {
                            }
                        }
                        else {
                        }
                        UnitBehaviorAdd(lv_murloc, &quot;MurlocReturnItems&quot;, lv_murloc, 1);
                    }
                    else {
                        UnitBehaviorRemove(lv_murloc, &quot;MurlocReturnItems&quot;, 1);
                    }
                    lv_a = UnitGroupEmpty();
                    if (((UnitHasBehavior(lv_murloc, &quot;MurlocReturnItems&quot;) == true) || (UnitHasBehavior(lv_murloc, &quot;MurlocForcedReturn&quot;) == true))) {
                        lv_dropoffLoc = gf_GetDropoffLocation(lv_murloc);
                        if ((lv_dropoffLoc != null)) {
                            if ((DistanceBetweenPoints(UnitGetPosition(lv_murloc), lv_dropoffLoc) &lt;= 2.5)) {
                                lv_a = UnitGroup(&quot;StorageOutpost&quot;, lv_i, RegionCircle(lv_dropoffLoc, 2.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                lv_b = UnitGroupClosestToPoint(lv_a, lv_dropoffLoc);
                                if (gf_UnitExists(lv_b) &amp;&amp; (UnitGetCustomValue(lv_murloc, 2) == 2.0) &amp;&amp; (UnitGetCustomValue(lv_b, 0) == 0.0)) {
                                    UnitGroupLoopBegin(UnitInventoryGroup(lv_murloc));
                                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(UnitGetPosition(lv_b), RandomFixed(1.3, 1.6), (AngleBetweenPoints(UnitGetPosition(lv_b), UnitGetPosition(lv_murloc)) + RandomFixed(-60.0, 60.0))), false);
                                        UnitIssueOrder(lv_b, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueAddToEnd);
                                    }
                                    UnitGroupLoopEnd();
                                    UnitBehaviorRemove(lv_murloc, &quot;MurlocReturnItems&quot;, 1);
                                    UnitBehaviorRemove(lv_murloc, &quot;MurlocForcedReturn&quot;, 1);
                                }
                                else {
                                    gf_DropAllItems(lv_murloc);
                                    UnitBehaviorRemove(lv_murloc, &quot;MurlocReturnItems&quot;, 1);
                                    UnitBehaviorRemove(lv_murloc, &quot;MurlocForcedReturn&quot;, 1);
                                }
                            }
                            else {
                                UnitIssueOrder(lv_murloc, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_dropoffLoc), c_orderQueueReplace);
                            }
                        }
                        else {
                            gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/E1809747&quot;), 2.0, 24);
                        }
                    }
                    else if ((UnitHasBehavior(lv_murloc, &quot;MurlocFetchLumber&quot;) == true)) {
                        lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;Lumber&quot;, &quot;InfusedLumber&quot;, &quot;&quot;, c_playerAny, c_unitAllianceAny, RegionCircle(UnitGetPosition(lv_murloc), 5.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        lv_a = gf_UnitsInUnitGroupWithBuff(lv_a, &quot;FreshLumber&quot;);
                        lv_u = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                        if (gf_UnitExists(lv_u) &amp;&amp; gf_Allowedtopickup(lv_murloc, lv_u)) {
                            UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_u), c_orderQueueReplace);
                        }
                        else {
                            if (gf_UnitExists(lv_fNode) &amp;&amp; ((UnitGetType(lv_fNode) == &quot;MapleTree&quot;) || (UnitGetType(lv_fNode) == &quot;ElderTree&quot;))) {
                                UnitIssueOrder(lv_murloc, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_fNode), c_orderQueueReplace);
                            }
                            else {
                                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;MapleTree&quot;, &quot;ElderTree&quot;, &quot;&quot;, c_playerAny, c_unitAllianceAny, RegionCircle(UnitGetPosition(lv_murloc), (32.0 + (BoolToInt(gv_playerData[lv_i].lv_isAI) * 32.0))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                lv_a = gf_UnitsInUnitGroupWithoutBuff(lv_a, &quot;GrowingTree&quot;);
                                lv_u = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                                if (gf_UnitExists(lv_u)) {
                                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_u), c_orderQueueReplace);
                                    gf_SetMurlocFocalNode(lv_murloc, lv_u);
                                }
                                else {
                                    gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/75216AAA&quot;), 2.0, 24);
                                }
                            }
                        }
                    }
                    else if ((UnitHasBehavior(lv_murloc, &quot;MurlocFetchStone&quot;) == true)) {
                        if (gf_UnitExists(lv_fNode) &amp;&amp; (UnitGetType(lv_fNode) == &quot;Stone&quot;) &amp;&amp; (UnitGetCustomValue(lv_fNode, 0) &gt; 1)) {
                            UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_fNode), c_orderQueueReplace);
                        }
                        else {
                            lv_a = UnitGroup(&quot;StoneDeposit&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), (32.0 + (BoolToInt(gv_playerData[lv_i].lv_isAI) * 32.0))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            UnitGroupRemoveUnitGroup(lv_a, libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 1.0));
                            lv_u = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                            if (gf_UnitExists(lv_u)) {
                                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_u), c_orderQueueReplace);
                                gf_SetMurlocFocalNode(lv_murloc, lv_u);
                            }
                            else {
                                gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/8168A55E&quot;), 2.0, 24);
                                if ((gv_playerData[lv_i].lv_isAI == true)) {
                                    UnitIssueOrder(lv_murloc, Order(AbilityCommand(&quot;MurlocOrderGatherLumber&quot;, 0)), c_orderQueueReplace);
                                }
                                else {
                                }
                            }
                        }
                    }
                    else if ((UnitHasBehavior(lv_murloc, &quot;MurlocFetchGold&quot;) == true)) {
                        if (gf_UnitExists(lv_fNode) &amp;&amp; (UnitGetType(lv_fNode) == &quot;GoldDeposit&quot;)) {
                            UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_fNode), c_orderQueueReplace);
                        }
                        else {
                            lv_a = UnitGroup(&quot;GoldDeposit&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), (16.0 + (BoolToInt(gv_playerData[lv_i].lv_isAI) * 48.0))), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            lv_u = UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc));
                            if ((UnitGroupCount(lv_a, c_unitCountAlive) &gt; 0)) {
                                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_u), c_orderQueueReplace);
                                gf_SetMurlocFocalNode(lv_murloc, lv_u);
                            }
                            else {
                                gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/B4299F96&quot;), 2.0, 24);
                                if ((gv_playerData[lv_i].lv_isAI == true)) {
                                    auto7B8F5ED2_val = RandomInt(1, 2);
                                    if (auto7B8F5ED2_val == 1) {
                                        UnitIssueOrder(lv_murloc, Order(AbilityCommand(&quot;MurlocOrderGatherLumber&quot;, 0)), c_orderQueueReplace);
                                    }
                                    else if (auto7B8F5ED2_val == 2) {
                                        UnitIssueOrder(lv_murloc, Order(AbilityCommand(&quot;MurlocOrderMineStone&quot;, 0)), c_orderQueueReplace);
                                    }
                                    else {
                                    }
                                }
                                else {
                                }
                            }
                        }
                    }
                    else if ((UnitHasBehavior(lv_murloc, &quot;MurlocFetchBerries&quot;) == true)) {
                        if (gf_UnitExists(lv_fNode) &amp;&amp; (UnitGetType(lv_fNode) == &quot;BerryBush&quot;) &amp;&amp; (UnitGetCustomValue(lv_fNode, 0) &gt; 1)) {
                            UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_fNode), c_orderQueueReplace);
                        }
                        else {
                            lv_a = UnitGroup(&quot;BerryBush&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            UnitGroupRemoveUnitGroup(lv_a, libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 1.0));
                            if ((UnitGroupCount(lv_a, c_unitCountAlive) &gt; 0)) {
                                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                            }
                            else {
                                gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/AEC0354E&quot;), 1.5, 24);
                            }
                        }
                    }
                    else if ((UnitHasBehavior(lv_murloc, &quot;MurlocFetchHerbs&quot;) == true)) {
                        if (gf_UnitExists(lv_fNode) &amp;&amp; (UnitGetType(lv_fNode) == &quot;CulinaryHerbBush&quot;) &amp;&amp; (UnitGetCustomValue(lv_fNode, 0) &gt; 1)) {
                            UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, lv_fNode), c_orderQueueReplace);
                        }
                        else {
                            lv_a = UnitGroup(&quot;CulinaryHerbBush&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 16.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            UnitGroupRemoveUnitGroup(lv_a, libNtve_gf_UnitsInUnitGroupWithCustomValue(lv_a, 0, 1.0));
                            if ((UnitGroupCount(lv_a, c_unitCountAlive) &gt; 0)) {
                                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                            }
                            else {
                                gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/3F97D47D&quot;), 1.5, 24);
                            }
                        }
                    }
                    else if ((UnitHasBehavior(lv_murloc, &quot;MurlocChef&quot;) == true)) {
                        UnitGroupAddUnitGroup(lv_a, UnitGroupFilter(&quot;RawLamb&quot;, c_playerAny, UnitInventoryGroup(lv_murloc), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                        UnitGroupAddUnitGroup(lv_a, UnitGroupFilter(&quot;RawWolfMeat&quot;, c_playerAny, UnitInventoryGroup(lv_murloc), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                        if ((UnitGroupCount(lv_a, c_unitCountAlive) &gt; 0)) {
                            if ((UnitHasBehavior(lv_murloc, &quot;Heat&quot;) == true) &amp;&amp; (gf_UnitIsBusy(lv_murloc) == false)) {
                                lv_b = UnitGroupRandomUnit(UnitGroupFilter(&quot;RawLamb&quot;, c_playerAny, UnitInventoryGroup(lv_murloc), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                                if ((lv_b != null)) {
                                    UnitRemove(lv_b);
                                    gf_Cooking(lv_murloc, &quot;RoastedLamb&quot;, 5.0);
                                }
                                else {
                                    lv_b = UnitGroupRandomUnit(UnitGroupFilter(&quot;RawWolfMeat&quot;, c_playerAny, UnitInventoryGroup(lv_murloc), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0), c_unitCountAlive);
                                    if ((lv_b != null)) {
                                        UnitRemove(lv_b);
                                        gf_Cooking(lv_murloc, &quot;WolfSteak&quot;, 6.0);
                                    }
                                    else {
                                    }
                                }
                            }
                            else {
                                lv_a = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(&quot;CampfireLit&quot;, &quot;&quot;, &quot;&quot;, UnitGetOwner(lv_murloc), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                if ((UnitGroupCount(lv_a, c_unitCountAlive) &gt; 0)) {
                                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                                }
                                else {
                                    gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/B951E92D&quot;), 1.5, 24);
                                }
                            }
                        }
                        else {
                            lv_a = UnitGroupEmpty();
                            UnitGroupAddUnitGroup(lv_a, UnitGroup(&quot;RawLamb&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 16.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                            UnitGroupAddUnitGroup(lv_a, UnitGroup(&quot;RawWolfMeat&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 16.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                            if ((UnitGroupCount(lv_a, c_unitCountAlive) &gt; 0)) {
                                UnitIssueOrder(lv_murloc, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                            }
                            else {
                                lv_a = UnitGroup(&quot;Sheep&quot;, c_playerAny, RegionCircle(UnitGetPosition(lv_murloc), 32.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                if ((UnitGroupCount(lv_a, c_unitCountAlive) &gt; 0)) {
                                    UnitIssueOrder(lv_murloc, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupClosestToPoint(lv_a, UnitGetPosition(lv_murloc))), c_orderQueueReplace);
                                }
                                else {
                                    gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/8019E3F3&quot;), 1.5, 24);
                                }
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocAction_Init () {
                gt_MurlocAction = TriggerCreate(&quot;gt_MurlocAction_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocAction, c_playerAny, &quot;MurlocActionTrigger&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocAction_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0F7FF7DC">
        <ScriptCode>
            bool gt_MurlocOrderStop_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/8778C219&quot;), 2.0, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderStop_Init () {
                gt_MurlocOrderStop = TriggerCreate(&quot;gt_MurlocOrderStop_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderStop, c_playerAny, &quot;MurlocOrderStop&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderStop_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="FA299619">
        <ScriptCode>
            bool gt_MurlocOrderDrop_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DropAllItems(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/D6E8F81A&quot;), 2.0, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderDrop_Init () {
                gt_MurlocOrderDrop = TriggerCreate(&quot;gt_MurlocOrderDrop_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderDrop, c_playerAny, &quot;MurlocOrderDrop&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderDrop_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F4C5D47F">
        <ScriptCode>
            bool gt_MurlocOrderReturn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;MurlocForcedReturn&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/FE0CAB37&quot;), 2.0, 24);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderReturn_Init () {
                gt_MurlocOrderReturn = TriggerCreate(&quot;gt_MurlocOrderReturn_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderReturn, c_playerAny, &quot;MurlocOrderReturn&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderReturn_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="50C9BF28">
        <ScriptCode>
            bool gt_MurlocOrderMineStone_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/AE8E6EE3&quot;), 2.0, 24);
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;MurlocFetchStone&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderMineStone_Init () {
                gt_MurlocOrderMineStone = TriggerCreate(&quot;gt_MurlocOrderMineStone_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderMineStone, c_playerAny, &quot;MurlocOrderMineStone&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderMineStone_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B325AB37">
        <ScriptCode>
            bool gt_MurlocOrderMineGold_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/BFA2EB51&quot;), 2.0, 24);
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;MurlocFetchGold&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderMineGold_Init () {
                gt_MurlocOrderMineGold = TriggerCreate(&quot;gt_MurlocOrderMineGold_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderMineGold, c_playerAny, &quot;MurlocOrderMineGold&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderMineGold_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="999CB012">
        <ScriptCode>
            bool gt_MurlocOrderGatherLumber_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/27BE95C1&quot;), 2.0, 24);
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;MurlocFetchLumber&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderGatherLumber_Init () {
                gt_MurlocOrderGatherLumber = TriggerCreate(&quot;gt_MurlocOrderGatherLumber_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderGatherLumber, c_playerAny, &quot;MurlocOrderGatherLumber&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderGatherLumber_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4F340855">
        <ScriptCode>
            bool gt_MurlocOrderPickBerries_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/75203EFA&quot;), 2.0, 24);
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;MurlocFetchBerries&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderPickBerries_Init () {
                gt_MurlocOrderPickBerries = TriggerCreate(&quot;gt_MurlocOrderPickBerries_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderPickBerries, c_playerAny, &quot;MurlocOrderPickBerries&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderPickBerries_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="3CAEDFF4">
        <ScriptCode>
            bool gt_MurlocOrderPickHerbs_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/ED5B24A8&quot;), 2.0, 24);
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;MurlocFetchHerbs&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderPickHerbs_Init () {
                gt_MurlocOrderPickHerbs = TriggerCreate(&quot;gt_MurlocOrderPickHerbs_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderPickHerbs, c_playerAny, &quot;MurlocOrderPickHerbs&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderPickHerbs_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="651BBEA7">
        <ScriptCode>
            bool gt_MurlocOrderChef_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_MurlocResetOrders(EventPlayerEffectUsedUnit(c_effectUnitCaster));
                gf_Quicktag(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal(&quot;Param/Value/4CA35177&quot;), 2.0, 24);
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), &quot;MurlocChef&quot;, EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocOrderChef_Init () {
                gt_MurlocOrderChef = TriggerCreate(&quot;gt_MurlocOrderChef_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_MurlocOrderChef, c_playerAny, &quot;MurlocOrderChef&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocOrderChef_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4CAA07AF">
        <ScriptCode>
            bool gt_MurlocDropoffPoint_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_murloc;
                // Variable Initialization
                lv_murloc = EventUnit();
                // Actions
                if (!runActions) {
                    return true;
                }
                if (gf_UnitExists(EventUnitTargetUnit())) {
                    if ((UnitGetType(EventUnitTargetUnit()) == &quot;Kobold&quot;)) {
                        UnitSetCustomValue(lv_murloc, 2, 0.0);
                        UnitSetCustomValue(lv_murloc, 3, 0.0);
                        UnitSetCustomValue(lv_murloc, 4, 0.0);
                        gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/33BA7EF7&quot;), 3.0, 24);
                    }
                    else if ((UnitGetType(EventUnitTargetUnit()) == &quot;StorageOutpost&quot;)) {
                        UnitSetCustomValue(lv_murloc, 2, 2.0);
                        UnitSetCustomValue(lv_murloc, 3, PointGetX(UnitGetPosition(EventUnitTargetUnit())));
                        UnitSetCustomValue(lv_murloc, 4, PointGetY(UnitGetPosition(EventUnitTargetUnit())));
                        gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/1BDFCA39&quot;), 3.0, 24);
                    }
                }
                else {
                    UnitSetCustomValue(lv_murloc, 2, 1.0);
                    UnitSetCustomValue(lv_murloc, 3, PointGetX(EventUnitTargetPoint()));
                    UnitSetCustomValue(lv_murloc, 4, PointGetY(EventUnitTargetPoint()));
                    gf_Quicktag(lv_murloc, StringExternal(&quot;Param/Value/669D8517&quot;), 3.0, 24);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MurlocDropoffPoint_Init () {
                gt_MurlocDropoffPoint = TriggerCreate(&quot;gt_MurlocDropoffPoint_Func&quot;);
                TriggerAddEventUnitAbility(gt_MurlocDropoffPoint, null, AbilityCommand(&quot;MurlocDropoffPoint&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_MurlocDropoffPoint_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="F4108F7E">
        <Item Type="CustomScript" Id="BC6EDDCE"/>
        <Item Type="CustomScript" Id="2AF40713"/>
    </Element>
    <Element Type="CustomScript" Id="BC6EDDCE">
        <ScriptCode>
            bool gt_SetupTutorial1_Func (bool testConds, bool runActions) {
                int autoAEC96220_ae;
                int autoAEC96220_ai;
                // Variable Declarations
                int lv_a;
                text lv_tutorialPrefix;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_tutorialPrefix = StringExternal(&quot;Param/Value/77399EBC&quot;);
                gv_tutorialText[1] = StringExternal(&quot;Param/Value/24C4A6A4&quot;);
                gv_tutorialText[2] = StringExternal(&quot;Param/Value/64C4FB0D&quot;);
                gv_tutorialText[3] = StringExternal(&quot;Param/Value/721DE85E&quot;);
                gv_tutorialText[4] = StringExternal(&quot;Param/Value/3298AFCD&quot;);
                gv_tutorialText[5] = StringExternal(&quot;Param/Value/DFE78479&quot;);
                gv_tutorialText[6] = StringExternal(&quot;Param/Value/ECCCF6EC&quot;);
                gv_tutorialText[7] = StringExternal(&quot;Param/Value/7E3A890B&quot;);
                gv_tutorialText[8] = StringExternal(&quot;Param/Value/41E8971F&quot;);
                gv_tutorialText[9] = StringExternal(&quot;Param/Value/4EC789C3&quot;);
                gv_tutorialText[10] = StringExternal(&quot;Param/Value/D7EABA7E&quot;);
                gv_tutorialText[11] = StringExternal(&quot;Param/Value/5D32BDE3&quot;);
                gv_tutorialText[12] = StringExternal(&quot;Param/Value/E9AC39DB&quot;);
                gv_tutorialText[13] = StringExternal(&quot;Param/Value/49597113&quot;);
                gv_tutorialText[14] = StringExternal(&quot;Param/Value/9AF6BF43&quot;);
                gv_tutorialText[15] = StringExternal(&quot;Param/Value/F23D5124&quot;);
                gv_tutorialText[16] = StringExternal(&quot;Param/Value/DBE55A47&quot;);
                gv_tutorialText[17] = StringExternal(&quot;Param/Value/DD512F22&quot;);
                gv_tutorialText[18] = StringExternal(&quot;Param/Value/0D555093&quot;);
                gv_tutorialText[19] = StringExternal(&quot;Param/Value/D4B4C9A8&quot;);
                gv_tutorialText[20] = StringExternal(&quot;Param/Value/5DB59A19&quot;);
                gv_tutorialText[21] = StringExternal(&quot;Param/Value/E0B05E0B&quot;);
                gv_tutorialText[22] = StringExternal(&quot;Param/Value/2DC56FA0&quot;);
                TextExpressionSetToken(&quot;Param/Expression/A9EF70DE&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/3F885B00&quot;));
                TextExpressionSetToken(&quot;Param/Expression/A9EF70DE&quot;, &quot;B&quot;, PlayerName(1));
                TextExpressionSetToken(&quot;Param/Expression/A9EF70DE&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/59B0793E&quot;));
                gv_tutorialText[23] = TextExpressionAssemble(&quot;Param/Expression/A9EF70DE&quot;);
                gv_tutorialText[24] = StringExternal(&quot;Param/Value/8EB0FEAB&quot;);
                gv_tutorialText[25] = StringExternal(&quot;Param/Value/17ED9FC3&quot;);
                gv_tutorialText[26] = StringExternal(&quot;Param/Value/013EB403&quot;);
                gv_tutorialText[27] = StringExternal(&quot;Param/Value/3A9333F5&quot;);
                gv_tutorialText[28] = StringExternal(&quot;Param/Value/A1F796D9&quot;);
                gv_tutorialText[29] = StringExternal(&quot;Param/Value/A4CC2435&quot;);
                gv_tutorialText[30] = StringExternal(&quot;Param/Value/6CF8C0FF&quot;);
                gv_tutorialText[31] = StringExternal(&quot;Param/Value/42A1B7E8&quot;);
                gv_tutorialText[32] = StringExternal(&quot;Param/Value/A3CED425&quot;);
                gv_tutorialText[33] = StringExternal(&quot;Param/Value/00B7333D&quot;);
                gv_tutorialText[34] = StringExternal(&quot;Param/Value/D4EECF21&quot;);
                gv_tutorialText[35] = StringExternal(&quot;Param/Value/1753A93E&quot;);
                gv_tutorialText[36] = StringExternal(&quot;Param/Value/BE4984DB&quot;);
                gv_tutorialText[37] = StringExternal(&quot;Param/Value/A3875A3D&quot;);
                gv_tutorialText[38] = StringExternal(&quot;Param/Value/C803837D&quot;);
                gv_tutorialText[39] = StringExternal(&quot;Param/Value/FE8B1458&quot;);
                gv_tutorialText[40] = StringExternal(&quot;Param/Value/B23DB080&quot;);
                gv_tutorialText[41] = StringExternal(&quot;Param/Value/F1091026&quot;);
                autoAEC96220_ae = gv_tutorialTexts;
                autoAEC96220_ai = 1;
                lv_a = 1;
                for ( ; ( (autoAEC96220_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoAEC96220_ae) || (autoAEC96220_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoAEC96220_ae) ) ; lv_a += autoAEC96220_ai ) {
                    TextExpressionSetToken(&quot;Param/Expression/B8D1BA16&quot;, &quot;B&quot;, lv_tutorialPrefix);
                    TextExpressionSetToken(&quot;Param/Expression/B8D1BA16&quot;, &quot;A&quot;, gv_tutorialText[lv_a]);
                    gv_tutorialText[lv_a] = TextExpressionAssemble(&quot;Param/Expression/B8D1BA16&quot;);
                }
                libNtve_gf_ShowHideUnit(UnitFromId(79), false);
                libNtve_gf_ShowHideUnit(UnitFromId(127), false);
                libNtve_gf_ShowHideUnit(UnitFromId(1421), false);
                libNtve_gf_ShowHideUnit(UnitFromId(1574), false);
                libNtve_gf_ShowHideUnit(UnitFromId(1573), false);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) != &quot;MapleTree&quot;)) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupTutorial1_Init () {
                gt_SetupTutorial1 = TriggerCreate(&quot;gt_SetupTutorial1_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SetupTutorial1_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="2AF40713">
        <ScriptCode>
            bool gt_SetupTutorial2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 1), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 2), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 4), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 3), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 7), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 6), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 5), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 8), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 15), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 14), false);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;CookingRoastedLamb&quot;, false);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;CookingWolfSteak&quot;, false);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;CookingRoastedPheasantWithBlueberrySauce&quot;, false);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;CookingSpicedLambFeast&quot;, false);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;CookingGrilledWolfEntrecote&quot;, false);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;CookingBeerBraisedPheasant&quot;, false);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;Run&quot;, false);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;PlantTree&quot;, false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;LightTorch&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;DouseFire&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;RefreshCampfire&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;RefreshCampfireExpert&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;DomesticatedSheep&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;PheasantBait&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftWarmWoolTunic&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftLightLeatherShield&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftLantern&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftHuntsmansJacket&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftElderWand&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftEnigmaticStaff&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftLeatherCoat&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftMysticsTribalShield&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftRoughBlunderbuss&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftVengefulMurlocSkull&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftBearShamansShroud&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftVenomousArbalest&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftCelestialOrb&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftWarlocksVestments&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftMasterRangersMaille&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftGravesingersClaw&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftRepeatingCrossbow&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftStormwizardsRobes&quot;, 0), false);
                libNtve_gf_SendActorMessageToUnit(gv_playerData[1].lv_kobold, &quot;AnimGroupApply Alternate&quot;);
                libNtve_gf_SendActorMessageToUnit(gv_playerData[1].lv_kobold, &quot;SetWalkAnimMoveSpeed 1&quot;);
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;CampfireLit&quot;, &quot;LifeRegenRate&quot;, 1, IntToString(0));
                gv_dayDuration = 60.0;
                gv_nightDuration = 40.0;
                DialogSetVisible(gv_skillWindowSmall, PlayerGroupSingle(1), false);
                DialogSetVisible(gv_minimalistSkillDialog, PlayerGroupSingle(1), false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal(&quot;Param/Value/978CC978&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupTutorial2_Init () {
                gt_SetupTutorial2 = TriggerCreate(&quot;gt_SetupTutorial2_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_SetupTutorial2_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="3F427E36">
        <Item Type="CustomScript" Id="69362D05"/>
        <Item Type="CustomScript" Id="71B87CDF"/>
        <Item Type="CustomScript" Id="4939CA68"/>
        <Item Type="CustomScript" Id="9DF9BA1F"/>
        <Item Type="CustomScript" Id="060D09DF"/>
        <Item Type="CustomScript" Id="D8E6AB40"/>
        <Item Type="CustomScript" Id="CE9C5439"/>
        <Item Type="CustomScript" Id="9490CDD0"/>
        <Item Type="CustomScript" Id="B8F70CAB"/>
        <Item Type="CustomScript" Id="503ABAD1"/>
        <Item Type="CustomScript" Id="DA22864F"/>
        <Item Type="CustomScript" Id="82477ED9"/>
        <Item Type="CustomScript" Id="068042F5"/>
        <Item Type="CustomScript" Id="1A2C0C90"/>
    </Element>
    <Element Type="CustomScript" Id="69362D05">
        <ScriptCode>
            bool gt_TutorialPart1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_pauseNextDusk = true;
                gf_ShowTutorialText(1);
                Wait(4.0, c_timeGame);
                gf_ShowTutorialText(2);
                Wait(6.0, c_timeGame);
                gf_ShowTutorialText(3);
                Wait(7.0, c_timeGame);
                gf_ShowTutorialText(4);
                UnitInventoryCreate(gv_playerData[1].lv_kobold, &quot;Lumber&quot;);
                UnitInventoryCreate(gv_playerData[1].lv_kobold, &quot;Stone&quot;);
                Wait(10.0, c_timeGame);
                gf_ShowTutorialText(5);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 1), true);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;KoboldTestBuild&quot;, 1), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart1_Init () {
                gt_TutorialPart1 = TriggerCreate(&quot;gt_TutorialPart1_Func&quot;);
                TriggerAddEventTimeElapsed(gt_TutorialPart1, 1.0, c_timeGame);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart1_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="71B87CDF">
        <ScriptCode>
            bool gt_TutorialPart2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 1), false);
                TriggerEnable(TriggerGetCurrent(), false);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;ConstructCampfire&quot;, 0), false);
                gf_ShowTutorialText(6);
                Wait(10.0, c_timeGame);
                gf_ShowTutorialText(7);
                UnitInventoryCreate(gv_playerData[1].lv_kobold, &quot;RawLamb&quot;);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;CookingRoastedLamb&quot;, true);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;CookingRoastedLamb&quot;, 0), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart2_Init () {
                gt_TutorialPart2 = TriggerCreate(&quot;gt_TutorialPart2_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart2_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="4939CA68">
        <ScriptCode>
            bool gt_TutorialPart3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;CookingRoastedLamb&quot;, 0), false);
                gf_ShowTutorialText(8);
                Wait(5.0, c_timeGame);
                gf_ShowTutorialText(9);
                Wait(12.0, c_timeGame);
                gf_ShowTutorialText(10);
                UnitInventoryCreate(gv_playerData[1].lv_kobold, &quot;Lumber&quot;);
                UnitInventoryCreate(gv_playerData[1].lv_kobold, &quot;Wool&quot;);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 0), true);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;KoboldTestBuild&quot;, 0), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart3_Init () {
                gt_TutorialPart3 = TriggerCreate(&quot;gt_TutorialPart3_Func&quot;);
                TriggerAddEventUnitAbility(gt_TutorialPart3, null, AbilityCommand(&quot;CookingRoastedLamb&quot;, 0), c_abilEffectStageCast, false);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart3_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9DF9BA1F">
        <ScriptCode>
            bool gt_TutorialPart4_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 0), false);
                TriggerEnable(TriggerGetCurrent(), false);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;KoboldTestBuild&quot;, 0), false);
                gf_ShowTutorialText(11);
                Wait(6.0, c_timeGame);
                gf_ShowTutorialText(12);
                Wait(7.0, c_timeGame);
                gf_ShowTutorialText(13);
                libNtve_gf_ShowHideUnit(UnitFromId(79), true);
                libNtve_gf_ShowHideUnit(UnitFromId(127), true);
                libNtve_gf_ShowHideUnit(UnitFromId(1421), true);
                UnitBehaviorAdd(UnitFromId(79), &quot;Strobe&quot;, UnitFromId(79), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart4_Init () {
                gt_TutorialPart4 = TriggerCreate(&quot;gt_TutorialPart4_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart4_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="060D09DF">
        <ScriptCode>
            bool gt_TutorialPart5_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_ShowTutorialText(14);
                libNtve_gf_ShowHideUnit(UnitFromId(1574), true);
                UnitSetCustomValue(UnitFromId(1574), 0, 5.0);
                libNtve_gf_ShowHideUnit(UnitFromId(1573), true);
                UnitSetCustomValue(UnitFromId(1573), 0, 5.0);
                UnitBehaviorAdd(UnitFromId(1574), &quot;Strobe&quot;, UnitFromId(1574), 1);
                TriggerEnable(gt_TutorialPart6, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart5_Init () {
                gt_TutorialPart5 = TriggerCreate(&quot;gt_TutorialPart5_Func&quot;);
                TriggerAddEventUnitDied(gt_TutorialPart5, UnitRefFromUnit(UnitFromId(79)));
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart5_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D8E6AB40">
        <ScriptCode>
            bool gt_TutorialPart55_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_ShowTutorialText(15);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart55_Init () {
                gt_TutorialPart55 = TriggerCreate(&quot;gt_TutorialPart55_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart55_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="CE9C5439">
        <ScriptCode>
            bool gt_TutorialPart6_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TutorialPart55, false);
                TriggerEnable(TriggerGetCurrent(), false);
                gf_ShowTutorialText(16);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 2), true);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;KoboldTestBuild&quot;, 2), true);
                UnitBehaviorRemove(UnitFromId(1574), &quot;Strobe&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart6_Init () {
                gt_TutorialPart6 = TriggerCreate(&quot;gt_TutorialPart6_Func&quot;);
                TriggerEnable(gt_TutorialPart6, false);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart6_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9490CDD0">
        <ScriptCode>
            bool gt_TutorialPart7_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_pauseNextDusk = false;
                gv_pauseNextDawn = true;
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 2), false);
                UnitCreate(1, &quot;Sheep&quot;, 0, 0, PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.0, 270.0), libNtve_gf_RandomAngle());
                UnitCreate(1, &quot;Sheep&quot;, 0, 0, PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.0, 270.0), libNtve_gf_RandomAngle());
                TriggerEnable(TriggerGetCurrent(), false);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;KoboldTestBuild&quot;, 2), false);
                gf_ShowTutorialText(17);
                Wait(8.0, c_timeGame);
                gf_ShowTutorialText(18);
                Wait(5.0, c_timeGame);
                gf_ShowTutorialText(19);
                Wait(9.0, c_timeGame);
                gf_ShowTutorialText(20);
                Wait(20.0, c_timeGame);
                UnitCreate(1, &quot;Lyote&quot;, 0, 15, PointFromId(422), libNtve_gf_RandomAngle());
                Wait(2.0, c_timeGame);
                gf_ShowTutorialText(21);
                Wait(10.0, c_timeGame);
                gf_ShowTutorialText(22);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart7_Init () {
                gt_TutorialPart7 = TriggerCreate(&quot;gt_TutorialPart7_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart7_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B8F70CAB">
        <ScriptCode>
            bool gt_TutorialPart8_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_pauseNextDawn = false;
                gv_pauseNextDusk = true;
                TriggerEnable(TriggerGetCurrent(), false);
                gf_ShowTutorialText(23);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart8_Init () {
                gt_TutorialPart8 = TriggerCreate(&quot;gt_TutorialPart8_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart8_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="503ABAD1">
        <ScriptCode>
            bool gt_TutorialPart9_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_ShowTutorialText(24);
                Wait(9.0, c_timeGame);
                gf_ShowTutorialText(25);
                Wait(10.0, c_timeGame);
                gf_ShowTutorialText(26);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 3), true);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;KoboldTestBuild&quot;, 3), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart9_Init () {
                gt_TutorialPart9 = TriggerCreate(&quot;gt_TutorialPart9_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart9_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="DA22864F">
        <ScriptCode>
            bool gt_TutorialPart10_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;KoboldTestBuild&quot;, 3), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;KoboldTestBuild&quot;, 3), false);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;CraftSturdyWoodenStick&quot;, 0), true);
                gf_ShowTutorialText(27);
                Wait(9.0, c_timeGame);
                gf_ShowTutorialText(28);
                UnitAbilityEnable(gv_playerData[1].lv_kobold, &quot;Run&quot;, true);
                Wait(9.0, c_timeGame);
                gf_ShowTutorialText(29);
                Wait(9.0, c_timeGame);
                gf_ShowTutorialText(30);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart10_Init () {
                gt_TutorialPart10 = TriggerCreate(&quot;gt_TutorialPart10_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart10_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="82477ED9">
        <ScriptCode>
            bool gt_TutorialPart11_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_ShowTutorialText(31);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;CraftSturdyWoodenStick&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftSturdyWoodenStick&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftWarmWoolTunic&quot;, 0), true);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;CraftWarmWoolTunic&quot;, 0), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart11_Init () {
                gt_TutorialPart11 = TriggerCreate(&quot;gt_TutorialPart11_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart11_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="068042F5">
        <ScriptCode>
            bool gt_TutorialPart12_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_pauseNextDusk = false;
                gv_pauseNextDawn = true;
                TriggerEnable(TriggerGetCurrent(), false);
                gf_ShowTutorialText(32);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;CraftWarmWoolTunic&quot;, 0), false);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;CraftWarmWoolTunic&quot;, 0), false);
                Wait(10.0, c_timeGame);
                gf_ShowTutorialText(33);
                Wait(12.0, c_timeGame);
                gf_ShowTutorialText(34);
                Wait(10.0, c_timeGame);
                gf_ShowTutorialText(35);
                TechTreeAbilityAllow(1, AbilityCommand(&quot;LightTorch&quot;, 0), true);
                UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand(&quot;LightTorch&quot;, 0), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart12_Init () {
                gt_TutorialPart12 = TriggerCreate(&quot;gt_TutorialPart12_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart12_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="1A2C0C90">
        <ScriptCode>
            bool gt_TutorialPart13_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_pauseNextDawn = false;
                gv_pauseNextDusk = true;
                TriggerEnable(TriggerGetCurrent(), false);
                gf_ShowTutorialText(36);
                Wait(15.0, c_timeGame);
                gv_gameOver = true;
                gv_winningTeam = 1;
                TriggerEnable(gt_TheBigPeriod, false);
                UnitPauseAll(true);
                SoundtrackPlay(PlayerGroupSingle(1), c_soundtrackCategoryMusic, &quot;KoboldMusicVictory&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal(&quot;Param/Value/5163E47D&quot;));
                gv_hints[1] = StringReplace(gv_hints[1], &quot;1&quot;, 16, 16);
                BankLoad(&quot;nostrobskalufs&quot;, 1);
                BankValueSetFromString(BankLastCreated(), &quot;stats&quot;, &quot;IU8eR7g&quot;, gv_hints[1]);
                BankSave(BankLastCreated());
                CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                DialogSetVisible(gv_perkWindow, PlayerGroupAll(), true);
                gf_UpdatePerkWindow(EventPlayer());
                gf_ShowTutorialText(38);
                Wait(14.0, c_timeGame);
                gf_ShowTutorialText(39);
                Wait(12.0, c_timeGame);
                gf_ShowTutorialText(40);
                Wait(10.0, c_timeGame);
                gf_ShowTutorialText(41);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TutorialPart13_Init () {
                gt_TutorialPart13 = TriggerCreate(&quot;gt_TutorialPart13_Func&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TutorialPart13_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="9BE61B8C">
        <Item Type="CustomScript" Id="F15B27BF"/>
        <Item Type="CustomScript" Id="F0770CC0"/>
        <Item Type="CustomScript" Id="940EDEBE"/>
        <Item Type="CustomScript" Id="45FE018C"/>
        <Item Type="CustomScript" Id="9D6486AF"/>
        <Item Type="CustomScript" Id="26C97094"/>
        <Item Type="CustomScript" Id="14E255C1"/>
        <Item Type="CustomScript" Id="6B18135D"/>
        <Item Type="CustomScript" Id="548C856C"/>
        <Item Type="CustomScript" Id="A3FC5F67"/>
        <Item Type="CustomScript" Id="B946B6CA"/>
        <Item Type="CustomScript" Id="11E6720A"/>
    </Element>
    <Element Type="CustomScript" Id="F15B27BF">
        <ScriptCode>
            bool gt_InGameHintsOff_Func (bool testConds, bool runActions) {
                int autoDB2711A8_ae;
                int autoDB2711A8_ai;
                // Variable Declarations
                int lv_a;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/A89B67C2&quot;));
                autoDB2711A8_ae = gv_inGameHintsAmount;
                autoDB2711A8_ai = 1;
                lv_a = 1;
                for ( ; ( (autoDB2711A8_ai &gt;= 0 &amp;&amp; lv_a &lt;= autoDB2711A8_ae) || (autoDB2711A8_ai &lt;= 0 &amp;&amp; lv_a &gt;= autoDB2711A8_ae) ) ; lv_a += autoDB2711A8_ai ) {
                    gv_hints[EventPlayer()] = StringReplace(gv_hints[EventPlayer()], &quot;1&quot;, lv_a, lv_a);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InGameHintsOff_Init () {
                gt_InGameHintsOff = TriggerCreate(&quot;gt_InGameHintsOff_Func&quot;);
                TriggerAddEventChatMessage(gt_InGameHintsOff, c_playerAny, &quot;-hintsoff&quot;, true);
            }
        </ScriptCode>
        <InitFunc>gt_InGameHintsOff_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="F0770CC0">
        <ScriptCode>
            bool gt_InGameHintsSelection_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_tutorial == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(EventUnit()) == &quot;StoneDeposit&quot;)) {
                    gf_InGameHint(&quot;stone&quot;, EventPlayer());
                }
                else if ((UnitGetType(EventUnit()) == &quot;MapleTree&quot;)) {
                    gf_InGameHint(&quot;tree&quot;, EventPlayer());
                }
                else if (((UnitGetType(EventUnit()) == &quot;ResurrectionShrineSouth&quot;) || (UnitGetType(EventUnit()) == &quot;ResurrectionShrine&quot;))) {
                    gf_InGameHint(&quot;rezz&quot;, EventPlayer());
                }
                else if ((UnitGetType(EventUnit()) == &quot;GoldDeposit&quot;)) {
                    gf_InGameHint(&quot;gold&quot;, EventPlayer());
                }
                else if (((UnitGetType(EventUnit()) == &quot;Bear&quot;) || (UnitGetType(EventUnit()) == &quot;FrostBear&quot;))) {
                    gf_InGameHint(&quot;bear&quot;, EventPlayer());
                }
                else if ((UnitGetType(EventUnit()) == &quot;Smithy&quot;)) {
                    gf_InGameHint(&quot;smithy&quot;, EventPlayer());
                }
                else if ((UnitGetType(EventUnit()) == &quot;BerryBush&quot;)) {
                    gf_InGameHint(&quot;berry&quot;, EventPlayer());
                }
                else if ((UnitGetType(EventUnit()) == &quot;CulinaryHerbBush&quot;)) {
                    gf_InGameHint(&quot;herb&quot;, EventPlayer());
                }
                else if ((UnitGetType(EventUnit()) == &quot;HuntersLodge&quot;)) {
                    gf_InGameHint(&quot;hunter&quot;, EventPlayer());
                }
                else if ((UnitGetType(EventUnit()) == &quot;StorageOutpost&quot;)) {
                    gf_InGameHint(&quot;outpost&quot;, EventPlayer());
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InGameHintsSelection_Init () {
                gt_InGameHintsSelection = TriggerCreate(&quot;gt_InGameHintsSelection_Func&quot;);
                TriggerAddEventUnitSelected(gt_InGameHintsSelection, null, c_playerAny, true);
            }
        </ScriptCode>
        <InitFunc>gt_InGameHintsSelection_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="940EDEBE">
        <ScriptCode>
            bool gt_Nudge_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_p;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_playerData[EventPlayer()].lv_alive == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitHasBehavior(gv_playerData[EventPlayer()].lv_kobold, &quot;Nudgable&quot;) == true)) {
                    lv_p = gf_RandomPathablePoint(RegionCircle(UnitGetPosition(gv_playerData[EventPlayer()].lv_kobold), 8.0));
                    UnitSetPosition(gv_playerData[EventPlayer()].lv_kobold, lv_p, false);
                    UnitGroupLoopBegin(gv_pets[EventPlayer()]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPosition(UnitGroupLoopCurrent(), lv_p, false);
                    }
                    UnitGroupLoopEnd();
                    UnitBehaviorRemove(gv_playerData[EventPlayer()].lv_kobold, &quot;Nudgable&quot;, 1);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal(&quot;Param/Value/318B4945&quot;));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Nudge_Init () {
                gt_Nudge = TriggerCreate(&quot;gt_Nudge_Func&quot;);
                TriggerAddEventChatMessage(gt_Nudge, c_playerAny, &quot;-nudge&quot;, true);
                TriggerAddEventChatMessage(gt_Nudge, c_playerAny, &quot;-stuck&quot;, true);
                TriggerAddEventChatMessage(gt_Nudge, c_playerAny, &quot;-unstuck&quot;, true);
            }
        </ScriptCode>
        <InitFunc>gt_Nudge_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="45FE018C">
        <ScriptCode>
            bool gt_AFKafk_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_aFKUsed[EventPlayer()] == false))) {
                        return false;
                    }
                    if (!(gf_UnitExists(gv_playerData[EventPlayer()].lv_kobold))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/190BE739&quot;));
                gv_aFKUsed[EventPlayer()] = true;
                UnitCreateEffectUnit(gv_playerData[EventPlayer()].lv_kobold, &quot;AFKApply&quot;, gv_playerData[EventPlayer()].lv_kobold);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AFKafk_Init () {
                gt_AFKafk = TriggerCreate(&quot;gt_AFKafk_Func&quot;);
                TriggerAddEventChatMessage(gt_AFKafk, c_playerAny, &quot;-afk&quot;, true);
            }
        </ScriptCode>
        <InitFunc>gt_AFKafk_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="9D6486AF">
        <ScriptCode>
            bool gt_ah_PlayerList_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_admin[EventPlayer()] == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal(&quot;Param/Value/DAEBEF31&quot;));
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    TextExpressionSetToken(&quot;Param/Expression/31400223&quot;, &quot;A&quot;, IntToText(PlayerGroupLoopCurrent()));
                    TextExpressionSetToken(&quot;Param/Expression/31400223&quot;, &quot;B&quot;, StringExternal(&quot;Param/Value/3740DCEA&quot;));
                    TextExpressionSetToken(&quot;Param/Expression/31400223&quot;, &quot;C&quot;, PlayerName(PlayerGroupLoopCurrent()));
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble(&quot;Param/Expression/31400223&quot;));
                }
                PlayerGroupLoopEnd();
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal(&quot;Param/Value/A92C4233&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ah_PlayerList_Init () {
                gt_ah_PlayerList = TriggerCreate(&quot;gt_ah_PlayerList_Func&quot;);
                TriggerAddEventChatMessage(gt_ah_PlayerList, c_playerAny, &quot;-pl&quot;, true);
            }
        </ScriptCode>
        <InitFunc>gt_ah_PlayerList_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="26C97094">
        <ScriptCode>
            bool gt_ah_LevelBoost_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_index;
                const int lv_xp = 5000;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_admin[EventPlayer()] == true))) {
                        return false;
                    }
                    if (!((StringLength(EventChatMessage(false)) == 5))) {
                        return false;
                    }
                    if (!(((StringToFixed(StringSub(EventChatMessage(false), 4, 5)) &gt;= 1) &amp;&amp; (StringToFixed(StringSub(EventChatMessage(false), 4, 5)) &lt;= gv_players)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_index = StringToInt(StringSub(EventChatMessage(false), 4, 5));
                gv_accxp[lv_index] = lv_xp;
                TextExpressionSetToken(&quot;Param/Expression/E70B43AF&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/D25F5351&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E70B43AF&quot;, &quot;B&quot;, IntToText(lv_xp));
                TextExpressionSetToken(&quot;Param/Expression/E70B43AF&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/BF9B4F7E&quot;));
                TextExpressionSetToken(&quot;Param/Expression/E70B43AF&quot;, &quot;D&quot;, PlayerName(lv_index));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble(&quot;Param/Expression/E70B43AF&quot;));
                TextExpressionSetToken(&quot;Param/Expression/4D61776E&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/411BEBCD&quot;));
                TextExpressionSetToken(&quot;Param/Expression/4D61776E&quot;, &quot;B&quot;, IntToText(lv_xp));
                TextExpressionSetToken(&quot;Param/Expression/4D61776E&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/57245239&quot;));
                UIDisplayMessage(PlayerGroupSingle(lv_index), c_messageAreaDebug, TextExpressionAssemble(&quot;Param/Expression/4D61776E&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ah_LevelBoost_Init () {
                gt_ah_LevelBoost = TriggerCreate(&quot;gt_ah_LevelBoost_Func&quot;);
                TriggerAddEventChatMessage(gt_ah_LevelBoost, c_playerAny, &quot;-lb&quot;, false);
            }
        </ScriptCode>
        <InitFunc>gt_ah_LevelBoost_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="14E255C1">
        <ScriptCode>
            bool gt_ah_ConquestPoints_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_index;
                const int lv_cp = 10000;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_admin[EventPlayer()] == true))) {
                        return false;
                    }
                    if (!((StringLength(EventChatMessage(false)) == 5))) {
                        return false;
                    }
                    if (!(((StringToFixed(StringSub(EventChatMessage(false), 4, 5)) &gt;= 1) &amp;&amp; (StringToFixed(StringSub(EventChatMessage(false), 4, 5)) &lt;= gv_players)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_index = StringToInt(StringSub(EventChatMessage(false), 4, 5));
                gv_conqpoints[lv_index] += lv_cp;
                TextExpressionSetToken(&quot;Param/Expression/04E31FE6&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/DC867253&quot;));
                TextExpressionSetToken(&quot;Param/Expression/04E31FE6&quot;, &quot;B&quot;, IntToText(lv_cp));
                TextExpressionSetToken(&quot;Param/Expression/04E31FE6&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/7EB28F30&quot;));
                TextExpressionSetToken(&quot;Param/Expression/04E31FE6&quot;, &quot;D&quot;, PlayerName(lv_index));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble(&quot;Param/Expression/04E31FE6&quot;));
                TextExpressionSetToken(&quot;Param/Expression/9D0CA8BB&quot;, &quot;A&quot;, StringExternal(&quot;Param/Value/C7DD3DC1&quot;));
                TextExpressionSetToken(&quot;Param/Expression/9D0CA8BB&quot;, &quot;B&quot;, IntToText(lv_cp));
                TextExpressionSetToken(&quot;Param/Expression/9D0CA8BB&quot;, &quot;C&quot;, StringExternal(&quot;Param/Value/6D1F57C9&quot;));
                UIDisplayMessage(PlayerGroupSingle(lv_index), c_messageAreaDebug, TextExpressionAssemble(&quot;Param/Expression/9D0CA8BB&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ah_ConquestPoints_Init () {
                gt_ah_ConquestPoints = TriggerCreate(&quot;gt_ah_ConquestPoints_Func&quot;);
                TriggerAddEventChatMessage(gt_ah_ConquestPoints, c_playerAny, &quot;-cp&quot;, false);
            }
        </ScriptCode>
        <InitFunc>gt_ah_ConquestPoints_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="6B18135D">
        <ScriptCode>
            bool gt_GiveAllItemsToTarget_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_carrier;
                unit lv_target;
                unitgroup lv_items;
                // Variable Initialization
                lv_carrier = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                lv_items = UnitInventoryGroup(lv_carrier);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(lv_items);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lv_carrier), false);
                    if (gf_UnitExists(lv_target) &amp;&amp; gf_UnitCanGetItem(lv_target, UnitGetType(UnitGroupLoopCurrent()))) {
                        UnitIssueOrder(lv_target, OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueAddToFront);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                UnitRemove(lv_carrier);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GiveAllItemsToTarget_Init () {
                gt_GiveAllItemsToTarget = TriggerCreate(&quot;gt_GiveAllItemsToTarget_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_GiveAllItemsToTarget, c_playerAny, &quot;GiveAllItemsToTarget&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_GiveAllItemsToTarget_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="548C856C">
        <ScriptCode>
            bool gt_RemoveRecentlyDamaged_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
                        return false;
                    }
                    if (!((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true) &amp;&amp; (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
                    UnitGroupRemove(gv_recentlyDamaged[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], EventPlayerEffectUsedUnit(c_effectUnitTarget));
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveRecentlyDamaged_Init () {
                gt_RemoveRecentlyDamaged = TriggerCreate(&quot;gt_RemoveRecentlyDamaged_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_RemoveRecentlyDamaged, c_playerAny, &quot;RecentlyDamaged&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_RemoveRecentlyDamaged_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="A3FC5F67">
        <ScriptCode>
            bool gt_TextTagQueueTrigger_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_unit;
                int lv_player;
                // Variable Initialization
                lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
                lv_player = UnitGetOwner(lv_unit);
                // Conditions
                if (testConds) {
                    if (!(gf_UnitExists(lv_unit))) {
                        return false;
                    }
                    if (!(((lv_player &gt;= 0) &amp;&amp; (lv_player &lt;= gv_players)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_tTExists[gf_TextTagNextIndex(lv_player, gv_tTCurrentIndex[lv_player])][lv_player] == true)) {
                    if ((lv_unit == gv_tTUnit[gf_TextTagNextIndex(lv_player, gv_tTCurrentIndex[lv_player])][lv_player])) {
                        gf_TextTag(lv_player, true);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TextTagQueueTrigger_Init () {
                gt_TextTagQueueTrigger = TriggerCreate(&quot;gt_TextTagQueueTrigger_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_TextTagQueueTrigger, c_playerAny, &quot;TextTagged&quot;);
            }
        </ScriptCode>
        <InitFunc>gt_TextTagQueueTrigger_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B946B6CA">
        <ScriptCode>
            bool gt_AnyUnitSelected_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((EventUnit() == gv_playerData[EventPlayer()].lv_kobold)) {
                    UnitInventoryContainerOpen(PlayerGroupAll(), EventUnit(), gv_backpackSlot, true);
                }
                else if ((UnitGetType(EventUnit()) == &quot;MurlocSlave&quot;) &amp;&amp; (UnitGetOwner(EventUnit()) == EventPlayer())) {
                    UnitInventoryContainerOpen(PlayerGroupAll(), EventUnit(), 1, true);
                }
                else if ((UnitGetType(EventUnit()) == &quot;StorageOutpost&quot;) &amp;&amp; ((UnitGetOwner(EventUnit()) == EventPlayer()) || ((libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(EventUnit()), 1) == true) &amp;&amp; (UnitHasBehavior(EventUnit(), &quot;Locked&quot;) == false)))) {
                    UnitInventoryContainerOpen(PlayerGroupAll(), EventUnit(), 2, true);
                }
                else if ((UnitGetType(EventUnit()) == &quot;Fortress&quot;) &amp;&amp; (libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(EventUnit()), 1) == true) &amp;&amp; (gv_teamData[gv_playerData[UnitGetOwner(EventUnit())].lv_team].lv_watchTowerStorage == true)) {
                    UnitInventoryContainerOpen(PlayerGroupAll(), EventUnit(), 1, true);
                }
                else if ((UnitGetType(EventUnit()) == &quot;Tavern&quot;) &amp;&amp; (libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(EventUnit()), 1) == true) &amp;&amp; (gv_piratesBeerHint[EventPlayer()] == false) &amp;&amp; (gv_questIndexActive == 11)) {
                    gv_piratesBeerHint[EventPlayer()] = true;
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (TextWithColor(StringExternal(&quot;Param/Value/974758A1&quot;), Color(74.90, 69.02, 58.43)) + StringExternal(&quot;Param/Value/D2296C26&quot;)));
                }
                TriggerExecute(gt_AISelectionDisable, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AnyUnitSelected_Init () {
                gt_AnyUnitSelected = TriggerCreate(&quot;gt_AnyUnitSelected_Func&quot;);
                TriggerAddEventUnitSelected(gt_AnyUnitSelected, null, c_playerAny, true);
            }
        </ScriptCode>
        <InitFunc>gt_AnyUnitSelected_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="11E6720A">
        <ScriptCode>
            bool gt_Memory_Func (bool testConds, bool runActions) {
                int owner = UnitGetOwner(EventUnit());
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Kobold&quot;))) {
                        return false;
                    }
                    if (!((gv_memory[UnitGetOwner(EventUnit())] == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_memory[owner] = true;
                TextTagCreate(StringExternal(&quot;Param/Value/4EAB8906&quot;), 24, PointFromId(2887), 3.0, true, false, PlayerGroupSingle(UnitGetOwner(EventUnit())));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 15.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 5.0);
                TextTagCreate(StringExternal(&quot;DOCSTR_QancakesMemory&quot;), 24, gv_memoryQancakesPoint, 3.0, true, false, PlayerGroupSingle(UnitGetOwner(EventUnit())));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 15.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 5.0);
                Wait(20., c_timeGame);
                gv_memory[owner] = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Memory_Init () {
                gt_Memory = TriggerCreate(&quot;gt_Memory_Func&quot;);
                TriggerAddEventUnitRegion(gt_Memory, null, gv_regionMemory, true);
                gv_memoryQancakesActor = libNtve_gf_CreateActorAtPoint(&quot;Qancakes&quot;, gv_memoryQancakesPoint);
            }
        </ScriptCode>
        <InitFunc>gt_Memory_Init</InitFunc>
    </Element>
    <Element Type="Category" Id="53011D4C">
        <Item Type="CustomScript" Id="ECBC567F"/>
        <Item Type="CustomScript" Id="D36B9DF4"/>
        <Item Type="CustomScript" Id="40D18FEC"/>
        <Item Type="CustomScript" Id="B471AA7F"/>
        <Item Type="CustomScript" Id="0A0918F0"/>
        <Item Type="CustomScript" Id="74780E1D"/>
        <Item Type="CustomScript" Id="EF59D499"/>
        <Item Type="CustomScript" Id="86C95131"/>
    </Element>
    <Element Type="CustomScript" Id="ECBC567F">
        <ScriptCode>
            const string cheatDetectedMessage = &quot;&lt;c val=\&quot;04ADFF\&quot;&gt;Single Player: &lt;/c&gt;&quot; + 
                    &quot;&lt;c val=\&quot;A6D69A\&quot;&gt;I told you not to cheat, no achievements or stats for you.&lt;/c&gt;&quot;;
            bool PreCheat_Message(bool cond, bool actions){
                UIDisplayMessage(PlayerGroupAll(), 1, StringToText(&quot;&lt;c val=\&quot;04ADFF\&quot;&gt;Single Player: &lt;/c&gt;&quot; + 
                        &quot;&lt;c val=\&quot;A6D69A\&quot;&gt;A cheat item has been added to your inventory. If you cheat, achievements and stats will be disabled for the game.&lt;/c&gt;&quot;));
                gf_CreateItemForUnit(gv_playerData[1].lv_kobold, &quot;CheatItem&quot;, 1);
                return true;
            }
            void Cheated(){
                if (gv_cheated){
                    return;
                }
                UIDisplayMessage(PlayerGroupAll(), 1, StringToText(cheatDetectedMessage));
                gv_cheated = true;
            }
            void PreCheat_Init(){
                if (gv_singlePlayer){
                    TriggerAddEventTimeElapsed(TriggerCreate(&quot;PreCheat_Message&quot;), 1.0, c_timeGame);
                }
            }
        </ScriptCode>
        <InitFunc>PreCheat_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="D36B9DF4">
        <ScriptCode>
            bool Cheat_Item(bool cond, bool actions){
                string msg = EventChatMessage(false);
                string item = StringWord(msg, 2);
                int count = StringToInt(StringWord(msg, 3));
                if (count &gt; 0){
                    Cheated();
                    if (count &gt; 20){
                        count = 20;
                    }
                    gf_CreateItemForUnit(gv_playerData[EventPlayer()].lv_kobold, item, count);
                }
                return true;
            }
            void CheatItem_Init(){
                if (gv_singlePlayer){
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Item&quot;), c_playerAny, &quot;-item &quot;, false);
                }
            }
        </ScriptCode>
        <InitFunc>CheatItem_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="40D18FEC">
        <ScriptCode>
            bool Cheat_Restore(bool cond, bool actions){
                int p = EventPlayer();
                Cheated();
                gv_playerData[p].lv_warmth = 100.;
                gv_playerData[p].lv_stamina = 100.;
                gv_playerData[p].lv_hunger = 100.;
                UnitSetPropertyFixed(gv_playerData[p].lv_kobold, c_unitPropLife, 10000);
                UnitSetPropertyFixed(gv_playerData[p].lv_kobold, c_unitPropEnergy, 10000);
                return true;
            }
            bool Cheat_Status(bool cond, bool actions){
                int p = EventPlayer();
                string chat = EventChatMessage(false);
                string status = StringWord(chat, 1);
                fixed amt = StringToFixed(StringWord(chat, 2));
                Cheated();
                if (status == &quot;-warmth&quot;){
                    gv_playerData[p].lv_warmth = amt;
                }
                else if(status == &quot;-hunger&quot;){       
                    gv_playerData[p].lv_hunger = amt;
                }
                else {
                    gv_playerData[p].lv_stamina = amt;
                }
                return true;
            }
            bool Cheat_Gold(bool cond, bool actions){
                string chat = EventChatMessage(false);
                int gold = StringToInt(StringWord(chat, 2));
                Cheated();
                PlayerModifyPropertyInt (EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, gold);
                return true;
            }
            void CheatStatus_Init(){
                if (gv_singlePlayer){
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Restore&quot;), c_playerAny, &quot;-restore&quot;, true);
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Status&quot;), c_playerAny, &quot;-warmth &quot;, false);
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Status&quot;), c_playerAny, &quot;-hunger &quot;, false);
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Status&quot;), c_playerAny, &quot;-stamina &quot;, false);
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Gold&quot;), c_playerAny, &quot;-gold &quot;, false);
                }
            }
        </ScriptCode>
        <InitFunc>CheatStatus_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="B471AA7F">
        <ScriptCode>
            bool Cheat_DayNight(bool cond, bool actions){
                string lightSet;
                Cheated();
                if (EventChatMessage(true) == &quot;-day&quot;){
                    gv_dayNightCycle = gv_dayDuration+gv_nightDuration;
                    lightSet = &quot;Haven&quot;;
                }
                else {
                    gv_dayNightCycle = gv_dayDuration;
                    lightSet = &quot;MeinhoffCampaignNight&quot;;
                    PlayerGroupLoopBegin(PlayerGroupActive());
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        gf_TravelingWizards(PlayerGroupLoopCurrent(), false);
                    }
                    PlayerGroupLoopEnd();
                }
                gf_NewLightset (lightSet, 0.0, false, -1);
                return true;
            }
            void CheatDayNight_Init(){
                if (gv_singlePlayer){
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_DayNight&quot;), c_playerAny, &quot;-day&quot;, true);
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_DayNight&quot;), c_playerAny, &quot;-night&quot;, true);    
                }
            }
        </ScriptCode>
        <InitFunc>CheatDayNight_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="0A0918F0">
        <ScriptCode>
            bool Cheat_Spell(bool cond, bool actions){
                int i = 1;
                int p = EventPlayer();
                Cheated();
                for(; i&lt;9; i+=1){
                    gf_LearnSpell(i, p);
                }
                return true;
            }
            void CheatSpell_Init(){
                if (gv_singlePlayer){
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Spell&quot;), c_playerAny, &quot;-spells&quot;, true);   
                }
            }
        </ScriptCode>
        <InitFunc>CheatSpell_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="74780E1D">
        <ScriptCode>
            fixed[10] expLevel;
            bool[15] expUpdating;
            bool Cheat_Level(bool cond, bool actions){
                string msg = EventChatMessage(false);
                int i = StringToInt(StringWord(msg, 2));
                int p = EventPlayer();
                int c;
                unit kobold = gv_playerData[p].lv_kobold;
                if (gf_UnitExists(kobold) &amp;&amp; i &gt; 0 &amp;&amp; i &lt;= 10 &amp;&amp; !expUpdating[p]){ 
                    Cheated();
                    expUpdating[p] = true;
                    for (c = UnitLevel(kobold); c&lt;= i; c+=1){    
                        UnitSetPropertyFixed(kobold, c_unitPropXP, expLevel[c-1]);  
                        Wait(.1, c_timeGame);
                    }
                    expUpdating[p] = false;
                }
                return true;
            }
            void CheatLevel_Init(){
                int i;
                if (gv_singlePlayer){
                    for(;i&lt;15; i+=1){
                        if (i &lt; 10){
                            if (i == 0){
                                expLevel[i] = 0;
                            }
                            else {
                                expLevel[i] = expLevel[i-1] + 170 + 110*i;
                            }
                        }
                        expUpdating[i] = false;
                    }
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Level&quot;), c_playerAny, &quot;-level &quot;, false);   
                }
            }
        </ScriptCode>
        <InitFunc>CheatLevel_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="EF59D499">
        <ScriptCode>
            bool questCheating = false;
            bool Cheat_Quest(bool cond, bool actions){
                string chat = EventChatMessage(false);
                int i;
                string quest = StringWord(chat, 1);
                bool start = quest != &quot;-questEnd&quot;;
                if(!questCheating){
                    Cheated();
                    questCheating = true;
                    if (quest == &quot;-quest&quot;){
                        i = StringToInt(StringWord(chat, 2));
                        if(i &gt; 0 &amp;&amp; i &lt;= gv_questAmount){
                        }
                    }
                    else if(quest == &quot;-questRandom&quot;){
                        i = RandomInt(1, gv_questAmount);
                    }
                    if(gv_questActive){
                        TimerPause(gv_questTimer, true);
                        TimerStart(gv_questTimer, 0, false, c_timeGame);
                        if (gv_questIndexActive == 10){
                            gv_winterCounter = 0;
                        }
                        else if(gv_questIndexActive == 7){
                            gv_deadnightPhase = 3;
                            gv_dayNightCycle = gv_dayDuration+gv_nightDuration;
                            gf_NewLightset (&quot;Haven&quot;, 0.0, false, -1);
                        }
                        else if(gv_questIndexActive == 15){
                            TimerPause(gv_veilofDarknessTimer, true);
                            TimerStart(gv_veilofDarknessTimer, .0, false, c_timeGame);
                        }
                    }
                    Wait(.5, c_timeGame);
                    if (start){
                        TimerPause(gv_questDelayTimer, true);
                        
                        if ( i== 10){
                            gv_rainCounter = 0;
                        }
                        gv_questCompleted[i] = false;
                        gf_InitializeQuest(i);
                        if( i == 7){
                            gf_DeadnightinitPhase2(0.);
                            gv_dayNightCycle = gv_dayDuration;
                        }
                    }
                    questCheating = false;
                }
                return true;
            }
            void CheatQuest_Init(){
                if (gv_singlePlayer){
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Quest&quot;), c_playerAny, &quot;-quest &quot;, false); 
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Quest&quot;), c_playerAny, &quot;-questRandom&quot;, true); 
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Quest&quot;), c_playerAny, &quot;-questEnd&quot;, true);  
                }
            }
        </ScriptCode>
        <InitFunc>CheatQuest_Init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="86C95131">
        <ScriptCode>
            bool Cheat_Unit(bool cond, bool actions){
                string msg = EventChatMessage(false);
                int p = StringToInt(StringWord(msg, 2));
                string type = StringWord(msg, 3);
                int c = StringToInt(StringWord(msg, 4));
                int player = EventPlayer();
                if (p &gt;= 0 &amp;&amp; p &lt;= 15){
                    if (c &gt; 0){
                        if (c &gt; 20){
                            c = 20;
                        }
                        Cheated();
                        UnitCreate(c, type, 0, p, UnitGetPosition(gv_playerData[player].lv_kobold), 0);
                    }
                }
                return true;
            }
            void Cheat_Init(){
                if (gv_singlePlayer){
                    TriggerAddEventChatMessage(TriggerCreate(&quot;Cheat_Unit&quot;), c_playerAny, &quot;-unit &quot;, false);
                }
            }
        </ScriptCode>
        <InitFunc>Cheat_Init</InitFunc>
    </Element>
</TriggerData>